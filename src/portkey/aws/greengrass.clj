(ns portkey.aws.greengrass (:require [portkey.aws]))

(def
 endpoints
 '{"ap-northeast-1"
   {:credential-scope
    {:service "greengrass", :region "ap-northeast-1"},
    :ssl-common-name "greengrass.ap-northeast-1.amazonaws.com",
    :endpoint "https://greengrass.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "greengrass", :region "eu-west-1"},
    :ssl-common-name "greengrass.eu-west-1.amazonaws.com",
    :endpoint "https://greengrass.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope
    {:service "greengrass", :region "ap-southeast-2"},
    :ssl-common-name "greengrass.ap-southeast-2.amazonaws.com",
    :endpoint "https://greengrass.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "greengrass", :region "eu-central-1"},
    :ssl-common-name "greengrass.eu-central-1.amazonaws.com",
    :endpoint "https://greengrass.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "greengrass", :region "us-west-2"},
    :ssl-common-name "greengrass.us-west-2.amazonaws.com",
    :endpoint "https://greengrass.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "greengrass", :region "us-east-1"},
    :ssl-common-name "greengrass.us-east-1.amazonaws.com",
    :endpoint "https://greengrass.us-east-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-software-to-update)

(clojure.core/declare ser-device-definition-version)

(clojure.core/declare ser-deployment-type)

(clojure.core/declare ser-logger-level)

(clojure.core/declare ser-encoding-type)

(clojure.core/declare ser-connectivity-info)

(clojure.core/declare ser-permission)

(clojure.core/declare ser-logger-type)

(clojure.core/declare ser-list-of-subscription)

(clojure.core/declare ser-string)

(clojure.core/declare ser-function-definition-version)

(clojure.core/declare ser-logger-definition-version)

(clojure.core/declare ser-update-targets)

(clojure.core/declare ser-list-of-device)

(clojure.core/declare ser-list-of-core)

(clojure.core/declare ser-s-3-machine-learning-model-resource-data)

(clojure.core/declare ser-update-targets-architecture)

(clojure.core/declare ser-group-version)

(clojure.core/declare ser-list-of-resource)

(clojure.core/declare ser-update-agent-log-level)

(clojure.core/declare ser-boolean)

(clojure.core/declare ser-resource-definition-version)

(clojure.core/declare ser-list-of-function)

(clojure.core/declare ser-core-definition-version)

(clojure.core/declare ser-subscription-definition-version)

(clojure.core/declare ser-list-of-logger)

(clojure.core/declare ser-update-targets-operating-system)

(clojure.core/declare ser-list-of-resource-access-policy)

(clojure.core/declare ser-sage-maker-machine-learning-model-resource-data)

(clojure.core/declare ser-function-configuration)

(clojure.core/declare ser-function-configuration-environment)

(clojure.core/declare ser-subscription)

(clojure.core/declare ser-list-of-connectivity-info)

(clojure.core/declare ser-core)

(clojure.core/declare ser-resource)

(clojure.core/declare ser-group-owner-setting)

(clojure.core/declare ser-resource-data-container)

(clojure.core/declare ser-function)

(clojure.core/declare ser-integer)

(clojure.core/declare ser-local-volume-resource-data)

(clojure.core/declare ser-s-3-url-signer-role)

(clojure.core/declare ser-device)

(clojure.core/declare ser-logger-component)

(clojure.core/declare ser-resource-access-policy)

(clojure.core/declare ser-local-device-resource-data)

(clojure.core/declare ser-map-of-string)

(clojure.core/declare ser-logger)

(clojure.core/defn- ser-software-to-update [input] #:http.request.field{:value (clojure.core/get {"core" "core", :core "core", "ota_agent" "ota_agent", :ota-agent "ota_agent"} input), :shape "SoftwareToUpdate"})

(clojure.core/defn- ser-device-definition-version [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "DeviceDefinitionVersion", :type "structure"} (clojure.core/contains? input :devices) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-device (input :devices)) #:http.request.field{:name "Devices", :shape "__listOfDevice"}))))

(clojure.core/defn- ser-deployment-type [input] #:http.request.field{:value (clojure.core/get {"NewDeployment" "NewDeployment", :new-deployment "NewDeployment", "Redeployment" "Redeployment", :redeployment "Redeployment", "ResetDeployment" "ResetDeployment", :reset-deployment "ResetDeployment", "ForceResetDeployment" "ForceResetDeployment", :force-reset-deployment "ForceResetDeployment"} input), :shape "DeploymentType"})

(clojure.core/defn- ser-logger-level [input] #:http.request.field{:value (clojure.core/get {:warn "WARN", "WARN" "WARN", :debug "DEBUG", "ERROR" "ERROR", :fatal "FATAL", "DEBUG" "DEBUG", "FATAL" "FATAL", :info "INFO", :error "ERROR", "INFO" "INFO"} input), :shape "LoggerLevel"})

(clojure.core/defn- ser-encoding-type [input] #:http.request.field{:value (clojure.core/get {"binary" "binary", :binary "binary", "json" "json", :json "json"} input), :shape "EncodingType"})

(clojure.core/defn- ser-connectivity-info [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ConnectivityInfo", :type "structure"} (clojure.core/contains? input :host-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :host-address)) #:http.request.field{:name "HostAddress", :shape "__string"})) (clojure.core/contains? input :id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :shape "__string"})) (clojure.core/contains? input :metadata) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :metadata)) #:http.request.field{:name "Metadata", :shape "__string"})) (clojure.core/contains? input :port-number) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :port-number)) #:http.request.field{:name "PortNumber", :shape "__integer"}))))

(clojure.core/defn- ser-permission [input] #:http.request.field{:value (clojure.core/get {"ro" "ro", :ro "ro", "rw" "rw", :rw "rw"} input), :shape "Permission"})

(clojure.core/defn- ser-logger-type [input] #:http.request.field{:value (clojure.core/get {"FileSystem" "FileSystem", :file-system "FileSystem", "AWSCloudWatch" "AWSCloudWatch", :aws-cloud-watch "AWSCloudWatch"} input), :shape "LoggerType"})

(clojure.core/defn- ser-list-of-subscription [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-subscription coll) #:http.request.field{:shape "Subscription"}))) input), :shape "__listOfSubscription", :type "list"})

(clojure.core/defn- ser-string [input] #:http.request.field{:value input, :shape "__string"})

(clojure.core/defn- ser-function-definition-version [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "FunctionDefinitionVersion", :type "structure"} (clojure.core/contains? input :functions) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-function (input :functions)) #:http.request.field{:name "Functions", :shape "__listOfFunction"}))))

(clojure.core/defn- ser-logger-definition-version [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LoggerDefinitionVersion", :type "structure"} (clojure.core/contains? input :loggers) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-logger (input :loggers)) #:http.request.field{:name "Loggers", :shape "__listOfLogger"}))))

(clojure.core/defn- ser-update-targets [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "__string"}))) input), :shape "UpdateTargets", :type "list"})

(clojure.core/defn- ser-list-of-device [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-device coll) #:http.request.field{:shape "Device"}))) input), :shape "__listOfDevice", :type "list"})

(clojure.core/defn- ser-list-of-core [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-core coll) #:http.request.field{:shape "Core"}))) input), :shape "__listOfCore", :type "list"})

(clojure.core/defn- ser-s-3-machine-learning-model-resource-data [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "S3MachineLearningModelResourceData", :type "structure"} (clojure.core/contains? input :destination-path) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :destination-path)) #:http.request.field{:name "DestinationPath", :shape "__string"})) (clojure.core/contains? input :s-3-uri) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :s-3-uri)) #:http.request.field{:name "S3Uri", :shape "__string"}))))

(clojure.core/defn- ser-update-targets-architecture [input] #:http.request.field{:value (clojure.core/get {"armv7l" "armv7l", :armv-7l "armv7l", "x86_64" "x86_64", :x-86-64 "x86_64", "aarch64" "aarch64", :aarch-64 "aarch64"} input), :shape "UpdateTargetsArchitecture"})

(clojure.core/defn- ser-group-version [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "GroupVersion", :type "structure"} (clojure.core/contains? input :core-definition-version-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :core-definition-version-arn)) #:http.request.field{:name "CoreDefinitionVersionArn", :shape "__string"})) (clojure.core/contains? input :device-definition-version-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :device-definition-version-arn)) #:http.request.field{:name "DeviceDefinitionVersionArn", :shape "__string"})) (clojure.core/contains? input :function-definition-version-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :function-definition-version-arn)) #:http.request.field{:name "FunctionDefinitionVersionArn", :shape "__string"})) (clojure.core/contains? input :logger-definition-version-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :logger-definition-version-arn)) #:http.request.field{:name "LoggerDefinitionVersionArn", :shape "__string"})) (clojure.core/contains? input :resource-definition-version-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :resource-definition-version-arn)) #:http.request.field{:name "ResourceDefinitionVersionArn", :shape "__string"})) (clojure.core/contains? input :subscription-definition-version-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subscription-definition-version-arn)) #:http.request.field{:name "SubscriptionDefinitionVersionArn", :shape "__string"}))))

(clojure.core/defn- ser-list-of-resource [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-resource coll) #:http.request.field{:shape "Resource"}))) input), :shape "__listOfResource", :type "list"})

(clojure.core/defn- ser-update-agent-log-level [input] #:http.request.field{:value (clojure.core/get {:warn "WARN", :trace "TRACE", "WARN" "WARN", :verbose "VERBOSE", :debug "DEBUG", "ERROR" "ERROR", :fatal "FATAL", "NONE" "NONE", "TRACE" "TRACE", "DEBUG" "DEBUG", "VERBOSE" "VERBOSE", "FATAL" "FATAL", :info "INFO", :error "ERROR", "INFO" "INFO", :none "NONE"} input), :shape "UpdateAgentLogLevel"})

(clojure.core/defn- ser-boolean [input] #:http.request.field{:value input, :shape "__boolean"})

(clojure.core/defn- ser-resource-definition-version [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ResourceDefinitionVersion", :type "structure"} (clojure.core/contains? input :resources) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-resource (input :resources)) #:http.request.field{:name "Resources", :shape "__listOfResource"}))))

(clojure.core/defn- ser-list-of-function [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-function coll) #:http.request.field{:shape "Function"}))) input), :shape "__listOfFunction", :type "list"})

(clojure.core/defn- ser-core-definition-version [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "CoreDefinitionVersion", :type "structure"} (clojure.core/contains? input :cores) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-core (input :cores)) #:http.request.field{:name "Cores", :shape "__listOfCore"}))))

(clojure.core/defn- ser-subscription-definition-version [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "SubscriptionDefinitionVersion", :type "structure"} (clojure.core/contains? input :subscriptions) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-subscription (input :subscriptions)) #:http.request.field{:name "Subscriptions", :shape "__listOfSubscription"}))))

(clojure.core/defn- ser-list-of-logger [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-logger coll) #:http.request.field{:shape "Logger"}))) input), :shape "__listOfLogger", :type "list"})

(clojure.core/defn- ser-update-targets-operating-system [input] #:http.request.field{:value (clojure.core/get {"ubuntu" "ubuntu", :ubuntu "ubuntu", "raspbian" "raspbian", :raspbian "raspbian", "amazon_linux" "amazon_linux", :amazon-linux "amazon_linux"} input), :shape "UpdateTargetsOperatingSystem"})

(clojure.core/defn- ser-list-of-resource-access-policy [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-resource-access-policy coll) #:http.request.field{:shape "ResourceAccessPolicy"}))) input), :shape "__listOfResourceAccessPolicy", :type "list"})

(clojure.core/defn- ser-sage-maker-machine-learning-model-resource-data [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "SageMakerMachineLearningModelResourceData", :type "structure"} (clojure.core/contains? input :destination-path) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :destination-path)) #:http.request.field{:name "DestinationPath", :shape "__string"})) (clojure.core/contains? input :sage-maker-job-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :sage-maker-job-arn)) #:http.request.field{:name "SageMakerJobArn", :shape "__string"}))))

(clojure.core/defn- ser-function-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "FunctionConfiguration", :type "structure"} (clojure.core/contains? input :encoding-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-encoding-type (input :encoding-type)) #:http.request.field{:name "EncodingType", :shape "EncodingType"})) (clojure.core/contains? input :environment) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-function-configuration-environment (input :environment)) #:http.request.field{:name "Environment", :shape "FunctionConfigurationEnvironment"})) (clojure.core/contains? input :exec-args) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :exec-args)) #:http.request.field{:name "ExecArgs", :shape "__string"})) (clojure.core/contains? input :executable) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :executable)) #:http.request.field{:name "Executable", :shape "__string"})) (clojure.core/contains? input :memory-size) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :memory-size)) #:http.request.field{:name "MemorySize", :shape "__integer"})) (clojure.core/contains? input :pinned) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :pinned)) #:http.request.field{:name "Pinned", :shape "__boolean"})) (clojure.core/contains? input :timeout) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :timeout)) #:http.request.field{:name "Timeout", :shape "__integer"}))))

(clojure.core/defn- ser-function-configuration-environment [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "FunctionConfigurationEnvironment", :type "structure"} (clojure.core/contains? input :access-sysfs) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :access-sysfs)) #:http.request.field{:name "AccessSysfs", :shape "__boolean"})) (clojure.core/contains? input :resource-access-policies) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-resource-access-policy (input :resource-access-policies)) #:http.request.field{:name "ResourceAccessPolicies", :shape "__listOfResourceAccessPolicy"})) (clojure.core/contains? input :variables) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-map-of-string (input :variables)) #:http.request.field{:name "Variables", :shape "__mapOf__string"}))))

(clojure.core/defn- ser-subscription [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Subscription", :type "structure"} (clojure.core/contains? input :id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :shape "__string"})) (clojure.core/contains? input :source) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source)) #:http.request.field{:name "Source", :shape "__string"})) (clojure.core/contains? input :subject) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subject)) #:http.request.field{:name "Subject", :shape "__string"})) (clojure.core/contains? input :target) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :target)) #:http.request.field{:name "Target", :shape "__string"}))))

(clojure.core/defn- ser-list-of-connectivity-info [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-connectivity-info coll) #:http.request.field{:shape "ConnectivityInfo"}))) input), :shape "__listOfConnectivityInfo", :type "list"})

(clojure.core/defn- ser-core [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Core", :type "structure"} (clojure.core/contains? input :certificate-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :certificate-arn)) #:http.request.field{:name "CertificateArn", :shape "__string"})) (clojure.core/contains? input :id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :shape "__string"})) (clojure.core/contains? input :sync-shadow) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :sync-shadow)) #:http.request.field{:name "SyncShadow", :shape "__boolean"})) (clojure.core/contains? input :thing-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :thing-arn)) #:http.request.field{:name "ThingArn", :shape "__string"}))))

(clojure.core/defn- ser-resource [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Resource", :type "structure"} (clojure.core/contains? input :id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :shape "__string"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"})) (clojure.core/contains? input :resource-data-container) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-resource-data-container (input :resource-data-container)) #:http.request.field{:name "ResourceDataContainer", :shape "ResourceDataContainer"}))))

(clojure.core/defn- ser-group-owner-setting [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "GroupOwnerSetting", :type "structure"} (clojure.core/contains? input :auto-add-group-owner) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :auto-add-group-owner)) #:http.request.field{:name "AutoAddGroupOwner", :shape "__boolean"})) (clojure.core/contains? input :group-owner) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-owner)) #:http.request.field{:name "GroupOwner", :shape "__string"}))))

(clojure.core/defn- ser-resource-data-container [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ResourceDataContainer", :type "structure"} (clojure.core/contains? input :local-device-resource-data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-local-device-resource-data (input :local-device-resource-data)) #:http.request.field{:name "LocalDeviceResourceData", :shape "LocalDeviceResourceData"})) (clojure.core/contains? input :local-volume-resource-data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-local-volume-resource-data (input :local-volume-resource-data)) #:http.request.field{:name "LocalVolumeResourceData", :shape "LocalVolumeResourceData"})) (clojure.core/contains? input :s-3-machine-learning-model-resource-data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-s-3-machine-learning-model-resource-data (input :s-3-machine-learning-model-resource-data)) #:http.request.field{:name "S3MachineLearningModelResourceData", :shape "S3MachineLearningModelResourceData"})) (clojure.core/contains? input :sage-maker-machine-learning-model-resource-data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-sage-maker-machine-learning-model-resource-data (input :sage-maker-machine-learning-model-resource-data)) #:http.request.field{:name "SageMakerMachineLearningModelResourceData", :shape "SageMakerMachineLearningModelResourceData"}))))

(clojure.core/defn- ser-function [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Function", :type "structure"} (clojure.core/contains? input :function-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :function-arn)) #:http.request.field{:name "FunctionArn", :shape "__string"})) (clojure.core/contains? input :function-configuration) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-function-configuration (input :function-configuration)) #:http.request.field{:name "FunctionConfiguration", :shape "FunctionConfiguration"})) (clojure.core/contains? input :id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :shape "__string"}))))

(clojure.core/defn- ser-integer [input] #:http.request.field{:value input, :shape "__integer"})

(clojure.core/defn- ser-local-volume-resource-data [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LocalVolumeResourceData", :type "structure"} (clojure.core/contains? input :destination-path) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :destination-path)) #:http.request.field{:name "DestinationPath", :shape "__string"})) (clojure.core/contains? input :group-owner-setting) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-group-owner-setting (input :group-owner-setting)) #:http.request.field{:name "GroupOwnerSetting", :shape "GroupOwnerSetting"})) (clojure.core/contains? input :source-path) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-path)) #:http.request.field{:name "SourcePath", :shape "__string"}))))

(clojure.core/defn- ser-s-3-url-signer-role [input] #:http.request.field{:value input, :shape "S3UrlSignerRole"})

(clojure.core/defn- ser-device [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Device", :type "structure"} (clojure.core/contains? input :certificate-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :certificate-arn)) #:http.request.field{:name "CertificateArn", :shape "__string"})) (clojure.core/contains? input :id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :shape "__string"})) (clojure.core/contains? input :sync-shadow) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :sync-shadow)) #:http.request.field{:name "SyncShadow", :shape "__boolean"})) (clojure.core/contains? input :thing-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :thing-arn)) #:http.request.field{:name "ThingArn", :shape "__string"}))))

(clojure.core/defn- ser-logger-component [input] #:http.request.field{:value (clojure.core/get {"GreengrassSystem" "GreengrassSystem", :greengrass-system "GreengrassSystem", "Lambda" "Lambda", :lambda "Lambda"} input), :shape "LoggerComponent"})

(clojure.core/defn- ser-resource-access-policy [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ResourceAccessPolicy", :type "structure"} (clojure.core/contains? input :permission) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-permission (input :permission)) #:http.request.field{:name "Permission", :shape "Permission"})) (clojure.core/contains? input :resource-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :resource-id)) #:http.request.field{:name "ResourceId", :shape "__string"}))))

(clojure.core/defn- ser-local-device-resource-data [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LocalDeviceResourceData", :type "structure"} (clojure.core/contains? input :group-owner-setting) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-group-owner-setting (input :group-owner-setting)) #:http.request.field{:name "GroupOwnerSetting", :shape "GroupOwnerSetting"})) (clojure.core/contains? input :source-path) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-path)) #:http.request.field{:name "SourcePath", :shape "__string"}))))

(clojure.core/defn- ser-map-of-string [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [[k v]] [(clojure.core/into (ser-string k) #:http.request.field{:map-info "key", :shape "__string"}) (clojure.core/into (ser-string v) #:http.request.field{:map-info "value", :shape "__string"})])) input), :shape "__mapOf__string", :type "map"})

(clojure.core/defn- ser-logger [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Logger", :type "structure"} (clojure.core/contains? input :component) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-logger-component (input :component)) #:http.request.field{:name "Component", :shape "LoggerComponent"})) (clojure.core/contains? input :id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :shape "__string"})) (clojure.core/contains? input :level) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-logger-level (input :level)) #:http.request.field{:name "Level", :shape "LoggerLevel"})) (clojure.core/contains? input :space) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :space)) #:http.request.field{:name "Space", :shape "__integer"})) (clojure.core/contains? input :type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-logger-type (input :type)) #:http.request.field{:name "Type", :shape "LoggerType"}))))

(clojure.core/defn- req-update-function-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :function-definition-id)) #:http.request.field{:name "FunctionDefinitionId", :shape "__string", :location "uri", :location-name "FunctionDefinitionId"})]} (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-create-core-definition-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :initial-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-core-definition-version (input :initial-version)) #:http.request.field{:name "InitialVersion", :shape "CoreDefinitionVersion"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-list-core-definition-versions-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :core-definition-id)) #:http.request.field{:name "CoreDefinitionId", :shape "__string", :location "uri", :location-name "CoreDefinitionId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-update-resource-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :resource-definition-id)) #:http.request.field{:name "ResourceDefinitionId", :shape "__string", :location "uri", :location-name "ResourceDefinitionId"})]} (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-create-core-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :core-definition-id)) #:http.request.field{:name "CoreDefinitionId", :shape "__string", :location "uri", :location-name "CoreDefinitionId"})]} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :cores) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-core (input :cores)) #:http.request.field{:name "Cores", :shape "__listOfCore"}))))

(clojure.core/defn- req-create-logger-definition-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :initial-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-logger-definition-version (input :initial-version)) #:http.request.field{:name "InitialVersion", :shape "LoggerDefinitionVersion"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-create-logger-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :logger-definition-id)) #:http.request.field{:name "LoggerDefinitionId", :shape "__string", :location "uri", :location-name "LoggerDefinitionId"})]} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :loggers) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-logger (input :loggers)) #:http.request.field{:name "Loggers", :shape "__listOfLogger"}))))

(clojure.core/defn- req-associate-role-to-group-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]} (clojure.core/contains? input :role-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :role-arn)) #:http.request.field{:name "RoleArn", :shape "__string"}))))

(clojure.core/defn- req-create-device-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :device-definition-id)) #:http.request.field{:name "DeviceDefinitionId", :shape "__string", :location "uri", :location-name "DeviceDefinitionId"})]} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :devices) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-device (input :devices)) #:http.request.field{:name "Devices", :shape "__listOfDevice"}))))

(clojure.core/defn- req-get-device-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :device-definition-id)) #:http.request.field{:name "DeviceDefinitionId", :shape "__string", :location "uri", :location-name "DeviceDefinitionId"})]}))

(clojure.core/defn- req-list-subscription-definition-versions-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :subscription-definition-id)) #:http.request.field{:name "SubscriptionDefinitionId", :shape "__string", :location "uri", :location-name "SubscriptionDefinitionId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-get-service-role-for-account-request [input] (clojure.core/cond-> {}))

(clojure.core/defn- req-associate-service-role-to-account-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :role-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :role-arn)) #:http.request.field{:name "RoleArn", :shape "__string"}))))

(clojure.core/defn- req-get-subscription-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :subscription-definition-id)) #:http.request.field{:name "SubscriptionDefinitionId", :shape "__string", :location "uri", :location-name "SubscriptionDefinitionId"}) (clojure.core/into (ser-string (input :subscription-definition-version-id)) #:http.request.field{:name "SubscriptionDefinitionVersionId", :shape "__string", :location "uri", :location-name "SubscriptionDefinitionVersionId"})]}))

(clojure.core/defn- req-list-logger-definition-versions-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :logger-definition-id)) #:http.request.field{:name "LoggerDefinitionId", :shape "__string", :location "uri", :location-name "LoggerDefinitionId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-list-core-definitions-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-get-resource-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :resource-definition-version-id)) #:http.request.field{:name "ResourceDefinitionVersionId", :shape "__string", :location "uri", :location-name "ResourceDefinitionVersionId"}) (clojure.core/into (ser-string (input :resource-definition-id)) #:http.request.field{:name "ResourceDefinitionId", :shape "__string", :location "uri", :location-name "ResourceDefinitionId"})]}))

(clojure.core/defn- req-create-group-certificate-authority-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"}))))

(clojure.core/defn- req-list-resource-definition-versions-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :resource-definition-id)) #:http.request.field{:name "ResourceDefinitionId", :shape "__string", :location "uri", :location-name "ResourceDefinitionId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-get-function-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :function-definition-id)) #:http.request.field{:name "FunctionDefinitionId", :shape "__string", :location "uri", :location-name "FunctionDefinitionId"}) (clojure.core/into (ser-string (input :function-definition-version-id)) #:http.request.field{:name "FunctionDefinitionVersionId", :shape "__string", :location "uri", :location-name "FunctionDefinitionVersionId"})]}))

(clojure.core/defn- req-get-associated-role-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]}))

(clojure.core/defn- req-get-subscription-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :subscription-definition-id)) #:http.request.field{:name "SubscriptionDefinitionId", :shape "__string", :location "uri", :location-name "SubscriptionDefinitionId"})]}))

(clojure.core/defn- req-get-device-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :device-definition-version-id)) #:http.request.field{:name "DeviceDefinitionVersionId", :shape "__string", :location "uri", :location-name "DeviceDefinitionVersionId"}) (clojure.core/into (ser-string (input :device-definition-id)) #:http.request.field{:name "DeviceDefinitionId", :shape "__string", :location "uri", :location-name "DeviceDefinitionId"})]}))

(clojure.core/defn- req-list-subscription-definitions-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-update-subscription-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :subscription-definition-id)) #:http.request.field{:name "SubscriptionDefinitionId", :shape "__string", :location "uri", :location-name "SubscriptionDefinitionId"})]} (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-disassociate-role-from-group-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]}))

(clojure.core/defn- req-list-group-versions-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-list-device-definitions-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-update-connectivity-info-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :thing-name)) #:http.request.field{:name "ThingName", :shape "__string", :location "uri", :location-name "ThingName"})]} (clojure.core/contains? input :connectivity-info) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-connectivity-info (input :connectivity-info)) #:http.request.field{:name "ConnectivityInfo", :shape "__listOfConnectivityInfo"}))))

(clojure.core/defn- req-list-function-definition-versions-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :function-definition-id)) #:http.request.field{:name "FunctionDefinitionId", :shape "__string", :location "uri", :location-name "FunctionDefinitionId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-create-function-definition-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :initial-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-function-definition-version (input :initial-version)) #:http.request.field{:name "InitialVersion", :shape "FunctionDefinitionVersion"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-list-logger-definitions-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-get-resource-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :resource-definition-id)) #:http.request.field{:name "ResourceDefinitionId", :shape "__string", :location "uri", :location-name "ResourceDefinitionId"})]}))

(clojure.core/defn- req-delete-function-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :function-definition-id)) #:http.request.field{:name "FunctionDefinitionId", :shape "__string", :location "uri", :location-name "FunctionDefinitionId"})]}))

(clojure.core/defn- req-get-logger-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :logger-definition-version-id)) #:http.request.field{:name "LoggerDefinitionVersionId", :shape "__string", :location "uri", :location-name "LoggerDefinitionVersionId"}) (clojure.core/into (ser-string (input :logger-definition-id)) #:http.request.field{:name "LoggerDefinitionId", :shape "__string", :location "uri", :location-name "LoggerDefinitionId"})]}))

(clojure.core/defn- req-list-deployments-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-create-deployment-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :deployment-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :deployment-id)) #:http.request.field{:name "DeploymentId", :shape "__string"})) (clojure.core/contains? input :deployment-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-deployment-type (input :deployment-type)) #:http.request.field{:name "DeploymentType", :shape "DeploymentType"})) (clojure.core/contains? input :group-version-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-version-id)) #:http.request.field{:name "GroupVersionId", :shape "__string"}))))

(clojure.core/defn- req-delete-group-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]}))

(clojure.core/defn- req-delete-subscription-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :subscription-definition-id)) #:http.request.field{:name "SubscriptionDefinitionId", :shape "__string", :location "uri", :location-name "SubscriptionDefinitionId"})]}))

(clojure.core/defn- req-list-group-certificate-authorities-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]}))

(clojure.core/defn- req-update-logger-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :logger-definition-id)) #:http.request.field{:name "LoggerDefinitionId", :shape "__string", :location "uri", :location-name "LoggerDefinitionId"})]} (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-delete-core-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :core-definition-id)) #:http.request.field{:name "CoreDefinitionId", :shape "__string", :location "uri", :location-name "CoreDefinitionId"})]}))

(clojure.core/defn- req-update-group-certificate-configuration-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]} (clojure.core/contains? input :certificate-expiry-in-milliseconds) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :certificate-expiry-in-milliseconds)) #:http.request.field{:name "CertificateExpiryInMilliseconds", :shape "__string"}))))

(clojure.core/defn- req-get-deployment-status-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"}) (clojure.core/into (ser-string (input :deployment-id)) #:http.request.field{:name "DeploymentId", :shape "__string", :location "uri", :location-name "DeploymentId"})]}))

(clojure.core/defn- req-create-group-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :core-definition-version-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :core-definition-version-arn)) #:http.request.field{:name "CoreDefinitionVersionArn", :shape "__string"})) (clojure.core/contains? input :device-definition-version-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :device-definition-version-arn)) #:http.request.field{:name "DeviceDefinitionVersionArn", :shape "__string"})) (clojure.core/contains? input :function-definition-version-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :function-definition-version-arn)) #:http.request.field{:name "FunctionDefinitionVersionArn", :shape "__string"})) (clojure.core/contains? input :logger-definition-version-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :logger-definition-version-arn)) #:http.request.field{:name "LoggerDefinitionVersionArn", :shape "__string"})) (clojure.core/contains? input :resource-definition-version-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :resource-definition-version-arn)) #:http.request.field{:name "ResourceDefinitionVersionArn", :shape "__string"})) (clojure.core/contains? input :subscription-definition-version-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subscription-definition-version-arn)) #:http.request.field{:name "SubscriptionDefinitionVersionArn", :shape "__string"}))))

(clojure.core/defn- req-update-core-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :core-definition-id)) #:http.request.field{:name "CoreDefinitionId", :shape "__string", :location "uri", :location-name "CoreDefinitionId"})]} (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-get-core-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :core-definition-id)) #:http.request.field{:name "CoreDefinitionId", :shape "__string", :location "uri", :location-name "CoreDefinitionId"}) (clojure.core/into (ser-string (input :core-definition-version-id)) #:http.request.field{:name "CoreDefinitionVersionId", :shape "__string", :location "uri", :location-name "CoreDefinitionVersionId"})]}))

(clojure.core/defn- req-create-software-update-job-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :s-3-url-signer-role) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-s-3-url-signer-role (input :s-3-url-signer-role)) #:http.request.field{:name "S3UrlSignerRole", :shape "S3UrlSignerRole"})) (clojure.core/contains? input :software-to-update) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-software-to-update (input :software-to-update)) #:http.request.field{:name "SoftwareToUpdate", :shape "SoftwareToUpdate"})) (clojure.core/contains? input :update-agent-log-level) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-update-agent-log-level (input :update-agent-log-level)) #:http.request.field{:name "UpdateAgentLogLevel", :shape "UpdateAgentLogLevel"})) (clojure.core/contains? input :update-targets) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-update-targets (input :update-targets)) #:http.request.field{:name "UpdateTargets", :shape "UpdateTargets"})) (clojure.core/contains? input :update-targets-architecture) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-update-targets-architecture (input :update-targets-architecture)) #:http.request.field{:name "UpdateTargetsArchitecture", :shape "UpdateTargetsArchitecture"})) (clojure.core/contains? input :update-targets-operating-system) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-update-targets-operating-system (input :update-targets-operating-system)) #:http.request.field{:name "UpdateTargetsOperatingSystem", :shape "UpdateTargetsOperatingSystem"}))))

(clojure.core/defn- req-list-resource-definitions-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-list-device-definition-versions-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :device-definition-id)) #:http.request.field{:name "DeviceDefinitionId", :shape "__string", :location "uri", :location-name "DeviceDefinitionId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-list-groups-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-reset-deployments-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :force) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :force)) #:http.request.field{:name "Force", :shape "__boolean"}))))

(clojure.core/defn- req-delete-resource-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :resource-definition-id)) #:http.request.field{:name "ResourceDefinitionId", :shape "__string", :location "uri", :location-name "ResourceDefinitionId"})]}))

(clojure.core/defn- req-list-function-definitions-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "NextToken"}))))

(clojure.core/defn- req-create-resource-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :resource-definition-id)) #:http.request.field{:name "ResourceDefinitionId", :shape "__string", :location "uri", :location-name "ResourceDefinitionId"})]} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :resources) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-resource (input :resources)) #:http.request.field{:name "Resources", :shape "__listOfResource"}))))

(clojure.core/defn- req-get-logger-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :logger-definition-id)) #:http.request.field{:name "LoggerDefinitionId", :shape "__string", :location "uri", :location-name "LoggerDefinitionId"})]}))

(clojure.core/defn- req-create-group-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :initial-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-group-version (input :initial-version)) #:http.request.field{:name "InitialVersion", :shape "GroupVersion"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-get-group-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-version-id)) #:http.request.field{:name "GroupVersionId", :shape "__string", :location "uri", :location-name "GroupVersionId"}) (clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]}))

(clojure.core/defn- req-disassociate-service-role-from-account-request [input] (clojure.core/cond-> {}))

(clojure.core/defn- req-create-subscription-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :subscription-definition-id)) #:http.request.field{:name "SubscriptionDefinitionId", :shape "__string", :location "uri", :location-name "SubscriptionDefinitionId"})]} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :subscriptions) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-subscription (input :subscriptions)) #:http.request.field{:name "Subscriptions", :shape "__listOfSubscription"}))))

(clojure.core/defn- req-get-group-certificate-configuration-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]}))

(clojure.core/defn- req-create-function-definition-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :function-definition-id)) #:http.request.field{:name "FunctionDefinitionId", :shape "__string", :location "uri", :location-name "FunctionDefinitionId"})]} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :functions) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-function (input :functions)) #:http.request.field{:name "Functions", :shape "__listOfFunction"}))))

(clojure.core/defn- req-get-group-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]}))

(clojure.core/defn- req-delete-logger-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :logger-definition-id)) #:http.request.field{:name "LoggerDefinitionId", :shape "__string", :location "uri", :location-name "LoggerDefinitionId"})]}))

(clojure.core/defn- req-delete-device-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :device-definition-id)) #:http.request.field{:name "DeviceDefinitionId", :shape "__string", :location "uri", :location-name "DeviceDefinitionId"})]}))

(clojure.core/defn- req-create-subscription-definition-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :initial-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-subscription-definition-version (input :initial-version)) #:http.request.field{:name "InitialVersion", :shape "SubscriptionDefinitionVersion"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-update-device-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :device-definition-id)) #:http.request.field{:name "DeviceDefinitionId", :shape "__string", :location "uri", :location-name "DeviceDefinitionId"})]} (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-get-core-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :core-definition-id)) #:http.request.field{:name "CoreDefinitionId", :shape "__string", :location "uri", :location-name "CoreDefinitionId"})]}))

(clojure.core/defn- req-get-group-certificate-authority-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :certificate-authority-id)) #:http.request.field{:name "CertificateAuthorityId", :shape "__string", :location "uri", :location-name "CertificateAuthorityId"}) (clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]}))

(clojure.core/defn- req-create-resource-definition-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :initial-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-resource-definition-version (input :initial-version)) #:http.request.field{:name "InitialVersion", :shape "ResourceDefinitionVersion"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-get-function-definition-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :function-definition-id)) #:http.request.field{:name "FunctionDefinitionId", :shape "__string", :location "uri", :location-name "FunctionDefinitionId"})]}))

(clojure.core/defn- req-create-device-definition-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :amzn-client-token) (clojure.core/update-in [:http.request.configuration/header] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :amzn-client-token)) #:http.request.field{:name "AmznClientToken", :shape "__string", :location "header", :location-name "X-Amzn-Client-Token"})) (clojure.core/contains? input :initial-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-device-definition-version (input :initial-version)) #:http.request.field{:name "InitialVersion", :shape "DeviceDefinitionVersion"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.core/defn- req-get-connectivity-info-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :thing-name)) #:http.request.field{:name "ThingName", :shape "__string", :location "uri", :location-name "ThingName"})]}))

(clojure.core/defn- req-update-group-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "__string", :location "uri", :location-name "GroupId"})]} (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string"}))))

(clojure.spec.alpha/def :portkey.aws.greengrass/update-resource-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/software-to-update #{"ota_agent" :core "core" :ota-agent})

(clojure.spec.alpha/def :portkey.aws.greengrass.device-definition-version/devices (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-device))
(clojure.spec.alpha/def :portkey.aws.greengrass/device-definition-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.device-definition-version/devices]))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-function-definition-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-function-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-function-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.update-function-definition-request/function-definition-id] :opt-un [:portkey.aws.greengrass.update-function-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass/core-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-core-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.get-core-definition-version-response/arn :portkey.aws.greengrass.get-core-definition-version-response/creation-timestamp :portkey.aws.greengrass.get-core-definition-version-response/definition :portkey.aws.greengrass.get-core-definition-version-response/id :portkey.aws.greengrass.get-core-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.internal-server-error-exception/message (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/internal-server-error-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass/error-details :portkey.aws.greengrass.internal-server-error-exception/message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.group-certificate-authority-properties/group-certificate-authority-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-certificate-authority-properties/group-certificate-authority-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/group-certificate-authority-properties (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.group-certificate-authority-properties/group-certificate-authority-arn :portkey.aws.greengrass.group-certificate-authority-properties/group-certificate-authority-id]))

(clojure.spec.alpha/def :portkey.aws.greengrass/empty (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-logger-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-logger-definition-version-response/arn :portkey.aws.greengrass.create-logger-definition-version-response/creation-timestamp :portkey.aws.greengrass.create-logger-definition-version-response/id :portkey.aws.greengrass.create-logger-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass/core-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-core-definition-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-core-definition-request/amzn-client-token :portkey.aws.greengrass.create-core-definition-request/initial-version :portkey.aws.greengrass.create-core-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.definition-information/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.definition-information/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.definition-information/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.definition-information/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.definition-information/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.definition-information/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.definition-information/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/definition-information (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.definition-information/arn :portkey.aws.greengrass.definition-information/creation-timestamp :portkey.aws.greengrass.definition-information/id :portkey.aws.greengrass.definition-information/last-updated-timestamp :portkey.aws.greengrass.definition-information/latest-version :portkey.aws.greengrass.definition-information/latest-version-arn :portkey.aws.greengrass.definition-information/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definition-versions-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-core-definition-versions-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.list-core-definition-versions-request/core-definition-id] :opt-un [:portkey.aws.greengrass.list-core-definition-versions-request/max-results :portkey.aws.greengrass.list-core-definition-versions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass/timestamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.greengrass.update-resource-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-resource-definition-request/resource-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-resource-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.update-resource-definition-request/resource-definition-id] :opt-un [:portkey.aws.greengrass.update-resource-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-device-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-device-definition-version-response/arn :portkey.aws.greengrass.create-device-definition-version-response/creation-timestamp :portkey.aws.greengrass.create-device-definition-version-response/id :portkey.aws.greengrass.create-device-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass/function-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-function-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.get-function-definition-version-response/arn :portkey.aws.greengrass.get-function-definition-version-response/creation-timestamp :portkey.aws.greengrass.get-function-definition-version-response/definition :portkey.aws.greengrass.get-function-definition-version-response/id :portkey.aws.greengrass.get-function-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass/delete-logger-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-deployment-status-response/deployment-status (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-deployment-status-response/error-message (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-deployment-status-response/updated-at (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-deployment-status-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.get-deployment-status-response/deployment-status :portkey.aws.greengrass/deployment-type :portkey.aws.greengrass/error-details :portkey.aws.greengrass.get-deployment-status-response/error-message :portkey.aws.greengrass.get-deployment-status-response/updated-at]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-function-definition-versions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.list-function-definition-versions-response/next-token :portkey.aws.greengrass.list-function-definition-versions-response/versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-version-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-version-request/cores (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-core))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-core-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.create-core-definition-version-request/core-definition-id] :opt-un [:portkey.aws.greengrass.create-core-definition-version-request/amzn-client-token :portkey.aws.greengrass.create-core-definition-version-request/cores]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass/logger-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-logger-definition-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-logger-definition-request/amzn-client-token :portkey.aws.greengrass.create-logger-definition-request/initial-version :portkey.aws.greengrass.create-logger-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-version-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-version-request/loggers (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-logger))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-logger-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.create-logger-definition-version-request/logger-definition-id] :opt-un [:portkey.aws.greengrass.create-logger-definition-version-request/amzn-client-token :portkey.aws.greengrass.create-logger-definition-version-request/loggers]))

(clojure.spec.alpha/def :portkey.aws.greengrass.associate-role-to-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.associate-role-to-group-request/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/associate-role-to-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.associate-role-to-group-request/group-id] :opt-un [:portkey.aws.greengrass.associate-role-to-group-request/role-arn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-version-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-version-request/devices (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-device))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-device-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.create-device-definition-version-request/device-definition-id] :opt-un [:portkey.aws.greengrass.create-device-definition-version-request/amzn-client-token :portkey.aws.greengrass.create-device-definition-version-request/devices]))

(clojure.spec.alpha/def :portkey.aws.greengrass.deployment/created-at (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.deployment/deployment-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.deployment/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.deployment/group-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/deployment (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.deployment/created-at :portkey.aws.greengrass.deployment/deployment-arn :portkey.aws.greengrass.deployment/deployment-id :portkey.aws.greengrass/deployment-type :portkey.aws.greengrass.deployment/group-arn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.bad-request-exception/message (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/bad-request-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass/error-details :portkey.aws.greengrass.bad-request-exception/message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-resource-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-resource-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-resource-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-resource-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-resource-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-resource-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-resource-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-resource-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-resource-definition-response/arn :portkey.aws.greengrass.create-resource-definition-response/creation-timestamp :portkey.aws.greengrass.create-resource-definition-response/id :portkey.aws.greengrass.create-resource-definition-response/last-updated-timestamp :portkey.aws.greengrass.create-resource-definition-response/latest-version :portkey.aws.greengrass.create-resource-definition-response/latest-version-arn :portkey.aws.greengrass.create-resource-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-device-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.get-device-definition-request/device-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/deployment-type #{"ResetDeployment" :force-reset-deployment :new-deployment "Redeployment" :reset-deployment "NewDeployment" :redeployment "ForceResetDeployment"})

(clojure.spec.alpha/def :portkey.aws.greengrass.list-resource-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-resource-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-resource-definition-versions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.list-resource-definition-versions-response/next-token :portkey.aws.greengrass.list-resource-definition-versions-response/versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definition-versions-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-subscription-definition-versions-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.list-subscription-definition-versions-request/subscription-definition-id] :opt-un [:portkey.aws.greengrass.list-subscription-definition-versions-request/max-results :portkey.aws.greengrass.list-subscription-definition-versions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass/logger-level #{:warn "WARN" :debug "ERROR" :fatal "DEBUG" "FATAL" :info :error "INFO"})

(clojure.spec.alpha/def :portkey.aws.greengrass/get-service-role-for-account-request (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/encoding-type #{"json" :binary "binary" :json})

(clojure.spec.alpha/def :portkey.aws.greengrass.connectivity-info/host-address (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.connectivity-info/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.connectivity-info/metadata (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.connectivity-info/port-number (clojure.spec.alpha/and :portkey.aws.greengrass/integer))
(clojure.spec.alpha/def :portkey.aws.greengrass/connectivity-info (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.connectivity-info/host-address :portkey.aws.greengrass.connectivity-info/id :portkey.aws.greengrass.connectivity-info/metadata :portkey.aws.greengrass.connectivity-info/port-number]))

(clojure.spec.alpha/def :portkey.aws.greengrass.associate-service-role-to-account-request/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/associate-service-role-to-account-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.associate-service-role-to-account-request/role-arn]))

(clojure.spec.alpha/def :portkey.aws.greengrass/permission #{:rw "rw" "ro" :ro})

(clojure.spec.alpha/def :portkey.aws.greengrass/update-logger-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-subscription-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-subscription-definition-response/arn :portkey.aws.greengrass.create-subscription-definition-response/creation-timestamp :portkey.aws.greengrass.create-subscription-definition-response/id :portkey.aws.greengrass.create-subscription-definition-response/last-updated-timestamp :portkey.aws.greengrass.create-subscription-definition-response/latest-version :portkey.aws.greengrass.create-subscription-definition-response/latest-version-arn :portkey.aws.greengrass.create-subscription-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-version-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-version-request/subscription-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-subscription-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.get-subscription-definition-version-request/subscription-definition-id :portkey.aws.greengrass.get-subscription-definition-version-request/subscription-definition-version-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-group-information (clojure.spec.alpha/coll-of :portkey.aws.greengrass/group-information))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definition-versions-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-logger-definition-versions-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.list-logger-definition-versions-request/logger-definition-id] :opt-un [:portkey.aws.greengrass.list-logger-definition-versions-request/max-results :portkey.aws.greengrass.list-logger-definition-versions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-function-definitions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.list-function-definitions-response/definitions :portkey.aws.greengrass.list-function-definitions-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass/logger-type #{:aws-cloud-watch "AWSCloudWatch" "FileSystem" :file-system})

(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-core-definitions-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.list-core-definitions-request/max-results :portkey.aws.greengrass.list-core-definitions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-device-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.get-device-definition-response/arn :portkey.aws.greengrass.get-device-definition-response/creation-timestamp :portkey.aws.greengrass.get-device-definition-response/id :portkey.aws.greengrass.get-device-definition-response/last-updated-timestamp :portkey.aws.greengrass.get-device-definition-response/latest-version :portkey.aws.greengrass.get-device-definition-response/latest-version-arn :portkey.aws.greengrass.get-device-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-subscription (clojure.spec.alpha/coll-of :portkey.aws.greengrass/subscription))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-resource-definition-version-request/resource-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-resource-definition-version-request/resource-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-resource-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.get-resource-definition-version-request/resource-definition-version-id :portkey.aws.greengrass.get-resource-definition-version-request/resource-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.associate-service-role-to-account-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/associate-service-role-to-account-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.associate-service-role-to-account-response/associated-at]))

(clojure.spec.alpha/def :portkey.aws.greengrass/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-associated-role-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-associated-role-response/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-associated-role-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.get-associated-role-response/associated-at :portkey.aws.greengrass.get-associated-role-response/role-arn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-certificate-authority-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-certificate-authority-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-group-certificate-authority-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.create-group-certificate-authority-request/group-id] :opt-un [:portkey.aws.greengrass.create-group-certificate-authority-request/amzn-client-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-resource-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-resource-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-resource-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-resource-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-resource-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-resource-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-resource-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-resource-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.get-resource-definition-response/arn :portkey.aws.greengrass.get-resource-definition-response/creation-timestamp :portkey.aws.greengrass.get-resource-definition-response/id :portkey.aws.greengrass.get-resource-definition-response/last-updated-timestamp :portkey.aws.greengrass.get-resource-definition-response/latest-version :portkey.aws.greengrass.get-resource-definition-response/latest-version-arn :portkey.aws.greengrass.get-resource-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass/update-function-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-resource-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-resource-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-resource-definition-versions-request/resource-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-resource-definition-versions-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.list-resource-definition-versions-request/resource-definition-id] :opt-un [:portkey.aws.greengrass.list-resource-definition-versions-request/max-results :portkey.aws.greengrass.list-resource-definition-versions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-authority-response/group-certificate-authority-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-authority-response/group-certificate-authority-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-authority-response/pem-encoded-certificate (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-group-certificate-authority-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.get-group-certificate-authority-response/group-certificate-authority-arn :portkey.aws.greengrass.get-group-certificate-authority-response/group-certificate-authority-id :portkey.aws.greengrass.get-group-certificate-authority-response/pem-encoded-certificate]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-core-definitions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.list-core-definitions-response/definitions :portkey.aws.greengrass.list-core-definitions-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.disassociate-role-from-group-response/disassociated-at (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/disassociate-role-from-group-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.disassociate-role-from-group-response/disassociated-at]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-version-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-version-request/function-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-function-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.get-function-definition-version-request/function-definition-id :portkey.aws.greengrass.get-function-definition-version-request/function-definition-version-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-associated-role-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-associated-role-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.get-associated-role-request/group-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-device-definition-versions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.list-device-definition-versions-response/next-token :portkey.aws.greengrass.list-device-definition-versions-response/versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.function-definition-version/functions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-function))
(clojure.spec.alpha/def :portkey.aws.greengrass/function-definition-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.function-definition-version/functions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.logger-definition-version/loggers (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-logger))
(clojure.spec.alpha/def :portkey.aws.greengrass/logger-definition-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.logger-definition-version/loggers]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-subscription-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.get-subscription-definition-request/subscription-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-version-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-version-request/device-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-device-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.get-device-definition-version-request/device-definition-version-id :portkey.aws.greengrass.get-device-definition-version-request/device-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-subscription-definitions-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.list-subscription-definitions-request/max-results :portkey.aws.greengrass.list-subscription-definitions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-subscription-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-subscription-definition-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-subscription-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.update-subscription-definition-request/subscription-definition-id] :opt-un [:portkey.aws.greengrass.update-subscription-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-group-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.get-group-response/arn :portkey.aws.greengrass.get-group-response/creation-timestamp :portkey.aws.greengrass.get-group-response/id :portkey.aws.greengrass.get-group-response/last-updated-timestamp :portkey.aws.greengrass.get-group-response/latest-version :portkey.aws.greengrass.get-group-response/latest-version-arn :portkey.aws.greengrass.get-group-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-resource-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-resource-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-resource-definitions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.list-resource-definitions-response/definitions :portkey.aws.greengrass.list-resource-definitions-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass/update-group-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.disassociate-role-from-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/disassociate-role-from-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.disassociate-role-from-group-request/group-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-group-certificate-configuration-response/certificate-authority-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-group-certificate-configuration-response/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-group-certificate-configuration-response/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-group-certificate-configuration-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.update-group-certificate-configuration-response/certificate-authority-expiry-in-milliseconds :portkey.aws.greengrass.update-group-certificate-configuration-response/certificate-expiry-in-milliseconds :portkey.aws.greengrass.update-group-certificate-configuration-response/group-id]))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-group-certificate-authority-properties (clojure.spec.alpha/coll-of :portkey.aws.greengrass/group-certificate-authority-properties))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-group-versions-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-group-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-group-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-group-versions-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.list-group-versions-request/group-id] :opt-un [:portkey.aws.greengrass.list-group-versions-request/max-results :portkey.aws.greengrass.list-group-versions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-groups-response/groups (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-group-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-groups-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-groups-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.list-groups-response/groups :portkey.aws.greengrass.list-groups-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass/update-targets (clojure.spec.alpha/coll-of :portkey.aws.greengrass/string))

(clojure.spec.alpha/def :portkey.aws.greengrass.group-certificate-configuration/certificate-authority-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-certificate-configuration/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-certificate-configuration/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/group-certificate-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.group-certificate-configuration/certificate-authority-expiry-in-milliseconds :portkey.aws.greengrass.group-certificate-configuration/certificate-expiry-in-milliseconds :portkey.aws.greengrass.group-certificate-configuration/group-id]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-device-definitions-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.list-device-definitions-request/max-results :portkey.aws.greengrass.list-device-definitions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-subscription-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-subscription-definition-version-response/arn :portkey.aws.greengrass.create-subscription-definition-version-response/creation-timestamp :portkey.aws.greengrass.create-subscription-definition-version-response/id :portkey.aws.greengrass.create-subscription-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass/delete-group-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.associate-role-to-group-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/associate-role-to-group-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.associate-role-to-group-response/associated-at]))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-connectivity-info-request/connectivity-info (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-connectivity-info))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-connectivity-info-request/thing-name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-connectivity-info-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.update-connectivity-info-request/thing-name] :opt-un [:portkey.aws.greengrass.update-connectivity-info-request/connectivity-info]))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-device (clojure.spec.alpha/coll-of :portkey.aws.greengrass/device))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-core (clojure.spec.alpha/coll-of :portkey.aws.greengrass/core))

(clojure.spec.alpha/def :portkey.aws.greengrass.version-information/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.version-information/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.version-information/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.version-information/version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/version-information (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.version-information/arn :portkey.aws.greengrass.version-information/creation-timestamp :portkey.aws.greengrass.version-information/id :portkey.aws.greengrass.version-information/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-core-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.get-core-definition-response/arn :portkey.aws.greengrass.get-core-definition-response/creation-timestamp :portkey.aws.greengrass.get-core-definition-response/id :portkey.aws.greengrass.get-core-definition-response/last-updated-timestamp :portkey.aws.greengrass.get-core-definition-response/latest-version :portkey.aws.greengrass.get-core-definition-response/latest-version-arn :portkey.aws.greengrass.get-core-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass/logger-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-logger-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.get-logger-definition-version-response/arn :portkey.aws.greengrass.get-logger-definition-version-response/creation-timestamp :portkey.aws.greengrass.get-logger-definition-version-response/definition :portkey.aws.greengrass.get-logger-definition-version-response/id :portkey.aws.greengrass.get-logger-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definition-versions-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-function-definition-versions-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.list-function-definition-versions-request/function-definition-id] :opt-un [:portkey.aws.greengrass.list-function-definition-versions-request/max-results :portkey.aws.greengrass.list-function-definition-versions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass/function-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-function-definition-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-function-definition-request/amzn-client-token :portkey.aws.greengrass.create-function-definition-request/initial-version :portkey.aws.greengrass.create-function-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.s-3-machine-learning-model-resource-data/destination-path (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.s-3-machine-learning-model-resource-data/s-3-uri (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/s-3-machine-learning-model-resource-data (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.s-3-machine-learning-model-resource-data/destination-path :portkey.aws.greengrass.s-3-machine-learning-model-resource-data/s-3-uri]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-logger-definitions-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.list-logger-definitions-request/max-results :portkey.aws.greengrass.list-logger-definitions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass/update-targets-architecture #{:armv-7l "armv7l" "x86_64" "aarch64" :x-86-64 :aarch-64})

(clojure.spec.alpha/def :portkey.aws.greengrass/update-core-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/update-device-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-device-definitions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.list-device-definitions-response/definitions :portkey.aws.greengrass.list-device-definitions-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-device-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-device-definition-response/arn :portkey.aws.greengrass.create-device-definition-response/creation-timestamp :portkey.aws.greengrass.create-device-definition-response/id :portkey.aws.greengrass.create-device-definition-response/last-updated-timestamp :portkey.aws.greengrass.create-device-definition-response/latest-version :portkey.aws.greengrass.create-device-definition-response/latest-version-arn :portkey.aws.greengrass.create-device-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.group-version/core-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-version/device-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-version/function-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-version/logger-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-version/resource-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-version/subscription-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/group-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.group-version/core-definition-version-arn :portkey.aws.greengrass.group-version/device-definition-version-arn :portkey.aws.greengrass.group-version/function-definition-version-arn :portkey.aws.greengrass.group-version/logger-definition-version-arn :portkey.aws.greengrass.group-version/resource-definition-version-arn :portkey.aws.greengrass.group-version/subscription-definition-version-arn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-resource-definition-request/resource-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-resource-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.get-resource-definition-request/resource-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.group-information/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-information/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-information/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-information/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-information/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-information/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-information/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/group-information (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.group-information/arn :portkey.aws.greengrass.group-information/creation-timestamp :portkey.aws.greengrass.group-information/id :portkey.aws.greengrass.group-information/last-updated-timestamp :portkey.aws.greengrass.group-information/latest-version :portkey.aws.greengrass.group-information/latest-version-arn :portkey.aws.greengrass.group-information/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.delete-function-definition-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/delete-function-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.delete-function-definition-request/function-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.error-detail/detailed-error-code (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.error-detail/detailed-error-message (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/error-detail (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.error-detail/detailed-error-code :portkey.aws.greengrass.error-detail/detailed-error-message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass/subscription-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-subscription-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.get-subscription-definition-version-response/arn :portkey.aws.greengrass.get-subscription-definition-version-response/creation-timestamp :portkey.aws.greengrass.get-subscription-definition-version-response/definition :portkey.aws.greengrass.get-subscription-definition-version-response/id :portkey.aws.greengrass.get-subscription-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-logger-definition-versions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.list-logger-definition-versions-response/next-token :portkey.aws.greengrass.list-logger-definition-versions-response/versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-resource (clojure.spec.alpha/coll-of :portkey.aws.greengrass/resource))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-version-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-version-request/logger-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-logger-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.get-logger-definition-version-request/logger-definition-version-id :portkey.aws.greengrass.get-logger-definition-version-request/logger-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-logger-definitions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.list-logger-definitions-response/definitions :portkey.aws.greengrass.list-logger-definitions-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-service-role-for-account-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-service-role-for-account-response/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-service-role-for-account-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.get-service-role-for-account-response/associated-at :portkey.aws.greengrass.get-service-role-for-account-response/role-arn]))

(clojure.spec.alpha/def :portkey.aws.greengrass/update-agent-log-level #{:warn :trace "WARN" :verbose :debug "ERROR" :fatal "NONE" "TRACE" "DEBUG" "VERBOSE" "FATAL" :info :error "INFO" :none})

(clojure.spec.alpha/def :portkey.aws.greengrass.list-group-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-group-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-group-versions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.list-group-versions-response/next-token :portkey.aws.greengrass.list-group-versions-response/versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass/delete-function-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-configuration-response/certificate-authority-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-configuration-response/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-configuration-response/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-group-certificate-configuration-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.get-group-certificate-configuration-response/certificate-authority-expiry-in-milliseconds :portkey.aws.greengrass.get-group-certificate-configuration-response/certificate-expiry-in-milliseconds :portkey.aws.greengrass.get-group-certificate-configuration-response/group-id]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-connectivity-info-response/connectivity-info (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-connectivity-info))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-connectivity-info-response/message (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-connectivity-info-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.get-connectivity-info-response/connectivity-info :portkey.aws.greengrass.get-connectivity-info-response/message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-deployments-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-deployments-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-deployments-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-deployments-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.list-deployments-request/group-id] :opt-un [:portkey.aws.greengrass.list-deployments-request/max-results :portkey.aws.greengrass.list-deployments-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-version-information (clojure.spec.alpha/coll-of :portkey.aws.greengrass/version-information))

(clojure.spec.alpha/def :portkey.aws.greengrass.resource-definition-version/resources (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-resource))
(clojure.spec.alpha/def :portkey.aws.greengrass/resource-definition-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.resource-definition-version/resources]))

(clojure.spec.alpha/def :portkey.aws.greengrass/delete-core-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-function (clojure.spec.alpha/coll-of :portkey.aws.greengrass/function))

(clojure.spec.alpha/def :portkey.aws.greengrass.disassociate-service-role-from-account-response/disassociated-at (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/disassociate-service-role-from-account-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.disassociate-service-role-from-account-response/disassociated-at]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-group-certificate-authorities-response/group-certificate-authorities (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-group-certificate-authority-properties))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-group-certificate-authorities-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.list-group-certificate-authorities-response/group-certificate-authorities]))

(clojure.spec.alpha/def :portkey.aws.greengrass.core-definition-version/cores (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-core))
(clojure.spec.alpha/def :portkey.aws.greengrass/core-definition-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.core-definition-version/cores]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-deployment-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-deployment-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-deployment-request/group-version-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-deployment-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.create-deployment-request/group-id] :opt-un [:portkey.aws.greengrass.create-deployment-request/amzn-client-token :portkey.aws.greengrass.create-deployment-request/deployment-id :portkey.aws.greengrass/deployment-type :portkey.aws.greengrass.create-deployment-request/group-version-id]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-versions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.list-versions-response/next-token :portkey.aws.greengrass.list-versions-response/versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-software-update-job-response/iot-job-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-software-update-job-response/iot-job-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-software-update-job-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-software-update-job-response/iot-job-arn :portkey.aws.greengrass.create-software-update-job-response/iot-job-id]))

(clojure.spec.alpha/def :portkey.aws.greengrass.subscription-definition-version/subscriptions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-subscription))
(clojure.spec.alpha/def :portkey.aws.greengrass/subscription-definition-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.subscription-definition-version/subscriptions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.delete-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/delete-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.delete-group-request/group-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.delete-subscription-definition-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/delete-subscription-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.delete-subscription-definition-request/subscription-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-group-certificate-authorities-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-group-certificate-authorities-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.list-group-certificate-authorities-request/group-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-core-definition-versions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.list-core-definition-versions-response/next-token :portkey.aws.greengrass.list-core-definition-versions-response/versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-certificate-authority-response/group-certificate-authority-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-group-certificate-authority-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-group-certificate-authority-response/group-certificate-authority-arn]))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-logger (clojure.spec.alpha/coll-of :portkey.aws.greengrass/logger))

(clojure.spec.alpha/def :portkey.aws.greengrass/update-targets-operating-system #{"ubuntu" "raspbian" :raspbian :amazon-linux "amazon_linux" :ubuntu})

(clojure.spec.alpha/def :portkey.aws.greengrass.update-logger-definition-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-logger-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-logger-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.update-logger-definition-request/logger-definition-id] :opt-un [:portkey.aws.greengrass.update-logger-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-core-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-core-definition-version-response/arn :portkey.aws.greengrass.create-core-definition-version-response/creation-timestamp :portkey.aws.greengrass.create-core-definition-version-response/id :portkey.aws.greengrass.create-core-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.delete-core-definition-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/delete-core-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.delete-core-definition-request/core-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-group-certificate-configuration-request/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-group-certificate-configuration-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-group-certificate-configuration-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.update-group-certificate-configuration-request/group-id] :opt-un [:portkey.aws.greengrass.update-group-certificate-configuration-request/certificate-expiry-in-milliseconds]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-deployment-status-request/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-deployment-status-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-deployment-status-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.get-deployment-status-request/group-id :portkey.aws.greengrass.get-deployment-status-request/deployment-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-request/core-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-request/device-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-request/function-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-request/logger-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-request/resource-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-request/subscription-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-group-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.create-group-version-request/group-id] :opt-un [:portkey.aws.greengrass.create-group-version-request/amzn-client-token :portkey.aws.greengrass.create-group-version-request/core-definition-version-arn :portkey.aws.greengrass.create-group-version-request/device-definition-version-arn :portkey.aws.greengrass.create-group-version-request/function-definition-version-arn :portkey.aws.greengrass.create-group-version-request/logger-definition-version-arn :portkey.aws.greengrass.create-group-version-request/resource-definition-version-arn :portkey.aws.greengrass.create-group-version-request/subscription-definition-version-arn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-core-definition-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-core-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-core-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.update-core-definition-request/core-definition-id] :opt-un [:portkey.aws.greengrass.update-core-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-subscription-definitions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.list-subscription-definitions-response/definitions :portkey.aws.greengrass.list-subscription-definitions-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass/group-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-group-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.get-group-version-response/arn :portkey.aws.greengrass.get-group-version-response/creation-timestamp :portkey.aws.greengrass.get-group-version-response/definition :portkey.aws.greengrass.get-group-version-response/id :portkey.aws.greengrass.get-group-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-version-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-version-request/core-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-core-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.get-core-definition-version-request/core-definition-id :portkey.aws.greengrass.get-core-definition-version-request/core-definition-version-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/update-subscription-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass/device-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-device-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.get-device-definition-version-response/arn :portkey.aws.greengrass.get-device-definition-version-response/creation-timestamp :portkey.aws.greengrass.get-device-definition-version-response/definition :portkey.aws.greengrass.get-device-definition-version-response/id :portkey.aws.greengrass.get-device-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-resource-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-resource-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-resource-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass/resource-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-resource-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-resource-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-resource-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.get-resource-definition-version-response/arn :portkey.aws.greengrass.get-resource-definition-version-response/creation-timestamp :portkey.aws.greengrass.get-resource-definition-version-response/definition :portkey.aws.greengrass.get-resource-definition-version-response/id :portkey.aws.greengrass.get-resource-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-function-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-function-definition-version-response/arn :portkey.aws.greengrass.create-function-definition-version-response/creation-timestamp :portkey.aws.greengrass.create-function-definition-version-response/id :portkey.aws.greengrass.create-function-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-resource-access-policy (clojure.spec.alpha/coll-of :portkey.aws.greengrass/resource-access-policy))

(clojure.spec.alpha/def :portkey.aws.greengrass.sage-maker-machine-learning-model-resource-data/destination-path (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.sage-maker-machine-learning-model-resource-data/sage-maker-job-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/sage-maker-machine-learning-model-resource-data (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.sage-maker-machine-learning-model-resource-data/destination-path :portkey.aws.greengrass.sage-maker-machine-learning-model-resource-data/sage-maker-job-arn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-software-update-job-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-software-update-job-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-software-update-job-request/amzn-client-token :portkey.aws.greengrass/s-3-url-signer-role :portkey.aws.greengrass/software-to-update :portkey.aws.greengrass/update-agent-log-level :portkey.aws.greengrass/update-targets :portkey.aws.greengrass/update-targets-architecture :portkey.aws.greengrass/update-targets-operating-system]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-resource-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-resource-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-resource-definitions-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.list-resource-definitions-request/max-results :portkey.aws.greengrass.list-resource-definitions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.function-configuration/environment (clojure.spec.alpha/and :portkey.aws.greengrass/function-configuration-environment))
(clojure.spec.alpha/def :portkey.aws.greengrass.function-configuration/exec-args (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.function-configuration/executable (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.function-configuration/memory-size (clojure.spec.alpha/and :portkey.aws.greengrass/integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.function-configuration/pinned (clojure.spec.alpha/and :portkey.aws.greengrass/boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.function-configuration/timeout (clojure.spec.alpha/and :portkey.aws.greengrass/integer))
(clojure.spec.alpha/def :portkey.aws.greengrass/function-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass/encoding-type :portkey.aws.greengrass.function-configuration/environment :portkey.aws.greengrass.function-configuration/exec-args :portkey.aws.greengrass.function-configuration/executable :portkey.aws.greengrass.function-configuration/memory-size :portkey.aws.greengrass.function-configuration/pinned :portkey.aws.greengrass.function-configuration/timeout]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definition-versions-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-device-definition-versions-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.list-device-definition-versions-request/device-definition-id] :opt-un [:portkey.aws.greengrass.list-device-definition-versions-request/max-results :portkey.aws.greengrass.list-device-definition-versions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-groups-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-groups-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-groups-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.list-groups-request/max-results :portkey.aws.greengrass.list-groups-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.reset-deployments-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.reset-deployments-request/force (clojure.spec.alpha/and :portkey.aws.greengrass/boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.reset-deployments-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/reset-deployments-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.reset-deployments-request/group-id] :opt-un [:portkey.aws.greengrass.reset-deployments-request/amzn-client-token :portkey.aws.greengrass.reset-deployments-request/force]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-subscription-definition-versions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.list-subscription-definition-versions-response/next-token :portkey.aws.greengrass.list-subscription-definition-versions-response/versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.delete-resource-definition-request/resource-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/delete-resource-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.delete-resource-definition-request/resource-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.greengrass.function-configuration-environment/access-sysfs (clojure.spec.alpha/and :portkey.aws.greengrass/boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.function-configuration-environment/resource-access-policies (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-resource-access-policy))
(clojure.spec.alpha/def :portkey.aws.greengrass.function-configuration-environment/variables (clojure.spec.alpha/and :portkey.aws.greengrass/map-of-string))
(clojure.spec.alpha/def :portkey.aws.greengrass/function-configuration-environment (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.function-configuration-environment/access-sysfs :portkey.aws.greengrass.function-configuration-environment/resource-access-policies :portkey.aws.greengrass.function-configuration-environment/variables]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-group-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-group-response/arn :portkey.aws.greengrass.create-group-response/creation-timestamp :portkey.aws.greengrass.create-group-response/id :portkey.aws.greengrass.create-group-response/last-updated-timestamp :portkey.aws.greengrass.create-group-response/latest-version :portkey.aws.greengrass.create-group-response/latest-version-arn :portkey.aws.greengrass.create-group-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass/error-details (clojure.spec.alpha/coll-of :portkey.aws.greengrass/error-detail))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-function-definitions-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.list-function-definitions-request/max-results :portkey.aws.greengrass.list-function-definitions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-resource-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-resource-definition-version-request/resource-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-resource-definition-version-request/resources (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-resource))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-resource-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.create-resource-definition-version-request/resource-definition-id] :opt-un [:portkey.aws.greengrass.create-resource-definition-version-request/amzn-client-token :portkey.aws.greengrass.create-resource-definition-version-request/resources]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-logger-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.get-logger-definition-request/logger-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.subscription/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.subscription/source (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.subscription/subject (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.subscription/target (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/subscription (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.subscription/id :portkey.aws.greengrass.subscription/source :portkey.aws.greengrass.subscription/subject :portkey.aws.greengrass.subscription/target]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass/group-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-group-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-group-request/amzn-client-token :portkey.aws.greengrass.create-group-request/initial-version :portkey.aws.greengrass.create-group-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-connectivity-info (clojure.spec.alpha/coll-of :portkey.aws.greengrass/connectivity-info))

(clojure.spec.alpha/def :portkey.aws.greengrass.core/certificate-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.core/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.core/sync-shadow (clojure.spec.alpha/and :portkey.aws.greengrass/boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.core/thing-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/core (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.core/certificate-arn :portkey.aws.greengrass.core/id :portkey.aws.greengrass.core/sync-shadow :portkey.aws.greengrass.core/thing-arn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-version-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-version-request/group-version-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-group-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.get-group-version-request/group-version-id :portkey.aws.greengrass.get-group-version-request/group-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/disassociate-service-role-from-account-request (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-version-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-version-request/subscriptions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-subscription))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-subscription-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.create-subscription-definition-version-request/subscription-definition-id] :opt-un [:portkey.aws.greengrass.create-subscription-definition-version-request/amzn-client-token :portkey.aws.greengrass.create-subscription-definition-version-request/subscriptions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-configuration-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-group-certificate-configuration-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.get-group-certificate-configuration-request/group-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-definition-information (clojure.spec.alpha/coll-of :portkey.aws.greengrass/definition-information))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-deployments-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-deployments-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass/deployments :portkey.aws.greengrass.list-deployments-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.resource/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.resource/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/resource (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.resource/id :portkey.aws.greengrass.resource/name :portkey.aws.greengrass/resource-data-container]))

(clojure.spec.alpha/def :portkey.aws.greengrass.group-owner-setting/auto-add-group-owner (clojure.spec.alpha/and :portkey.aws.greengrass/boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-owner-setting/group-owner (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/group-owner-setting (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.group-owner-setting/auto-add-group-owner :portkey.aws.greengrass.group-owner-setting/group-owner]))

(clojure.spec.alpha/def :portkey.aws.greengrass/resource-data-container (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass/local-device-resource-data :portkey.aws.greengrass/local-volume-resource-data :portkey.aws.greengrass/s-3-machine-learning-model-resource-data :portkey.aws.greengrass/sage-maker-machine-learning-model-resource-data]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-version-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-version-request/functions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-function))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-function-definition-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.create-function-definition-version-request/function-definition-id] :opt-un [:portkey.aws.greengrass.create-function-definition-version-request/amzn-client-token :portkey.aws.greengrass.create-function-definition-version-request/functions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.get-group-request/group-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.function/function-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.function/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/function (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.function/function-arn :portkey.aws.greengrass/function-configuration :portkey.aws.greengrass.function/id]))

(clojure.spec.alpha/def :portkey.aws.greengrass/integer clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.greengrass.reset-deployments-response/deployment-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.reset-deployments-response/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/reset-deployments-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.reset-deployments-response/deployment-arn :portkey.aws.greengrass.reset-deployments-response/deployment-id]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-deployment-response/deployment-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-deployment-response/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-deployment-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-deployment-response/deployment-arn :portkey.aws.greengrass.create-deployment-response/deployment-id]))

(clojure.spec.alpha/def :portkey.aws.greengrass.delete-logger-definition-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/delete-logger-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.delete-logger-definition-request/logger-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.delete-device-definition-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/delete-device-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.delete-device-definition-request/device-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.local-volume-resource-data/destination-path (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.local-volume-resource-data/source-path (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/local-volume-resource-data (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.local-volume-resource-data/destination-path :portkey.aws.greengrass/group-owner-setting :portkey.aws.greengrass.local-volume-resource-data/source-path]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-logger-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.get-logger-definition-response/arn :portkey.aws.greengrass.get-logger-definition-response/creation-timestamp :portkey.aws.greengrass.get-logger-definition-response/id :portkey.aws.greengrass.get-logger-definition-response/last-updated-timestamp :portkey.aws.greengrass.get-logger-definition-response/latest-version :portkey.aws.greengrass.get-logger-definition-response/latest-version-arn :portkey.aws.greengrass.get-logger-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass/subscription-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-subscription-definition-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-subscription-definition-request/amzn-client-token :portkey.aws.greengrass.create-subscription-definition-request/initial-version :portkey.aws.greengrass.create-subscription-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass/delete-subscription-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-device-definition-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-device-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-device-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.update-device-definition-request/device-definition-id] :opt-un [:portkey.aws.greengrass.update-device-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-subscription-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.get-subscription-definition-response/arn :portkey.aws.greengrass.get-subscription-definition-response/creation-timestamp :portkey.aws.greengrass.get-subscription-definition-response/id :portkey.aws.greengrass.get-subscription-definition-response/last-updated-timestamp :portkey.aws.greengrass.get-subscription-definition-response/latest-version :portkey.aws.greengrass.get-subscription-definition-response/latest-version-arn :portkey.aws.greengrass.get-subscription-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-core-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.get-core-definition-request/core-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-authority-request/certificate-authority-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-authority-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-group-certificate-authority-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.get-group-certificate-authority-request/certificate-authority-id :portkey.aws.greengrass.get-group-certificate-authority-request/group-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-resource-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-resource-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass/resource-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-resource-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-resource-definition-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-resource-definition-request/amzn-client-token :portkey.aws.greengrass.create-resource-definition-request/initial-version :portkey.aws.greengrass.create-resource-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-logger-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-logger-definition-response/arn :portkey.aws.greengrass.create-logger-definition-response/creation-timestamp :portkey.aws.greengrass.create-logger-definition-response/id :portkey.aws.greengrass.create-logger-definition-response/last-updated-timestamp :portkey.aws.greengrass.create-logger-definition-response/latest-version :portkey.aws.greengrass.create-logger-definition-response/latest-version-arn :portkey.aws.greengrass.create-logger-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass/s-3-url-signer-role (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.greengrass.device/certificate-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.device/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.device/sync-shadow (clojure.spec.alpha/and :portkey.aws.greengrass/boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.device/thing-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/device (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.device/certificate-arn :portkey.aws.greengrass.device/id :portkey.aws.greengrass.device/sync-shadow :portkey.aws.greengrass.device/thing-arn]))

(clojure.spec.alpha/def :portkey.aws.greengrass/logger-component #{:greengrass-system :lambda "Lambda" "GreengrassSystem"})

(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-function-definition-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.get-function-definition-request/function-definition-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.resource-access-policy/resource-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/resource-access-policy (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass/permission :portkey.aws.greengrass.resource-access-policy/resource-id]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass/device-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-device-definition-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-device-definition-request/amzn-client-token :portkey.aws.greengrass.create-device-definition-request/initial-version :portkey.aws.greengrass.create-device-definition-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-connectivity-info-request/thing-name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-connectivity-info-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.get-connectivity-info-request/thing-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-group-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-group-version-response/arn :portkey.aws.greengrass.create-group-version-response/creation-timestamp :portkey.aws.greengrass.create-group-version-response/id :portkey.aws.greengrass.create-group-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-definitions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.list-definitions-response/definitions :portkey.aws.greengrass.list-definitions-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.greengrass.local-device-resource-data/source-path (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/local-device-resource-data (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass/group-owner-setting :portkey.aws.greengrass.local-device-resource-data/source-path]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-core-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-core-definition-response/arn :portkey.aws.greengrass.create-core-definition-response/creation-timestamp :portkey.aws.greengrass.create-core-definition-response/id :portkey.aws.greengrass.create-core-definition-response/last-updated-timestamp :portkey.aws.greengrass.create-core-definition-response/latest-version :portkey.aws.greengrass.create-core-definition-response/latest-version-arn :portkey.aws.greengrass.create-core-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.general-error/message (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/general-error (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass/error-details :portkey.aws.greengrass.general-error/message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-function-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-function-definition-response/arn :portkey.aws.greengrass.create-function-definition-response/creation-timestamp :portkey.aws.greengrass.create-function-definition-response/id :portkey.aws.greengrass.create-function-definition-response/last-updated-timestamp :portkey.aws.greengrass.create-function-definition-response/latest-version :portkey.aws.greengrass.create-function-definition-response/latest-version-arn :portkey.aws.greengrass.create-function-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-connectivity-info-response/message (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-connectivity-info-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-connectivity-info-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.update-connectivity-info-response/message :portkey.aws.greengrass.update-connectivity-info-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-function-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.get-function-definition-response/arn :portkey.aws.greengrass.get-function-definition-response/creation-timestamp :portkey.aws.greengrass.get-function-definition-response/id :portkey.aws.greengrass.get-function-definition-response/last-updated-timestamp :portkey.aws.greengrass.get-function-definition-response/latest-version :portkey.aws.greengrass.get-function-definition-response/latest-version-arn :portkey.aws.greengrass.get-function-definition-response/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-group-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.greengrass.update-group-request/group-id] :opt-un [:portkey.aws.greengrass.update-group-request/name]))

(clojure.spec.alpha/def :portkey.aws.greengrass/delete-resource-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/map-of-string (clojure.spec.alpha/map-of :portkey.aws.greengrass/string :portkey.aws.greengrass/string))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-resource-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-resource-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-resource-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-resource-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-resource-definition-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.create-resource-definition-version-response/arn :portkey.aws.greengrass.create-resource-definition-version-response/creation-timestamp :portkey.aws.greengrass.create-resource-definition-version-response/id :portkey.aws.greengrass.create-resource-definition-version-response/version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.logger/component (clojure.spec.alpha/and :portkey.aws.greengrass/logger-component))
(clojure.spec.alpha/def :portkey.aws.greengrass.logger/id (clojure.spec.alpha/and :portkey.aws.greengrass/string))
(clojure.spec.alpha/def :portkey.aws.greengrass.logger/level (clojure.spec.alpha/and :portkey.aws.greengrass/logger-level))
(clojure.spec.alpha/def :portkey.aws.greengrass.logger/space (clojure.spec.alpha/and :portkey.aws.greengrass/integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.logger/type (clojure.spec.alpha/and :portkey.aws.greengrass/logger-type))
(clojure.spec.alpha/def :portkey.aws.greengrass/logger (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.greengrass.logger/component :portkey.aws.greengrass.logger/id :portkey.aws.greengrass.logger/level :portkey.aws.greengrass.logger/space :portkey.aws.greengrass.logger/type]))

(clojure.spec.alpha/def :portkey.aws.greengrass/delete-device-definition-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/deployments (clojure.spec.alpha/coll-of :portkey.aws.greengrass/deployment))

(clojure.core/defn create-device-definition ([] (create-device-definition {})) ([create-device-definition-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-device-definition-request create-device-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/create-device-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/devices", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/create-device-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/action "CreateDeviceDefinition", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-device-definition :args (clojure.spec.alpha/? :portkey.aws.greengrass/create-device-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-device-definition-response))

(clojure.core/defn get-function-definition ([get-function-definition-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-get-function-definition-request get-function-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/get-function-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/functions/{FunctionDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/get-function-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "GetFunctionDefinition", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-function-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-function-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-function-definition-response))

(clojure.core/defn delete-group ([delete-group-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-delete-group-request delete-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/delete-group-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/delete-group-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 200, :http.request.configuration/action "DeleteGroup", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef delete-group :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/delete-group-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/delete-group-response))

(clojure.core/defn create-device-definition-version ([create-device-definition-version-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-device-definition-version-request create-device-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/create-device-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/devices/{DeviceDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/create-device-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/action "CreateDeviceDefinitionVersion", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-device-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-device-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-device-definition-version-response))

(clojure.core/defn list-logger-definitions ([] (list-logger-definitions {})) ([list-logger-definitions-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-list-logger-definitions-request list-logger-definitions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/list-logger-definitions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/loggers", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/list-logger-definitions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "ListLoggerDefinitions", :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef list-logger-definitions :args (clojure.spec.alpha/? :portkey.aws.greengrass/list-logger-definitions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-logger-definitions-response))

(clojure.core/defn list-function-definitions ([] (list-function-definitions {})) ([list-function-definitions-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-list-function-definitions-request list-function-definitions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/list-function-definitions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/functions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/list-function-definitions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "ListFunctionDefinitions", :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef list-function-definitions :args (clojure.spec.alpha/? :portkey.aws.greengrass/list-function-definitions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-function-definitions-response))

(clojure.core/defn create-function-definition ([] (create-function-definition {})) ([create-function-definition-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-function-definition-request create-function-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/create-function-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/functions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/create-function-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/action "CreateFunctionDefinition", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-function-definition :args (clojure.spec.alpha/? :portkey.aws.greengrass/create-function-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-function-definition-response))

(clojure.core/defn get-resource-definition-version ([get-resource-definition-version-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-get-resource-definition-version-request get-resource-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/get-resource-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/resources/{ResourceDefinitionId}/versions/{ResourceDefinitionVersionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/get-resource-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "GetResourceDefinitionVersion", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-resource-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-resource-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-resource-definition-version-response))

(clojure.core/defn create-core-definition ([] (create-core-definition {})) ([create-core-definition-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-core-definition-request create-core-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/create-core-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/cores", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/create-core-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/action "CreateCoreDefinition", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-core-definition :args (clojure.spec.alpha/? :portkey.aws.greengrass/create-core-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-core-definition-response))

(clojure.core/defn list-groups ([] (list-groups {})) ([list-groups-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-list-groups-request list-groups-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/list-groups-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/list-groups-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "ListGroups", :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef list-groups :args (clojure.spec.alpha/? :portkey.aws.greengrass/list-groups-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-groups-response))

(clojure.core/defn create-logger-definition ([] (create-logger-definition {})) ([create-logger-definition-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-logger-definition-request create-logger-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/create-logger-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/loggers", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/create-logger-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/action "CreateLoggerDefinition", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-logger-definition :args (clojure.spec.alpha/? :portkey.aws.greengrass/create-logger-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-logger-definition-response))

(clojure.core/defn update-resource-definition ([update-resource-definition-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-update-resource-definition-request update-resource-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/update-resource-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/resources/{ResourceDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/update-resource-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/action "UpdateResourceDefinition", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef update-resource-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-resource-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/update-resource-definition-response))

(clojure.core/defn get-subscription-definition-version ([get-subscription-definition-version-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-get-subscription-definition-version-request get-subscription-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/get-subscription-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions/{SubscriptionDefinitionVersionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/get-subscription-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "GetSubscriptionDefinitionVersion", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-subscription-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-subscription-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-subscription-definition-version-response))

(clojure.core/defn list-function-definition-versions ([list-function-definition-versions-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-list-function-definition-versions-request list-function-definition-versions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/list-function-definition-versions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/functions/{FunctionDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/list-function-definition-versions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "ListFunctionDefinitionVersions", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef list-function-definition-versions :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-function-definition-versions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-function-definition-versions-response))

(clojure.core/defn update-logger-definition ([update-logger-definition-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-update-logger-definition-request update-logger-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/update-logger-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/loggers/{LoggerDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/update-logger-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/action "UpdateLoggerDefinition", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef update-logger-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-logger-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/update-logger-definition-response))

(clojure.core/defn disassociate-service-role-from-account ([] (disassociate-service-role-from-account {})) ([disassociate-service-role-from-account-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-disassociate-service-role-from-account-request disassociate-service-role-from-account-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/disassociate-service-role-from-account-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/servicerole", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/disassociate-service-role-from-account-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 200, :http.request.configuration/action "DisassociateServiceRoleFromAccount", :http.request.spec/error-spec {"InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef disassociate-service-role-from-account :args (clojure.spec.alpha/? :portkey.aws.greengrass/disassociate-service-role-from-account-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/disassociate-service-role-from-account-response))

(clojure.core/defn reset-deployments ([reset-deployments-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-reset-deployments-request reset-deployments-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/reset-deployments-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/deployments/$reset", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/reset-deployments-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/action "ResetDeployments", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef reset-deployments :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/reset-deployments-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/reset-deployments-response))

(clojure.core/defn create-subscription-definition-version ([create-subscription-definition-version-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-subscription-definition-version-request create-subscription-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/create-subscription-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/create-subscription-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/action "CreateSubscriptionDefinitionVersion", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-subscription-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-subscription-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-subscription-definition-version-response))

(clojure.core/defn delete-subscription-definition ([delete-subscription-definition-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-delete-subscription-definition-request delete-subscription-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/delete-subscription-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/delete-subscription-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 200, :http.request.configuration/action "DeleteSubscriptionDefinition", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef delete-subscription-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/delete-subscription-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/delete-subscription-definition-response))

(clojure.core/defn create-logger-definition-version ([create-logger-definition-version-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-logger-definition-version-request create-logger-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/create-logger-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/loggers/{LoggerDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/create-logger-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/action "CreateLoggerDefinitionVersion", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-logger-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-logger-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-logger-definition-version-response))

(clojure.core/defn delete-logger-definition ([delete-logger-definition-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-delete-logger-definition-request delete-logger-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/delete-logger-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/loggers/{LoggerDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/delete-logger-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 200, :http.request.configuration/action "DeleteLoggerDefinition", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef delete-logger-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/delete-logger-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/delete-logger-definition-response))

(clojure.core/defn get-subscription-definition ([get-subscription-definition-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-get-subscription-definition-request get-subscription-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/get-subscription-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/get-subscription-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "GetSubscriptionDefinition", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-subscription-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-subscription-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-subscription-definition-response))

(clojure.core/defn update-group-certificate-configuration ([update-group-certificate-configuration-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-update-group-certificate-configuration-request update-group-certificate-configuration-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/update-group-certificate-configuration-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/update-group-certificate-configuration-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/action "UpdateGroupCertificateConfiguration", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef update-group-certificate-configuration :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-group-certificate-configuration-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/update-group-certificate-configuration-response))

(clojure.core/defn create-deployment ([create-deployment-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-deployment-request create-deployment-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/create-deployment-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/deployments", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/create-deployment-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/action "CreateDeployment", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-deployment :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-deployment-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-deployment-response))

(clojure.core/defn delete-device-definition ([delete-device-definition-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-delete-device-definition-request delete-device-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/delete-device-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/devices/{DeviceDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/delete-device-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 200, :http.request.configuration/action "DeleteDeviceDefinition", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef delete-device-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/delete-device-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/delete-device-definition-response))

(clojure.core/defn list-subscription-definitions ([] (list-subscription-definitions {})) ([list-subscription-definitions-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-list-subscription-definitions-request list-subscription-definitions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/list-subscription-definitions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/subscriptions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/list-subscription-definitions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "ListSubscriptionDefinitions", :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef list-subscription-definitions :args (clojure.spec.alpha/? :portkey.aws.greengrass/list-subscription-definitions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-subscription-definitions-response))

(clojure.core/defn list-group-versions ([list-group-versions-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-list-group-versions-request list-group-versions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/list-group-versions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/list-group-versions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "ListGroupVersions", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef list-group-versions :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-group-versions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-group-versions-response))

(clojure.core/defn create-software-update-job ([] (create-software-update-job {})) ([create-software-update-job-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-software-update-job-request create-software-update-job-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/create-software-update-job-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/updates", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/create-software-update-job-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/action "CreateSoftwareUpdateJob", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef create-software-update-job :args (clojure.spec.alpha/? :portkey.aws.greengrass/create-software-update-job-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-software-update-job-response))

(clojure.core/defn list-subscription-definition-versions ([list-subscription-definition-versions-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-list-subscription-definition-versions-request list-subscription-definition-versions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/list-subscription-definition-versions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/list-subscription-definition-versions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "ListSubscriptionDefinitionVersions", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef list-subscription-definition-versions :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-subscription-definition-versions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-subscription-definition-versions-response))

(clojure.core/defn list-logger-definition-versions ([list-logger-definition-versions-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-list-logger-definition-versions-request list-logger-definition-versions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/list-logger-definition-versions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/loggers/{LoggerDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/list-logger-definition-versions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "ListLoggerDefinitionVersions", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef list-logger-definition-versions :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-logger-definition-versions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-logger-definition-versions-response))

(clojure.core/defn get-associated-role ([get-associated-role-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-get-associated-role-request get-associated-role-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/get-associated-role-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/role", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/get-associated-role-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "GetAssociatedRole", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef get-associated-role :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-associated-role-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-associated-role-response))

(clojure.core/defn get-group ([get-group-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-get-group-request get-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/get-group-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/get-group-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "GetGroup", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-group :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-group-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-group-response))

(clojure.core/defn update-group ([update-group-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-update-group-request update-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/update-group-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/update-group-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/action "UpdateGroup", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef update-group :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-group-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/update-group-response))

(clojure.core/defn get-group-certificate-authority ([get-group-certificate-authority-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-get-group-certificate-authority-request get-group-certificate-authority-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/get-group-certificate-authority-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/certificateauthorities/{CertificateAuthorityId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/get-group-certificate-authority-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "GetGroupCertificateAuthority", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef get-group-certificate-authority :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-group-certificate-authority-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-group-certificate-authority-response))

(clojure.core/defn get-core-definition ([get-core-definition-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-get-core-definition-request get-core-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/get-core-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/cores/{CoreDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/get-core-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "GetCoreDefinition", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-core-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-core-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-core-definition-response))

(clojure.core/defn create-resource-definition ([] (create-resource-definition {})) ([create-resource-definition-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-resource-definition-request create-resource-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/create-resource-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/resources", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/create-resource-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/action "CreateResourceDefinition", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-resource-definition :args (clojure.spec.alpha/? :portkey.aws.greengrass/create-resource-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-resource-definition-response))

(clojure.core/defn create-resource-definition-version ([create-resource-definition-version-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-resource-definition-version-request create-resource-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/create-resource-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/resources/{ResourceDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/create-resource-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/action "CreateResourceDefinitionVersion", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-resource-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-resource-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-resource-definition-version-response))

(clojure.core/defn list-core-definitions ([] (list-core-definitions {})) ([list-core-definitions-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-list-core-definitions-request list-core-definitions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/list-core-definitions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/cores", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/list-core-definitions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "ListCoreDefinitions", :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef list-core-definitions :args (clojure.spec.alpha/? :portkey.aws.greengrass/list-core-definitions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-core-definitions-response))

(clojure.core/defn get-deployment-status ([get-deployment-status-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-get-deployment-status-request get-deployment-status-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/get-deployment-status-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/deployments/{DeploymentId}/status", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/get-deployment-status-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "GetDeploymentStatus", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-deployment-status :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-deployment-status-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-deployment-status-response))

(clojure.core/defn get-connectivity-info ([get-connectivity-info-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-get-connectivity-info-request get-connectivity-info-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/get-connectivity-info-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/things/{ThingName}/connectivityInfo", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/get-connectivity-info-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "GetConnectivityInfo", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef get-connectivity-info :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-connectivity-info-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-connectivity-info-response))

(clojure.core/defn get-device-definition ([get-device-definition-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-get-device-definition-request get-device-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/get-device-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/devices/{DeviceDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/get-device-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "GetDeviceDefinition", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-device-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-device-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-device-definition-response))

(clojure.core/defn list-resource-definition-versions ([list-resource-definition-versions-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-list-resource-definition-versions-request list-resource-definition-versions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/list-resource-definition-versions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/resources/{ResourceDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/list-resource-definition-versions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "ListResourceDefinitionVersions", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef list-resource-definition-versions :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-resource-definition-versions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-resource-definition-versions-response))

(clojure.core/defn list-deployments ([list-deployments-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-list-deployments-request list-deployments-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/list-deployments-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/deployments", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/list-deployments-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "ListDeployments", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef list-deployments :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-deployments-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-deployments-response))

(clojure.core/defn create-group-version ([create-group-version-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-group-version-request create-group-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/create-group-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/create-group-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/action "CreateGroupVersion", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-group-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-group-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-group-version-response))

(clojure.core/defn get-device-definition-version ([get-device-definition-version-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-get-device-definition-version-request get-device-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/get-device-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/devices/{DeviceDefinitionId}/versions/{DeviceDefinitionVersionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/get-device-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "GetDeviceDefinitionVersion", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-device-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-device-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-device-definition-version-response))

(clojure.core/defn update-function-definition ([update-function-definition-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-update-function-definition-request update-function-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/update-function-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/functions/{FunctionDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/update-function-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/action "UpdateFunctionDefinition", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef update-function-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-function-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/update-function-definition-response))

(clojure.core/defn list-resource-definitions ([] (list-resource-definitions {})) ([list-resource-definitions-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-list-resource-definitions-request list-resource-definitions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/list-resource-definitions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/resources", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/list-resource-definitions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "ListResourceDefinitions", :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef list-resource-definitions :args (clojure.spec.alpha/? :portkey.aws.greengrass/list-resource-definitions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-resource-definitions-response))

(clojure.core/defn delete-function-definition ([delete-function-definition-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-delete-function-definition-request delete-function-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/delete-function-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/functions/{FunctionDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/delete-function-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 200, :http.request.configuration/action "DeleteFunctionDefinition", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef delete-function-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/delete-function-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/delete-function-definition-response))

(clojure.core/defn list-core-definition-versions ([list-core-definition-versions-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-list-core-definition-versions-request list-core-definition-versions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/list-core-definition-versions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/cores/{CoreDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/list-core-definition-versions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "ListCoreDefinitionVersions", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef list-core-definition-versions :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-core-definition-versions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-core-definition-versions-response))

(clojure.core/defn list-group-certificate-authorities ([list-group-certificate-authorities-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-list-group-certificate-authorities-request list-group-certificate-authorities-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/list-group-certificate-authorities-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/certificateauthorities", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/list-group-certificate-authorities-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "ListGroupCertificateAuthorities", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef list-group-certificate-authorities :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-group-certificate-authorities-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-group-certificate-authorities-response))

(clojure.core/defn get-logger-definition ([get-logger-definition-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-get-logger-definition-request get-logger-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/get-logger-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/loggers/{LoggerDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/get-logger-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "GetLoggerDefinition", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-logger-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-logger-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-logger-definition-response))

(clojure.core/defn update-device-definition ([update-device-definition-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-update-device-definition-request update-device-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/update-device-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/devices/{DeviceDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/update-device-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/action "UpdateDeviceDefinition", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef update-device-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-device-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/update-device-definition-response))

(clojure.core/defn get-resource-definition ([get-resource-definition-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-get-resource-definition-request get-resource-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/get-resource-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/resources/{ResourceDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/get-resource-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "GetResourceDefinition", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-resource-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-resource-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-resource-definition-response))

(clojure.core/defn delete-resource-definition ([delete-resource-definition-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-delete-resource-definition-request delete-resource-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/delete-resource-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/resources/{ResourceDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/delete-resource-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 200, :http.request.configuration/action "DeleteResourceDefinition", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef delete-resource-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/delete-resource-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/delete-resource-definition-response))

(clojure.core/defn create-group-certificate-authority ([create-group-certificate-authority-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-group-certificate-authority-request create-group-certificate-authority-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/create-group-certificate-authority-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/certificateauthorities", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/create-group-certificate-authority-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/action "CreateGroupCertificateAuthority", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef create-group-certificate-authority :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-group-certificate-authority-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-group-certificate-authority-response))

(clojure.core/defn create-function-definition-version ([create-function-definition-version-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-function-definition-version-request create-function-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/create-function-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/functions/{FunctionDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/create-function-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/action "CreateFunctionDefinitionVersion", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-function-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-function-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-function-definition-version-response))

(clojure.core/defn get-core-definition-version ([get-core-definition-version-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-get-core-definition-version-request get-core-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/get-core-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/cores/{CoreDefinitionId}/versions/{CoreDefinitionVersionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/get-core-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "GetCoreDefinitionVersion", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-core-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-core-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-core-definition-version-response))

(clojure.core/defn get-function-definition-version ([get-function-definition-version-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-get-function-definition-version-request get-function-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/get-function-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/functions/{FunctionDefinitionId}/versions/{FunctionDefinitionVersionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/get-function-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "GetFunctionDefinitionVersion", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-function-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-function-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-function-definition-version-response))

(clojure.core/defn update-core-definition ([update-core-definition-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-update-core-definition-request update-core-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/update-core-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/cores/{CoreDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/update-core-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/action "UpdateCoreDefinition", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef update-core-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-core-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/update-core-definition-response))

(clojure.core/defn associate-role-to-group ([associate-role-to-group-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-associate-role-to-group-request associate-role-to-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/associate-role-to-group-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/role", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/associate-role-to-group-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/action "AssociateRoleToGroup", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef associate-role-to-group :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/associate-role-to-group-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/associate-role-to-group-response))

(clojure.core/defn associate-service-role-to-account ([] (associate-service-role-to-account {})) ([associate-service-role-to-account-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-associate-service-role-to-account-request associate-service-role-to-account-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/associate-service-role-to-account-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/servicerole", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/associate-service-role-to-account-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/action "AssociateServiceRoleToAccount", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef associate-service-role-to-account :args (clojure.spec.alpha/? :portkey.aws.greengrass/associate-service-role-to-account-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/associate-service-role-to-account-response))

(clojure.core/defn update-subscription-definition ([update-subscription-definition-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-update-subscription-definition-request update-subscription-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/update-subscription-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/update-subscription-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/action "UpdateSubscriptionDefinition", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef update-subscription-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-subscription-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/update-subscription-definition-response))

(clojure.core/defn update-connectivity-info ([update-connectivity-info-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-update-connectivity-info-request update-connectivity-info-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/update-connectivity-info-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/things/{ThingName}/connectivityInfo", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/update-connectivity-info-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/action "UpdateConnectivityInfo", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef update-connectivity-info :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-connectivity-info-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/update-connectivity-info-response))

(clojure.core/defn create-group ([] (create-group {})) ([create-group-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-group-request create-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/create-group-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/create-group-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/action "CreateGroup", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-group :args (clojure.spec.alpha/? :portkey.aws.greengrass/create-group-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-group-response))

(clojure.core/defn create-subscription-definition ([] (create-subscription-definition {})) ([create-subscription-definition-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-subscription-definition-request create-subscription-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/create-subscription-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/subscriptions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/create-subscription-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/action "CreateSubscriptionDefinition", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-subscription-definition :args (clojure.spec.alpha/? :portkey.aws.greengrass/create-subscription-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-subscription-definition-response))

(clojure.core/defn get-group-version ([get-group-version-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-get-group-version-request get-group-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/get-group-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/versions/{GroupVersionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/get-group-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "GetGroupVersion", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-group-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-group-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-group-version-response))

(clojure.core/defn get-service-role-for-account ([] (get-service-role-for-account {})) ([get-service-role-for-account-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-get-service-role-for-account-request get-service-role-for-account-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/get-service-role-for-account-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/servicerole", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/get-service-role-for-account-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "GetServiceRoleForAccount", :http.request.spec/error-spec {"InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef get-service-role-for-account :args (clojure.spec.alpha/? :portkey.aws.greengrass/get-service-role-for-account-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-service-role-for-account-response))

(clojure.core/defn get-group-certificate-configuration ([get-group-certificate-configuration-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-get-group-certificate-configuration-request get-group-certificate-configuration-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/get-group-certificate-configuration-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/get-group-certificate-configuration-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "GetGroupCertificateConfiguration", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef get-group-certificate-configuration :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-group-certificate-configuration-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-group-certificate-configuration-response))

(clojure.core/defn delete-core-definition ([delete-core-definition-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-delete-core-definition-request delete-core-definition-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/delete-core-definition-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/cores/{CoreDefinitionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/delete-core-definition-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 200, :http.request.configuration/action "DeleteCoreDefinition", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef delete-core-definition :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/delete-core-definition-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/delete-core-definition-response))

(clojure.core/defn get-logger-definition-version ([get-logger-definition-version-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-get-logger-definition-version-request get-logger-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/get-logger-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/loggers/{LoggerDefinitionId}/versions/{LoggerDefinitionVersionId}", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/get-logger-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "GetLoggerDefinitionVersion", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-logger-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-logger-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-logger-definition-version-response))

(clojure.core/defn list-device-definition-versions ([list-device-definition-versions-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-list-device-definition-versions-request list-device-definition-versions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/list-device-definition-versions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/devices/{DeviceDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/list-device-definition-versions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "ListDeviceDefinitionVersions", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef list-device-definition-versions :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-device-definition-versions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-device-definition-versions-response))

(clojure.core/defn create-core-definition-version ([create-core-definition-version-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-core-definition-version-request create-core-definition-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/create-core-definition-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/cores/{CoreDefinitionId}/versions", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/create-core-definition-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/action "CreateCoreDefinitionVersion", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}})))))
(clojure.spec.alpha/fdef create-core-definition-version :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-core-definition-version-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-core-definition-version-response))

(clojure.core/defn disassociate-role-from-group ([disassociate-role-from-group-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-disassociate-role-from-group-request disassociate-role-from-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/disassociate-role-from-group-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/groups/{GroupId}/role", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/disassociate-role-from-group-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 200, :http.request.configuration/action "DisassociateRoleFromGroup", :http.request.spec/error-spec {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}})))))
(clojure.spec.alpha/fdef disassociate-role-from-group :args (clojure.spec.alpha/tuple :portkey.aws.greengrass/disassociate-role-from-group-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/disassociate-role-from-group-response))

(clojure.core/defn list-device-definitions ([] (list-device-definitions {})) ([list-device-definitions-requestinput] (clojure.core/let [request-function-result__28521__auto__ (req-list-device-definitions-request list-device-definitions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.greengrass/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.greengrass/list-device-definitions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/greengrass/definition/devices", :http.request.configuration/version "2017-06-07", :http.request.configuration/service-id nil, :http.request.spec/input-spec :portkey.aws.greengrass/list-device-definitions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "ListDeviceDefinitions", :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef list-device-definitions :args (clojure.spec.alpha/? :portkey.aws.greengrass/list-device-definitions-request) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-device-definitions-response))
