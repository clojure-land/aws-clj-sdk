(ns portkey.aws.rds.-2014-10-31 (:require [portkey.aws]))

(def
 endpoints
 '{"ap-northeast-1"
   {:credential-scope {:service "rds", :region "ap-northeast-1"},
    :ssl-common-name "rds.ap-northeast-1.amazonaws.com",
    :endpoint "https://rds.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "rds", :region "eu-west-1"},
    :ssl-common-name "rds.eu-west-1.amazonaws.com",
    :endpoint "https://rds.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "rds", :region "us-east-2"},
    :ssl-common-name "rds.us-east-2.amazonaws.com",
    :endpoint "https://rds.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope {:service "rds", :region "ap-southeast-2"},
    :ssl-common-name "rds.ap-southeast-2.amazonaws.com",
    :endpoint "https://rds.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "cn-north-1"
   {:credential-scope {:service "rds", :region "cn-north-1"},
    :ssl-common-name "rds.cn-north-1.amazonaws.com.cn",
    :endpoint "https://rds.cn-north-1.amazonaws.com.cn",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "rds", :region "sa-east-1"},
    :ssl-common-name "rds.sa-east-1.amazonaws.com",
    :endpoint "https://rds.sa-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope {:service "rds", :region "ap-southeast-1"},
    :ssl-common-name "rds.ap-southeast-1.amazonaws.com",
    :endpoint "https://rds.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "cn-northwest-1"
   {:credential-scope {:service "rds", :region "cn-northwest-1"},
    :ssl-common-name "rds.cn-northwest-1.amazonaws.com.cn",
    :endpoint "https://rds.cn-northwest-1.amazonaws.com.cn",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope {:service "rds", :region "ap-northeast-2"},
    :ssl-common-name "rds.ap-northeast-2.amazonaws.com",
    :endpoint "https://rds.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-west-3"
   {:credential-scope {:service "rds", :region "eu-west-3"},
    :ssl-common-name "rds.eu-west-3.amazonaws.com",
    :endpoint "https://rds.eu-west-3.amazonaws.com",
    :signature-version :v4},
   "ca-central-1"
   {:credential-scope {:service "rds", :region "ca-central-1"},
    :ssl-common-name "rds.ca-central-1.amazonaws.com",
    :endpoint "https://rds.ca-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "rds", :region "eu-central-1"},
    :ssl-common-name "rds.eu-central-1.amazonaws.com",
    :endpoint "https://rds.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "rds", :region "eu-west-2"},
    :ssl-common-name "rds.eu-west-2.amazonaws.com",
    :endpoint "https://rds.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-gov-west-1"
   {:credential-scope {:service "rds", :region "us-gov-west-1"},
    :ssl-common-name "rds.us-gov-west-1.amazonaws.com",
    :endpoint "https://rds.us-gov-west-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "rds", :region "us-west-2"},
    :ssl-common-name "rds.us-west-2.amazonaws.com",
    :endpoint "https://rds.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "rds", :region "us-east-1"},
    :ssl-common-name "rds.amazonaws.com",
    :endpoint "https://rds.us-east-1.amazonaws.com",
    :signature-version :v4},
   "us-west-1"
   {:credential-scope {:service "rds", :region "us-west-1"},
    :ssl-common-name "rds.us-west-1.amazonaws.com",
    :endpoint "https://rds.us-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-south-1"
   {:credential-scope {:service "rds", :region "ap-south-1"},
    :ssl-common-name "rds.ap-south-1.amazonaws.com",
    :endpoint "https://rds.ap-south-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-subnet-identifier-list)

(clojure.core/declare ser-filter-value-list)

(clojure.core/declare ser-parameters-list)

(clojure.core/declare ser-filter)

(clojure.core/declare ser-source-ids-list)

(clojure.core/declare ser-key-list)

(clojure.core/declare ser-option-names-list)

(clojure.core/declare ser-scaling-configuration)

(clojure.core/declare ser-source-type)

(clojure.core/declare ser-tag-list)

(clojure.core/declare ser-integer)

(clojure.core/declare ser-string)

(clojure.core/declare ser-parameter)

(clojure.core/declare ser-vpc-security-group-id-list)

(clojure.core/declare ser-t-stamp)

(clojure.core/declare ser-event-categories-list)

(clojure.core/declare ser-db-security-group-name-list)

(clojure.core/declare ser-processor-feature)

(clojure.core/declare ser-apply-method)

(clojure.core/declare ser-long)

(clojure.core/declare ser-cloudwatch-logs-export-configuration)

(clojure.core/declare ser-log-type-list)

(clojure.core/declare ser-attribute-value-list)

(clojure.core/declare ser-tag)

(clojure.core/declare ser-boolean-optional)

(clojure.core/declare ser-option-setting)

(clojure.core/declare ser-option-configuration-list)

(clojure.core/declare ser-engine-mode-list)

(clojure.core/declare ser-availability-zones)

(clojure.core/declare ser-long-optional)

(clojure.core/declare ser-processor-feature-list)

(clojure.core/declare ser-option-configuration)

(clojure.core/declare ser-integer-optional)

(clojure.core/declare ser-option-settings-list)

(clojure.core/declare ser-filter-list)

(clojure.core/declare ser-boolean)

(clojure.core/defn- ser-subnet-identifier-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SubnetIdentifier"}))) input), :shape "SubnetIdentifierList", :type "list"})

(clojure.core/defn- ser-filter-value-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "Value"}))) input), :shape "FilterValueList", :type "list"})

(clojure.core/defn- ser-parameters-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-parameter coll) #:http.request.field{:shape "Parameter", :location-name "Parameter"}))) input), :shape "ParametersList", :type "list"})

(clojure.core/defn- ser-filter [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:name input)) #:http.request.field{:name "Name", :shape "String"}) (clojure.core/into (ser-filter-value-list (:values input)) #:http.request.field{:name "Values", :shape "FilterValueList"})], :shape "Filter", :type "structure"}))

(clojure.core/defn- ser-source-ids-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SourceId"}))) input), :shape "SourceIdsList", :type "list"})

(clojure.core/defn- ser-key-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "KeyList", :type "list"})

(clojure.core/defn- ser-option-names-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "OptionNamesList", :type "list"})

(clojure.core/defn- ser-scaling-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScalingConfiguration", :type "structure"} (clojure.core/contains? input :min-capacity) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :min-capacity)) #:http.request.field{:name "MinCapacity", :shape "IntegerOptional"})) (clojure.core/contains? input :max-capacity) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-capacity)) #:http.request.field{:name "MaxCapacity", :shape "IntegerOptional"})) (clojure.core/contains? input :auto-pause) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-pause)) #:http.request.field{:name "AutoPause", :shape "BooleanOptional"})) (clojure.core/contains? input :seconds-until-auto-pause) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :seconds-until-auto-pause)) #:http.request.field{:name "SecondsUntilAutoPause", :shape "IntegerOptional"}))))

(clojure.core/defn- ser-source-type [input] #:http.request.field{:value (clojure.core/get {:dbcluster "db-cluster", "db-security-group" "db-security-group", "db-cluster" "db-cluster", :dbsecuritygroup "db-security-group", :dbclustersnapshot "db-cluster-snapshot", "db-instance" "db-instance", "db-cluster-snapshot" "db-cluster-snapshot", :dbparametergroup "db-parameter-group", "db-parameter-group" "db-parameter-group", "db-snapshot" "db-snapshot", :dbsnapshot "db-snapshot", :dbinstance "db-instance"} input), :shape "SourceType"})

(clojure.core/defn- ser-tag-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-tag coll) #:http.request.field{:shape "Tag", :location-name "Tag"}))) input), :shape "TagList", :type "list"})

(clojure.core/defn- ser-integer [input] #:http.request.field{:value input, :shape "Integer"})

(clojure.core/defn- ser-string [input] #:http.request.field{:value input, :shape "String"})

(clojure.core/defn- ser-parameter [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Parameter", :type "structure"} (clojure.core/contains? input :data-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :data-type)) #:http.request.field{:name "DataType", :shape "String"})) (clojure.core/contains? input :supported-engine-modes) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-engine-mode-list (input :supported-engine-modes)) #:http.request.field{:name "SupportedEngineModes", :shape "EngineModeList"})) (clojure.core/contains? input :parameter-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :parameter-name)) #:http.request.field{:name "ParameterName", :shape "String"})) (clojure.core/contains? input :source) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source)) #:http.request.field{:name "Source", :shape "String"})) (clojure.core/contains? input :minimum-engine-version) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :minimum-engine-version)) #:http.request.field{:name "MinimumEngineVersion", :shape "String"})) (clojure.core/contains? input :allowed-values) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :allowed-values)) #:http.request.field{:name "AllowedValues", :shape "String"})) (clojure.core/contains? input :apply-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :apply-type)) #:http.request.field{:name "ApplyType", :shape "String"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :apply-method) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-apply-method (input :apply-method)) #:http.request.field{:name "ApplyMethod", :shape "ApplyMethod"})) (clojure.core/contains? input :is-modifiable) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :is-modifiable)) #:http.request.field{:name "IsModifiable", :shape "Boolean"})) (clojure.core/contains? input :parameter-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :parameter-value)) #:http.request.field{:name "ParameterValue", :shape "String"}))))

(clojure.core/defn- ser-vpc-security-group-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "VpcSecurityGroupId"}))) input), :shape "VpcSecurityGroupIdList", :type "list"})

(clojure.core/defn- ser-t-stamp [input] #:http.request.field{:value input, :shape "TStamp"})

(clojure.core/defn- ser-event-categories-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "EventCategory"}))) input), :shape "EventCategoriesList", :type "list"})

(clojure.core/defn- ser-db-security-group-name-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "DBSecurityGroupName"}))) input), :shape "DBSecurityGroupNameList", :type "list"})

(clojure.core/defn- ser-processor-feature [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ProcessorFeature", :type "structure"} (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String"}))))

(clojure.core/defn- ser-apply-method [input] #:http.request.field{:value (clojure.core/get {"immediate" "immediate", :immediate "immediate", "pending-reboot" "pending-reboot", :pendingreboot "pending-reboot"} input), :shape "ApplyMethod"})

(clojure.core/defn- ser-long [input] #:http.request.field{:value input, :shape "Long"})

(clojure.core/defn- ser-cloudwatch-logs-export-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "CloudwatchLogsExportConfiguration", :type "structure"} (clojure.core/contains? input :enable-log-types) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-log-types)) #:http.request.field{:name "EnableLogTypes", :shape "LogTypeList"})) (clojure.core/contains? input :disable-log-types) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :disable-log-types)) #:http.request.field{:name "DisableLogTypes", :shape "LogTypeList"}))))

(clojure.core/defn- ser-log-type-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "LogTypeList", :type "list"})

(clojure.core/defn- ser-attribute-value-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "AttributeValue"}))) input), :shape "AttributeValueList", :type "list"})

(clojure.core/defn- ser-tag [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Tag", :type "structure"} (clojure.core/contains? input :key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key)) #:http.request.field{:name "Key", :shape "String"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String"}))))

(clojure.core/defn- ser-boolean-optional [input] #:http.request.field{:value input, :shape "BooleanOptional"})

(clojure.core/defn- ser-option-setting [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "OptionSetting", :type "structure"} (clojure.core/contains? input :data-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :data-type)) #:http.request.field{:name "DataType", :shape "String"})) (clojure.core/contains? input :allowed-values) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :allowed-values)) #:http.request.field{:name "AllowedValues", :shape "String"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String"})) (clojure.core/contains? input :apply-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :apply-type)) #:http.request.field{:name "ApplyType", :shape "String"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :default-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :default-value)) #:http.request.field{:name "DefaultValue", :shape "String"})) (clojure.core/contains? input :is-modifiable) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :is-modifiable)) #:http.request.field{:name "IsModifiable", :shape "Boolean"})) (clojure.core/contains? input :is-collection) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :is-collection)) #:http.request.field{:name "IsCollection", :shape "Boolean"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"}))))

(clojure.core/defn- ser-option-configuration-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-option-configuration coll) #:http.request.field{:shape "OptionConfiguration", :location-name "OptionConfiguration"}))) input), :shape "OptionConfigurationList", :type "list"})

(clojure.core/defn- ser-engine-mode-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "EngineModeList", :type "list"})

(clojure.core/defn- ser-availability-zones [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "AvailabilityZone"}))) input), :shape "AvailabilityZones", :type "list"})

(clojure.core/defn- ser-long-optional [input] #:http.request.field{:value input, :shape "LongOptional"})

(clojure.core/defn- ser-processor-feature-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-processor-feature coll) #:http.request.field{:shape "ProcessorFeature", :location-name "ProcessorFeature"}))) input), :shape "ProcessorFeatureList", :type "list"})

(clojure.core/defn- ser-option-configuration [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:option-name input)) #:http.request.field{:name "OptionName", :shape "String"})], :shape "OptionConfiguration", :type "structure"} (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :option-version) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-version)) #:http.request.field{:name "OptionVersion", :shape "String"})) (clojure.core/contains? input :db-security-group-memberships) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-db-security-group-name-list (input :db-security-group-memberships)) #:http.request.field{:name "DBSecurityGroupMemberships", :shape "DBSecurityGroupNameList"})) (clojure.core/contains? input :vpc-security-group-memberships) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-memberships)) #:http.request.field{:name "VpcSecurityGroupMemberships", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :option-settings) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-option-settings-list (input :option-settings)) #:http.request.field{:name "OptionSettings", :shape "OptionSettingsList"}))))

(clojure.core/defn- ser-integer-optional [input] #:http.request.field{:value input, :shape "IntegerOptional"})

(clojure.core/defn- ser-option-settings-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-option-setting coll) #:http.request.field{:shape "OptionSetting", :location-name "OptionSetting"}))) input), :shape "OptionSettingsList", :type "list"})

(clojure.core/defn- ser-filter-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-filter coll) #:http.request.field{:shape "Filter", :location-name "Filter"}))) input), :shape "FilterList", :type "list"})

(clojure.core/defn- ser-boolean [input] #:http.request.field{:value input, :shape "Boolean"})

(clojure.core/defn- req-describe-db-cluster-snapshots-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :db-cluster-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"})) (clojure.core/contains? input :snapshot-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-type)) #:http.request.field{:name "SnapshotType", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :include-shared) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-shared)) #:http.request.field{:name "IncludeShared", :shape "Boolean"})) (clojure.core/contains? input :include-public) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-public)) #:http.request.field{:name "IncludePublic", :shape "Boolean"}))))

(clojure.core/defn- req-restore-db-cluster-from-s-3-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"}) (clojure.core/into (ser-string (input :master-username)) #:http.request.field{:name "MasterUsername", :shape "String"}) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"}) (clojure.core/into (ser-string (input :source-engine)) #:http.request.field{:name "SourceEngine", :shape "String"}) (clojure.core/into (ser-string (input :source-engine-version)) #:http.request.field{:name "SourceEngineVersion", :shape "String"}) (clojure.core/into (ser-string (input :s-3-bucket-name)) #:http.request.field{:name "S3BucketName", :shape "String"}) (clojure.core/into (ser-string (input :s-3-ingestion-role-arn)) #:http.request.field{:name "S3IngestionRoleArn", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :character-set-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :character-set-name)) #:http.request.field{:name "CharacterSetName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :database-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :database-name)) #:http.request.field{:name "DatabaseName", :shape "String"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :storage-encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :storage-encrypted)) #:http.request.field{:name "StorageEncrypted", :shape "BooleanOptional"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :backtrack-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long-optional (input :backtrack-window)) #:http.request.field{:name "BacktrackWindow", :shape "LongOptional"})) (clojure.core/contains? input :s-3-prefix) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :s-3-prefix)) #:http.request.field{:name "S3Prefix", :shape "String"})) (clojure.core/contains? input :availability-zones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-availability-zones (input :availability-zones)) #:http.request.field{:name "AvailabilityZones", :shape "AvailabilityZones"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-copy-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-db-parameter-group-identifier)) #:http.request.field{:name "SourceDBParameterGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-parameter-group-identifier)) #:http.request.field{:name "TargetDBParameterGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-parameter-group-description)) #:http.request.field{:name "TargetDBParameterGroupDescription", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-copy-db-cluster-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-db-cluster-snapshot-identifier)) #:http.request.field{:name "SourceDBClusterSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-cluster-snapshot-identifier)) #:http.request.field{:name "TargetDBClusterSnapshotIdentifier", :shape "String"})]} (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :pre-signed-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :pre-signed-url)) #:http.request.field{:name "PreSignedUrl", :shape "String"})) (clojure.core/contains? input :copy-tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags)) #:http.request.field{:name "CopyTags", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-instances-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-reset-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})]} (clojure.core/contains? input :reset-all-parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :reset-all-parameters)) #:http.request.field{:name "ResetAllParameters", :shape "Boolean"})) (clojure.core/contains? input :parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-parameters-list (input :parameters)) #:http.request.field{:name "Parameters", :shape "ParametersList"}))))

(clojure.core/defn- req-copy-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-db-cluster-parameter-group-identifier)) #:http.request.field{:name "SourceDBClusterParameterGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-cluster-parameter-group-identifier)) #:http.request.field{:name "TargetDBClusterParameterGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-cluster-parameter-group-description)) #:http.request.field{:name "TargetDBClusterParameterGroupDescription", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-delete-db-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"})]}))

(clojure.core/defn- req-modify-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"}) (clojure.core/into (ser-parameters-list (input :parameters)) #:http.request.field{:name "Parameters", :shape "ParametersList"})]}))

(clojure.core/defn- req-describe-db-snapshots-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})) (clojure.core/contains? input :db-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"})) (clojure.core/contains? input :snapshot-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-type)) #:http.request.field{:name "SnapshotType", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :include-shared) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-shared)) #:http.request.field{:name "IncludeShared", :shape "Boolean"})) (clojure.core/contains? input :include-public) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-public)) #:http.request.field{:name "IncludePublic", :shape "Boolean"}))))

(clojure.core/defn- req-delete-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})]}))

(clojure.core/defn- req-describe-engine-default-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"})]} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-stop-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]}))

(clojure.core/defn- req-create-db-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-engine-versions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :list-supported-character-sets) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :list-supported-character-sets)) #:http.request.field{:name "ListSupportedCharacterSets", :shape "BooleanOptional"})) (clojure.core/contains? input :default-only) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :default-only)) #:http.request.field{:name "DefaultOnly", :shape "Boolean"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :list-supported-timezones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :list-supported-timezones)) #:http.request.field{:name "ListSupportedTimezones", :shape "BooleanOptional"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :db-parameter-group-family) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"}))))

(clojure.core/defn- req-promote-read-replica-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]}))

(clojure.core/defn- req-describe-source-regions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :region-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :region-name)) #:http.request.field{:name "RegionName", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"}))))

(clojure.core/defn- req-describe-event-subscriptions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :subscription-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-db-subnet-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-restore-db-instance-from-db-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional"})) (clojure.core/contains? input :domain-iam-role-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain-iam-role-name)) #:http.request.field{:name "DomainIAMRoleName", :shape "String"})) (clojure.core/contains? input :copy-tags-to-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags-to-snapshot)) #:http.request.field{:name "CopyTagsToSnapshot", :shape "BooleanOptional"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :db-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-name)) #:http.request.field{:name "DBName", :shape "String"})) (clojure.core/contains? input :use-default-processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :use-default-processor-features)) #:http.request.field{:name "UseDefaultProcessorFeatures", :shape "BooleanOptional"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :domain) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain)) #:http.request.field{:name "Domain", :shape "String"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :tde-credential-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-password)) #:http.request.field{:name "TdeCredentialPassword", :shape "String"})) (clojure.core/contains? input :storage-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :storage-type)) #:http.request.field{:name "StorageType", :shape "String"})) (clojure.core/contains? input :processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-processor-feature-list (input :processor-features)) #:http.request.field{:name "ProcessorFeatures", :shape "ProcessorFeatureList"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :tde-credential-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-arn)) #:http.request.field{:name "TdeCredentialArn", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"}))))

(clojure.core/defn- req-restore-db-cluster-to-point-in-time-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :source-db-cluster-identifier)) #:http.request.field{:name "SourceDBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :restore-to-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :restore-to-time)) #:http.request.field{:name "RestoreToTime", :shape "TStamp"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :backtrack-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long-optional (input :backtrack-window)) #:http.request.field{:name "BacktrackWindow", :shape "LongOptional"})) (clojure.core/contains? input :restore-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :restore-type)) #:http.request.field{:name "RestoreType", :shape "String"})) (clojure.core/contains? input :use-latest-restorable-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :use-latest-restorable-time)) #:http.request.field{:name "UseLatestRestorableTime", :shape "Boolean"}))))

(clojure.core/defn- req-restore-db-cluster-from-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :snapshot-identifier)) #:http.request.field{:name "SnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :database-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :database-name)) #:http.request.field{:name "DatabaseName", :shape "String"})) (clojure.core/contains? input :engine-mode) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-mode)) #:http.request.field{:name "EngineMode", :shape "String"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :scaling-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scaling-configuration (input :scaling-configuration)) #:http.request.field{:name "ScalingConfiguration", :shape "ScalingConfiguration"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :backtrack-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long-optional (input :backtrack-window)) #:http.request.field{:name "BacktrackWindow", :shape "LongOptional"})) (clojure.core/contains? input :availability-zones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-availability-zones (input :availability-zones)) #:http.request.field{:name "AvailabilityZones", :shape "AvailabilityZones"}))))

(clojure.core/defn- req-modify-db-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"}) (clojure.core/into (ser-subnet-identifier-list (input :subnet-ids)) #:http.request.field{:name "SubnetIds", :shape "SubnetIdentifierList"})]} (clojure.core/contains? input :db-subnet-group-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-description)) #:http.request.field{:name "DBSubnetGroupDescription", :shape "String"}))))

(clojure.core/defn- req-delete-db-security-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-security-group-name)) #:http.request.field{:name "DBSecurityGroupName", :shape "String"})]}))

(clojure.core/defn- req-create-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :db-security-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-db-security-group-name-list (input :db-security-groups)) #:http.request.field{:name "DBSecurityGroups", :shape "DBSecurityGroupNameList"})) (clojure.core/contains? input :promotion-tier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :promotion-tier)) #:http.request.field{:name "PromotionTier", :shape "IntegerOptional"})) (clojure.core/contains? input :character-set-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :character-set-name)) #:http.request.field{:name "CharacterSetName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional"})) (clojure.core/contains? input :domain-iam-role-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain-iam-role-name)) #:http.request.field{:name "DomainIAMRoleName", :shape "String"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :copy-tags-to-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags-to-snapshot)) #:http.request.field{:name "CopyTagsToSnapshot", :shape "BooleanOptional"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :db-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-name)) #:http.request.field{:name "DBName", :shape "String"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :domain) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain)) #:http.request.field{:name "Domain", :shape "String"})) (clojure.core/contains? input :allocated-storage) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :allocated-storage)) #:http.request.field{:name "AllocatedStorage", :shape "IntegerOptional"})) (clojure.core/contains? input :monitoring-interval) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :monitoring-interval)) #:http.request.field{:name "MonitoringInterval", :shape "IntegerOptional"})) (clojure.core/contains? input :timezone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :timezone)) #:http.request.field{:name "Timezone", :shape "String"})) (clojure.core/contains? input :master-username) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-username)) #:http.request.field{:name "MasterUsername", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :storage-encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :storage-encrypted)) #:http.request.field{:name "StorageEncrypted", :shape "BooleanOptional"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :tde-credential-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-password)) #:http.request.field{:name "TdeCredentialPassword", :shape "String"})) (clojure.core/contains? input :storage-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :storage-type)) #:http.request.field{:name "StorageType", :shape "String"})) (clojure.core/contains? input :processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-processor-feature-list (input :processor-features)) #:http.request.field{:name "ProcessorFeatures", :shape "ProcessorFeatureList"})) (clojure.core/contains? input :performance-insights-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :performance-insights-retention-period)) #:http.request.field{:name "PerformanceInsightsRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :enable-performance-insights) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-performance-insights)) #:http.request.field{:name "EnablePerformanceInsights", :shape "BooleanOptional"})) (clojure.core/contains? input :monitoring-role-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :monitoring-role-arn)) #:http.request.field{:name "MonitoringRoleArn", :shape "String"})) (clojure.core/contains? input :tde-credential-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-arn)) #:http.request.field{:name "TdeCredentialArn", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"})) (clojure.core/contains? input :performance-insights-kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :performance-insights-kms-key-id)) #:http.request.field{:name "PerformanceInsightsKMSKeyId", :shape "String"})) (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-promote-read-replica-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-modify-db-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"})]} (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"}))))

(clojure.core/defn- req-create-option-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"}) (clojure.core/into (ser-string (input :engine-name)) #:http.request.field{:name "EngineName", :shape "String"}) (clojure.core/into (ser-string (input :major-engine-version)) #:http.request.field{:name "MajorEngineVersion", :shape "String"}) (clojure.core/into (ser-string (input :option-group-description)) #:http.request.field{:name "OptionGroupDescription", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-start-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]}))

(clojure.core/defn- req-add-role-to-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :role-arn)) #:http.request.field{:name "RoleArn", :shape "String"})]}))

(clojure.core/defn- req-delete-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :skip-final-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :skip-final-snapshot)) #:http.request.field{:name "SkipFinalSnapshot", :shape "Boolean"})) (clojure.core/contains? input :final-db-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :final-db-snapshot-identifier)) #:http.request.field{:name "FinalDBSnapshotIdentifier", :shape "String"}))))

(clojure.core/defn- req-start-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]}))

(clojure.core/defn- req-delete-db-cluster-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"})]}))

(clojure.core/defn- req-apply-pending-maintenance-action-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-identifier)) #:http.request.field{:name "ResourceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :apply-action)) #:http.request.field{:name "ApplyAction", :shape "String"}) (clojure.core/into (ser-string (input :opt-in-type)) #:http.request.field{:name "OptInType", :shape "String"})]}))

(clojure.core/defn- req-describe-events-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :end-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :end-time)) #:http.request.field{:name "EndTime", :shape "TStamp"})) (clojure.core/contains? input :start-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :start-time)) #:http.request.field{:name "StartTime", :shape "TStamp"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-source-type (input :source-type)) #:http.request.field{:name "SourceType", :shape "SourceType"})) (clojure.core/contains? input :duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :duration)) #:http.request.field{:name "Duration", :shape "IntegerOptional"})) (clojure.core/contains? input :event-categories) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-event-categories-list (input :event-categories)) #:http.request.field{:name "EventCategories", :shape "EventCategoriesList"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :source-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-identifier)) #:http.request.field{:name "SourceIdentifier", :shape "String"}))))

(clojure.core/defn- req-describe-pending-maintenance-actions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :resource-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :resource-identifier)) #:http.request.field{:name "ResourceIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"}))))

(clojure.core/defn- req-authorize-db-security-group-ingress-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-security-group-name)) #:http.request.field{:name "DBSecurityGroupName", :shape "String"})]} (clojure.core/contains? input :cidrip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidrip)) #:http.request.field{:name "CIDRIP", :shape "String"})) (clojure.core/contains? input :ec-2-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-security-group-name)) #:http.request.field{:name "EC2SecurityGroupName", :shape "String"})) (clojure.core/contains? input :ec-2-security-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-security-group-id)) #:http.request.field{:name "EC2SecurityGroupId", :shape "String"})) (clojure.core/contains? input :ec-2-security-group-owner-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-security-group-owner-id)) #:http.request.field{:name "EC2SecurityGroupOwnerId", :shape "String"}))))

(clojure.core/defn- req-remove-role-from-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :role-arn)) #:http.request.field{:name "RoleArn", :shape "String"})]}))

(clojure.core/defn- req-describe-engine-default-cluster-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"})]} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-reset-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})]} (clojure.core/contains? input :reset-all-parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :reset-all-parameters)) #:http.request.field{:name "ResetAllParameters", :shape "Boolean"})) (clojure.core/contains? input :parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-parameters-list (input :parameters)) #:http.request.field{:name "Parameters", :shape "ParametersList"}))))

(clojure.core/defn- req-describe-db-cluster-parameter-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-orderable-db-instance-options-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})]} (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :vpc) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :vpc)) #:http.request.field{:name "Vpc", :shape "BooleanOptional"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-db-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"}) (clojure.core/into (ser-string (input :db-subnet-group-description)) #:http.request.field{:name "DBSubnetGroupDescription", :shape "String"}) (clojure.core/into (ser-subnet-identifier-list (input :subnet-ids)) #:http.request.field{:name "SubnetIds", :shape "SubnetIdentifierList"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-delete-event-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"})]}))

(clojure.core/defn- req-copy-option-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-option-group-identifier)) #:http.request.field{:name "SourceOptionGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-option-group-identifier)) #:http.request.field{:name "TargetOptionGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-option-group-description)) #:http.request.field{:name "TargetOptionGroupDescription", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-copy-db-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-db-snapshot-identifier)) #:http.request.field{:name "SourceDBSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-snapshot-identifier)) #:http.request.field{:name "TargetDBSnapshotIdentifier", :shape "String"})]} (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :copy-tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags)) #:http.request.field{:name "CopyTags", :shape "BooleanOptional"})) (clojure.core/contains? input :pre-signed-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :pre-signed-url)) #:http.request.field{:name "PreSignedUrl", :shape "String"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"}))))

(clojure.core/defn- req-create-db-instance-read-replica-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :source-db-instance-identifier)) #:http.request.field{:name "SourceDBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional"})) (clojure.core/contains? input :pre-signed-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :pre-signed-url)) #:http.request.field{:name "PreSignedUrl", :shape "String"})) (clojure.core/contains? input :copy-tags-to-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags-to-snapshot)) #:http.request.field{:name "CopyTagsToSnapshot", :shape "BooleanOptional"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :use-default-processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :use-default-processor-features)) #:http.request.field{:name "UseDefaultProcessorFeatures", :shape "BooleanOptional"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :monitoring-interval) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :monitoring-interval)) #:http.request.field{:name "MonitoringInterval", :shape "IntegerOptional"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :storage-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :storage-type)) #:http.request.field{:name "StorageType", :shape "String"})) (clojure.core/contains? input :processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-processor-feature-list (input :processor-features)) #:http.request.field{:name "ProcessorFeatures", :shape "ProcessorFeatureList"})) (clojure.core/contains? input :performance-insights-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :performance-insights-retention-period)) #:http.request.field{:name "PerformanceInsightsRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :enable-performance-insights) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-performance-insights)) #:http.request.field{:name "EnablePerformanceInsights", :shape "BooleanOptional"})) (clojure.core/contains? input :monitoring-role-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :monitoring-role-arn)) #:http.request.field{:name "MonitoringRoleArn", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"})) (clojure.core/contains? input :performance-insights-kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :performance-insights-kms-key-id)) #:http.request.field{:name "PerformanceInsightsKMSKeyId", :shape "String"}))))

(clojure.core/defn- req-modify-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :new-db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :new-db-cluster-identifier)) #:http.request.field{:name "NewDBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :scaling-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scaling-configuration (input :scaling-configuration)) #:http.request.field{:name "ScalingConfiguration", :shape "ScalingConfiguration"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :backtrack-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long-optional (input :backtrack-window)) #:http.request.field{:name "BacktrackWindow", :shape "LongOptional"})) (clojure.core/contains? input :apply-immediately) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})) (clojure.core/contains? input :cloudwatch-logs-export-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cloudwatch-logs-export-configuration (input :cloudwatch-logs-export-configuration)) #:http.request.field{:name "CloudwatchLogsExportConfiguration", :shape "CloudwatchLogsExportConfiguration"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-describe-db-cluster-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})]} (clojure.core/contains? input :source) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source)) #:http.request.field{:name "Source", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-add-source-identifier-to-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"}) (clojure.core/into (ser-string (input :source-identifier)) #:http.request.field{:name "SourceIdentifier", :shape "String"})]}))

(clojure.core/defn- req-backtrack-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-t-stamp (input :backtrack-to)) #:http.request.field{:name "BacktrackTo", :shape "TStamp"})]} (clojure.core/contains? input :force) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :force)) #:http.request.field{:name "Force", :shape "BooleanOptional"})) (clojure.core/contains? input :use-earliest-time-on-point-in-time-unavailable) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :use-earliest-time-on-point-in-time-unavailable)) #:http.request.field{:name "UseEarliestTimeOnPointInTimeUnavailable", :shape "BooleanOptional"}))))

(clojure.core/defn- req-add-tags-to-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"}) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})]}))

(clojure.core/defn- req-create-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"}) (clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"}) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-restore-db-instance-to-point-in-time-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-db-instance-identifier)) #:http.request.field{:name "SourceDBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-instance-identifier)) #:http.request.field{:name "TargetDBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional"})) (clojure.core/contains? input :domain-iam-role-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain-iam-role-name)) #:http.request.field{:name "DomainIAMRoleName", :shape "String"})) (clojure.core/contains? input :copy-tags-to-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags-to-snapshot)) #:http.request.field{:name "CopyTagsToSnapshot", :shape "BooleanOptional"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :db-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-name)) #:http.request.field{:name "DBName", :shape "String"})) (clojure.core/contains? input :use-default-processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :use-default-processor-features)) #:http.request.field{:name "UseDefaultProcessorFeatures", :shape "BooleanOptional"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :restore-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :restore-time)) #:http.request.field{:name "RestoreTime", :shape "TStamp"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :domain) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain)) #:http.request.field{:name "Domain", :shape "String"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :tde-credential-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-password)) #:http.request.field{:name "TdeCredentialPassword", :shape "String"})) (clojure.core/contains? input :storage-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :storage-type)) #:http.request.field{:name "StorageType", :shape "String"})) (clojure.core/contains? input :processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-processor-feature-list (input :processor-features)) #:http.request.field{:name "ProcessorFeatures", :shape "ProcessorFeatureList"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :tde-credential-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-arn)) #:http.request.field{:name "TdeCredentialArn", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"})) (clojure.core/contains? input :use-latest-restorable-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :use-latest-restorable-time)) #:http.request.field{:name "UseLatestRestorableTime", :shape "Boolean"}))))

(clojure.core/defn- req-modify-db-snapshot-attribute-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :attribute-name)) #:http.request.field{:name "AttributeName", :shape "String"})]} (clojure.core/contains? input :values-to-add) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value-list (input :values-to-add)) #:http.request.field{:name "ValuesToAdd", :shape "AttributeValueList"})) (clojure.core/contains? input :values-to-remove) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value-list (input :values-to-remove)) #:http.request.field{:name "ValuesToRemove", :shape "AttributeValueList"}))))

(clojure.core/defn- req-modify-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"}) (clojure.core/into (ser-parameters-list (input :parameters)) #:http.request.field{:name "Parameters", :shape "ParametersList"})]}))

(clojure.core/defn- req-describe-valid-db-instance-modifications-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]}))

(clojure.core/defn- req-reboot-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :force-failover) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :force-failover)) #:http.request.field{:name "ForceFailover", :shape "BooleanOptional"}))))

(clojure.core/defn- req-remove-source-identifier-from-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"}) (clojure.core/into (ser-string (input :source-identifier)) #:http.request.field{:name "SourceIdentifier", :shape "String"})]}))

(clojure.core/defn- req-remove-tags-from-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"}) (clojure.core/into (ser-key-list (input :tag-keys)) #:http.request.field{:name "TagKeys", :shape "KeyList"})]}))

(clojure.core/defn- req-modify-db-cluster-snapshot-attribute-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :attribute-name)) #:http.request.field{:name "AttributeName", :shape "String"})]} (clojure.core/contains? input :values-to-add) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value-list (input :values-to-add)) #:http.request.field{:name "ValuesToAdd", :shape "AttributeValueList"})) (clojure.core/contains? input :values-to-remove) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value-list (input :values-to-remove)) #:http.request.field{:name "ValuesToRemove", :shape "AttributeValueList"}))))

(clojure.core/defn- req-purchase-reserved-db-instances-offering-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :reserved-db-instances-offering-id)) #:http.request.field{:name "ReservedDBInstancesOfferingId", :shape "String"})]} (clojure.core/contains? input :reserved-db-instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-db-instance-id)) #:http.request.field{:name "ReservedDBInstanceId", :shape "String"})) (clojure.core/contains? input :db-instance-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :db-instance-count)) #:http.request.field{:name "DBInstanceCount", :shape "IntegerOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-certificates-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :certificate-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :certificate-identifier)) #:http.request.field{:name "CertificateIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-event-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"}) (clojure.core/into (ser-string (input :sns-topic-arn)) #:http.request.field{:name "SnsTopicArn", :shape "String"})]} (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-type)) #:http.request.field{:name "SourceType", :shape "String"})) (clojure.core/contains? input :event-categories) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-event-categories-list (input :event-categories)) #:http.request.field{:name "EventCategories", :shape "EventCategoriesList"})) (clojure.core/contains? input :source-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-source-ids-list (input :source-ids)) #:http.request.field{:name "SourceIds", :shape "SourceIdsList"})) (clojure.core/contains? input :enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enabled)) #:http.request.field{:name "Enabled", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-cluster-snapshot-attributes-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"})]}))

(clojure.core/defn- req-describe-db-clusters-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-db-log-files-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :filename-contains) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :filename-contains)) #:http.request.field{:name "FilenameContains", :shape "String"})) (clojure.core/contains? input :file-last-written) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long (input :file-last-written)) #:http.request.field{:name "FileLastWritten", :shape "Long"})) (clojure.core/contains? input :file-size) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long (input :file-size)) #:http.request.field{:name "FileSize", :shape "Long"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-db-cluster-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-cluster-backtracks-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :backtrack-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :backtrack-identifier)) #:http.request.field{:name "BacktrackIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-db-parameter-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-modify-current-db-cluster-capacity-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :capacity) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :capacity)) #:http.request.field{:name "Capacity", :shape "IntegerOptional"})) (clojure.core/contains? input :seconds-before-timeout) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :seconds-before-timeout)) #:http.request.field{:name "SecondsBeforeTimeout", :shape "IntegerOptional"})) (clojure.core/contains? input :timeout-action) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :timeout-action)) #:http.request.field{:name "TimeoutAction", :shape "String"}))))

(clojure.core/defn- req-delete-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :skip-final-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :skip-final-snapshot)) #:http.request.field{:name "SkipFinalSnapshot", :shape "Boolean"})) (clojure.core/contains? input :final-db-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :final-db-snapshot-identifier)) #:http.request.field{:name "FinalDBSnapshotIdentifier", :shape "String"}))))

(clojure.core/defn- req-describe-event-categories-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-type)) #:http.request.field{:name "SourceType", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"}))))

(clojure.core/defn- req-delete-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})]}))

(clojure.core/defn- req-list-tags-for-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"})]} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"}))))

(clojure.core/defn- req-failover-db-cluster-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :target-db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :target-db-instance-identifier)) #:http.request.field{:name "TargetDBInstanceIdentifier", :shape "String"}))))

(clojure.core/defn- req-delete-db-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})]}))

(clojure.core/defn- req-create-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :replication-source-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :replication-source-identifier)) #:http.request.field{:name "ReplicationSourceIdentifier", :shape "String"})) (clojure.core/contains? input :character-set-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :character-set-name)) #:http.request.field{:name "CharacterSetName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :pre-signed-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :pre-signed-url)) #:http.request.field{:name "PreSignedUrl", :shape "String"})) (clojure.core/contains? input :database-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :database-name)) #:http.request.field{:name "DatabaseName", :shape "String"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :engine-mode) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-mode)) #:http.request.field{:name "EngineMode", :shape "String"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :scaling-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scaling-configuration (input :scaling-configuration)) #:http.request.field{:name "ScalingConfiguration", :shape "ScalingConfiguration"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :master-username) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-username)) #:http.request.field{:name "MasterUsername", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :storage-encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :storage-encrypted)) #:http.request.field{:name "StorageEncrypted", :shape "BooleanOptional"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :backtrack-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long-optional (input :backtrack-window)) #:http.request.field{:name "BacktrackWindow", :shape "LongOptional"})) (clojure.core/contains? input :availability-zones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-availability-zones (input :availability-zones)) #:http.request.field{:name "AvailabilityZones", :shape "AvailabilityZones"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-describe-account-attributes-message [input] (clojure.core/cond-> {}))

(clojure.core/defn- req-download-db-log-file-portion-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :log-file-name)) #:http.request.field{:name "LogFileName", :shape "String"})]} (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :number-of-lines) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :number-of-lines)) #:http.request.field{:name "NumberOfLines", :shape "Integer"}))))

(clojure.core/defn- req-create-db-security-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-security-group-name)) #:http.request.field{:name "DBSecurityGroupName", :shape "String"}) (clojure.core/into (ser-string (input :db-security-group-description)) #:http.request.field{:name "DBSecurityGroupDescription", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-create-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"}) (clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"}) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-snapshot-attributes-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"})]}))

(clojure.core/defn- req-describe-reserved-db-instances-offerings-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :reserved-db-instances-offering-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-db-instances-offering-id)) #:http.request.field{:name "ReservedDBInstancesOfferingId", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :duration)) #:http.request.field{:name "Duration", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :product-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :product-description)) #:http.request.field{:name "ProductDescription", :shape "String"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :offering-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :offering-type)) #:http.request.field{:name "OfferingType", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"}))))

(clojure.core/defn- req-stop-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :db-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"}))))

(clojure.core/defn- req-describe-db-security-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-security-group-name)) #:http.request.field{:name "DBSecurityGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-delete-option-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})]}))

(clojure.core/defn- req-describe-db-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})]} (clojure.core/contains? input :source) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source)) #:http.request.field{:name "Source", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-reserved-db-instances-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :reserved-db-instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-db-instance-id)) #:http.request.field{:name "ReservedDBInstanceId", :shape "String"})) (clojure.core/contains? input :reserved-db-instances-offering-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-db-instances-offering-id)) #:http.request.field{:name "ReservedDBInstancesOfferingId", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :duration)) #:http.request.field{:name "Duration", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :product-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :product-description)) #:http.request.field{:name "ProductDescription", :shape "String"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :offering-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :offering-type)) #:http.request.field{:name "OfferingType", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"}))))

(clojure.core/defn- req-revoke-db-security-group-ingress-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-security-group-name)) #:http.request.field{:name "DBSecurityGroupName", :shape "String"})]} (clojure.core/contains? input :cidrip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidrip)) #:http.request.field{:name "CIDRIP", :shape "String"})) (clojure.core/contains? input :ec-2-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-security-group-name)) #:http.request.field{:name "EC2SecurityGroupName", :shape "String"})) (clojure.core/contains? input :ec-2-security-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-security-group-id)) #:http.request.field{:name "EC2SecurityGroupId", :shape "String"})) (clojure.core/contains? input :ec-2-security-group-owner-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-security-group-owner-id)) #:http.request.field{:name "EC2SecurityGroupOwnerId", :shape "String"}))))

(clojure.core/defn- req-modify-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :db-security-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-db-security-group-name-list (input :db-security-groups)) #:http.request.field{:name "DBSecurityGroups", :shape "DBSecurityGroupNameList"})) (clojure.core/contains? input :promotion-tier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :promotion-tier)) #:http.request.field{:name "PromotionTier", :shape "IntegerOptional"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional"})) (clojure.core/contains? input :domain-iam-role-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain-iam-role-name)) #:http.request.field{:name "DomainIAMRoleName", :shape "String"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :copy-tags-to-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags-to-snapshot)) #:http.request.field{:name "CopyTagsToSnapshot", :shape "BooleanOptional"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :new-db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :new-db-instance-identifier)) #:http.request.field{:name "NewDBInstanceIdentifier", :shape "String"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :use-default-processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :use-default-processor-features)) #:http.request.field{:name "UseDefaultProcessorFeatures", :shape "BooleanOptional"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :domain) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain)) #:http.request.field{:name "Domain", :shape "String"})) (clojure.core/contains? input :allow-major-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :allow-major-version-upgrade)) #:http.request.field{:name "AllowMajorVersionUpgrade", :shape "Boolean"})) (clojure.core/contains? input :allocated-storage) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :allocated-storage)) #:http.request.field{:name "AllocatedStorage", :shape "IntegerOptional"})) (clojure.core/contains? input :monitoring-interval) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :monitoring-interval)) #:http.request.field{:name "MonitoringInterval", :shape "IntegerOptional"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :db-port-number) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :db-port-number)) #:http.request.field{:name "DBPortNumber", :shape "IntegerOptional"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :tde-credential-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-password)) #:http.request.field{:name "TdeCredentialPassword", :shape "String"})) (clojure.core/contains? input :storage-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :storage-type)) #:http.request.field{:name "StorageType", :shape "String"})) (clojure.core/contains? input :apply-immediately) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})) (clojure.core/contains? input :processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-processor-feature-list (input :processor-features)) #:http.request.field{:name "ProcessorFeatures", :shape "ProcessorFeatureList"})) (clojure.core/contains? input :ca-certificate-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ca-certificate-identifier)) #:http.request.field{:name "CACertificateIdentifier", :shape "String"})) (clojure.core/contains? input :cloudwatch-logs-export-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cloudwatch-logs-export-configuration (input :cloudwatch-logs-export-configuration)) #:http.request.field{:name "CloudwatchLogsExportConfiguration", :shape "CloudwatchLogsExportConfiguration"})) (clojure.core/contains? input :performance-insights-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :performance-insights-retention-period)) #:http.request.field{:name "PerformanceInsightsRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :enable-performance-insights) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-performance-insights)) #:http.request.field{:name "EnablePerformanceInsights", :shape "BooleanOptional"})) (clojure.core/contains? input :monitoring-role-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :monitoring-role-arn)) #:http.request.field{:name "MonitoringRoleArn", :shape "String"})) (clojure.core/contains? input :tde-credential-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-arn)) #:http.request.field{:name "TdeCredentialArn", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"})) (clojure.core/contains? input :performance-insights-kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :performance-insights-kms-key-id)) #:http.request.field{:name "PerformanceInsightsKMSKeyId", :shape "String"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-restore-db-instance-from-s-3-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"}) (clojure.core/into (ser-string (input :source-engine)) #:http.request.field{:name "SourceEngine", :shape "String"}) (clojure.core/into (ser-string (input :source-engine-version)) #:http.request.field{:name "SourceEngineVersion", :shape "String"}) (clojure.core/into (ser-string (input :s-3-bucket-name)) #:http.request.field{:name "S3BucketName", :shape "String"}) (clojure.core/into (ser-string (input :s-3-ingestion-role-arn)) #:http.request.field{:name "S3IngestionRoleArn", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :db-security-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-db-security-group-name-list (input :db-security-groups)) #:http.request.field{:name "DBSecurityGroups", :shape "DBSecurityGroupNameList"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :copy-tags-to-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags-to-snapshot)) #:http.request.field{:name "CopyTagsToSnapshot", :shape "BooleanOptional"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :db-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-name)) #:http.request.field{:name "DBName", :shape "String"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :use-default-processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :use-default-processor-features)) #:http.request.field{:name "UseDefaultProcessorFeatures", :shape "BooleanOptional"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :allocated-storage) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :allocated-storage)) #:http.request.field{:name "AllocatedStorage", :shape "IntegerOptional"})) (clojure.core/contains? input :monitoring-interval) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :monitoring-interval)) #:http.request.field{:name "MonitoringInterval", :shape "IntegerOptional"})) (clojure.core/contains? input :master-username) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-username)) #:http.request.field{:name "MasterUsername", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :storage-encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :storage-encrypted)) #:http.request.field{:name "StorageEncrypted", :shape "BooleanOptional"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :storage-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :storage-type)) #:http.request.field{:name "StorageType", :shape "String"})) (clojure.core/contains? input :processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-processor-feature-list (input :processor-features)) #:http.request.field{:name "ProcessorFeatures", :shape "ProcessorFeatureList"})) (clojure.core/contains? input :performance-insights-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :performance-insights-retention-period)) #:http.request.field{:name "PerformanceInsightsRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :s-3-prefix) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :s-3-prefix)) #:http.request.field{:name "S3Prefix", :shape "String"})) (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :enable-performance-insights) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-performance-insights)) #:http.request.field{:name "EnablePerformanceInsights", :shape "BooleanOptional"})) (clojure.core/contains? input :monitoring-role-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :monitoring-role-arn)) #:http.request.field{:name "MonitoringRoleArn", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"})) (clojure.core/contains? input :performance-insights-kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :performance-insights-kms-key-id)) #:http.request.field{:name "PerformanceInsightsKMSKeyId", :shape "String"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-modify-option-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})]} (clojure.core/contains? input :options-to-include) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-option-configuration-list (input :options-to-include)) #:http.request.field{:name "OptionsToInclude", :shape "OptionConfigurationList"})) (clojure.core/contains? input :options-to-remove) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-option-names-list (input :options-to-remove)) #:http.request.field{:name "OptionsToRemove", :shape "OptionNamesList"})) (clojure.core/contains? input :apply-immediately) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"}))))

(clojure.core/defn- req-describe-option-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :engine-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-name)) #:http.request.field{:name "EngineName", :shape "String"})) (clojure.core/contains? input :major-engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :major-engine-version)) #:http.request.field{:name "MajorEngineVersion", :shape "String"}))))

(clojure.core/defn- req-modify-event-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"})]} (clojure.core/contains? input :sns-topic-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :sns-topic-arn)) #:http.request.field{:name "SnsTopicArn", :shape "String"})) (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-type)) #:http.request.field{:name "SourceType", :shape "String"})) (clojure.core/contains? input :event-categories) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-event-categories-list (input :event-categories)) #:http.request.field{:name "EventCategories", :shape "EventCategoriesList"})) (clojure.core/contains? input :enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enabled)) #:http.request.field{:name "Enabled", :shape "BooleanOptional"}))))

(clojure.core/defn- req-describe-option-group-options-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :engine-name)) #:http.request.field{:name "EngineName", :shape "String"})]} (clojure.core/contains? input :major-engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :major-engine-version)) #:http.request.field{:name "MajorEngineVersion", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/source-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/vpc-security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/vpc-security-group-membership))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/certificate-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/certificate))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/subnet-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-db-cluster-to-point-in-time-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-maintenance-action/action (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-maintenance-action/auto-applied-after-date (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-maintenance-action/forced-apply-date (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-maintenance-action/opt-in-status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-maintenance-action/current-apply-date (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-maintenance-action/description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/pending-maintenance-action (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.pending-maintenance-action/action :portkey.aws.rds.-2014-10-31.pending-maintenance-action/auto-applied-after-date :portkey.aws.rds.-2014-10-31.pending-maintenance-action/forced-apply-date :portkey.aws.rds.-2014-10-31.pending-maintenance-action/opt-in-status :portkey.aws.rds.-2014-10-31.pending-maintenance-action/current-apply-date :portkey.aws.rds.-2014-10-31.pending-maintenance-action/description]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/read-replica-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-db-instance-from-db-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/remove-source-identifier-from-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-backtrack-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-snapshot]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/snapshot-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/filter-value-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/parameters-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/parameter))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/domain-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/ec-2-security-group-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/ec-2-security-group))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/copy-db-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.double-range/from (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/double))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.double-range/to (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/double))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/double-range (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.double-range/from :portkey.aws.rds.-2014-10-31.double-range/to]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.minimum-engine-version-per-allowed-value/allowed-value (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.minimum-engine-version-per-allowed-value/minimum-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/minimum-engine-version-per-allowed-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.minimum-engine-version-per-allowed-value/allowed-value :portkey.aws.rds.-2014-10-31.minimum-engine-version-per-allowed-value/minimum-engine-version]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-snapshot-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/snapshot-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/include-shared (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/include-public (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-cluster-snapshots-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/db-cluster-identifier :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/db-cluster-snapshot-identifier :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/snapshot-type :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/filters :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/marker :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/include-shared :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/include-public]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/character-set-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/database-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/s-3-ingestion-role-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/s-3-bucket-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/source-engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/master-username (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/source-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/backtrack-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/s-3-prefix (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-db-cluster-from-s-3-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/db-cluster-identifier :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/engine :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/master-username :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/master-user-password :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/source-engine :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/source-engine-version :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/s-3-bucket-name :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/s-3-ingestion-role-arn] :opt-un [:portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/deletion-protection :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/backup-retention-period :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/option-group-name :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/character-set-name :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/enable-iam-database-authentication :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/database-name :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/preferred-maintenance-window :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/enable-cloudwatch-logs-exports :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/tags :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/vpc-security-group-ids :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/db-cluster-parameter-group-name :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/engine-version :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/storage-encrypted :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/port :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/kms-key-id :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/backtrack-window :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/s-3-prefix :portkey.aws.rds.-2014-10-31/availability-zones :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-parameter-group-message/source-db-parameter-group-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-parameter-group-message/target-db-parameter-group-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-parameter-group-message/target-db-parameter-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/copy-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.copy-db-parameter-group-message/source-db-parameter-group-identifier :portkey.aws.rds.-2014-10-31.copy-db-parameter-group-message/target-db-parameter-group-identifier :portkey.aws.rds.-2014-10-31.copy-db-parameter-group-message/target-db-parameter-group-description] :opt-un [:portkey.aws.rds.-2014-10-31.copy-db-parameter-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-role/role-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-role/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-role/feature-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-role (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-role/role-arn :portkey.aws.rds.-2014-10-31.db-cluster-role/status :portkey.aws.rds.-2014-10-31.db-cluster-role/feature-name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.filter/name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.filter/values (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-value-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/filter (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.filter/name :portkey.aws.rds.-2014-10-31.filter/values] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/pending-maintenance-action-details (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/pending-maintenance-action))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-cluster-snapshot-message/source-db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-cluster-snapshot-message/target-db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-cluster-snapshot-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-cluster-snapshot-message/pre-signed-url (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-cluster-snapshot-message/copy-tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-cluster-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/copy-db-cluster-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.copy-db-cluster-snapshot-message/source-db-cluster-snapshot-identifier :portkey.aws.rds.-2014-10-31.copy-db-cluster-snapshot-message/target-db-cluster-snapshot-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.copy-db-cluster-snapshot-message/kms-key-id :portkey.aws.rds.-2014-10-31.copy-db-cluster-snapshot-message/pre-signed-url :portkey.aws.rds.-2014-10-31.copy-db-cluster-snapshot-message/copy-tags :portkey.aws.rds.-2014-10-31.copy-db-cluster-snapshot-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/source-region-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/source-region))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/promote-read-replica-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-parameter-group-status/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-parameter-group-status/parameter-apply-status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-parameter-group-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-parameter-group-status/db-parameter-group-name :portkey.aws.rds.-2014-10-31.db-parameter-group-status/parameter-apply-status]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/valid-storage-options-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/valid-storage-options))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-security-groups (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-security-group))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-instances-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-instances-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-instances-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-instances-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-instances-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-instances-message/db-instance-identifier :portkey.aws.rds.-2014-10-31.describe-db-instances-message/filters :portkey.aws.rds.-2014-10-31.describe-db-instances-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-instances-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-db-instance-to-point-in-time-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reset-db-cluster-parameter-group-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reset-db-cluster-parameter-group-message/reset-all-parameters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reset-db-cluster-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reset-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.reset-db-cluster-parameter-group-message/db-cluster-parameter-group-name] :opt-un [:portkey.aws.rds.-2014-10-31.reset-db-cluster-parameter-group-message/reset-all-parameters :portkey.aws.rds.-2014-10-31.reset-db-cluster-parameter-group-message/parameters]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-cluster-parameter-group-message/source-db-cluster-parameter-group-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-cluster-parameter-group-message/target-db-cluster-parameter-group-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-cluster-parameter-group-message/target-db-cluster-parameter-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-cluster-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/copy-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.copy-db-cluster-parameter-group-message/source-db-cluster-parameter-group-identifier :portkey.aws.rds.-2014-10-31.copy-db-cluster-parameter-group-message/target-db-cluster-parameter-group-identifier :portkey.aws.rds.-2014-10-31.copy-db-cluster-parameter-group-message/target-db-cluster-parameter-group-description] :opt-un [:portkey.aws.rds.-2014-10-31.copy-db-cluster-parameter-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-snapshot-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.delete-db-snapshot-message/db-snapshot-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-parameter-group-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.modify-db-cluster-parameter-group-message/db-cluster-parameter-group-name :portkey.aws.rds.-2014-10-31.modify-db-cluster-parameter-group-message/parameters] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/snapshot-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/include-shared (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/include-public (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-snapshots-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/db-instance-identifier :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/db-snapshot-identifier :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/snapshot-type :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/filters :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/marker :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/include-shared :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/include-public]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-parameter-group-details/parameters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-parameter-group-details/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-parameter-group-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-parameter-group-details/parameters :portkey.aws.rds.-2014-10-31.db-parameter-group-details/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-version/version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-version/is-default (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.option-version/version :portkey.aws.rds.-2014-10-31.option-version/is-default]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-parameter-group-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.delete-db-parameter-group-message/db-parameter-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/double-optional clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/minimum-engine-version-per-allowed-value-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/minimum-engine-version-per-allowed-value))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.scaling-configuration-info/min-capacity (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.scaling-configuration-info/max-capacity (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.scaling-configuration-info/auto-pause (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.scaling-configuration-info/seconds-until-auto-pause (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/scaling-configuration-info (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.scaling-configuration-info/min-capacity :portkey.aws.rds.-2014-10-31.scaling-configuration-info/max-capacity :portkey.aws.rds.-2014-10-31.scaling-configuration-info/auto-pause :portkey.aws.rds.-2014-10-31.scaling-configuration-info/seconds-until-auto-pause]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/source-ids-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.source-region-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.source-region-message/source-regions (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/source-region-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/source-region-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.source-region-message/marker :portkey.aws.rds.-2014-10-31.source-region-message/source-regions]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-snapshot-attribute-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-snapshot-attribute))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-db-cluster-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.source-region/region-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.source-region/endpoint (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.source-region/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/source-region (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.source-region/region-name :portkey.aws.rds.-2014-10-31.source-region/endpoint :portkey.aws.rds.-2014-10-31.source-region/status]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/options-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/option))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-engine-default-parameters-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-engine-default-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-engine-default-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-engine-default-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-engine-default-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.describe-engine-default-parameters-message/db-parameter-group-family] :opt-un [:portkey.aws.rds.-2014-10-31.describe-engine-default-parameters-message/filters :portkey.aws.rds.-2014-10-31.describe-engine-default-parameters-message/max-records :portkey.aws.rds.-2014-10-31.describe-engine-default-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/start-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.stop-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/stop-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.stop-db-cluster-message/db-cluster-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/sns-no-authorization-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/copy-option-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/option-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option/vpc-security-group-memberships (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option/option-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option/db-security-group-memberships (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option/option-settings (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/option-setting-configuration-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option/permanent (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option/persistent (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option/option-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option/option-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.option/vpc-security-group-memberships :portkey.aws.rds.-2014-10-31.option/option-version :portkey.aws.rds.-2014-10-31.option/db-security-group-memberships :portkey.aws.rds.-2014-10-31.option/option-settings :portkey.aws.rds.-2014-10-31.option/permanent :portkey.aws.rds.-2014-10-31.option/persistent :portkey.aws.rds.-2014-10-31.option/port :portkey.aws.rds.-2014-10-31.option/option-description :portkey.aws.rds.-2014-10-31.option/option-name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-group-options-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/option-group-option))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-snapshot-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-snapshot-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.create-db-snapshot-message/db-snapshot-identifier :portkey.aws.rds.-2014-10-31.create-db-snapshot-message/db-instance-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.create-db-snapshot-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-parameter-group-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-parameter-group))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reboot-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/instance-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-parameter-group-status-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-parameter-group-status))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-parameter-group-name-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-parameter-group-name-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-parameter-group-name-message/db-parameter-group-name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/apply-pending-maintenance-action-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/resource-pending-maintenance-actions]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/double-range-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/double-range))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/list-supported-character-sets (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/default-only (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/list-supported-timezones (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-engine-versions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/marker :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/list-supported-character-sets :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/default-only :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/engine-version :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/list-supported-timezones :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/filters :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/engine :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/db-parameter-group-family]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.promote-read-replica-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/promote-read-replica-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.promote-read-replica-db-cluster-message/db-cluster-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-parameter-group-name-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-name-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-parameter-group-name-message/db-cluster-parameter-group-name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-source-regions-message/region-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-source-regions-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-source-regions-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-source-regions-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-source-regions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-source-regions-message/region-name :portkey.aws.rds.-2014-10-31.describe-source-regions-message/max-records :portkey.aws.rds.-2014-10-31.describe-source-regions-message/marker :portkey.aws.rds.-2014-10-31.describe-source-regions-message/filters]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-event-subscriptions-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-event-subscriptions-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-event-subscriptions-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-event-subscriptions-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-event-subscriptions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-event-subscriptions-message/subscription-name :portkey.aws.rds.-2014-10-31.describe-event-subscriptions-message/filters :portkey.aws.rds.-2014-10-31.describe-event-subscriptions-message/max-records :portkey.aws.rds.-2014-10-31.describe-event-subscriptions-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-subnet-groups-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-subnet-groups-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-subnet-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-subnet-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-subnet-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-subnet-groups-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.describe-db-subnet-groups-message/filters :portkey.aws.rds.-2014-10-31.describe-db-subnet-groups-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-subnet-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/pending-maintenance-actions (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/resource-pending-maintenance-actions))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-db-cluster-from-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/domain-iam-role-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/db-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/use-default-processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/domain (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/iops (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/tde-credential-password (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/storage-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-db-instance-from-db-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/db-instance-identifier :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/db-snapshot-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/deletion-protection :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/option-group-name :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/enable-iam-database-authentication :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/publicly-accessible :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/domain-iam-role-name :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/copy-tags-to-snapshot :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/enable-cloudwatch-logs-exports :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/auto-minor-version-upgrade :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/tags :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/db-name :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/use-default-processor-features :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/availability-zone :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/license-model :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/domain :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/port :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/iops :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/tde-credential-password :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/storage-type :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/processor-features :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/db-instance-class :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/engine :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/tde-credential-arn :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/multi-az]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option-setting/setting-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option-setting/setting-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option-setting/default-value (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option-setting/apply-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option-setting/allowed-values (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option-setting/is-modifiable (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option-setting/is-required (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option-setting/minimum-engine-version-per-allowed-value (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/minimum-engine-version-per-allowed-value-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-group-option-setting (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.option-group-option-setting/setting-name :portkey.aws.rds.-2014-10-31.option-group-option-setting/setting-description :portkey.aws.rds.-2014-10-31.option-group-option-setting/default-value :portkey.aws.rds.-2014-10-31.option-group-option-setting/apply-type :portkey.aws.rds.-2014-10-31.option-group-option-setting/allowed-values :portkey.aws.rds.-2014-10-31.option-group-option-setting/is-modifiable :portkey.aws.rds.-2014-10-31.option-group-option-setting/is-required :portkey.aws.rds.-2014-10-31.option-group-option-setting/minimum-engine-version-per-allowed-value]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.subnet/subnet-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.subnet/subnet-availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/availability-zone))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.subnet/subnet-status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/subnet (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.subnet/subnet-identifier :portkey.aws.rds.-2014-10-31.subnet/subnet-availability-zone :portkey.aws.rds.-2014-10-31.subnet/subnet-status]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-subnet-group-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-subnet-group-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-subnet-group-message/marker :portkey.aws.rds.-2014-10-31/db-subnet-groups]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/restore-to-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/source-db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/backtrack-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/restore-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/use-latest-restorable-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-db-cluster-to-point-in-time-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/db-cluster-identifier :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/source-db-cluster-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/deletion-protection :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/option-group-name :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/enable-iam-database-authentication :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/enable-cloudwatch-logs-exports :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/restore-to-time :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/tags :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/vpc-security-group-ids :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/port :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/kms-key-id :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/backtrack-window :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/restore-type :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/use-latest-restorable-time]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/database-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/engine-mode (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/backtrack-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-db-cluster-from-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/db-cluster-identifier :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/snapshot-identifier :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/engine] :opt-un [:portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/deletion-protection :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/option-group-name :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/enable-iam-database-authentication :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/database-name :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/engine-mode :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/enable-cloudwatch-logs-exports :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/tags :portkey.aws.rds.-2014-10-31/scaling-configuration :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/vpc-security-group-ids :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/engine-version :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/port :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/kms-key-id :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/backtrack-window :portkey.aws.rds.-2014-10-31/availability-zones]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/snapshot-create-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/snapshot-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/master-username (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/vpc-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/cluster-create-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/iam-database-authentication-enabled (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/source-db-cluster-snapshot-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/db-cluster-snapshot-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/percent-progress (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-snapshot (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-snapshot/snapshot-create-time :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/db-cluster-snapshot-identifier :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/status :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/snapshot-type :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/license-model :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/allocated-storage :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/master-username :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/engine-version :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/storage-encrypted :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/port :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/vpc-id :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/kms-key-id :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/cluster-create-time :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/iam-database-authentication-enabled :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/engine :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/source-db-cluster-snapshot-arn :portkey.aws.rds.-2014-10-31/availability-zones :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/db-cluster-identifier :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/db-cluster-snapshot-arn :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/percent-progress]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-subnet-group-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-subnet-group-message/db-subnet-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.modify-db-subnet-group-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.modify-db-subnet-group-message/subnet-ids] :opt-un [:portkey.aws.rds.-2014-10-31.modify-db-subnet-group-message/db-subnet-group-description]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-security-group-message/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-security-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.delete-db-security-group-message/db-security-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-cloudwatch-logs-exports/log-types-to-enable (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-cloudwatch-logs-exports/log-types-to-disable (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/pending-cloudwatch-logs-exports (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.pending-cloudwatch-logs-exports/log-types-to-enable :portkey.aws.rds.-2014-10-31.pending-cloudwatch-logs-exports/log-types-to-disable]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/promote-read-replica-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-security-groups (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/promotion-tier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/character-set-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/domain-iam-role-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/domain (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/monitoring-interval (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/timezone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/master-username (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/iops (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/tde-credential-password (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/storage-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/performance-insights-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/enable-performance-insights (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/performance-insights-kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.create-db-instance-message/db-instance-identifier :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-instance-class :portkey.aws.rds.-2014-10-31.create-db-instance-message/engine] :opt-un [:portkey.aws.rds.-2014-10-31.create-db-instance-message/deletion-protection :portkey.aws.rds.-2014-10-31.create-db-instance-message/backup-retention-period :portkey.aws.rds.-2014-10-31.create-db-instance-message/option-group-name :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-security-groups :portkey.aws.rds.-2014-10-31.create-db-instance-message/promotion-tier :portkey.aws.rds.-2014-10-31.create-db-instance-message/character-set-name :portkey.aws.rds.-2014-10-31.create-db-instance-message/enable-iam-database-authentication :portkey.aws.rds.-2014-10-31.create-db-instance-message/publicly-accessible :portkey.aws.rds.-2014-10-31.create-db-instance-message/domain-iam-role-name :portkey.aws.rds.-2014-10-31.create-db-instance-message/preferred-maintenance-window :portkey.aws.rds.-2014-10-31.create-db-instance-message/copy-tags-to-snapshot :portkey.aws.rds.-2014-10-31.create-db-instance-message/enable-cloudwatch-logs-exports :portkey.aws.rds.-2014-10-31.create-db-instance-message/auto-minor-version-upgrade :portkey.aws.rds.-2014-10-31.create-db-instance-message/tags :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-name :portkey.aws.rds.-2014-10-31.create-db-instance-message/vpc-security-group-ids :portkey.aws.rds.-2014-10-31.create-db-instance-message/availability-zone :portkey.aws.rds.-2014-10-31.create-db-instance-message/master-user-password :portkey.aws.rds.-2014-10-31.create-db-instance-message/license-model :portkey.aws.rds.-2014-10-31.create-db-instance-message/domain :portkey.aws.rds.-2014-10-31.create-db-instance-message/allocated-storage :portkey.aws.rds.-2014-10-31.create-db-instance-message/monitoring-interval :portkey.aws.rds.-2014-10-31.create-db-instance-message/timezone :portkey.aws.rds.-2014-10-31.create-db-instance-message/master-username :portkey.aws.rds.-2014-10-31.create-db-instance-message/engine-version :portkey.aws.rds.-2014-10-31.create-db-instance-message/storage-encrypted :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.create-db-instance-message/port :portkey.aws.rds.-2014-10-31.create-db-instance-message/kms-key-id :portkey.aws.rds.-2014-10-31.create-db-instance-message/iops :portkey.aws.rds.-2014-10-31.create-db-instance-message/tde-credential-password :portkey.aws.rds.-2014-10-31.create-db-instance-message/storage-type :portkey.aws.rds.-2014-10-31.create-db-instance-message/processor-features :portkey.aws.rds.-2014-10-31.create-db-instance-message/performance-insights-retention-period :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-parameter-group-name :portkey.aws.rds.-2014-10-31.create-db-instance-message/enable-performance-insights :portkey.aws.rds.-2014-10-31.create-db-instance-message/monitoring-role-arn :portkey.aws.rds.-2014-10-31.create-db-instance-message/tde-credential-arn :portkey.aws.rds.-2014-10-31.create-db-instance-message/multi-az :portkey.aws.rds.-2014-10-31.create-db-instance-message/performance-insights-kms-key-id :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-cluster-identifier :portkey.aws.rds.-2014-10-31.create-db-instance-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.promote-read-replica-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.promote-read-replica-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.promote-read-replica-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/promote-read-replica-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.promote-read-replica-message/db-instance-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.promote-read-replica-message/backup-retention-period :portkey.aws.rds.-2014-10-31.promote-read-replica-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/key-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-cluster))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-backtrack-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-cluster-backtrack))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-snapshot-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-snapshot-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-snapshot-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.modify-db-snapshot-message/db-snapshot-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.modify-db-snapshot-message/engine-version :portkey.aws.rds.-2014-10-31.modify-db-snapshot-message/option-group-name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-engine-version-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-engine-version))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event-subscription/event-subscription-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event-subscription/customer-aws-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event-subscription/source-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event-subscription/enabled (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event-subscription/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event-subscription/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event-subscription/cust-subscription-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event-subscription/subscription-creation-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/event-subscription (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/source-ids-list :portkey.aws.rds.-2014-10-31.event-subscription/event-subscription-arn :portkey.aws.rds.-2014-10-31.event-subscription/customer-aws-id :portkey.aws.rds.-2014-10-31.event-subscription/source-type :portkey.aws.rds.-2014-10-31.event-subscription/enabled :portkey.aws.rds.-2014-10-31.event-subscription/status :portkey.aws.rds.-2014-10-31.event-subscription/sns-topic-arn :portkey.aws.rds.-2014-10-31/event-categories-list :portkey.aws.rds.-2014-10-31.event-subscription/cust-subscription-id :portkey.aws.rds.-2014-10-31.event-subscription/subscription-creation-time]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/snapshot-create-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/source-region (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/source-db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/encrypted (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/instance-create-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/snapshot-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/timezone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/master-username (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/vpc-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/iops (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/storage-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/iam-database-authentication-enabled (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/db-snapshot-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/percent-progress (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-snapshot (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-snapshot/snapshot-create-time :portkey.aws.rds.-2014-10-31.db-snapshot/option-group-name :portkey.aws.rds.-2014-10-31.db-snapshot/source-region :portkey.aws.rds.-2014-10-31.db-snapshot/source-db-snapshot-identifier :portkey.aws.rds.-2014-10-31.db-snapshot/encrypted :portkey.aws.rds.-2014-10-31.db-snapshot/db-instance-identifier :portkey.aws.rds.-2014-10-31.db-snapshot/instance-create-time :portkey.aws.rds.-2014-10-31.db-snapshot/availability-zone :portkey.aws.rds.-2014-10-31.db-snapshot/status :portkey.aws.rds.-2014-10-31.db-snapshot/snapshot-type :portkey.aws.rds.-2014-10-31.db-snapshot/license-model :portkey.aws.rds.-2014-10-31.db-snapshot/allocated-storage :portkey.aws.rds.-2014-10-31.db-snapshot/timezone :portkey.aws.rds.-2014-10-31.db-snapshot/master-username :portkey.aws.rds.-2014-10-31.db-snapshot/engine-version :portkey.aws.rds.-2014-10-31.db-snapshot/db-snapshot-identifier :portkey.aws.rds.-2014-10-31.db-snapshot/port :portkey.aws.rds.-2014-10-31.db-snapshot/vpc-id :portkey.aws.rds.-2014-10-31.db-snapshot/kms-key-id :portkey.aws.rds.-2014-10-31.db-snapshot/iops :portkey.aws.rds.-2014-10-31.db-snapshot/storage-type :portkey.aws.rds.-2014-10-31.db-snapshot/processor-features :portkey.aws.rds.-2014-10-31.db-snapshot/iam-database-authentication-enabled :portkey.aws.rds.-2014-10-31.db-snapshot/db-snapshot-arn :portkey.aws.rds.-2014-10-31.db-snapshot/engine :portkey.aws.rds.-2014-10-31.db-snapshot/tde-credential-arn :portkey.aws.rds.-2014-10-31.db-snapshot/percent-progress]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-log-files-details/log-file-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-log-files-details/last-written (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-log-files-details/size (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-log-files-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-log-files-details/log-file-name :portkey.aws.rds.-2014-10-31.describe-db-log-files-details/last-written :portkey.aws.rds.-2014-10-31.describe-db-log-files-details/size]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-member/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-member/is-cluster-writer (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-member/db-cluster-parameter-group-status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-member/promotion-tier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-member (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-member/db-instance-identifier :portkey.aws.rds.-2014-10-31.db-cluster-member/is-cluster-writer :portkey.aws.rds.-2014-10-31.db-cluster-member/db-cluster-parameter-group-status :portkey.aws.rds.-2014-10-31.db-cluster-member/promotion-tier]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-option-group-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-option-group-message/engine-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-option-group-message/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-option-group-message/option-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-option-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-option-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.create-option-group-message/option-group-name :portkey.aws.rds.-2014-10-31.create-option-group-message/engine-name :portkey.aws.rds.-2014-10-31.create-option-group-message/major-engine-version :portkey.aws.rds.-2014-10-31.create-option-group-message/option-group-description] :opt-un [:portkey.aws.rds.-2014-10-31.create-option-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-role-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.start-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/start-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.start-db-cluster-message/db-cluster-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-instance-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.add-role-to-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.add-role-to-db-cluster-message/role-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/add-role-to-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.add-role-to-db-cluster-message/db-cluster-identifier :portkey.aws.rds.-2014-10-31.add-role-to-db-cluster-message/role-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-names-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-instance-message/skip-final-snapshot (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-instance-message/final-db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.delete-db-instance-message/db-instance-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.delete-db-instance-message/skip-final-snapshot :portkey.aws.rds.-2014-10-31.delete-db-instance-message/final-db-snapshot-identifier]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot-attributes-result/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot-attributes-result/db-snapshot-attributes (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-snapshot-attribute-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-snapshot-attributes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-snapshot-attributes-result/db-snapshot-identifier :portkey.aws.rds.-2014-10-31.db-snapshot-attributes-result/db-snapshot-attributes]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/shared-snapshot-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-db-subnet-group-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/certificate-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-cluster-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster-snapshot]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/copy-db-cluster-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster-snapshot]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-backtrack/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-backtrack/backtrack-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-backtrack/backtrack-to (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-backtrack/backtracked-from (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-backtrack/backtrack-request-creation-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-backtrack/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-backtrack (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-backtrack/db-cluster-identifier :portkey.aws.rds.-2014-10-31.db-cluster-backtrack/backtrack-identifier :portkey.aws.rds.-2014-10-31.db-cluster-backtrack/backtrack-to :portkey.aws.rds.-2014-10-31.db-cluster-backtrack/backtracked-from :portkey.aws.rds.-2014-10-31.db-cluster-backtrack/backtrack-request-creation-time :portkey.aws.rds.-2014-10-31.db-cluster-backtrack/status]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.start-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/start-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.start-db-instance-message/db-instance-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reserved-db-instance-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/reserved-db-instance))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-options-message/orderable-db-instance-options (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/orderable-db-instance-options-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-options-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/orderable-db-instance-options-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.orderable-db-instance-options-message/orderable-db-instance-options :portkey.aws.rds.-2014-10-31.orderable-db-instance-options-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/event-categories-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/event-categories-map-list]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.resource-pending-maintenance-actions/resource-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/resource-pending-maintenance-actions (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.resource-pending-maintenance-actions/resource-identifier :portkey.aws.rds.-2014-10-31/pending-maintenance-action-details]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-cluster-snapshot-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-cluster-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.delete-db-cluster-snapshot-message/db-cluster-snapshot-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.scaling-configuration/min-capacity (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.scaling-configuration/max-capacity (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.scaling-configuration/auto-pause (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.scaling-configuration/seconds-until-auto-pause (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/scaling-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.scaling-configuration/min-capacity :portkey.aws.rds.-2014-10-31.scaling-configuration/max-capacity :portkey.aws.rds.-2014-10-31.scaling-configuration/auto-pause :portkey.aws.rds.-2014-10-31.scaling-configuration/seconds-until-auto-pause]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.apply-pending-maintenance-action-message/resource-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.apply-pending-maintenance-action-message/apply-action (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.apply-pending-maintenance-action-message/opt-in-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/apply-pending-maintenance-action-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.apply-pending-maintenance-action-message/resource-identifier :portkey.aws.rds.-2014-10-31.apply-pending-maintenance-action-message/apply-action :portkey.aws.rds.-2014-10-31.apply-pending-maintenance-action-message/opt-in-type] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-events-message/end-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-events-message/start-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-events-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-events-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-events-message/duration (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-events-message/event-categories (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-events-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-events-message/source-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-events-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-events-message/end-time :portkey.aws.rds.-2014-10-31.describe-events-message/start-time :portkey.aws.rds.-2014-10-31.describe-events-message/max-records :portkey.aws.rds.-2014-10-31.describe-events-message/marker :portkey.aws.rds.-2014-10-31/source-type :portkey.aws.rds.-2014-10-31.describe-events-message/duration :portkey.aws.rds.-2014-10-31.describe-events-message/event-categories :portkey.aws.rds.-2014-10-31.describe-events-message/filters :portkey.aws.rds.-2014-10-31.describe-events-message/source-identifier]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/subscription-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/replication-source-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/earliest-restorable-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/character-set-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/database-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/engine-mode (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/clone-group-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/enabled-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/master-username (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/hosted-zone-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/db-cluster-resource-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/db-cluster-members (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-member-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/cluster-create-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/capacity (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/backtrack-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/read-replica-identifiers (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/read-replica-identifier-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/db-cluster-parameter-group (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/endpoint (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/iam-database-authentication-enabled (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/db-cluster-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/vpc-security-groups (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/earliest-backtrack-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/reader-endpoint (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/associated-roles (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-roles))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/backtrack-consumed-change-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/percent-progress (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/latest-restorable-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/db-subnet-group (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster/deletion-protection :portkey.aws.rds.-2014-10-31.db-cluster/backup-retention-period :portkey.aws.rds.-2014-10-31.db-cluster/replication-source-identifier :portkey.aws.rds.-2014-10-31.db-cluster/earliest-restorable-time :portkey.aws.rds.-2014-10-31.db-cluster/character-set-name :portkey.aws.rds.-2014-10-31/scaling-configuration-info :portkey.aws.rds.-2014-10-31.db-cluster/database-name :portkey.aws.rds.-2014-10-31.db-cluster/preferred-maintenance-window :portkey.aws.rds.-2014-10-31.db-cluster/engine-mode :portkey.aws.rds.-2014-10-31.db-cluster/clone-group-id :portkey.aws.rds.-2014-10-31.db-cluster/enabled-cloudwatch-logs-exports :portkey.aws.rds.-2014-10-31.db-cluster/status :portkey.aws.rds.-2014-10-31.db-cluster/allocated-storage :portkey.aws.rds.-2014-10-31.db-cluster/master-username :portkey.aws.rds.-2014-10-31.db-cluster/engine-version :portkey.aws.rds.-2014-10-31.db-cluster/hosted-zone-id :portkey.aws.rds.-2014-10-31.db-cluster/storage-encrypted :portkey.aws.rds.-2014-10-31.db-cluster/port :portkey.aws.rds.-2014-10-31.db-cluster/db-cluster-resource-id :portkey.aws.rds.-2014-10-31.db-cluster/db-cluster-members :portkey.aws.rds.-2014-10-31.db-cluster/kms-key-id :portkey.aws.rds.-2014-10-31.db-cluster/cluster-create-time :portkey.aws.rds.-2014-10-31.db-cluster/capacity :portkey.aws.rds.-2014-10-31.db-cluster/backtrack-window :portkey.aws.rds.-2014-10-31.db-cluster/read-replica-identifiers :portkey.aws.rds.-2014-10-31.db-cluster/db-cluster-parameter-group :portkey.aws.rds.-2014-10-31.db-cluster/endpoint :portkey.aws.rds.-2014-10-31.db-cluster/iam-database-authentication-enabled :portkey.aws.rds.-2014-10-31.db-cluster/db-cluster-arn :portkey.aws.rds.-2014-10-31.db-cluster/vpc-security-groups :portkey.aws.rds.-2014-10-31.db-cluster/engine :portkey.aws.rds.-2014-10-31.db-cluster/earliest-backtrack-time :portkey.aws.rds.-2014-10-31/db-cluster-option-group-memberships :portkey.aws.rds.-2014-10-31/availability-zones :portkey.aws.rds.-2014-10-31.db-cluster/reader-endpoint :portkey.aws.rds.-2014-10-31.db-cluster/associated-roles :portkey.aws.rds.-2014-10-31.db-cluster/backtrack-consumed-change-records :portkey.aws.rds.-2014-10-31.db-cluster/multi-az :portkey.aws.rds.-2014-10-31.db-cluster/db-cluster-identifier :portkey.aws.rds.-2014-10-31.db-cluster/preferred-backup-window :portkey.aws.rds.-2014-10-31.db-cluster/percent-progress :portkey.aws.rds.-2014-10-31.db-cluster/latest-restorable-time :portkey.aws.rds.-2014-10-31.db-cluster/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group/option-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group/engine-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group/options (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/options-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group/allows-vpc-and-non-vpc-instance-memberships (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group/vpc-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group/option-group-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.option-group/option-group-name :portkey.aws.rds.-2014-10-31.option-group/option-group-description :portkey.aws.rds.-2014-10-31.option-group/engine-name :portkey.aws.rds.-2014-10-31.option-group/major-engine-version :portkey.aws.rds.-2014-10-31.option-group/options :portkey.aws.rds.-2014-10-31.option-group/allows-vpc-and-non-vpc-instance-memberships :portkey.aws.rds.-2014-10-31.option-group/vpc-id :portkey.aws.rds.-2014-10-31.option-group/option-group-arn]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/authorization-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-groups-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/option-group))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/ip-range-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/ip-range))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-pending-maintenance-actions-message/resource-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-pending-maintenance-actions-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-pending-maintenance-actions-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-pending-maintenance-actions-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-pending-maintenance-actions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-pending-maintenance-actions-message/resource-identifier :portkey.aws.rds.-2014-10-31.describe-pending-maintenance-actions-message/filters :portkey.aws.rds.-2014-10-31.describe-pending-maintenance-actions-message/marker :portkey.aws.rds.-2014-10-31.describe-pending-maintenance-actions-message/max-records]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-db-subnet-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-snapshot]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-status-info/status-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-status-info/normal (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-status-info/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-status-info/message (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-instance-status-info (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-instance-status-info/status-type :portkey.aws.rds.-2014-10-31.db-instance-status-info/normal :portkey.aws.rds.-2014-10-31.db-instance-status-info/status :portkey.aws.rds.-2014-10-31.db-instance-status-info/message]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.authorize-db-security-group-ingress-message/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.authorize-db-security-group-ingress-message/cidrip (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.authorize-db-security-group-ingress-message/ec-2-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.authorize-db-security-group-ingress-message/ec-2-security-group-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.authorize-db-security-group-ingress-message/ec-2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/authorize-db-security-group-ingress-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.authorize-db-security-group-ingress-message/db-security-group-name] :opt-un [:portkey.aws.rds.-2014-10-31.authorize-db-security-group-ingress-message/cidrip :portkey.aws.rds.-2014-10-31.authorize-db-security-group-ingress-message/ec-2-security-group-name :portkey.aws.rds.-2014-10-31.authorize-db-security-group-ingress-message/ec-2-security-group-id :portkey.aws.rds.-2014-10-31.authorize-db-security-group-ingress-message/ec-2-security-group-owner-id]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/sns-topic-arn-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.remove-role-from-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.remove-role-from-db-cluster-message/role-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/remove-role-from-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.remove-role-from-db-cluster-message/db-cluster-identifier :portkey.aws.rds.-2014-10-31.remove-role-from-db-cluster-message/role-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/event-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/event))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-engine-default-cluster-parameters-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-engine-default-cluster-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-engine-default-cluster-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-engine-default-cluster-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-engine-default-cluster-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.describe-engine-default-cluster-parameters-message/db-parameter-group-family] :opt-un [:portkey.aws.rds.-2014-10-31.describe-engine-default-cluster-parameters-message/filters :portkey.aws.rds.-2014-10-31.describe-engine-default-cluster-parameters-message/max-records :portkey.aws.rds.-2014-10-31.describe-engine-default-cluster-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.events-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.events-message/events (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/event-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/events-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.events-message/marker :portkey.aws.rds.-2014-10-31.events-message/events]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.account-attributes-message/account-quotas (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/account-quota-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/account-attributes-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.account-attributes-message/account-quotas]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/source-type #{:dbcluster "db-security-group" "db-cluster" :dbsecuritygroup :dbclustersnapshot "db-instance" "db-cluster-snapshot" :dbparametergroup "db-parameter-group" "db-snapshot" :dbsnapshot :dbinstance})

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/orderable-db-instance-options-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/orderable-db-instance-option))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot-message/db-cluster-snapshots (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-snapshot-message/marker :portkey.aws.rds.-2014-10-31.db-cluster-snapshot-message/db-cluster-snapshots]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot-message/db-snapshots (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-snapshot-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-snapshot-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-snapshot-message/marker :portkey.aws.rds.-2014-10-31.db-snapshot-message/db-snapshots]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/subscription-category-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event/source-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event/message (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event/event-categories (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event/date (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event/source-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/event (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.event/source-identifier :portkey.aws.rds.-2014-10-31/source-type :portkey.aws.rds.-2014-10-31.event/message :portkey.aws.rds.-2014-10-31.event/event-categories :portkey.aws.rds.-2014-10-31.event/date :portkey.aws.rds.-2014-10-31.event/source-arn]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-options-message/option-group-options (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/option-group-options-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-options-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-group-options-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.option-group-options-message/option-group-options :portkey.aws.rds.-2014-10-31.option-group-options-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/revoke-db-security-group-ingress-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-security-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/availability-zone-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/availability-zone))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reset-db-parameter-group-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reset-db-parameter-group-message/reset-all-parameters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reset-db-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reset-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.reset-db-parameter-group-message/db-parameter-group-name] :opt-un [:portkey.aws.rds.-2014-10-31.reset-db-parameter-group-message/reset-all-parameters :portkey.aws.rds.-2014-10-31.reset-db-parameter-group-message/parameters]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameter-groups-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameter-groups-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameter-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-cluster-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-cluster-parameter-groups-message/db-cluster-parameter-group-name :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameter-groups-message/filters :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameter-groups-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameter-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.availability-zone/name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/availability-zone (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.availability-zone/name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event-subscriptions-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/event-subscriptions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.event-subscriptions-message/marker :portkey.aws.rds.-2014-10-31/event-subscriptions-list]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering-message/reserved-db-instances-offerings (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/reserved-db-instances-offering-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reserved-db-instances-offering-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.reserved-db-instances-offering-message/marker :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering-message/reserved-db-instances-offerings]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-subnet-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-event-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-parameter-group-details/parameters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-parameter-group-details/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-parameter-group-details/parameters :portkey.aws.rds.-2014-10-31.db-cluster-parameter-group-details/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-security-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-security-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/vpc (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-orderable-db-instance-options-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/engine] :opt-un [:portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/engine-version :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/db-instance-class :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/license-model :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/vpc :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/filters :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/max-records :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-subnet-group-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-subnet-group-message/db-subnet-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-subnet-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.create-db-subnet-group-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.create-db-subnet-group-message/db-subnet-group-description :portkey.aws.rds.-2014-10-31.create-db-subnet-group-message/subnet-ids] :opt-un [:portkey.aws.rds.-2014-10-31.create-db-subnet-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-db-security-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-member-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-cluster-member))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-groups/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-groups (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/option-groups-list :portkey.aws.rds.-2014-10-31.option-groups/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-event-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.delete-event-subscription-message/subscription-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-option-group-message/source-option-group-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-option-group-message/target-option-group-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-option-group-message/target-option-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-option-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/copy-option-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.copy-option-group-message/source-option-group-identifier :portkey.aws.rds.-2014-10-31.copy-option-group-message/target-option-group-identifier :portkey.aws.rds.-2014-10-31.copy-option-group-message/target-option-group-description] :opt-un [:portkey.aws.rds.-2014-10-31.copy-option-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/storage-type-not-supported-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-role-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/read-replica-db-instance-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/authorize-db-security-group-ingress-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-security-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-parameter-groups-message/db-parameter-groups (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-parameter-group-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-parameter-groups-message/marker :portkey.aws.rds.-2014-10-31.db-parameter-groups-message/db-parameter-groups]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.recurring-charge/recurring-charge-amount (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/double))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.recurring-charge/recurring-charge-frequency (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/recurring-charge (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.recurring-charge/recurring-charge-amount :portkey.aws.rds.-2014-10-31.recurring-charge/recurring-charge-frequency]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-engine-default-parameters-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/engine-defaults]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/valid-upgrade-target-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/upgrade-target))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/authorization-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/source-db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/target-db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/copy-tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/pre-signed-url (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/copy-db-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/source-db-snapshot-identifier :portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/target-db-snapshot-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/kms-key-id :portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/tags :portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/copy-tags :portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/pre-signed-url :portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/option-group-name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-role-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.range/from (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.range/to (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.range/step (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/range (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.range/from :portkey.aws.rds.-2014-10-31.range/to :portkey.aws.rds.-2014-10-31.range/step]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/pre-signed-url (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/use-default-processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/source-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/monitoring-interval (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/iops (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/storage-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/performance-insights-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/enable-performance-insights (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/performance-insights-kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-instance-read-replica-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/db-instance-identifier :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/source-db-instance-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/deletion-protection :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/option-group-name :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/enable-iam-database-authentication :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/publicly-accessible :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/pre-signed-url :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/copy-tags-to-snapshot :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/enable-cloudwatch-logs-exports :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/auto-minor-version-upgrade :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/tags :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/use-default-processor-features :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/availability-zone :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/monitoring-interval :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/port :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/kms-key-id :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/iops :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/storage-type :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/processor-features :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/performance-insights-retention-period :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/db-instance-class :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/enable-performance-insights :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/monitoring-role-arn :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/multi-az :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/performance-insights-kms-key-id]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/copy-db-cluster-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/subnet-already-in-use (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/insufficient-storage-cluster-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-option-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/option-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/copy-db-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-snapshot]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-roles (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-cluster-role))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.certificate-message/certificates (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/certificate-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.certificate-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/certificate-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.certificate-message/certificates :portkey.aws.rds.-2014-10-31.certificate-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-subnet-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/engine-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/requires-auto-minor-engine-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/option-group-option-versions (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/option-group-option-versions-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/permanent (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/vpc-only (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/port-required (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/option-group-option-settings (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/option-group-option-settings-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/persistent (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/minimum-required-minor-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/default-port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/supports-option-version-downgrade (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-group-option (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.option-group-option/major-engine-version :portkey.aws.rds.-2014-10-31.option-group-option/engine-name :portkey.aws.rds.-2014-10-31.option-group-option/requires-auto-minor-engine-version-upgrade :portkey.aws.rds.-2014-10-31.option-group-option/option-group-option-versions :portkey.aws.rds.-2014-10-31.option-group-option/permanent :portkey.aws.rds.-2014-10-31.option-group-option/vpc-only :portkey.aws.rds.-2014-10-31.option-group-option/port-required :portkey.aws.rds.-2014-10-31/options-conflicts-with :portkey.aws.rds.-2014-10-31.option-group-option/option-group-option-settings :portkey.aws.rds.-2014-10-31.option-group-option/persistent :portkey.aws.rds.-2014-10-31.option-group-option/description :portkey.aws.rds.-2014-10-31.option-group-option/minimum-required-minor-engine-version :portkey.aws.rds.-2014-10-31.option-group-option/default-port :portkey.aws.rds.-2014-10-31.option-group-option/supports-option-version-downgrade :portkey.aws.rds.-2014-10-31/options-depended-on :portkey.aws.rds.-2014-10-31.option-group-option/name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-subnet (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-snapshot]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/tag-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/tag))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/new-db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/backtrack-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.modify-db-cluster-message/db-cluster-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.modify-db-cluster-message/deletion-protection :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/backup-retention-period :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/option-group-name :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/enable-iam-database-authentication :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/new-db-cluster-identifier :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/preferred-maintenance-window :portkey.aws.rds.-2014-10-31/scaling-configuration :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/vpc-security-group-ids :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/db-cluster-parameter-group-name :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/master-user-password :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/engine-version :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/port :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/backtrack-window :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/apply-immediately :portkey.aws.rds.-2014-10-31/cloudwatch-logs-export-configuration :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-option-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/option-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.timezone/timezone-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/timezone (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.timezone/timezone-name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-cluster-snapshot))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/supported-engine-modes (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/engine-mode-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/default-character-set (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/character-set))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/db-engine-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/supported-timezones (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/supported-timezones-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/supports-read-replica (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/db-engine-version-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/valid-upgrade-target (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/valid-upgrade-target-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/supported-character-sets (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/supported-character-sets-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/supports-log-exports-to-cloudwatch-logs (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/exportable-log-types (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-engine-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-engine-version/supported-engine-modes :portkey.aws.rds.-2014-10-31.db-engine-version/default-character-set :portkey.aws.rds.-2014-10-31.db-engine-version/db-engine-description :portkey.aws.rds.-2014-10-31.db-engine-version/supported-timezones :portkey.aws.rds.-2014-10-31.db-engine-version/supports-read-replica :portkey.aws.rds.-2014-10-31.db-engine-version/db-engine-version-description :portkey.aws.rds.-2014-10-31.db-engine-version/valid-upgrade-target :portkey.aws.rds.-2014-10-31.db-engine-version/engine-version :portkey.aws.rds.-2014-10-31.db-engine-version/supported-character-sets :portkey.aws.rds.-2014-10-31.db-engine-version/supports-log-exports-to-cloudwatch-logs :portkey.aws.rds.-2014-10-31.db-engine-version/engine :portkey.aws.rds.-2014-10-31.db-engine-version/exportable-log-types :portkey.aws.rds.-2014-10-31.db-engine-version/db-parameter-group-family]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameters-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameters-message/source (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-cluster-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.describe-db-cluster-parameters-message/db-cluster-parameter-group-name] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-cluster-parameters-message/source :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameters-message/filters :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameters-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/options-conflicts-with (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-setting-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/option-setting))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/subscription-already-exist-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-upgrade-dependency-failure-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.add-source-identifier-to-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.add-source-identifier-to-subscription-message/source-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/add-source-identifier-to-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.add-source-identifier-to-subscription-message/subscription-name :portkey.aws.rds.-2014-10-31.add-source-identifier-to-subscription-message/source-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/domain-membership-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/domain-membership))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.backtrack-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.backtrack-db-cluster-message/backtrack-to (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.backtrack-db-cluster-message/force (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.backtrack-db-cluster-message/use-earliest-time-on-point-in-time-unavailable (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/backtrack-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.backtrack-db-cluster-message/db-cluster-identifier :portkey.aws.rds.-2014-10-31.backtrack-db-cluster-message/backtrack-to] :opt-un [:portkey.aws.rds.-2014-10-31.backtrack-db-cluster-message/force :portkey.aws.rds.-2014-10-31.backtrack-db-cluster-message/use-earliest-time-on-point-in-time-unavailable]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.add-tags-to-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.add-tags-to-resource-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/add-tags-to-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.add-tags-to-resource-message/resource-name :portkey.aws.rds.-2014-10-31.add-tags-to-resource-message/tags] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.valid-storage-options/storage-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.valid-storage-options/storage-size (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/range-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.valid-storage-options/provisioned-iops (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/range-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.valid-storage-options/iops-to-storage-ratio (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/double-range-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/valid-storage-options (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.valid-storage-options/storage-type :portkey.aws.rds.-2014-10-31.valid-storage-options/storage-size :portkey.aws.rds.-2014-10-31.valid-storage-options/provisioned-iops :portkey.aws.rds.-2014-10-31.valid-storage-options/iops-to-storage-ratio]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-event-subscription-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-db-cluster-from-s-3-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/tag-list-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/tag-list]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-parameter-group-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-parameter-group-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-parameter-group-message/description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.create-db-parameter-group-message/db-parameter-group-name :portkey.aws.rds.-2014-10-31.create-db-parameter-group-message/db-parameter-group-family :portkey.aws.rds.-2014-10-31.create-db-parameter-group-message/description] :opt-un [:portkey.aws.rds.-2014-10-31.create-db-parameter-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.vpc-security-group-membership/vpc-security-group-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.vpc-security-group-membership/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/vpc-security-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.vpc-security-group-membership/vpc-security-group-id :portkey.aws.rds.-2014-10-31.vpc-security-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-s-3-bucket-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/domain-iam-role-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/db-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/use-default-processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/restore-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/domain (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/source-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/target-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/iops (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/tde-credential-password (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/storage-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/use-latest-restorable-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-db-instance-to-point-in-time-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/source-db-instance-identifier :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/target-db-instance-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/deletion-protection :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/option-group-name :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/enable-iam-database-authentication :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/publicly-accessible :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/domain-iam-role-name :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/copy-tags-to-snapshot :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/enable-cloudwatch-logs-exports :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/auto-minor-version-upgrade :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/tags :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/db-name :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/use-default-processor-features :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/availability-zone :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/restore-time :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/license-model :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/domain :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/port :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/iops :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/tde-credential-password :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/storage-type :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/processor-features :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/db-instance-class :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/engine :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/tde-credential-arn :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/multi-az :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/use-latest-restorable-time]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.valid-db-instance-modifications-message/storage (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/valid-storage-options-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.valid-db-instance-modifications-message/valid-processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/available-processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/valid-db-instance-modifications-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.valid-db-instance-modifications-message/storage :portkey.aws.rds.-2014-10-31.valid-db-instance-modifications-message/valid-processor-features]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/authorization-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-snapshot-attribute-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-snapshot-attribute-message/attribute-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-snapshot-attribute-message/values-to-add (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-snapshot-attribute-message/values-to-remove (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-snapshot-attribute-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.modify-db-snapshot-attribute-message/db-snapshot-identifier :portkey.aws.rds.-2014-10-31.modify-db-snapshot-attribute-message/attribute-name] :opt-un [:portkey.aws.rds.-2014-10-31.modify-db-snapshot-attribute-message/values-to-add :portkey.aws.rds.-2014-10-31.modify-db-snapshot-attribute-message/values-to-remove]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-log-file-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/provisioned-iops-not-available-in-az-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance-message/reserved-db-instances (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/reserved-db-instance-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reserved-db-instance-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.reserved-db-instance-message/marker :portkey.aws.rds.-2014-10-31.reserved-db-instance-message/reserved-db-instances]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-parameter-group-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.modify-db-parameter-group-message/db-parameter-group-name :portkey.aws.rds.-2014-10-31.modify-db-parameter-group-message/parameters] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-valid-db-instance-modifications-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-valid-db-instance-modifications-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.describe-valid-db-instance-modifications-message/db-instance-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-attribute-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-attribute))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/account-quota-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/account-quota))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reboot-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reboot-db-instance-message/force-failover (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reboot-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.reboot-db-instance-message/db-instance-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.reboot-db-instance-message/force-failover]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-db-instance-from-s-3-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reserved-db-instance-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-option-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-backtrack-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-backtrack-message/db-cluster-backtracks (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-backtrack-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-backtrack-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-backtrack-message/marker :portkey.aws.rds.-2014-10-31.db-cluster-backtrack-message/db-cluster-backtracks]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot-attribute/attribute-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot-attribute/attribute-values (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-snapshot-attribute (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-snapshot-attribute/attribute-name :portkey.aws.rds.-2014-10-31.db-snapshot-attribute/attribute-values]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/currency-code (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/reserved-db-instances-offering-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/fixed-price (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/double))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/duration (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/usage-price (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/double))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/product-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/recurring-charges (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/recurring-charge-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/offering-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reserved-db-instances-offering (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/currency-code :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/reserved-db-instances-offering-id :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/fixed-price :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/duration :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/usage-price :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/product-description :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/db-instance-class :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/recurring-charges :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/offering-type :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/multi-az]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/resource-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.ec-2-security-group/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.ec-2-security-group/ec-2-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.ec-2-security-group/ec-2-security-group-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.ec-2-security-group/ec-2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/ec-2-security-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.ec-2-security-group/status :portkey.aws.rds.-2014-10-31.ec-2-security-group/ec-2-security-group-name :portkey.aws.rds.-2014-10-31.ec-2-security-group/ec-2-security-group-id :portkey.aws.rds.-2014-10-31.ec-2-security-group/ec-2-security-group-owner-id]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/option-group-membership))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.remove-source-identifier-from-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.remove-source-identifier-from-subscription-message/source-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/remove-source-identifier-from-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.remove-source-identifier-from-subscription-message/subscription-name :portkey.aws.rds.-2014-10-31.remove-source-identifier-from-subscription-message/source-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-cluster-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/point-in-time-restore-not-enabled-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.remove-tags-from-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.remove-tags-from-resource-message/tag-keys (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/key-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/remove-tags-from-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.remove-tags-from-resource-message/resource-name :portkey.aws.rds.-2014-10-31.remove-tags-from-resource-message/tag-keys] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/event-categories-map-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/event-categories-map))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/integer clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-snapshot-attribute-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-snapshot-attribute-message/attribute-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-snapshot-attribute-message/values-to-add (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-snapshot-attribute-message/values-to-remove (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-cluster-snapshot-attribute-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.modify-db-cluster-snapshot-attribute-message/db-cluster-snapshot-identifier :portkey.aws.rds.-2014-10-31.modify-db-cluster-snapshot-attribute-message/attribute-name] :opt-un [:portkey.aws.rds.-2014-10-31.modify-db-cluster-snapshot-attribute-message/values-to-add :portkey.aws.rds.-2014-10-31.modify-db-cluster-snapshot-attribute-message/values-to-remove]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot-attribute/attribute-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot-attribute/attribute-values (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-attribute (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-snapshot-attribute/attribute-name :portkey.aws.rds.-2014-10-31.db-cluster-snapshot-attribute/attribute-values]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.parameter/data-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.parameter/supported-engine-modes (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/engine-mode-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.parameter/parameter-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.parameter/source (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.parameter/minimum-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.parameter/allowed-values (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.parameter/apply-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.parameter/description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.parameter/is-modifiable (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.parameter/parameter-value (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/parameter (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.parameter/data-type :portkey.aws.rds.-2014-10-31.parameter/supported-engine-modes :portkey.aws.rds.-2014-10-31.parameter/parameter-name :portkey.aws.rds.-2014-10-31.parameter/source :portkey.aws.rds.-2014-10-31.parameter/minimum-engine-version :portkey.aws.rds.-2014-10-31.parameter/allowed-values :portkey.aws.rds.-2014-10-31.parameter/apply-type :portkey.aws.rds.-2014-10-31.parameter/description :portkey.aws.rds.-2014-10-31/apply-method :portkey.aws.rds.-2014-10-31.parameter/is-modifiable :portkey.aws.rds.-2014-10-31.parameter/parameter-value]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/vpc-security-group-id-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-log-files-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/describe-db-log-files-details))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-security-group-membership/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-security-group-membership/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-security-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-security-group-membership/db-security-group-name :portkey.aws.rds.-2014-10-31.db-security-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/read-replica-db-cluster-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot-attributes-result/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot-attributes-result/db-cluster-snapshot-attributes (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-attribute-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-attributes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-snapshot-attributes-result/db-cluster-snapshot-identifier :portkey.aws.rds.-2014-10-31.db-cluster-snapshot-attributes-result/db-cluster-snapshot-attributes]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/db-security-groups (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/secondary-availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/promotion-tier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/character-set-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/read-replica-db-cluster-identifiers (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/read-replica-db-cluster-identifier-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/read-replica-db-instance-identifiers (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/read-replica-db-instance-identifier-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/domain-memberships (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/domain-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/enabled-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/db-instance-port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/db-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/db-instance-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/instance-create-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/read-replica-source-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/monitoring-interval (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/timezone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/master-username (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/performance-insights-enabled (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/dbi-resource-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/iops (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/storage-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/ca-certificate-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/option-group-memberships (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/option-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/iam-database-authentication-enabled (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/performance-insights-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/db-parameter-groups (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-parameter-group-status-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/vpc-security-groups (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/db-instance-status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/status-infos (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-instance-status-info-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/enhanced-monitoring-resource-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/performance-insights-kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/latest-restorable-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-instance/deletion-protection :portkey.aws.rds.-2014-10-31.db-instance/backup-retention-period :portkey.aws.rds.-2014-10-31.db-instance/db-security-groups :portkey.aws.rds.-2014-10-31.db-instance/secondary-availability-zone :portkey.aws.rds.-2014-10-31.db-instance/promotion-tier :portkey.aws.rds.-2014-10-31.db-instance/character-set-name :portkey.aws.rds.-2014-10-31.db-instance/publicly-accessible :portkey.aws.rds.-2014-10-31.db-instance/read-replica-db-cluster-identifiers :portkey.aws.rds.-2014-10-31.db-instance/read-replica-db-instance-identifiers :portkey.aws.rds.-2014-10-31.db-instance/domain-memberships :portkey.aws.rds.-2014-10-31.db-instance/preferred-maintenance-window :portkey.aws.rds.-2014-10-31.db-instance/copy-tags-to-snapshot :portkey.aws.rds.-2014-10-31.db-instance/db-instance-identifier :portkey.aws.rds.-2014-10-31.db-instance/enabled-cloudwatch-logs-exports :portkey.aws.rds.-2014-10-31.db-instance/auto-minor-version-upgrade :portkey.aws.rds.-2014-10-31.db-instance/db-instance-port :portkey.aws.rds.-2014-10-31.db-instance/db-name :portkey.aws.rds.-2014-10-31.db-instance/db-instance-arn :portkey.aws.rds.-2014-10-31.db-instance/instance-create-time :portkey.aws.rds.-2014-10-31.db-instance/availability-zone :portkey.aws.rds.-2014-10-31.db-instance/read-replica-source-db-instance-identifier :portkey.aws.rds.-2014-10-31.db-instance/license-model :portkey.aws.rds.-2014-10-31.db-instance/allocated-storage :portkey.aws.rds.-2014-10-31.db-instance/monitoring-interval :portkey.aws.rds.-2014-10-31.db-instance/timezone :portkey.aws.rds.-2014-10-31.db-instance/master-username :portkey.aws.rds.-2014-10-31.db-instance/engine-version :portkey.aws.rds.-2014-10-31.db-instance/performance-insights-enabled :portkey.aws.rds.-2014-10-31.db-instance/storage-encrypted :portkey.aws.rds.-2014-10-31.db-instance/kms-key-id :portkey.aws.rds.-2014-10-31.db-instance/dbi-resource-id :portkey.aws.rds.-2014-10-31.db-instance/iops :portkey.aws.rds.-2014-10-31.db-instance/storage-type :portkey.aws.rds.-2014-10-31.db-instance/processor-features :portkey.aws.rds.-2014-10-31.db-instance/ca-certificate-identifier :portkey.aws.rds.-2014-10-31/endpoint :portkey.aws.rds.-2014-10-31.db-instance/option-group-memberships :portkey.aws.rds.-2014-10-31.db-instance/iam-database-authentication-enabled :portkey.aws.rds.-2014-10-31.db-instance/performance-insights-retention-period :portkey.aws.rds.-2014-10-31.db-instance/db-instance-class :portkey.aws.rds.-2014-10-31.db-instance/db-parameter-groups :portkey.aws.rds.-2014-10-31.db-instance/vpc-security-groups :portkey.aws.rds.-2014-10-31.db-instance/engine :portkey.aws.rds.-2014-10-31.db-instance/db-instance-status :portkey.aws.rds.-2014-10-31.db-instance/status-infos :portkey.aws.rds.-2014-10-31.db-instance/monitoring-role-arn :portkey.aws.rds.-2014-10-31.db-instance/tde-credential-arn :portkey.aws.rds.-2014-10-31.db-instance/enhanced-monitoring-resource-arn :portkey.aws.rds.-2014-10-31.db-instance/multi-az :portkey.aws.rds.-2014-10-31.db-instance/performance-insights-kms-key-id :portkey.aws.rds.-2014-10-31.db-instance/db-cluster-identifier :portkey.aws.rds.-2014-10-31.db-instance/preferred-backup-window :portkey.aws.rds.-2014-10-31/pending-modified-values :portkey.aws.rds.-2014-10-31.db-instance/latest-restorable-time :portkey.aws.rds.-2014-10-31/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-group-option-versions-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/option-version))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-subnet-group-not-allowed-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-cluster-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster-snapshot]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/t-stamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-message/db-clusters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-message/marker :portkey.aws.rds.-2014-10-31.db-cluster-message/db-clusters]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.purchase-reserved-db-instances-offering-message/reserved-db-instances-offering-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.purchase-reserved-db-instances-offering-message/reserved-db-instance-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.purchase-reserved-db-instances-offering-message/db-instance-count (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.purchase-reserved-db-instances-offering-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/purchase-reserved-db-instances-offering-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.purchase-reserved-db-instances-offering-message/reserved-db-instances-offering-id] :opt-un [:portkey.aws.rds.-2014-10-31.purchase-reserved-db-instances-offering-message/reserved-db-instance-id :portkey.aws.rds.-2014-10-31.purchase-reserved-db-instances-offering-message/db-instance-count :portkey.aws.rds.-2014-10-31.purchase-reserved-db-instances-offering-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-security-group-membership))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-certificates-message/certificate-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-certificates-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-certificates-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-certificates-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-certificates-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-certificates-message/certificate-identifier :portkey.aws.rds.-2014-10-31.describe-certificates-message/filters :portkey.aws.rds.-2014-10-31.describe-certificates-message/max-records :portkey.aws.rds.-2014-10-31.describe-certificates-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event-categories-map/source-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event-categories-map/event-categories (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/event-categories-map (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.event-categories-map/source-type :portkey.aws.rds.-2014-10-31.event-categories-map/event-categories]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reserved-db-instances-offering-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/reserved-db-instances-offering))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/event-subscription-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-cluster-snapshot-attributes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster-snapshot-attributes-result]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-event-subscription-message/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-event-subscription-message/source-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-event-subscription-message/event-categories (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-event-subscription-message/source-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/source-ids-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-event-subscription-message/enabled (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-event-subscription-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-event-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.create-event-subscription-message/subscription-name :portkey.aws.rds.-2014-10-31.create-event-subscription-message/sns-topic-arn] :opt-un [:portkey.aws.rds.-2014-10-31.create-event-subscription-message/source-type :portkey.aws.rds.-2014-10-31.create-event-subscription-message/event-categories :portkey.aws.rds.-2014-10-31.create-event-subscription-message/source-ids :portkey.aws.rds.-2014-10-31.create-event-subscription-message/enabled :portkey.aws.rds.-2014-10-31.create-event-subscription-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshot-attributes-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-cluster-snapshot-attributes-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshot-attributes-message/db-cluster-snapshot-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-log-files-response/describe-db-log-files (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/describe-db-log-files-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-log-files-response/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-log-files-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-log-files-response/describe-db-log-files :portkey.aws.rds.-2014-10-31.describe-db-log-files-response/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/recurring-charge-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/recurring-charge))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/stop-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/event-categories-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version-message/db-engine-versions (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-engine-version-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-engine-version-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-engine-version-message/marker :portkey.aws.rds.-2014-10-31.db-engine-version-message/db-engine-versions]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-cluster-snapshot-attribute-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster-snapshot-attributes-result]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-message/db-instances (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-instance-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-instance-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-instance-message/marker :portkey.aws.rds.-2014-10-31.db-instance-message/db-instances]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-security-group-name-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.processor-feature/name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.processor-feature/value (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/processor-feature (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.processor-feature/name :portkey.aws.rds.-2014-10-31.processor-feature/value]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reserved-db-instance-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-clusters-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-clusters-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-clusters-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-clusters-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-clusters-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-clusters-message/db-cluster-identifier :portkey.aws.rds.-2014-10-31.describe-db-clusters-message/filters :portkey.aws.rds.-2014-10-31.describe-db-clusters-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-clusters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-security-group-not-supported-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-parameter-group/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-parameter-group/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-parameter-group/description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-parameter-group/db-cluster-parameter-group-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-parameter-group/db-cluster-parameter-group-name :portkey.aws.rds.-2014-10-31.db-cluster-parameter-group/db-parameter-group-family :portkey.aws.rds.-2014-10-31.db-cluster-parameter-group/description :portkey.aws.rds.-2014-10-31.db-cluster-parameter-group/db-cluster-parameter-group-arn]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-log-files-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-log-files-message/filename-contains (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-log-files-message/file-last-written (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-log-files-message/file-size (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-log-files-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-log-files-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-log-files-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-log-files-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.describe-db-log-files-message/db-instance-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-log-files-message/filename-contains :portkey.aws.rds.-2014-10-31.describe-db-log-files-message/file-last-written :portkey.aws.rds.-2014-10-31.describe-db-log-files-message/file-size :portkey.aws.rds.-2014-10-31.describe-db-log-files-message/filters :portkey.aws.rds.-2014-10-31.describe-db-log-files-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-log-files-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/apply-method #{"immediate" :pendingreboot :immediate "pending-reboot"})

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-engine-default-cluster-parameters-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/engine-defaults]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-snapshot-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-snapshot-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-cluster-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.create-db-cluster-snapshot-message/db-cluster-snapshot-identifier :portkey.aws.rds.-2014-10-31.create-db-cluster-snapshot-message/db-cluster-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.create-db-cluster-snapshot-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.endpoint/address (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.endpoint/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.endpoint/hosted-zone-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/endpoint (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.endpoint/address :portkey.aws.rds.-2014-10-31.endpoint/port :portkey.aws.rds.-2014-10-31.endpoint/hosted-zone-id]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-db-cluster-snapshot-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-parameter-group/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-parameter-group/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-parameter-group/description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-parameter-group/db-parameter-group-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-parameter-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-parameter-group/db-parameter-group-name :portkey.aws.rds.-2014-10-31.db-parameter-group/db-parameter-group-family :portkey.aws.rds.-2014-10-31.db-parameter-group/description :portkey.aws.rds.-2014-10-31.db-parameter-group/db-parameter-group-arn]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/supported-character-sets-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/character-set))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/storage-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.cloudwatch-logs-export-configuration/enable-log-types (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.cloudwatch-logs-export-configuration/disable-log-types (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/cloudwatch-logs-export-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.cloudwatch-logs-export-configuration/enable-log-types :portkey.aws.rds.-2014-10-31.cloudwatch-logs-export-configuration/disable-log-types]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-restore-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/log-type-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-backtracks-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-backtracks-message/backtrack-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-backtracks-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-backtracks-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-backtracks-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-cluster-backtracks-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.describe-db-cluster-backtracks-message/db-cluster-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-cluster-backtracks-message/backtrack-identifier :portkey.aws.rds.-2014-10-31.describe-db-cluster-backtracks-message/filters :portkey.aws.rds.-2014-10-31.describe-db-cluster-backtracks-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-cluster-backtracks-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/insufficient-db-cluster-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.account-quota/account-quota-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.account-quota/used (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.account-quota/max (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/account-quota (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.account-quota/account-quota-name :portkey.aws.rds.-2014-10-31.account-quota/used :portkey.aws.rds.-2014-10-31.account-quota/max]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-option-group-status/db-cluster-option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-option-group-status/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-option-group-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-option-group-status/db-cluster-option-group-name :portkey.aws.rds.-2014-10-31.db-cluster-option-group-status/status]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-snapshot-attributes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-snapshot-attributes-result]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-membership/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-membership/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.option-group-membership/option-group-name :portkey.aws.rds.-2014-10-31.option-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-security-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.upgrade-target/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.upgrade-target/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.upgrade-target/description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.upgrade-target/auto-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.upgrade-target/is-major-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/upgrade-target (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.upgrade-target/engine :portkey.aws.rds.-2014-10-31.upgrade-target/engine-version :portkey.aws.rds.-2014-10-31.upgrade-target/description :portkey.aws.rds.-2014-10-31.upgrade-target/auto-upgrade :portkey.aws.rds.-2014-10-31.upgrade-target/is-major-version-upgrade]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/available-processor-feature-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/available-processor-feature))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-parameter-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/attribute-value-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/reserved-db-instance-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/currency-code (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/reserved-db-instances-offering-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/start-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/fixed-price (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/double))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/reserved-db-instance-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/db-instance-count (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/duration (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/usage-price (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/double))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/product-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/state (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/recurring-charges (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/recurring-charge-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/offering-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reserved-db-instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.reserved-db-instance/reserved-db-instance-id :portkey.aws.rds.-2014-10-31.reserved-db-instance/currency-code :portkey.aws.rds.-2014-10-31.reserved-db-instance/reserved-db-instances-offering-id :portkey.aws.rds.-2014-10-31.reserved-db-instance/start-time :portkey.aws.rds.-2014-10-31.reserved-db-instance/fixed-price :portkey.aws.rds.-2014-10-31.reserved-db-instance/reserved-db-instance-arn :portkey.aws.rds.-2014-10-31.reserved-db-instance/db-instance-count :portkey.aws.rds.-2014-10-31.reserved-db-instance/duration :portkey.aws.rds.-2014-10-31.reserved-db-instance/usage-price :portkey.aws.rds.-2014-10-31.reserved-db-instance/product-description :portkey.aws.rds.-2014-10-31.reserved-db-instance/db-instance-class :portkey.aws.rds.-2014-10-31.reserved-db-instance/state :portkey.aws.rds.-2014-10-31.reserved-db-instance/recurring-charges :portkey.aws.rds.-2014-10-31.reserved-db-instance/offering-type :portkey.aws.rds.-2014-10-31.reserved-db-instance/multi-az]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-parameter-groups-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-parameter-groups-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-parameter-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-parameter-groups-message/db-parameter-group-name :portkey.aws.rds.-2014-10-31.describe-db-parameter-groups-message/filters :portkey.aws.rds.-2014-10-31.describe-db-parameter-groups-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-parameter-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-db-subnet-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.ip-range/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.ip-range/cidrip (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/ip-range (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.ip-range/status :portkey.aws.rds.-2014-10-31.ip-range/cidrip]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.character-set/character-set-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.character-set/character-set-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/character-set (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.character-set/character-set-name :portkey.aws.rds.-2014-10-31.character-set/character-set-description]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-parameter-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-group-option-settings-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/option-group-option-setting))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/stop-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-capacity-info/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-capacity-info/pending-capacity (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-capacity-info/current-capacity (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-capacity-info/seconds-before-timeout (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-capacity-info/timeout-action (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-capacity-info (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-capacity-info/db-cluster-identifier :portkey.aws.rds.-2014-10-31.db-cluster-capacity-info/pending-capacity :portkey.aws.rds.-2014-10-31.db-cluster-capacity-info/current-capacity :portkey.aws.rds.-2014-10-31.db-cluster-capacity-info/seconds-before-timeout :portkey.aws.rds.-2014-10-31.db-cluster-capacity-info/timeout-action]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-current-db-cluster-capacity-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-current-db-cluster-capacity-message/capacity (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-current-db-cluster-capacity-message/seconds-before-timeout (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-current-db-cluster-capacity-message/timeout-action (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-current-db-cluster-capacity-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.modify-current-db-cluster-capacity-message/db-cluster-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.modify-current-db-cluster-capacity-message/capacity :portkey.aws.rds.-2014-10-31.modify-current-db-cluster-capacity-message/seconds-before-timeout :portkey.aws.rds.-2014-10-31.modify-current-db-cluster-capacity-message/timeout-action]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-cluster-message/skip-final-snapshot (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-cluster-message/final-db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.delete-db-cluster-message/db-cluster-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.delete-db-cluster-message/skip-final-snapshot :portkey.aws.rds.-2014-10-31.delete-db-cluster-message/final-db-snapshot-identifier]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/backup-policy-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-valid-db-instance-modifications-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/valid-db-instance-modifications-message]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-event-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.tag/key (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.tag/value (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/tag (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.tag/key :portkey.aws.rds.-2014-10-31.tag/value]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-event-categories-message/source-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-event-categories-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-event-categories-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-event-categories-message/source-type :portkey.aws.rds.-2014-10-31.describe-event-categories-message/filters]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/insufficient-db-instance-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/boolean-optional clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/failover-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/sns-invalid-topic-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/options-depended-on (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-setting/data-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-setting/allowed-values (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-setting/value (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-setting/apply-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-setting/description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-setting/default-value (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-setting/is-modifiable (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-setting/is-collection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-setting/name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-setting (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.option-setting/data-type :portkey.aws.rds.-2014-10-31.option-setting/allowed-values :portkey.aws.rds.-2014-10-31.option-setting/value :portkey.aws.rds.-2014-10-31.option-setting/apply-type :portkey.aws.rds.-2014-10-31.option-setting/description :portkey.aws.rds.-2014-10-31.option-setting/default-value :portkey.aws.rds.-2014-10-31.option-setting/is-modifiable :portkey.aws.rds.-2014-10-31.option-setting/is-collection :portkey.aws.rds.-2014-10-31.option-setting/name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-cluster-parameter-group-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.delete-db-cluster-parameter-group-message/db-cluster-parameter-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.list-tags-for-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.list-tags-for-resource-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/list-tags-for-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.list-tags-for-resource-message/resource-name] :opt-un [:portkey.aws.rds.-2014-10-31.list-tags-for-resource-message/filters]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.failover-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.failover-db-cluster-message/target-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/failover-db-cluster-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.failover-db-cluster-message/db-cluster-identifier :portkey.aws.rds.-2014-10-31.failover-db-cluster-message/target-db-instance-identifier]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-subnet-group-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.delete-db-subnet-group-message/db-subnet-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-instance-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-instance))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/replication-source-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/character-set-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/pre-signed-url (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/database-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/engine-mode (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/master-username (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/backtrack-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.create-db-cluster-message/db-cluster-identifier :portkey.aws.rds.-2014-10-31.create-db-cluster-message/engine] :opt-un [:portkey.aws.rds.-2014-10-31.create-db-cluster-message/deletion-protection :portkey.aws.rds.-2014-10-31.create-db-cluster-message/backup-retention-period :portkey.aws.rds.-2014-10-31.create-db-cluster-message/option-group-name :portkey.aws.rds.-2014-10-31.create-db-cluster-message/replication-source-identifier :portkey.aws.rds.-2014-10-31.create-db-cluster-message/character-set-name :portkey.aws.rds.-2014-10-31.create-db-cluster-message/enable-iam-database-authentication :portkey.aws.rds.-2014-10-31.create-db-cluster-message/pre-signed-url :portkey.aws.rds.-2014-10-31.create-db-cluster-message/database-name :portkey.aws.rds.-2014-10-31.create-db-cluster-message/preferred-maintenance-window :portkey.aws.rds.-2014-10-31.create-db-cluster-message/engine-mode :portkey.aws.rds.-2014-10-31.create-db-cluster-message/enable-cloudwatch-logs-exports :portkey.aws.rds.-2014-10-31.create-db-cluster-message/tags :portkey.aws.rds.-2014-10-31/scaling-configuration :portkey.aws.rds.-2014-10-31.create-db-cluster-message/vpc-security-group-ids :portkey.aws.rds.-2014-10-31.create-db-cluster-message/db-cluster-parameter-group-name :portkey.aws.rds.-2014-10-31.create-db-cluster-message/master-user-password :portkey.aws.rds.-2014-10-31.create-db-cluster-message/master-username :portkey.aws.rds.-2014-10-31.create-db-cluster-message/engine-version :portkey.aws.rds.-2014-10-31.create-db-cluster-message/storage-encrypted :portkey.aws.rds.-2014-10-31.create-db-cluster-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.create-db-cluster-message/port :portkey.aws.rds.-2014-10-31.create-db-cluster-message/kms-key-id :portkey.aws.rds.-2014-10-31.create-db-cluster-message/backtrack-window :portkey.aws.rds.-2014-10-31/availability-zones :portkey.aws.rds.-2014-10-31.create-db-cluster-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-event-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/option-configuration))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-maintenance-actions-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/pending-maintenance-actions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/pending-maintenance-actions :portkey.aws.rds.-2014-10-31.pending-maintenance-actions-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-account-attributes-message (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/engine-mode-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reserved-db-instances-offering-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-subnet-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/add-source-identifier-to-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.download-db-log-file-portion-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.download-db-log-file-portion-message/log-file-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.download-db-log-file-portion-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.download-db-log-file-portion-message/number-of-lines (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/download-db-log-file-portion-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.download-db-log-file-portion-message/db-instance-identifier :portkey.aws.rds.-2014-10-31.download-db-log-file-portion-message/log-file-name] :opt-un [:portkey.aws.rds.-2014-10-31.download-db-log-file-portion-message/marker :portkey.aws.rds.-2014-10-31.download-db-log-file-portion-message/number-of-lines]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-security-group-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-security-group-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-security-group-message/marker :portkey.aws.rds.-2014-10-31/db-security-groups]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-parameter-groups-message/db-cluster-parameter-groups (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-parameter-groups-message/marker :portkey.aws.rds.-2014-10-31.db-cluster-parameter-groups-message/db-cluster-parameter-groups]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-security-group-message/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-security-group-message/db-security-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-security-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-security-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.create-db-security-group-message/db-security-group-name :portkey.aws.rds.-2014-10-31.create-db-security-group-message/db-security-group-description] :opt-un [:portkey.aws.rds.-2014-10-31.create-db-security-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/event-subscriptions-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/event-subscription))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-snapshot-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-snapshot))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-parameter-group-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-parameter-group-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-parameter-group-message/description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.create-db-cluster-parameter-group-message/db-cluster-parameter-group-name :portkey.aws.rds.-2014-10-31.create-db-cluster-parameter-group-message/db-parameter-group-family :portkey.aws.rds.-2014-10-31.create-db-cluster-parameter-group-message/description] :opt-un [:portkey.aws.rds.-2014-10-31.create-db-cluster-parameter-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-snapshot-attribute-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-snapshot-attributes-result]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/start-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-option-group-memberships (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-cluster-option-group-status))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.engine-defaults/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.engine-defaults/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.engine-defaults/parameters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/engine-defaults (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.engine-defaults/db-parameter-group-family :portkey.aws.rds.-2014-10-31.engine-defaults/marker :portkey.aws.rds.-2014-10-31.engine-defaults/parameters]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-snapshot-attributes-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-snapshot-attributes-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.describe-db-snapshot-attributes-message/db-snapshot-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/availability-zones (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-subnet-groups (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-subnet-group))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/long-optional clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/processor-feature-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/processor-feature))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-configuration/option-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-configuration/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-configuration/option-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-configuration/db-security-group-memberships (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-configuration/vpc-security-group-memberships (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-configuration/option-settings (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/option-settings-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-configuration (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.option-configuration/option-name] :opt-un [:portkey.aws.rds.-2014-10-31.option-configuration/port :portkey.aws.rds.-2014-10-31.option-configuration/option-version :portkey.aws.rds.-2014-10-31.option-configuration/db-security-group-memberships :portkey.aws.rds.-2014-10-31.option-configuration/vpc-security-group-memberships :portkey.aws.rds.-2014-10-31.option-configuration/option-settings]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-subnet-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-db-snapshot-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/integer-optional clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-security-group/owner-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-security-group/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-security-group/db-security-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-security-group/vpc-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-security-group/ec-2-security-groups (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/ec-2-security-group-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-security-group/ip-ranges (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/ip-range-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-security-group/db-security-group-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-security-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-security-group/owner-id :portkey.aws.rds.-2014-10-31.db-security-group/db-security-group-name :portkey.aws.rds.-2014-10-31.db-security-group/db-security-group-description :portkey.aws.rds.-2014-10-31.db-security-group/vpc-id :portkey.aws.rds.-2014-10-31.db-security-group/ec-2-security-groups :portkey.aws.rds.-2014-10-31.db-security-group/ip-ranges :portkey.aws.rds.-2014-10-31.db-security-group/db-security-group-arn]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/reserved-db-instances-offering-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/duration (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/product-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/offering-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-reserved-db-instances-offerings-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/reserved-db-instances-offering-id :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/max-records :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/marker :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/duration :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/filters :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/product-description :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/db-instance-class :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/offering-type :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/multi-az]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/supported-timezones-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/timezone))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/range-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/range))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.stop-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.stop-db-instance-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/stop-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.stop-db-instance-message/db-instance-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.stop-db-instance-message/db-snapshot-identifier]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-security-groups-message/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-security-groups-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-security-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-security-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-security-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-security-groups-message/db-security-group-name :portkey.aws.rds.-2014-10-31.describe-db-security-groups-message/filters :portkey.aws.rds.-2014-10-31.describe-db-security-groups-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-security-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-settings-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/option-setting))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-option-group-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-option-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.delete-option-group-message/option-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-instance-status-info-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-instance-status-info))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-parameters-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-parameters-message/source (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.describe-db-parameters-message/db-parameter-group-name] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-parameters-message/source :portkey.aws.rds.-2014-10-31.describe-db-parameters-message/filters :portkey.aws.rds.-2014-10-31.describe-db-parameters-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.certificate/certificate-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.certificate/certificate-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.certificate/thumbprint (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.certificate/valid-from (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.certificate/valid-till (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.certificate/certificate-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/certificate (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.certificate/certificate-identifier :portkey.aws.rds.-2014-10-31.certificate/certificate-type :portkey.aws.rds.-2014-10-31.certificate/thumbprint :portkey.aws.rds.-2014-10-31.certificate/valid-from :portkey.aws.rds.-2014-10-31.certificate/valid-till :portkey.aws.rds.-2014-10-31.certificate/certificate-arn]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reserved-db-instance-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/purchase-reserved-db-instances-offering-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/reserved-db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/reserved-db-instance-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/reserved-db-instances-offering-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/duration (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/product-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/offering-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-reserved-db-instances-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/reserved-db-instance-id :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/reserved-db-instances-offering-id :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/max-records :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/marker :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/duration :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/filters :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/product-description :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/db-instance-class :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/offering-type :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/multi-az]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.revoke-db-security-group-ingress-message/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.revoke-db-security-group-ingress-message/cidrip (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.revoke-db-security-group-ingress-message/ec-2-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.revoke-db-security-group-ingress-message/ec-2-security-group-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.revoke-db-security-group-ingress-message/ec-2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/revoke-db-security-group-ingress-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.revoke-db-security-group-ingress-message/db-security-group-name] :opt-un [:portkey.aws.rds.-2014-10-31.revoke-db-security-group-ingress-message/cidrip :portkey.aws.rds.-2014-10-31.revoke-db-security-group-ingress-message/ec-2-security-group-name :portkey.aws.rds.-2014-10-31.revoke-db-security-group-ingress-message/ec-2-security-group-id :portkey.aws.rds.-2014-10-31.revoke-db-security-group-ingress-message/ec-2-security-group-owner-id]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.domain-membership/domain (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.domain-membership/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.domain-membership/fqdn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.domain-membership/iam-role-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/domain-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.domain-membership/domain :portkey.aws.rds.-2014-10-31.domain-membership/status :portkey.aws.rds.-2014-10-31.domain-membership/fqdn :portkey.aws.rds.-2014-10-31.domain-membership/iam-role-name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/supports-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/supports-iops (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/supported-engine-modes (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/engine-mode-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/multi-az-capable (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/min-storage-size (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/max-iops-per-gib (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/double-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/min-iops-per-db-instance (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/available-processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/available-processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/vpc (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/supports-performance-insights (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/storage-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/max-storage-size (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/min-iops-per-gib (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/double-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/read-replica-capable (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/supports-storage-encryption (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/availability-zones (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/availability-zone-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/supports-enhanced-monitoring (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/max-iops-per-db-instance (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/orderable-db-instance-option (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.orderable-db-instance-option/supports-iam-database-authentication :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/supports-iops :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/supported-engine-modes :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/multi-az-capable :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/min-storage-size :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/max-iops-per-gib :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/min-iops-per-db-instance :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/license-model :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/engine-version :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/available-processor-features :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/vpc :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/supports-performance-insights :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/storage-type :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/max-storage-size :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/min-iops-per-gib :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/read-replica-capable :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/db-instance-class :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/supports-storage-encryption :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/engine :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/availability-zones :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/supports-enhanced-monitoring :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/max-iops-per-db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/master-user-password (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/iops (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/storage-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/ca-certificate-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/pending-modified-values (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.pending-modified-values/backup-retention-period :portkey.aws.rds.-2014-10-31/pending-cloudwatch-logs-exports :portkey.aws.rds.-2014-10-31.pending-modified-values/db-instance-identifier :portkey.aws.rds.-2014-10-31.pending-modified-values/master-user-password :portkey.aws.rds.-2014-10-31.pending-modified-values/license-model :portkey.aws.rds.-2014-10-31.pending-modified-values/allocated-storage :portkey.aws.rds.-2014-10-31.pending-modified-values/engine-version :portkey.aws.rds.-2014-10-31.pending-modified-values/db-subnet-group-name :portkey.aws.rds.-2014-10-31.pending-modified-values/port :portkey.aws.rds.-2014-10-31.pending-modified-values/iops :portkey.aws.rds.-2014-10-31.pending-modified-values/storage-type :portkey.aws.rds.-2014-10-31.pending-modified-values/processor-features :portkey.aws.rds.-2014-10-31.pending-modified-values/ca-certificate-identifier :portkey.aws.rds.-2014-10-31.pending-modified-values/db-instance-class :portkey.aws.rds.-2014-10-31.pending-modified-values/multi-az]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-subnet-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/subnet-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/subnet))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/filter-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/filter))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-instance-read-replica-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.available-processor-feature/name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.available-processor-feature/default-value (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.available-processor-feature/allowed-values (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/available-processor-feature (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.available-processor-feature/name :portkey.aws.rds.-2014-10-31.available-processor-feature/default-value :portkey.aws.rds.-2014-10-31.available-processor-feature/allowed-values]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.download-db-log-file-portion-details/log-file-data (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.download-db-log-file-portion-details/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.download-db-log-file-portion-details/additional-data-pending (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/download-db-log-file-portion-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.download-db-log-file-portion-details/log-file-data :portkey.aws.rds.-2014-10-31.download-db-log-file-portion-details/marker :portkey.aws.rds.-2014-10-31.download-db-log-file-portion-details/additional-data-pending]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-snapshot-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-db-parameter-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/db-security-groups (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/promotion-tier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/domain-iam-role-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/new-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/use-default-processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/domain (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/allow-major-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/monitoring-interval (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/db-port-number (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/iops (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/tde-credential-password (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/storage-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/ca-certificate-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/performance-insights-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/enable-performance-insights (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/performance-insights-kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.modify-db-instance-message/db-instance-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.modify-db-instance-message/deletion-protection :portkey.aws.rds.-2014-10-31.modify-db-instance-message/backup-retention-period :portkey.aws.rds.-2014-10-31.modify-db-instance-message/option-group-name :portkey.aws.rds.-2014-10-31.modify-db-instance-message/db-security-groups :portkey.aws.rds.-2014-10-31.modify-db-instance-message/promotion-tier :portkey.aws.rds.-2014-10-31.modify-db-instance-message/enable-iam-database-authentication :portkey.aws.rds.-2014-10-31.modify-db-instance-message/publicly-accessible :portkey.aws.rds.-2014-10-31.modify-db-instance-message/domain-iam-role-name :portkey.aws.rds.-2014-10-31.modify-db-instance-message/preferred-maintenance-window :portkey.aws.rds.-2014-10-31.modify-db-instance-message/copy-tags-to-snapshot :portkey.aws.rds.-2014-10-31.modify-db-instance-message/auto-minor-version-upgrade :portkey.aws.rds.-2014-10-31.modify-db-instance-message/new-db-instance-identifier :portkey.aws.rds.-2014-10-31.modify-db-instance-message/vpc-security-group-ids :portkey.aws.rds.-2014-10-31.modify-db-instance-message/use-default-processor-features :portkey.aws.rds.-2014-10-31.modify-db-instance-message/master-user-password :portkey.aws.rds.-2014-10-31.modify-db-instance-message/license-model :portkey.aws.rds.-2014-10-31.modify-db-instance-message/domain :portkey.aws.rds.-2014-10-31.modify-db-instance-message/allow-major-version-upgrade :portkey.aws.rds.-2014-10-31.modify-db-instance-message/allocated-storage :portkey.aws.rds.-2014-10-31.modify-db-instance-message/monitoring-interval :portkey.aws.rds.-2014-10-31.modify-db-instance-message/engine-version :portkey.aws.rds.-2014-10-31.modify-db-instance-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.modify-db-instance-message/db-port-number :portkey.aws.rds.-2014-10-31.modify-db-instance-message/iops :portkey.aws.rds.-2014-10-31.modify-db-instance-message/tde-credential-password :portkey.aws.rds.-2014-10-31.modify-db-instance-message/storage-type :portkey.aws.rds.-2014-10-31.modify-db-instance-message/apply-immediately :portkey.aws.rds.-2014-10-31.modify-db-instance-message/processor-features :portkey.aws.rds.-2014-10-31.modify-db-instance-message/ca-certificate-identifier :portkey.aws.rds.-2014-10-31/cloudwatch-logs-export-configuration :portkey.aws.rds.-2014-10-31.modify-db-instance-message/performance-insights-retention-period :portkey.aws.rds.-2014-10-31.modify-db-instance-message/db-instance-class :portkey.aws.rds.-2014-10-31.modify-db-instance-message/db-parameter-group-name :portkey.aws.rds.-2014-10-31.modify-db-instance-message/enable-performance-insights :portkey.aws.rds.-2014-10-31.modify-db-instance-message/monitoring-role-arn :portkey.aws.rds.-2014-10-31.modify-db-instance-message/tde-credential-arn :portkey.aws.rds.-2014-10-31.modify-db-instance-message/multi-az :portkey.aws.rds.-2014-10-31.modify-db-instance-message/performance-insights-kms-key-id :portkey.aws.rds.-2014-10-31.modify-db-instance-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/db-security-groups (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/s-3-ingestion-role-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/s-3-bucket-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/db-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/use-default-processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/source-engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/monitoring-interval (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/master-username (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/source-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/iops (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/storage-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/performance-insights-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/s-3-prefix (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/enable-performance-insights (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/performance-insights-kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-db-instance-from-s-3-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/db-instance-identifier :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/db-instance-class :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/engine :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/source-engine :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/source-engine-version :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/s-3-bucket-name :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/s-3-ingestion-role-arn] :opt-un [:portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/deletion-protection :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/backup-retention-period :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/option-group-name :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/db-security-groups :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/enable-iam-database-authentication :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/publicly-accessible :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/preferred-maintenance-window :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/copy-tags-to-snapshot :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/enable-cloudwatch-logs-exports :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/auto-minor-version-upgrade :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/tags :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/db-name :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/vpc-security-group-ids :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/use-default-processor-features :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/availability-zone :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/master-user-password :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/license-model :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/allocated-storage :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/monitoring-interval :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/master-username :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/engine-version :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/storage-encrypted :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/port :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/kms-key-id :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/iops :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/storage-type :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/processor-features :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/performance-insights-retention-period :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/s-3-prefix :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/db-parameter-group-name :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/enable-performance-insights :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/monitoring-role-arn :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/multi-az :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/performance-insights-kms-key-id :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-option-group-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-option-group-message/options-to-include (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/option-configuration-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-option-group-message/options-to-remove (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/option-names-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-option-group-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-option-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.modify-option-group-message/option-group-name] :opt-un [:portkey.aws.rds.-2014-10-31.modify-option-group-message/options-to-include :portkey.aws.rds.-2014-10-31.modify-option-group-message/options-to-remove :portkey.aws.rds.-2014-10-31.modify-option-group-message/apply-immediately]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-security-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-security-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-subnet-group/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-subnet-group/db-subnet-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-subnet-group/vpc-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-subnet-group/subnet-group-status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-subnet-group/subnets (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/subnet-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-subnet-group/db-subnet-group-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-subnet-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-subnet-group/db-subnet-group-name :portkey.aws.rds.-2014-10-31.db-subnet-group/db-subnet-group-description :portkey.aws.rds.-2014-10-31.db-subnet-group/vpc-id :portkey.aws.rds.-2014-10-31.db-subnet-group/subnet-group-status :portkey.aws.rds.-2014-10-31.db-subnet-group/subnets :portkey.aws.rds.-2014-10-31.db-subnet-group/db-subnet-group-arn]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-option-groups-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-option-groups-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-option-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-option-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-option-groups-message/engine-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-option-groups-message/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-option-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-option-groups-message/option-group-name :portkey.aws.rds.-2014-10-31.describe-option-groups-message/filters :portkey.aws.rds.-2014-10-31.describe-option-groups-message/marker :portkey.aws.rds.-2014-10-31.describe-option-groups-message/max-records :portkey.aws.rds.-2014-10-31.describe-option-groups-message/engine-name :portkey.aws.rds.-2014-10-31.describe-option-groups-message/major-engine-version]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-event-subscription-message/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-event-subscription-message/source-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-event-subscription-message/event-categories (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-event-subscription-message/enabled (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-event-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.modify-event-subscription-message/subscription-name] :opt-un [:portkey.aws.rds.-2014-10-31.modify-event-subscription-message/sns-topic-arn :portkey.aws.rds.-2014-10-31.modify-event-subscription-message/source-type :portkey.aws.rds.-2014-10-31.modify-event-subscription-message/event-categories :portkey.aws.rds.-2014-10-31.modify-event-subscription-message/enabled]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-option-group-options-message/engine-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-option-group-options-message/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-option-group-options-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-option-group-options-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-option-group-options-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-option-group-options-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.describe-option-group-options-message/engine-name] :opt-un [:portkey.aws.rds.-2014-10-31.describe-option-group-options-message/major-engine-version :portkey.aws.rds.-2014-10-31.describe-option-group-options-message/filters :portkey.aws.rds.-2014-10-31.describe-option-group-options-message/max-records :portkey.aws.rds.-2014-10-31.describe-option-group-options-message/marker]))

(clojure.core/defn add-source-identifier-to-subscription ([add-source-identifier-to-subscription-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-add-source-identifier-to-subscription-message add-source-identifier-to-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/add-source-identifier-to-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/add-source-identifier-to-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AddSourceIdentifierToSubscription", :http.request.spec/error-spec {"SubscriptionNotFoundFault" :portkey.aws.rds.-2014-10-31/subscription-not-found-fault, "SourceNotFoundFault" :portkey.aws.rds.-2014-10-31/source-not-found-fault}})))))
(clojure.spec.alpha/fdef add-source-identifier-to-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/add-source-identifier-to-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/add-source-identifier-to-subscription-result))

(clojure.core/defn delete-db-snapshot ([delete-db-snapshot-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-delete-db-snapshot-message delete-db-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/delete-db-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/delete-db-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteDBSnapshot", :http.request.spec/error-spec {"InvalidDBSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-snapshot-state-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/delete-db-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/delete-db-snapshot-result))

(clojure.core/defn delete-db-subnet-group ([delete-db-subnet-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-delete-db-subnet-group-message delete-db-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/delete-db-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteDBSubnetGroup", :http.request.spec/error-spec {"InvalidDBSubnetGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-subnet-group-state-fault, "InvalidDBSubnetStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-subnet-state-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/delete-db-subnet-group-message) :ret clojure.core/true?)

(clojure.core/defn describe-orderable-db-instance-options ([describe-orderable-db-instance-options-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-orderable-db-instance-options-message describe-orderable-db-instance-options-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/orderable-db-instance-options-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-orderable-db-instance-options-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeOrderableDBInstanceOptions", :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-orderable-db-instance-options :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/describe-orderable-db-instance-options-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/orderable-db-instance-options-message))

(clojure.core/defn copy-db-cluster-parameter-group ([copy-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-copy-db-cluster-parameter-group-message copy-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/copy-db-cluster-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/copy-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CopyDBClusterParameterGroup", :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault, "DBParameterGroupQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-quota-exceeded-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-already-exists-fault}})))))
(clojure.spec.alpha/fdef copy-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/copy-db-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/copy-db-cluster-parameter-group-result))

(clojure.core/defn revoke-db-security-group-ingress ([revoke-db-security-group-ingress-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-revoke-db-security-group-ingress-message revoke-db-security-group-ingress-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/revoke-db-security-group-ingress-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/revoke-db-security-group-ingress-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RevokeDBSecurityGroupIngress", :http.request.spec/error-spec {"DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-security-group-not-found-fault, "AuthorizationNotFoundFault" :portkey.aws.rds.-2014-10-31/authorization-not-found-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-security-group-state-fault}})))))
(clojure.spec.alpha/fdef revoke-db-security-group-ingress :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/revoke-db-security-group-ingress-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/revoke-db-security-group-ingress-result))

(clojure.core/defn authorize-db-security-group-ingress ([authorize-db-security-group-ingress-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-authorize-db-security-group-ingress-message authorize-db-security-group-ingress-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/authorize-db-security-group-ingress-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/authorize-db-security-group-ingress-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AuthorizeDBSecurityGroupIngress", :http.request.spec/error-spec {"DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-security-group-not-found-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-security-group-state-fault, "AuthorizationAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/authorization-already-exists-fault, "AuthorizationQuotaExceededFault" :portkey.aws.rds.-2014-10-31/authorization-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef authorize-db-security-group-ingress :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/authorize-db-security-group-ingress-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/authorize-db-security-group-ingress-result))

(clojure.core/defn modify-db-subnet-group ([modify-db-subnet-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-modify-db-subnet-group-message modify-db-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/modify-db-subnet-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/modify-db-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyDBSubnetGroup", :http.request.spec/error-spec {"DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault, "DBSubnetQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-subnet-quota-exceeded-fault, "SubnetAlreadyInUse" :portkey.aws.rds.-2014-10-31/subnet-already-in-use, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet}})))))
(clojure.spec.alpha/fdef modify-db-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/modify-db-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/modify-db-subnet-group-result))

(clojure.core/defn modify-db-snapshot ([modify-db-snapshot-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-modify-db-snapshot-message modify-db-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/modify-db-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/modify-db-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyDBSnapshot", :http.request.spec/error-spec {"DBSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef modify-db-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/modify-db-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/modify-db-snapshot-result))

(clojure.core/defn restore-db-instance-to-point-in-time ([restore-db-instance-to-point-in-time-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-restore-db-instance-to-point-in-time-message restore-db-instance-to-point-in-time-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/restore-db-instance-to-point-in-time-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/restore-db-instance-to-point-in-time-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RestoreDBInstanceToPointInTime", :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "DomainNotFoundFault" :portkey.aws.rds.-2014-10-31/domain-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault, "InstanceQuotaExceededFault" :portkey.aws.rds.-2014-10-31/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-instance-already-exists-fault, "StorageTypeNotSupportedFault" :portkey.aws.rds.-2014-10-31/storage-type-not-supported-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs, "AuthorizationNotFoundFault" :portkey.aws.rds.-2014-10-31/authorization-not-found-fault, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds.-2014-10-31/provisioned-iops-not-available-in-az-fault, "PointInTimeRestoreNotEnabledFault" :portkey.aws.rds.-2014-10-31/point-in-time-restore-not-enabled-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2014-10-31/storage-quota-exceeded-fault, "InvalidRestoreFault" :portkey.aws.rds.-2014-10-31/invalid-restore-fault, "BackupPolicyNotFoundFault" :portkey.aws.rds.-2014-10-31/backup-policy-not-found-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-db-instance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef restore-db-instance-to-point-in-time :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/restore-db-instance-to-point-in-time-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/restore-db-instance-to-point-in-time-result))

(clojure.core/defn restore-db-cluster-to-point-in-time ([restore-db-cluster-to-point-in-time-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-restore-db-cluster-to-point-in-time-message restore-db-cluster-to-point-in-time-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/restore-db-cluster-to-point-in-time-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/restore-db-cluster-to-point-in-time-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RestoreDBClusterToPointInTime", :http.request.spec/error-spec {"DBClusterAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-cluster-already-exists-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "DBClusterParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-not-found-fault, "InsufficientStorageClusterCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-storage-cluster-capacity-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet, "DBClusterQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-cluster-quota-exceeded-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-snapshot-state-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2014-10-31/storage-quota-exceeded-fault, "InvalidRestoreFault" :portkey.aws.rds.-2014-10-31/invalid-restore-fault, "InsufficientDBClusterCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-db-cluster-capacity-fault, "InvalidDBSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-snapshot-state-fault}})))))
(clojure.spec.alpha/fdef restore-db-cluster-to-point-in-time :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/restore-db-cluster-to-point-in-time-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/restore-db-cluster-to-point-in-time-result))

(clojure.core/defn describe-events ([] (describe-events {})) ([describe-events-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-events-message describe-events-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/events-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-events-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeEvents", :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-events :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-events-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/events-message))

(clojure.core/defn reset-db-parameter-group ([reset-db-parameter-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-reset-db-parameter-group-message reset-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/reset-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ResetDBParameterGroup", :http.request.spec/error-spec {"InvalidDBParameterGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-parameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef reset-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/reset-db-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-parameter-group-name-message))

(clojure.core/defn remove-role-from-db-cluster ([remove-role-from-db-cluster-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-remove-role-from-db-cluster-message remove-role-from-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/remove-role-from-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RemoveRoleFromDBCluster", :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "DBClusterRoleNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-role-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault}})))))
(clojure.spec.alpha/fdef remove-role-from-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/remove-role-from-db-cluster-message) :ret clojure.core/true?)

(clojure.core/defn describe-option-groups ([] (describe-option-groups {})) ([describe-option-groups-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-option-groups-message describe-option-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/option-groups, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-option-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeOptionGroups", :http.request.spec/error-spec {"OptionGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/option-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-option-groups :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-option-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/option-groups))

(clojure.core/defn delete-db-cluster-snapshot ([delete-db-cluster-snapshot-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-delete-db-cluster-snapshot-message delete-db-cluster-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/delete-db-cluster-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/delete-db-cluster-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteDBClusterSnapshot", :http.request.spec/error-spec {"InvalidDBClusterSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-snapshot-state-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/delete-db-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/delete-db-cluster-snapshot-result))

(clojure.core/defn reboot-db-instance ([reboot-db-instance-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-reboot-db-instance-message reboot-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/reboot-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/reboot-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RebootDBInstance", :http.request.spec/error-spec {"InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault, "DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef reboot-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/reboot-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/reboot-db-instance-result))

(clojure.core/defn create-db-cluster-parameter-group ([create-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-db-cluster-parameter-group-message create-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/create-db-cluster-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/create-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateDBClusterParameterGroup", :http.request.spec/error-spec {"DBParameterGroupQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-quota-exceeded-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-already-exists-fault}})))))
(clojure.spec.alpha/fdef create-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/create-db-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/create-db-cluster-parameter-group-result))

(clojure.core/defn delete-db-security-group ([delete-db-security-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-delete-db-security-group-message delete-db-security-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/delete-db-security-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteDBSecurityGroup", :http.request.spec/error-spec {"InvalidDBSecurityGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-security-group-state-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-security-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/delete-db-security-group-message) :ret clojure.core/true?)

(clojure.core/defn copy-db-parameter-group ([copy-db-parameter-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-copy-db-parameter-group-message copy-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/copy-db-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/copy-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CopyDBParameterGroup", :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-already-exists-fault, "DBParameterGroupQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef copy-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/copy-db-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/copy-db-parameter-group-result))

(clojure.core/defn list-tags-for-resource ([list-tags-for-resource-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-list-tags-for-resource-message list-tags-for-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/tag-list-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/list-tags-for-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ListTagsForResource", :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-snapshot-not-found-fault, "DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef list-tags-for-resource :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/list-tags-for-resource-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list-message))

(clojure.core/defn describe-certificates ([] (describe-certificates {})) ([describe-certificates-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-certificates-message describe-certificates-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/certificate-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-certificates-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeCertificates", :http.request.spec/error-spec {"CertificateNotFoundFault" :portkey.aws.rds.-2014-10-31/certificate-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-certificates :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-certificates-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/certificate-message))

(clojure.core/defn stop-db-instance ([stop-db-instance-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-stop-db-instance-message stop-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/stop-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/stop-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "StopDBInstance", :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault, "DBSnapshotAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-snapshot-already-exists-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds.-2014-10-31/snapshot-quota-exceeded-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault}})))))
(clojure.spec.alpha/fdef stop-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/stop-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/stop-db-instance-result))

(clojure.core/defn describe-engine-default-parameters ([describe-engine-default-parameters-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-engine-default-parameters-message describe-engine-default-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/describe-engine-default-parameters-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-engine-default-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeEngineDefaultParameters", :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-engine-default-parameters :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/describe-engine-default-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/describe-engine-default-parameters-result))

(clojure.core/defn delete-db-instance ([delete-db-instance-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-delete-db-instance-message delete-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/delete-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/delete-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteDBInstance", :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault, "DBSnapshotAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-snapshot-already-exists-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds.-2014-10-31/snapshot-quota-exceeded-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault}})))))
(clojure.spec.alpha/fdef delete-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/delete-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/delete-db-instance-result))

(clojure.core/defn describe-db-subnet-groups ([] (describe-db-subnet-groups {})) ([describe-db-subnet-groups-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-subnet-groups-message describe-db-subnet-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-subnet-group-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-subnet-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBSubnetGroups", :http.request.spec/error-spec {"DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-subnet-groups :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-db-subnet-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-subnet-group-message))

(clojure.core/defn describe-db-clusters ([] (describe-db-clusters {})) ([describe-db-clusters-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-clusters-message describe-db-clusters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-cluster-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-clusters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBClusters", :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-clusters :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-db-clusters-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-message))

(clojure.core/defn create-db-cluster ([create-db-cluster-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-db-cluster-message create-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/create-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/create-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateDBCluster", :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "DBClusterAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-cluster-already-exists-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault, "InvalidDBSubnetGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-subnet-group-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "DBClusterParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-not-found-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs, "InsufficientStorageClusterCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-storage-cluster-capacity-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet, "DBClusterQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-cluster-quota-exceeded-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2014-10-31/storage-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef create-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/create-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/create-db-cluster-result))

(clojure.core/defn failover-db-cluster ([] (failover-db-cluster {})) ([failover-db-cluster-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-failover-db-cluster-message failover-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/failover-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/failover-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "FailoverDBCluster", :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef failover-db-cluster :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/failover-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/failover-db-cluster-result))

(clojure.core/defn reset-db-cluster-parameter-group ([reset-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-reset-db-cluster-parameter-group-message reset-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/reset-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ResetDBClusterParameterGroup", :http.request.spec/error-spec {"InvalidDBParameterGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-parameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef reset-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/reset-db-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-name-message))

(clojure.core/defn create-db-instance ([create-db-instance-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-db-instance-message create-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/create-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/create-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateDBInstance", :http.request.spec/error-spec {"DomainNotFoundFault" :portkey.aws.rds.-2014-10-31/domain-not-found-fault, "InstanceQuotaExceededFault" :portkey.aws.rds.-2014-10-31/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-instance-already-exists-fault, "DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "StorageTypeNotSupportedFault" :portkey.aws.rds.-2014-10-31/storage-type-not-supported-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs, "AuthorizationNotFoundFault" :portkey.aws.rds.-2014-10-31/authorization-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds.-2014-10-31/provisioned-iops-not-available-in-az-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2014-10-31/storage-quota-exceeded-fault, "BackupPolicyNotFoundFault" :portkey.aws.rds.-2014-10-31/backup-policy-not-found-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-db-instance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef create-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/create-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/create-db-instance-result))

(clojure.core/defn promote-read-replica ([promote-read-replica-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-promote-read-replica-message promote-read-replica-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/promote-read-replica-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/promote-read-replica-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "PromoteReadReplica", :http.request.spec/error-spec {"InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault, "DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef promote-read-replica :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/promote-read-replica-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/promote-read-replica-result))

(clojure.core/defn delete-event-subscription ([delete-event-subscription-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-delete-event-subscription-message delete-event-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/delete-event-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/delete-event-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteEventSubscription", :http.request.spec/error-spec {"SubscriptionNotFoundFault" :portkey.aws.rds.-2014-10-31/subscription-not-found-fault, "InvalidEventSubscriptionStateFault" :portkey.aws.rds.-2014-10-31/invalid-event-subscription-state-fault}})))))
(clojure.spec.alpha/fdef delete-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/delete-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/delete-event-subscription-result))

(clojure.core/defn apply-pending-maintenance-action ([apply-pending-maintenance-action-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-apply-pending-maintenance-action-message apply-pending-maintenance-action-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/apply-pending-maintenance-action-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/apply-pending-maintenance-action-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ApplyPendingMaintenanceAction", :http.request.spec/error-spec {"ResourceNotFoundFault" :portkey.aws.rds.-2014-10-31/resource-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef apply-pending-maintenance-action :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/apply-pending-maintenance-action-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/apply-pending-maintenance-action-result))

(clojure.core/defn delete-db-cluster ([delete-db-cluster-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-delete-db-cluster-message delete-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/delete-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/delete-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteDBCluster", :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "DBClusterSnapshotAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-already-exists-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds.-2014-10-31/snapshot-quota-exceeded-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-snapshot-state-fault}})))))
(clojure.spec.alpha/fdef delete-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/delete-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/delete-db-cluster-result))

(clojure.core/defn restore-db-instance-from-s-3 ([restore-db-instance-from-s-3-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-restore-db-instance-from-s-3-message restore-db-instance-from-s-3-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/restore-db-instance-from-s-3-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/restore-db-instance-from-s-3-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RestoreDBInstanceFromS3", :http.request.spec/error-spec {"InstanceQuotaExceededFault" :portkey.aws.rds.-2014-10-31/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-instance-already-exists-fault, "StorageTypeNotSupportedFault" :portkey.aws.rds.-2014-10-31/storage-type-not-supported-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs, "AuthorizationNotFoundFault" :portkey.aws.rds.-2014-10-31/authorization-not-found-fault, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet, "InvalidS3BucketFault" :portkey.aws.rds.-2014-10-31/invalid-s-3-bucket-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds.-2014-10-31/provisioned-iops-not-available-in-az-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2014-10-31/storage-quota-exceeded-fault, "BackupPolicyNotFoundFault" :portkey.aws.rds.-2014-10-31/backup-policy-not-found-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-db-instance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef restore-db-instance-from-s-3 :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/restore-db-instance-from-s-3-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/restore-db-instance-from-s-3-result))

(clojure.core/defn describe-db-log-files ([describe-db-log-files-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-log-files-message describe-db-log-files-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/describe-db-log-files-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-log-files-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBLogFiles", :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-log-files :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/describe-db-log-files-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/describe-db-log-files-response))

(clojure.core/defn restore-db-instance-from-db-snapshot ([restore-db-instance-from-db-snapshot-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-restore-db-instance-from-db-snapshot-message restore-db-instance-from-db-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/restore-db-instance-from-db-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/restore-db-instance-from-db-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RestoreDBInstanceFromDBSnapshot", :http.request.spec/error-spec {"DomainNotFoundFault" :portkey.aws.rds.-2014-10-31/domain-not-found-fault, "InstanceQuotaExceededFault" :portkey.aws.rds.-2014-10-31/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-instance-already-exists-fault, "StorageTypeNotSupportedFault" :portkey.aws.rds.-2014-10-31/storage-type-not-supported-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs, "AuthorizationNotFoundFault" :portkey.aws.rds.-2014-10-31/authorization-not-found-fault, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds.-2014-10-31/provisioned-iops-not-available-in-az-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2014-10-31/storage-quota-exceeded-fault, "InvalidRestoreFault" :portkey.aws.rds.-2014-10-31/invalid-restore-fault, "BackupPolicyNotFoundFault" :portkey.aws.rds.-2014-10-31/backup-policy-not-found-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-db-instance-capacity-fault, "InvalidDBSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-snapshot-state-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-snapshot-not-found-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef restore-db-instance-from-db-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/restore-db-instance-from-db-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/restore-db-instance-from-db-snapshot-result))

(clojure.core/defn describe-db-snapshots ([] (describe-db-snapshots {})) ([describe-db-snapshots-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-snapshots-message describe-db-snapshots-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-snapshot-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-snapshots-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBSnapshots", :http.request.spec/error-spec {"DBSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-snapshots :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-db-snapshots-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-snapshot-message))

(clojure.core/defn describe-db-cluster-backtracks ([describe-db-cluster-backtracks-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-cluster-backtracks-message describe-db-cluster-backtracks-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-cluster-backtrack-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-cluster-backtracks-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBClusterBacktracks", :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "DBClusterBacktrackNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-backtrack-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-backtracks :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/describe-db-cluster-backtracks-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-backtrack-message))

(clojure.core/defn create-db-subnet-group ([create-db-subnet-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-db-subnet-group-message create-db-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/create-db-subnet-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/create-db-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateDBSubnetGroup", :http.request.spec/error-spec {"DBSubnetGroupAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-already-exists-fault, "DBSubnetGroupQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-quota-exceeded-fault, "DBSubnetQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-subnet-quota-exceeded-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet}})))))
(clojure.spec.alpha/fdef create-db-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/create-db-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/create-db-subnet-group-result))

(clojure.core/defn remove-source-identifier-from-subscription ([remove-source-identifier-from-subscription-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-remove-source-identifier-from-subscription-message remove-source-identifier-from-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/remove-source-identifier-from-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/remove-source-identifier-from-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RemoveSourceIdentifierFromSubscription", :http.request.spec/error-spec {"SubscriptionNotFoundFault" :portkey.aws.rds.-2014-10-31/subscription-not-found-fault, "SourceNotFoundFault" :portkey.aws.rds.-2014-10-31/source-not-found-fault}})))))
(clojure.spec.alpha/fdef remove-source-identifier-from-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/remove-source-identifier-from-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/remove-source-identifier-from-subscription-result))

(clojure.core/defn create-option-group ([create-option-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-option-group-message create-option-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/create-option-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/create-option-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateOptionGroup", :http.request.spec/error-spec {"OptionGroupAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/option-group-already-exists-fault, "OptionGroupQuotaExceededFault" :portkey.aws.rds.-2014-10-31/option-group-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef create-option-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/create-option-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/create-option-group-result))

(clojure.core/defn describe-db-cluster-parameters ([describe-db-cluster-parameters-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-cluster-parameters-message describe-db-cluster-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-details, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-cluster-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBClusterParameters", :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-parameters :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/describe-db-cluster-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-details))

(clojure.core/defn describe-event-categories ([] (describe-event-categories {})) ([describe-event-categories-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-event-categories-message describe-event-categories-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/event-categories-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-event-categories-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeEventCategories", :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-event-categories :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-event-categories-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/event-categories-message))

(clojure.core/defn describe-account-attributes ([] (describe-account-attributes {})) ([describe-account-attributes-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-account-attributes-message describe-account-attributes-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/account-attributes-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-account-attributes-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeAccountAttributes", :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-account-attributes :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-account-attributes-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/account-attributes-message))

(clojure.core/defn describe-engine-default-cluster-parameters ([describe-engine-default-cluster-parameters-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-engine-default-cluster-parameters-message describe-engine-default-cluster-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/describe-engine-default-cluster-parameters-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-engine-default-cluster-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeEngineDefaultClusterParameters", :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-engine-default-cluster-parameters :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/describe-engine-default-cluster-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/describe-engine-default-cluster-parameters-result))

(clojure.core/defn modify-db-cluster ([modify-db-cluster-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-modify-db-cluster-message modify-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/modify-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/modify-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyDBCluster", :http.request.spec/error-spec {"DBClusterAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-cluster-already-exists-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault, "InvalidDBSubnetGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-subnet-group-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-security-group-state-fault, "DBClusterParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2014-10-31/storage-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef modify-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/modify-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/modify-db-cluster-result))

(clojure.core/defn restore-db-cluster-from-s-3 ([restore-db-cluster-from-s-3-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-restore-db-cluster-from-s-3-message restore-db-cluster-from-s-3-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/restore-db-cluster-from-s-3-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/restore-db-cluster-from-s-3-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RestoreDBClusterFromS3", :http.request.spec/error-spec {"DBClusterAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-cluster-already-exists-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault, "InvalidDBSubnetGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-subnet-group-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "DBClusterParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-not-found-fault, "InsufficientStorageClusterCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-storage-cluster-capacity-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet, "DBClusterQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-cluster-quota-exceeded-fault, "InvalidS3BucketFault" :portkey.aws.rds.-2014-10-31/invalid-s-3-bucket-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2014-10-31/storage-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef restore-db-cluster-from-s-3 :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/restore-db-cluster-from-s-3-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/restore-db-cluster-from-s-3-result))

(clojure.core/defn describe-reserved-db-instances-offerings ([] (describe-reserved-db-instances-offerings {})) ([describe-reserved-db-instances-offerings-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-reserved-db-instances-offerings-message describe-reserved-db-instances-offerings-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/reserved-db-instances-offering-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-reserved-db-instances-offerings-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeReservedDBInstancesOfferings", :http.request.spec/error-spec {"ReservedDBInstancesOfferingNotFoundFault" :portkey.aws.rds.-2014-10-31/reserved-db-instances-offering-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-reserved-db-instances-offerings :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-reserved-db-instances-offerings-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/reserved-db-instances-offering-message))

(clojure.core/defn describe-pending-maintenance-actions ([] (describe-pending-maintenance-actions {})) ([describe-pending-maintenance-actions-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-pending-maintenance-actions-message describe-pending-maintenance-actions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/pending-maintenance-actions-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-pending-maintenance-actions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribePendingMaintenanceActions", :http.request.spec/error-spec {"ResourceNotFoundFault" :portkey.aws.rds.-2014-10-31/resource-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-pending-maintenance-actions :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-pending-maintenance-actions-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/pending-maintenance-actions-message))

(clojure.core/defn create-db-snapshot ([create-db-snapshot-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-db-snapshot-message create-db-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/create-db-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/create-db-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateDBSnapshot", :http.request.spec/error-spec {"DBSnapshotAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-snapshot-already-exists-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault, "DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds.-2014-10-31/snapshot-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef create-db-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/create-db-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/create-db-snapshot-result))

(clojure.core/defn download-db-log-file-portion ([download-db-log-file-portion-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-download-db-log-file-portion-message download-db-log-file-portion-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/download-db-log-file-portion-details, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/download-db-log-file-portion-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DownloadDBLogFilePortion", :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "DBLogFileNotFoundFault" :portkey.aws.rds.-2014-10-31/db-log-file-not-found-fault}})))))
(clojure.spec.alpha/fdef download-db-log-file-portion :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/download-db-log-file-portion-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/download-db-log-file-portion-details))

(clojure.core/defn modify-db-snapshot-attribute ([modify-db-snapshot-attribute-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-modify-db-snapshot-attribute-message modify-db-snapshot-attribute-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/modify-db-snapshot-attribute-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/modify-db-snapshot-attribute-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyDBSnapshotAttribute", :http.request.spec/error-spec {"DBSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-snapshot-not-found-fault, "InvalidDBSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-snapshot-state-fault, "SharedSnapshotQuotaExceededFault" :portkey.aws.rds.-2014-10-31/shared-snapshot-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef modify-db-snapshot-attribute :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/modify-db-snapshot-attribute-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/modify-db-snapshot-attribute-result))

(clojure.core/defn describe-source-regions ([] (describe-source-regions {})) ([describe-source-regions-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-source-regions-message describe-source-regions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/source-region-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-source-regions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeSourceRegions", :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-source-regions :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-source-regions-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/source-region-message))

(clojure.core/defn start-db-instance ([start-db-instance-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-start-db-instance-message start-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/start-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/start-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "StartDBInstance", :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs, "AuthorizationNotFoundFault" :portkey.aws.rds.-2014-10-31/authorization-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-db-instance-capacity-fault}})))))
(clojure.spec.alpha/fdef start-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/start-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/start-db-instance-result))

(clojure.core/defn start-db-cluster ([start-db-cluster-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-start-db-cluster-message start-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/start-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/start-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "StartDBCluster", :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef start-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/start-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/start-db-cluster-result))

(clojure.core/defn describe-db-snapshot-attributes ([describe-db-snapshot-attributes-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-snapshot-attributes-message describe-db-snapshot-attributes-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/describe-db-snapshot-attributes-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-snapshot-attributes-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBSnapshotAttributes", :http.request.spec/error-spec {"DBSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-snapshot-attributes :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/describe-db-snapshot-attributes-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/describe-db-snapshot-attributes-result))

(clojure.core/defn describe-db-instances ([] (describe-db-instances {})) ([describe-db-instances-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-instances-message describe-db-instances-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-instance-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-instances-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBInstances", :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-instances :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-db-instances-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-instance-message))

(clojure.core/defn modify-event-subscription ([modify-event-subscription-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-modify-event-subscription-message modify-event-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/modify-event-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/modify-event-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyEventSubscription", :http.request.spec/error-spec {"EventSubscriptionQuotaExceededFault" :portkey.aws.rds.-2014-10-31/event-subscription-quota-exceeded-fault, "SubscriptionNotFoundFault" :portkey.aws.rds.-2014-10-31/subscription-not-found-fault, "SNSInvalidTopicFault" :portkey.aws.rds.-2014-10-31/sns-invalid-topic-fault, "SNSNoAuthorizationFault" :portkey.aws.rds.-2014-10-31/sns-no-authorization-fault, "SNSTopicArnNotFoundFault" :portkey.aws.rds.-2014-10-31/sns-topic-arn-not-found-fault, "SubscriptionCategoryNotFoundFault" :portkey.aws.rds.-2014-10-31/subscription-category-not-found-fault}})))))
(clojure.spec.alpha/fdef modify-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/modify-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/modify-event-subscription-result))

(clojure.core/defn describe-db-engine-versions ([] (describe-db-engine-versions {})) ([describe-db-engine-versions-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-engine-versions-message describe-db-engine-versions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-engine-version-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-engine-versions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBEngineVersions", :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-db-engine-versions :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-db-engine-versions-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-engine-version-message))

(clojure.core/defn modify-db-cluster-parameter-group ([modify-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-modify-db-cluster-parameter-group-message modify-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/modify-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyDBClusterParameterGroup", :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault, "InvalidDBParameterGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-parameter-group-state-fault}})))))
(clojure.spec.alpha/fdef modify-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/modify-db-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-name-message))

(clojure.core/defn describe-option-group-options ([describe-option-group-options-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-option-group-options-message describe-option-group-options-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/option-group-options-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-option-group-options-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeOptionGroupOptions", :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-option-group-options :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/describe-option-group-options-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/option-group-options-message))

(clojure.core/defn create-db-security-group ([create-db-security-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-db-security-group-message create-db-security-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/create-db-security-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/create-db-security-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateDBSecurityGroup", :http.request.spec/error-spec {"DBSecurityGroupAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-security-group-already-exists-fault, "DBSecurityGroupQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-security-group-quota-exceeded-fault, "DBSecurityGroupNotSupportedFault" :portkey.aws.rds.-2014-10-31/db-security-group-not-supported-fault}})))))
(clojure.spec.alpha/fdef create-db-security-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/create-db-security-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/create-db-security-group-result))

(clojure.core/defn delete-option-group ([delete-option-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-delete-option-group-message delete-option-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/delete-option-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteOptionGroup", :http.request.spec/error-spec {"OptionGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/option-group-not-found-fault, "InvalidOptionGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-option-group-state-fault}})))))
(clojure.spec.alpha/fdef delete-option-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/delete-option-group-message) :ret clojure.core/true?)

(clojure.core/defn create-event-subscription ([create-event-subscription-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-event-subscription-message create-event-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/create-event-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/create-event-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateEventSubscription", :http.request.spec/error-spec {"EventSubscriptionQuotaExceededFault" :portkey.aws.rds.-2014-10-31/event-subscription-quota-exceeded-fault, "SubscriptionAlreadyExistFault" :portkey.aws.rds.-2014-10-31/subscription-already-exist-fault, "SNSInvalidTopicFault" :portkey.aws.rds.-2014-10-31/sns-invalid-topic-fault, "SNSNoAuthorizationFault" :portkey.aws.rds.-2014-10-31/sns-no-authorization-fault, "SNSTopicArnNotFoundFault" :portkey.aws.rds.-2014-10-31/sns-topic-arn-not-found-fault, "SubscriptionCategoryNotFoundFault" :portkey.aws.rds.-2014-10-31/subscription-category-not-found-fault, "SourceNotFoundFault" :portkey.aws.rds.-2014-10-31/source-not-found-fault}})))))
(clojure.spec.alpha/fdef create-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/create-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/create-event-subscription-result))

(clojure.core/defn modify-db-cluster-snapshot-attribute ([modify-db-cluster-snapshot-attribute-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-modify-db-cluster-snapshot-attribute-message modify-db-cluster-snapshot-attribute-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/modify-db-cluster-snapshot-attribute-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/modify-db-cluster-snapshot-attribute-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyDBClusterSnapshotAttribute", :http.request.spec/error-spec {"DBClusterSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-not-found-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-snapshot-state-fault, "SharedSnapshotQuotaExceededFault" :portkey.aws.rds.-2014-10-31/shared-snapshot-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef modify-db-cluster-snapshot-attribute :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/modify-db-cluster-snapshot-attribute-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/modify-db-cluster-snapshot-attribute-result))

(clojure.core/defn stop-db-cluster ([stop-db-cluster-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-stop-db-cluster-message stop-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/stop-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/stop-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "StopDBCluster", :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef stop-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/stop-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/stop-db-cluster-result))

(clojure.core/defn backtrack-db-cluster ([backtrack-db-cluster-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-backtrack-db-cluster-message backtrack-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-cluster-backtrack, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/backtrack-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "BacktrackDBCluster", :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault}})))))
(clojure.spec.alpha/fdef backtrack-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/backtrack-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-backtrack))

(clojure.core/defn create-db-parameter-group ([create-db-parameter-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-db-parameter-group-message create-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/create-db-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/create-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateDBParameterGroup", :http.request.spec/error-spec {"DBParameterGroupQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-quota-exceeded-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-already-exists-fault}})))))
(clojure.spec.alpha/fdef create-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/create-db-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/create-db-parameter-group-result))

(clojure.core/defn describe-valid-db-instance-modifications ([describe-valid-db-instance-modifications-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-valid-db-instance-modifications-message describe-valid-db-instance-modifications-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/describe-valid-db-instance-modifications-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-valid-db-instance-modifications-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeValidDBInstanceModifications", :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef describe-valid-db-instance-modifications :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/describe-valid-db-instance-modifications-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/describe-valid-db-instance-modifications-result))

(clojure.core/defn purchase-reserved-db-instances-offering ([purchase-reserved-db-instances-offering-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-purchase-reserved-db-instances-offering-message purchase-reserved-db-instances-offering-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/purchase-reserved-db-instances-offering-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/purchase-reserved-db-instances-offering-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "PurchaseReservedDBInstancesOffering", :http.request.spec/error-spec {"ReservedDBInstancesOfferingNotFoundFault" :portkey.aws.rds.-2014-10-31/reserved-db-instances-offering-not-found-fault, "ReservedDBInstanceAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/reserved-db-instance-already-exists-fault, "ReservedDBInstanceQuotaExceededFault" :portkey.aws.rds.-2014-10-31/reserved-db-instance-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef purchase-reserved-db-instances-offering :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/purchase-reserved-db-instances-offering-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/purchase-reserved-db-instances-offering-result))

(clojure.core/defn describe-db-cluster-snapshots ([] (describe-db-cluster-snapshots {})) ([describe-db-cluster-snapshots-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-cluster-snapshots-message describe-db-cluster-snapshots-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-cluster-snapshots-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBClusterSnapshots", :http.request.spec/error-spec {"DBClusterSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-snapshots :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-db-cluster-snapshots-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-message))

(clojure.core/defn delete-db-parameter-group ([delete-db-parameter-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-delete-db-parameter-group-message delete-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/delete-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteDBParameterGroup", :http.request.spec/error-spec {"InvalidDBParameterGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-parameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/delete-db-parameter-group-message) :ret clojure.core/true?)

(clojure.core/defn copy-db-snapshot ([copy-db-snapshot-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-copy-db-snapshot-message copy-db-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/copy-db-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/copy-db-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CopyDBSnapshot", :http.request.spec/error-spec {"DBSnapshotAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-snapshot-already-exists-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-snapshot-not-found-fault, "InvalidDBSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-snapshot-state-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds.-2014-10-31/snapshot-quota-exceeded-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault}})))))
(clojure.spec.alpha/fdef copy-db-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/copy-db-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/copy-db-snapshot-result))

(clojure.core/defn describe-reserved-db-instances ([] (describe-reserved-db-instances {})) ([describe-reserved-db-instances-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-reserved-db-instances-message describe-reserved-db-instances-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/reserved-db-instance-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-reserved-db-instances-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeReservedDBInstances", :http.request.spec/error-spec {"ReservedDBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/reserved-db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-reserved-db-instances :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-reserved-db-instances-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/reserved-db-instance-message))

(clojure.core/defn describe-event-subscriptions ([] (describe-event-subscriptions {})) ([describe-event-subscriptions-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-event-subscriptions-message describe-event-subscriptions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/event-subscriptions-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-event-subscriptions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeEventSubscriptions", :http.request.spec/error-spec {"SubscriptionNotFoundFault" :portkey.aws.rds.-2014-10-31/subscription-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-event-subscriptions :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-event-subscriptions-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/event-subscriptions-message))

(clojure.core/defn modify-db-instance ([modify-db-instance-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-modify-db-instance-message modify-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/modify-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/modify-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyDBInstance", :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "DomainNotFoundFault" :portkey.aws.rds.-2014-10-31/domain-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-instance-already-exists-fault, "CertificateNotFoundFault" :portkey.aws.rds.-2014-10-31/certificate-not-found-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-security-group-state-fault, "StorageTypeNotSupportedFault" :portkey.aws.rds.-2014-10-31/storage-type-not-supported-fault, "AuthorizationNotFoundFault" :portkey.aws.rds.-2014-10-31/authorization-not-found-fault, "DBUpgradeDependencyFailureFault" :portkey.aws.rds.-2014-10-31/db-upgrade-dependency-failure-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds.-2014-10-31/provisioned-iops-not-available-in-az-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2014-10-31/storage-quota-exceeded-fault, "BackupPolicyNotFoundFault" :portkey.aws.rds.-2014-10-31/backup-policy-not-found-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-db-instance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef modify-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/modify-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/modify-db-instance-result))

(clojure.core/defn describe-db-cluster-parameter-groups ([] (describe-db-cluster-parameter-groups {})) ([describe-db-cluster-parameter-groups-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-cluster-parameter-groups-message describe-db-cluster-parameter-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-cluster-parameter-groups-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-cluster-parameter-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBClusterParameterGroups", :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-parameter-groups :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-db-cluster-parameter-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-parameter-groups-message))

(clojure.core/defn create-db-cluster-snapshot ([create-db-cluster-snapshot-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-db-cluster-snapshot-message create-db-cluster-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/create-db-cluster-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/create-db-cluster-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateDBClusterSnapshot", :http.request.spec/error-spec {"DBClusterSnapshotAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-already-exists-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds.-2014-10-31/snapshot-quota-exceeded-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-snapshot-state-fault}})))))
(clojure.spec.alpha/fdef create-db-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/create-db-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/create-db-cluster-snapshot-result))

(clojure.core/defn describe-db-parameters ([describe-db-parameters-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-parameters-message describe-db-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-parameter-group-details, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBParameters", :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-parameters :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/describe-db-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-parameter-group-details))

(clojure.core/defn modify-option-group ([modify-option-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-modify-option-group-message modify-option-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/modify-option-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/modify-option-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyOptionGroup", :http.request.spec/error-spec {"InvalidOptionGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-option-group-state-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/option-group-not-found-fault}})))))
(clojure.spec.alpha/fdef modify-option-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/modify-option-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/modify-option-group-result))

(clojure.core/defn describe-db-parameter-groups ([] (describe-db-parameter-groups {})) ([describe-db-parameter-groups-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-parameter-groups-message describe-db-parameter-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-parameter-groups-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-parameter-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBParameterGroups", :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-parameter-groups :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-db-parameter-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-parameter-groups-message))

(clojure.core/defn remove-tags-from-resource ([remove-tags-from-resource-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-remove-tags-from-resource-message remove-tags-from-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/remove-tags-from-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RemoveTagsFromResource", :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-snapshot-not-found-fault, "DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef remove-tags-from-resource :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/remove-tags-from-resource-message) :ret clojure.core/true?)

(clojure.core/defn copy-db-cluster-snapshot ([copy-db-cluster-snapshot-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-copy-db-cluster-snapshot-message copy-db-cluster-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/copy-db-cluster-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/copy-db-cluster-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CopyDBClusterSnapshot", :http.request.spec/error-spec {"DBClusterSnapshotAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-already-exists-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-snapshot-state-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds.-2014-10-31/snapshot-quota-exceeded-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault}})))))
(clojure.spec.alpha/fdef copy-db-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/copy-db-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/copy-db-cluster-snapshot-result))

(clojure.core/defn delete-db-cluster-parameter-group ([delete-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-delete-db-cluster-parameter-group-message delete-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/delete-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteDBClusterParameterGroup", :http.request.spec/error-spec {"InvalidDBParameterGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-parameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/delete-db-cluster-parameter-group-message) :ret clojure.core/true?)

(clojure.core/defn add-role-to-db-cluster ([add-role-to-db-cluster-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-add-role-to-db-cluster-message add-role-to-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/add-role-to-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AddRoleToDBCluster", :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "DBClusterRoleAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-cluster-role-already-exists-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "DBClusterRoleQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-cluster-role-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef add-role-to-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/add-role-to-db-cluster-message) :ret clojure.core/true?)

(clojure.core/defn modify-current-db-cluster-capacity ([modify-current-db-cluster-capacity-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-modify-current-db-cluster-capacity-message modify-current-db-cluster-capacity-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-cluster-capacity-info, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/modify-current-db-cluster-capacity-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyCurrentDBClusterCapacity", :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidDBClusterCapacityFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-capacity-fault}})))))
(clojure.spec.alpha/fdef modify-current-db-cluster-capacity :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/modify-current-db-cluster-capacity-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-capacity-info))

(clojure.core/defn copy-option-group ([copy-option-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-copy-option-group-message copy-option-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/copy-option-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/copy-option-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CopyOptionGroup", :http.request.spec/error-spec {"OptionGroupAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/option-group-already-exists-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/option-group-not-found-fault, "OptionGroupQuotaExceededFault" :portkey.aws.rds.-2014-10-31/option-group-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef copy-option-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/copy-option-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/copy-option-group-result))

(clojure.core/defn promote-read-replica-db-cluster ([promote-read-replica-db-cluster-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-promote-read-replica-db-cluster-message promote-read-replica-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/promote-read-replica-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/promote-read-replica-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "PromoteReadReplicaDBCluster", :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault}})))))
(clojure.spec.alpha/fdef promote-read-replica-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/promote-read-replica-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/promote-read-replica-db-cluster-result))

(clojure.core/defn add-tags-to-resource ([add-tags-to-resource-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-add-tags-to-resource-message add-tags-to-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/add-tags-to-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AddTagsToResource", :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-snapshot-not-found-fault, "DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef add-tags-to-resource :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/add-tags-to-resource-message) :ret clojure.core/true?)

(clojure.core/defn restore-db-cluster-from-snapshot ([restore-db-cluster-from-snapshot-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-restore-db-cluster-from-snapshot-message restore-db-cluster-from-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/restore-db-cluster-from-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/restore-db-cluster-from-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RestoreDBClusterFromSnapshot", :http.request.spec/error-spec {"DBClusterAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-cluster-already-exists-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault, "DBClusterParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-not-found-fault, "InsufficientStorageClusterCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-storage-cluster-capacity-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-not-found-fault, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet, "DBClusterQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-cluster-quota-exceeded-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-snapshot-state-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2014-10-31/storage-quota-exceeded-fault, "InvalidRestoreFault" :portkey.aws.rds.-2014-10-31/invalid-restore-fault, "InsufficientDBClusterCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-db-cluster-capacity-fault, "InvalidDBSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-snapshot-state-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef restore-db-cluster-from-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/restore-db-cluster-from-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/restore-db-cluster-from-snapshot-result))

(clojure.core/defn modify-db-parameter-group ([modify-db-parameter-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-modify-db-parameter-group-message modify-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/modify-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyDBParameterGroup", :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault, "InvalidDBParameterGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-parameter-group-state-fault}})))))
(clojure.spec.alpha/fdef modify-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/modify-db-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-parameter-group-name-message))

(clojure.core/defn describe-db-cluster-snapshot-attributes ([describe-db-cluster-snapshot-attributes-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-cluster-snapshot-attributes-message describe-db-cluster-snapshot-attributes-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/describe-db-cluster-snapshot-attributes-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-cluster-snapshot-attributes-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBClusterSnapshotAttributes", :http.request.spec/error-spec {"DBClusterSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-snapshot-attributes :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/describe-db-cluster-snapshot-attributes-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/describe-db-cluster-snapshot-attributes-result))

(clojure.core/defn describe-db-security-groups ([] (describe-db-security-groups {})) ([describe-db-security-groups-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-security-groups-message describe-db-security-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-security-group-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-security-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBSecurityGroups", :http.request.spec/error-spec {"DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-security-groups :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-db-security-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-security-group-message))

(clojure.core/defn create-db-instance-read-replica ([create-db-instance-read-replica-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-db-instance-read-replica-message create-db-instance-read-replica-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/create-db-instance-read-replica-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/create-db-instance-read-replica-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateDBInstanceReadReplica", :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault, "InstanceQuotaExceededFault" :portkey.aws.rds.-2014-10-31/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-instance-already-exists-fault, "InvalidDBSubnetGroupFault" :portkey.aws.rds.-2014-10-31/invalid-db-subnet-group-fault, "StorageTypeNotSupportedFault" :portkey.aws.rds.-2014-10-31/storage-type-not-supported-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds.-2014-10-31/provisioned-iops-not-available-in-az-fault, "DBSubnetGroupNotAllowedFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-allowed-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2014-10-31/storage-quota-exceeded-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-db-instance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef create-db-instance-read-replica :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/create-db-instance-read-replica-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/create-db-instance-read-replica-result))
