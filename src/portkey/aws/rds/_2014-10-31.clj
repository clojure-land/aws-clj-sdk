(ns portkey.aws.rds.-2014-10-31 (:require [portkey.aws]))

(def
 endpoints
 '{"us-gov-east-1"
   {:credential-scope {:service "rds", :region "us-gov-east-1"},
    :ssl-common-name "rds.us-gov-east-1.amazonaws.com",
    :endpoint "https://rds.us-gov-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-northeast-1"
   {:credential-scope {:service "rds", :region "ap-northeast-1"},
    :ssl-common-name "rds.ap-northeast-1.amazonaws.com",
    :endpoint "https://rds.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "rds", :region "eu-west-1"},
    :ssl-common-name "rds.eu-west-1.amazonaws.com",
    :endpoint "https://rds.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "rds", :region "us-east-2"},
    :ssl-common-name "rds.us-east-2.amazonaws.com",
    :endpoint "https://rds.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope {:service "rds", :region "ap-southeast-2"},
    :ssl-common-name "rds.ap-southeast-2.amazonaws.com",
    :endpoint "https://rds.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "cn-north-1"
   {:credential-scope {:service "rds", :region "cn-north-1"},
    :ssl-common-name "rds.cn-north-1.amazonaws.com.cn",
    :endpoint "https://rds.cn-north-1.amazonaws.com.cn",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "rds", :region "sa-east-1"},
    :ssl-common-name "rds.sa-east-1.amazonaws.com",
    :endpoint "https://rds.sa-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope {:service "rds", :region "ap-southeast-1"},
    :ssl-common-name "rds.ap-southeast-1.amazonaws.com",
    :endpoint "https://rds.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "cn-northwest-1"
   {:credential-scope {:service "rds", :region "cn-northwest-1"},
    :ssl-common-name "rds.cn-northwest-1.amazonaws.com.cn",
    :endpoint "https://rds.cn-northwest-1.amazonaws.com.cn",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope {:service "rds", :region "ap-northeast-2"},
    :ssl-common-name "rds.ap-northeast-2.amazonaws.com",
    :endpoint "https://rds.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-west-3"
   {:credential-scope {:service "rds", :region "eu-west-3"},
    :ssl-common-name "rds.eu-west-3.amazonaws.com",
    :endpoint "https://rds.eu-west-3.amazonaws.com",
    :signature-version :v4},
   "ca-central-1"
   {:credential-scope {:service "rds", :region "ca-central-1"},
    :ssl-common-name "rds.ca-central-1.amazonaws.com",
    :endpoint "https://rds.ca-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "rds", :region "eu-central-1"},
    :ssl-common-name "rds.eu-central-1.amazonaws.com",
    :endpoint "https://rds.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "rds", :region "eu-west-2"},
    :ssl-common-name "rds.eu-west-2.amazonaws.com",
    :endpoint "https://rds.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-gov-west-1"
   {:credential-scope {:service "rds", :region "us-gov-west-1"},
    :ssl-common-name "rds.us-gov-west-1.amazonaws.com",
    :endpoint "https://rds.us-gov-west-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "rds", :region "us-west-2"},
    :ssl-common-name "rds.us-west-2.amazonaws.com",
    :endpoint "https://rds.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "rds", :region "us-east-1"},
    :ssl-common-name "rds.amazonaws.com",
    :endpoint "https://rds.us-east-1.amazonaws.com",
    :signature-version :v4},
   "us-west-1"
   {:credential-scope {:service "rds", :region "us-west-1"},
    :ssl-common-name "rds.us-west-1.amazonaws.com",
    :endpoint "https://rds.us-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-south-1"
   {:credential-scope {:service "rds", :region "ap-south-1"},
    :ssl-common-name "rds.ap-south-1.amazonaws.com",
    :endpoint "https://rds.ap-south-1.amazonaws.com",
    :signature-version :v4},
   "eu-north-1"
   {:credential-scope {:service "rds", :region "eu-north-1"},
    :ssl-common-name "rds.eu-north-1.amazonaws.com",
    :endpoint "https://rds.eu-north-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-subnet-identifier-list)

(clojure.core/declare ser-string-list)

(clojure.core/declare ser-filter-value-list)

(clojure.core/declare ser-parameters-list)

(clojure.core/declare ser-filter)

(clojure.core/declare ser-source-ids-list)

(clojure.core/declare ser-key-list)

(clojure.core/declare ser-option-names-list)

(clojure.core/declare ser-scaling-configuration)

(clojure.core/declare ser-source-type)

(clojure.core/declare ser-tag-list)

(clojure.core/declare ser-integer)

(clojure.core/declare ser-string)

(clojure.core/declare ser-parameter)

(clojure.core/declare ser-vpc-security-group-id-list)

(clojure.core/declare ser-t-stamp)

(clojure.core/declare ser-event-categories-list)

(clojure.core/declare ser-db-security-group-name-list)

(clojure.core/declare ser-processor-feature)

(clojure.core/declare ser-apply-method)

(clojure.core/declare ser-long)

(clojure.core/declare ser-cloudwatch-logs-export-configuration)

(clojure.core/declare ser-log-type-list)

(clojure.core/declare ser-attribute-value-list)

(clojure.core/declare ser-tag)

(clojure.core/declare ser-boolean-optional)

(clojure.core/declare ser-option-setting)

(clojure.core/declare ser-option-configuration-list)

(clojure.core/declare ser-engine-mode-list)

(clojure.core/declare ser-availability-zones)

(clojure.core/declare ser-long-optional)

(clojure.core/declare ser-processor-feature-list)

(clojure.core/declare ser-option-configuration)

(clojure.core/declare ser-integer-optional)

(clojure.core/declare ser-option-settings-list)

(clojure.core/declare ser-filter-list)

(clojure.core/declare ser-boolean)

(clojure.core/defn- ser-subnet-identifier-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SubnetIdentifier"}))) input), :shape "SubnetIdentifierList", :type "list"})

(clojure.core/defn- ser-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "StringList", :type "list"})

(clojure.core/defn- ser-filter-value-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "Value"}))) input), :shape "FilterValueList", :type "list"})

(clojure.core/defn- ser-parameters-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-parameter coll) #:http.request.field{:shape "Parameter", :location-name "Parameter"}))) input), :shape "ParametersList", :type "list"})

(clojure.core/defn- ser-filter [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:name input)) #:http.request.field{:name "Name", :shape "String"}) (clojure.core/into (ser-filter-value-list (:values input)) #:http.request.field{:name "Values", :shape "FilterValueList"})], :shape "Filter", :type "structure"}))

(clojure.core/defn- ser-source-ids-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SourceId"}))) input), :shape "SourceIdsList", :type "list"})

(clojure.core/defn- ser-key-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "KeyList", :type "list"})

(clojure.core/defn- ser-option-names-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "OptionNamesList", :type "list"})

(clojure.core/defn- ser-scaling-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScalingConfiguration", :type "structure"} (clojure.core/contains? input :min-capacity) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :min-capacity)) #:http.request.field{:name "MinCapacity", :shape "IntegerOptional"})) (clojure.core/contains? input :max-capacity) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-capacity)) #:http.request.field{:name "MaxCapacity", :shape "IntegerOptional"})) (clojure.core/contains? input :auto-pause) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-pause)) #:http.request.field{:name "AutoPause", :shape "BooleanOptional"})) (clojure.core/contains? input :seconds-until-auto-pause) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :seconds-until-auto-pause)) #:http.request.field{:name "SecondsUntilAutoPause", :shape "IntegerOptional"}))))

(clojure.core/defn- ser-source-type [input] #:http.request.field{:value (clojure.core/get {:dbcluster "db-cluster", "db-security-group" "db-security-group", "db-cluster" "db-cluster", :dbsecuritygroup "db-security-group", :dbclustersnapshot "db-cluster-snapshot", "db-instance" "db-instance", "db-cluster-snapshot" "db-cluster-snapshot", :dbparametergroup "db-parameter-group", "db-parameter-group" "db-parameter-group", "db-snapshot" "db-snapshot", :dbsnapshot "db-snapshot", :dbinstance "db-instance"} input), :shape "SourceType"})

(clojure.core/defn- ser-tag-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-tag coll) #:http.request.field{:shape "Tag", :location-name "Tag"}))) input), :shape "TagList", :type "list"})

(clojure.core/defn- ser-integer [input] #:http.request.field{:value input, :shape "Integer"})

(clojure.core/defn- ser-string [input] #:http.request.field{:value input, :shape "String"})

(clojure.core/defn- ser-parameter [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Parameter", :type "structure"} (clojure.core/contains? input :data-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :data-type)) #:http.request.field{:name "DataType", :shape "String"})) (clojure.core/contains? input :supported-engine-modes) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-engine-mode-list (input :supported-engine-modes)) #:http.request.field{:name "SupportedEngineModes", :shape "EngineModeList"})) (clojure.core/contains? input :parameter-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :parameter-name)) #:http.request.field{:name "ParameterName", :shape "String"})) (clojure.core/contains? input :source) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source)) #:http.request.field{:name "Source", :shape "String"})) (clojure.core/contains? input :minimum-engine-version) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :minimum-engine-version)) #:http.request.field{:name "MinimumEngineVersion", :shape "String"})) (clojure.core/contains? input :allowed-values) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :allowed-values)) #:http.request.field{:name "AllowedValues", :shape "String"})) (clojure.core/contains? input :apply-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :apply-type)) #:http.request.field{:name "ApplyType", :shape "String"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :apply-method) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-apply-method (input :apply-method)) #:http.request.field{:name "ApplyMethod", :shape "ApplyMethod"})) (clojure.core/contains? input :is-modifiable) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :is-modifiable)) #:http.request.field{:name "IsModifiable", :shape "Boolean"})) (clojure.core/contains? input :parameter-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :parameter-value)) #:http.request.field{:name "ParameterValue", :shape "String"}))))

(clojure.core/defn- ser-vpc-security-group-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "VpcSecurityGroupId"}))) input), :shape "VpcSecurityGroupIdList", :type "list"})

(clojure.core/defn- ser-t-stamp [input] #:http.request.field{:value input, :shape "TStamp"})

(clojure.core/defn- ser-event-categories-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "EventCategory"}))) input), :shape "EventCategoriesList", :type "list"})

(clojure.core/defn- ser-db-security-group-name-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "DBSecurityGroupName"}))) input), :shape "DBSecurityGroupNameList", :type "list"})

(clojure.core/defn- ser-processor-feature [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ProcessorFeature", :type "structure"} (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String"}))))

(clojure.core/defn- ser-apply-method [input] #:http.request.field{:value (clojure.core/get {"immediate" "immediate", :immediate "immediate", "pending-reboot" "pending-reboot", :pendingreboot "pending-reboot"} input), :shape "ApplyMethod"})

(clojure.core/defn- ser-long [input] #:http.request.field{:value input, :shape "Long"})

(clojure.core/defn- ser-cloudwatch-logs-export-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "CloudwatchLogsExportConfiguration", :type "structure"} (clojure.core/contains? input :enable-log-types) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-log-types)) #:http.request.field{:name "EnableLogTypes", :shape "LogTypeList"})) (clojure.core/contains? input :disable-log-types) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :disable-log-types)) #:http.request.field{:name "DisableLogTypes", :shape "LogTypeList"}))))

(clojure.core/defn- ser-log-type-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "LogTypeList", :type "list"})

(clojure.core/defn- ser-attribute-value-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "AttributeValue"}))) input), :shape "AttributeValueList", :type "list"})

(clojure.core/defn- ser-tag [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Tag", :type "structure"} (clojure.core/contains? input :key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key)) #:http.request.field{:name "Key", :shape "String"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String"}))))

(clojure.core/defn- ser-boolean-optional [input] #:http.request.field{:value input, :shape "BooleanOptional"})

(clojure.core/defn- ser-option-setting [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "OptionSetting", :type "structure"} (clojure.core/contains? input :data-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :data-type)) #:http.request.field{:name "DataType", :shape "String"})) (clojure.core/contains? input :allowed-values) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :allowed-values)) #:http.request.field{:name "AllowedValues", :shape "String"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String"})) (clojure.core/contains? input :apply-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :apply-type)) #:http.request.field{:name "ApplyType", :shape "String"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :default-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :default-value)) #:http.request.field{:name "DefaultValue", :shape "String"})) (clojure.core/contains? input :is-modifiable) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :is-modifiable)) #:http.request.field{:name "IsModifiable", :shape "Boolean"})) (clojure.core/contains? input :is-collection) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :is-collection)) #:http.request.field{:name "IsCollection", :shape "Boolean"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"}))))

(clojure.core/defn- ser-option-configuration-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-option-configuration coll) #:http.request.field{:shape "OptionConfiguration", :location-name "OptionConfiguration"}))) input), :shape "OptionConfigurationList", :type "list"})

(clojure.core/defn- ser-engine-mode-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "EngineModeList", :type "list"})

(clojure.core/defn- ser-availability-zones [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "AvailabilityZone"}))) input), :shape "AvailabilityZones", :type "list"})

(clojure.core/defn- ser-long-optional [input] #:http.request.field{:value input, :shape "LongOptional"})

(clojure.core/defn- ser-processor-feature-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-processor-feature coll) #:http.request.field{:shape "ProcessorFeature", :location-name "ProcessorFeature"}))) input), :shape "ProcessorFeatureList", :type "list"})

(clojure.core/defn- ser-option-configuration [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:option-name input)) #:http.request.field{:name "OptionName", :shape "String"})], :shape "OptionConfiguration", :type "structure"} (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :option-version) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-version)) #:http.request.field{:name "OptionVersion", :shape "String"})) (clojure.core/contains? input :db-security-group-memberships) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-db-security-group-name-list (input :db-security-group-memberships)) #:http.request.field{:name "DBSecurityGroupMemberships", :shape "DBSecurityGroupNameList"})) (clojure.core/contains? input :vpc-security-group-memberships) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-memberships)) #:http.request.field{:name "VpcSecurityGroupMemberships", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :option-settings) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-option-settings-list (input :option-settings)) #:http.request.field{:name "OptionSettings", :shape "OptionSettingsList"}))))

(clojure.core/defn- ser-integer-optional [input] #:http.request.field{:value input, :shape "IntegerOptional"})

(clojure.core/defn- ser-option-settings-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-option-setting coll) #:http.request.field{:shape "OptionSetting", :location-name "OptionSetting"}))) input), :shape "OptionSettingsList", :type "list"})

(clojure.core/defn- ser-filter-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-filter coll) #:http.request.field{:shape "Filter", :location-name "Filter"}))) input), :shape "FilterList", :type "list"})

(clojure.core/defn- ser-boolean [input] #:http.request.field{:value input, :shape "Boolean"})

(clojure.core/defn- req-describe-db-cluster-snapshots-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :db-cluster-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"})) (clojure.core/contains? input :snapshot-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-type)) #:http.request.field{:name "SnapshotType", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :include-shared) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-shared)) #:http.request.field{:name "IncludeShared", :shape "Boolean"})) (clojure.core/contains? input :include-public) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-public)) #:http.request.field{:name "IncludePublic", :shape "Boolean"}))))

(clojure.core/defn- req-restore-db-cluster-from-s-3-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"}) (clojure.core/into (ser-string (input :master-username)) #:http.request.field{:name "MasterUsername", :shape "String"}) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"}) (clojure.core/into (ser-string (input :source-engine)) #:http.request.field{:name "SourceEngine", :shape "String"}) (clojure.core/into (ser-string (input :source-engine-version)) #:http.request.field{:name "SourceEngineVersion", :shape "String"}) (clojure.core/into (ser-string (input :s-3-bucket-name)) #:http.request.field{:name "S3BucketName", :shape "String"}) (clojure.core/into (ser-string (input :s-3-ingestion-role-arn)) #:http.request.field{:name "S3IngestionRoleArn", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :character-set-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :character-set-name)) #:http.request.field{:name "CharacterSetName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :database-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :database-name)) #:http.request.field{:name "DatabaseName", :shape "String"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :storage-encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :storage-encrypted)) #:http.request.field{:name "StorageEncrypted", :shape "BooleanOptional"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :backtrack-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long-optional (input :backtrack-window)) #:http.request.field{:name "BacktrackWindow", :shape "LongOptional"})) (clojure.core/contains? input :s-3-prefix) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :s-3-prefix)) #:http.request.field{:name "S3Prefix", :shape "String"})) (clojure.core/contains? input :availability-zones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-availability-zones (input :availability-zones)) #:http.request.field{:name "AvailabilityZones", :shape "AvailabilityZones"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-copy-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-db-parameter-group-identifier)) #:http.request.field{:name "SourceDBParameterGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-parameter-group-identifier)) #:http.request.field{:name "TargetDBParameterGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-parameter-group-description)) #:http.request.field{:name "TargetDBParameterGroupDescription", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-copy-db-cluster-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-db-cluster-snapshot-identifier)) #:http.request.field{:name "SourceDBClusterSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-cluster-snapshot-identifier)) #:http.request.field{:name "TargetDBClusterSnapshotIdentifier", :shape "String"})]} (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :pre-signed-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :pre-signed-url)) #:http.request.field{:name "PreSignedUrl", :shape "String"})) (clojure.core/contains? input :copy-tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags)) #:http.request.field{:name "CopyTags", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-instances-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-reset-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})]} (clojure.core/contains? input :reset-all-parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :reset-all-parameters)) #:http.request.field{:name "ResetAllParameters", :shape "Boolean"})) (clojure.core/contains? input :parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-parameters-list (input :parameters)) #:http.request.field{:name "Parameters", :shape "ParametersList"}))))

(clojure.core/defn- req-copy-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-db-cluster-parameter-group-identifier)) #:http.request.field{:name "SourceDBClusterParameterGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-cluster-parameter-group-identifier)) #:http.request.field{:name "TargetDBClusterParameterGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-cluster-parameter-group-description)) #:http.request.field{:name "TargetDBClusterParameterGroupDescription", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-delete-db-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"})]}))

(clojure.core/defn- req-modify-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"}) (clojure.core/into (ser-parameters-list (input :parameters)) #:http.request.field{:name "Parameters", :shape "ParametersList"})]}))

(clojure.core/defn- req-delete-db-instance-automated-backup-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :dbi-resource-id)) #:http.request.field{:name "DbiResourceId", :shape "String"})]}))

(clojure.core/defn- req-describe-db-snapshots-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :include-public) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-public)) #:http.request.field{:name "IncludePublic", :shape "Boolean"})) (clojure.core/contains? input :snapshot-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-type)) #:http.request.field{:name "SnapshotType", :shape "String"})) (clojure.core/contains? input :include-shared) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-shared)) #:http.request.field{:name "IncludeShared", :shape "Boolean"})) (clojure.core/contains? input :db-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"})) (clojure.core/contains? input :dbi-resource-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :dbi-resource-id)) #:http.request.field{:name "DbiResourceId", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"}))))

(clojure.core/defn- req-delete-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})]}))

(clojure.core/defn- req-describe-engine-default-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"})]} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-stop-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]}))

(clojure.core/defn- req-create-db-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-engine-versions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :list-supported-character-sets) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :list-supported-character-sets)) #:http.request.field{:name "ListSupportedCharacterSets", :shape "BooleanOptional"})) (clojure.core/contains? input :default-only) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :default-only)) #:http.request.field{:name "DefaultOnly", :shape "Boolean"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :list-supported-timezones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :list-supported-timezones)) #:http.request.field{:name "ListSupportedTimezones", :shape "BooleanOptional"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :db-parameter-group-family) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"}))))

(clojure.core/defn- req-promote-read-replica-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]}))

(clojure.core/defn- req-describe-source-regions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :region-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :region-name)) #:http.request.field{:name "RegionName", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"}))))

(clojure.core/defn- req-describe-event-subscriptions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :subscription-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-db-subnet-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-restore-db-instance-from-db-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional"})) (clojure.core/contains? input :domain-iam-role-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain-iam-role-name)) #:http.request.field{:name "DomainIAMRoleName", :shape "String"})) (clojure.core/contains? input :copy-tags-to-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags-to-snapshot)) #:http.request.field{:name "CopyTagsToSnapshot", :shape "BooleanOptional"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :db-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-name)) #:http.request.field{:name "DBName", :shape "String"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :use-default-processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :use-default-processor-features)) #:http.request.field{:name "UseDefaultProcessorFeatures", :shape "BooleanOptional"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :domain) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain)) #:http.request.field{:name "Domain", :shape "String"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :tde-credential-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-password)) #:http.request.field{:name "TdeCredentialPassword", :shape "String"})) (clojure.core/contains? input :storage-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :storage-type)) #:http.request.field{:name "StorageType", :shape "String"})) (clojure.core/contains? input :processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-processor-feature-list (input :processor-features)) #:http.request.field{:name "ProcessorFeatures", :shape "ProcessorFeatureList"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :tde-credential-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-arn)) #:http.request.field{:name "TdeCredentialArn", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"}))))

(clojure.core/defn- req-restore-db-cluster-to-point-in-time-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :source-db-cluster-identifier)) #:http.request.field{:name "SourceDBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :restore-to-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :restore-to-time)) #:http.request.field{:name "RestoreToTime", :shape "TStamp"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :backtrack-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long-optional (input :backtrack-window)) #:http.request.field{:name "BacktrackWindow", :shape "LongOptional"})) (clojure.core/contains? input :restore-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :restore-type)) #:http.request.field{:name "RestoreType", :shape "String"})) (clojure.core/contains? input :use-latest-restorable-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :use-latest-restorable-time)) #:http.request.field{:name "UseLatestRestorableTime", :shape "Boolean"}))))

(clojure.core/defn- req-restore-db-cluster-from-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :snapshot-identifier)) #:http.request.field{:name "SnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :database-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :database-name)) #:http.request.field{:name "DatabaseName", :shape "String"})) (clojure.core/contains? input :engine-mode) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-mode)) #:http.request.field{:name "EngineMode", :shape "String"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :scaling-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scaling-configuration (input :scaling-configuration)) #:http.request.field{:name "ScalingConfiguration", :shape "ScalingConfiguration"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :backtrack-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long-optional (input :backtrack-window)) #:http.request.field{:name "BacktrackWindow", :shape "LongOptional"})) (clojure.core/contains? input :availability-zones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-availability-zones (input :availability-zones)) #:http.request.field{:name "AvailabilityZones", :shape "AvailabilityZones"}))))

(clojure.core/defn- req-modify-db-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"}) (clojure.core/into (ser-subnet-identifier-list (input :subnet-ids)) #:http.request.field{:name "SubnetIds", :shape "SubnetIdentifierList"})]} (clojure.core/contains? input :db-subnet-group-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-description)) #:http.request.field{:name "DBSubnetGroupDescription", :shape "String"}))))

(clojure.core/defn- req-delete-db-security-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-security-group-name)) #:http.request.field{:name "DBSecurityGroupName", :shape "String"})]}))

(clojure.core/defn- req-create-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :db-security-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-db-security-group-name-list (input :db-security-groups)) #:http.request.field{:name "DBSecurityGroups", :shape "DBSecurityGroupNameList"})) (clojure.core/contains? input :promotion-tier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :promotion-tier)) #:http.request.field{:name "PromotionTier", :shape "IntegerOptional"})) (clojure.core/contains? input :character-set-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :character-set-name)) #:http.request.field{:name "CharacterSetName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional"})) (clojure.core/contains? input :domain-iam-role-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain-iam-role-name)) #:http.request.field{:name "DomainIAMRoleName", :shape "String"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :copy-tags-to-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags-to-snapshot)) #:http.request.field{:name "CopyTagsToSnapshot", :shape "BooleanOptional"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :db-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-name)) #:http.request.field{:name "DBName", :shape "String"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :domain) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain)) #:http.request.field{:name "Domain", :shape "String"})) (clojure.core/contains? input :allocated-storage) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :allocated-storage)) #:http.request.field{:name "AllocatedStorage", :shape "IntegerOptional"})) (clojure.core/contains? input :monitoring-interval) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :monitoring-interval)) #:http.request.field{:name "MonitoringInterval", :shape "IntegerOptional"})) (clojure.core/contains? input :timezone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :timezone)) #:http.request.field{:name "Timezone", :shape "String"})) (clojure.core/contains? input :master-username) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-username)) #:http.request.field{:name "MasterUsername", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :storage-encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :storage-encrypted)) #:http.request.field{:name "StorageEncrypted", :shape "BooleanOptional"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :tde-credential-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-password)) #:http.request.field{:name "TdeCredentialPassword", :shape "String"})) (clojure.core/contains? input :storage-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :storage-type)) #:http.request.field{:name "StorageType", :shape "String"})) (clojure.core/contains? input :processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-processor-feature-list (input :processor-features)) #:http.request.field{:name "ProcessorFeatures", :shape "ProcessorFeatureList"})) (clojure.core/contains? input :performance-insights-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :performance-insights-retention-period)) #:http.request.field{:name "PerformanceInsightsRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :enable-performance-insights) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-performance-insights)) #:http.request.field{:name "EnablePerformanceInsights", :shape "BooleanOptional"})) (clojure.core/contains? input :monitoring-role-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :monitoring-role-arn)) #:http.request.field{:name "MonitoringRoleArn", :shape "String"})) (clojure.core/contains? input :tde-credential-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-arn)) #:http.request.field{:name "TdeCredentialArn", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"})) (clojure.core/contains? input :performance-insights-kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :performance-insights-kms-key-id)) #:http.request.field{:name "PerformanceInsightsKMSKeyId", :shape "String"})) (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-promote-read-replica-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-modify-db-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"})]} (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"}))))

(clojure.core/defn- req-describe-db-cluster-endpoints-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :db-cluster-endpoint-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-endpoint-identifier)) #:http.request.field{:name "DBClusterEndpointIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-option-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"}) (clojure.core/into (ser-string (input :engine-name)) #:http.request.field{:name "EngineName", :shape "String"}) (clojure.core/into (ser-string (input :major-engine-version)) #:http.request.field{:name "MajorEngineVersion", :shape "String"}) (clojure.core/into (ser-string (input :option-group-description)) #:http.request.field{:name "OptionGroupDescription", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-start-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]}))

(clojure.core/defn- req-add-role-to-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :role-arn)) #:http.request.field{:name "RoleArn", :shape "String"})]}))

(clojure.core/defn- req-delete-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :skip-final-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :skip-final-snapshot)) #:http.request.field{:name "SkipFinalSnapshot", :shape "Boolean"})) (clojure.core/contains? input :final-db-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :final-db-snapshot-identifier)) #:http.request.field{:name "FinalDBSnapshotIdentifier", :shape "String"})) (clojure.core/contains? input :delete-automated-backups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :delete-automated-backups)) #:http.request.field{:name "DeleteAutomatedBackups", :shape "BooleanOptional"}))))

(clojure.core/defn- req-describe-global-clusters-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :global-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :global-cluster-identifier)) #:http.request.field{:name "GlobalClusterIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-start-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]}))

(clojure.core/defn- req-delete-db-cluster-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"})]}))

(clojure.core/defn- req-apply-pending-maintenance-action-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-identifier)) #:http.request.field{:name "ResourceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :apply-action)) #:http.request.field{:name "ApplyAction", :shape "String"}) (clojure.core/into (ser-string (input :opt-in-type)) #:http.request.field{:name "OptInType", :shape "String"})]}))

(clojure.core/defn- req-describe-events-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :end-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :end-time)) #:http.request.field{:name "EndTime", :shape "TStamp"})) (clojure.core/contains? input :start-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :start-time)) #:http.request.field{:name "StartTime", :shape "TStamp"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-source-type (input :source-type)) #:http.request.field{:name "SourceType", :shape "SourceType"})) (clojure.core/contains? input :duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :duration)) #:http.request.field{:name "Duration", :shape "IntegerOptional"})) (clojure.core/contains? input :event-categories) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-event-categories-list (input :event-categories)) #:http.request.field{:name "EventCategories", :shape "EventCategoriesList"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :source-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-identifier)) #:http.request.field{:name "SourceIdentifier", :shape "String"}))))

(clojure.core/defn- req-describe-pending-maintenance-actions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :resource-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :resource-identifier)) #:http.request.field{:name "ResourceIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"}))))

(clojure.core/defn- req-authorize-db-security-group-ingress-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-security-group-name)) #:http.request.field{:name "DBSecurityGroupName", :shape "String"})]} (clojure.core/contains? input :cidrip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidrip)) #:http.request.field{:name "CIDRIP", :shape "String"})) (clojure.core/contains? input :ec-2-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-security-group-name)) #:http.request.field{:name "EC2SecurityGroupName", :shape "String"})) (clojure.core/contains? input :ec-2-security-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-security-group-id)) #:http.request.field{:name "EC2SecurityGroupId", :shape "String"})) (clojure.core/contains? input :ec-2-security-group-owner-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-security-group-owner-id)) #:http.request.field{:name "EC2SecurityGroupOwnerId", :shape "String"}))))

(clojure.core/defn- req-remove-role-from-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :role-arn)) #:http.request.field{:name "RoleArn", :shape "String"})]}))

(clojure.core/defn- req-describe-engine-default-cluster-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"})]} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-reset-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})]} (clojure.core/contains? input :reset-all-parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :reset-all-parameters)) #:http.request.field{:name "ResetAllParameters", :shape "Boolean"})) (clojure.core/contains? input :parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-parameters-list (input :parameters)) #:http.request.field{:name "Parameters", :shape "ParametersList"}))))

(clojure.core/defn- req-describe-db-cluster-parameter-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-orderable-db-instance-options-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})]} (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :vpc) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :vpc)) #:http.request.field{:name "Vpc", :shape "BooleanOptional"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-db-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"}) (clojure.core/into (ser-string (input :db-subnet-group-description)) #:http.request.field{:name "DBSubnetGroupDescription", :shape "String"}) (clojure.core/into (ser-subnet-identifier-list (input :subnet-ids)) #:http.request.field{:name "SubnetIds", :shape "SubnetIdentifierList"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-delete-event-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"})]}))

(clojure.core/defn- req-copy-option-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-option-group-identifier)) #:http.request.field{:name "SourceOptionGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-option-group-identifier)) #:http.request.field{:name "TargetOptionGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-option-group-description)) #:http.request.field{:name "TargetOptionGroupDescription", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-modify-db-cluster-endpoint-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-endpoint-identifier)) #:http.request.field{:name "DBClusterEndpointIdentifier", :shape "String"})]} (clojure.core/contains? input :endpoint-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :endpoint-type)) #:http.request.field{:name "EndpointType", :shape "String"})) (clojure.core/contains? input :static-members) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-list (input :static-members)) #:http.request.field{:name "StaticMembers", :shape "StringList"})) (clojure.core/contains? input :excluded-members) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-list (input :excluded-members)) #:http.request.field{:name "ExcludedMembers", :shape "StringList"}))))

(clojure.core/defn- req-delete-db-cluster-endpoint-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-endpoint-identifier)) #:http.request.field{:name "DBClusterEndpointIdentifier", :shape "String"})]}))

(clojure.core/defn- req-copy-db-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-db-snapshot-identifier)) #:http.request.field{:name "SourceDBSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-snapshot-identifier)) #:http.request.field{:name "TargetDBSnapshotIdentifier", :shape "String"})]} (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :copy-tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags)) #:http.request.field{:name "CopyTags", :shape "BooleanOptional"})) (clojure.core/contains? input :pre-signed-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :pre-signed-url)) #:http.request.field{:name "PreSignedUrl", :shape "String"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"}))))

(clojure.core/defn- req-create-db-instance-read-replica-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :source-db-instance-identifier)) #:http.request.field{:name "SourceDBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional"})) (clojure.core/contains? input :pre-signed-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :pre-signed-url)) #:http.request.field{:name "PreSignedUrl", :shape "String"})) (clojure.core/contains? input :copy-tags-to-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags-to-snapshot)) #:http.request.field{:name "CopyTagsToSnapshot", :shape "BooleanOptional"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :use-default-processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :use-default-processor-features)) #:http.request.field{:name "UseDefaultProcessorFeatures", :shape "BooleanOptional"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :monitoring-interval) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :monitoring-interval)) #:http.request.field{:name "MonitoringInterval", :shape "IntegerOptional"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :storage-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :storage-type)) #:http.request.field{:name "StorageType", :shape "String"})) (clojure.core/contains? input :processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-processor-feature-list (input :processor-features)) #:http.request.field{:name "ProcessorFeatures", :shape "ProcessorFeatureList"})) (clojure.core/contains? input :performance-insights-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :performance-insights-retention-period)) #:http.request.field{:name "PerformanceInsightsRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :enable-performance-insights) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-performance-insights)) #:http.request.field{:name "EnablePerformanceInsights", :shape "BooleanOptional"})) (clojure.core/contains? input :monitoring-role-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :monitoring-role-arn)) #:http.request.field{:name "MonitoringRoleArn", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"})) (clojure.core/contains? input :performance-insights-kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :performance-insights-kms-key-id)) #:http.request.field{:name "PerformanceInsightsKMSKeyId", :shape "String"}))))

(clojure.core/defn- req-remove-from-global-cluster-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :global-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :global-cluster-identifier)) #:http.request.field{:name "GlobalClusterIdentifier", :shape "String"})) (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DbClusterIdentifier", :shape "String"}))))

(clojure.core/defn- req-modify-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :enable-http-endpoint) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-http-endpoint)) #:http.request.field{:name "EnableHttpEndpoint", :shape "BooleanOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :new-db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :new-db-cluster-identifier)) #:http.request.field{:name "NewDBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :scaling-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scaling-configuration (input :scaling-configuration)) #:http.request.field{:name "ScalingConfiguration", :shape "ScalingConfiguration"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :backtrack-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long-optional (input :backtrack-window)) #:http.request.field{:name "BacktrackWindow", :shape "LongOptional"})) (clojure.core/contains? input :apply-immediately) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})) (clojure.core/contains? input :cloudwatch-logs-export-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cloudwatch-logs-export-configuration (input :cloudwatch-logs-export-configuration)) #:http.request.field{:name "CloudwatchLogsExportConfiguration", :shape "CloudwatchLogsExportConfiguration"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-describe-db-cluster-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})]} (clojure.core/contains? input :source) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source)) #:http.request.field{:name "Source", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-add-source-identifier-to-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"}) (clojure.core/into (ser-string (input :source-identifier)) #:http.request.field{:name "SourceIdentifier", :shape "String"})]}))

(clojure.core/defn- req-backtrack-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-t-stamp (input :backtrack-to)) #:http.request.field{:name "BacktrackTo", :shape "TStamp"})]} (clojure.core/contains? input :force) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :force)) #:http.request.field{:name "Force", :shape "BooleanOptional"})) (clojure.core/contains? input :use-earliest-time-on-point-in-time-unavailable) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :use-earliest-time-on-point-in-time-unavailable)) #:http.request.field{:name "UseEarliestTimeOnPointInTimeUnavailable", :shape "BooleanOptional"}))))

(clojure.core/defn- req-add-tags-to-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"}) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})]}))

(clojure.core/defn- req-modify-global-cluster-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :global-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :global-cluster-identifier)) #:http.request.field{:name "GlobalClusterIdentifier", :shape "String"})) (clojure.core/contains? input :new-global-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :new-global-cluster-identifier)) #:http.request.field{:name "NewGlobalClusterIdentifier", :shape "String"})) (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"}))))

(clojure.core/defn- req-create-global-cluster-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :global-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :global-cluster-identifier)) #:http.request.field{:name "GlobalClusterIdentifier", :shape "String"})) (clojure.core/contains? input :source-db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-db-cluster-identifier)) #:http.request.field{:name "SourceDBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :database-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :database-name)) #:http.request.field{:name "DatabaseName", :shape "String"})) (clojure.core/contains? input :storage-encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :storage-encrypted)) #:http.request.field{:name "StorageEncrypted", :shape "BooleanOptional"}))))

(clojure.core/defn- req-create-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"}) (clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"}) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-restore-db-instance-to-point-in-time-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :target-db-instance-identifier)) #:http.request.field{:name "TargetDBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional"})) (clojure.core/contains? input :domain-iam-role-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain-iam-role-name)) #:http.request.field{:name "DomainIAMRoleName", :shape "String"})) (clojure.core/contains? input :copy-tags-to-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags-to-snapshot)) #:http.request.field{:name "CopyTagsToSnapshot", :shape "BooleanOptional"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :db-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-name)) #:http.request.field{:name "DBName", :shape "String"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :use-default-processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :use-default-processor-features)) #:http.request.field{:name "UseDefaultProcessorFeatures", :shape "BooleanOptional"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :restore-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :restore-time)) #:http.request.field{:name "RestoreTime", :shape "TStamp"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :domain) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain)) #:http.request.field{:name "Domain", :shape "String"})) (clojure.core/contains? input :source-db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-db-instance-identifier)) #:http.request.field{:name "SourceDBInstanceIdentifier", :shape "String"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :source-dbi-resource-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-dbi-resource-id)) #:http.request.field{:name "SourceDbiResourceId", :shape "String"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :tde-credential-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-password)) #:http.request.field{:name "TdeCredentialPassword", :shape "String"})) (clojure.core/contains? input :storage-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :storage-type)) #:http.request.field{:name "StorageType", :shape "String"})) (clojure.core/contains? input :processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-processor-feature-list (input :processor-features)) #:http.request.field{:name "ProcessorFeatures", :shape "ProcessorFeatureList"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :tde-credential-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-arn)) #:http.request.field{:name "TdeCredentialArn", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"})) (clojure.core/contains? input :use-latest-restorable-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :use-latest-restorable-time)) #:http.request.field{:name "UseLatestRestorableTime", :shape "Boolean"}))))

(clojure.core/defn- req-modify-db-snapshot-attribute-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :attribute-name)) #:http.request.field{:name "AttributeName", :shape "String"})]} (clojure.core/contains? input :values-to-add) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value-list (input :values-to-add)) #:http.request.field{:name "ValuesToAdd", :shape "AttributeValueList"})) (clojure.core/contains? input :values-to-remove) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value-list (input :values-to-remove)) #:http.request.field{:name "ValuesToRemove", :shape "AttributeValueList"}))))

(clojure.core/defn- req-modify-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"}) (clojure.core/into (ser-parameters-list (input :parameters)) #:http.request.field{:name "Parameters", :shape "ParametersList"})]}))

(clojure.core/defn- req-describe-valid-db-instance-modifications-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]}))

(clojure.core/defn- req-reboot-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :force-failover) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :force-failover)) #:http.request.field{:name "ForceFailover", :shape "BooleanOptional"}))))

(clojure.core/defn- req-remove-source-identifier-from-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"}) (clojure.core/into (ser-string (input :source-identifier)) #:http.request.field{:name "SourceIdentifier", :shape "String"})]}))

(clojure.core/defn- req-remove-tags-from-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"}) (clojure.core/into (ser-key-list (input :tag-keys)) #:http.request.field{:name "TagKeys", :shape "KeyList"})]}))

(clojure.core/defn- req-modify-db-cluster-snapshot-attribute-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :attribute-name)) #:http.request.field{:name "AttributeName", :shape "String"})]} (clojure.core/contains? input :values-to-add) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value-list (input :values-to-add)) #:http.request.field{:name "ValuesToAdd", :shape "AttributeValueList"})) (clojure.core/contains? input :values-to-remove) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value-list (input :values-to-remove)) #:http.request.field{:name "ValuesToRemove", :shape "AttributeValueList"}))))

(clojure.core/defn- req-purchase-reserved-db-instances-offering-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :reserved-db-instances-offering-id)) #:http.request.field{:name "ReservedDBInstancesOfferingId", :shape "String"})]} (clojure.core/contains? input :reserved-db-instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-db-instance-id)) #:http.request.field{:name "ReservedDBInstanceId", :shape "String"})) (clojure.core/contains? input :db-instance-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :db-instance-count)) #:http.request.field{:name "DBInstanceCount", :shape "IntegerOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-certificates-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :certificate-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :certificate-identifier)) #:http.request.field{:name "CertificateIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-event-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"}) (clojure.core/into (ser-string (input :sns-topic-arn)) #:http.request.field{:name "SnsTopicArn", :shape "String"})]} (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-type)) #:http.request.field{:name "SourceType", :shape "String"})) (clojure.core/contains? input :event-categories) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-event-categories-list (input :event-categories)) #:http.request.field{:name "EventCategories", :shape "EventCategoriesList"})) (clojure.core/contains? input :source-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-source-ids-list (input :source-ids)) #:http.request.field{:name "SourceIds", :shape "SourceIdsList"})) (clojure.core/contains? input :enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enabled)) #:http.request.field{:name "Enabled", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-cluster-snapshot-attributes-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"})]}))

(clojure.core/defn- req-describe-db-instance-automated-backups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :dbi-resource-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :dbi-resource-id)) #:http.request.field{:name "DbiResourceId", :shape "String"})) (clojure.core/contains? input :db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-delete-global-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :global-cluster-identifier)) #:http.request.field{:name "GlobalClusterIdentifier", :shape "String"})]}))

(clojure.core/defn- req-describe-db-clusters-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-db-log-files-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :filename-contains) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :filename-contains)) #:http.request.field{:name "FilenameContains", :shape "String"})) (clojure.core/contains? input :file-last-written) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long (input :file-last-written)) #:http.request.field{:name "FileLastWritten", :shape "Long"})) (clojure.core/contains? input :file-size) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long (input :file-size)) #:http.request.field{:name "FileSize", :shape "Long"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-db-cluster-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-cluster-backtracks-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :backtrack-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :backtrack-identifier)) #:http.request.field{:name "BacktrackIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-add-role-to-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :role-arn)) #:http.request.field{:name "RoleArn", :shape "String"}) (clojure.core/into (ser-string (input :feature-name)) #:http.request.field{:name "FeatureName", :shape "String"})]}))

(clojure.core/defn- req-describe-db-parameter-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-modify-current-db-cluster-capacity-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :capacity) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :capacity)) #:http.request.field{:name "Capacity", :shape "IntegerOptional"})) (clojure.core/contains? input :seconds-before-timeout) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :seconds-before-timeout)) #:http.request.field{:name "SecondsBeforeTimeout", :shape "IntegerOptional"})) (clojure.core/contains? input :timeout-action) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :timeout-action)) #:http.request.field{:name "TimeoutAction", :shape "String"}))))

(clojure.core/defn- req-delete-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :skip-final-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :skip-final-snapshot)) #:http.request.field{:name "SkipFinalSnapshot", :shape "Boolean"})) (clojure.core/contains? input :final-db-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :final-db-snapshot-identifier)) #:http.request.field{:name "FinalDBSnapshotIdentifier", :shape "String"}))))

(clojure.core/defn- req-describe-event-categories-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-type)) #:http.request.field{:name "SourceType", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"}))))

(clojure.core/defn- req-delete-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})]}))

(clojure.core/defn- req-list-tags-for-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"})]} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"}))))

(clojure.core/defn- req-failover-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :target-db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :target-db-instance-identifier)) #:http.request.field{:name "TargetDBInstanceIdentifier", :shape "String"}))))

(clojure.core/defn- req-delete-db-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})]}))

(clojure.core/defn- req-create-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :replication-source-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :replication-source-identifier)) #:http.request.field{:name "ReplicationSourceIdentifier", :shape "String"})) (clojure.core/contains? input :character-set-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :character-set-name)) #:http.request.field{:name "CharacterSetName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :pre-signed-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :pre-signed-url)) #:http.request.field{:name "PreSignedUrl", :shape "String"})) (clojure.core/contains? input :database-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :database-name)) #:http.request.field{:name "DatabaseName", :shape "String"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :engine-mode) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-mode)) #:http.request.field{:name "EngineMode", :shape "String"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :scaling-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scaling-configuration (input :scaling-configuration)) #:http.request.field{:name "ScalingConfiguration", :shape "ScalingConfiguration"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :master-username) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-username)) #:http.request.field{:name "MasterUsername", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :storage-encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :storage-encrypted)) #:http.request.field{:name "StorageEncrypted", :shape "BooleanOptional"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :backtrack-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long-optional (input :backtrack-window)) #:http.request.field{:name "BacktrackWindow", :shape "LongOptional"})) (clojure.core/contains? input :global-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :global-cluster-identifier)) #:http.request.field{:name "GlobalClusterIdentifier", :shape "String"})) (clojure.core/contains? input :availability-zones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-availability-zones (input :availability-zones)) #:http.request.field{:name "AvailabilityZones", :shape "AvailabilityZones"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-describe-account-attributes-message [input] (clojure.core/cond-> {}))

(clojure.core/defn- req-download-db-log-file-portion-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :log-file-name)) #:http.request.field{:name "LogFileName", :shape "String"})]} (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :number-of-lines) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :number-of-lines)) #:http.request.field{:name "NumberOfLines", :shape "Integer"}))))

(clojure.core/defn- req-create-db-security-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-security-group-name)) #:http.request.field{:name "DBSecurityGroupName", :shape "String"}) (clojure.core/into (ser-string (input :db-security-group-description)) #:http.request.field{:name "DBSecurityGroupDescription", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-create-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"}) (clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"}) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-snapshot-attributes-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"})]}))

(clojure.core/defn- req-remove-role-from-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :role-arn)) #:http.request.field{:name "RoleArn", :shape "String"}) (clojure.core/into (ser-string (input :feature-name)) #:http.request.field{:name "FeatureName", :shape "String"})]}))

(clojure.core/defn- req-describe-reserved-db-instances-offerings-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :reserved-db-instances-offering-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-db-instances-offering-id)) #:http.request.field{:name "ReservedDBInstancesOfferingId", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :duration)) #:http.request.field{:name "Duration", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :product-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :product-description)) #:http.request.field{:name "ProductDescription", :shape "String"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :offering-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :offering-type)) #:http.request.field{:name "OfferingType", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"}))))

(clojure.core/defn- req-stop-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :db-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"}))))

(clojure.core/defn- req-describe-db-security-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-security-group-name)) #:http.request.field{:name "DBSecurityGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-delete-option-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})]}))

(clojure.core/defn- req-describe-db-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})]} (clojure.core/contains? input :source) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source)) #:http.request.field{:name "Source", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-reserved-db-instances-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :reserved-db-instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-db-instance-id)) #:http.request.field{:name "ReservedDBInstanceId", :shape "String"})) (clojure.core/contains? input :reserved-db-instances-offering-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-db-instances-offering-id)) #:http.request.field{:name "ReservedDBInstancesOfferingId", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :duration)) #:http.request.field{:name "Duration", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :product-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :product-description)) #:http.request.field{:name "ProductDescription", :shape "String"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :offering-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :offering-type)) #:http.request.field{:name "OfferingType", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"}))))

(clojure.core/defn- req-revoke-db-security-group-ingress-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-security-group-name)) #:http.request.field{:name "DBSecurityGroupName", :shape "String"})]} (clojure.core/contains? input :cidrip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidrip)) #:http.request.field{:name "CIDRIP", :shape "String"})) (clojure.core/contains? input :ec-2-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-security-group-name)) #:http.request.field{:name "EC2SecurityGroupName", :shape "String"})) (clojure.core/contains? input :ec-2-security-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-security-group-id)) #:http.request.field{:name "EC2SecurityGroupId", :shape "String"})) (clojure.core/contains? input :ec-2-security-group-owner-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-security-group-owner-id)) #:http.request.field{:name "EC2SecurityGroupOwnerId", :shape "String"}))))

(clojure.core/defn- req-modify-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :db-security-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-db-security-group-name-list (input :db-security-groups)) #:http.request.field{:name "DBSecurityGroups", :shape "DBSecurityGroupNameList"})) (clojure.core/contains? input :promotion-tier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :promotion-tier)) #:http.request.field{:name "PromotionTier", :shape "IntegerOptional"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional"})) (clojure.core/contains? input :domain-iam-role-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain-iam-role-name)) #:http.request.field{:name "DomainIAMRoleName", :shape "String"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :copy-tags-to-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags-to-snapshot)) #:http.request.field{:name "CopyTagsToSnapshot", :shape "BooleanOptional"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :new-db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :new-db-instance-identifier)) #:http.request.field{:name "NewDBInstanceIdentifier", :shape "String"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :use-default-processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :use-default-processor-features)) #:http.request.field{:name "UseDefaultProcessorFeatures", :shape "BooleanOptional"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :domain) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain)) #:http.request.field{:name "Domain", :shape "String"})) (clojure.core/contains? input :allow-major-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :allow-major-version-upgrade)) #:http.request.field{:name "AllowMajorVersionUpgrade", :shape "Boolean"})) (clojure.core/contains? input :allocated-storage) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :allocated-storage)) #:http.request.field{:name "AllocatedStorage", :shape "IntegerOptional"})) (clojure.core/contains? input :monitoring-interval) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :monitoring-interval)) #:http.request.field{:name "MonitoringInterval", :shape "IntegerOptional"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :db-port-number) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :db-port-number)) #:http.request.field{:name "DBPortNumber", :shape "IntegerOptional"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :tde-credential-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-password)) #:http.request.field{:name "TdeCredentialPassword", :shape "String"})) (clojure.core/contains? input :storage-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :storage-type)) #:http.request.field{:name "StorageType", :shape "String"})) (clojure.core/contains? input :apply-immediately) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})) (clojure.core/contains? input :processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-processor-feature-list (input :processor-features)) #:http.request.field{:name "ProcessorFeatures", :shape "ProcessorFeatureList"})) (clojure.core/contains? input :ca-certificate-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ca-certificate-identifier)) #:http.request.field{:name "CACertificateIdentifier", :shape "String"})) (clojure.core/contains? input :cloudwatch-logs-export-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cloudwatch-logs-export-configuration (input :cloudwatch-logs-export-configuration)) #:http.request.field{:name "CloudwatchLogsExportConfiguration", :shape "CloudwatchLogsExportConfiguration"})) (clojure.core/contains? input :performance-insights-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :performance-insights-retention-period)) #:http.request.field{:name "PerformanceInsightsRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :enable-performance-insights) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-performance-insights)) #:http.request.field{:name "EnablePerformanceInsights", :shape "BooleanOptional"})) (clojure.core/contains? input :monitoring-role-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :monitoring-role-arn)) #:http.request.field{:name "MonitoringRoleArn", :shape "String"})) (clojure.core/contains? input :tde-credential-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-arn)) #:http.request.field{:name "TdeCredentialArn", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"})) (clojure.core/contains? input :performance-insights-kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :performance-insights-kms-key-id)) #:http.request.field{:name "PerformanceInsightsKMSKeyId", :shape "String"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-restore-db-instance-from-s-3-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"}) (clojure.core/into (ser-string (input :source-engine)) #:http.request.field{:name "SourceEngine", :shape "String"}) (clojure.core/into (ser-string (input :source-engine-version)) #:http.request.field{:name "SourceEngineVersion", :shape "String"}) (clojure.core/into (ser-string (input :s-3-bucket-name)) #:http.request.field{:name "S3BucketName", :shape "String"}) (clojure.core/into (ser-string (input :s-3-ingestion-role-arn)) #:http.request.field{:name "S3IngestionRoleArn", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :db-security-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-db-security-group-name-list (input :db-security-groups)) #:http.request.field{:name "DBSecurityGroups", :shape "DBSecurityGroupNameList"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :copy-tags-to-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags-to-snapshot)) #:http.request.field{:name "CopyTagsToSnapshot", :shape "BooleanOptional"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :db-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-name)) #:http.request.field{:name "DBName", :shape "String"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :use-default-processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :use-default-processor-features)) #:http.request.field{:name "UseDefaultProcessorFeatures", :shape "BooleanOptional"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :allocated-storage) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :allocated-storage)) #:http.request.field{:name "AllocatedStorage", :shape "IntegerOptional"})) (clojure.core/contains? input :monitoring-interval) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :monitoring-interval)) #:http.request.field{:name "MonitoringInterval", :shape "IntegerOptional"})) (clojure.core/contains? input :master-username) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-username)) #:http.request.field{:name "MasterUsername", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :storage-encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :storage-encrypted)) #:http.request.field{:name "StorageEncrypted", :shape "BooleanOptional"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :storage-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :storage-type)) #:http.request.field{:name "StorageType", :shape "String"})) (clojure.core/contains? input :processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-processor-feature-list (input :processor-features)) #:http.request.field{:name "ProcessorFeatures", :shape "ProcessorFeatureList"})) (clojure.core/contains? input :performance-insights-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :performance-insights-retention-period)) #:http.request.field{:name "PerformanceInsightsRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :s-3-prefix) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :s-3-prefix)) #:http.request.field{:name "S3Prefix", :shape "String"})) (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :enable-performance-insights) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-performance-insights)) #:http.request.field{:name "EnablePerformanceInsights", :shape "BooleanOptional"})) (clojure.core/contains? input :monitoring-role-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :monitoring-role-arn)) #:http.request.field{:name "MonitoringRoleArn", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"})) (clojure.core/contains? input :performance-insights-kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :performance-insights-kms-key-id)) #:http.request.field{:name "PerformanceInsightsKMSKeyId", :shape "String"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-modify-option-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})]} (clojure.core/contains? input :options-to-include) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-option-configuration-list (input :options-to-include)) #:http.request.field{:name "OptionsToInclude", :shape "OptionConfigurationList"})) (clojure.core/contains? input :options-to-remove) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-option-names-list (input :options-to-remove)) #:http.request.field{:name "OptionsToRemove", :shape "OptionNamesList"})) (clojure.core/contains? input :apply-immediately) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"}))))

(clojure.core/defn- req-create-db-cluster-endpoint-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-cluster-endpoint-identifier)) #:http.request.field{:name "DBClusterEndpointIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :endpoint-type)) #:http.request.field{:name "EndpointType", :shape "String"})]} (clojure.core/contains? input :static-members) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-list (input :static-members)) #:http.request.field{:name "StaticMembers", :shape "StringList"})) (clojure.core/contains? input :excluded-members) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-list (input :excluded-members)) #:http.request.field{:name "ExcludedMembers", :shape "StringList"}))))

(clojure.core/defn- req-describe-option-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :engine-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-name)) #:http.request.field{:name "EngineName", :shape "String"})) (clojure.core/contains? input :major-engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :major-engine-version)) #:http.request.field{:name "MajorEngineVersion", :shape "String"}))))

(clojure.core/defn- req-modify-event-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"})]} (clojure.core/contains? input :sns-topic-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :sns-topic-arn)) #:http.request.field{:name "SnsTopicArn", :shape "String"})) (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-type)) #:http.request.field{:name "SourceType", :shape "String"})) (clojure.core/contains? input :event-categories) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-event-categories-list (input :event-categories)) #:http.request.field{:name "EventCategories", :shape "EventCategoriesList"})) (clojure.core/contains? input :enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enabled)) #:http.request.field{:name "Enabled", :shape "BooleanOptional"}))))

(clojure.core/defn- req-describe-option-group-options-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :engine-name)) #:http.request.field{:name "EngineName", :shape "String"})]} (clojure.core/contains? input :major-engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :major-engine-version)) #:http.request.field{:name "MajorEngineVersion", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/declare deser-vpc-security-group-membership-list)

(clojure.core/declare deser-certificate-list)

(clojure.core/declare deser-pending-maintenance-action)

(clojure.core/declare deser-read-replica-identifier-list)

(clojure.core/declare deser-string-list)

(clojure.core/declare deser-double)

(clojure.core/declare deser-parameters-list)

(clojure.core/declare deser-ec-2-security-group-list)

(clojure.core/declare deser-double-range)

(clojure.core/declare deser-minimum-engine-version-per-allowed-value)

(clojure.core/declare deser-db-cluster-role)

(clojure.core/declare deser-pending-maintenance-action-details)

(clojure.core/declare deser-source-region-list)

(clojure.core/declare deser-db-parameter-group-status)

(clojure.core/declare deser-valid-storage-options-list)

(clojure.core/declare deser-db-security-groups)

(clojure.core/declare deser-option-version)

(clojure.core/declare deser-double-optional)

(clojure.core/declare deser-minimum-engine-version-per-allowed-value-list)

(clojure.core/declare deser-scaling-configuration-info)

(clojure.core/declare deser-source-ids-list)

(clojure.core/declare deser-db-snapshot-attribute-list)

(clojure.core/declare deser-source-region)

(clojure.core/declare deser-options-list)

(clojure.core/declare deser-option)

(clojure.core/declare deser-option-group-options-list)

(clojure.core/declare deser-db-parameter-group-list)

(clojure.core/declare deser-db-parameter-group-status-list)

(clojure.core/declare deser-double-range-list)

(clojure.core/declare deser-pending-maintenance-actions)

(clojure.core/declare deser-option-group-option-setting)

(clojure.core/declare deser-subnet)

(clojure.core/declare deser-db-cluster-snapshot)

(clojure.core/declare deser-pending-cloudwatch-logs-exports)

(clojure.core/declare deser-db-cluster-list)

(clojure.core/declare deser-db-cluster-backtrack-list)

(clojure.core/declare deser-db-engine-version-list)

(clojure.core/declare deser-event-subscription)

(clojure.core/declare deser-db-snapshot)

(clojure.core/declare deser-describe-db-log-files-details)

(clojure.core/declare deser-db-cluster-member)

(clojure.core/declare deser-db-snapshot-attributes-result)

(clojure.core/declare deser-db-cluster-backtrack)

(clojure.core/declare deser-reserved-db-instance-list)

(clojure.core/declare deser-resource-pending-maintenance-actions)

(clojure.core/declare deser-global-cluster)

(clojure.core/declare deser-db-cluster)

(clojure.core/declare deser-option-group)

(clojure.core/declare deser-option-groups-list)

(clojure.core/declare deser-ip-range-list)

(clojure.core/declare deser-db-instance-status-info)

(clojure.core/declare deser-event-list)

(clojure.core/declare deser-source-type)

(clojure.core/declare deser-orderable-db-instance-options-list)

(clojure.core/declare deser-event)

(clojure.core/declare deser-feature-name-list)

(clojure.core/declare deser-availability-zone-list)

(clojure.core/declare deser-availability-zone)

(clojure.core/declare deser-db-cluster-parameter-group-list)

(clojure.core/declare deser-db-instance-automated-backup)

(clojure.core/declare deser-db-instance-automated-backup-list)

(clojure.core/declare deser-db-cluster-member-list)

(clojure.core/declare deser-read-replica-db-instance-identifier-list)

(clojure.core/declare deser-recurring-charge)

(clojure.core/declare deser-valid-upgrade-target-list)

(clojure.core/declare deser-range)

(clojure.core/declare deser-db-cluster-roles)

(clojure.core/declare deser-option-group-option)

(clojure.core/declare deser-tag-list)

(clojure.core/declare deser-timezone)

(clojure.core/declare deser-db-cluster-snapshot-list)

(clojure.core/declare deser-db-engine-version)

(clojure.core/declare deser-options-conflicts-with)

(clojure.core/declare deser-option-setting-configuration-list)

(clojure.core/declare deser-domain-membership-list)

(clojure.core/declare deser-valid-storage-options)

(clojure.core/declare deser-restore-window)

(clojure.core/declare deser-vpc-security-group-membership)

(clojure.core/declare deser-valid-db-instance-modifications-message)

(clojure.core/declare deser-global-cluster-member)

(clojure.core/declare deser-db-cluster-snapshot-attribute-list)

(clojure.core/declare deser-account-quota-list)

(clojure.core/declare deser-db-snapshot-attribute)

(clojure.core/declare deser-reserved-db-instances-offering)

(clojure.core/declare deser-readers-arn-list)

(clojure.core/declare deser-ec-2-security-group)

(clojure.core/declare deser-option-group-membership-list)

(clojure.core/declare deser-db-instance-roles)

(clojure.core/declare deser-event-categories-map-list)

(clojure.core/declare deser-db-cluster-endpoint-list)

(clojure.core/declare deser-integer)

(clojure.core/declare deser-string)

(clojure.core/declare deser-db-cluster-snapshot-attribute)

(clojure.core/declare deser-parameter)

(clojure.core/declare deser-describe-db-log-files-list)

(clojure.core/declare deser-db-security-group-membership)

(clojure.core/declare deser-read-replica-db-cluster-identifier-list)

(clojure.core/declare deser-db-cluster-snapshot-attributes-result)

(clojure.core/declare deser-db-instance)

(clojure.core/declare deser-option-group-option-versions-list)

(clojure.core/declare deser-t-stamp)

(clojure.core/declare deser-db-security-group-membership-list)

(clojure.core/declare deser-event-categories-map)

(clojure.core/declare deser-reserved-db-instances-offering-list)

(clojure.core/declare deser-recurring-charge-list)

(clojure.core/declare deser-event-categories-list)

(clojure.core/declare deser-processor-feature)

(clojure.core/declare deser-db-cluster-parameter-group)

(clojure.core/declare deser-apply-method)

(clojure.core/declare deser-endpoint)

(clojure.core/declare deser-db-parameter-group)

(clojure.core/declare deser-supported-character-sets-list)

(clojure.core/declare deser-long)

(clojure.core/declare deser-log-type-list)

(clojure.core/declare deser-account-quota)

(clojure.core/declare deser-db-cluster-option-group-status)

(clojure.core/declare deser-option-group-membership)

(clojure.core/declare deser-upgrade-target)

(clojure.core/declare deser-available-processor-feature-list)

(clojure.core/declare deser-attribute-value-list)

(clojure.core/declare deser-reserved-db-instance)

(clojure.core/declare deser-ip-range)

(clojure.core/declare deser-character-set)

(clojure.core/declare deser-option-group-option-settings-list)

(clojure.core/declare deser-tag)

(clojure.core/declare deser-boolean-optional)

(clojure.core/declare deser-options-depended-on)

(clojure.core/declare deser-option-setting)

(clojure.core/declare deser-db-instance-list)

(clojure.core/declare deser-global-cluster-member-list)

(clojure.core/declare deser-db-instance-role)

(clojure.core/declare deser-engine-mode-list)

(clojure.core/declare deser-event-subscriptions-list)

(clojure.core/declare deser-db-snapshot-list)

(clojure.core/declare deser-db-cluster-option-group-memberships)

(clojure.core/declare deser-db-cluster-endpoint)

(clojure.core/declare deser-engine-defaults)

(clojure.core/declare deser-availability-zones)

(clojure.core/declare deser-db-subnet-groups)

(clojure.core/declare deser-long-optional)

(clojure.core/declare deser-global-cluster-list)

(clojure.core/declare deser-processor-feature-list)

(clojure.core/declare deser-integer-optional)

(clojure.core/declare deser-db-security-group)

(clojure.core/declare deser-supported-timezones-list)

(clojure.core/declare deser-range-list)

(clojure.core/declare deser-db-instance-status-info-list)

(clojure.core/declare deser-certificate)

(clojure.core/declare deser-domain-membership)

(clojure.core/declare deser-orderable-db-instance-option)

(clojure.core/declare deser-pending-modified-values)

(clojure.core/declare deser-subnet-list)

(clojure.core/declare deser-available-processor-feature)

(clojure.core/declare deser-db-subnet-group)

(clojure.core/declare deser-boolean)

(clojure.core/defn- deser-vpc-security-group-membership-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpc-security-group-membership coll))) input))

(clojure.core/defn- deser-certificate-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-certificate coll))) input))

(clojure.core/defn- deser-pending-maintenance-action [input] (clojure.core/let [letvar491043 {"Action" (portkey.aws/search-for-tag input "Action" :flattened? nil :xmlAttribute? nil), "AutoAppliedAfterDate" (portkey.aws/search-for-tag input "AutoAppliedAfterDate" :flattened? nil :xmlAttribute? nil), "ForcedApplyDate" (portkey.aws/search-for-tag input "ForcedApplyDate" :flattened? nil :xmlAttribute? nil), "OptInStatus" (portkey.aws/search-for-tag input "OptInStatus" :flattened? nil :xmlAttribute? nil), "CurrentApplyDate" (portkey.aws/search-for-tag input "CurrentApplyDate" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar491043 "Action") (clojure.core/assoc :action (deser-string (clojure.core/get-in letvar491043 ["Action" :content]))) (letvar491043 "AutoAppliedAfterDate") (clojure.core/assoc :auto-applied-after-date (deser-t-stamp (clojure.core/get-in letvar491043 ["AutoAppliedAfterDate" :content]))) (letvar491043 "ForcedApplyDate") (clojure.core/assoc :forced-apply-date (deser-t-stamp (clojure.core/get-in letvar491043 ["ForcedApplyDate" :content]))) (letvar491043 "OptInStatus") (clojure.core/assoc :opt-in-status (deser-string (clojure.core/get-in letvar491043 ["OptInStatus" :content]))) (letvar491043 "CurrentApplyDate") (clojure.core/assoc :current-apply-date (deser-t-stamp (clojure.core/get-in letvar491043 ["CurrentApplyDate" :content]))) (letvar491043 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar491043 ["Description" :content]))))))

(clojure.core/defn- deser-read-replica-identifier-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-string-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-double [input] (java.lang.Double. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-parameters-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-parameter coll))) input))

(clojure.core/defn- deser-ec-2-security-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-ec-2-security-group coll))) input))

(clojure.core/defn- deser-double-range [input] (clojure.core/let [letvar491221 {"From" (portkey.aws/search-for-tag input "From" :flattened? nil :xmlAttribute? nil), "To" (portkey.aws/search-for-tag input "To" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar491221 "From") (clojure.core/assoc :from (deser-double (clojure.core/get-in letvar491221 ["From" :content]))) (letvar491221 "To") (clojure.core/assoc :to (deser-double (clojure.core/get-in letvar491221 ["To" :content]))))))

(clojure.core/defn- deser-minimum-engine-version-per-allowed-value [input] (clojure.core/let [letvar491329 {"AllowedValue" (portkey.aws/search-for-tag input "AllowedValue" :flattened? nil :xmlAttribute? nil), "MinimumEngineVersion" (portkey.aws/search-for-tag input "MinimumEngineVersion" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar491329 "AllowedValue") (clojure.core/assoc :allowed-value (deser-string (clojure.core/get-in letvar491329 ["AllowedValue" :content]))) (letvar491329 "MinimumEngineVersion") (clojure.core/assoc :minimum-engine-version (deser-string (clojure.core/get-in letvar491329 ["MinimumEngineVersion" :content]))))))

(clojure.core/defn- deser-db-cluster-role [input] (clojure.core/let [letvar491437 {"RoleArn" (portkey.aws/search-for-tag input "RoleArn" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "FeatureName" (portkey.aws/search-for-tag input "FeatureName" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar491437 "RoleArn") (clojure.core/assoc :role-arn (deser-string (clojure.core/get-in letvar491437 ["RoleArn" :content]))) (letvar491437 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar491437 ["Status" :content]))) (letvar491437 "FeatureName") (clojure.core/assoc :feature-name (deser-string (clojure.core/get-in letvar491437 ["FeatureName" :content]))))))

(clojure.core/defn- deser-pending-maintenance-action-details [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-pending-maintenance-action coll))) input))

(clojure.core/defn- deser-source-region-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-source-region coll))) input))

(clojure.core/defn- deser-db-parameter-group-status [input] (clojure.core/let [letvar491579 {"DBParameterGroupName" (portkey.aws/search-for-tag input "DBParameterGroupName" :flattened? nil :xmlAttribute? nil), "ParameterApplyStatus" (portkey.aws/search-for-tag input "ParameterApplyStatus" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar491579 "DBParameterGroupName") (clojure.core/assoc :db-parameter-group-name (deser-string (clojure.core/get-in letvar491579 ["DBParameterGroupName" :content]))) (letvar491579 "ParameterApplyStatus") (clojure.core/assoc :parameter-apply-status (deser-string (clojure.core/get-in letvar491579 ["ParameterApplyStatus" :content]))))))

(clojure.core/defn- deser-valid-storage-options-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-valid-storage-options coll))) input))

(clojure.core/defn- deser-db-security-groups [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-security-group coll))) input))

(clojure.core/defn- deser-option-version [input] (clojure.core/let [letvar491721 {"Version" (portkey.aws/search-for-tag input "Version" :flattened? nil :xmlAttribute? nil), "IsDefault" (portkey.aws/search-for-tag input "IsDefault" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar491721 "Version") (clojure.core/assoc :version (deser-string (clojure.core/get-in letvar491721 ["Version" :content]))) (letvar491721 "IsDefault") (clojure.core/assoc :is-default (deser-boolean (clojure.core/get-in letvar491721 ["IsDefault" :content]))))))

(clojure.core/defn- deser-double-optional [input] (java.lang.Double. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-minimum-engine-version-per-allowed-value-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-minimum-engine-version-per-allowed-value coll))) input))

(clojure.core/defn- deser-scaling-configuration-info [input] (clojure.core/let [letvar491848 {"MinCapacity" (portkey.aws/search-for-tag input "MinCapacity" :flattened? nil :xmlAttribute? nil), "MaxCapacity" (portkey.aws/search-for-tag input "MaxCapacity" :flattened? nil :xmlAttribute? nil), "AutoPause" (portkey.aws/search-for-tag input "AutoPause" :flattened? nil :xmlAttribute? nil), "SecondsUntilAutoPause" (portkey.aws/search-for-tag input "SecondsUntilAutoPause" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar491848 "MinCapacity") (clojure.core/assoc :min-capacity (deser-integer-optional (clojure.core/get-in letvar491848 ["MinCapacity" :content]))) (letvar491848 "MaxCapacity") (clojure.core/assoc :max-capacity (deser-integer-optional (clojure.core/get-in letvar491848 ["MaxCapacity" :content]))) (letvar491848 "AutoPause") (clojure.core/assoc :auto-pause (deser-boolean-optional (clojure.core/get-in letvar491848 ["AutoPause" :content]))) (letvar491848 "SecondsUntilAutoPause") (clojure.core/assoc :seconds-until-auto-pause (deser-integer-optional (clojure.core/get-in letvar491848 ["SecondsUntilAutoPause" :content]))))))

(clojure.core/defn- deser-source-ids-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-db-snapshot-attribute-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-snapshot-attribute coll))) input))

(clojure.core/defn- deser-source-region [input] (clojure.core/let [letvar491990 {"RegionName" (portkey.aws/search-for-tag input "RegionName" :flattened? nil :xmlAttribute? nil), "Endpoint" (portkey.aws/search-for-tag input "Endpoint" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar491990 "RegionName") (clojure.core/assoc :region-name (deser-string (clojure.core/get-in letvar491990 ["RegionName" :content]))) (letvar491990 "Endpoint") (clojure.core/assoc :endpoint (deser-string (clojure.core/get-in letvar491990 ["Endpoint" :content]))) (letvar491990 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar491990 ["Status" :content]))))))

(clojure.core/defn- deser-options-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-option coll))) input))

(clojure.core/defn- deser-option [input] (clojure.core/let [letvar492115 {"VpcSecurityGroupMemberships" (portkey.aws/search-for-tag input "VpcSecurityGroupMemberships" :flattened? nil :xmlAttribute? nil), "OptionVersion" (portkey.aws/search-for-tag input "OptionVersion" :flattened? nil :xmlAttribute? nil), "DBSecurityGroupMemberships" (portkey.aws/search-for-tag input "DBSecurityGroupMemberships" :flattened? nil :xmlAttribute? nil), "OptionSettings" (portkey.aws/search-for-tag input "OptionSettings" :flattened? nil :xmlAttribute? nil), "Permanent" (portkey.aws/search-for-tag input "Permanent" :flattened? nil :xmlAttribute? nil), "Persistent" (portkey.aws/search-for-tag input "Persistent" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "OptionDescription" (portkey.aws/search-for-tag input "OptionDescription" :flattened? nil :xmlAttribute? nil), "OptionName" (portkey.aws/search-for-tag input "OptionName" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar492115 "VpcSecurityGroupMemberships") (clojure.core/assoc :vpc-security-group-memberships (deser-vpc-security-group-membership-list (clojure.core/get-in letvar492115 ["VpcSecurityGroupMemberships" :content]))) (letvar492115 "OptionVersion") (clojure.core/assoc :option-version (deser-string (clojure.core/get-in letvar492115 ["OptionVersion" :content]))) (letvar492115 "DBSecurityGroupMemberships") (clojure.core/assoc :db-security-group-memberships (deser-db-security-group-membership-list (clojure.core/get-in letvar492115 ["DBSecurityGroupMemberships" :content]))) (letvar492115 "OptionSettings") (clojure.core/assoc :option-settings (deser-option-setting-configuration-list (clojure.core/get-in letvar492115 ["OptionSettings" :content]))) (letvar492115 "Permanent") (clojure.core/assoc :permanent (deser-boolean (clojure.core/get-in letvar492115 ["Permanent" :content]))) (letvar492115 "Persistent") (clojure.core/assoc :persistent (deser-boolean (clojure.core/get-in letvar492115 ["Persistent" :content]))) (letvar492115 "Port") (clojure.core/assoc :port (deser-integer-optional (clojure.core/get-in letvar492115 ["Port" :content]))) (letvar492115 "OptionDescription") (clojure.core/assoc :option-description (deser-string (clojure.core/get-in letvar492115 ["OptionDescription" :content]))) (letvar492115 "OptionName") (clojure.core/assoc :option-name (deser-string (clojure.core/get-in letvar492115 ["OptionName" :content]))))))

(clojure.core/defn- deser-option-group-options-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-option-group-option coll))) input))

(clojure.core/defn- deser-db-parameter-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-parameter-group coll))) input))

(clojure.core/defn- deser-db-parameter-group-status-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-parameter-group-status coll))) input))

(clojure.core/defn- deser-double-range-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-double-range coll))) input))

(clojure.core/defn- deser-pending-maintenance-actions [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-resource-pending-maintenance-actions coll))) input))

(clojure.core/defn- deser-option-group-option-setting [input] (clojure.core/let [letvar492308 {"SettingName" (portkey.aws/search-for-tag input "SettingName" :flattened? nil :xmlAttribute? nil), "SettingDescription" (portkey.aws/search-for-tag input "SettingDescription" :flattened? nil :xmlAttribute? nil), "DefaultValue" (portkey.aws/search-for-tag input "DefaultValue" :flattened? nil :xmlAttribute? nil), "ApplyType" (portkey.aws/search-for-tag input "ApplyType" :flattened? nil :xmlAttribute? nil), "AllowedValues" (portkey.aws/search-for-tag input "AllowedValues" :flattened? nil :xmlAttribute? nil), "IsModifiable" (portkey.aws/search-for-tag input "IsModifiable" :flattened? nil :xmlAttribute? nil), "IsRequired" (portkey.aws/search-for-tag input "IsRequired" :flattened? nil :xmlAttribute? nil), "MinimumEngineVersionPerAllowedValue" (portkey.aws/search-for-tag input "MinimumEngineVersionPerAllowedValue" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar492308 "SettingName") (clojure.core/assoc :setting-name (deser-string (clojure.core/get-in letvar492308 ["SettingName" :content]))) (letvar492308 "SettingDescription") (clojure.core/assoc :setting-description (deser-string (clojure.core/get-in letvar492308 ["SettingDescription" :content]))) (letvar492308 "DefaultValue") (clojure.core/assoc :default-value (deser-string (clojure.core/get-in letvar492308 ["DefaultValue" :content]))) (letvar492308 "ApplyType") (clojure.core/assoc :apply-type (deser-string (clojure.core/get-in letvar492308 ["ApplyType" :content]))) (letvar492308 "AllowedValues") (clojure.core/assoc :allowed-values (deser-string (clojure.core/get-in letvar492308 ["AllowedValues" :content]))) (letvar492308 "IsModifiable") (clojure.core/assoc :is-modifiable (deser-boolean (clojure.core/get-in letvar492308 ["IsModifiable" :content]))) (letvar492308 "IsRequired") (clojure.core/assoc :is-required (deser-boolean (clojure.core/get-in letvar492308 ["IsRequired" :content]))) (letvar492308 "MinimumEngineVersionPerAllowedValue") (clojure.core/assoc :minimum-engine-version-per-allowed-value (deser-minimum-engine-version-per-allowed-value-list (clojure.core/get-in letvar492308 ["MinimumEngineVersionPerAllowedValue" :content]))))))

(clojure.core/defn- deser-subnet [input] (clojure.core/let [letvar492416 {"SubnetIdentifier" (portkey.aws/search-for-tag input "SubnetIdentifier" :flattened? nil :xmlAttribute? nil), "SubnetAvailabilityZone" (portkey.aws/search-for-tag input "SubnetAvailabilityZone" :flattened? nil :xmlAttribute? nil), "SubnetStatus" (portkey.aws/search-for-tag input "SubnetStatus" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar492416 "SubnetIdentifier") (clojure.core/assoc :subnet-identifier (deser-string (clojure.core/get-in letvar492416 ["SubnetIdentifier" :content]))) (letvar492416 "SubnetAvailabilityZone") (clojure.core/assoc :subnet-availability-zone (deser-availability-zone (clojure.core/get-in letvar492416 ["SubnetAvailabilityZone" :content]))) (letvar492416 "SubnetStatus") (clojure.core/assoc :subnet-status (deser-string (clojure.core/get-in letvar492416 ["SubnetStatus" :content]))))))

(clojure.core/defn- deser-db-cluster-snapshot [input] (clojure.core/let [letvar492524 {"SnapshotCreateTime" (portkey.aws/search-for-tag input "SnapshotCreateTime" :flattened? nil :xmlAttribute? nil), "DBClusterSnapshotIdentifier" (portkey.aws/search-for-tag input "DBClusterSnapshotIdentifier" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "SnapshotType" (portkey.aws/search-for-tag input "SnapshotType" :flattened? nil :xmlAttribute? nil), "LicenseModel" (portkey.aws/search-for-tag input "LicenseModel" :flattened? nil :xmlAttribute? nil), "AllocatedStorage" (portkey.aws/search-for-tag input "AllocatedStorage" :flattened? nil :xmlAttribute? nil), "MasterUsername" (portkey.aws/search-for-tag input "MasterUsername" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "StorageEncrypted" (portkey.aws/search-for-tag input "StorageEncrypted" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "VpcId" (portkey.aws/search-for-tag input "VpcId" :flattened? nil :xmlAttribute? nil), "KmsKeyId" (portkey.aws/search-for-tag input "KmsKeyId" :flattened? nil :xmlAttribute? nil), "ClusterCreateTime" (portkey.aws/search-for-tag input "ClusterCreateTime" :flattened? nil :xmlAttribute? nil), "IAMDatabaseAuthenticationEnabled" (portkey.aws/search-for-tag input "IAMDatabaseAuthenticationEnabled" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "SourceDBClusterSnapshotArn" (portkey.aws/search-for-tag input "SourceDBClusterSnapshotArn" :flattened? nil :xmlAttribute? nil), "AvailabilityZones" (portkey.aws/search-for-tag input "AvailabilityZones" :flattened? nil :xmlAttribute? nil), "DBClusterIdentifier" (portkey.aws/search-for-tag input "DBClusterIdentifier" :flattened? nil :xmlAttribute? nil), "DBClusterSnapshotArn" (portkey.aws/search-for-tag input "DBClusterSnapshotArn" :flattened? nil :xmlAttribute? nil), "PercentProgress" (portkey.aws/search-for-tag input "PercentProgress" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar492524 "SnapshotCreateTime") (clojure.core/assoc :snapshot-create-time (deser-t-stamp (clojure.core/get-in letvar492524 ["SnapshotCreateTime" :content]))) (letvar492524 "DBClusterSnapshotIdentifier") (clojure.core/assoc :db-cluster-snapshot-identifier (deser-string (clojure.core/get-in letvar492524 ["DBClusterSnapshotIdentifier" :content]))) (letvar492524 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar492524 ["Status" :content]))) (letvar492524 "SnapshotType") (clojure.core/assoc :snapshot-type (deser-string (clojure.core/get-in letvar492524 ["SnapshotType" :content]))) (letvar492524 "LicenseModel") (clojure.core/assoc :license-model (deser-string (clojure.core/get-in letvar492524 ["LicenseModel" :content]))) (letvar492524 "AllocatedStorage") (clojure.core/assoc :allocated-storage (deser-integer (clojure.core/get-in letvar492524 ["AllocatedStorage" :content]))) (letvar492524 "MasterUsername") (clojure.core/assoc :master-username (deser-string (clojure.core/get-in letvar492524 ["MasterUsername" :content]))) (letvar492524 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar492524 ["EngineVersion" :content]))) (letvar492524 "StorageEncrypted") (clojure.core/assoc :storage-encrypted (deser-boolean (clojure.core/get-in letvar492524 ["StorageEncrypted" :content]))) (letvar492524 "Port") (clojure.core/assoc :port (deser-integer (clojure.core/get-in letvar492524 ["Port" :content]))) (letvar492524 "VpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar492524 ["VpcId" :content]))) (letvar492524 "KmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar492524 ["KmsKeyId" :content]))) (letvar492524 "ClusterCreateTime") (clojure.core/assoc :cluster-create-time (deser-t-stamp (clojure.core/get-in letvar492524 ["ClusterCreateTime" :content]))) (letvar492524 "IAMDatabaseAuthenticationEnabled") (clojure.core/assoc :iam-database-authentication-enabled (deser-boolean (clojure.core/get-in letvar492524 ["IAMDatabaseAuthenticationEnabled" :content]))) (letvar492524 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar492524 ["Engine" :content]))) (letvar492524 "SourceDBClusterSnapshotArn") (clojure.core/assoc :source-db-cluster-snapshot-arn (deser-string (clojure.core/get-in letvar492524 ["SourceDBClusterSnapshotArn" :content]))) (letvar492524 "AvailabilityZones") (clojure.core/assoc :availability-zones (deser-availability-zones (clojure.core/get-in letvar492524 ["AvailabilityZones" :content]))) (letvar492524 "DBClusterIdentifier") (clojure.core/assoc :db-cluster-identifier (deser-string (clojure.core/get-in letvar492524 ["DBClusterIdentifier" :content]))) (letvar492524 "DBClusterSnapshotArn") (clojure.core/assoc :db-cluster-snapshot-arn (deser-string (clojure.core/get-in letvar492524 ["DBClusterSnapshotArn" :content]))) (letvar492524 "PercentProgress") (clojure.core/assoc :percent-progress (deser-integer (clojure.core/get-in letvar492524 ["PercentProgress" :content]))))))

(clojure.core/defn- deser-pending-cloudwatch-logs-exports [input] (clojure.core/let [letvar492632 {"LogTypesToEnable" (portkey.aws/search-for-tag input "LogTypesToEnable" :flattened? nil :xmlAttribute? nil), "LogTypesToDisable" (portkey.aws/search-for-tag input "LogTypesToDisable" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar492632 "LogTypesToEnable") (clojure.core/assoc :log-types-to-enable (deser-log-type-list (clojure.core/get-in letvar492632 ["LogTypesToEnable" :content]))) (letvar492632 "LogTypesToDisable") (clojure.core/assoc :log-types-to-disable (deser-log-type-list (clojure.core/get-in letvar492632 ["LogTypesToDisable" :content]))))))

(clojure.core/defn- deser-db-cluster-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster coll))) input))

(clojure.core/defn- deser-db-cluster-backtrack-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-backtrack coll))) input))

(clojure.core/defn- deser-db-engine-version-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-engine-version coll))) input))

(clojure.core/defn- deser-event-subscription [input] (clojure.core/let [letvar492791 {"SourceIdsList" (portkey.aws/search-for-tag input "SourceIdsList" :flattened? nil :xmlAttribute? nil), "EventSubscriptionArn" (portkey.aws/search-for-tag input "EventSubscriptionArn" :flattened? nil :xmlAttribute? nil), "CustomerAwsId" (portkey.aws/search-for-tag input "CustomerAwsId" :flattened? nil :xmlAttribute? nil), "SourceType" (portkey.aws/search-for-tag input "SourceType" :flattened? nil :xmlAttribute? nil), "Enabled" (portkey.aws/search-for-tag input "Enabled" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "SnsTopicArn" (portkey.aws/search-for-tag input "SnsTopicArn" :flattened? nil :xmlAttribute? nil), "EventCategoriesList" (portkey.aws/search-for-tag input "EventCategoriesList" :flattened? nil :xmlAttribute? nil), "CustSubscriptionId" (portkey.aws/search-for-tag input "CustSubscriptionId" :flattened? nil :xmlAttribute? nil), "SubscriptionCreationTime" (portkey.aws/search-for-tag input "SubscriptionCreationTime" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar492791 "SourceIdsList") (clojure.core/assoc :source-ids-list (deser-source-ids-list (clojure.core/get-in letvar492791 ["SourceIdsList" :content]))) (letvar492791 "EventSubscriptionArn") (clojure.core/assoc :event-subscription-arn (deser-string (clojure.core/get-in letvar492791 ["EventSubscriptionArn" :content]))) (letvar492791 "CustomerAwsId") (clojure.core/assoc :customer-aws-id (deser-string (clojure.core/get-in letvar492791 ["CustomerAwsId" :content]))) (letvar492791 "SourceType") (clojure.core/assoc :source-type (deser-string (clojure.core/get-in letvar492791 ["SourceType" :content]))) (letvar492791 "Enabled") (clojure.core/assoc :enabled (deser-boolean (clojure.core/get-in letvar492791 ["Enabled" :content]))) (letvar492791 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar492791 ["Status" :content]))) (letvar492791 "SnsTopicArn") (clojure.core/assoc :sns-topic-arn (deser-string (clojure.core/get-in letvar492791 ["SnsTopicArn" :content]))) (letvar492791 "EventCategoriesList") (clojure.core/assoc :event-categories-list (deser-event-categories-list (clojure.core/get-in letvar492791 ["EventCategoriesList" :content]))) (letvar492791 "CustSubscriptionId") (clojure.core/assoc :cust-subscription-id (deser-string (clojure.core/get-in letvar492791 ["CustSubscriptionId" :content]))) (letvar492791 "SubscriptionCreationTime") (clojure.core/assoc :subscription-creation-time (deser-string (clojure.core/get-in letvar492791 ["SubscriptionCreationTime" :content]))))))

(clojure.core/defn- deser-db-snapshot [input] (clojure.core/let [letvar492899 {"SnapshotCreateTime" (portkey.aws/search-for-tag input "SnapshotCreateTime" :flattened? nil :xmlAttribute? nil), "OptionGroupName" (portkey.aws/search-for-tag input "OptionGroupName" :flattened? nil :xmlAttribute? nil), "SourceRegion" (portkey.aws/search-for-tag input "SourceRegion" :flattened? nil :xmlAttribute? nil), "SourceDBSnapshotIdentifier" (portkey.aws/search-for-tag input "SourceDBSnapshotIdentifier" :flattened? nil :xmlAttribute? nil), "Encrypted" (portkey.aws/search-for-tag input "Encrypted" :flattened? nil :xmlAttribute? nil), "DBInstanceIdentifier" (portkey.aws/search-for-tag input "DBInstanceIdentifier" :flattened? nil :xmlAttribute? nil), "InstanceCreateTime" (portkey.aws/search-for-tag input "InstanceCreateTime" :flattened? nil :xmlAttribute? nil), "AvailabilityZone" (portkey.aws/search-for-tag input "AvailabilityZone" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "SnapshotType" (portkey.aws/search-for-tag input "SnapshotType" :flattened? nil :xmlAttribute? nil), "LicenseModel" (portkey.aws/search-for-tag input "LicenseModel" :flattened? nil :xmlAttribute? nil), "AllocatedStorage" (portkey.aws/search-for-tag input "AllocatedStorage" :flattened? nil :xmlAttribute? nil), "Timezone" (portkey.aws/search-for-tag input "Timezone" :flattened? nil :xmlAttribute? nil), "MasterUsername" (portkey.aws/search-for-tag input "MasterUsername" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "DBSnapshotIdentifier" (portkey.aws/search-for-tag input "DBSnapshotIdentifier" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "VpcId" (portkey.aws/search-for-tag input "VpcId" :flattened? nil :xmlAttribute? nil), "KmsKeyId" (portkey.aws/search-for-tag input "KmsKeyId" :flattened? nil :xmlAttribute? nil), "DbiResourceId" (portkey.aws/search-for-tag input "DbiResourceId" :flattened? nil :xmlAttribute? nil), "Iops" (portkey.aws/search-for-tag input "Iops" :flattened? nil :xmlAttribute? nil), "StorageType" (portkey.aws/search-for-tag input "StorageType" :flattened? nil :xmlAttribute? nil), "ProcessorFeatures" (portkey.aws/search-for-tag input "ProcessorFeatures" :flattened? nil :xmlAttribute? nil), "IAMDatabaseAuthenticationEnabled" (portkey.aws/search-for-tag input "IAMDatabaseAuthenticationEnabled" :flattened? nil :xmlAttribute? nil), "DBSnapshotArn" (portkey.aws/search-for-tag input "DBSnapshotArn" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "TdeCredentialArn" (portkey.aws/search-for-tag input "TdeCredentialArn" :flattened? nil :xmlAttribute? nil), "PercentProgress" (portkey.aws/search-for-tag input "PercentProgress" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar492899 "SnapshotCreateTime") (clojure.core/assoc :snapshot-create-time (deser-t-stamp (clojure.core/get-in letvar492899 ["SnapshotCreateTime" :content]))) (letvar492899 "OptionGroupName") (clojure.core/assoc :option-group-name (deser-string (clojure.core/get-in letvar492899 ["OptionGroupName" :content]))) (letvar492899 "SourceRegion") (clojure.core/assoc :source-region (deser-string (clojure.core/get-in letvar492899 ["SourceRegion" :content]))) (letvar492899 "SourceDBSnapshotIdentifier") (clojure.core/assoc :source-db-snapshot-identifier (deser-string (clojure.core/get-in letvar492899 ["SourceDBSnapshotIdentifier" :content]))) (letvar492899 "Encrypted") (clojure.core/assoc :encrypted (deser-boolean (clojure.core/get-in letvar492899 ["Encrypted" :content]))) (letvar492899 "DBInstanceIdentifier") (clojure.core/assoc :db-instance-identifier (deser-string (clojure.core/get-in letvar492899 ["DBInstanceIdentifier" :content]))) (letvar492899 "InstanceCreateTime") (clojure.core/assoc :instance-create-time (deser-t-stamp (clojure.core/get-in letvar492899 ["InstanceCreateTime" :content]))) (letvar492899 "AvailabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar492899 ["AvailabilityZone" :content]))) (letvar492899 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar492899 ["Status" :content]))) (letvar492899 "SnapshotType") (clojure.core/assoc :snapshot-type (deser-string (clojure.core/get-in letvar492899 ["SnapshotType" :content]))) (letvar492899 "LicenseModel") (clojure.core/assoc :license-model (deser-string (clojure.core/get-in letvar492899 ["LicenseModel" :content]))) (letvar492899 "AllocatedStorage") (clojure.core/assoc :allocated-storage (deser-integer (clojure.core/get-in letvar492899 ["AllocatedStorage" :content]))) (letvar492899 "Timezone") (clojure.core/assoc :timezone (deser-string (clojure.core/get-in letvar492899 ["Timezone" :content]))) (letvar492899 "MasterUsername") (clojure.core/assoc :master-username (deser-string (clojure.core/get-in letvar492899 ["MasterUsername" :content]))) (letvar492899 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar492899 ["EngineVersion" :content]))) (letvar492899 "DBSnapshotIdentifier") (clojure.core/assoc :db-snapshot-identifier (deser-string (clojure.core/get-in letvar492899 ["DBSnapshotIdentifier" :content]))) (letvar492899 "Port") (clojure.core/assoc :port (deser-integer (clojure.core/get-in letvar492899 ["Port" :content]))) (letvar492899 "VpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar492899 ["VpcId" :content]))) (letvar492899 "KmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar492899 ["KmsKeyId" :content]))) (letvar492899 "DbiResourceId") (clojure.core/assoc :dbi-resource-id (deser-string (clojure.core/get-in letvar492899 ["DbiResourceId" :content]))) (letvar492899 "Iops") (clojure.core/assoc :iops (deser-integer-optional (clojure.core/get-in letvar492899 ["Iops" :content]))) (letvar492899 "StorageType") (clojure.core/assoc :storage-type (deser-string (clojure.core/get-in letvar492899 ["StorageType" :content]))) (letvar492899 "ProcessorFeatures") (clojure.core/assoc :processor-features (deser-processor-feature-list (clojure.core/get-in letvar492899 ["ProcessorFeatures" :content]))) (letvar492899 "IAMDatabaseAuthenticationEnabled") (clojure.core/assoc :iam-database-authentication-enabled (deser-boolean (clojure.core/get-in letvar492899 ["IAMDatabaseAuthenticationEnabled" :content]))) (letvar492899 "DBSnapshotArn") (clojure.core/assoc :db-snapshot-arn (deser-string (clojure.core/get-in letvar492899 ["DBSnapshotArn" :content]))) (letvar492899 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar492899 ["Engine" :content]))) (letvar492899 "TdeCredentialArn") (clojure.core/assoc :tde-credential-arn (deser-string (clojure.core/get-in letvar492899 ["TdeCredentialArn" :content]))) (letvar492899 "PercentProgress") (clojure.core/assoc :percent-progress (deser-integer (clojure.core/get-in letvar492899 ["PercentProgress" :content]))))))

(clojure.core/defn- deser-describe-db-log-files-details [input] (clojure.core/let [letvar493007 {"LogFileName" (portkey.aws/search-for-tag input "LogFileName" :flattened? nil :xmlAttribute? nil), "LastWritten" (portkey.aws/search-for-tag input "LastWritten" :flattened? nil :xmlAttribute? nil), "Size" (portkey.aws/search-for-tag input "Size" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar493007 "LogFileName") (clojure.core/assoc :log-file-name (deser-string (clojure.core/get-in letvar493007 ["LogFileName" :content]))) (letvar493007 "LastWritten") (clojure.core/assoc :last-written (deser-long (clojure.core/get-in letvar493007 ["LastWritten" :content]))) (letvar493007 "Size") (clojure.core/assoc :size (deser-long (clojure.core/get-in letvar493007 ["Size" :content]))))))

(clojure.core/defn- deser-db-cluster-member [input] (clojure.core/let [letvar493115 {"DBInstanceIdentifier" (portkey.aws/search-for-tag input "DBInstanceIdentifier" :flattened? nil :xmlAttribute? nil), "IsClusterWriter" (portkey.aws/search-for-tag input "IsClusterWriter" :flattened? nil :xmlAttribute? nil), "DBClusterParameterGroupStatus" (portkey.aws/search-for-tag input "DBClusterParameterGroupStatus" :flattened? nil :xmlAttribute? nil), "PromotionTier" (portkey.aws/search-for-tag input "PromotionTier" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar493115 "DBInstanceIdentifier") (clojure.core/assoc :db-instance-identifier (deser-string (clojure.core/get-in letvar493115 ["DBInstanceIdentifier" :content]))) (letvar493115 "IsClusterWriter") (clojure.core/assoc :is-cluster-writer (deser-boolean (clojure.core/get-in letvar493115 ["IsClusterWriter" :content]))) (letvar493115 "DBClusterParameterGroupStatus") (clojure.core/assoc :db-cluster-parameter-group-status (deser-string (clojure.core/get-in letvar493115 ["DBClusterParameterGroupStatus" :content]))) (letvar493115 "PromotionTier") (clojure.core/assoc :promotion-tier (deser-integer-optional (clojure.core/get-in letvar493115 ["PromotionTier" :content]))))))

(clojure.core/defn- deser-db-snapshot-attributes-result [input] (clojure.core/let [letvar493223 {"DBSnapshotIdentifier" (portkey.aws/search-for-tag input "DBSnapshotIdentifier" :flattened? nil :xmlAttribute? nil), "DBSnapshotAttributes" (portkey.aws/search-for-tag input "DBSnapshotAttributes" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar493223 "DBSnapshotIdentifier") (clojure.core/assoc :db-snapshot-identifier (deser-string (clojure.core/get-in letvar493223 ["DBSnapshotIdentifier" :content]))) (letvar493223 "DBSnapshotAttributes") (clojure.core/assoc :db-snapshot-attributes (deser-db-snapshot-attribute-list (clojure.core/get-in letvar493223 ["DBSnapshotAttributes" :content]))))))

(clojure.core/defn- deser-db-cluster-backtrack [input] (clojure.core/let [letvar493331 {"DBClusterIdentifier" (portkey.aws/search-for-tag input "DBClusterIdentifier" :flattened? nil :xmlAttribute? nil), "BacktrackIdentifier" (portkey.aws/search-for-tag input "BacktrackIdentifier" :flattened? nil :xmlAttribute? nil), "BacktrackTo" (portkey.aws/search-for-tag input "BacktrackTo" :flattened? nil :xmlAttribute? nil), "BacktrackedFrom" (portkey.aws/search-for-tag input "BacktrackedFrom" :flattened? nil :xmlAttribute? nil), "BacktrackRequestCreationTime" (portkey.aws/search-for-tag input "BacktrackRequestCreationTime" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar493331 "DBClusterIdentifier") (clojure.core/assoc :db-cluster-identifier (deser-string (clojure.core/get-in letvar493331 ["DBClusterIdentifier" :content]))) (letvar493331 "BacktrackIdentifier") (clojure.core/assoc :backtrack-identifier (deser-string (clojure.core/get-in letvar493331 ["BacktrackIdentifier" :content]))) (letvar493331 "BacktrackTo") (clojure.core/assoc :backtrack-to (deser-t-stamp (clojure.core/get-in letvar493331 ["BacktrackTo" :content]))) (letvar493331 "BacktrackedFrom") (clojure.core/assoc :backtracked-from (deser-t-stamp (clojure.core/get-in letvar493331 ["BacktrackedFrom" :content]))) (letvar493331 "BacktrackRequestCreationTime") (clojure.core/assoc :backtrack-request-creation-time (deser-t-stamp (clojure.core/get-in letvar493331 ["BacktrackRequestCreationTime" :content]))) (letvar493331 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar493331 ["Status" :content]))))))

(clojure.core/defn- deser-reserved-db-instance-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-db-instance coll))) input))

(clojure.core/defn- deser-resource-pending-maintenance-actions [input] (clojure.core/let [letvar493456 {"ResourceIdentifier" (portkey.aws/search-for-tag input "ResourceIdentifier" :flattened? nil :xmlAttribute? nil), "PendingMaintenanceActionDetails" (portkey.aws/search-for-tag input "PendingMaintenanceActionDetails" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar493456 "ResourceIdentifier") (clojure.core/assoc :resource-identifier (deser-string (clojure.core/get-in letvar493456 ["ResourceIdentifier" :content]))) (letvar493456 "PendingMaintenanceActionDetails") (clojure.core/assoc :pending-maintenance-action-details (deser-pending-maintenance-action-details (clojure.core/get-in letvar493456 ["PendingMaintenanceActionDetails" :content]))))))

(clojure.core/defn- deser-global-cluster [input] (clojure.core/let [letvar493564 {"DeletionProtection" (portkey.aws/search-for-tag input "DeletionProtection" :flattened? nil :xmlAttribute? nil), "GlobalClusterArn" (portkey.aws/search-for-tag input "GlobalClusterArn" :flattened? nil :xmlAttribute? nil), "DatabaseName" (portkey.aws/search-for-tag input "DatabaseName" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "StorageEncrypted" (portkey.aws/search-for-tag input "StorageEncrypted" :flattened? nil :xmlAttribute? nil), "GlobalClusterIdentifier" (portkey.aws/search-for-tag input "GlobalClusterIdentifier" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "GlobalClusterMembers" (portkey.aws/search-for-tag input "GlobalClusterMembers" :flattened? nil :xmlAttribute? nil), "GlobalClusterResourceId" (portkey.aws/search-for-tag input "GlobalClusterResourceId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar493564 "DeletionProtection") (clojure.core/assoc :deletion-protection (deser-boolean-optional (clojure.core/get-in letvar493564 ["DeletionProtection" :content]))) (letvar493564 "GlobalClusterArn") (clojure.core/assoc :global-cluster-arn (deser-string (clojure.core/get-in letvar493564 ["GlobalClusterArn" :content]))) (letvar493564 "DatabaseName") (clojure.core/assoc :database-name (deser-string (clojure.core/get-in letvar493564 ["DatabaseName" :content]))) (letvar493564 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar493564 ["Status" :content]))) (letvar493564 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar493564 ["EngineVersion" :content]))) (letvar493564 "StorageEncrypted") (clojure.core/assoc :storage-encrypted (deser-boolean-optional (clojure.core/get-in letvar493564 ["StorageEncrypted" :content]))) (letvar493564 "GlobalClusterIdentifier") (clojure.core/assoc :global-cluster-identifier (deser-string (clojure.core/get-in letvar493564 ["GlobalClusterIdentifier" :content]))) (letvar493564 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar493564 ["Engine" :content]))) (letvar493564 "GlobalClusterMembers") (clojure.core/assoc :global-cluster-members (deser-global-cluster-member-list (clojure.core/get-in letvar493564 ["GlobalClusterMembers" :content]))) (letvar493564 "GlobalClusterResourceId") (clojure.core/assoc :global-cluster-resource-id (deser-string (clojure.core/get-in letvar493564 ["GlobalClusterResourceId" :content]))))))

(clojure.core/defn- deser-db-cluster [input] (clojure.core/let [letvar493672 {"DeletionProtection" (portkey.aws/search-for-tag input "DeletionProtection" :flattened? nil :xmlAttribute? nil), "BackupRetentionPeriod" (portkey.aws/search-for-tag input "BackupRetentionPeriod" :flattened? nil :xmlAttribute? nil), "ReplicationSourceIdentifier" (portkey.aws/search-for-tag input "ReplicationSourceIdentifier" :flattened? nil :xmlAttribute? nil), "EarliestRestorableTime" (portkey.aws/search-for-tag input "EarliestRestorableTime" :flattened? nil :xmlAttribute? nil), "CharacterSetName" (portkey.aws/search-for-tag input "CharacterSetName" :flattened? nil :xmlAttribute? nil), "ScalingConfigurationInfo" (portkey.aws/search-for-tag input "ScalingConfigurationInfo" :flattened? nil :xmlAttribute? nil), "DatabaseName" (portkey.aws/search-for-tag input "DatabaseName" :flattened? nil :xmlAttribute? nil), "CustomEndpoints" (portkey.aws/search-for-tag input "CustomEndpoints" :flattened? nil :xmlAttribute? nil), "PreferredMaintenanceWindow" (portkey.aws/search-for-tag input "PreferredMaintenanceWindow" :flattened? nil :xmlAttribute? nil), "EngineMode" (portkey.aws/search-for-tag input "EngineMode" :flattened? nil :xmlAttribute? nil), "CloneGroupId" (portkey.aws/search-for-tag input "CloneGroupId" :flattened? nil :xmlAttribute? nil), "EnabledCloudwatchLogsExports" (portkey.aws/search-for-tag input "EnabledCloudwatchLogsExports" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "AllocatedStorage" (portkey.aws/search-for-tag input "AllocatedStorage" :flattened? nil :xmlAttribute? nil), "MasterUsername" (portkey.aws/search-for-tag input "MasterUsername" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "HostedZoneId" (portkey.aws/search-for-tag input "HostedZoneId" :flattened? nil :xmlAttribute? nil), "StorageEncrypted" (portkey.aws/search-for-tag input "StorageEncrypted" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "DbClusterResourceId" (portkey.aws/search-for-tag input "DbClusterResourceId" :flattened? nil :xmlAttribute? nil), "DBClusterMembers" (portkey.aws/search-for-tag input "DBClusterMembers" :flattened? nil :xmlAttribute? nil), "KmsKeyId" (portkey.aws/search-for-tag input "KmsKeyId" :flattened? nil :xmlAttribute? nil), "ClusterCreateTime" (portkey.aws/search-for-tag input "ClusterCreateTime" :flattened? nil :xmlAttribute? nil), "Capacity" (portkey.aws/search-for-tag input "Capacity" :flattened? nil :xmlAttribute? nil), "BacktrackWindow" (portkey.aws/search-for-tag input "BacktrackWindow" :flattened? nil :xmlAttribute? nil), "ReadReplicaIdentifiers" (portkey.aws/search-for-tag input "ReadReplicaIdentifiers" :flattened? nil :xmlAttribute? nil), "DBClusterParameterGroup" (portkey.aws/search-for-tag input "DBClusterParameterGroup" :flattened? nil :xmlAttribute? nil), "Endpoint" (portkey.aws/search-for-tag input "Endpoint" :flattened? nil :xmlAttribute? nil), "IAMDatabaseAuthenticationEnabled" (portkey.aws/search-for-tag input "IAMDatabaseAuthenticationEnabled" :flattened? nil :xmlAttribute? nil), "DBClusterArn" (portkey.aws/search-for-tag input "DBClusterArn" :flattened? nil :xmlAttribute? nil), "VpcSecurityGroups" (portkey.aws/search-for-tag input "VpcSecurityGroups" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "EarliestBacktrackTime" (portkey.aws/search-for-tag input "EarliestBacktrackTime" :flattened? nil :xmlAttribute? nil), "DBClusterOptionGroupMemberships" (portkey.aws/search-for-tag input "DBClusterOptionGroupMemberships" :flattened? nil :xmlAttribute? nil), "AvailabilityZones" (portkey.aws/search-for-tag input "AvailabilityZones" :flattened? nil :xmlAttribute? nil), "ReaderEndpoint" (portkey.aws/search-for-tag input "ReaderEndpoint" :flattened? nil :xmlAttribute? nil), "AssociatedRoles" (portkey.aws/search-for-tag input "AssociatedRoles" :flattened? nil :xmlAttribute? nil), "BacktrackConsumedChangeRecords" (portkey.aws/search-for-tag input "BacktrackConsumedChangeRecords" :flattened? nil :xmlAttribute? nil), "MultiAZ" (portkey.aws/search-for-tag input "MultiAZ" :flattened? nil :xmlAttribute? nil), "DBClusterIdentifier" (portkey.aws/search-for-tag input "DBClusterIdentifier" :flattened? nil :xmlAttribute? nil), "PreferredBackupWindow" (portkey.aws/search-for-tag input "PreferredBackupWindow" :flattened? nil :xmlAttribute? nil), "PercentProgress" (portkey.aws/search-for-tag input "PercentProgress" :flattened? nil :xmlAttribute? nil), "HttpEndpointEnabled" (portkey.aws/search-for-tag input "HttpEndpointEnabled" :flattened? nil :xmlAttribute? nil), "LatestRestorableTime" (portkey.aws/search-for-tag input "LatestRestorableTime" :flattened? nil :xmlAttribute? nil), "DBSubnetGroup" (portkey.aws/search-for-tag input "DBSubnetGroup" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar493672 "DeletionProtection") (clojure.core/assoc :deletion-protection (deser-boolean (clojure.core/get-in letvar493672 ["DeletionProtection" :content]))) (letvar493672 "BackupRetentionPeriod") (clojure.core/assoc :backup-retention-period (deser-integer-optional (clojure.core/get-in letvar493672 ["BackupRetentionPeriod" :content]))) (letvar493672 "ReplicationSourceIdentifier") (clojure.core/assoc :replication-source-identifier (deser-string (clojure.core/get-in letvar493672 ["ReplicationSourceIdentifier" :content]))) (letvar493672 "EarliestRestorableTime") (clojure.core/assoc :earliest-restorable-time (deser-t-stamp (clojure.core/get-in letvar493672 ["EarliestRestorableTime" :content]))) (letvar493672 "CharacterSetName") (clojure.core/assoc :character-set-name (deser-string (clojure.core/get-in letvar493672 ["CharacterSetName" :content]))) (letvar493672 "ScalingConfigurationInfo") (clojure.core/assoc :scaling-configuration-info (deser-scaling-configuration-info (clojure.core/get-in letvar493672 ["ScalingConfigurationInfo" :content]))) (letvar493672 "DatabaseName") (clojure.core/assoc :database-name (deser-string (clojure.core/get-in letvar493672 ["DatabaseName" :content]))) (letvar493672 "CustomEndpoints") (clojure.core/assoc :custom-endpoints (deser-string-list (clojure.core/get-in letvar493672 ["CustomEndpoints" :content]))) (letvar493672 "PreferredMaintenanceWindow") (clojure.core/assoc :preferred-maintenance-window (deser-string (clojure.core/get-in letvar493672 ["PreferredMaintenanceWindow" :content]))) (letvar493672 "EngineMode") (clojure.core/assoc :engine-mode (deser-string (clojure.core/get-in letvar493672 ["EngineMode" :content]))) (letvar493672 "CloneGroupId") (clojure.core/assoc :clone-group-id (deser-string (clojure.core/get-in letvar493672 ["CloneGroupId" :content]))) (letvar493672 "EnabledCloudwatchLogsExports") (clojure.core/assoc :enabled-cloudwatch-logs-exports (deser-log-type-list (clojure.core/get-in letvar493672 ["EnabledCloudwatchLogsExports" :content]))) (letvar493672 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar493672 ["Status" :content]))) (letvar493672 "AllocatedStorage") (clojure.core/assoc :allocated-storage (deser-integer-optional (clojure.core/get-in letvar493672 ["AllocatedStorage" :content]))) (letvar493672 "MasterUsername") (clojure.core/assoc :master-username (deser-string (clojure.core/get-in letvar493672 ["MasterUsername" :content]))) (letvar493672 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar493672 ["EngineVersion" :content]))) (letvar493672 "HostedZoneId") (clojure.core/assoc :hosted-zone-id (deser-string (clojure.core/get-in letvar493672 ["HostedZoneId" :content]))) (letvar493672 "StorageEncrypted") (clojure.core/assoc :storage-encrypted (deser-boolean (clojure.core/get-in letvar493672 ["StorageEncrypted" :content]))) (letvar493672 "Port") (clojure.core/assoc :port (deser-integer-optional (clojure.core/get-in letvar493672 ["Port" :content]))) (letvar493672 "DbClusterResourceId") (clojure.core/assoc :db-cluster-resource-id (deser-string (clojure.core/get-in letvar493672 ["DbClusterResourceId" :content]))) (letvar493672 "DBClusterMembers") (clojure.core/assoc :db-cluster-members (deser-db-cluster-member-list (clojure.core/get-in letvar493672 ["DBClusterMembers" :content]))) (letvar493672 "KmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar493672 ["KmsKeyId" :content]))) (letvar493672 "ClusterCreateTime") (clojure.core/assoc :cluster-create-time (deser-t-stamp (clojure.core/get-in letvar493672 ["ClusterCreateTime" :content]))) (letvar493672 "Capacity") (clojure.core/assoc :capacity (deser-integer-optional (clojure.core/get-in letvar493672 ["Capacity" :content]))) (letvar493672 "BacktrackWindow") (clojure.core/assoc :backtrack-window (deser-long-optional (clojure.core/get-in letvar493672 ["BacktrackWindow" :content]))) (letvar493672 "ReadReplicaIdentifiers") (clojure.core/assoc :read-replica-identifiers (deser-read-replica-identifier-list (clojure.core/get-in letvar493672 ["ReadReplicaIdentifiers" :content]))) (letvar493672 "DBClusterParameterGroup") (clojure.core/assoc :db-cluster-parameter-group (deser-string (clojure.core/get-in letvar493672 ["DBClusterParameterGroup" :content]))) (letvar493672 "Endpoint") (clojure.core/assoc :endpoint (deser-string (clojure.core/get-in letvar493672 ["Endpoint" :content]))) (letvar493672 "IAMDatabaseAuthenticationEnabled") (clojure.core/assoc :iam-database-authentication-enabled (deser-boolean (clojure.core/get-in letvar493672 ["IAMDatabaseAuthenticationEnabled" :content]))) (letvar493672 "DBClusterArn") (clojure.core/assoc :db-cluster-arn (deser-string (clojure.core/get-in letvar493672 ["DBClusterArn" :content]))) (letvar493672 "VpcSecurityGroups") (clojure.core/assoc :vpc-security-groups (deser-vpc-security-group-membership-list (clojure.core/get-in letvar493672 ["VpcSecurityGroups" :content]))) (letvar493672 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar493672 ["Engine" :content]))) (letvar493672 "EarliestBacktrackTime") (clojure.core/assoc :earliest-backtrack-time (deser-t-stamp (clojure.core/get-in letvar493672 ["EarliestBacktrackTime" :content]))) (letvar493672 "DBClusterOptionGroupMemberships") (clojure.core/assoc :db-cluster-option-group-memberships (deser-db-cluster-option-group-memberships (clojure.core/get-in letvar493672 ["DBClusterOptionGroupMemberships" :content]))) (letvar493672 "AvailabilityZones") (clojure.core/assoc :availability-zones (deser-availability-zones (clojure.core/get-in letvar493672 ["AvailabilityZones" :content]))) (letvar493672 "ReaderEndpoint") (clojure.core/assoc :reader-endpoint (deser-string (clojure.core/get-in letvar493672 ["ReaderEndpoint" :content]))) (letvar493672 "AssociatedRoles") (clojure.core/assoc :associated-roles (deser-db-cluster-roles (clojure.core/get-in letvar493672 ["AssociatedRoles" :content]))) (letvar493672 "BacktrackConsumedChangeRecords") (clojure.core/assoc :backtrack-consumed-change-records (deser-long-optional (clojure.core/get-in letvar493672 ["BacktrackConsumedChangeRecords" :content]))) (letvar493672 "MultiAZ") (clojure.core/assoc :multi-az (deser-boolean (clojure.core/get-in letvar493672 ["MultiAZ" :content]))) (letvar493672 "DBClusterIdentifier") (clojure.core/assoc :db-cluster-identifier (deser-string (clojure.core/get-in letvar493672 ["DBClusterIdentifier" :content]))) (letvar493672 "PreferredBackupWindow") (clojure.core/assoc :preferred-backup-window (deser-string (clojure.core/get-in letvar493672 ["PreferredBackupWindow" :content]))) (letvar493672 "PercentProgress") (clojure.core/assoc :percent-progress (deser-string (clojure.core/get-in letvar493672 ["PercentProgress" :content]))) (letvar493672 "HttpEndpointEnabled") (clojure.core/assoc :http-endpoint-enabled (deser-boolean (clojure.core/get-in letvar493672 ["HttpEndpointEnabled" :content]))) (letvar493672 "LatestRestorableTime") (clojure.core/assoc :latest-restorable-time (deser-t-stamp (clojure.core/get-in letvar493672 ["LatestRestorableTime" :content]))) (letvar493672 "DBSubnetGroup") (clojure.core/assoc :db-subnet-group (deser-string (clojure.core/get-in letvar493672 ["DBSubnetGroup" :content]))))))

(clojure.core/defn- deser-option-group [input] (clojure.core/let [letvar493780 {"OptionGroupName" (portkey.aws/search-for-tag input "OptionGroupName" :flattened? nil :xmlAttribute? nil), "OptionGroupDescription" (portkey.aws/search-for-tag input "OptionGroupDescription" :flattened? nil :xmlAttribute? nil), "EngineName" (portkey.aws/search-for-tag input "EngineName" :flattened? nil :xmlAttribute? nil), "MajorEngineVersion" (portkey.aws/search-for-tag input "MajorEngineVersion" :flattened? nil :xmlAttribute? nil), "Options" (portkey.aws/search-for-tag input "Options" :flattened? nil :xmlAttribute? nil), "AllowsVpcAndNonVpcInstanceMemberships" (portkey.aws/search-for-tag input "AllowsVpcAndNonVpcInstanceMemberships" :flattened? nil :xmlAttribute? nil), "VpcId" (portkey.aws/search-for-tag input "VpcId" :flattened? nil :xmlAttribute? nil), "OptionGroupArn" (portkey.aws/search-for-tag input "OptionGroupArn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar493780 "OptionGroupName") (clojure.core/assoc :option-group-name (deser-string (clojure.core/get-in letvar493780 ["OptionGroupName" :content]))) (letvar493780 "OptionGroupDescription") (clojure.core/assoc :option-group-description (deser-string (clojure.core/get-in letvar493780 ["OptionGroupDescription" :content]))) (letvar493780 "EngineName") (clojure.core/assoc :engine-name (deser-string (clojure.core/get-in letvar493780 ["EngineName" :content]))) (letvar493780 "MajorEngineVersion") (clojure.core/assoc :major-engine-version (deser-string (clojure.core/get-in letvar493780 ["MajorEngineVersion" :content]))) (letvar493780 "Options") (clojure.core/assoc :options (deser-options-list (clojure.core/get-in letvar493780 ["Options" :content]))) (letvar493780 "AllowsVpcAndNonVpcInstanceMemberships") (clojure.core/assoc :allows-vpc-and-non-vpc-instance-memberships (deser-boolean (clojure.core/get-in letvar493780 ["AllowsVpcAndNonVpcInstanceMemberships" :content]))) (letvar493780 "VpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar493780 ["VpcId" :content]))) (letvar493780 "OptionGroupArn") (clojure.core/assoc :option-group-arn (deser-string (clojure.core/get-in letvar493780 ["OptionGroupArn" :content]))))))

(clojure.core/defn- deser-option-groups-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-option-group coll))) input))

(clojure.core/defn- deser-ip-range-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-ip-range coll))) input))

(clojure.core/defn- deser-db-instance-status-info [input] (clojure.core/let [letvar493922 {"StatusType" (portkey.aws/search-for-tag input "StatusType" :flattened? nil :xmlAttribute? nil), "Normal" (portkey.aws/search-for-tag input "Normal" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "Message" (portkey.aws/search-for-tag input "Message" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar493922 "StatusType") (clojure.core/assoc :status-type (deser-string (clojure.core/get-in letvar493922 ["StatusType" :content]))) (letvar493922 "Normal") (clojure.core/assoc :normal (deser-boolean (clojure.core/get-in letvar493922 ["Normal" :content]))) (letvar493922 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar493922 ["Status" :content]))) (letvar493922 "Message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar493922 ["Message" :content]))))))

(clojure.core/defn- deser-event-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-event coll))) input))

(clojure.core/defn- deser-source-type [input] (clojure.core/get {"db-instance" :dbinstance, "db-parameter-group" :dbparametergroup, "db-security-group" :dbsecuritygroup, "db-snapshot" :dbsnapshot, "db-cluster" :dbcluster, "db-cluster-snapshot" :dbclustersnapshot} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-orderable-db-instance-options-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-orderable-db-instance-option coll))) input))

(clojure.core/defn- deser-event [input] (clojure.core/let [letvar494069 {"SourceIdentifier" (portkey.aws/search-for-tag input "SourceIdentifier" :flattened? nil :xmlAttribute? nil), "SourceType" (portkey.aws/search-for-tag input "SourceType" :flattened? nil :xmlAttribute? nil), "Message" (portkey.aws/search-for-tag input "Message" :flattened? nil :xmlAttribute? nil), "EventCategories" (portkey.aws/search-for-tag input "EventCategories" :flattened? nil :xmlAttribute? nil), "Date" (portkey.aws/search-for-tag input "Date" :flattened? nil :xmlAttribute? nil), "SourceArn" (portkey.aws/search-for-tag input "SourceArn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar494069 "SourceIdentifier") (clojure.core/assoc :source-identifier (deser-string (clojure.core/get-in letvar494069 ["SourceIdentifier" :content]))) (letvar494069 "SourceType") (clojure.core/assoc :source-type (deser-source-type (clojure.core/get-in letvar494069 ["SourceType" :content]))) (letvar494069 "Message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar494069 ["Message" :content]))) (letvar494069 "EventCategories") (clojure.core/assoc :event-categories (deser-event-categories-list (clojure.core/get-in letvar494069 ["EventCategories" :content]))) (letvar494069 "Date") (clojure.core/assoc :date (deser-t-stamp (clojure.core/get-in letvar494069 ["Date" :content]))) (letvar494069 "SourceArn") (clojure.core/assoc :source-arn (deser-string (clojure.core/get-in letvar494069 ["SourceArn" :content]))))))

(clojure.core/defn- deser-feature-name-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-availability-zone-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-availability-zone coll))) input))

(clojure.core/defn- deser-availability-zone [input] (clojure.core/let [letvar494211 {"Name" (portkey.aws/search-for-tag input "Name" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar494211 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar494211 ["Name" :content]))))))

(clojure.core/defn- deser-db-cluster-parameter-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-parameter-group coll))) input))

(clojure.core/defn- deser-db-instance-automated-backup [input] (clojure.core/let [letvar494336 {"OptionGroupName" (portkey.aws/search-for-tag input "OptionGroupName" :flattened? nil :xmlAttribute? nil), "Encrypted" (portkey.aws/search-for-tag input "Encrypted" :flattened? nil :xmlAttribute? nil), "DBInstanceIdentifier" (portkey.aws/search-for-tag input "DBInstanceIdentifier" :flattened? nil :xmlAttribute? nil), "DBInstanceArn" (portkey.aws/search-for-tag input "DBInstanceArn" :flattened? nil :xmlAttribute? nil), "InstanceCreateTime" (portkey.aws/search-for-tag input "InstanceCreateTime" :flattened? nil :xmlAttribute? nil), "AvailabilityZone" (portkey.aws/search-for-tag input "AvailabilityZone" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "LicenseModel" (portkey.aws/search-for-tag input "LicenseModel" :flattened? nil :xmlAttribute? nil), "AllocatedStorage" (portkey.aws/search-for-tag input "AllocatedStorage" :flattened? nil :xmlAttribute? nil), "Timezone" (portkey.aws/search-for-tag input "Timezone" :flattened? nil :xmlAttribute? nil), "MasterUsername" (portkey.aws/search-for-tag input "MasterUsername" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "RestoreWindow" (portkey.aws/search-for-tag input "RestoreWindow" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "VpcId" (portkey.aws/search-for-tag input "VpcId" :flattened? nil :xmlAttribute? nil), "KmsKeyId" (portkey.aws/search-for-tag input "KmsKeyId" :flattened? nil :xmlAttribute? nil), "DbiResourceId" (portkey.aws/search-for-tag input "DbiResourceId" :flattened? nil :xmlAttribute? nil), "Iops" (portkey.aws/search-for-tag input "Iops" :flattened? nil :xmlAttribute? nil), "StorageType" (portkey.aws/search-for-tag input "StorageType" :flattened? nil :xmlAttribute? nil), "IAMDatabaseAuthenticationEnabled" (portkey.aws/search-for-tag input "IAMDatabaseAuthenticationEnabled" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "TdeCredentialArn" (portkey.aws/search-for-tag input "TdeCredentialArn" :flattened? nil :xmlAttribute? nil), "Region" (portkey.aws/search-for-tag input "Region" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar494336 "OptionGroupName") (clojure.core/assoc :option-group-name (deser-string (clojure.core/get-in letvar494336 ["OptionGroupName" :content]))) (letvar494336 "Encrypted") (clojure.core/assoc :encrypted (deser-boolean (clojure.core/get-in letvar494336 ["Encrypted" :content]))) (letvar494336 "DBInstanceIdentifier") (clojure.core/assoc :db-instance-identifier (deser-string (clojure.core/get-in letvar494336 ["DBInstanceIdentifier" :content]))) (letvar494336 "DBInstanceArn") (clojure.core/assoc :db-instance-arn (deser-string (clojure.core/get-in letvar494336 ["DBInstanceArn" :content]))) (letvar494336 "InstanceCreateTime") (clojure.core/assoc :instance-create-time (deser-t-stamp (clojure.core/get-in letvar494336 ["InstanceCreateTime" :content]))) (letvar494336 "AvailabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar494336 ["AvailabilityZone" :content]))) (letvar494336 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar494336 ["Status" :content]))) (letvar494336 "LicenseModel") (clojure.core/assoc :license-model (deser-string (clojure.core/get-in letvar494336 ["LicenseModel" :content]))) (letvar494336 "AllocatedStorage") (clojure.core/assoc :allocated-storage (deser-integer (clojure.core/get-in letvar494336 ["AllocatedStorage" :content]))) (letvar494336 "Timezone") (clojure.core/assoc :timezone (deser-string (clojure.core/get-in letvar494336 ["Timezone" :content]))) (letvar494336 "MasterUsername") (clojure.core/assoc :master-username (deser-string (clojure.core/get-in letvar494336 ["MasterUsername" :content]))) (letvar494336 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar494336 ["EngineVersion" :content]))) (letvar494336 "RestoreWindow") (clojure.core/assoc :restore-window (deser-restore-window (clojure.core/get-in letvar494336 ["RestoreWindow" :content]))) (letvar494336 "Port") (clojure.core/assoc :port (deser-integer (clojure.core/get-in letvar494336 ["Port" :content]))) (letvar494336 "VpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar494336 ["VpcId" :content]))) (letvar494336 "KmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar494336 ["KmsKeyId" :content]))) (letvar494336 "DbiResourceId") (clojure.core/assoc :dbi-resource-id (deser-string (clojure.core/get-in letvar494336 ["DbiResourceId" :content]))) (letvar494336 "Iops") (clojure.core/assoc :iops (deser-integer-optional (clojure.core/get-in letvar494336 ["Iops" :content]))) (letvar494336 "StorageType") (clojure.core/assoc :storage-type (deser-string (clojure.core/get-in letvar494336 ["StorageType" :content]))) (letvar494336 "IAMDatabaseAuthenticationEnabled") (clojure.core/assoc :iam-database-authentication-enabled (deser-boolean (clojure.core/get-in letvar494336 ["IAMDatabaseAuthenticationEnabled" :content]))) (letvar494336 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar494336 ["Engine" :content]))) (letvar494336 "TdeCredentialArn") (clojure.core/assoc :tde-credential-arn (deser-string (clojure.core/get-in letvar494336 ["TdeCredentialArn" :content]))) (letvar494336 "Region") (clojure.core/assoc :region (deser-string (clojure.core/get-in letvar494336 ["Region" :content]))))))

(clojure.core/defn- deser-db-instance-automated-backup-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-instance-automated-backup coll))) input))

(clojure.core/defn- deser-db-cluster-member-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-member coll))) input))

(clojure.core/defn- deser-read-replica-db-instance-identifier-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-recurring-charge [input] (clojure.core/let [letvar494495 {"RecurringChargeAmount" (portkey.aws/search-for-tag input "RecurringChargeAmount" :flattened? nil :xmlAttribute? nil), "RecurringChargeFrequency" (portkey.aws/search-for-tag input "RecurringChargeFrequency" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar494495 "RecurringChargeAmount") (clojure.core/assoc :recurring-charge-amount (deser-double (clojure.core/get-in letvar494495 ["RecurringChargeAmount" :content]))) (letvar494495 "RecurringChargeFrequency") (clojure.core/assoc :recurring-charge-frequency (deser-string (clojure.core/get-in letvar494495 ["RecurringChargeFrequency" :content]))))))

(clojure.core/defn- deser-valid-upgrade-target-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-upgrade-target coll))) input))

(clojure.core/defn- deser-range [input] (clojure.core/let [letvar494620 {"From" (portkey.aws/search-for-tag input "From" :flattened? nil :xmlAttribute? nil), "To" (portkey.aws/search-for-tag input "To" :flattened? nil :xmlAttribute? nil), "Step" (portkey.aws/search-for-tag input "Step" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar494620 "From") (clojure.core/assoc :from (deser-integer (clojure.core/get-in letvar494620 ["From" :content]))) (letvar494620 "To") (clojure.core/assoc :to (deser-integer (clojure.core/get-in letvar494620 ["To" :content]))) (letvar494620 "Step") (clojure.core/assoc :step (deser-integer-optional (clojure.core/get-in letvar494620 ["Step" :content]))))))

(clojure.core/defn- deser-db-cluster-roles [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-role coll))) input))

(clojure.core/defn- deser-option-group-option [input] (clojure.core/let [letvar494745 {"MajorEngineVersion" (portkey.aws/search-for-tag input "MajorEngineVersion" :flattened? nil :xmlAttribute? nil), "EngineName" (portkey.aws/search-for-tag input "EngineName" :flattened? nil :xmlAttribute? nil), "RequiresAutoMinorEngineVersionUpgrade" (portkey.aws/search-for-tag input "RequiresAutoMinorEngineVersionUpgrade" :flattened? nil :xmlAttribute? nil), "OptionGroupOptionVersions" (portkey.aws/search-for-tag input "OptionGroupOptionVersions" :flattened? nil :xmlAttribute? nil), "Permanent" (portkey.aws/search-for-tag input "Permanent" :flattened? nil :xmlAttribute? nil), "VpcOnly" (portkey.aws/search-for-tag input "VpcOnly" :flattened? nil :xmlAttribute? nil), "PortRequired" (portkey.aws/search-for-tag input "PortRequired" :flattened? nil :xmlAttribute? nil), "OptionsConflictsWith" (portkey.aws/search-for-tag input "OptionsConflictsWith" :flattened? nil :xmlAttribute? nil), "OptionGroupOptionSettings" (portkey.aws/search-for-tag input "OptionGroupOptionSettings" :flattened? nil :xmlAttribute? nil), "Persistent" (portkey.aws/search-for-tag input "Persistent" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "MinimumRequiredMinorEngineVersion" (portkey.aws/search-for-tag input "MinimumRequiredMinorEngineVersion" :flattened? nil :xmlAttribute? nil), "DefaultPort" (portkey.aws/search-for-tag input "DefaultPort" :flattened? nil :xmlAttribute? nil), "SupportsOptionVersionDowngrade" (portkey.aws/search-for-tag input "SupportsOptionVersionDowngrade" :flattened? nil :xmlAttribute? nil), "OptionsDependedOn" (portkey.aws/search-for-tag input "OptionsDependedOn" :flattened? nil :xmlAttribute? nil), "Name" (portkey.aws/search-for-tag input "Name" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar494745 "MajorEngineVersion") (clojure.core/assoc :major-engine-version (deser-string (clojure.core/get-in letvar494745 ["MajorEngineVersion" :content]))) (letvar494745 "EngineName") (clojure.core/assoc :engine-name (deser-string (clojure.core/get-in letvar494745 ["EngineName" :content]))) (letvar494745 "RequiresAutoMinorEngineVersionUpgrade") (clojure.core/assoc :requires-auto-minor-engine-version-upgrade (deser-boolean (clojure.core/get-in letvar494745 ["RequiresAutoMinorEngineVersionUpgrade" :content]))) (letvar494745 "OptionGroupOptionVersions") (clojure.core/assoc :option-group-option-versions (deser-option-group-option-versions-list (clojure.core/get-in letvar494745 ["OptionGroupOptionVersions" :content]))) (letvar494745 "Permanent") (clojure.core/assoc :permanent (deser-boolean (clojure.core/get-in letvar494745 ["Permanent" :content]))) (letvar494745 "VpcOnly") (clojure.core/assoc :vpc-only (deser-boolean (clojure.core/get-in letvar494745 ["VpcOnly" :content]))) (letvar494745 "PortRequired") (clojure.core/assoc :port-required (deser-boolean (clojure.core/get-in letvar494745 ["PortRequired" :content]))) (letvar494745 "OptionsConflictsWith") (clojure.core/assoc :options-conflicts-with (deser-options-conflicts-with (clojure.core/get-in letvar494745 ["OptionsConflictsWith" :content]))) (letvar494745 "OptionGroupOptionSettings") (clojure.core/assoc :option-group-option-settings (deser-option-group-option-settings-list (clojure.core/get-in letvar494745 ["OptionGroupOptionSettings" :content]))) (letvar494745 "Persistent") (clojure.core/assoc :persistent (deser-boolean (clojure.core/get-in letvar494745 ["Persistent" :content]))) (letvar494745 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar494745 ["Description" :content]))) (letvar494745 "MinimumRequiredMinorEngineVersion") (clojure.core/assoc :minimum-required-minor-engine-version (deser-string (clojure.core/get-in letvar494745 ["MinimumRequiredMinorEngineVersion" :content]))) (letvar494745 "DefaultPort") (clojure.core/assoc :default-port (deser-integer-optional (clojure.core/get-in letvar494745 ["DefaultPort" :content]))) (letvar494745 "SupportsOptionVersionDowngrade") (clojure.core/assoc :supports-option-version-downgrade (deser-boolean-optional (clojure.core/get-in letvar494745 ["SupportsOptionVersionDowngrade" :content]))) (letvar494745 "OptionsDependedOn") (clojure.core/assoc :options-depended-on (deser-options-depended-on (clojure.core/get-in letvar494745 ["OptionsDependedOn" :content]))) (letvar494745 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar494745 ["Name" :content]))))))

(clojure.core/defn- deser-tag-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-tag coll))) input))

(clojure.core/defn- deser-timezone [input] (clojure.core/let [letvar494870 {"TimezoneName" (portkey.aws/search-for-tag input "TimezoneName" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar494870 "TimezoneName") (clojure.core/assoc :timezone-name (deser-string (clojure.core/get-in letvar494870 ["TimezoneName" :content]))))))

(clojure.core/defn- deser-db-cluster-snapshot-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-snapshot coll))) input))

(clojure.core/defn- deser-db-engine-version [input] (clojure.core/let [letvar494995 {"SupportedEngineModes" (portkey.aws/search-for-tag input "SupportedEngineModes" :flattened? nil :xmlAttribute? nil), "DefaultCharacterSet" (portkey.aws/search-for-tag input "DefaultCharacterSet" :flattened? nil :xmlAttribute? nil), "DBEngineDescription" (portkey.aws/search-for-tag input "DBEngineDescription" :flattened? nil :xmlAttribute? nil), "SupportedTimezones" (portkey.aws/search-for-tag input "SupportedTimezones" :flattened? nil :xmlAttribute? nil), "SupportsReadReplica" (portkey.aws/search-for-tag input "SupportsReadReplica" :flattened? nil :xmlAttribute? nil), "DBEngineVersionDescription" (portkey.aws/search-for-tag input "DBEngineVersionDescription" :flattened? nil :xmlAttribute? nil), "ValidUpgradeTarget" (portkey.aws/search-for-tag input "ValidUpgradeTarget" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "SupportedCharacterSets" (portkey.aws/search-for-tag input "SupportedCharacterSets" :flattened? nil :xmlAttribute? nil), "SupportsLogExportsToCloudwatchLogs" (portkey.aws/search-for-tag input "SupportsLogExportsToCloudwatchLogs" :flattened? nil :xmlAttribute? nil), "SupportedFeatureNames" (portkey.aws/search-for-tag input "SupportedFeatureNames" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "ExportableLogTypes" (portkey.aws/search-for-tag input "ExportableLogTypes" :flattened? nil :xmlAttribute? nil), "DBParameterGroupFamily" (portkey.aws/search-for-tag input "DBParameterGroupFamily" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar494995 "SupportedEngineModes") (clojure.core/assoc :supported-engine-modes (deser-engine-mode-list (clojure.core/get-in letvar494995 ["SupportedEngineModes" :content]))) (letvar494995 "DefaultCharacterSet") (clojure.core/assoc :default-character-set (deser-character-set (clojure.core/get-in letvar494995 ["DefaultCharacterSet" :content]))) (letvar494995 "DBEngineDescription") (clojure.core/assoc :db-engine-description (deser-string (clojure.core/get-in letvar494995 ["DBEngineDescription" :content]))) (letvar494995 "SupportedTimezones") (clojure.core/assoc :supported-timezones (deser-supported-timezones-list (clojure.core/get-in letvar494995 ["SupportedTimezones" :content]))) (letvar494995 "SupportsReadReplica") (clojure.core/assoc :supports-read-replica (deser-boolean (clojure.core/get-in letvar494995 ["SupportsReadReplica" :content]))) (letvar494995 "DBEngineVersionDescription") (clojure.core/assoc :db-engine-version-description (deser-string (clojure.core/get-in letvar494995 ["DBEngineVersionDescription" :content]))) (letvar494995 "ValidUpgradeTarget") (clojure.core/assoc :valid-upgrade-target (deser-valid-upgrade-target-list (clojure.core/get-in letvar494995 ["ValidUpgradeTarget" :content]))) (letvar494995 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar494995 ["EngineVersion" :content]))) (letvar494995 "SupportedCharacterSets") (clojure.core/assoc :supported-character-sets (deser-supported-character-sets-list (clojure.core/get-in letvar494995 ["SupportedCharacterSets" :content]))) (letvar494995 "SupportsLogExportsToCloudwatchLogs") (clojure.core/assoc :supports-log-exports-to-cloudwatch-logs (deser-boolean (clojure.core/get-in letvar494995 ["SupportsLogExportsToCloudwatchLogs" :content]))) (letvar494995 "SupportedFeatureNames") (clojure.core/assoc :supported-feature-names (deser-feature-name-list (clojure.core/get-in letvar494995 ["SupportedFeatureNames" :content]))) (letvar494995 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar494995 ["Engine" :content]))) (letvar494995 "ExportableLogTypes") (clojure.core/assoc :exportable-log-types (deser-log-type-list (clojure.core/get-in letvar494995 ["ExportableLogTypes" :content]))) (letvar494995 "DBParameterGroupFamily") (clojure.core/assoc :db-parameter-group-family (deser-string (clojure.core/get-in letvar494995 ["DBParameterGroupFamily" :content]))))))

(clojure.core/defn- deser-options-conflicts-with [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-option-setting-configuration-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-option-setting coll))) input))

(clojure.core/defn- deser-domain-membership-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-domain-membership coll))) input))

(clojure.core/defn- deser-valid-storage-options [input] (clojure.core/let [letvar495154 {"StorageType" (portkey.aws/search-for-tag input "StorageType" :flattened? nil :xmlAttribute? nil), "StorageSize" (portkey.aws/search-for-tag input "StorageSize" :flattened? nil :xmlAttribute? nil), "ProvisionedIops" (portkey.aws/search-for-tag input "ProvisionedIops" :flattened? nil :xmlAttribute? nil), "IopsToStorageRatio" (portkey.aws/search-for-tag input "IopsToStorageRatio" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar495154 "StorageType") (clojure.core/assoc :storage-type (deser-string (clojure.core/get-in letvar495154 ["StorageType" :content]))) (letvar495154 "StorageSize") (clojure.core/assoc :storage-size (deser-range-list (clojure.core/get-in letvar495154 ["StorageSize" :content]))) (letvar495154 "ProvisionedIops") (clojure.core/assoc :provisioned-iops (deser-range-list (clojure.core/get-in letvar495154 ["ProvisionedIops" :content]))) (letvar495154 "IopsToStorageRatio") (clojure.core/assoc :iops-to-storage-ratio (deser-double-range-list (clojure.core/get-in letvar495154 ["IopsToStorageRatio" :content]))))))

(clojure.core/defn- deser-restore-window [input] (clojure.core/let [letvar495262 {"EarliestTime" (portkey.aws/search-for-tag input "EarliestTime" :flattened? nil :xmlAttribute? nil), "LatestTime" (portkey.aws/search-for-tag input "LatestTime" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar495262 "EarliestTime") (clojure.core/assoc :earliest-time (deser-t-stamp (clojure.core/get-in letvar495262 ["EarliestTime" :content]))) (letvar495262 "LatestTime") (clojure.core/assoc :latest-time (deser-t-stamp (clojure.core/get-in letvar495262 ["LatestTime" :content]))))))

(clojure.core/defn- deser-vpc-security-group-membership [input] (clojure.core/let [letvar495370 {"VpcSecurityGroupId" (portkey.aws/search-for-tag input "VpcSecurityGroupId" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar495370 "VpcSecurityGroupId") (clojure.core/assoc :vpc-security-group-id (deser-string (clojure.core/get-in letvar495370 ["VpcSecurityGroupId" :content]))) (letvar495370 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar495370 ["Status" :content]))))))

(clojure.core/defn- deser-valid-db-instance-modifications-message [input] (clojure.core/let [letvar495478 {"Storage" (portkey.aws/search-for-tag input "Storage" :flattened? nil :xmlAttribute? nil), "ValidProcessorFeatures" (portkey.aws/search-for-tag input "ValidProcessorFeatures" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar495478 "Storage") (clojure.core/assoc :storage (deser-valid-storage-options-list (clojure.core/get-in letvar495478 ["Storage" :content]))) (letvar495478 "ValidProcessorFeatures") (clojure.core/assoc :valid-processor-features (deser-available-processor-feature-list (clojure.core/get-in letvar495478 ["ValidProcessorFeatures" :content]))))))

(clojure.core/defn- deser-global-cluster-member [input] (clojure.core/let [letvar495586 {"DBClusterArn" (portkey.aws/search-for-tag input "DBClusterArn" :flattened? nil :xmlAttribute? nil), "Readers" (portkey.aws/search-for-tag input "Readers" :flattened? nil :xmlAttribute? nil), "IsWriter" (portkey.aws/search-for-tag input "IsWriter" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar495586 "DBClusterArn") (clojure.core/assoc :db-cluster-arn (deser-string (clojure.core/get-in letvar495586 ["DBClusterArn" :content]))) (letvar495586 "Readers") (clojure.core/assoc :readers (deser-readers-arn-list (clojure.core/get-in letvar495586 ["Readers" :content]))) (letvar495586 "IsWriter") (clojure.core/assoc :is-writer (deser-boolean (clojure.core/get-in letvar495586 ["IsWriter" :content]))))))

(clojure.core/defn- deser-db-cluster-snapshot-attribute-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-snapshot-attribute coll))) input))

(clojure.core/defn- deser-account-quota-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-account-quota coll))) input))

(clojure.core/defn- deser-db-snapshot-attribute [input] (clojure.core/let [letvar495728 {"AttributeName" (portkey.aws/search-for-tag input "AttributeName" :flattened? nil :xmlAttribute? nil), "AttributeValues" (portkey.aws/search-for-tag input "AttributeValues" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar495728 "AttributeName") (clojure.core/assoc :attribute-name (deser-string (clojure.core/get-in letvar495728 ["AttributeName" :content]))) (letvar495728 "AttributeValues") (clojure.core/assoc :attribute-values (deser-attribute-value-list (clojure.core/get-in letvar495728 ["AttributeValues" :content]))))))

(clojure.core/defn- deser-reserved-db-instances-offering [input] (clojure.core/let [letvar495836 {"CurrencyCode" (portkey.aws/search-for-tag input "CurrencyCode" :flattened? nil :xmlAttribute? nil), "ReservedDBInstancesOfferingId" (portkey.aws/search-for-tag input "ReservedDBInstancesOfferingId" :flattened? nil :xmlAttribute? nil), "FixedPrice" (portkey.aws/search-for-tag input "FixedPrice" :flattened? nil :xmlAttribute? nil), "Duration" (portkey.aws/search-for-tag input "Duration" :flattened? nil :xmlAttribute? nil), "UsagePrice" (portkey.aws/search-for-tag input "UsagePrice" :flattened? nil :xmlAttribute? nil), "ProductDescription" (portkey.aws/search-for-tag input "ProductDescription" :flattened? nil :xmlAttribute? nil), "DBInstanceClass" (portkey.aws/search-for-tag input "DBInstanceClass" :flattened? nil :xmlAttribute? nil), "RecurringCharges" (portkey.aws/search-for-tag input "RecurringCharges" :flattened? nil :xmlAttribute? nil), "OfferingType" (portkey.aws/search-for-tag input "OfferingType" :flattened? nil :xmlAttribute? nil), "MultiAZ" (portkey.aws/search-for-tag input "MultiAZ" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar495836 "CurrencyCode") (clojure.core/assoc :currency-code (deser-string (clojure.core/get-in letvar495836 ["CurrencyCode" :content]))) (letvar495836 "ReservedDBInstancesOfferingId") (clojure.core/assoc :reserved-db-instances-offering-id (deser-string (clojure.core/get-in letvar495836 ["ReservedDBInstancesOfferingId" :content]))) (letvar495836 "FixedPrice") (clojure.core/assoc :fixed-price (deser-double (clojure.core/get-in letvar495836 ["FixedPrice" :content]))) (letvar495836 "Duration") (clojure.core/assoc :duration (deser-integer (clojure.core/get-in letvar495836 ["Duration" :content]))) (letvar495836 "UsagePrice") (clojure.core/assoc :usage-price (deser-double (clojure.core/get-in letvar495836 ["UsagePrice" :content]))) (letvar495836 "ProductDescription") (clojure.core/assoc :product-description (deser-string (clojure.core/get-in letvar495836 ["ProductDescription" :content]))) (letvar495836 "DBInstanceClass") (clojure.core/assoc :db-instance-class (deser-string (clojure.core/get-in letvar495836 ["DBInstanceClass" :content]))) (letvar495836 "RecurringCharges") (clojure.core/assoc :recurring-charges (deser-recurring-charge-list (clojure.core/get-in letvar495836 ["RecurringCharges" :content]))) (letvar495836 "OfferingType") (clojure.core/assoc :offering-type (deser-string (clojure.core/get-in letvar495836 ["OfferingType" :content]))) (letvar495836 "MultiAZ") (clojure.core/assoc :multi-az (deser-boolean (clojure.core/get-in letvar495836 ["MultiAZ" :content]))))))

(clojure.core/defn- deser-readers-arn-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-ec-2-security-group [input] (clojure.core/let [letvar495961 {"Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "EC2SecurityGroupName" (portkey.aws/search-for-tag input "EC2SecurityGroupName" :flattened? nil :xmlAttribute? nil), "EC2SecurityGroupId" (portkey.aws/search-for-tag input "EC2SecurityGroupId" :flattened? nil :xmlAttribute? nil), "EC2SecurityGroupOwnerId" (portkey.aws/search-for-tag input "EC2SecurityGroupOwnerId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar495961 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar495961 ["Status" :content]))) (letvar495961 "EC2SecurityGroupName") (clojure.core/assoc :ec-2-security-group-name (deser-string (clojure.core/get-in letvar495961 ["EC2SecurityGroupName" :content]))) (letvar495961 "EC2SecurityGroupId") (clojure.core/assoc :ec-2-security-group-id (deser-string (clojure.core/get-in letvar495961 ["EC2SecurityGroupId" :content]))) (letvar495961 "EC2SecurityGroupOwnerId") (clojure.core/assoc :ec-2-security-group-owner-id (deser-string (clojure.core/get-in letvar495961 ["EC2SecurityGroupOwnerId" :content]))))))

(clojure.core/defn- deser-option-group-membership-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-option-group-membership coll))) input))

(clojure.core/defn- deser-db-instance-roles [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-instance-role coll))) input))

(clojure.core/defn- deser-event-categories-map-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-event-categories-map coll))) input))

(clojure.core/defn- deser-db-cluster-endpoint-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-endpoint coll))) input))

(clojure.core/defn- deser-integer [input] (java.lang.Integer. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-string [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-db-cluster-snapshot-attribute [input] (clojure.core/let [letvar496144 {"AttributeName" (portkey.aws/search-for-tag input "AttributeName" :flattened? nil :xmlAttribute? nil), "AttributeValues" (portkey.aws/search-for-tag input "AttributeValues" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar496144 "AttributeName") (clojure.core/assoc :attribute-name (deser-string (clojure.core/get-in letvar496144 ["AttributeName" :content]))) (letvar496144 "AttributeValues") (clojure.core/assoc :attribute-values (deser-attribute-value-list (clojure.core/get-in letvar496144 ["AttributeValues" :content]))))))

(clojure.core/defn- deser-parameter [input] (clojure.core/let [letvar496252 {"DataType" (portkey.aws/search-for-tag input "DataType" :flattened? nil :xmlAttribute? nil), "SupportedEngineModes" (portkey.aws/search-for-tag input "SupportedEngineModes" :flattened? nil :xmlAttribute? nil), "ParameterName" (portkey.aws/search-for-tag input "ParameterName" :flattened? nil :xmlAttribute? nil), "Source" (portkey.aws/search-for-tag input "Source" :flattened? nil :xmlAttribute? nil), "MinimumEngineVersion" (portkey.aws/search-for-tag input "MinimumEngineVersion" :flattened? nil :xmlAttribute? nil), "AllowedValues" (portkey.aws/search-for-tag input "AllowedValues" :flattened? nil :xmlAttribute? nil), "ApplyType" (portkey.aws/search-for-tag input "ApplyType" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "ApplyMethod" (portkey.aws/search-for-tag input "ApplyMethod" :flattened? nil :xmlAttribute? nil), "IsModifiable" (portkey.aws/search-for-tag input "IsModifiable" :flattened? nil :xmlAttribute? nil), "ParameterValue" (portkey.aws/search-for-tag input "ParameterValue" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar496252 "DataType") (clojure.core/assoc :data-type (deser-string (clojure.core/get-in letvar496252 ["DataType" :content]))) (letvar496252 "SupportedEngineModes") (clojure.core/assoc :supported-engine-modes (deser-engine-mode-list (clojure.core/get-in letvar496252 ["SupportedEngineModes" :content]))) (letvar496252 "ParameterName") (clojure.core/assoc :parameter-name (deser-string (clojure.core/get-in letvar496252 ["ParameterName" :content]))) (letvar496252 "Source") (clojure.core/assoc :source (deser-string (clojure.core/get-in letvar496252 ["Source" :content]))) (letvar496252 "MinimumEngineVersion") (clojure.core/assoc :minimum-engine-version (deser-string (clojure.core/get-in letvar496252 ["MinimumEngineVersion" :content]))) (letvar496252 "AllowedValues") (clojure.core/assoc :allowed-values (deser-string (clojure.core/get-in letvar496252 ["AllowedValues" :content]))) (letvar496252 "ApplyType") (clojure.core/assoc :apply-type (deser-string (clojure.core/get-in letvar496252 ["ApplyType" :content]))) (letvar496252 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar496252 ["Description" :content]))) (letvar496252 "ApplyMethod") (clojure.core/assoc :apply-method (deser-apply-method (clojure.core/get-in letvar496252 ["ApplyMethod" :content]))) (letvar496252 "IsModifiable") (clojure.core/assoc :is-modifiable (deser-boolean (clojure.core/get-in letvar496252 ["IsModifiable" :content]))) (letvar496252 "ParameterValue") (clojure.core/assoc :parameter-value (deser-string (clojure.core/get-in letvar496252 ["ParameterValue" :content]))))))

(clojure.core/defn- deser-describe-db-log-files-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-describe-db-log-files-details coll))) input))

(clojure.core/defn- deser-db-security-group-membership [input] (clojure.core/let [letvar496377 {"DBSecurityGroupName" (portkey.aws/search-for-tag input "DBSecurityGroupName" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar496377 "DBSecurityGroupName") (clojure.core/assoc :db-security-group-name (deser-string (clojure.core/get-in letvar496377 ["DBSecurityGroupName" :content]))) (letvar496377 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar496377 ["Status" :content]))))))

(clojure.core/defn- deser-read-replica-db-cluster-identifier-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-db-cluster-snapshot-attributes-result [input] (clojure.core/let [letvar496502 {"DBClusterSnapshotIdentifier" (portkey.aws/search-for-tag input "DBClusterSnapshotIdentifier" :flattened? nil :xmlAttribute? nil), "DBClusterSnapshotAttributes" (portkey.aws/search-for-tag input "DBClusterSnapshotAttributes" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar496502 "DBClusterSnapshotIdentifier") (clojure.core/assoc :db-cluster-snapshot-identifier (deser-string (clojure.core/get-in letvar496502 ["DBClusterSnapshotIdentifier" :content]))) (letvar496502 "DBClusterSnapshotAttributes") (clojure.core/assoc :db-cluster-snapshot-attributes (deser-db-cluster-snapshot-attribute-list (clojure.core/get-in letvar496502 ["DBClusterSnapshotAttributes" :content]))))))

(clojure.core/defn- deser-db-instance [input] (clojure.core/let [letvar496610 {"DeletionProtection" (portkey.aws/search-for-tag input "DeletionProtection" :flattened? nil :xmlAttribute? nil), "BackupRetentionPeriod" (portkey.aws/search-for-tag input "BackupRetentionPeriod" :flattened? nil :xmlAttribute? nil), "DBSecurityGroups" (portkey.aws/search-for-tag input "DBSecurityGroups" :flattened? nil :xmlAttribute? nil), "SecondaryAvailabilityZone" (portkey.aws/search-for-tag input "SecondaryAvailabilityZone" :flattened? nil :xmlAttribute? nil), "PromotionTier" (portkey.aws/search-for-tag input "PromotionTier" :flattened? nil :xmlAttribute? nil), "CharacterSetName" (portkey.aws/search-for-tag input "CharacterSetName" :flattened? nil :xmlAttribute? nil), "PubliclyAccessible" (portkey.aws/search-for-tag input "PubliclyAccessible" :flattened? nil :xmlAttribute? nil), "ReadReplicaDBClusterIdentifiers" (portkey.aws/search-for-tag input "ReadReplicaDBClusterIdentifiers" :flattened? nil :xmlAttribute? nil), "ReadReplicaDBInstanceIdentifiers" (portkey.aws/search-for-tag input "ReadReplicaDBInstanceIdentifiers" :flattened? nil :xmlAttribute? nil), "DomainMemberships" (portkey.aws/search-for-tag input "DomainMemberships" :flattened? nil :xmlAttribute? nil), "PreferredMaintenanceWindow" (portkey.aws/search-for-tag input "PreferredMaintenanceWindow" :flattened? nil :xmlAttribute? nil), "CopyTagsToSnapshot" (portkey.aws/search-for-tag input "CopyTagsToSnapshot" :flattened? nil :xmlAttribute? nil), "DBInstanceIdentifier" (portkey.aws/search-for-tag input "DBInstanceIdentifier" :flattened? nil :xmlAttribute? nil), "EnabledCloudwatchLogsExports" (portkey.aws/search-for-tag input "EnabledCloudwatchLogsExports" :flattened? nil :xmlAttribute? nil), "AutoMinorVersionUpgrade" (portkey.aws/search-for-tag input "AutoMinorVersionUpgrade" :flattened? nil :xmlAttribute? nil), "DbInstancePort" (portkey.aws/search-for-tag input "DbInstancePort" :flattened? nil :xmlAttribute? nil), "DBName" (portkey.aws/search-for-tag input "DBName" :flattened? nil :xmlAttribute? nil), "DBInstanceArn" (portkey.aws/search-for-tag input "DBInstanceArn" :flattened? nil :xmlAttribute? nil), "InstanceCreateTime" (portkey.aws/search-for-tag input "InstanceCreateTime" :flattened? nil :xmlAttribute? nil), "AvailabilityZone" (portkey.aws/search-for-tag input "AvailabilityZone" :flattened? nil :xmlAttribute? nil), "ReadReplicaSourceDBInstanceIdentifier" (portkey.aws/search-for-tag input "ReadReplicaSourceDBInstanceIdentifier" :flattened? nil :xmlAttribute? nil), "LicenseModel" (portkey.aws/search-for-tag input "LicenseModel" :flattened? nil :xmlAttribute? nil), "ListenerEndpoint" (portkey.aws/search-for-tag input "ListenerEndpoint" :flattened? nil :xmlAttribute? nil), "AllocatedStorage" (portkey.aws/search-for-tag input "AllocatedStorage" :flattened? nil :xmlAttribute? nil), "MonitoringInterval" (portkey.aws/search-for-tag input "MonitoringInterval" :flattened? nil :xmlAttribute? nil), "Timezone" (portkey.aws/search-for-tag input "Timezone" :flattened? nil :xmlAttribute? nil), "MasterUsername" (portkey.aws/search-for-tag input "MasterUsername" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "PerformanceInsightsEnabled" (portkey.aws/search-for-tag input "PerformanceInsightsEnabled" :flattened? nil :xmlAttribute? nil), "StorageEncrypted" (portkey.aws/search-for-tag input "StorageEncrypted" :flattened? nil :xmlAttribute? nil), "KmsKeyId" (portkey.aws/search-for-tag input "KmsKeyId" :flattened? nil :xmlAttribute? nil), "DbiResourceId" (portkey.aws/search-for-tag input "DbiResourceId" :flattened? nil :xmlAttribute? nil), "Iops" (portkey.aws/search-for-tag input "Iops" :flattened? nil :xmlAttribute? nil), "StorageType" (portkey.aws/search-for-tag input "StorageType" :flattened? nil :xmlAttribute? nil), "ProcessorFeatures" (portkey.aws/search-for-tag input "ProcessorFeatures" :flattened? nil :xmlAttribute? nil), "CACertificateIdentifier" (portkey.aws/search-for-tag input "CACertificateIdentifier" :flattened? nil :xmlAttribute? nil), "Endpoint" (portkey.aws/search-for-tag input "Endpoint" :flattened? nil :xmlAttribute? nil), "OptionGroupMemberships" (portkey.aws/search-for-tag input "OptionGroupMemberships" :flattened? nil :xmlAttribute? nil), "IAMDatabaseAuthenticationEnabled" (portkey.aws/search-for-tag input "IAMDatabaseAuthenticationEnabled" :flattened? nil :xmlAttribute? nil), "PerformanceInsightsRetentionPeriod" (portkey.aws/search-for-tag input "PerformanceInsightsRetentionPeriod" :flattened? nil :xmlAttribute? nil), "DBInstanceClass" (portkey.aws/search-for-tag input "DBInstanceClass" :flattened? nil :xmlAttribute? nil), "DBParameterGroups" (portkey.aws/search-for-tag input "DBParameterGroups" :flattened? nil :xmlAttribute? nil), "VpcSecurityGroups" (portkey.aws/search-for-tag input "VpcSecurityGroups" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "DBInstanceStatus" (portkey.aws/search-for-tag input "DBInstanceStatus" :flattened? nil :xmlAttribute? nil), "StatusInfos" (portkey.aws/search-for-tag input "StatusInfos" :flattened? nil :xmlAttribute? nil), "AssociatedRoles" (portkey.aws/search-for-tag input "AssociatedRoles" :flattened? nil :xmlAttribute? nil), "MonitoringRoleArn" (portkey.aws/search-for-tag input "MonitoringRoleArn" :flattened? nil :xmlAttribute? nil), "TdeCredentialArn" (portkey.aws/search-for-tag input "TdeCredentialArn" :flattened? nil :xmlAttribute? nil), "EnhancedMonitoringResourceArn" (portkey.aws/search-for-tag input "EnhancedMonitoringResourceArn" :flattened? nil :xmlAttribute? nil), "MultiAZ" (portkey.aws/search-for-tag input "MultiAZ" :flattened? nil :xmlAttribute? nil), "PerformanceInsightsKMSKeyId" (portkey.aws/search-for-tag input "PerformanceInsightsKMSKeyId" :flattened? nil :xmlAttribute? nil), "DBClusterIdentifier" (portkey.aws/search-for-tag input "DBClusterIdentifier" :flattened? nil :xmlAttribute? nil), "PreferredBackupWindow" (portkey.aws/search-for-tag input "PreferredBackupWindow" :flattened? nil :xmlAttribute? nil), "PendingModifiedValues" (portkey.aws/search-for-tag input "PendingModifiedValues" :flattened? nil :xmlAttribute? nil), "LatestRestorableTime" (portkey.aws/search-for-tag input "LatestRestorableTime" :flattened? nil :xmlAttribute? nil), "DBSubnetGroup" (portkey.aws/search-for-tag input "DBSubnetGroup" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar496610 "DeletionProtection") (clojure.core/assoc :deletion-protection (deser-boolean (clojure.core/get-in letvar496610 ["DeletionProtection" :content]))) (letvar496610 "BackupRetentionPeriod") (clojure.core/assoc :backup-retention-period (deser-integer (clojure.core/get-in letvar496610 ["BackupRetentionPeriod" :content]))) (letvar496610 "DBSecurityGroups") (clojure.core/assoc :db-security-groups (deser-db-security-group-membership-list (clojure.core/get-in letvar496610 ["DBSecurityGroups" :content]))) (letvar496610 "SecondaryAvailabilityZone") (clojure.core/assoc :secondary-availability-zone (deser-string (clojure.core/get-in letvar496610 ["SecondaryAvailabilityZone" :content]))) (letvar496610 "PromotionTier") (clojure.core/assoc :promotion-tier (deser-integer-optional (clojure.core/get-in letvar496610 ["PromotionTier" :content]))) (letvar496610 "CharacterSetName") (clojure.core/assoc :character-set-name (deser-string (clojure.core/get-in letvar496610 ["CharacterSetName" :content]))) (letvar496610 "PubliclyAccessible") (clojure.core/assoc :publicly-accessible (deser-boolean (clojure.core/get-in letvar496610 ["PubliclyAccessible" :content]))) (letvar496610 "ReadReplicaDBClusterIdentifiers") (clojure.core/assoc :read-replica-db-cluster-identifiers (deser-read-replica-db-cluster-identifier-list (clojure.core/get-in letvar496610 ["ReadReplicaDBClusterIdentifiers" :content]))) (letvar496610 "ReadReplicaDBInstanceIdentifiers") (clojure.core/assoc :read-replica-db-instance-identifiers (deser-read-replica-db-instance-identifier-list (clojure.core/get-in letvar496610 ["ReadReplicaDBInstanceIdentifiers" :content]))) (letvar496610 "DomainMemberships") (clojure.core/assoc :domain-memberships (deser-domain-membership-list (clojure.core/get-in letvar496610 ["DomainMemberships" :content]))) (letvar496610 "PreferredMaintenanceWindow") (clojure.core/assoc :preferred-maintenance-window (deser-string (clojure.core/get-in letvar496610 ["PreferredMaintenanceWindow" :content]))) (letvar496610 "CopyTagsToSnapshot") (clojure.core/assoc :copy-tags-to-snapshot (deser-boolean (clojure.core/get-in letvar496610 ["CopyTagsToSnapshot" :content]))) (letvar496610 "DBInstanceIdentifier") (clojure.core/assoc :db-instance-identifier (deser-string (clojure.core/get-in letvar496610 ["DBInstanceIdentifier" :content]))) (letvar496610 "EnabledCloudwatchLogsExports") (clojure.core/assoc :enabled-cloudwatch-logs-exports (deser-log-type-list (clojure.core/get-in letvar496610 ["EnabledCloudwatchLogsExports" :content]))) (letvar496610 "AutoMinorVersionUpgrade") (clojure.core/assoc :auto-minor-version-upgrade (deser-boolean (clojure.core/get-in letvar496610 ["AutoMinorVersionUpgrade" :content]))) (letvar496610 "DbInstancePort") (clojure.core/assoc :db-instance-port (deser-integer (clojure.core/get-in letvar496610 ["DbInstancePort" :content]))) (letvar496610 "DBName") (clojure.core/assoc :db-name (deser-string (clojure.core/get-in letvar496610 ["DBName" :content]))) (letvar496610 "DBInstanceArn") (clojure.core/assoc :db-instance-arn (deser-string (clojure.core/get-in letvar496610 ["DBInstanceArn" :content]))) (letvar496610 "InstanceCreateTime") (clojure.core/assoc :instance-create-time (deser-t-stamp (clojure.core/get-in letvar496610 ["InstanceCreateTime" :content]))) (letvar496610 "AvailabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar496610 ["AvailabilityZone" :content]))) (letvar496610 "ReadReplicaSourceDBInstanceIdentifier") (clojure.core/assoc :read-replica-source-db-instance-identifier (deser-string (clojure.core/get-in letvar496610 ["ReadReplicaSourceDBInstanceIdentifier" :content]))) (letvar496610 "LicenseModel") (clojure.core/assoc :license-model (deser-string (clojure.core/get-in letvar496610 ["LicenseModel" :content]))) (letvar496610 "ListenerEndpoint") (clojure.core/assoc :listener-endpoint (deser-endpoint (clojure.core/get-in letvar496610 ["ListenerEndpoint" :content]))) (letvar496610 "AllocatedStorage") (clojure.core/assoc :allocated-storage (deser-integer (clojure.core/get-in letvar496610 ["AllocatedStorage" :content]))) (letvar496610 "MonitoringInterval") (clojure.core/assoc :monitoring-interval (deser-integer-optional (clojure.core/get-in letvar496610 ["MonitoringInterval" :content]))) (letvar496610 "Timezone") (clojure.core/assoc :timezone (deser-string (clojure.core/get-in letvar496610 ["Timezone" :content]))) (letvar496610 "MasterUsername") (clojure.core/assoc :master-username (deser-string (clojure.core/get-in letvar496610 ["MasterUsername" :content]))) (letvar496610 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar496610 ["EngineVersion" :content]))) (letvar496610 "PerformanceInsightsEnabled") (clojure.core/assoc :performance-insights-enabled (deser-boolean-optional (clojure.core/get-in letvar496610 ["PerformanceInsightsEnabled" :content]))) (letvar496610 "StorageEncrypted") (clojure.core/assoc :storage-encrypted (deser-boolean (clojure.core/get-in letvar496610 ["StorageEncrypted" :content]))) (letvar496610 "KmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar496610 ["KmsKeyId" :content]))) (letvar496610 "DbiResourceId") (clojure.core/assoc :dbi-resource-id (deser-string (clojure.core/get-in letvar496610 ["DbiResourceId" :content]))) (letvar496610 "Iops") (clojure.core/assoc :iops (deser-integer-optional (clojure.core/get-in letvar496610 ["Iops" :content]))) (letvar496610 "StorageType") (clojure.core/assoc :storage-type (deser-string (clojure.core/get-in letvar496610 ["StorageType" :content]))) (letvar496610 "ProcessorFeatures") (clojure.core/assoc :processor-features (deser-processor-feature-list (clojure.core/get-in letvar496610 ["ProcessorFeatures" :content]))) (letvar496610 "CACertificateIdentifier") (clojure.core/assoc :ca-certificate-identifier (deser-string (clojure.core/get-in letvar496610 ["CACertificateIdentifier" :content]))) (letvar496610 "Endpoint") (clojure.core/assoc :endpoint (deser-endpoint (clojure.core/get-in letvar496610 ["Endpoint" :content]))) (letvar496610 "OptionGroupMemberships") (clojure.core/assoc :option-group-memberships (deser-option-group-membership-list (clojure.core/get-in letvar496610 ["OptionGroupMemberships" :content]))) (letvar496610 "IAMDatabaseAuthenticationEnabled") (clojure.core/assoc :iam-database-authentication-enabled (deser-boolean (clojure.core/get-in letvar496610 ["IAMDatabaseAuthenticationEnabled" :content]))) (letvar496610 "PerformanceInsightsRetentionPeriod") (clojure.core/assoc :performance-insights-retention-period (deser-integer-optional (clojure.core/get-in letvar496610 ["PerformanceInsightsRetentionPeriod" :content]))) (letvar496610 "DBInstanceClass") (clojure.core/assoc :db-instance-class (deser-string (clojure.core/get-in letvar496610 ["DBInstanceClass" :content]))) (letvar496610 "DBParameterGroups") (clojure.core/assoc :db-parameter-groups (deser-db-parameter-group-status-list (clojure.core/get-in letvar496610 ["DBParameterGroups" :content]))) (letvar496610 "VpcSecurityGroups") (clojure.core/assoc :vpc-security-groups (deser-vpc-security-group-membership-list (clojure.core/get-in letvar496610 ["VpcSecurityGroups" :content]))) (letvar496610 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar496610 ["Engine" :content]))) (letvar496610 "DBInstanceStatus") (clojure.core/assoc :db-instance-status (deser-string (clojure.core/get-in letvar496610 ["DBInstanceStatus" :content]))) (letvar496610 "StatusInfos") (clojure.core/assoc :status-infos (deser-db-instance-status-info-list (clojure.core/get-in letvar496610 ["StatusInfos" :content]))) (letvar496610 "AssociatedRoles") (clojure.core/assoc :associated-roles (deser-db-instance-roles (clojure.core/get-in letvar496610 ["AssociatedRoles" :content]))) (letvar496610 "MonitoringRoleArn") (clojure.core/assoc :monitoring-role-arn (deser-string (clojure.core/get-in letvar496610 ["MonitoringRoleArn" :content]))) (letvar496610 "TdeCredentialArn") (clojure.core/assoc :tde-credential-arn (deser-string (clojure.core/get-in letvar496610 ["TdeCredentialArn" :content]))) (letvar496610 "EnhancedMonitoringResourceArn") (clojure.core/assoc :enhanced-monitoring-resource-arn (deser-string (clojure.core/get-in letvar496610 ["EnhancedMonitoringResourceArn" :content]))) (letvar496610 "MultiAZ") (clojure.core/assoc :multi-az (deser-boolean (clojure.core/get-in letvar496610 ["MultiAZ" :content]))) (letvar496610 "PerformanceInsightsKMSKeyId") (clojure.core/assoc :performance-insights-kms-key-id (deser-string (clojure.core/get-in letvar496610 ["PerformanceInsightsKMSKeyId" :content]))) (letvar496610 "DBClusterIdentifier") (clojure.core/assoc :db-cluster-identifier (deser-string (clojure.core/get-in letvar496610 ["DBClusterIdentifier" :content]))) (letvar496610 "PreferredBackupWindow") (clojure.core/assoc :preferred-backup-window (deser-string (clojure.core/get-in letvar496610 ["PreferredBackupWindow" :content]))) (letvar496610 "PendingModifiedValues") (clojure.core/assoc :pending-modified-values (deser-pending-modified-values (clojure.core/get-in letvar496610 ["PendingModifiedValues" :content]))) (letvar496610 "LatestRestorableTime") (clojure.core/assoc :latest-restorable-time (deser-t-stamp (clojure.core/get-in letvar496610 ["LatestRestorableTime" :content]))) (letvar496610 "DBSubnetGroup") (clojure.core/assoc :db-subnet-group (deser-db-subnet-group (clojure.core/get-in letvar496610 ["DBSubnetGroup" :content]))))))

(clojure.core/defn- deser-option-group-option-versions-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-option-version coll))) input))

(clojure.core/defn- deser-t-stamp [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-db-security-group-membership-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-security-group-membership coll))) input))

(clojure.core/defn- deser-event-categories-map [input] (clojure.core/let [letvar496754 {"SourceType" (portkey.aws/search-for-tag input "SourceType" :flattened? nil :xmlAttribute? nil), "EventCategories" (portkey.aws/search-for-tag input "EventCategories" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar496754 "SourceType") (clojure.core/assoc :source-type (deser-string (clojure.core/get-in letvar496754 ["SourceType" :content]))) (letvar496754 "EventCategories") (clojure.core/assoc :event-categories (deser-event-categories-list (clojure.core/get-in letvar496754 ["EventCategories" :content]))))))

(clojure.core/defn- deser-reserved-db-instances-offering-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-db-instances-offering coll))) input))

(clojure.core/defn- deser-recurring-charge-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-recurring-charge coll))) input))

(clojure.core/defn- deser-event-categories-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-processor-feature [input] (clojure.core/let [letvar496913 {"Name" (portkey.aws/search-for-tag input "Name" :flattened? nil :xmlAttribute? nil), "Value" (portkey.aws/search-for-tag input "Value" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar496913 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar496913 ["Name" :content]))) (letvar496913 "Value") (clojure.core/assoc :value (deser-string (clojure.core/get-in letvar496913 ["Value" :content]))))))

(clojure.core/defn- deser-db-cluster-parameter-group [input] (clojure.core/let [letvar497021 {"DBClusterParameterGroupName" (portkey.aws/search-for-tag input "DBClusterParameterGroupName" :flattened? nil :xmlAttribute? nil), "DBParameterGroupFamily" (portkey.aws/search-for-tag input "DBParameterGroupFamily" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "DBClusterParameterGroupArn" (portkey.aws/search-for-tag input "DBClusterParameterGroupArn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar497021 "DBClusterParameterGroupName") (clojure.core/assoc :db-cluster-parameter-group-name (deser-string (clojure.core/get-in letvar497021 ["DBClusterParameterGroupName" :content]))) (letvar497021 "DBParameterGroupFamily") (clojure.core/assoc :db-parameter-group-family (deser-string (clojure.core/get-in letvar497021 ["DBParameterGroupFamily" :content]))) (letvar497021 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar497021 ["Description" :content]))) (letvar497021 "DBClusterParameterGroupArn") (clojure.core/assoc :db-cluster-parameter-group-arn (deser-string (clojure.core/get-in letvar497021 ["DBClusterParameterGroupArn" :content]))))))

(clojure.core/defn- deser-apply-method [input] (clojure.core/get {"immediate" :immediate, "pending-reboot" :pendingreboot} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-endpoint [input] (clojure.core/let [letvar497134 {"Address" (portkey.aws/search-for-tag input "Address" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "HostedZoneId" (portkey.aws/search-for-tag input "HostedZoneId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar497134 "Address") (clojure.core/assoc :address (deser-string (clojure.core/get-in letvar497134 ["Address" :content]))) (letvar497134 "Port") (clojure.core/assoc :port (deser-integer (clojure.core/get-in letvar497134 ["Port" :content]))) (letvar497134 "HostedZoneId") (clojure.core/assoc :hosted-zone-id (deser-string (clojure.core/get-in letvar497134 ["HostedZoneId" :content]))))))

(clojure.core/defn- deser-db-parameter-group [input] (clojure.core/let [letvar497242 {"DBParameterGroupName" (portkey.aws/search-for-tag input "DBParameterGroupName" :flattened? nil :xmlAttribute? nil), "DBParameterGroupFamily" (portkey.aws/search-for-tag input "DBParameterGroupFamily" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "DBParameterGroupArn" (portkey.aws/search-for-tag input "DBParameterGroupArn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar497242 "DBParameterGroupName") (clojure.core/assoc :db-parameter-group-name (deser-string (clojure.core/get-in letvar497242 ["DBParameterGroupName" :content]))) (letvar497242 "DBParameterGroupFamily") (clojure.core/assoc :db-parameter-group-family (deser-string (clojure.core/get-in letvar497242 ["DBParameterGroupFamily" :content]))) (letvar497242 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar497242 ["Description" :content]))) (letvar497242 "DBParameterGroupArn") (clojure.core/assoc :db-parameter-group-arn (deser-string (clojure.core/get-in letvar497242 ["DBParameterGroupArn" :content]))))))

(clojure.core/defn- deser-supported-character-sets-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-character-set coll))) input))

(clojure.core/defn- deser-long [input] (java.lang.Long. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-log-type-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-account-quota [input] (clojure.core/let [letvar497386 {"AccountQuotaName" (portkey.aws/search-for-tag input "AccountQuotaName" :flattened? nil :xmlAttribute? nil), "Used" (portkey.aws/search-for-tag input "Used" :flattened? nil :xmlAttribute? nil), "Max" (portkey.aws/search-for-tag input "Max" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar497386 "AccountQuotaName") (clojure.core/assoc :account-quota-name (deser-string (clojure.core/get-in letvar497386 ["AccountQuotaName" :content]))) (letvar497386 "Used") (clojure.core/assoc :used (deser-long (clojure.core/get-in letvar497386 ["Used" :content]))) (letvar497386 "Max") (clojure.core/assoc :max (deser-long (clojure.core/get-in letvar497386 ["Max" :content]))))))

(clojure.core/defn- deser-db-cluster-option-group-status [input] (clojure.core/let [letvar497494 {"DBClusterOptionGroupName" (portkey.aws/search-for-tag input "DBClusterOptionGroupName" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar497494 "DBClusterOptionGroupName") (clojure.core/assoc :db-cluster-option-group-name (deser-string (clojure.core/get-in letvar497494 ["DBClusterOptionGroupName" :content]))) (letvar497494 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar497494 ["Status" :content]))))))

(clojure.core/defn- deser-option-group-membership [input] (clojure.core/let [letvar497602 {"OptionGroupName" (portkey.aws/search-for-tag input "OptionGroupName" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar497602 "OptionGroupName") (clojure.core/assoc :option-group-name (deser-string (clojure.core/get-in letvar497602 ["OptionGroupName" :content]))) (letvar497602 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar497602 ["Status" :content]))))))

(clojure.core/defn- deser-upgrade-target [input] (clojure.core/let [letvar497710 {"Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "AutoUpgrade" (portkey.aws/search-for-tag input "AutoUpgrade" :flattened? nil :xmlAttribute? nil), "IsMajorVersionUpgrade" (portkey.aws/search-for-tag input "IsMajorVersionUpgrade" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar497710 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar497710 ["Engine" :content]))) (letvar497710 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar497710 ["EngineVersion" :content]))) (letvar497710 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar497710 ["Description" :content]))) (letvar497710 "AutoUpgrade") (clojure.core/assoc :auto-upgrade (deser-boolean (clojure.core/get-in letvar497710 ["AutoUpgrade" :content]))) (letvar497710 "IsMajorVersionUpgrade") (clojure.core/assoc :is-major-version-upgrade (deser-boolean (clojure.core/get-in letvar497710 ["IsMajorVersionUpgrade" :content]))))))

(clojure.core/defn- deser-available-processor-feature-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-available-processor-feature coll))) input))

(clojure.core/defn- deser-attribute-value-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-reserved-db-instance [input] (clojure.core/let [letvar497852 {"ReservedDBInstanceId" (portkey.aws/search-for-tag input "ReservedDBInstanceId" :flattened? nil :xmlAttribute? nil), "CurrencyCode" (portkey.aws/search-for-tag input "CurrencyCode" :flattened? nil :xmlAttribute? nil), "ReservedDBInstancesOfferingId" (portkey.aws/search-for-tag input "ReservedDBInstancesOfferingId" :flattened? nil :xmlAttribute? nil), "StartTime" (portkey.aws/search-for-tag input "StartTime" :flattened? nil :xmlAttribute? nil), "FixedPrice" (portkey.aws/search-for-tag input "FixedPrice" :flattened? nil :xmlAttribute? nil), "ReservedDBInstanceArn" (portkey.aws/search-for-tag input "ReservedDBInstanceArn" :flattened? nil :xmlAttribute? nil), "DBInstanceCount" (portkey.aws/search-for-tag input "DBInstanceCount" :flattened? nil :xmlAttribute? nil), "Duration" (portkey.aws/search-for-tag input "Duration" :flattened? nil :xmlAttribute? nil), "UsagePrice" (portkey.aws/search-for-tag input "UsagePrice" :flattened? nil :xmlAttribute? nil), "ProductDescription" (portkey.aws/search-for-tag input "ProductDescription" :flattened? nil :xmlAttribute? nil), "DBInstanceClass" (portkey.aws/search-for-tag input "DBInstanceClass" :flattened? nil :xmlAttribute? nil), "State" (portkey.aws/search-for-tag input "State" :flattened? nil :xmlAttribute? nil), "RecurringCharges" (portkey.aws/search-for-tag input "RecurringCharges" :flattened? nil :xmlAttribute? nil), "OfferingType" (portkey.aws/search-for-tag input "OfferingType" :flattened? nil :xmlAttribute? nil), "MultiAZ" (portkey.aws/search-for-tag input "MultiAZ" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar497852 "ReservedDBInstanceId") (clojure.core/assoc :reserved-db-instance-id (deser-string (clojure.core/get-in letvar497852 ["ReservedDBInstanceId" :content]))) (letvar497852 "CurrencyCode") (clojure.core/assoc :currency-code (deser-string (clojure.core/get-in letvar497852 ["CurrencyCode" :content]))) (letvar497852 "ReservedDBInstancesOfferingId") (clojure.core/assoc :reserved-db-instances-offering-id (deser-string (clojure.core/get-in letvar497852 ["ReservedDBInstancesOfferingId" :content]))) (letvar497852 "StartTime") (clojure.core/assoc :start-time (deser-t-stamp (clojure.core/get-in letvar497852 ["StartTime" :content]))) (letvar497852 "FixedPrice") (clojure.core/assoc :fixed-price (deser-double (clojure.core/get-in letvar497852 ["FixedPrice" :content]))) (letvar497852 "ReservedDBInstanceArn") (clojure.core/assoc :reserved-db-instance-arn (deser-string (clojure.core/get-in letvar497852 ["ReservedDBInstanceArn" :content]))) (letvar497852 "DBInstanceCount") (clojure.core/assoc :db-instance-count (deser-integer (clojure.core/get-in letvar497852 ["DBInstanceCount" :content]))) (letvar497852 "Duration") (clojure.core/assoc :duration (deser-integer (clojure.core/get-in letvar497852 ["Duration" :content]))) (letvar497852 "UsagePrice") (clojure.core/assoc :usage-price (deser-double (clojure.core/get-in letvar497852 ["UsagePrice" :content]))) (letvar497852 "ProductDescription") (clojure.core/assoc :product-description (deser-string (clojure.core/get-in letvar497852 ["ProductDescription" :content]))) (letvar497852 "DBInstanceClass") (clojure.core/assoc :db-instance-class (deser-string (clojure.core/get-in letvar497852 ["DBInstanceClass" :content]))) (letvar497852 "State") (clojure.core/assoc :state (deser-string (clojure.core/get-in letvar497852 ["State" :content]))) (letvar497852 "RecurringCharges") (clojure.core/assoc :recurring-charges (deser-recurring-charge-list (clojure.core/get-in letvar497852 ["RecurringCharges" :content]))) (letvar497852 "OfferingType") (clojure.core/assoc :offering-type (deser-string (clojure.core/get-in letvar497852 ["OfferingType" :content]))) (letvar497852 "MultiAZ") (clojure.core/assoc :multi-az (deser-boolean (clojure.core/get-in letvar497852 ["MultiAZ" :content]))))))

(clojure.core/defn- deser-ip-range [input] (clojure.core/let [letvar497960 {"Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "CIDRIP" (portkey.aws/search-for-tag input "CIDRIP" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar497960 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar497960 ["Status" :content]))) (letvar497960 "CIDRIP") (clojure.core/assoc :cidrip (deser-string (clojure.core/get-in letvar497960 ["CIDRIP" :content]))))))

(clojure.core/defn- deser-character-set [input] (clojure.core/let [letvar498068 {"CharacterSetName" (portkey.aws/search-for-tag input "CharacterSetName" :flattened? nil :xmlAttribute? nil), "CharacterSetDescription" (portkey.aws/search-for-tag input "CharacterSetDescription" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar498068 "CharacterSetName") (clojure.core/assoc :character-set-name (deser-string (clojure.core/get-in letvar498068 ["CharacterSetName" :content]))) (letvar498068 "CharacterSetDescription") (clojure.core/assoc :character-set-description (deser-string (clojure.core/get-in letvar498068 ["CharacterSetDescription" :content]))))))

(clojure.core/defn- deser-option-group-option-settings-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-option-group-option-setting coll))) input))

(clojure.core/defn- deser-tag [input] (clojure.core/let [letvar498193 {"Key" (portkey.aws/search-for-tag input "Key" :flattened? nil :xmlAttribute? nil), "Value" (portkey.aws/search-for-tag input "Value" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar498193 "Key") (clojure.core/assoc :key (deser-string (clojure.core/get-in letvar498193 ["Key" :content]))) (letvar498193 "Value") (clojure.core/assoc :value (deser-string (clojure.core/get-in letvar498193 ["Value" :content]))))))

(clojure.core/defn- deser-boolean-optional [input] (clojure.core/when-let [boolstr__283693__auto__ (portkey.aws/unbox-xml-primitive-value input)] (clojure.core/cond (clojure.core/= "true" boolstr__283693__auto__) true (clojure.core/= "false" boolstr__283693__auto__) false)))

(clojure.core/defn- deser-options-depended-on [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-option-setting [input] (clojure.core/let [letvar498320 {"DataType" (portkey.aws/search-for-tag input "DataType" :flattened? nil :xmlAttribute? nil), "AllowedValues" (portkey.aws/search-for-tag input "AllowedValues" :flattened? nil :xmlAttribute? nil), "Value" (portkey.aws/search-for-tag input "Value" :flattened? nil :xmlAttribute? nil), "ApplyType" (portkey.aws/search-for-tag input "ApplyType" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "DefaultValue" (portkey.aws/search-for-tag input "DefaultValue" :flattened? nil :xmlAttribute? nil), "IsModifiable" (portkey.aws/search-for-tag input "IsModifiable" :flattened? nil :xmlAttribute? nil), "IsCollection" (portkey.aws/search-for-tag input "IsCollection" :flattened? nil :xmlAttribute? nil), "Name" (portkey.aws/search-for-tag input "Name" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar498320 "DataType") (clojure.core/assoc :data-type (deser-string (clojure.core/get-in letvar498320 ["DataType" :content]))) (letvar498320 "AllowedValues") (clojure.core/assoc :allowed-values (deser-string (clojure.core/get-in letvar498320 ["AllowedValues" :content]))) (letvar498320 "Value") (clojure.core/assoc :value (deser-string (clojure.core/get-in letvar498320 ["Value" :content]))) (letvar498320 "ApplyType") (clojure.core/assoc :apply-type (deser-string (clojure.core/get-in letvar498320 ["ApplyType" :content]))) (letvar498320 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar498320 ["Description" :content]))) (letvar498320 "DefaultValue") (clojure.core/assoc :default-value (deser-string (clojure.core/get-in letvar498320 ["DefaultValue" :content]))) (letvar498320 "IsModifiable") (clojure.core/assoc :is-modifiable (deser-boolean (clojure.core/get-in letvar498320 ["IsModifiable" :content]))) (letvar498320 "IsCollection") (clojure.core/assoc :is-collection (deser-boolean (clojure.core/get-in letvar498320 ["IsCollection" :content]))) (letvar498320 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar498320 ["Name" :content]))))))

(clojure.core/defn- deser-db-instance-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-instance coll))) input))

(clojure.core/defn- deser-global-cluster-member-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-global-cluster-member coll))) input))

(clojure.core/defn- deser-db-instance-role [input] (clojure.core/let [letvar498462 {"RoleArn" (portkey.aws/search-for-tag input "RoleArn" :flattened? nil :xmlAttribute? nil), "FeatureName" (portkey.aws/search-for-tag input "FeatureName" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar498462 "RoleArn") (clojure.core/assoc :role-arn (deser-string (clojure.core/get-in letvar498462 ["RoleArn" :content]))) (letvar498462 "FeatureName") (clojure.core/assoc :feature-name (deser-string (clojure.core/get-in letvar498462 ["FeatureName" :content]))) (letvar498462 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar498462 ["Status" :content]))))))

(clojure.core/defn- deser-engine-mode-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-event-subscriptions-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-event-subscription coll))) input))

(clojure.core/defn- deser-db-snapshot-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-snapshot coll))) input))

(clojure.core/defn- deser-db-cluster-option-group-memberships [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-option-group-status coll))) input))

(clojure.core/defn- deser-db-cluster-endpoint [input] (clojure.core/let [letvar498638 {"ExcludedMembers" (portkey.aws/search-for-tag input "ExcludedMembers" :flattened? nil :xmlAttribute? nil), "EndpointType" (portkey.aws/search-for-tag input "EndpointType" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "DBClusterEndpointIdentifier" (portkey.aws/search-for-tag input "DBClusterEndpointIdentifier" :flattened? nil :xmlAttribute? nil), "CustomEndpointType" (portkey.aws/search-for-tag input "CustomEndpointType" :flattened? nil :xmlAttribute? nil), "StaticMembers" (portkey.aws/search-for-tag input "StaticMembers" :flattened? nil :xmlAttribute? nil), "DBClusterEndpointArn" (portkey.aws/search-for-tag input "DBClusterEndpointArn" :flattened? nil :xmlAttribute? nil), "Endpoint" (portkey.aws/search-for-tag input "Endpoint" :flattened? nil :xmlAttribute? nil), "DBClusterIdentifier" (portkey.aws/search-for-tag input "DBClusterIdentifier" :flattened? nil :xmlAttribute? nil), "DBClusterEndpointResourceIdentifier" (portkey.aws/search-for-tag input "DBClusterEndpointResourceIdentifier" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar498638 "ExcludedMembers") (clojure.core/assoc :excluded-members (deser-string-list (clojure.core/get-in letvar498638 ["ExcludedMembers" :content]))) (letvar498638 "EndpointType") (clojure.core/assoc :endpoint-type (deser-string (clojure.core/get-in letvar498638 ["EndpointType" :content]))) (letvar498638 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar498638 ["Status" :content]))) (letvar498638 "DBClusterEndpointIdentifier") (clojure.core/assoc :db-cluster-endpoint-identifier (deser-string (clojure.core/get-in letvar498638 ["DBClusterEndpointIdentifier" :content]))) (letvar498638 "CustomEndpointType") (clojure.core/assoc :custom-endpoint-type (deser-string (clojure.core/get-in letvar498638 ["CustomEndpointType" :content]))) (letvar498638 "StaticMembers") (clojure.core/assoc :static-members (deser-string-list (clojure.core/get-in letvar498638 ["StaticMembers" :content]))) (letvar498638 "DBClusterEndpointArn") (clojure.core/assoc :db-cluster-endpoint-arn (deser-string (clojure.core/get-in letvar498638 ["DBClusterEndpointArn" :content]))) (letvar498638 "Endpoint") (clojure.core/assoc :endpoint (deser-string (clojure.core/get-in letvar498638 ["Endpoint" :content]))) (letvar498638 "DBClusterIdentifier") (clojure.core/assoc :db-cluster-identifier (deser-string (clojure.core/get-in letvar498638 ["DBClusterIdentifier" :content]))) (letvar498638 "DBClusterEndpointResourceIdentifier") (clojure.core/assoc :db-cluster-endpoint-resource-identifier (deser-string (clojure.core/get-in letvar498638 ["DBClusterEndpointResourceIdentifier" :content]))))))

(clojure.core/defn- deser-engine-defaults [input] (clojure.core/let [letvar498746 {"DBParameterGroupFamily" (portkey.aws/search-for-tag input "DBParameterGroupFamily" :flattened? nil :xmlAttribute? nil), "Marker" (portkey.aws/search-for-tag input "Marker" :flattened? nil :xmlAttribute? nil), "Parameters" (portkey.aws/search-for-tag input "Parameters" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar498746 "DBParameterGroupFamily") (clojure.core/assoc :db-parameter-group-family (deser-string (clojure.core/get-in letvar498746 ["DBParameterGroupFamily" :content]))) (letvar498746 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar498746 ["Marker" :content]))) (letvar498746 "Parameters") (clojure.core/assoc :parameters (deser-parameters-list (clojure.core/get-in letvar498746 ["Parameters" :content]))))))

(clojure.core/defn- deser-availability-zones [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-db-subnet-groups [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-subnet-group coll))) input))

(clojure.core/defn- deser-long-optional [input] (java.lang.Long. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-global-cluster-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-global-cluster coll))) input))

(clojure.core/defn- deser-processor-feature-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-processor-feature coll))) input))

(clojure.core/defn- deser-integer-optional [input] (java.lang.Integer. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-db-security-group [input] (clojure.core/let [letvar498926 {"OwnerId" (portkey.aws/search-for-tag input "OwnerId" :flattened? nil :xmlAttribute? nil), "DBSecurityGroupName" (portkey.aws/search-for-tag input "DBSecurityGroupName" :flattened? nil :xmlAttribute? nil), "DBSecurityGroupDescription" (portkey.aws/search-for-tag input "DBSecurityGroupDescription" :flattened? nil :xmlAttribute? nil), "VpcId" (portkey.aws/search-for-tag input "VpcId" :flattened? nil :xmlAttribute? nil), "EC2SecurityGroups" (portkey.aws/search-for-tag input "EC2SecurityGroups" :flattened? nil :xmlAttribute? nil), "IPRanges" (portkey.aws/search-for-tag input "IPRanges" :flattened? nil :xmlAttribute? nil), "DBSecurityGroupArn" (portkey.aws/search-for-tag input "DBSecurityGroupArn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar498926 "OwnerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar498926 ["OwnerId" :content]))) (letvar498926 "DBSecurityGroupName") (clojure.core/assoc :db-security-group-name (deser-string (clojure.core/get-in letvar498926 ["DBSecurityGroupName" :content]))) (letvar498926 "DBSecurityGroupDescription") (clojure.core/assoc :db-security-group-description (deser-string (clojure.core/get-in letvar498926 ["DBSecurityGroupDescription" :content]))) (letvar498926 "VpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar498926 ["VpcId" :content]))) (letvar498926 "EC2SecurityGroups") (clojure.core/assoc :ec-2-security-groups (deser-ec-2-security-group-list (clojure.core/get-in letvar498926 ["EC2SecurityGroups" :content]))) (letvar498926 "IPRanges") (clojure.core/assoc :ip-ranges (deser-ip-range-list (clojure.core/get-in letvar498926 ["IPRanges" :content]))) (letvar498926 "DBSecurityGroupArn") (clojure.core/assoc :db-security-group-arn (deser-string (clojure.core/get-in letvar498926 ["DBSecurityGroupArn" :content]))))))

(clojure.core/defn- deser-supported-timezones-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-timezone coll))) input))

(clojure.core/defn- deser-range-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-range coll))) input))

(clojure.core/defn- deser-db-instance-status-info-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-instance-status-info coll))) input))

(clojure.core/defn- deser-certificate [input] (clojure.core/let [letvar499085 {"CertificateIdentifier" (portkey.aws/search-for-tag input "CertificateIdentifier" :flattened? nil :xmlAttribute? nil), "CertificateType" (portkey.aws/search-for-tag input "CertificateType" :flattened? nil :xmlAttribute? nil), "Thumbprint" (portkey.aws/search-for-tag input "Thumbprint" :flattened? nil :xmlAttribute? nil), "ValidFrom" (portkey.aws/search-for-tag input "ValidFrom" :flattened? nil :xmlAttribute? nil), "ValidTill" (portkey.aws/search-for-tag input "ValidTill" :flattened? nil :xmlAttribute? nil), "CertificateArn" (portkey.aws/search-for-tag input "CertificateArn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar499085 "CertificateIdentifier") (clojure.core/assoc :certificate-identifier (deser-string (clojure.core/get-in letvar499085 ["CertificateIdentifier" :content]))) (letvar499085 "CertificateType") (clojure.core/assoc :certificate-type (deser-string (clojure.core/get-in letvar499085 ["CertificateType" :content]))) (letvar499085 "Thumbprint") (clojure.core/assoc :thumbprint (deser-string (clojure.core/get-in letvar499085 ["Thumbprint" :content]))) (letvar499085 "ValidFrom") (clojure.core/assoc :valid-from (deser-t-stamp (clojure.core/get-in letvar499085 ["ValidFrom" :content]))) (letvar499085 "ValidTill") (clojure.core/assoc :valid-till (deser-t-stamp (clojure.core/get-in letvar499085 ["ValidTill" :content]))) (letvar499085 "CertificateArn") (clojure.core/assoc :certificate-arn (deser-string (clojure.core/get-in letvar499085 ["CertificateArn" :content]))))))

(clojure.core/defn- deser-domain-membership [input] (clojure.core/let [letvar499193 {"Domain" (portkey.aws/search-for-tag input "Domain" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "FQDN" (portkey.aws/search-for-tag input "FQDN" :flattened? nil :xmlAttribute? nil), "IAMRoleName" (portkey.aws/search-for-tag input "IAMRoleName" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar499193 "Domain") (clojure.core/assoc :domain (deser-string (clojure.core/get-in letvar499193 ["Domain" :content]))) (letvar499193 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar499193 ["Status" :content]))) (letvar499193 "FQDN") (clojure.core/assoc :fqdn (deser-string (clojure.core/get-in letvar499193 ["FQDN" :content]))) (letvar499193 "IAMRoleName") (clojure.core/assoc :iam-role-name (deser-string (clojure.core/get-in letvar499193 ["IAMRoleName" :content]))))))

(clojure.core/defn- deser-orderable-db-instance-option [input] (clojure.core/let [letvar499301 {"SupportsIAMDatabaseAuthentication" (portkey.aws/search-for-tag input "SupportsIAMDatabaseAuthentication" :flattened? nil :xmlAttribute? nil), "SupportsIops" (portkey.aws/search-for-tag input "SupportsIops" :flattened? nil :xmlAttribute? nil), "SupportedEngineModes" (portkey.aws/search-for-tag input "SupportedEngineModes" :flattened? nil :xmlAttribute? nil), "MultiAZCapable" (portkey.aws/search-for-tag input "MultiAZCapable" :flattened? nil :xmlAttribute? nil), "MinStorageSize" (portkey.aws/search-for-tag input "MinStorageSize" :flattened? nil :xmlAttribute? nil), "MaxIopsPerGib" (portkey.aws/search-for-tag input "MaxIopsPerGib" :flattened? nil :xmlAttribute? nil), "MinIopsPerDbInstance" (portkey.aws/search-for-tag input "MinIopsPerDbInstance" :flattened? nil :xmlAttribute? nil), "LicenseModel" (portkey.aws/search-for-tag input "LicenseModel" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "AvailableProcessorFeatures" (portkey.aws/search-for-tag input "AvailableProcessorFeatures" :flattened? nil :xmlAttribute? nil), "Vpc" (portkey.aws/search-for-tag input "Vpc" :flattened? nil :xmlAttribute? nil), "SupportsPerformanceInsights" (portkey.aws/search-for-tag input "SupportsPerformanceInsights" :flattened? nil :xmlAttribute? nil), "StorageType" (portkey.aws/search-for-tag input "StorageType" :flattened? nil :xmlAttribute? nil), "MaxStorageSize" (portkey.aws/search-for-tag input "MaxStorageSize" :flattened? nil :xmlAttribute? nil), "MinIopsPerGib" (portkey.aws/search-for-tag input "MinIopsPerGib" :flattened? nil :xmlAttribute? nil), "ReadReplicaCapable" (portkey.aws/search-for-tag input "ReadReplicaCapable" :flattened? nil :xmlAttribute? nil), "DBInstanceClass" (portkey.aws/search-for-tag input "DBInstanceClass" :flattened? nil :xmlAttribute? nil), "SupportsStorageEncryption" (portkey.aws/search-for-tag input "SupportsStorageEncryption" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "AvailabilityZones" (portkey.aws/search-for-tag input "AvailabilityZones" :flattened? nil :xmlAttribute? nil), "SupportsEnhancedMonitoring" (portkey.aws/search-for-tag input "SupportsEnhancedMonitoring" :flattened? nil :xmlAttribute? nil), "MaxIopsPerDbInstance" (portkey.aws/search-for-tag input "MaxIopsPerDbInstance" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar499301 "SupportsIAMDatabaseAuthentication") (clojure.core/assoc :supports-iam-database-authentication (deser-boolean (clojure.core/get-in letvar499301 ["SupportsIAMDatabaseAuthentication" :content]))) (letvar499301 "SupportsIops") (clojure.core/assoc :supports-iops (deser-boolean (clojure.core/get-in letvar499301 ["SupportsIops" :content]))) (letvar499301 "SupportedEngineModes") (clojure.core/assoc :supported-engine-modes (deser-engine-mode-list (clojure.core/get-in letvar499301 ["SupportedEngineModes" :content]))) (letvar499301 "MultiAZCapable") (clojure.core/assoc :multi-az-capable (deser-boolean (clojure.core/get-in letvar499301 ["MultiAZCapable" :content]))) (letvar499301 "MinStorageSize") (clojure.core/assoc :min-storage-size (deser-integer-optional (clojure.core/get-in letvar499301 ["MinStorageSize" :content]))) (letvar499301 "MaxIopsPerGib") (clojure.core/assoc :max-iops-per-gib (deser-double-optional (clojure.core/get-in letvar499301 ["MaxIopsPerGib" :content]))) (letvar499301 "MinIopsPerDbInstance") (clojure.core/assoc :min-iops-per-db-instance (deser-integer-optional (clojure.core/get-in letvar499301 ["MinIopsPerDbInstance" :content]))) (letvar499301 "LicenseModel") (clojure.core/assoc :license-model (deser-string (clojure.core/get-in letvar499301 ["LicenseModel" :content]))) (letvar499301 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar499301 ["EngineVersion" :content]))) (letvar499301 "AvailableProcessorFeatures") (clojure.core/assoc :available-processor-features (deser-available-processor-feature-list (clojure.core/get-in letvar499301 ["AvailableProcessorFeatures" :content]))) (letvar499301 "Vpc") (clojure.core/assoc :vpc (deser-boolean (clojure.core/get-in letvar499301 ["Vpc" :content]))) (letvar499301 "SupportsPerformanceInsights") (clojure.core/assoc :supports-performance-insights (deser-boolean (clojure.core/get-in letvar499301 ["SupportsPerformanceInsights" :content]))) (letvar499301 "StorageType") (clojure.core/assoc :storage-type (deser-string (clojure.core/get-in letvar499301 ["StorageType" :content]))) (letvar499301 "MaxStorageSize") (clojure.core/assoc :max-storage-size (deser-integer-optional (clojure.core/get-in letvar499301 ["MaxStorageSize" :content]))) (letvar499301 "MinIopsPerGib") (clojure.core/assoc :min-iops-per-gib (deser-double-optional (clojure.core/get-in letvar499301 ["MinIopsPerGib" :content]))) (letvar499301 "ReadReplicaCapable") (clojure.core/assoc :read-replica-capable (deser-boolean (clojure.core/get-in letvar499301 ["ReadReplicaCapable" :content]))) (letvar499301 "DBInstanceClass") (clojure.core/assoc :db-instance-class (deser-string (clojure.core/get-in letvar499301 ["DBInstanceClass" :content]))) (letvar499301 "SupportsStorageEncryption") (clojure.core/assoc :supports-storage-encryption (deser-boolean (clojure.core/get-in letvar499301 ["SupportsStorageEncryption" :content]))) (letvar499301 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar499301 ["Engine" :content]))) (letvar499301 "AvailabilityZones") (clojure.core/assoc :availability-zones (deser-availability-zone-list (clojure.core/get-in letvar499301 ["AvailabilityZones" :content]))) (letvar499301 "SupportsEnhancedMonitoring") (clojure.core/assoc :supports-enhanced-monitoring (deser-boolean (clojure.core/get-in letvar499301 ["SupportsEnhancedMonitoring" :content]))) (letvar499301 "MaxIopsPerDbInstance") (clojure.core/assoc :max-iops-per-db-instance (deser-integer-optional (clojure.core/get-in letvar499301 ["MaxIopsPerDbInstance" :content]))))))

(clojure.core/defn- deser-pending-modified-values [input] (clojure.core/let [letvar499409 {"BackupRetentionPeriod" (portkey.aws/search-for-tag input "BackupRetentionPeriod" :flattened? nil :xmlAttribute? nil), "PendingCloudwatchLogsExports" (portkey.aws/search-for-tag input "PendingCloudwatchLogsExports" :flattened? nil :xmlAttribute? nil), "DBInstanceIdentifier" (portkey.aws/search-for-tag input "DBInstanceIdentifier" :flattened? nil :xmlAttribute? nil), "MasterUserPassword" (portkey.aws/search-for-tag input "MasterUserPassword" :flattened? nil :xmlAttribute? nil), "LicenseModel" (portkey.aws/search-for-tag input "LicenseModel" :flattened? nil :xmlAttribute? nil), "AllocatedStorage" (portkey.aws/search-for-tag input "AllocatedStorage" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "DBSubnetGroupName" (portkey.aws/search-for-tag input "DBSubnetGroupName" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "Iops" (portkey.aws/search-for-tag input "Iops" :flattened? nil :xmlAttribute? nil), "StorageType" (portkey.aws/search-for-tag input "StorageType" :flattened? nil :xmlAttribute? nil), "ProcessorFeatures" (portkey.aws/search-for-tag input "ProcessorFeatures" :flattened? nil :xmlAttribute? nil), "CACertificateIdentifier" (portkey.aws/search-for-tag input "CACertificateIdentifier" :flattened? nil :xmlAttribute? nil), "DBInstanceClass" (portkey.aws/search-for-tag input "DBInstanceClass" :flattened? nil :xmlAttribute? nil), "MultiAZ" (portkey.aws/search-for-tag input "MultiAZ" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar499409 "BackupRetentionPeriod") (clojure.core/assoc :backup-retention-period (deser-integer-optional (clojure.core/get-in letvar499409 ["BackupRetentionPeriod" :content]))) (letvar499409 "PendingCloudwatchLogsExports") (clojure.core/assoc :pending-cloudwatch-logs-exports (deser-pending-cloudwatch-logs-exports (clojure.core/get-in letvar499409 ["PendingCloudwatchLogsExports" :content]))) (letvar499409 "DBInstanceIdentifier") (clojure.core/assoc :db-instance-identifier (deser-string (clojure.core/get-in letvar499409 ["DBInstanceIdentifier" :content]))) (letvar499409 "MasterUserPassword") (clojure.core/assoc :master-user-password (deser-string (clojure.core/get-in letvar499409 ["MasterUserPassword" :content]))) (letvar499409 "LicenseModel") (clojure.core/assoc :license-model (deser-string (clojure.core/get-in letvar499409 ["LicenseModel" :content]))) (letvar499409 "AllocatedStorage") (clojure.core/assoc :allocated-storage (deser-integer-optional (clojure.core/get-in letvar499409 ["AllocatedStorage" :content]))) (letvar499409 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar499409 ["EngineVersion" :content]))) (letvar499409 "DBSubnetGroupName") (clojure.core/assoc :db-subnet-group-name (deser-string (clojure.core/get-in letvar499409 ["DBSubnetGroupName" :content]))) (letvar499409 "Port") (clojure.core/assoc :port (deser-integer-optional (clojure.core/get-in letvar499409 ["Port" :content]))) (letvar499409 "Iops") (clojure.core/assoc :iops (deser-integer-optional (clojure.core/get-in letvar499409 ["Iops" :content]))) (letvar499409 "StorageType") (clojure.core/assoc :storage-type (deser-string (clojure.core/get-in letvar499409 ["StorageType" :content]))) (letvar499409 "ProcessorFeatures") (clojure.core/assoc :processor-features (deser-processor-feature-list (clojure.core/get-in letvar499409 ["ProcessorFeatures" :content]))) (letvar499409 "CACertificateIdentifier") (clojure.core/assoc :ca-certificate-identifier (deser-string (clojure.core/get-in letvar499409 ["CACertificateIdentifier" :content]))) (letvar499409 "DBInstanceClass") (clojure.core/assoc :db-instance-class (deser-string (clojure.core/get-in letvar499409 ["DBInstanceClass" :content]))) (letvar499409 "MultiAZ") (clojure.core/assoc :multi-az (deser-boolean-optional (clojure.core/get-in letvar499409 ["MultiAZ" :content]))))))

(clojure.core/defn- deser-subnet-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-subnet coll))) input))

(clojure.core/defn- deser-available-processor-feature [input] (clojure.core/let [letvar499534 {"Name" (portkey.aws/search-for-tag input "Name" :flattened? nil :xmlAttribute? nil), "DefaultValue" (portkey.aws/search-for-tag input "DefaultValue" :flattened? nil :xmlAttribute? nil), "AllowedValues" (portkey.aws/search-for-tag input "AllowedValues" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar499534 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar499534 ["Name" :content]))) (letvar499534 "DefaultValue") (clojure.core/assoc :default-value (deser-string (clojure.core/get-in letvar499534 ["DefaultValue" :content]))) (letvar499534 "AllowedValues") (clojure.core/assoc :allowed-values (deser-string (clojure.core/get-in letvar499534 ["AllowedValues" :content]))))))

(clojure.core/defn- deser-db-subnet-group [input] (clojure.core/let [letvar499642 {"DBSubnetGroupName" (portkey.aws/search-for-tag input "DBSubnetGroupName" :flattened? nil :xmlAttribute? nil), "DBSubnetGroupDescription" (portkey.aws/search-for-tag input "DBSubnetGroupDescription" :flattened? nil :xmlAttribute? nil), "VpcId" (portkey.aws/search-for-tag input "VpcId" :flattened? nil :xmlAttribute? nil), "SubnetGroupStatus" (portkey.aws/search-for-tag input "SubnetGroupStatus" :flattened? nil :xmlAttribute? nil), "Subnets" (portkey.aws/search-for-tag input "Subnets" :flattened? nil :xmlAttribute? nil), "DBSubnetGroupArn" (portkey.aws/search-for-tag input "DBSubnetGroupArn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar499642 "DBSubnetGroupName") (clojure.core/assoc :db-subnet-group-name (deser-string (clojure.core/get-in letvar499642 ["DBSubnetGroupName" :content]))) (letvar499642 "DBSubnetGroupDescription") (clojure.core/assoc :db-subnet-group-description (deser-string (clojure.core/get-in letvar499642 ["DBSubnetGroupDescription" :content]))) (letvar499642 "VpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar499642 ["VpcId" :content]))) (letvar499642 "SubnetGroupStatus") (clojure.core/assoc :subnet-group-status (deser-string (clojure.core/get-in letvar499642 ["SubnetGroupStatus" :content]))) (letvar499642 "Subnets") (clojure.core/assoc :subnets (deser-subnet-list (clojure.core/get-in letvar499642 ["Subnets" :content]))) (letvar499642 "DBSubnetGroupArn") (clojure.core/assoc :db-subnet-group-arn (deser-string (clojure.core/get-in letvar499642 ["DBSubnetGroupArn" :content]))))))

(clojure.core/defn- deser-boolean [input] (clojure.core/when-let [boolstr__283693__auto__ (portkey.aws/unbox-xml-primitive-value input)] (clojure.core/cond (clojure.core/= "true" boolstr__283693__auto__) true (clojure.core/= "false" boolstr__283693__auto__) false)))

(clojure.core/defn- response-source-not-found-fault ([input] (response-source-not-found-fault nil input)) ([resultWrapper499646 input] (clojure.core/let [rawinput499645 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499647 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-restore-db-cluster-to-point-in-time-result ([input] (response-restore-db-cluster-to-point-in-time-result nil input)) ([resultWrapper499649 input] (clojure.core/let [rawinput499648 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499650 {"DBCluster" (portkey.aws/search-for-tag rawinput499648 "DBCluster" :flattened? nil :result-wrapper resultWrapper499649)}] (clojure.core/cond-> {} (letvar499650 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar499650 ["DBCluster" :content])))))))

(clojure.core/defn- response-delete-global-cluster-result ([input] (response-delete-global-cluster-result nil input)) ([resultWrapper499652 input] (clojure.core/let [rawinput499651 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499653 {"GlobalCluster" (portkey.aws/search-for-tag rawinput499651 "GlobalCluster" :flattened? nil :result-wrapper resultWrapper499652)}] (clojure.core/cond-> {} (letvar499653 "GlobalCluster") (clojure.core/assoc :global-cluster (deser-global-cluster (clojure.core/get-in letvar499653 ["GlobalCluster" :content])))))))

(clojure.core/defn- response-db-instance-not-found-fault ([input] (response-db-instance-not-found-fault nil input)) ([resultWrapper499655 input] (clojure.core/let [rawinput499654 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499656 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-restore-db-instance-from-db-snapshot-result ([input] (response-restore-db-instance-from-db-snapshot-result nil input)) ([resultWrapper499658 input] (clojure.core/let [rawinput499657 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499659 {"DBInstance" (portkey.aws/search-for-tag rawinput499657 "DBInstance" :flattened? nil :result-wrapper resultWrapper499658)}] (clojure.core/cond-> {} (letvar499659 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar499659 ["DBInstance" :content])))))))

(clojure.core/defn- response-remove-source-identifier-from-subscription-result ([input] (response-remove-source-identifier-from-subscription-result nil input)) ([resultWrapper499661 input] (clojure.core/let [rawinput499660 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499662 {"EventSubscription" (portkey.aws/search-for-tag rawinput499660 "EventSubscription" :flattened? nil :result-wrapper resultWrapper499661)}] (clojure.core/cond-> {} (letvar499662 "EventSubscription") (clojure.core/assoc :event-subscription (deser-event-subscription (clojure.core/get-in letvar499662 ["EventSubscription" :content])))))))

(clojure.core/defn- response-db-cluster-backtrack-not-found-fault ([input] (response-db-cluster-backtrack-not-found-fault nil input)) ([resultWrapper499664 input] (clojure.core/let [rawinput499663 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499665 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-delete-db-snapshot-result ([input] (response-delete-db-snapshot-result nil input)) ([resultWrapper499667 input] (clojure.core/let [rawinput499666 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499668 {"DBSnapshot" (portkey.aws/search-for-tag rawinput499666 "DBSnapshot" :flattened? nil :result-wrapper resultWrapper499667)}] (clojure.core/cond-> {} (letvar499668 "DBSnapshot") (clojure.core/assoc :db-snapshot (deser-db-snapshot (clojure.core/get-in letvar499668 ["DBSnapshot" :content])))))))

(clojure.core/defn- response-snapshot-quota-exceeded-fault ([input] (response-snapshot-quota-exceeded-fault nil input)) ([resultWrapper499670 input] (clojure.core/let [rawinput499669 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499671 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-modify-global-cluster-result ([input] (response-modify-global-cluster-result nil input)) ([resultWrapper499673 input] (clojure.core/let [rawinput499672 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499674 {"GlobalCluster" (portkey.aws/search-for-tag rawinput499672 "GlobalCluster" :flattened? nil :result-wrapper resultWrapper499673)}] (clojure.core/cond-> {} (letvar499674 "GlobalCluster") (clojure.core/assoc :global-cluster (deser-global-cluster (clojure.core/get-in letvar499674 ["GlobalCluster" :content])))))))

(clojure.core/defn- response-domain-not-found-fault ([input] (response-domain-not-found-fault nil input)) ([resultWrapper499676 input] (clojure.core/let [rawinput499675 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499677 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-copy-db-parameter-group-result ([input] (response-copy-db-parameter-group-result nil input)) ([resultWrapper499679 input] (clojure.core/let [rawinput499678 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499680 {"DBParameterGroup" (portkey.aws/search-for-tag rawinput499678 "DBParameterGroup" :flattened? nil :result-wrapper resultWrapper499679)}] (clojure.core/cond-> {} (letvar499680 "DBParameterGroup") (clojure.core/assoc :db-parameter-group (deser-db-parameter-group (clojure.core/get-in letvar499680 ["DBParameterGroup" :content])))))))

(clojure.core/defn- response-db-cluster-endpoint-already-exists-fault ([input] (response-db-cluster-endpoint-already-exists-fault nil input)) ([resultWrapper499682 input] (clojure.core/let [rawinput499681 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499683 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-snapshot-already-exists-fault ([input] (response-db-snapshot-already-exists-fault nil input)) ([resultWrapper499685 input] (clojure.core/let [rawinput499684 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499686 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-promote-read-replica-db-cluster-result ([input] (response-promote-read-replica-db-cluster-result nil input)) ([resultWrapper499688 input] (clojure.core/let [rawinput499687 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499689 {"DBCluster" (portkey.aws/search-for-tag rawinput499687 "DBCluster" :flattened? nil :result-wrapper resultWrapper499688)}] (clojure.core/cond-> {} (letvar499689 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar499689 ["DBCluster" :content])))))))

(clojure.core/defn- response-restore-db-instance-to-point-in-time-result ([input] (response-restore-db-instance-to-point-in-time-result nil input)) ([resultWrapper499691 input] (clojure.core/let [rawinput499690 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499692 {"DBInstance" (portkey.aws/search-for-tag rawinput499690 "DBInstance" :flattened? nil :result-wrapper resultWrapper499691)}] (clojure.core/cond-> {} (letvar499692 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar499692 ["DBInstance" :content])))))))

(clojure.core/defn- response-db-parameter-group-details ([input] (response-db-parameter-group-details nil input)) ([resultWrapper499694 input] (clojure.core/let [rawinput499693 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499695 {"Parameters" (portkey.aws/search-for-tag rawinput499693 "Parameters" :flattened? nil :result-wrapper resultWrapper499694), "Marker" (portkey.aws/search-for-tag rawinput499693 "Marker" :flattened? nil :result-wrapper resultWrapper499694)}] (clojure.core/cond-> {} (letvar499695 "Parameters") (clojure.core/assoc :parameters (deser-parameters-list (clojure.core/get-in letvar499695 ["Parameters" :content]))) (letvar499695 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar499695 ["Marker" :content])))))))

(clojure.core/defn- response-source-region-message ([input] (response-source-region-message nil input)) ([resultWrapper499697 input] (clojure.core/let [rawinput499696 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499698 {"Marker" (portkey.aws/search-for-tag rawinput499696 "Marker" :flattened? nil :result-wrapper resultWrapper499697), "SourceRegions" (portkey.aws/search-for-tag rawinput499696 "SourceRegions" :flattened? nil :result-wrapper resultWrapper499697)}] (clojure.core/cond-> {} (letvar499698 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar499698 ["Marker" :content]))) (letvar499698 "SourceRegions") (clojure.core/assoc :source-regions (deser-source-region-list (clojure.core/get-in letvar499698 ["SourceRegions" :content])))))))

(clojure.core/defn- response-invalid-db-cluster-capacity-fault ([input] (response-invalid-db-cluster-capacity-fault nil input)) ([resultWrapper499700 input] (clojure.core/let [rawinput499699 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499701 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-global-cluster-quota-exceeded-fault ([input] (response-global-cluster-quota-exceeded-fault nil input)) ([resultWrapper499703 input] (clojure.core/let [rawinput499702 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499704 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-already-exists-fault ([input] (response-db-cluster-already-exists-fault nil input)) ([resultWrapper499706 input] (clojure.core/let [rawinput499705 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499707 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-start-db-cluster-result ([input] (response-start-db-cluster-result nil input)) ([resultWrapper499709 input] (clojure.core/let [rawinput499708 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499710 {"DBCluster" (portkey.aws/search-for-tag rawinput499708 "DBCluster" :flattened? nil :result-wrapper resultWrapper499709)}] (clojure.core/cond-> {} (letvar499710 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar499710 ["DBCluster" :content])))))))

(clojure.core/defn- response-create-db-cluster-result ([input] (response-create-db-cluster-result nil input)) ([resultWrapper499712 input] (clojure.core/let [rawinput499711 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499713 {"DBCluster" (portkey.aws/search-for-tag rawinput499711 "DBCluster" :flattened? nil :result-wrapper resultWrapper499712)}] (clojure.core/cond-> {} (letvar499713 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar499713 ["DBCluster" :content])))))))

(clojure.core/defn- response-invalid-db-instance-state-fault ([input] (response-invalid-db-instance-state-fault nil input)) ([resultWrapper499715 input] (clojure.core/let [rawinput499714 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499716 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-sns-no-authorization-fault ([input] (response-sns-no-authorization-fault nil input)) ([resultWrapper499718 input] (clojure.core/let [rawinput499717 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499719 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-copy-option-group-result ([input] (response-copy-option-group-result nil input)) ([resultWrapper499721 input] (clojure.core/let [rawinput499720 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499722 {"OptionGroup" (portkey.aws/search-for-tag rawinput499720 "OptionGroup" :flattened? nil :result-wrapper resultWrapper499721)}] (clojure.core/cond-> {} (letvar499722 "OptionGroup") (clojure.core/assoc :option-group (deser-option-group (clojure.core/get-in letvar499722 ["OptionGroup" :content])))))))

(clojure.core/defn- response-reboot-db-instance-result ([input] (response-reboot-db-instance-result nil input)) ([resultWrapper499724 input] (clojure.core/let [rawinput499723 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499725 {"DBInstance" (portkey.aws/search-for-tag rawinput499723 "DBInstance" :flattened? nil :result-wrapper resultWrapper499724)}] (clojure.core/cond-> {} (letvar499725 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar499725 ["DBInstance" :content])))))))

(clojure.core/defn- response-instance-quota-exceeded-fault ([input] (response-instance-quota-exceeded-fault nil input)) ([resultWrapper499727 input] (clojure.core/let [rawinput499726 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499728 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-parameter-group-name-message ([input] (response-db-parameter-group-name-message nil input)) ([resultWrapper499730 input] (clojure.core/let [rawinput499729 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499731 {"DBParameterGroupName" (portkey.aws/search-for-tag rawinput499729 "DBParameterGroupName" :flattened? nil :result-wrapper resultWrapper499730)}] (clojure.core/cond-> {} (letvar499731 "DBParameterGroupName") (clojure.core/assoc :db-parameter-group-name (deser-string (clojure.core/get-in letvar499731 ["DBParameterGroupName" :content])))))))

(clojure.core/defn- response-apply-pending-maintenance-action-result ([input] (response-apply-pending-maintenance-action-result nil input)) ([resultWrapper499733 input] (clojure.core/let [rawinput499732 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499734 {"ResourcePendingMaintenanceActions" (portkey.aws/search-for-tag rawinput499732 "ResourcePendingMaintenanceActions" :flattened? nil :result-wrapper resultWrapper499733)}] (clojure.core/cond-> {} (letvar499734 "ResourcePendingMaintenanceActions") (clojure.core/assoc :resource-pending-maintenance-actions (deser-resource-pending-maintenance-actions (clojure.core/get-in letvar499734 ["ResourcePendingMaintenanceActions" :content])))))))

(clojure.core/defn- response-db-cluster-parameter-group-name-message ([input] (response-db-cluster-parameter-group-name-message nil input)) ([resultWrapper499736 input] (clojure.core/let [rawinput499735 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499737 {"DBClusterParameterGroupName" (portkey.aws/search-for-tag rawinput499735 "DBClusterParameterGroupName" :flattened? nil :result-wrapper resultWrapper499736)}] (clojure.core/cond-> {} (letvar499737 "DBClusterParameterGroupName") (clojure.core/assoc :db-cluster-parameter-group-name (deser-string (clojure.core/get-in letvar499737 ["DBClusterParameterGroupName" :content])))))))

(clojure.core/defn- response-db-cluster-endpoint-not-found-fault ([input] (response-db-cluster-endpoint-not-found-fault nil input)) ([resultWrapper499739 input] (clojure.core/let [rawinput499738 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499740 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-restore-db-cluster-from-snapshot-result ([input] (response-restore-db-cluster-from-snapshot-result nil input)) ([resultWrapper499742 input] (clojure.core/let [rawinput499741 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499743 {"DBCluster" (portkey.aws/search-for-tag rawinput499741 "DBCluster" :flattened? nil :result-wrapper resultWrapper499742)}] (clojure.core/cond-> {} (letvar499743 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar499743 ["DBCluster" :content])))))))

(clojure.core/defn- response-option-group-not-found-fault ([input] (response-option-group-not-found-fault nil input)) ([resultWrapper499745 input] (clojure.core/let [rawinput499744 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499746 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-subnet-group-message ([input] (response-db-subnet-group-message nil input)) ([resultWrapper499748 input] (clojure.core/let [rawinput499747 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499749 {"Marker" (portkey.aws/search-for-tag rawinput499747 "Marker" :flattened? nil :result-wrapper resultWrapper499748), "DBSubnetGroups" (portkey.aws/search-for-tag rawinput499747 "DBSubnetGroups" :flattened? nil :result-wrapper resultWrapper499748)}] (clojure.core/cond-> {} (letvar499749 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar499749 ["Marker" :content]))) (letvar499749 "DBSubnetGroups") (clojure.core/assoc :db-subnet-groups (deser-db-subnet-groups (clojure.core/get-in letvar499749 ["DBSubnetGroups" :content])))))))

(clojure.core/defn- response-promote-read-replica-result ([input] (response-promote-read-replica-result nil input)) ([resultWrapper499751 input] (clojure.core/let [rawinput499750 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499752 {"DBInstance" (portkey.aws/search-for-tag rawinput499750 "DBInstance" :flattened? nil :result-wrapper resultWrapper499751)}] (clojure.core/cond-> {} (letvar499752 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar499752 ["DBInstance" :content])))))))

(clojure.core/defn- response-invalid-db-cluster-endpoint-state-fault ([input] (response-invalid-db-cluster-endpoint-state-fault nil input)) ([resultWrapper499754 input] (clojure.core/let [rawinput499753 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499755 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-vpc-network-state-fault ([input] (response-invalid-vpc-network-state-fault nil input)) ([resultWrapper499757 input] (clojure.core/let [rawinput499756 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499758 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-role-already-exists-fault ([input] (response-db-cluster-role-already-exists-fault nil input)) ([resultWrapper499760 input] (clojure.core/let [rawinput499759 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499761 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-instance-already-exists-fault ([input] (response-db-instance-already-exists-fault nil input)) ([resultWrapper499763 input] (clojure.core/let [rawinput499762 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499764 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-shared-snapshot-quota-exceeded-fault ([input] (response-shared-snapshot-quota-exceeded-fault nil input)) ([resultWrapper499766 input] (clojure.core/let [rawinput499765 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499767 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-subnet-group-fault ([input] (response-invalid-db-subnet-group-fault nil input)) ([resultWrapper499769 input] (clojure.core/let [rawinput499768 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499770 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-certificate-not-found-fault ([input] (response-certificate-not-found-fault nil input)) ([resultWrapper499772 input] (clojure.core/let [rawinput499771 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499773 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-delete-db-cluster-snapshot-result ([input] (response-delete-db-cluster-snapshot-result nil input)) ([resultWrapper499775 input] (clojure.core/let [rawinput499774 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499776 {"DBClusterSnapshot" (portkey.aws/search-for-tag rawinput499774 "DBClusterSnapshot" :flattened? nil :result-wrapper resultWrapper499775)}] (clojure.core/cond-> {} (letvar499776 "DBClusterSnapshot") (clojure.core/assoc :db-cluster-snapshot (deser-db-cluster-snapshot (clojure.core/get-in letvar499776 ["DBClusterSnapshot" :content])))))))

(clojure.core/defn- response-copy-db-cluster-snapshot-result ([input] (response-copy-db-cluster-snapshot-result nil input)) ([resultWrapper499778 input] (clojure.core/let [rawinput499777 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499779 {"DBClusterSnapshot" (portkey.aws/search-for-tag rawinput499777 "DBClusterSnapshot" :flattened? nil :result-wrapper resultWrapper499778)}] (clojure.core/cond-> {} (letvar499779 "DBClusterSnapshot") (clojure.core/assoc :db-cluster-snapshot (deser-db-cluster-snapshot (clojure.core/get-in letvar499779 ["DBClusterSnapshot" :content])))))))

(clojure.core/defn- response-db-cluster-backtrack ([input] (response-db-cluster-backtrack nil input)) ([resultWrapper499781 input] (clojure.core/let [rawinput499780 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499782 {"DBClusterIdentifier" (portkey.aws/search-for-tag rawinput499780 "DBClusterIdentifier" :flattened? nil :result-wrapper resultWrapper499781), "BacktrackIdentifier" (portkey.aws/search-for-tag rawinput499780 "BacktrackIdentifier" :flattened? nil :result-wrapper resultWrapper499781), "BacktrackTo" (portkey.aws/search-for-tag rawinput499780 "BacktrackTo" :flattened? nil :result-wrapper resultWrapper499781), "BacktrackedFrom" (portkey.aws/search-for-tag rawinput499780 "BacktrackedFrom" :flattened? nil :result-wrapper resultWrapper499781), "BacktrackRequestCreationTime" (portkey.aws/search-for-tag rawinput499780 "BacktrackRequestCreationTime" :flattened? nil :result-wrapper resultWrapper499781), "Status" (portkey.aws/search-for-tag rawinput499780 "Status" :flattened? nil :result-wrapper resultWrapper499781)}] (clojure.core/cond-> {} (letvar499782 "DBClusterIdentifier") (clojure.core/assoc :db-cluster-identifier (deser-string (clojure.core/get-in letvar499782 ["DBClusterIdentifier" :content]))) (letvar499782 "BacktrackIdentifier") (clojure.core/assoc :backtrack-identifier (deser-string (clojure.core/get-in letvar499782 ["BacktrackIdentifier" :content]))) (letvar499782 "BacktrackTo") (clojure.core/assoc :backtrack-to (deser-t-stamp (clojure.core/get-in letvar499782 ["BacktrackTo" :content]))) (letvar499782 "BacktrackedFrom") (clojure.core/assoc :backtracked-from (deser-t-stamp (clojure.core/get-in letvar499782 ["BacktrackedFrom" :content]))) (letvar499782 "BacktrackRequestCreationTime") (clojure.core/assoc :backtrack-request-creation-time (deser-t-stamp (clojure.core/get-in letvar499782 ["BacktrackRequestCreationTime" :content]))) (letvar499782 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar499782 ["Status" :content])))))))

(clojure.core/defn- response-orderable-db-instance-options-message ([input] (response-orderable-db-instance-options-message nil input)) ([resultWrapper499784 input] (clojure.core/let [rawinput499783 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499785 {"OrderableDBInstanceOptions" (portkey.aws/search-for-tag rawinput499783 "OrderableDBInstanceOptions" :flattened? nil :result-wrapper resultWrapper499784), "Marker" (portkey.aws/search-for-tag rawinput499783 "Marker" :flattened? nil :result-wrapper resultWrapper499784)}] (clojure.core/cond-> {} (letvar499785 "OrderableDBInstanceOptions") (clojure.core/assoc :orderable-db-instance-options (deser-orderable-db-instance-options-list (clojure.core/get-in letvar499785 ["OrderableDBInstanceOptions" :content]))) (letvar499785 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar499785 ["Marker" :content])))))))

(clojure.core/defn- response-event-categories-message ([input] (response-event-categories-message nil input)) ([resultWrapper499787 input] (clojure.core/let [rawinput499786 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499788 {"EventCategoriesMapList" (portkey.aws/search-for-tag rawinput499786 "EventCategoriesMapList" :flattened? nil :result-wrapper resultWrapper499787)}] (clojure.core/cond-> {} (letvar499788 "EventCategoriesMapList") (clojure.core/assoc :event-categories-map-list (deser-event-categories-map-list (clojure.core/get-in letvar499788 ["EventCategoriesMapList" :content])))))))

(clojure.core/defn- response-subscription-not-found-fault ([input] (response-subscription-not-found-fault nil input)) ([resultWrapper499790 input] (clojure.core/let [rawinput499789 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499791 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-authorization-already-exists-fault ([input] (response-authorization-already-exists-fault nil input)) ([resultWrapper499793 input] (clojure.core/let [rawinput499792 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499794 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-instance-automated-backup-not-found-fault ([input] (response-db-instance-automated-backup-not-found-fault nil input)) ([resultWrapper499796 input] (clojure.core/let [rawinput499795 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499797 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-subnet-group-state-fault ([input] (response-invalid-db-subnet-group-state-fault nil input)) ([resultWrapper499799 input] (clojure.core/let [rawinput499798 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499800 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-option-group-already-exists-fault ([input] (response-option-group-already-exists-fault nil input)) ([resultWrapper499802 input] (clojure.core/let [rawinput499801 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499803 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-db-snapshot-result ([input] (response-create-db-snapshot-result nil input)) ([resultWrapper499805 input] (clojure.core/let [rawinput499804 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499806 {"DBSnapshot" (portkey.aws/search-for-tag rawinput499804 "DBSnapshot" :flattened? nil :result-wrapper resultWrapper499805)}] (clojure.core/cond-> {} (letvar499806 "DBSnapshot") (clojure.core/assoc :db-snapshot (deser-db-snapshot (clojure.core/get-in letvar499806 ["DBSnapshot" :content])))))))

(clojure.core/defn- response-sns-topic-arn-not-found-fault ([input] (response-sns-topic-arn-not-found-fault nil input)) ([resultWrapper499808 input] (clojure.core/let [rawinput499807 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499809 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-not-found-fault ([input] (response-db-cluster-not-found-fault nil input)) ([resultWrapper499811 input] (clojure.core/let [rawinput499810 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499812 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-events-message ([input] (response-events-message nil input)) ([resultWrapper499814 input] (clojure.core/let [rawinput499813 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499815 {"Marker" (portkey.aws/search-for-tag rawinput499813 "Marker" :flattened? nil :result-wrapper resultWrapper499814), "Events" (portkey.aws/search-for-tag rawinput499813 "Events" :flattened? nil :result-wrapper resultWrapper499814)}] (clojure.core/cond-> {} (letvar499815 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar499815 ["Marker" :content]))) (letvar499815 "Events") (clojure.core/assoc :events (deser-event-list (clojure.core/get-in letvar499815 ["Events" :content])))))))

(clojure.core/defn- response-account-attributes-message ([input] (response-account-attributes-message nil input)) ([resultWrapper499817 input] (clojure.core/let [rawinput499816 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499818 {"AccountQuotas" (portkey.aws/search-for-tag rawinput499816 "AccountQuotas" :flattened? nil :result-wrapper resultWrapper499817)}] (clojure.core/cond-> {} (letvar499818 "AccountQuotas") (clojure.core/assoc :account-quotas (deser-account-quota-list (clojure.core/get-in letvar499818 ["AccountQuotas" :content])))))))

(clojure.core/defn- response-db-cluster-snapshot-message ([input] (response-db-cluster-snapshot-message nil input)) ([resultWrapper499820 input] (clojure.core/let [rawinput499819 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499821 {"Marker" (portkey.aws/search-for-tag rawinput499819 "Marker" :flattened? nil :result-wrapper resultWrapper499820), "DBClusterSnapshots" (portkey.aws/search-for-tag rawinput499819 "DBClusterSnapshots" :flattened? nil :result-wrapper resultWrapper499820)}] (clojure.core/cond-> {} (letvar499821 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar499821 ["Marker" :content]))) (letvar499821 "DBClusterSnapshots") (clojure.core/assoc :db-cluster-snapshots (deser-db-cluster-snapshot-list (clojure.core/get-in letvar499821 ["DBClusterSnapshots" :content])))))))

(clojure.core/defn- response-db-snapshot-message ([input] (response-db-snapshot-message nil input)) ([resultWrapper499823 input] (clojure.core/let [rawinput499822 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499824 {"Marker" (portkey.aws/search-for-tag rawinput499822 "Marker" :flattened? nil :result-wrapper resultWrapper499823), "DBSnapshots" (portkey.aws/search-for-tag rawinput499822 "DBSnapshots" :flattened? nil :result-wrapper resultWrapper499823)}] (clojure.core/cond-> {} (letvar499824 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar499824 ["Marker" :content]))) (letvar499824 "DBSnapshots") (clojure.core/assoc :db-snapshots (deser-db-snapshot-list (clojure.core/get-in letvar499824 ["DBSnapshots" :content])))))))

(clojure.core/defn- response-subscription-category-not-found-fault ([input] (response-subscription-category-not-found-fault nil input)) ([resultWrapper499826 input] (clojure.core/let [rawinput499825 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499827 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-option-group-options-message ([input] (response-option-group-options-message nil input)) ([resultWrapper499829 input] (clojure.core/let [rawinput499828 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499830 {"OptionGroupOptions" (portkey.aws/search-for-tag rawinput499828 "OptionGroupOptions" :flattened? nil :result-wrapper resultWrapper499829), "Marker" (portkey.aws/search-for-tag rawinput499828 "Marker" :flattened? nil :result-wrapper resultWrapper499829)}] (clojure.core/cond-> {} (letvar499830 "OptionGroupOptions") (clojure.core/assoc :option-group-options (deser-option-group-options-list (clojure.core/get-in letvar499830 ["OptionGroupOptions" :content]))) (letvar499830 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar499830 ["Marker" :content])))))))

(clojure.core/defn- response-db-cluster-endpoint-message ([input] (response-db-cluster-endpoint-message nil input)) ([resultWrapper499832 input] (clojure.core/let [rawinput499831 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499833 {"Marker" (portkey.aws/search-for-tag rawinput499831 "Marker" :flattened? nil :result-wrapper resultWrapper499832), "DBClusterEndpoints" (portkey.aws/search-for-tag rawinput499831 "DBClusterEndpoints" :flattened? nil :result-wrapper resultWrapper499832)}] (clojure.core/cond-> {} (letvar499833 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar499833 ["Marker" :content]))) (letvar499833 "DBClusterEndpoints") (clojure.core/assoc :db-cluster-endpoints (deser-db-cluster-endpoint-list (clojure.core/get-in letvar499833 ["DBClusterEndpoints" :content])))))))

(clojure.core/defn- response-revoke-db-security-group-ingress-result ([input] (response-revoke-db-security-group-ingress-result nil input)) ([resultWrapper499835 input] (clojure.core/let [rawinput499834 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499836 {"DBSecurityGroup" (portkey.aws/search-for-tag rawinput499834 "DBSecurityGroup" :flattened? nil :result-wrapper resultWrapper499835)}] (clojure.core/cond-> {} (letvar499836 "DBSecurityGroup") (clojure.core/assoc :db-security-group (deser-db-security-group (clojure.core/get-in letvar499836 ["DBSecurityGroup" :content])))))))

(clojure.core/defn- response-event-subscriptions-message ([input] (response-event-subscriptions-message nil input)) ([resultWrapper499838 input] (clojure.core/let [rawinput499837 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499839 {"Marker" (portkey.aws/search-for-tag rawinput499837 "Marker" :flattened? nil :result-wrapper resultWrapper499838), "EventSubscriptionsList" (portkey.aws/search-for-tag rawinput499837 "EventSubscriptionsList" :flattened? nil :result-wrapper resultWrapper499838)}] (clojure.core/cond-> {} (letvar499839 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar499839 ["Marker" :content]))) (letvar499839 "EventSubscriptionsList") (clojure.core/assoc :event-subscriptions-list (deser-event-subscriptions-list (clojure.core/get-in letvar499839 ["EventSubscriptionsList" :content])))))))

(clojure.core/defn- response-reserved-db-instances-offering-message ([input] (response-reserved-db-instances-offering-message nil input)) ([resultWrapper499841 input] (clojure.core/let [rawinput499840 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499842 {"Marker" (portkey.aws/search-for-tag rawinput499840 "Marker" :flattened? nil :result-wrapper resultWrapper499841), "ReservedDBInstancesOfferings" (portkey.aws/search-for-tag rawinput499840 "ReservedDBInstancesOfferings" :flattened? nil :result-wrapper resultWrapper499841)}] (clojure.core/cond-> {} (letvar499842 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar499842 ["Marker" :content]))) (letvar499842 "ReservedDBInstancesOfferings") (clojure.core/assoc :reserved-db-instances-offerings (deser-reserved-db-instances-offering-list (clojure.core/get-in letvar499842 ["ReservedDBInstancesOfferings" :content])))))))

(clojure.core/defn- response-create-db-subnet-group-result ([input] (response-create-db-subnet-group-result nil input)) ([resultWrapper499844 input] (clojure.core/let [rawinput499843 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499845 {"DBSubnetGroup" (portkey.aws/search-for-tag rawinput499843 "DBSubnetGroup" :flattened? nil :result-wrapper resultWrapper499844)}] (clojure.core/cond-> {} (letvar499845 "DBSubnetGroup") (clojure.core/assoc :db-subnet-group (deser-db-subnet-group (clojure.core/get-in letvar499845 ["DBSubnetGroup" :content])))))))

(clojure.core/defn- response-create-event-subscription-result ([input] (response-create-event-subscription-result nil input)) ([resultWrapper499847 input] (clojure.core/let [rawinput499846 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499848 {"EventSubscription" (portkey.aws/search-for-tag rawinput499846 "EventSubscription" :flattened? nil :result-wrapper resultWrapper499847)}] (clojure.core/cond-> {} (letvar499848 "EventSubscription") (clojure.core/assoc :event-subscription (deser-event-subscription (clojure.core/get-in letvar499848 ["EventSubscription" :content])))))))

(clojure.core/defn- response-db-cluster-parameter-group-details ([input] (response-db-cluster-parameter-group-details nil input)) ([resultWrapper499850 input] (clojure.core/let [rawinput499849 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499851 {"Parameters" (portkey.aws/search-for-tag rawinput499849 "Parameters" :flattened? nil :result-wrapper resultWrapper499850), "Marker" (portkey.aws/search-for-tag rawinput499849 "Marker" :flattened? nil :result-wrapper resultWrapper499850)}] (clojure.core/cond-> {} (letvar499851 "Parameters") (clojure.core/assoc :parameters (deser-parameters-list (clojure.core/get-in letvar499851 ["Parameters" :content]))) (letvar499851 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar499851 ["Marker" :content])))))))

(clojure.core/defn- response-create-db-security-group-result ([input] (response-create-db-security-group-result nil input)) ([resultWrapper499853 input] (clojure.core/let [rawinput499852 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499854 {"DBSecurityGroup" (portkey.aws/search-for-tag rawinput499852 "DBSecurityGroup" :flattened? nil :result-wrapper resultWrapper499853)}] (clojure.core/cond-> {} (letvar499854 "DBSecurityGroup") (clojure.core/assoc :db-security-group (deser-db-security-group (clojure.core/get-in letvar499854 ["DBSecurityGroup" :content])))))))

(clojure.core/defn- response-create-global-cluster-result ([input] (response-create-global-cluster-result nil input)) ([resultWrapper499856 input] (clojure.core/let [rawinput499855 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499857 {"GlobalCluster" (portkey.aws/search-for-tag rawinput499855 "GlobalCluster" :flattened? nil :result-wrapper resultWrapper499856)}] (clojure.core/cond-> {} (letvar499857 "GlobalCluster") (clojure.core/assoc :global-cluster (deser-global-cluster (clojure.core/get-in letvar499857 ["GlobalCluster" :content])))))))

(clojure.core/defn- response-invalid-db-security-group-state-fault ([input] (response-invalid-db-security-group-state-fault nil input)) ([resultWrapper499859 input] (clojure.core/let [rawinput499858 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499860 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-option-groups ([input] (response-option-groups nil input)) ([resultWrapper499862 input] (clojure.core/let [rawinput499861 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499863 {"OptionGroupsList" (portkey.aws/search-for-tag rawinput499861 "OptionGroupsList" :flattened? nil :result-wrapper resultWrapper499862), "Marker" (portkey.aws/search-for-tag rawinput499861 "Marker" :flattened? nil :result-wrapper resultWrapper499862)}] (clojure.core/cond-> {} (letvar499863 "OptionGroupsList") (clojure.core/assoc :option-groups-list (deser-option-groups-list (clojure.core/get-in letvar499863 ["OptionGroupsList" :content]))) (letvar499863 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar499863 ["Marker" :content])))))))

(clojure.core/defn- response-storage-type-not-supported-fault ([input] (response-storage-type-not-supported-fault nil input)) ([resultWrapper499865 input] (clojure.core/let [rawinput499864 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499866 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-role-not-found-fault ([input] (response-db-cluster-role-not-found-fault nil input)) ([resultWrapper499868 input] (clojure.core/let [rawinput499867 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499869 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-parameter-group-not-found-fault ([input] (response-db-cluster-parameter-group-not-found-fault nil input)) ([resultWrapper499871 input] (clojure.core/let [rawinput499870 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499872 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-authorize-db-security-group-ingress-result ([input] (response-authorize-db-security-group-ingress-result nil input)) ([resultWrapper499874 input] (clojure.core/let [rawinput499873 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499875 {"DBSecurityGroup" (portkey.aws/search-for-tag rawinput499873 "DBSecurityGroup" :flattened? nil :result-wrapper resultWrapper499874)}] (clojure.core/cond-> {} (letvar499875 "DBSecurityGroup") (clojure.core/assoc :db-security-group (deser-db-security-group (clojure.core/get-in letvar499875 ["DBSecurityGroup" :content])))))))

(clojure.core/defn- response-db-subnet-group-does-not-cover-enough-a-zs ([input] (response-db-subnet-group-does-not-cover-enough-a-zs nil input)) ([resultWrapper499877 input] (clojure.core/let [rawinput499876 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499878 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-parameter-groups-message ([input] (response-db-parameter-groups-message nil input)) ([resultWrapper499880 input] (clojure.core/let [rawinput499879 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499881 {"Marker" (portkey.aws/search-for-tag rawinput499879 "Marker" :flattened? nil :result-wrapper resultWrapper499880), "DBParameterGroups" (portkey.aws/search-for-tag rawinput499879 "DBParameterGroups" :flattened? nil :result-wrapper resultWrapper499880)}] (clojure.core/cond-> {} (letvar499881 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar499881 ["Marker" :content]))) (letvar499881 "DBParameterGroups") (clojure.core/assoc :db-parameter-groups (deser-db-parameter-group-list (clojure.core/get-in letvar499881 ["DBParameterGroups" :content])))))))

(clojure.core/defn- response-describe-engine-default-parameters-result ([input] (response-describe-engine-default-parameters-result nil input)) ([resultWrapper499883 input] (clojure.core/let [rawinput499882 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499884 {"EngineDefaults" (portkey.aws/search-for-tag rawinput499882 "EngineDefaults" :flattened? nil :result-wrapper resultWrapper499883)}] (clojure.core/cond-> {} (letvar499884 "EngineDefaults") (clojure.core/assoc :engine-defaults (deser-engine-defaults (clojure.core/get-in letvar499884 ["EngineDefaults" :content])))))))

(clojure.core/defn- response-db-cluster-snapshot-already-exists-fault ([input] (response-db-cluster-snapshot-already-exists-fault nil input)) ([resultWrapper499886 input] (clojure.core/let [rawinput499885 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499887 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-authorization-not-found-fault ([input] (response-authorization-not-found-fault nil input)) ([resultWrapper499889 input] (clojure.core/let [rawinput499888 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499890 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-role-quota-exceeded-fault ([input] (response-db-cluster-role-quota-exceeded-fault nil input)) ([resultWrapper499892 input] (clojure.core/let [rawinput499891 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499893 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-db-instance-result ([input] (response-create-db-instance-result nil input)) ([resultWrapper499895 input] (clojure.core/let [rawinput499894 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499896 {"DBInstance" (portkey.aws/search-for-tag rawinput499894 "DBInstance" :flattened? nil :result-wrapper resultWrapper499895)}] (clojure.core/cond-> {} (letvar499896 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar499896 ["DBInstance" :content])))))))

(clojure.core/defn- response-copy-db-cluster-parameter-group-result ([input] (response-copy-db-cluster-parameter-group-result nil input)) ([resultWrapper499898 input] (clojure.core/let [rawinput499897 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499899 {"DBClusterParameterGroup" (portkey.aws/search-for-tag rawinput499897 "DBClusterParameterGroup" :flattened? nil :result-wrapper resultWrapper499898)}] (clojure.core/cond-> {} (letvar499899 "DBClusterParameterGroup") (clojure.core/assoc :db-cluster-parameter-group (deser-db-cluster-parameter-group (clojure.core/get-in letvar499899 ["DBClusterParameterGroup" :content])))))))

(clojure.core/defn- response-subnet-already-in-use ([input] (response-subnet-already-in-use nil input)) ([resultWrapper499901 input] (clojure.core/let [rawinput499900 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499902 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-insufficient-storage-cluster-capacity-fault ([input] (response-insufficient-storage-cluster-capacity-fault nil input)) ([resultWrapper499904 input] (clojure.core/let [rawinput499903 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499905 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-snapshot-not-found-fault ([input] (response-db-cluster-snapshot-not-found-fault nil input)) ([resultWrapper499907 input] (clojure.core/let [rawinput499906 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499908 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-option-group-result ([input] (response-create-option-group-result nil input)) ([resultWrapper499910 input] (clojure.core/let [rawinput499909 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499911 {"OptionGroup" (portkey.aws/search-for-tag rawinput499909 "OptionGroup" :flattened? nil :result-wrapper resultWrapper499910)}] (clojure.core/cond-> {} (letvar499911 "OptionGroup") (clojure.core/assoc :option-group (deser-option-group (clojure.core/get-in letvar499911 ["OptionGroup" :content])))))))

(clojure.core/defn- response-copy-db-snapshot-result ([input] (response-copy-db-snapshot-result nil input)) ([resultWrapper499913 input] (clojure.core/let [rawinput499912 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499914 {"DBSnapshot" (portkey.aws/search-for-tag rawinput499912 "DBSnapshot" :flattened? nil :result-wrapper resultWrapper499913)}] (clojure.core/cond-> {} (letvar499914 "DBSnapshot") (clojure.core/assoc :db-snapshot (deser-db-snapshot (clojure.core/get-in letvar499914 ["DBSnapshot" :content])))))))

(clojure.core/defn- response-invalid-db-cluster-state-fault ([input] (response-invalid-db-cluster-state-fault nil input)) ([resultWrapper499916 input] (clojure.core/let [rawinput499915 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499917 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-certificate-message ([input] (response-certificate-message nil input)) ([resultWrapper499919 input] (clojure.core/let [rawinput499918 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499920 {"Certificates" (portkey.aws/search-for-tag rawinput499918 "Certificates" :flattened? nil :result-wrapper resultWrapper499919), "Marker" (portkey.aws/search-for-tag rawinput499918 "Marker" :flattened? nil :result-wrapper resultWrapper499919)}] (clojure.core/cond-> {} (letvar499920 "Certificates") (clojure.core/assoc :certificates (deser-certificate-list (clojure.core/get-in letvar499920 ["Certificates" :content]))) (letvar499920 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar499920 ["Marker" :content])))))))

(clojure.core/defn- response-modify-db-subnet-group-result ([input] (response-modify-db-subnet-group-result nil input)) ([resultWrapper499922 input] (clojure.core/let [rawinput499921 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499923 {"DBSubnetGroup" (portkey.aws/search-for-tag rawinput499921 "DBSubnetGroup" :flattened? nil :result-wrapper resultWrapper499922)}] (clojure.core/cond-> {} (letvar499923 "DBSubnetGroup") (clojure.core/assoc :db-subnet-group (deser-db-subnet-group (clojure.core/get-in letvar499923 ["DBSubnetGroup" :content])))))))

(clojure.core/defn- response-invalid-db-instance-automated-backup-state-fault ([input] (response-invalid-db-instance-automated-backup-state-fault nil input)) ([resultWrapper499925 input] (clojure.core/let [rawinput499924 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499926 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-option-group-quota-exceeded-fault ([input] (response-option-group-quota-exceeded-fault nil input)) ([resultWrapper499928 input] (clojure.core/let [rawinput499927 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499929 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-subnet ([input] (response-invalid-subnet nil input)) ([resultWrapper499931 input] (clojure.core/let [rawinput499930 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499932 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-modify-db-snapshot-result ([input] (response-modify-db-snapshot-result nil input)) ([resultWrapper499934 input] (clojure.core/let [rawinput499933 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499935 {"DBSnapshot" (portkey.aws/search-for-tag rawinput499933 "DBSnapshot" :flattened? nil :result-wrapper resultWrapper499934)}] (clojure.core/cond-> {} (letvar499935 "DBSnapshot") (clojure.core/assoc :db-snapshot (deser-db-snapshot (clojure.core/get-in letvar499935 ["DBSnapshot" :content])))))))

(clojure.core/defn- response-modify-option-group-result ([input] (response-modify-option-group-result nil input)) ([resultWrapper499937 input] (clojure.core/let [rawinput499936 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499938 {"OptionGroup" (portkey.aws/search-for-tag rawinput499936 "OptionGroup" :flattened? nil :result-wrapper resultWrapper499937)}] (clojure.core/cond-> {} (letvar499938 "OptionGroup") (clojure.core/assoc :option-group (deser-option-group (clojure.core/get-in letvar499938 ["OptionGroup" :content])))))))

(clojure.core/defn- response-invalid-global-cluster-state-fault ([input] (response-invalid-global-cluster-state-fault nil input)) ([resultWrapper499940 input] (clojure.core/let [rawinput499939 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499941 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-instance-automated-backup-message ([input] (response-db-instance-automated-backup-message nil input)) ([resultWrapper499943 input] (clojure.core/let [rawinput499942 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499944 {"Marker" (portkey.aws/search-for-tag rawinput499942 "Marker" :flattened? nil :result-wrapper resultWrapper499943), "DBInstanceAutomatedBackups" (portkey.aws/search-for-tag rawinput499942 "DBInstanceAutomatedBackups" :flattened? nil :result-wrapper resultWrapper499943)}] (clojure.core/cond-> {} (letvar499944 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar499944 ["Marker" :content]))) (letvar499944 "DBInstanceAutomatedBackups") (clojure.core/assoc :db-instance-automated-backups (deser-db-instance-automated-backup-list (clojure.core/get-in letvar499944 ["DBInstanceAutomatedBackups" :content])))))))

(clojure.core/defn- response-subscription-already-exist-fault ([input] (response-subscription-already-exist-fault nil input)) ([resultWrapper499946 input] (clojure.core/let [rawinput499945 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499947 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-upgrade-dependency-failure-fault ([input] (response-db-upgrade-dependency-failure-fault nil input)) ([resultWrapper499949 input] (clojure.core/let [rawinput499948 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499950 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-delete-db-instance-automated-backup-result ([input] (response-delete-db-instance-automated-backup-result nil input)) ([resultWrapper499952 input] (clojure.core/let [rawinput499951 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499953 {"DBInstanceAutomatedBackup" (portkey.aws/search-for-tag rawinput499951 "DBInstanceAutomatedBackup" :flattened? nil :result-wrapper resultWrapper499952)}] (clojure.core/cond-> {} (letvar499953 "DBInstanceAutomatedBackup") (clojure.core/assoc :db-instance-automated-backup (deser-db-instance-automated-backup (clojure.core/get-in letvar499953 ["DBInstanceAutomatedBackup" :content])))))))

(clojure.core/defn- response-db-cluster-quota-exceeded-fault ([input] (response-db-cluster-quota-exceeded-fault nil input)) ([resultWrapper499955 input] (clojure.core/let [rawinput499954 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499956 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-event-subscription-state-fault ([input] (response-invalid-event-subscription-state-fault nil input)) ([resultWrapper499958 input] (clojure.core/let [rawinput499957 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499959 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-restore-db-cluster-from-s-3-result ([input] (response-restore-db-cluster-from-s-3-result nil input)) ([resultWrapper499961 input] (clojure.core/let [rawinput499960 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499962 {"DBCluster" (portkey.aws/search-for-tag rawinput499960 "DBCluster" :flattened? nil :result-wrapper resultWrapper499961)}] (clojure.core/cond-> {} (letvar499962 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar499962 ["DBCluster" :content])))))))

(clojure.core/defn- response-tag-list-message ([input] (response-tag-list-message nil input)) ([resultWrapper499964 input] (clojure.core/let [rawinput499963 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499965 {"TagList" (portkey.aws/search-for-tag rawinput499963 "TagList" :flattened? nil :result-wrapper resultWrapper499964)}] (clojure.core/cond-> {} (letvar499965 "TagList") (clojure.core/assoc :tag-list (deser-tag-list (clojure.core/get-in letvar499965 ["TagList" :content])))))))

(clojure.core/defn- response-invalid-s-3-bucket-fault ([input] (response-invalid-s-3-bucket-fault nil input)) ([resultWrapper499967 input] (clojure.core/let [rawinput499966 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499968 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-authorization-quota-exceeded-fault ([input] (response-authorization-quota-exceeded-fault nil input)) ([resultWrapper499970 input] (clojure.core/let [rawinput499969 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499971 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-subnet-group-not-found-fault ([input] (response-db-subnet-group-not-found-fault nil input)) ([resultWrapper499973 input] (clojure.core/let [rawinput499972 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499974 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-log-file-not-found-fault ([input] (response-db-log-file-not-found-fault nil input)) ([resultWrapper499976 input] (clojure.core/let [rawinput499975 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499977 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-provisioned-iops-not-available-in-az-fault ([input] (response-provisioned-iops-not-available-in-az-fault nil input)) ([resultWrapper499979 input] (clojure.core/let [rawinput499978 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499980 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-reserved-db-instance-message ([input] (response-reserved-db-instance-message nil input)) ([resultWrapper499982 input] (clojure.core/let [rawinput499981 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499983 {"Marker" (portkey.aws/search-for-tag rawinput499981 "Marker" :flattened? nil :result-wrapper resultWrapper499982), "ReservedDBInstances" (portkey.aws/search-for-tag rawinput499981 "ReservedDBInstances" :flattened? nil :result-wrapper resultWrapper499982)}] (clojure.core/cond-> {} (letvar499983 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar499983 ["Marker" :content]))) (letvar499983 "ReservedDBInstances") (clojure.core/assoc :reserved-db-instances (deser-reserved-db-instance-list (clojure.core/get-in letvar499983 ["ReservedDBInstances" :content])))))))

(clojure.core/defn- response-modify-db-instance-result ([input] (response-modify-db-instance-result nil input)) ([resultWrapper499985 input] (clojure.core/let [rawinput499984 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499986 {"DBInstance" (portkey.aws/search-for-tag rawinput499984 "DBInstance" :flattened? nil :result-wrapper resultWrapper499985)}] (clojure.core/cond-> {} (letvar499986 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar499986 ["DBInstance" :content])))))))

(clojure.core/defn- response-restore-db-instance-from-s-3-result ([input] (response-restore-db-instance-from-s-3-result nil input)) ([resultWrapper499988 input] (clojure.core/let [rawinput499987 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499989 {"DBInstance" (portkey.aws/search-for-tag rawinput499987 "DBInstance" :flattened? nil :result-wrapper resultWrapper499988)}] (clojure.core/cond-> {} (letvar499989 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar499989 ["DBInstance" :content])))))))

(clojure.core/defn- response-reserved-db-instance-not-found-fault ([input] (response-reserved-db-instance-not-found-fault nil input)) ([resultWrapper499991 input] (clojure.core/let [rawinput499990 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499992 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-option-group-state-fault ([input] (response-invalid-option-group-state-fault nil input)) ([resultWrapper499994 input] (clojure.core/let [rawinput499993 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499995 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-backtrack-message ([input] (response-db-cluster-backtrack-message nil input)) ([resultWrapper499997 input] (clojure.core/let [rawinput499996 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar499998 {"Marker" (portkey.aws/search-for-tag rawinput499996 "Marker" :flattened? nil :result-wrapper resultWrapper499997), "DBClusterBacktracks" (portkey.aws/search-for-tag rawinput499996 "DBClusterBacktracks" :flattened? nil :result-wrapper resultWrapper499997)}] (clojure.core/cond-> {} (letvar499998 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar499998 ["Marker" :content]))) (letvar499998 "DBClusterBacktracks") (clojure.core/assoc :db-cluster-backtracks (deser-db-cluster-backtrack-list (clojure.core/get-in letvar499998 ["DBClusterBacktracks" :content])))))))

(clojure.core/defn- response-resource-not-found-fault ([input] (response-resource-not-found-fault nil input)) ([resultWrapper500000 input] (clojure.core/let [rawinput499999 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500001 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-db-cluster-parameter-group-result ([input] (response-create-db-cluster-parameter-group-result nil input)) ([resultWrapper500003 input] (clojure.core/let [rawinput500002 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500004 {"DBClusterParameterGroup" (portkey.aws/search-for-tag rawinput500002 "DBClusterParameterGroup" :flattened? nil :result-wrapper resultWrapper500003)}] (clojure.core/cond-> {} (letvar500004 "DBClusterParameterGroup") (clojure.core/assoc :db-cluster-parameter-group (deser-db-cluster-parameter-group (clojure.core/get-in letvar500004 ["DBClusterParameterGroup" :content])))))))

(clojure.core/defn- response-point-in-time-restore-not-enabled-fault ([input] (response-point-in-time-restore-not-enabled-fault nil input)) ([resultWrapper500006 input] (clojure.core/let [rawinput500005 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500007 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-subnet-group-not-allowed-fault ([input] (response-db-subnet-group-not-allowed-fault nil input)) ([resultWrapper500009 input] (clojure.core/let [rawinput500008 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500010 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-db-cluster-snapshot-result ([input] (response-create-db-cluster-snapshot-result nil input)) ([resultWrapper500012 input] (clojure.core/let [rawinput500011 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500013 {"DBClusterSnapshot" (portkey.aws/search-for-tag rawinput500011 "DBClusterSnapshot" :flattened? nil :result-wrapper resultWrapper500012)}] (clojure.core/cond-> {} (letvar500013 "DBClusterSnapshot") (clojure.core/assoc :db-cluster-snapshot (deser-db-cluster-snapshot (clojure.core/get-in letvar500013 ["DBClusterSnapshot" :content])))))))

(clojure.core/defn- response-db-parameter-group-not-found-fault ([input] (response-db-parameter-group-not-found-fault nil input)) ([resultWrapper500015 input] (clojure.core/let [rawinput500014 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500016 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-global-clusters-message ([input] (response-global-clusters-message nil input)) ([resultWrapper500018 input] (clojure.core/let [rawinput500017 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500019 {"Marker" (portkey.aws/search-for-tag rawinput500017 "Marker" :flattened? nil :result-wrapper resultWrapper500018), "GlobalClusters" (portkey.aws/search-for-tag rawinput500017 "GlobalClusters" :flattened? nil :result-wrapper resultWrapper500018)}] (clojure.core/cond-> {} (letvar500019 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar500019 ["Marker" :content]))) (letvar500019 "GlobalClusters") (clojure.core/assoc :global-clusters (deser-global-cluster-list (clojure.core/get-in letvar500019 ["GlobalClusters" :content])))))))

(clojure.core/defn- response-db-cluster-message ([input] (response-db-cluster-message nil input)) ([resultWrapper500021 input] (clojure.core/let [rawinput500020 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500022 {"Marker" (portkey.aws/search-for-tag rawinput500020 "Marker" :flattened? nil :result-wrapper resultWrapper500021), "DBClusters" (portkey.aws/search-for-tag rawinput500020 "DBClusters" :flattened? nil :result-wrapper resultWrapper500021)}] (clojure.core/cond-> {} (letvar500022 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar500022 ["Marker" :content]))) (letvar500022 "DBClusters") (clojure.core/assoc :db-clusters (deser-db-cluster-list (clojure.core/get-in letvar500022 ["DBClusters" :content])))))))

(clojure.core/defn- response-event-subscription-quota-exceeded-fault ([input] (response-event-subscription-quota-exceeded-fault nil input)) ([resultWrapper500024 input] (clojure.core/let [rawinput500023 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500025 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-describe-db-cluster-snapshot-attributes-result ([input] (response-describe-db-cluster-snapshot-attributes-result nil input)) ([resultWrapper500027 input] (clojure.core/let [rawinput500026 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500028 {"DBClusterSnapshotAttributesResult" (portkey.aws/search-for-tag rawinput500026 "DBClusterSnapshotAttributesResult" :flattened? nil :result-wrapper resultWrapper500027)}] (clojure.core/cond-> {} (letvar500028 "DBClusterSnapshotAttributesResult") (clojure.core/assoc :db-cluster-snapshot-attributes-result (deser-db-cluster-snapshot-attributes-result (clojure.core/get-in letvar500028 ["DBClusterSnapshotAttributesResult" :content])))))))

(clojure.core/defn- response-kms-key-not-accessible-fault ([input] (response-kms-key-not-accessible-fault nil input)) ([resultWrapper500030 input] (clojure.core/let [rawinput500029 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500031 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-describe-db-log-files-response ([input] (response-describe-db-log-files-response nil input)) ([resultWrapper500033 input] (clojure.core/let [rawinput500032 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500034 {"DescribeDBLogFiles" (portkey.aws/search-for-tag rawinput500032 "DescribeDBLogFiles" :flattened? nil :result-wrapper resultWrapper500033), "Marker" (portkey.aws/search-for-tag rawinput500032 "Marker" :flattened? nil :result-wrapper resultWrapper500033)}] (clojure.core/cond-> {} (letvar500034 "DescribeDBLogFiles") (clojure.core/assoc :describe-db-log-files (deser-describe-db-log-files-list (clojure.core/get-in letvar500034 ["DescribeDBLogFiles" :content]))) (letvar500034 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar500034 ["Marker" :content])))))))

(clojure.core/defn- response-db-instance-role-not-found-fault ([input] (response-db-instance-role-not-found-fault nil input)) ([resultWrapper500036 input] (clojure.core/let [rawinput500035 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500037 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-stop-db-instance-result ([input] (response-stop-db-instance-result nil input)) ([resultWrapper500039 input] (clojure.core/let [rawinput500038 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500040 {"DBInstance" (portkey.aws/search-for-tag rawinput500038 "DBInstance" :flattened? nil :result-wrapper resultWrapper500039)}] (clojure.core/cond-> {} (letvar500040 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar500040 ["DBInstance" :content])))))))

(clojure.core/defn- response-db-engine-version-message ([input] (response-db-engine-version-message nil input)) ([resultWrapper500042 input] (clojure.core/let [rawinput500041 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500043 {"Marker" (portkey.aws/search-for-tag rawinput500041 "Marker" :flattened? nil :result-wrapper resultWrapper500042), "DBEngineVersions" (portkey.aws/search-for-tag rawinput500041 "DBEngineVersions" :flattened? nil :result-wrapper resultWrapper500042)}] (clojure.core/cond-> {} (letvar500043 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar500043 ["Marker" :content]))) (letvar500043 "DBEngineVersions") (clojure.core/assoc :db-engine-versions (deser-db-engine-version-list (clojure.core/get-in letvar500043 ["DBEngineVersions" :content])))))))

(clojure.core/defn- response-modify-db-cluster-snapshot-attribute-result ([input] (response-modify-db-cluster-snapshot-attribute-result nil input)) ([resultWrapper500045 input] (clojure.core/let [rawinput500044 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500046 {"DBClusterSnapshotAttributesResult" (portkey.aws/search-for-tag rawinput500044 "DBClusterSnapshotAttributesResult" :flattened? nil :result-wrapper resultWrapper500045)}] (clojure.core/cond-> {} (letvar500046 "DBClusterSnapshotAttributesResult") (clojure.core/assoc :db-cluster-snapshot-attributes-result (deser-db-cluster-snapshot-attributes-result (clojure.core/get-in letvar500046 ["DBClusterSnapshotAttributesResult" :content])))))))

(clojure.core/defn- response-db-instance-message ([input] (response-db-instance-message nil input)) ([resultWrapper500048 input] (clojure.core/let [rawinput500047 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500049 {"Marker" (portkey.aws/search-for-tag rawinput500047 "Marker" :flattened? nil :result-wrapper resultWrapper500048), "DBInstances" (portkey.aws/search-for-tag rawinput500047 "DBInstances" :flattened? nil :result-wrapper resultWrapper500048)}] (clojure.core/cond-> {} (letvar500049 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar500049 ["Marker" :content]))) (letvar500049 "DBInstances") (clojure.core/assoc :db-instances (deser-db-instance-list (clojure.core/get-in letvar500049 ["DBInstances" :content])))))))

(clojure.core/defn- response-reserved-db-instance-already-exists-fault ([input] (response-reserved-db-instance-already-exists-fault nil input)) ([resultWrapper500051 input] (clojure.core/let [rawinput500050 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500052 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-security-group-not-supported-fault ([input] (response-db-security-group-not-supported-fault nil input)) ([resultWrapper500054 input] (clojure.core/let [rawinput500053 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500055 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-db-parameter-group-result ([input] (response-create-db-parameter-group-result nil input)) ([resultWrapper500057 input] (clojure.core/let [rawinput500056 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500058 {"DBParameterGroup" (portkey.aws/search-for-tag rawinput500056 "DBParameterGroup" :flattened? nil :result-wrapper resultWrapper500057)}] (clojure.core/cond-> {} (letvar500058 "DBParameterGroup") (clojure.core/assoc :db-parameter-group (deser-db-parameter-group (clojure.core/get-in letvar500058 ["DBParameterGroup" :content])))))))

(clojure.core/defn- response-db-instance-role-already-exists-fault ([input] (response-db-instance-role-already-exists-fault nil input)) ([resultWrapper500060 input] (clojure.core/let [rawinput500059 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500061 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-describe-engine-default-cluster-parameters-result ([input] (response-describe-engine-default-cluster-parameters-result nil input)) ([resultWrapper500063 input] (clojure.core/let [rawinput500062 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500064 {"EngineDefaults" (portkey.aws/search-for-tag rawinput500062 "EngineDefaults" :flattened? nil :result-wrapper resultWrapper500063)}] (clojure.core/cond-> {} (letvar500064 "EngineDefaults") (clojure.core/assoc :engine-defaults (deser-engine-defaults (clojure.core/get-in letvar500064 ["EngineDefaults" :content])))))))

(clojure.core/defn- response-db-instance-automated-backup-quota-exceeded-fault ([input] (response-db-instance-automated-backup-quota-exceeded-fault nil input)) ([resultWrapper500066 input] (clojure.core/let [rawinput500065 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500067 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-cluster-snapshot-state-fault ([input] (response-invalid-db-cluster-snapshot-state-fault nil input)) ([resultWrapper500069 input] (clojure.core/let [rawinput500068 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500070 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-storage-quota-exceeded-fault ([input] (response-storage-quota-exceeded-fault nil input)) ([resultWrapper500072 input] (clojure.core/let [rawinput500071 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500073 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-restore-fault ([input] (response-invalid-restore-fault nil input)) ([resultWrapper500075 input] (clojure.core/let [rawinput500074 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500076 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-insufficient-db-cluster-capacity-fault ([input] (response-insufficient-db-cluster-capacity-fault nil input)) ([resultWrapper500078 input] (clojure.core/let [rawinput500077 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500079 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-describe-db-snapshot-attributes-result ([input] (response-describe-db-snapshot-attributes-result nil input)) ([resultWrapper500081 input] (clojure.core/let [rawinput500080 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500082 {"DBSnapshotAttributesResult" (portkey.aws/search-for-tag rawinput500080 "DBSnapshotAttributesResult" :flattened? nil :result-wrapper resultWrapper500081)}] (clojure.core/cond-> {} (letvar500082 "DBSnapshotAttributesResult") (clojure.core/assoc :db-snapshot-attributes-result (deser-db-snapshot-attributes-result (clojure.core/get-in letvar500082 ["DBSnapshotAttributesResult" :content])))))))

(clojure.core/defn- response-db-security-group-quota-exceeded-fault ([input] (response-db-security-group-quota-exceeded-fault nil input)) ([resultWrapper500084 input] (clojure.core/let [rawinput500083 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500085 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-global-cluster-not-found-fault ([input] (response-global-cluster-not-found-fault nil input)) ([resultWrapper500087 input] (clojure.core/let [rawinput500086 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500088 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-parameter-group-already-exists-fault ([input] (response-db-parameter-group-already-exists-fault nil input)) ([resultWrapper500090 input] (clojure.core/let [rawinput500089 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500091 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-subnet-state-fault ([input] (response-invalid-db-subnet-state-fault nil input)) ([resultWrapper500093 input] (clojure.core/let [rawinput500092 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500094 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-endpoint-quota-exceeded-fault ([input] (response-db-cluster-endpoint-quota-exceeded-fault nil input)) ([resultWrapper500096 input] (clojure.core/let [rawinput500095 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500097 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-parameter-group-quota-exceeded-fault ([input] (response-db-parameter-group-quota-exceeded-fault nil input)) ([resultWrapper500099 input] (clojure.core/let [rawinput500098 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500100 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-stop-db-cluster-result ([input] (response-stop-db-cluster-result nil input)) ([resultWrapper500102 input] (clojure.core/let [rawinput500101 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500103 {"DBCluster" (portkey.aws/search-for-tag rawinput500101 "DBCluster" :flattened? nil :result-wrapper resultWrapper500102)}] (clojure.core/cond-> {} (letvar500103 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar500103 ["DBCluster" :content])))))))

(clojure.core/defn- response-db-cluster-capacity-info ([input] (response-db-cluster-capacity-info nil input)) ([resultWrapper500105 input] (clojure.core/let [rawinput500104 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500106 {"DBClusterIdentifier" (portkey.aws/search-for-tag rawinput500104 "DBClusterIdentifier" :flattened? nil :result-wrapper resultWrapper500105), "PendingCapacity" (portkey.aws/search-for-tag rawinput500104 "PendingCapacity" :flattened? nil :result-wrapper resultWrapper500105), "CurrentCapacity" (portkey.aws/search-for-tag rawinput500104 "CurrentCapacity" :flattened? nil :result-wrapper resultWrapper500105), "SecondsBeforeTimeout" (portkey.aws/search-for-tag rawinput500104 "SecondsBeforeTimeout" :flattened? nil :result-wrapper resultWrapper500105), "TimeoutAction" (portkey.aws/search-for-tag rawinput500104 "TimeoutAction" :flattened? nil :result-wrapper resultWrapper500105)}] (clojure.core/cond-> {} (letvar500106 "DBClusterIdentifier") (clojure.core/assoc :db-cluster-identifier (deser-string (clojure.core/get-in letvar500106 ["DBClusterIdentifier" :content]))) (letvar500106 "PendingCapacity") (clojure.core/assoc :pending-capacity (deser-integer-optional (clojure.core/get-in letvar500106 ["PendingCapacity" :content]))) (letvar500106 "CurrentCapacity") (clojure.core/assoc :current-capacity (deser-integer-optional (clojure.core/get-in letvar500106 ["CurrentCapacity" :content]))) (letvar500106 "SecondsBeforeTimeout") (clojure.core/assoc :seconds-before-timeout (deser-integer-optional (clojure.core/get-in letvar500106 ["SecondsBeforeTimeout" :content]))) (letvar500106 "TimeoutAction") (clojure.core/assoc :timeout-action (deser-string (clojure.core/get-in letvar500106 ["TimeoutAction" :content])))))))

(clojure.core/defn- response-backup-policy-not-found-fault ([input] (response-backup-policy-not-found-fault nil input)) ([resultWrapper500108 input] (clojure.core/let [rawinput500107 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500109 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-describe-valid-db-instance-modifications-result ([input] (response-describe-valid-db-instance-modifications-result nil input)) ([resultWrapper500111 input] (clojure.core/let [rawinput500110 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500112 {"ValidDBInstanceModificationsMessage" (portkey.aws/search-for-tag rawinput500110 "ValidDBInstanceModificationsMessage" :flattened? nil :result-wrapper resultWrapper500111)}] (clojure.core/cond-> {} (letvar500112 "ValidDBInstanceModificationsMessage") (clojure.core/assoc :valid-db-instance-modifications-message (deser-valid-db-instance-modifications-message (clojure.core/get-in letvar500112 ["ValidDBInstanceModificationsMessage" :content])))))))

(clojure.core/defn- response-modify-event-subscription-result ([input] (response-modify-event-subscription-result nil input)) ([resultWrapper500114 input] (clojure.core/let [rawinput500113 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500115 {"EventSubscription" (portkey.aws/search-for-tag rawinput500113 "EventSubscription" :flattened? nil :result-wrapper resultWrapper500114)}] (clojure.core/cond-> {} (letvar500115 "EventSubscription") (clojure.core/assoc :event-subscription (deser-event-subscription (clojure.core/get-in letvar500115 ["EventSubscription" :content])))))))

(clojure.core/defn- response-insufficient-db-instance-capacity-fault ([input] (response-insufficient-db-instance-capacity-fault nil input)) ([resultWrapper500117 input] (clojure.core/let [rawinput500116 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500118 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-failover-db-cluster-result ([input] (response-failover-db-cluster-result nil input)) ([resultWrapper500120 input] (clojure.core/let [rawinput500119 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500121 {"DBCluster" (portkey.aws/search-for-tag rawinput500119 "DBCluster" :flattened? nil :result-wrapper resultWrapper500120)}] (clojure.core/cond-> {} (letvar500121 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar500121 ["DBCluster" :content])))))))

(clojure.core/defn- response-sns-invalid-topic-fault ([input] (response-sns-invalid-topic-fault nil input)) ([resultWrapper500123 input] (clojure.core/let [rawinput500122 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500124 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-delete-db-instance-result ([input] (response-delete-db-instance-result nil input)) ([resultWrapper500126 input] (clojure.core/let [rawinput500125 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500127 {"DBInstance" (portkey.aws/search-for-tag rawinput500125 "DBInstance" :flattened? nil :result-wrapper resultWrapper500126)}] (clojure.core/cond-> {} (letvar500127 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar500127 ["DBInstance" :content])))))))

(clojure.core/defn- response-delete-event-subscription-result ([input] (response-delete-event-subscription-result nil input)) ([resultWrapper500129 input] (clojure.core/let [rawinput500128 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500130 {"EventSubscription" (portkey.aws/search-for-tag rawinput500128 "EventSubscription" :flattened? nil :result-wrapper resultWrapper500129)}] (clojure.core/cond-> {} (letvar500130 "EventSubscription") (clojure.core/assoc :event-subscription (deser-event-subscription (clojure.core/get-in letvar500130 ["EventSubscription" :content])))))))

(clojure.core/defn- response-pending-maintenance-actions-message ([input] (response-pending-maintenance-actions-message nil input)) ([resultWrapper500132 input] (clojure.core/let [rawinput500131 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500133 {"PendingMaintenanceActions" (portkey.aws/search-for-tag rawinput500131 "PendingMaintenanceActions" :flattened? nil :result-wrapper resultWrapper500132), "Marker" (portkey.aws/search-for-tag rawinput500131 "Marker" :flattened? nil :result-wrapper resultWrapper500132)}] (clojure.core/cond-> {} (letvar500133 "PendingMaintenanceActions") (clojure.core/assoc :pending-maintenance-actions (deser-pending-maintenance-actions (clojure.core/get-in letvar500133 ["PendingMaintenanceActions" :content]))) (letvar500133 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar500133 ["Marker" :content])))))))

(clojure.core/defn- response-reserved-db-instances-offering-not-found-fault ([input] (response-reserved-db-instances-offering-not-found-fault nil input)) ([resultWrapper500135 input] (clojure.core/let [rawinput500134 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500136 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-subnet-group-quota-exceeded-fault ([input] (response-db-subnet-group-quota-exceeded-fault nil input)) ([resultWrapper500138 input] (clojure.core/let [rawinput500137 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500139 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-add-source-identifier-to-subscription-result ([input] (response-add-source-identifier-to-subscription-result nil input)) ([resultWrapper500141 input] (clojure.core/let [rawinput500140 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500142 {"EventSubscription" (portkey.aws/search-for-tag rawinput500140 "EventSubscription" :flattened? nil :result-wrapper resultWrapper500141)}] (clojure.core/cond-> {} (letvar500142 "EventSubscription") (clojure.core/assoc :event-subscription (deser-event-subscription (clojure.core/get-in letvar500142 ["EventSubscription" :content])))))))

(clojure.core/defn- response-db-security-group-message ([input] (response-db-security-group-message nil input)) ([resultWrapper500144 input] (clojure.core/let [rawinput500143 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500145 {"Marker" (portkey.aws/search-for-tag rawinput500143 "Marker" :flattened? nil :result-wrapper resultWrapper500144), "DBSecurityGroups" (portkey.aws/search-for-tag rawinput500143 "DBSecurityGroups" :flattened? nil :result-wrapper resultWrapper500144)}] (clojure.core/cond-> {} (letvar500145 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar500145 ["Marker" :content]))) (letvar500145 "DBSecurityGroups") (clojure.core/assoc :db-security-groups (deser-db-security-groups (clojure.core/get-in letvar500145 ["DBSecurityGroups" :content])))))))

(clojure.core/defn- response-db-cluster-parameter-groups-message ([input] (response-db-cluster-parameter-groups-message nil input)) ([resultWrapper500147 input] (clojure.core/let [rawinput500146 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500148 {"Marker" (portkey.aws/search-for-tag rawinput500146 "Marker" :flattened? nil :result-wrapper resultWrapper500147), "DBClusterParameterGroups" (portkey.aws/search-for-tag rawinput500146 "DBClusterParameterGroups" :flattened? nil :result-wrapper resultWrapper500147)}] (clojure.core/cond-> {} (letvar500148 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar500148 ["Marker" :content]))) (letvar500148 "DBClusterParameterGroups") (clojure.core/assoc :db-cluster-parameter-groups (deser-db-cluster-parameter-group-list (clojure.core/get-in letvar500148 ["DBClusterParameterGroups" :content])))))))

(clojure.core/defn- response-modify-db-snapshot-attribute-result ([input] (response-modify-db-snapshot-attribute-result nil input)) ([resultWrapper500150 input] (clojure.core/let [rawinput500149 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500151 {"DBSnapshotAttributesResult" (portkey.aws/search-for-tag rawinput500149 "DBSnapshotAttributesResult" :flattened? nil :result-wrapper resultWrapper500150)}] (clojure.core/cond-> {} (letvar500151 "DBSnapshotAttributesResult") (clojure.core/assoc :db-snapshot-attributes-result (deser-db-snapshot-attributes-result (clojure.core/get-in letvar500151 ["DBSnapshotAttributesResult" :content])))))))

(clojure.core/defn- response-start-db-instance-result ([input] (response-start-db-instance-result nil input)) ([resultWrapper500153 input] (clojure.core/let [rawinput500152 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500154 {"DBInstance" (portkey.aws/search-for-tag rawinput500152 "DBInstance" :flattened? nil :result-wrapper resultWrapper500153)}] (clojure.core/cond-> {} (letvar500154 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar500154 ["DBInstance" :content])))))))

(clojure.core/defn- response-db-cluster-endpoint ([input] (response-db-cluster-endpoint nil input)) ([resultWrapper500156 input] (clojure.core/let [rawinput500155 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500157 {"ExcludedMembers" (portkey.aws/search-for-tag rawinput500155 "ExcludedMembers" :flattened? nil :result-wrapper resultWrapper500156), "EndpointType" (portkey.aws/search-for-tag rawinput500155 "EndpointType" :flattened? nil :result-wrapper resultWrapper500156), "Status" (portkey.aws/search-for-tag rawinput500155 "Status" :flattened? nil :result-wrapper resultWrapper500156), "DBClusterEndpointIdentifier" (portkey.aws/search-for-tag rawinput500155 "DBClusterEndpointIdentifier" :flattened? nil :result-wrapper resultWrapper500156), "CustomEndpointType" (portkey.aws/search-for-tag rawinput500155 "CustomEndpointType" :flattened? nil :result-wrapper resultWrapper500156), "StaticMembers" (portkey.aws/search-for-tag rawinput500155 "StaticMembers" :flattened? nil :result-wrapper resultWrapper500156), "DBClusterEndpointArn" (portkey.aws/search-for-tag rawinput500155 "DBClusterEndpointArn" :flattened? nil :result-wrapper resultWrapper500156), "Endpoint" (portkey.aws/search-for-tag rawinput500155 "Endpoint" :flattened? nil :result-wrapper resultWrapper500156), "DBClusterIdentifier" (portkey.aws/search-for-tag rawinput500155 "DBClusterIdentifier" :flattened? nil :result-wrapper resultWrapper500156), "DBClusterEndpointResourceIdentifier" (portkey.aws/search-for-tag rawinput500155 "DBClusterEndpointResourceIdentifier" :flattened? nil :result-wrapper resultWrapper500156)}] (clojure.core/cond-> {} (letvar500157 "ExcludedMembers") (clojure.core/assoc :excluded-members (deser-string-list (clojure.core/get-in letvar500157 ["ExcludedMembers" :content]))) (letvar500157 "EndpointType") (clojure.core/assoc :endpoint-type (deser-string (clojure.core/get-in letvar500157 ["EndpointType" :content]))) (letvar500157 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar500157 ["Status" :content]))) (letvar500157 "DBClusterEndpointIdentifier") (clojure.core/assoc :db-cluster-endpoint-identifier (deser-string (clojure.core/get-in letvar500157 ["DBClusterEndpointIdentifier" :content]))) (letvar500157 "CustomEndpointType") (clojure.core/assoc :custom-endpoint-type (deser-string (clojure.core/get-in letvar500157 ["CustomEndpointType" :content]))) (letvar500157 "StaticMembers") (clojure.core/assoc :static-members (deser-string-list (clojure.core/get-in letvar500157 ["StaticMembers" :content]))) (letvar500157 "DBClusterEndpointArn") (clojure.core/assoc :db-cluster-endpoint-arn (deser-string (clojure.core/get-in letvar500157 ["DBClusterEndpointArn" :content]))) (letvar500157 "Endpoint") (clojure.core/assoc :endpoint (deser-string (clojure.core/get-in letvar500157 ["Endpoint" :content]))) (letvar500157 "DBClusterIdentifier") (clojure.core/assoc :db-cluster-identifier (deser-string (clojure.core/get-in letvar500157 ["DBClusterIdentifier" :content]))) (letvar500157 "DBClusterEndpointResourceIdentifier") (clojure.core/assoc :db-cluster-endpoint-resource-identifier (deser-string (clojure.core/get-in letvar500157 ["DBClusterEndpointResourceIdentifier" :content])))))))

(clojure.core/defn- response-delete-db-cluster-result ([input] (response-delete-db-cluster-result nil input)) ([resultWrapper500159 input] (clojure.core/let [rawinput500158 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500160 {"DBCluster" (portkey.aws/search-for-tag rawinput500158 "DBCluster" :flattened? nil :result-wrapper resultWrapper500159)}] (clojure.core/cond-> {} (letvar500160 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar500160 ["DBCluster" :content])))))))

(clojure.core/defn- response-db-subnet-quota-exceeded-fault ([input] (response-db-subnet-quota-exceeded-fault nil input)) ([resultWrapper500162 input] (clojure.core/let [rawinput500161 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500163 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-snapshot-state-fault ([input] (response-invalid-db-snapshot-state-fault nil input)) ([resultWrapper500165 input] (clojure.core/let [rawinput500164 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500166 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-instance-role-quota-exceeded-fault ([input] (response-db-instance-role-quota-exceeded-fault nil input)) ([resultWrapper500168 input] (clojure.core/let [rawinput500167 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500169 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-reserved-db-instance-quota-exceeded-fault ([input] (response-reserved-db-instance-quota-exceeded-fault nil input)) ([resultWrapper500171 input] (clojure.core/let [rawinput500170 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500172 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-purchase-reserved-db-instances-offering-result ([input] (response-purchase-reserved-db-instances-offering-result nil input)) ([resultWrapper500174 input] (clojure.core/let [rawinput500173 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500175 {"ReservedDBInstance" (portkey.aws/search-for-tag rawinput500173 "ReservedDBInstance" :flattened? nil :result-wrapper resultWrapper500174)}] (clojure.core/cond-> {} (letvar500175 "ReservedDBInstance") (clojure.core/assoc :reserved-db-instance (deser-reserved-db-instance (clojure.core/get-in letvar500175 ["ReservedDBInstance" :content])))))))

(clojure.core/defn- response-db-subnet-group-already-exists-fault ([input] (response-db-subnet-group-already-exists-fault nil input)) ([resultWrapper500177 input] (clojure.core/let [rawinput500176 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500178 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-remove-from-global-cluster-result ([input] (response-remove-from-global-cluster-result nil input)) ([resultWrapper500180 input] (clojure.core/let [rawinput500179 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500181 {"GlobalCluster" (portkey.aws/search-for-tag rawinput500179 "GlobalCluster" :flattened? nil :result-wrapper resultWrapper500180)}] (clojure.core/cond-> {} (letvar500181 "GlobalCluster") (clojure.core/assoc :global-cluster (deser-global-cluster (clojure.core/get-in letvar500181 ["GlobalCluster" :content])))))))

(clojure.core/defn- response-create-db-instance-read-replica-result ([input] (response-create-db-instance-read-replica-result nil input)) ([resultWrapper500183 input] (clojure.core/let [rawinput500182 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500184 {"DBInstance" (portkey.aws/search-for-tag rawinput500182 "DBInstance" :flattened? nil :result-wrapper resultWrapper500183)}] (clojure.core/cond-> {} (letvar500184 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar500184 ["DBInstance" :content])))))))

(clojure.core/defn- response-download-db-log-file-portion-details ([input] (response-download-db-log-file-portion-details nil input)) ([resultWrapper500186 input] (clojure.core/let [rawinput500185 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500187 {"LogFileData" (portkey.aws/search-for-tag rawinput500185 "LogFileData" :flattened? nil :result-wrapper resultWrapper500186), "Marker" (portkey.aws/search-for-tag rawinput500185 "Marker" :flattened? nil :result-wrapper resultWrapper500186), "AdditionalDataPending" (portkey.aws/search-for-tag rawinput500185 "AdditionalDataPending" :flattened? nil :result-wrapper resultWrapper500186)}] (clojure.core/cond-> {} (letvar500187 "LogFileData") (clojure.core/assoc :log-file-data (deser-string (clojure.core/get-in letvar500187 ["LogFileData" :content]))) (letvar500187 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar500187 ["Marker" :content]))) (letvar500187 "AdditionalDataPending") (clojure.core/assoc :additional-data-pending (deser-boolean (clojure.core/get-in letvar500187 ["AdditionalDataPending" :content])))))))

(clojure.core/defn- response-db-snapshot-not-found-fault ([input] (response-db-snapshot-not-found-fault nil input)) ([resultWrapper500189 input] (clojure.core/let [rawinput500188 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500190 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-parameter-group-state-fault ([input] (response-invalid-db-parameter-group-state-fault nil input)) ([resultWrapper500192 input] (clojure.core/let [rawinput500191 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500193 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-modify-db-cluster-result ([input] (response-modify-db-cluster-result nil input)) ([resultWrapper500195 input] (clojure.core/let [rawinput500194 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500196 {"DBCluster" (portkey.aws/search-for-tag rawinput500194 "DBCluster" :flattened? nil :result-wrapper resultWrapper500195)}] (clojure.core/cond-> {} (letvar500196 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar500196 ["DBCluster" :content])))))))

(clojure.core/defn- response-db-security-group-not-found-fault ([input] (response-db-security-group-not-found-fault nil input)) ([resultWrapper500198 input] (clojure.core/let [rawinput500197 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500199 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-security-group-already-exists-fault ([input] (response-db-security-group-already-exists-fault nil input)) ([resultWrapper500201 input] (clojure.core/let [rawinput500200 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500202 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-global-cluster-already-exists-fault ([input] (response-global-cluster-already-exists-fault nil input)) ([resultWrapper500204 input] (clojure.core/let [rawinput500203 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar500205 {}] (clojure.core/cond-> {}))))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/source-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/vpc-security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/vpc-security-group-membership))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/certificate-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/certificate))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/subnet-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-db-cluster-to-point-in-time-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-maintenance-action/action (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-maintenance-action/auto-applied-after-date (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-maintenance-action/forced-apply-date (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-maintenance-action/opt-in-status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-maintenance-action/current-apply-date (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-maintenance-action/description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/pending-maintenance-action (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.pending-maintenance-action/action :portkey.aws.rds.-2014-10-31.pending-maintenance-action/auto-applied-after-date :portkey.aws.rds.-2014-10-31.pending-maintenance-action/forced-apply-date :portkey.aws.rds.-2014-10-31.pending-maintenance-action/opt-in-status :portkey.aws.rds.-2014-10-31.pending-maintenance-action/current-apply-date :portkey.aws.rds.-2014-10-31.pending-maintenance-action/description]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-global-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/global-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/read-replica-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-db-instance-from-db-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/string-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/remove-source-identifier-from-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-backtrack-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-snapshot]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/snapshot-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/filter-value-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-global-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/global-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/parameters-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/parameter))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/domain-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/ec-2-security-group-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/ec-2-security-group))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/copy-db-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.double-range/from (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/double))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.double-range/to (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/double))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/double-range (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.double-range/from :portkey.aws.rds.-2014-10-31.double-range/to]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.minimum-engine-version-per-allowed-value/allowed-value (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.minimum-engine-version-per-allowed-value/minimum-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/minimum-engine-version-per-allowed-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.minimum-engine-version-per-allowed-value/allowed-value :portkey.aws.rds.-2014-10-31.minimum-engine-version-per-allowed-value/minimum-engine-version]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-endpoint-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-snapshot-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/snapshot-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/include-shared (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/include-public (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-cluster-snapshots-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/db-cluster-identifier :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/db-cluster-snapshot-identifier :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/snapshot-type :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/filters :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/marker :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/include-shared :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshots-message/include-public]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/character-set-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/database-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/s-3-ingestion-role-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/s-3-bucket-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/source-engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/master-username (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/source-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/backtrack-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/s-3-prefix (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-db-cluster-from-s-3-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/db-cluster-identifier :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/engine :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/master-username :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/master-user-password :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/source-engine :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/source-engine-version :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/s-3-bucket-name :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/s-3-ingestion-role-arn] :opt-un [:portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/deletion-protection :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/backup-retention-period :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/option-group-name :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/character-set-name :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/enable-iam-database-authentication :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/database-name :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/preferred-maintenance-window :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/enable-cloudwatch-logs-exports :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/tags :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/vpc-security-group-ids :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/db-cluster-parameter-group-name :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/engine-version :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/storage-encrypted :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/port :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/kms-key-id :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/backtrack-window :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/s-3-prefix :portkey.aws.rds.-2014-10-31/availability-zones :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-s-3-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-parameter-group-message/source-db-parameter-group-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-parameter-group-message/target-db-parameter-group-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-parameter-group-message/target-db-parameter-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/copy-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.copy-db-parameter-group-message/source-db-parameter-group-identifier :portkey.aws.rds.-2014-10-31.copy-db-parameter-group-message/target-db-parameter-group-identifier :portkey.aws.rds.-2014-10-31.copy-db-parameter-group-message/target-db-parameter-group-description] :opt-un [:portkey.aws.rds.-2014-10-31.copy-db-parameter-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-role/role-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-role/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-role/feature-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-role (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-role/role-arn :portkey.aws.rds.-2014-10-31.db-cluster-role/status :portkey.aws.rds.-2014-10-31.db-cluster-role/feature-name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.filter/name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.filter/values (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-value-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/filter (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.filter/name :portkey.aws.rds.-2014-10-31.filter/values] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/pending-maintenance-action-details (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/pending-maintenance-action))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-cluster-snapshot-message/source-db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-cluster-snapshot-message/target-db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-cluster-snapshot-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-cluster-snapshot-message/pre-signed-url (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-cluster-snapshot-message/copy-tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-cluster-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/copy-db-cluster-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.copy-db-cluster-snapshot-message/source-db-cluster-snapshot-identifier :portkey.aws.rds.-2014-10-31.copy-db-cluster-snapshot-message/target-db-cluster-snapshot-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.copy-db-cluster-snapshot-message/kms-key-id :portkey.aws.rds.-2014-10-31.copy-db-cluster-snapshot-message/pre-signed-url :portkey.aws.rds.-2014-10-31.copy-db-cluster-snapshot-message/copy-tags :portkey.aws.rds.-2014-10-31.copy-db-cluster-snapshot-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/source-region-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/source-region))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/promote-read-replica-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-parameter-group-status/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-parameter-group-status/parameter-apply-status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-parameter-group-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-parameter-group-status/db-parameter-group-name :portkey.aws.rds.-2014-10-31.db-parameter-group-status/parameter-apply-status]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/valid-storage-options-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/valid-storage-options))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-security-groups (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-security-group))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-instances-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-instances-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-instances-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-instances-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-instances-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-instances-message/db-instance-identifier :portkey.aws.rds.-2014-10-31.describe-db-instances-message/filters :portkey.aws.rds.-2014-10-31.describe-db-instances-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-instances-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-db-instance-to-point-in-time-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reset-db-cluster-parameter-group-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reset-db-cluster-parameter-group-message/reset-all-parameters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reset-db-cluster-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reset-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.reset-db-cluster-parameter-group-message/db-cluster-parameter-group-name] :opt-un [:portkey.aws.rds.-2014-10-31.reset-db-cluster-parameter-group-message/reset-all-parameters :portkey.aws.rds.-2014-10-31.reset-db-cluster-parameter-group-message/parameters]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-cluster-parameter-group-message/source-db-cluster-parameter-group-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-cluster-parameter-group-message/target-db-cluster-parameter-group-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-cluster-parameter-group-message/target-db-cluster-parameter-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-cluster-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/copy-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.copy-db-cluster-parameter-group-message/source-db-cluster-parameter-group-identifier :portkey.aws.rds.-2014-10-31.copy-db-cluster-parameter-group-message/target-db-cluster-parameter-group-identifier :portkey.aws.rds.-2014-10-31.copy-db-cluster-parameter-group-message/target-db-cluster-parameter-group-description] :opt-un [:portkey.aws.rds.-2014-10-31.copy-db-cluster-parameter-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-snapshot-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.delete-db-snapshot-message/db-snapshot-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-parameter-group-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.modify-db-cluster-parameter-group-message/db-cluster-parameter-group-name :portkey.aws.rds.-2014-10-31.modify-db-cluster-parameter-group-message/parameters] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-instance-automated-backup-message/dbi-resource-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-instance-automated-backup-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.delete-db-instance-automated-backup-message/dbi-resource-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/include-public (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/snapshot-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/include-shared (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/dbi-resource-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-snapshots-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/db-instance-identifier :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/marker :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/include-public :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/snapshot-type :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/include-shared :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/db-snapshot-identifier :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/dbi-resource-id :portkey.aws.rds.-2014-10-31.describe-db-snapshots-message/filters]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-parameter-group-details/parameters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-parameter-group-details/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-parameter-group-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-parameter-group-details/parameters :portkey.aws.rds.-2014-10-31.db-parameter-group-details/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-version/version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-version/is-default (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.option-version/version :portkey.aws.rds.-2014-10-31.option-version/is-default]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-parameter-group-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.delete-db-parameter-group-message/db-parameter-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/double-optional clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/minimum-engine-version-per-allowed-value-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/minimum-engine-version-per-allowed-value))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.scaling-configuration-info/min-capacity (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.scaling-configuration-info/max-capacity (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.scaling-configuration-info/auto-pause (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.scaling-configuration-info/seconds-until-auto-pause (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/scaling-configuration-info (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.scaling-configuration-info/min-capacity :portkey.aws.rds.-2014-10-31.scaling-configuration-info/max-capacity :portkey.aws.rds.-2014-10-31.scaling-configuration-info/auto-pause :portkey.aws.rds.-2014-10-31.scaling-configuration-info/seconds-until-auto-pause]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/source-ids-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.source-region-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.source-region-message/source-regions (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/source-region-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/source-region-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.source-region-message/marker :portkey.aws.rds.-2014-10-31.source-region-message/source-regions]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-snapshot-attribute-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-snapshot-attribute))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-db-cluster-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.source-region/region-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.source-region/endpoint (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.source-region/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/source-region (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.source-region/region-name :portkey.aws.rds.-2014-10-31.source-region/endpoint :portkey.aws.rds.-2014-10-31.source-region/status]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/global-cluster-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/options-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/option))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-engine-default-parameters-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-engine-default-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-engine-default-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-engine-default-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-engine-default-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.describe-engine-default-parameters-message/db-parameter-group-family] :opt-un [:portkey.aws.rds.-2014-10-31.describe-engine-default-parameters-message/filters :portkey.aws.rds.-2014-10-31.describe-engine-default-parameters-message/max-records :portkey.aws.rds.-2014-10-31.describe-engine-default-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/start-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.stop-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/stop-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.stop-db-cluster-message/db-cluster-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/sns-no-authorization-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/copy-option-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/option-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option/vpc-security-group-memberships (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option/option-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option/db-security-group-memberships (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option/option-settings (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/option-setting-configuration-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option/permanent (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option/persistent (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option/option-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option/option-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.option/vpc-security-group-memberships :portkey.aws.rds.-2014-10-31.option/option-version :portkey.aws.rds.-2014-10-31.option/db-security-group-memberships :portkey.aws.rds.-2014-10-31.option/option-settings :portkey.aws.rds.-2014-10-31.option/permanent :portkey.aws.rds.-2014-10-31.option/persistent :portkey.aws.rds.-2014-10-31.option/port :portkey.aws.rds.-2014-10-31.option/option-description :portkey.aws.rds.-2014-10-31.option/option-name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-group-options-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/option-group-option))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-snapshot-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-snapshot-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.create-db-snapshot-message/db-snapshot-identifier :portkey.aws.rds.-2014-10-31.create-db-snapshot-message/db-instance-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.create-db-snapshot-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-parameter-group-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-parameter-group))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reboot-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/instance-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-parameter-group-status-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-parameter-group-status))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-parameter-group-name-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-parameter-group-name-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-parameter-group-name-message/db-parameter-group-name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/apply-pending-maintenance-action-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/resource-pending-maintenance-actions]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/double-range-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/double-range))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/list-supported-character-sets (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/default-only (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/list-supported-timezones (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-engine-versions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/marker :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/list-supported-character-sets :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/default-only :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/engine-version :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/list-supported-timezones :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/filters :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/engine :portkey.aws.rds.-2014-10-31.describe-db-engine-versions-message/db-parameter-group-family]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.promote-read-replica-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/promote-read-replica-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.promote-read-replica-db-cluster-message/db-cluster-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-parameter-group-name-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-name-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-parameter-group-name-message/db-cluster-parameter-group-name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-source-regions-message/region-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-source-regions-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-source-regions-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-source-regions-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-source-regions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-source-regions-message/region-name :portkey.aws.rds.-2014-10-31.describe-source-regions-message/max-records :portkey.aws.rds.-2014-10-31.describe-source-regions-message/marker :portkey.aws.rds.-2014-10-31.describe-source-regions-message/filters]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-event-subscriptions-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-event-subscriptions-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-event-subscriptions-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-event-subscriptions-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-event-subscriptions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-event-subscriptions-message/subscription-name :portkey.aws.rds.-2014-10-31.describe-event-subscriptions-message/filters :portkey.aws.rds.-2014-10-31.describe-event-subscriptions-message/max-records :portkey.aws.rds.-2014-10-31.describe-event-subscriptions-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-subnet-groups-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-subnet-groups-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-subnet-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-subnet-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-subnet-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-subnet-groups-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.describe-db-subnet-groups-message/filters :portkey.aws.rds.-2014-10-31.describe-db-subnet-groups-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-subnet-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/pending-maintenance-actions (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/resource-pending-maintenance-actions))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-endpoint-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-db-cluster-from-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/domain-iam-role-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/db-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/use-default-processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/domain (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/iops (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/tde-credential-password (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/storage-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-db-instance-from-db-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/db-instance-identifier :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/db-snapshot-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/deletion-protection :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/option-group-name :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/enable-iam-database-authentication :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/publicly-accessible :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/domain-iam-role-name :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/copy-tags-to-snapshot :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/enable-cloudwatch-logs-exports :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/auto-minor-version-upgrade :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/tags :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/db-name :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/vpc-security-group-ids :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/use-default-processor-features :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/availability-zone :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/license-model :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/domain :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/port :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/iops :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/tde-credential-password :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/storage-type :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/processor-features :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/db-instance-class :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/engine :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/db-parameter-group-name :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/tde-credential-arn :portkey.aws.rds.-2014-10-31.restore-db-instance-from-db-snapshot-message/multi-az]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option-setting/setting-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option-setting/setting-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option-setting/default-value (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option-setting/apply-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option-setting/allowed-values (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option-setting/is-modifiable (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option-setting/is-required (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option-setting/minimum-engine-version-per-allowed-value (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/minimum-engine-version-per-allowed-value-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-group-option-setting (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.option-group-option-setting/setting-name :portkey.aws.rds.-2014-10-31.option-group-option-setting/setting-description :portkey.aws.rds.-2014-10-31.option-group-option-setting/default-value :portkey.aws.rds.-2014-10-31.option-group-option-setting/apply-type :portkey.aws.rds.-2014-10-31.option-group-option-setting/allowed-values :portkey.aws.rds.-2014-10-31.option-group-option-setting/is-modifiable :portkey.aws.rds.-2014-10-31.option-group-option-setting/is-required :portkey.aws.rds.-2014-10-31.option-group-option-setting/minimum-engine-version-per-allowed-value]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.subnet/subnet-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.subnet/subnet-availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/availability-zone))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.subnet/subnet-status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/subnet (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.subnet/subnet-identifier :portkey.aws.rds.-2014-10-31.subnet/subnet-availability-zone :portkey.aws.rds.-2014-10-31.subnet/subnet-status]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-subnet-group-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-subnet-group-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-subnet-group-message/marker :portkey.aws.rds.-2014-10-31/db-subnet-groups]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/restore-to-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/source-db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/backtrack-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/restore-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/use-latest-restorable-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-db-cluster-to-point-in-time-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/db-cluster-identifier :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/source-db-cluster-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/deletion-protection :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/option-group-name :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/enable-iam-database-authentication :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/enable-cloudwatch-logs-exports :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/restore-to-time :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/tags :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/vpc-security-group-ids :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/db-cluster-parameter-group-name :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/port :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/kms-key-id :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/backtrack-window :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/restore-type :portkey.aws.rds.-2014-10-31.restore-db-cluster-to-point-in-time-message/use-latest-restorable-time]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/database-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/engine-mode (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/backtrack-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-db-cluster-from-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/db-cluster-identifier :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/snapshot-identifier :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/engine] :opt-un [:portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/deletion-protection :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/option-group-name :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/enable-iam-database-authentication :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/database-name :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/engine-mode :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/enable-cloudwatch-logs-exports :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/tags :portkey.aws.rds.-2014-10-31/scaling-configuration :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/vpc-security-group-ids :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/db-cluster-parameter-group-name :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/engine-version :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/port :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/kms-key-id :portkey.aws.rds.-2014-10-31.restore-db-cluster-from-snapshot-message/backtrack-window :portkey.aws.rds.-2014-10-31/availability-zones]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/snapshot-create-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/snapshot-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/master-username (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/vpc-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/cluster-create-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/iam-database-authentication-enabled (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/source-db-cluster-snapshot-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/db-cluster-snapshot-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/percent-progress (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-snapshot (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-snapshot/snapshot-create-time :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/db-cluster-snapshot-identifier :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/status :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/snapshot-type :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/license-model :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/allocated-storage :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/master-username :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/engine-version :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/storage-encrypted :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/port :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/vpc-id :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/kms-key-id :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/cluster-create-time :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/iam-database-authentication-enabled :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/engine :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/source-db-cluster-snapshot-arn :portkey.aws.rds.-2014-10-31/availability-zones :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/db-cluster-identifier :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/db-cluster-snapshot-arn :portkey.aws.rds.-2014-10-31.db-cluster-snapshot/percent-progress]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-subnet-group-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-subnet-group-message/db-subnet-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.modify-db-subnet-group-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.modify-db-subnet-group-message/subnet-ids] :opt-un [:portkey.aws.rds.-2014-10-31.modify-db-subnet-group-message/db-subnet-group-description]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-security-group-message/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-security-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.delete-db-security-group-message/db-security-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-cloudwatch-logs-exports/log-types-to-enable (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-cloudwatch-logs-exports/log-types-to-disable (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/pending-cloudwatch-logs-exports (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.pending-cloudwatch-logs-exports/log-types-to-enable :portkey.aws.rds.-2014-10-31.pending-cloudwatch-logs-exports/log-types-to-disable]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/promote-read-replica-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-security-groups (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/promotion-tier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/character-set-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/domain-iam-role-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/domain (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/monitoring-interval (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/timezone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/master-username (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/iops (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/tde-credential-password (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/storage-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/performance-insights-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/enable-performance-insights (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/performance-insights-kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.create-db-instance-message/db-instance-identifier :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-instance-class :portkey.aws.rds.-2014-10-31.create-db-instance-message/engine] :opt-un [:portkey.aws.rds.-2014-10-31.create-db-instance-message/deletion-protection :portkey.aws.rds.-2014-10-31.create-db-instance-message/backup-retention-period :portkey.aws.rds.-2014-10-31.create-db-instance-message/option-group-name :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-security-groups :portkey.aws.rds.-2014-10-31.create-db-instance-message/promotion-tier :portkey.aws.rds.-2014-10-31.create-db-instance-message/character-set-name :portkey.aws.rds.-2014-10-31.create-db-instance-message/enable-iam-database-authentication :portkey.aws.rds.-2014-10-31.create-db-instance-message/publicly-accessible :portkey.aws.rds.-2014-10-31.create-db-instance-message/domain-iam-role-name :portkey.aws.rds.-2014-10-31.create-db-instance-message/preferred-maintenance-window :portkey.aws.rds.-2014-10-31.create-db-instance-message/copy-tags-to-snapshot :portkey.aws.rds.-2014-10-31.create-db-instance-message/enable-cloudwatch-logs-exports :portkey.aws.rds.-2014-10-31.create-db-instance-message/auto-minor-version-upgrade :portkey.aws.rds.-2014-10-31.create-db-instance-message/tags :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-name :portkey.aws.rds.-2014-10-31.create-db-instance-message/vpc-security-group-ids :portkey.aws.rds.-2014-10-31.create-db-instance-message/availability-zone :portkey.aws.rds.-2014-10-31.create-db-instance-message/master-user-password :portkey.aws.rds.-2014-10-31.create-db-instance-message/license-model :portkey.aws.rds.-2014-10-31.create-db-instance-message/domain :portkey.aws.rds.-2014-10-31.create-db-instance-message/allocated-storage :portkey.aws.rds.-2014-10-31.create-db-instance-message/monitoring-interval :portkey.aws.rds.-2014-10-31.create-db-instance-message/timezone :portkey.aws.rds.-2014-10-31.create-db-instance-message/master-username :portkey.aws.rds.-2014-10-31.create-db-instance-message/engine-version :portkey.aws.rds.-2014-10-31.create-db-instance-message/storage-encrypted :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.create-db-instance-message/port :portkey.aws.rds.-2014-10-31.create-db-instance-message/kms-key-id :portkey.aws.rds.-2014-10-31.create-db-instance-message/iops :portkey.aws.rds.-2014-10-31.create-db-instance-message/tde-credential-password :portkey.aws.rds.-2014-10-31.create-db-instance-message/storage-type :portkey.aws.rds.-2014-10-31.create-db-instance-message/processor-features :portkey.aws.rds.-2014-10-31.create-db-instance-message/performance-insights-retention-period :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-parameter-group-name :portkey.aws.rds.-2014-10-31.create-db-instance-message/enable-performance-insights :portkey.aws.rds.-2014-10-31.create-db-instance-message/monitoring-role-arn :portkey.aws.rds.-2014-10-31.create-db-instance-message/tde-credential-arn :portkey.aws.rds.-2014-10-31.create-db-instance-message/multi-az :portkey.aws.rds.-2014-10-31.create-db-instance-message/performance-insights-kms-key-id :portkey.aws.rds.-2014-10-31.create-db-instance-message/db-cluster-identifier :portkey.aws.rds.-2014-10-31.create-db-instance-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.promote-read-replica-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.promote-read-replica-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.promote-read-replica-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/promote-read-replica-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.promote-read-replica-message/db-instance-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.promote-read-replica-message/backup-retention-period :portkey.aws.rds.-2014-10-31.promote-read-replica-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/key-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-cluster))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-db-cluster-endpoint-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-backtrack-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-cluster-backtrack))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-snapshot-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-snapshot-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-snapshot-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.modify-db-snapshot-message/db-snapshot-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.modify-db-snapshot-message/engine-version :portkey.aws.rds.-2014-10-31.modify-db-snapshot-message/option-group-name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-engine-version-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-engine-version))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event-subscription/event-subscription-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event-subscription/customer-aws-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event-subscription/source-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event-subscription/enabled (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event-subscription/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event-subscription/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event-subscription/cust-subscription-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event-subscription/subscription-creation-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/event-subscription (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/source-ids-list :portkey.aws.rds.-2014-10-31.event-subscription/event-subscription-arn :portkey.aws.rds.-2014-10-31.event-subscription/customer-aws-id :portkey.aws.rds.-2014-10-31.event-subscription/source-type :portkey.aws.rds.-2014-10-31.event-subscription/enabled :portkey.aws.rds.-2014-10-31.event-subscription/status :portkey.aws.rds.-2014-10-31.event-subscription/sns-topic-arn :portkey.aws.rds.-2014-10-31/event-categories-list :portkey.aws.rds.-2014-10-31.event-subscription/cust-subscription-id :portkey.aws.rds.-2014-10-31.event-subscription/subscription-creation-time]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/snapshot-create-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/source-region (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/source-db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/encrypted (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/instance-create-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/snapshot-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/timezone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/master-username (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/vpc-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/dbi-resource-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/iops (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/storage-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/iam-database-authentication-enabled (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/db-snapshot-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot/percent-progress (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-snapshot (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-snapshot/snapshot-create-time :portkey.aws.rds.-2014-10-31.db-snapshot/option-group-name :portkey.aws.rds.-2014-10-31.db-snapshot/source-region :portkey.aws.rds.-2014-10-31.db-snapshot/source-db-snapshot-identifier :portkey.aws.rds.-2014-10-31.db-snapshot/encrypted :portkey.aws.rds.-2014-10-31.db-snapshot/db-instance-identifier :portkey.aws.rds.-2014-10-31.db-snapshot/instance-create-time :portkey.aws.rds.-2014-10-31.db-snapshot/availability-zone :portkey.aws.rds.-2014-10-31.db-snapshot/status :portkey.aws.rds.-2014-10-31.db-snapshot/snapshot-type :portkey.aws.rds.-2014-10-31.db-snapshot/license-model :portkey.aws.rds.-2014-10-31.db-snapshot/allocated-storage :portkey.aws.rds.-2014-10-31.db-snapshot/timezone :portkey.aws.rds.-2014-10-31.db-snapshot/master-username :portkey.aws.rds.-2014-10-31.db-snapshot/engine-version :portkey.aws.rds.-2014-10-31.db-snapshot/db-snapshot-identifier :portkey.aws.rds.-2014-10-31.db-snapshot/port :portkey.aws.rds.-2014-10-31.db-snapshot/vpc-id :portkey.aws.rds.-2014-10-31.db-snapshot/kms-key-id :portkey.aws.rds.-2014-10-31.db-snapshot/dbi-resource-id :portkey.aws.rds.-2014-10-31.db-snapshot/iops :portkey.aws.rds.-2014-10-31.db-snapshot/storage-type :portkey.aws.rds.-2014-10-31.db-snapshot/processor-features :portkey.aws.rds.-2014-10-31.db-snapshot/iam-database-authentication-enabled :portkey.aws.rds.-2014-10-31.db-snapshot/db-snapshot-arn :portkey.aws.rds.-2014-10-31.db-snapshot/engine :portkey.aws.rds.-2014-10-31.db-snapshot/tde-credential-arn :portkey.aws.rds.-2014-10-31.db-snapshot/percent-progress]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-endpoints-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-endpoints-message/db-cluster-endpoint-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-endpoints-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-endpoints-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-endpoints-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-cluster-endpoints-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-cluster-endpoints-message/db-cluster-identifier :portkey.aws.rds.-2014-10-31.describe-db-cluster-endpoints-message/db-cluster-endpoint-identifier :portkey.aws.rds.-2014-10-31.describe-db-cluster-endpoints-message/filters :portkey.aws.rds.-2014-10-31.describe-db-cluster-endpoints-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-cluster-endpoints-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-log-files-details/log-file-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-log-files-details/last-written (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-log-files-details/size (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-log-files-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-log-files-details/log-file-name :portkey.aws.rds.-2014-10-31.describe-db-log-files-details/last-written :portkey.aws.rds.-2014-10-31.describe-db-log-files-details/size]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-member/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-member/is-cluster-writer (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-member/db-cluster-parameter-group-status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-member/promotion-tier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-member (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-member/db-instance-identifier :portkey.aws.rds.-2014-10-31.db-cluster-member/is-cluster-writer :portkey.aws.rds.-2014-10-31.db-cluster-member/db-cluster-parameter-group-status :portkey.aws.rds.-2014-10-31.db-cluster-member/promotion-tier]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-option-group-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-option-group-message/engine-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-option-group-message/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-option-group-message/option-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-option-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-option-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.create-option-group-message/option-group-name :portkey.aws.rds.-2014-10-31.create-option-group-message/engine-name :portkey.aws.rds.-2014-10-31.create-option-group-message/major-engine-version :portkey.aws.rds.-2014-10-31.create-option-group-message/option-group-description] :opt-un [:portkey.aws.rds.-2014-10-31.create-option-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-role-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.start-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/start-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.start-db-cluster-message/db-cluster-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-instance-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.add-role-to-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.add-role-to-db-cluster-message/role-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/add-role-to-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.add-role-to-db-cluster-message/db-cluster-identifier :portkey.aws.rds.-2014-10-31.add-role-to-db-cluster-message/role-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-names-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-instance-message/skip-final-snapshot (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-instance-message/final-db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-instance-message/delete-automated-backups (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.delete-db-instance-message/db-instance-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.delete-db-instance-message/skip-final-snapshot :portkey.aws.rds.-2014-10-31.delete-db-instance-message/final-db-snapshot-identifier :portkey.aws.rds.-2014-10-31.delete-db-instance-message/delete-automated-backups]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-global-clusters-message/global-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-global-clusters-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-global-clusters-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-global-clusters-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-global-clusters-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-global-clusters-message/global-cluster-identifier :portkey.aws.rds.-2014-10-31.describe-global-clusters-message/filters :portkey.aws.rds.-2014-10-31.describe-global-clusters-message/max-records :portkey.aws.rds.-2014-10-31.describe-global-clusters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot-attributes-result/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot-attributes-result/db-snapshot-attributes (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-snapshot-attribute-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-snapshot-attributes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-snapshot-attributes-result/db-snapshot-identifier :portkey.aws.rds.-2014-10-31.db-snapshot-attributes-result/db-snapshot-attributes]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/shared-snapshot-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-db-subnet-group-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/certificate-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-cluster-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster-snapshot]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/copy-db-cluster-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster-snapshot]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-backtrack/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-backtrack/backtrack-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-backtrack/backtrack-to (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-backtrack/backtracked-from (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-backtrack/backtrack-request-creation-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-backtrack/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-backtrack (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-backtrack/db-cluster-identifier :portkey.aws.rds.-2014-10-31.db-cluster-backtrack/backtrack-identifier :portkey.aws.rds.-2014-10-31.db-cluster-backtrack/backtrack-to :portkey.aws.rds.-2014-10-31.db-cluster-backtrack/backtracked-from :portkey.aws.rds.-2014-10-31.db-cluster-backtrack/backtrack-request-creation-time :portkey.aws.rds.-2014-10-31.db-cluster-backtrack/status]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.start-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/start-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.start-db-instance-message/db-instance-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reserved-db-instance-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/reserved-db-instance))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-options-message/orderable-db-instance-options (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/orderable-db-instance-options-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-options-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/orderable-db-instance-options-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.orderable-db-instance-options-message/orderable-db-instance-options :portkey.aws.rds.-2014-10-31.orderable-db-instance-options-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/event-categories-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/event-categories-map-list]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.resource-pending-maintenance-actions/resource-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/resource-pending-maintenance-actions (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.resource-pending-maintenance-actions/resource-identifier :portkey.aws.rds.-2014-10-31/pending-maintenance-action-details]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.global-cluster/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.global-cluster/global-cluster-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.global-cluster/database-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.global-cluster/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.global-cluster/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.global-cluster/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.global-cluster/global-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.global-cluster/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.global-cluster/global-cluster-members (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/global-cluster-member-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.global-cluster/global-cluster-resource-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/global-cluster (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.global-cluster/deletion-protection :portkey.aws.rds.-2014-10-31.global-cluster/global-cluster-arn :portkey.aws.rds.-2014-10-31.global-cluster/database-name :portkey.aws.rds.-2014-10-31.global-cluster/status :portkey.aws.rds.-2014-10-31.global-cluster/engine-version :portkey.aws.rds.-2014-10-31.global-cluster/storage-encrypted :portkey.aws.rds.-2014-10-31.global-cluster/global-cluster-identifier :portkey.aws.rds.-2014-10-31.global-cluster/engine :portkey.aws.rds.-2014-10-31.global-cluster/global-cluster-members :portkey.aws.rds.-2014-10-31.global-cluster/global-cluster-resource-id]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-cluster-snapshot-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-cluster-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.delete-db-cluster-snapshot-message/db-cluster-snapshot-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.scaling-configuration/min-capacity (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.scaling-configuration/max-capacity (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.scaling-configuration/auto-pause (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.scaling-configuration/seconds-until-auto-pause (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/scaling-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.scaling-configuration/min-capacity :portkey.aws.rds.-2014-10-31.scaling-configuration/max-capacity :portkey.aws.rds.-2014-10-31.scaling-configuration/auto-pause :portkey.aws.rds.-2014-10-31.scaling-configuration/seconds-until-auto-pause]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.apply-pending-maintenance-action-message/resource-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.apply-pending-maintenance-action-message/apply-action (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.apply-pending-maintenance-action-message/opt-in-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/apply-pending-maintenance-action-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.apply-pending-maintenance-action-message/resource-identifier :portkey.aws.rds.-2014-10-31.apply-pending-maintenance-action-message/apply-action :portkey.aws.rds.-2014-10-31.apply-pending-maintenance-action-message/opt-in-type] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-events-message/end-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-events-message/start-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-events-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-events-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-events-message/duration (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-events-message/event-categories (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-events-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-events-message/source-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-events-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-events-message/end-time :portkey.aws.rds.-2014-10-31.describe-events-message/start-time :portkey.aws.rds.-2014-10-31.describe-events-message/max-records :portkey.aws.rds.-2014-10-31.describe-events-message/marker :portkey.aws.rds.-2014-10-31/source-type :portkey.aws.rds.-2014-10-31.describe-events-message/duration :portkey.aws.rds.-2014-10-31.describe-events-message/event-categories :portkey.aws.rds.-2014-10-31.describe-events-message/filters :portkey.aws.rds.-2014-10-31.describe-events-message/source-identifier]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/subscription-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/replication-source-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/earliest-restorable-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/character-set-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/database-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/custom-endpoints (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/engine-mode (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/clone-group-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/enabled-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/master-username (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/hosted-zone-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/db-cluster-resource-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/db-cluster-members (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-member-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/cluster-create-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/capacity (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/backtrack-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/read-replica-identifiers (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/read-replica-identifier-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/db-cluster-parameter-group (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/endpoint (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/iam-database-authentication-enabled (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/db-cluster-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/vpc-security-groups (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/earliest-backtrack-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/reader-endpoint (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/associated-roles (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-roles))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/backtrack-consumed-change-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/percent-progress (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/http-endpoint-enabled (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/latest-restorable-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster/db-subnet-group (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster/deletion-protection :portkey.aws.rds.-2014-10-31.db-cluster/backup-retention-period :portkey.aws.rds.-2014-10-31.db-cluster/replication-source-identifier :portkey.aws.rds.-2014-10-31.db-cluster/earliest-restorable-time :portkey.aws.rds.-2014-10-31.db-cluster/character-set-name :portkey.aws.rds.-2014-10-31/scaling-configuration-info :portkey.aws.rds.-2014-10-31.db-cluster/database-name :portkey.aws.rds.-2014-10-31.db-cluster/custom-endpoints :portkey.aws.rds.-2014-10-31.db-cluster/preferred-maintenance-window :portkey.aws.rds.-2014-10-31.db-cluster/engine-mode :portkey.aws.rds.-2014-10-31.db-cluster/clone-group-id :portkey.aws.rds.-2014-10-31.db-cluster/enabled-cloudwatch-logs-exports :portkey.aws.rds.-2014-10-31.db-cluster/status :portkey.aws.rds.-2014-10-31.db-cluster/allocated-storage :portkey.aws.rds.-2014-10-31.db-cluster/master-username :portkey.aws.rds.-2014-10-31.db-cluster/engine-version :portkey.aws.rds.-2014-10-31.db-cluster/hosted-zone-id :portkey.aws.rds.-2014-10-31.db-cluster/storage-encrypted :portkey.aws.rds.-2014-10-31.db-cluster/port :portkey.aws.rds.-2014-10-31.db-cluster/db-cluster-resource-id :portkey.aws.rds.-2014-10-31.db-cluster/db-cluster-members :portkey.aws.rds.-2014-10-31.db-cluster/kms-key-id :portkey.aws.rds.-2014-10-31.db-cluster/cluster-create-time :portkey.aws.rds.-2014-10-31.db-cluster/capacity :portkey.aws.rds.-2014-10-31.db-cluster/backtrack-window :portkey.aws.rds.-2014-10-31.db-cluster/read-replica-identifiers :portkey.aws.rds.-2014-10-31.db-cluster/db-cluster-parameter-group :portkey.aws.rds.-2014-10-31.db-cluster/endpoint :portkey.aws.rds.-2014-10-31.db-cluster/iam-database-authentication-enabled :portkey.aws.rds.-2014-10-31.db-cluster/db-cluster-arn :portkey.aws.rds.-2014-10-31.db-cluster/vpc-security-groups :portkey.aws.rds.-2014-10-31.db-cluster/engine :portkey.aws.rds.-2014-10-31.db-cluster/earliest-backtrack-time :portkey.aws.rds.-2014-10-31/db-cluster-option-group-memberships :portkey.aws.rds.-2014-10-31/availability-zones :portkey.aws.rds.-2014-10-31.db-cluster/reader-endpoint :portkey.aws.rds.-2014-10-31.db-cluster/associated-roles :portkey.aws.rds.-2014-10-31.db-cluster/backtrack-consumed-change-records :portkey.aws.rds.-2014-10-31.db-cluster/multi-az :portkey.aws.rds.-2014-10-31.db-cluster/db-cluster-identifier :portkey.aws.rds.-2014-10-31.db-cluster/preferred-backup-window :portkey.aws.rds.-2014-10-31.db-cluster/percent-progress :portkey.aws.rds.-2014-10-31.db-cluster/http-endpoint-enabled :portkey.aws.rds.-2014-10-31.db-cluster/latest-restorable-time :portkey.aws.rds.-2014-10-31.db-cluster/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group/option-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group/engine-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group/options (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/options-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group/allows-vpc-and-non-vpc-instance-memberships (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group/vpc-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group/option-group-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.option-group/option-group-name :portkey.aws.rds.-2014-10-31.option-group/option-group-description :portkey.aws.rds.-2014-10-31.option-group/engine-name :portkey.aws.rds.-2014-10-31.option-group/major-engine-version :portkey.aws.rds.-2014-10-31.option-group/options :portkey.aws.rds.-2014-10-31.option-group/allows-vpc-and-non-vpc-instance-memberships :portkey.aws.rds.-2014-10-31.option-group/vpc-id :portkey.aws.rds.-2014-10-31.option-group/option-group-arn]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/authorization-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-groups-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/option-group))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-instance-automated-backup-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/ip-range-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/ip-range))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-pending-maintenance-actions-message/resource-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-pending-maintenance-actions-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-pending-maintenance-actions-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-pending-maintenance-actions-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-pending-maintenance-actions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-pending-maintenance-actions-message/resource-identifier :portkey.aws.rds.-2014-10-31.describe-pending-maintenance-actions-message/filters :portkey.aws.rds.-2014-10-31.describe-pending-maintenance-actions-message/marker :portkey.aws.rds.-2014-10-31.describe-pending-maintenance-actions-message/max-records]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-db-subnet-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-snapshot]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-status-info/status-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-status-info/normal (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-status-info/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-status-info/message (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-instance-status-info (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-instance-status-info/status-type :portkey.aws.rds.-2014-10-31.db-instance-status-info/normal :portkey.aws.rds.-2014-10-31.db-instance-status-info/status :portkey.aws.rds.-2014-10-31.db-instance-status-info/message]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.authorize-db-security-group-ingress-message/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.authorize-db-security-group-ingress-message/cidrip (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.authorize-db-security-group-ingress-message/ec-2-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.authorize-db-security-group-ingress-message/ec-2-security-group-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.authorize-db-security-group-ingress-message/ec-2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/authorize-db-security-group-ingress-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.authorize-db-security-group-ingress-message/db-security-group-name] :opt-un [:portkey.aws.rds.-2014-10-31.authorize-db-security-group-ingress-message/cidrip :portkey.aws.rds.-2014-10-31.authorize-db-security-group-ingress-message/ec-2-security-group-name :portkey.aws.rds.-2014-10-31.authorize-db-security-group-ingress-message/ec-2-security-group-id :portkey.aws.rds.-2014-10-31.authorize-db-security-group-ingress-message/ec-2-security-group-owner-id]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/sns-topic-arn-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.remove-role-from-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.remove-role-from-db-cluster-message/role-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/remove-role-from-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.remove-role-from-db-cluster-message/db-cluster-identifier :portkey.aws.rds.-2014-10-31.remove-role-from-db-cluster-message/role-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/event-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/event))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-engine-default-cluster-parameters-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-engine-default-cluster-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-engine-default-cluster-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-engine-default-cluster-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-engine-default-cluster-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.describe-engine-default-cluster-parameters-message/db-parameter-group-family] :opt-un [:portkey.aws.rds.-2014-10-31.describe-engine-default-cluster-parameters-message/filters :portkey.aws.rds.-2014-10-31.describe-engine-default-cluster-parameters-message/max-records :portkey.aws.rds.-2014-10-31.describe-engine-default-cluster-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.events-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.events-message/events (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/event-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/events-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.events-message/marker :portkey.aws.rds.-2014-10-31.events-message/events]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.account-attributes-message/account-quotas (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/account-quota-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/account-attributes-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.account-attributes-message/account-quotas]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/source-type #{:dbcluster "db-security-group" "db-cluster" :dbsecuritygroup :dbclustersnapshot "db-instance" "db-cluster-snapshot" :dbparametergroup "db-parameter-group" "db-snapshot" :dbsnapshot :dbinstance})

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/orderable-db-instance-options-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/orderable-db-instance-option))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot-message/db-cluster-snapshots (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-snapshot-message/marker :portkey.aws.rds.-2014-10-31.db-cluster-snapshot-message/db-cluster-snapshots]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot-message/db-snapshots (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-snapshot-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-snapshot-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-snapshot-message/marker :portkey.aws.rds.-2014-10-31.db-snapshot-message/db-snapshots]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/subscription-category-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event/source-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event/message (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event/event-categories (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event/date (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event/source-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/event (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.event/source-identifier :portkey.aws.rds.-2014-10-31/source-type :portkey.aws.rds.-2014-10-31.event/message :portkey.aws.rds.-2014-10-31.event/event-categories :portkey.aws.rds.-2014-10-31.event/date :portkey.aws.rds.-2014-10-31.event/source-arn]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-options-message/option-group-options (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/option-group-options-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-options-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-group-options-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.option-group-options-message/option-group-options :portkey.aws.rds.-2014-10-31.option-group-options-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-endpoint-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-endpoint-message/db-cluster-endpoints (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-endpoint-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-endpoint-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-endpoint-message/marker :portkey.aws.rds.-2014-10-31.db-cluster-endpoint-message/db-cluster-endpoints]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/feature-name-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/revoke-db-security-group-ingress-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-security-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/availability-zone-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/availability-zone))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reset-db-parameter-group-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reset-db-parameter-group-message/reset-all-parameters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reset-db-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reset-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.reset-db-parameter-group-message/db-parameter-group-name] :opt-un [:portkey.aws.rds.-2014-10-31.reset-db-parameter-group-message/reset-all-parameters :portkey.aws.rds.-2014-10-31.reset-db-parameter-group-message/parameters]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameter-groups-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameter-groups-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameter-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-cluster-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-cluster-parameter-groups-message/db-cluster-parameter-group-name :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameter-groups-message/filters :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameter-groups-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameter-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.availability-zone/name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/availability-zone (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.availability-zone/name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event-subscriptions-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/event-subscriptions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.event-subscriptions-message/marker :portkey.aws.rds.-2014-10-31/event-subscriptions-list]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering-message/reserved-db-instances-offerings (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/reserved-db-instances-offering-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reserved-db-instances-offering-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.reserved-db-instances-offering-message/marker :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering-message/reserved-db-instances-offerings]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-subnet-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-event-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-parameter-group-details/parameters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-parameter-group-details/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-parameter-group-details/parameters :portkey.aws.rds.-2014-10-31.db-cluster-parameter-group-details/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-security-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-security-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/vpc (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-orderable-db-instance-options-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/engine] :opt-un [:portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/engine-version :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/db-instance-class :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/license-model :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/vpc :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/filters :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/max-records :portkey.aws.rds.-2014-10-31.describe-orderable-db-instance-options-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/encrypted (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/db-instance-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/instance-create-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/timezone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/master-username (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/vpc-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/dbi-resource-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/iops (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/storage-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/iam-database-authentication-enabled (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/region (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-instance-automated-backup (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-instance-automated-backup/option-group-name :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/encrypted :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/db-instance-identifier :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/db-instance-arn :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/instance-create-time :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/availability-zone :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/status :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/license-model :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/allocated-storage :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/timezone :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/master-username :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/engine-version :portkey.aws.rds.-2014-10-31/restore-window :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/port :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/vpc-id :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/kms-key-id :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/dbi-resource-id :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/iops :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/storage-type :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/iam-database-authentication-enabled :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/engine :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/tde-credential-arn :portkey.aws.rds.-2014-10-31.db-instance-automated-backup/region]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-instance-automated-backup-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-instance-automated-backup))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-subnet-group-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-subnet-group-message/db-subnet-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-subnet-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.create-db-subnet-group-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.create-db-subnet-group-message/db-subnet-group-description :portkey.aws.rds.-2014-10-31.create-db-subnet-group-message/subnet-ids] :opt-un [:portkey.aws.rds.-2014-10-31.create-db-subnet-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-global-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/global-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-db-security-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-member-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-cluster-member))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-groups/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-groups (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/option-groups-list :portkey.aws.rds.-2014-10-31.option-groups/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-event-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.delete-event-subscription-message/subscription-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-option-group-message/source-option-group-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-option-group-message/target-option-group-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-option-group-message/target-option-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-option-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/copy-option-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.copy-option-group-message/source-option-group-identifier :portkey.aws.rds.-2014-10-31.copy-option-group-message/target-option-group-identifier :portkey.aws.rds.-2014-10-31.copy-option-group-message/target-option-group-description] :opt-un [:portkey.aws.rds.-2014-10-31.copy-option-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-endpoint-message/db-cluster-endpoint-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-endpoint-message/endpoint-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-endpoint-message/static-members (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-endpoint-message/excluded-members (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-cluster-endpoint-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.modify-db-cluster-endpoint-message/db-cluster-endpoint-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.modify-db-cluster-endpoint-message/endpoint-type :portkey.aws.rds.-2014-10-31.modify-db-cluster-endpoint-message/static-members :portkey.aws.rds.-2014-10-31.modify-db-cluster-endpoint-message/excluded-members]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/storage-type-not-supported-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-role-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/read-replica-db-instance-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/authorize-db-security-group-ingress-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-security-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-parameter-groups-message/db-parameter-groups (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-parameter-group-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-parameter-groups-message/marker :portkey.aws.rds.-2014-10-31.db-parameter-groups-message/db-parameter-groups]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-cluster-endpoint-message/db-cluster-endpoint-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-cluster-endpoint-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.delete-db-cluster-endpoint-message/db-cluster-endpoint-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.recurring-charge/recurring-charge-amount (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/double))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.recurring-charge/recurring-charge-frequency (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/recurring-charge (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.recurring-charge/recurring-charge-amount :portkey.aws.rds.-2014-10-31.recurring-charge/recurring-charge-frequency]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-engine-default-parameters-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/engine-defaults]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/valid-upgrade-target-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/upgrade-target))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/authorization-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/source-db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/target-db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/copy-tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/pre-signed-url (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/copy-db-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/source-db-snapshot-identifier :portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/target-db-snapshot-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/kms-key-id :portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/tags :portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/copy-tags :portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/pre-signed-url :portkey.aws.rds.-2014-10-31.copy-db-snapshot-message/option-group-name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-role-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.range/from (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.range/to (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.range/step (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/range (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.range/from :portkey.aws.rds.-2014-10-31.range/to :portkey.aws.rds.-2014-10-31.range/step]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/pre-signed-url (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/use-default-processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/source-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/monitoring-interval (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/iops (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/storage-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/performance-insights-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/enable-performance-insights (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/performance-insights-kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-instance-read-replica-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/db-instance-identifier :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/source-db-instance-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/deletion-protection :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/option-group-name :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/enable-iam-database-authentication :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/publicly-accessible :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/pre-signed-url :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/copy-tags-to-snapshot :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/enable-cloudwatch-logs-exports :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/auto-minor-version-upgrade :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/tags :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/vpc-security-group-ids :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/use-default-processor-features :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/availability-zone :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/monitoring-interval :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/port :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/kms-key-id :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/iops :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/storage-type :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/processor-features :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/performance-insights-retention-period :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/db-instance-class :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/enable-performance-insights :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/monitoring-role-arn :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/multi-az :portkey.aws.rds.-2014-10-31.create-db-instance-read-replica-message/performance-insights-kms-key-id]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/copy-db-cluster-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/subnet-already-in-use (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/insufficient-storage-cluster-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-option-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/option-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/copy-db-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-snapshot]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-roles (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-cluster-role))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.certificate-message/certificates (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/certificate-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.certificate-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/certificate-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.certificate-message/certificates :portkey.aws.rds.-2014-10-31.certificate-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-subnet-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-db-instance-automated-backup-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/engine-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/requires-auto-minor-engine-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/option-group-option-versions (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/option-group-option-versions-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/permanent (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/vpc-only (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/port-required (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/option-group-option-settings (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/option-group-option-settings-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/persistent (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/minimum-required-minor-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/default-port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/supports-option-version-downgrade (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-option/name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-group-option (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.option-group-option/major-engine-version :portkey.aws.rds.-2014-10-31.option-group-option/engine-name :portkey.aws.rds.-2014-10-31.option-group-option/requires-auto-minor-engine-version-upgrade :portkey.aws.rds.-2014-10-31.option-group-option/option-group-option-versions :portkey.aws.rds.-2014-10-31.option-group-option/permanent :portkey.aws.rds.-2014-10-31.option-group-option/vpc-only :portkey.aws.rds.-2014-10-31.option-group-option/port-required :portkey.aws.rds.-2014-10-31/options-conflicts-with :portkey.aws.rds.-2014-10-31.option-group-option/option-group-option-settings :portkey.aws.rds.-2014-10-31.option-group-option/persistent :portkey.aws.rds.-2014-10-31.option-group-option/description :portkey.aws.rds.-2014-10-31.option-group-option/minimum-required-minor-engine-version :portkey.aws.rds.-2014-10-31.option-group-option/default-port :portkey.aws.rds.-2014-10-31.option-group-option/supports-option-version-downgrade :portkey.aws.rds.-2014-10-31/options-depended-on :portkey.aws.rds.-2014-10-31.option-group-option/name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-subnet (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-snapshot]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/tag-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/tag))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.remove-from-global-cluster-message/global-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.remove-from-global-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/remove-from-global-cluster-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.remove-from-global-cluster-message/global-cluster-identifier :portkey.aws.rds.-2014-10-31.remove-from-global-cluster-message/db-cluster-identifier]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/enable-http-endpoint (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/new-db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/backtrack-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.modify-db-cluster-message/db-cluster-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.modify-db-cluster-message/deletion-protection :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/backup-retention-period :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/enable-http-endpoint :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/option-group-name :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/enable-iam-database-authentication :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/new-db-cluster-identifier :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/preferred-maintenance-window :portkey.aws.rds.-2014-10-31/scaling-configuration :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/vpc-security-group-ids :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/db-cluster-parameter-group-name :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/master-user-password :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/engine-version :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/port :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/backtrack-window :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/apply-immediately :portkey.aws.rds.-2014-10-31/cloudwatch-logs-export-configuration :portkey.aws.rds.-2014-10-31.modify-db-cluster-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-option-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/option-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.timezone/timezone-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/timezone (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.timezone/timezone-name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-cluster-snapshot))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-global-cluster-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/supported-engine-modes (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/engine-mode-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/default-character-set (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/character-set))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/db-engine-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/supported-timezones (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/supported-timezones-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/supports-read-replica (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/db-engine-version-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/valid-upgrade-target (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/valid-upgrade-target-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/supported-character-sets (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/supported-character-sets-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/supports-log-exports-to-cloudwatch-logs (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/supported-feature-names (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/feature-name-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/exportable-log-types (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-engine-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-engine-version/supported-engine-modes :portkey.aws.rds.-2014-10-31.db-engine-version/default-character-set :portkey.aws.rds.-2014-10-31.db-engine-version/db-engine-description :portkey.aws.rds.-2014-10-31.db-engine-version/supported-timezones :portkey.aws.rds.-2014-10-31.db-engine-version/supports-read-replica :portkey.aws.rds.-2014-10-31.db-engine-version/db-engine-version-description :portkey.aws.rds.-2014-10-31.db-engine-version/valid-upgrade-target :portkey.aws.rds.-2014-10-31.db-engine-version/engine-version :portkey.aws.rds.-2014-10-31.db-engine-version/supported-character-sets :portkey.aws.rds.-2014-10-31.db-engine-version/supports-log-exports-to-cloudwatch-logs :portkey.aws.rds.-2014-10-31.db-engine-version/supported-feature-names :portkey.aws.rds.-2014-10-31.db-engine-version/engine :portkey.aws.rds.-2014-10-31.db-engine-version/exportable-log-types :portkey.aws.rds.-2014-10-31.db-engine-version/db-parameter-group-family]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameters-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameters-message/source (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-cluster-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.describe-db-cluster-parameters-message/db-cluster-parameter-group-name] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-cluster-parameters-message/source :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameters-message/filters :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameters-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-cluster-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/options-conflicts-with (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-automated-backup-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-automated-backup-message/db-instance-automated-backups (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-instance-automated-backup-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-instance-automated-backup-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-instance-automated-backup-message/marker :portkey.aws.rds.-2014-10-31.db-instance-automated-backup-message/db-instance-automated-backups]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-setting-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/option-setting))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/subscription-already-exist-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-upgrade-dependency-failure-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.add-source-identifier-to-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.add-source-identifier-to-subscription-message/source-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/add-source-identifier-to-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.add-source-identifier-to-subscription-message/subscription-name :portkey.aws.rds.-2014-10-31.add-source-identifier-to-subscription-message/source-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/domain-membership-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/domain-membership))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.backtrack-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.backtrack-db-cluster-message/backtrack-to (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.backtrack-db-cluster-message/force (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.backtrack-db-cluster-message/use-earliest-time-on-point-in-time-unavailable (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/backtrack-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.backtrack-db-cluster-message/db-cluster-identifier :portkey.aws.rds.-2014-10-31.backtrack-db-cluster-message/backtrack-to] :opt-un [:portkey.aws.rds.-2014-10-31.backtrack-db-cluster-message/force :portkey.aws.rds.-2014-10-31.backtrack-db-cluster-message/use-earliest-time-on-point-in-time-unavailable]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.add-tags-to-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.add-tags-to-resource-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/add-tags-to-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.add-tags-to-resource-message/resource-name :portkey.aws.rds.-2014-10-31.add-tags-to-resource-message/tags] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-global-cluster-message/global-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-global-cluster-message/new-global-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-global-cluster-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-global-cluster-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.modify-global-cluster-message/global-cluster-identifier :portkey.aws.rds.-2014-10-31.modify-global-cluster-message/new-global-cluster-identifier :portkey.aws.rds.-2014-10-31.modify-global-cluster-message/deletion-protection]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-instance-automated-backup-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-instance-automated-backup]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.valid-storage-options/storage-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.valid-storage-options/storage-size (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/range-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.valid-storage-options/provisioned-iops (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/range-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.valid-storage-options/iops-to-storage-ratio (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/double-range-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/valid-storage-options (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.valid-storage-options/storage-type :portkey.aws.rds.-2014-10-31.valid-storage-options/storage-size :portkey.aws.rds.-2014-10-31.valid-storage-options/provisioned-iops :portkey.aws.rds.-2014-10-31.valid-storage-options/iops-to-storage-ratio]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-event-subscription-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-db-cluster-from-s-3-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/tag-list-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/tag-list]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-global-cluster-message/global-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-global-cluster-message/source-db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-global-cluster-message/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-global-cluster-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-global-cluster-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-global-cluster-message/database-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-global-cluster-message/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-global-cluster-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.create-global-cluster-message/global-cluster-identifier :portkey.aws.rds.-2014-10-31.create-global-cluster-message/source-db-cluster-identifier :portkey.aws.rds.-2014-10-31.create-global-cluster-message/engine :portkey.aws.rds.-2014-10-31.create-global-cluster-message/engine-version :portkey.aws.rds.-2014-10-31.create-global-cluster-message/deletion-protection :portkey.aws.rds.-2014-10-31.create-global-cluster-message/database-name :portkey.aws.rds.-2014-10-31.create-global-cluster-message/storage-encrypted]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-parameter-group-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-parameter-group-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-parameter-group-message/description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.create-db-parameter-group-message/db-parameter-group-name :portkey.aws.rds.-2014-10-31.create-db-parameter-group-message/db-parameter-group-family :portkey.aws.rds.-2014-10-31.create-db-parameter-group-message/description] :opt-un [:portkey.aws.rds.-2014-10-31.create-db-parameter-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-window/earliest-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-window/latest-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-window (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.restore-window/earliest-time :portkey.aws.rds.-2014-10-31.restore-window/latest-time]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.vpc-security-group-membership/vpc-security-group-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.vpc-security-group-membership/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/vpc-security-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.vpc-security-group-membership/vpc-security-group-id :portkey.aws.rds.-2014-10-31.vpc-security-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-s-3-bucket-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/domain-iam-role-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/db-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/use-default-processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/restore-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/domain (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/source-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/target-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/source-dbi-resource-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/iops (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/tde-credential-password (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/storage-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/use-latest-restorable-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-db-instance-to-point-in-time-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/target-db-instance-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/deletion-protection :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/option-group-name :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/enable-iam-database-authentication :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/publicly-accessible :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/domain-iam-role-name :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/copy-tags-to-snapshot :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/enable-cloudwatch-logs-exports :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/auto-minor-version-upgrade :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/tags :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/db-name :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/vpc-security-group-ids :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/use-default-processor-features :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/availability-zone :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/restore-time :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/license-model :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/domain :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/source-db-instance-identifier :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/port :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/source-dbi-resource-id :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/iops :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/tde-credential-password :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/storage-type :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/processor-features :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/db-instance-class :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/engine :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/db-parameter-group-name :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/tde-credential-arn :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/multi-az :portkey.aws.rds.-2014-10-31.restore-db-instance-to-point-in-time-message/use-latest-restorable-time]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.valid-db-instance-modifications-message/storage (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/valid-storage-options-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.valid-db-instance-modifications-message/valid-processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/available-processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/valid-db-instance-modifications-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.valid-db-instance-modifications-message/storage :portkey.aws.rds.-2014-10-31.valid-db-instance-modifications-message/valid-processor-features]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/authorization-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-snapshot-attribute-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-snapshot-attribute-message/attribute-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-snapshot-attribute-message/values-to-add (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-snapshot-attribute-message/values-to-remove (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-snapshot-attribute-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.modify-db-snapshot-attribute-message/db-snapshot-identifier :portkey.aws.rds.-2014-10-31.modify-db-snapshot-attribute-message/attribute-name] :opt-un [:portkey.aws.rds.-2014-10-31.modify-db-snapshot-attribute-message/values-to-add :portkey.aws.rds.-2014-10-31.modify-db-snapshot-attribute-message/values-to-remove]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.global-cluster-member/db-cluster-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.global-cluster-member/readers (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/readers-arn-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.global-cluster-member/is-writer (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/global-cluster-member (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.global-cluster-member/db-cluster-arn :portkey.aws.rds.-2014-10-31.global-cluster-member/readers :portkey.aws.rds.-2014-10-31.global-cluster-member/is-writer]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-log-file-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/provisioned-iops-not-available-in-az-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance-message/reserved-db-instances (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/reserved-db-instance-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reserved-db-instance-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.reserved-db-instance-message/marker :portkey.aws.rds.-2014-10-31.reserved-db-instance-message/reserved-db-instances]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-parameter-group-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.modify-db-parameter-group-message/db-parameter-group-name :portkey.aws.rds.-2014-10-31.modify-db-parameter-group-message/parameters] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-valid-db-instance-modifications-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-valid-db-instance-modifications-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.describe-valid-db-instance-modifications-message/db-instance-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-attribute-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-attribute))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/account-quota-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/account-quota))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reboot-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reboot-db-instance-message/force-failover (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reboot-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.reboot-db-instance-message/db-instance-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.reboot-db-instance-message/force-failover]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-db-instance-from-s-3-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reserved-db-instance-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-option-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-backtrack-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-backtrack-message/db-cluster-backtracks (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-backtrack-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-backtrack-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-backtrack-message/marker :portkey.aws.rds.-2014-10-31.db-cluster-backtrack-message/db-cluster-backtracks]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot-attribute/attribute-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-snapshot-attribute/attribute-values (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-snapshot-attribute (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-snapshot-attribute/attribute-name :portkey.aws.rds.-2014-10-31.db-snapshot-attribute/attribute-values]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/currency-code (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/reserved-db-instances-offering-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/fixed-price (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/double))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/duration (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/usage-price (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/double))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/product-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/recurring-charges (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/recurring-charge-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/offering-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reserved-db-instances-offering (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/currency-code :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/reserved-db-instances-offering-id :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/fixed-price :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/duration :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/usage-price :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/product-description :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/db-instance-class :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/recurring-charges :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/offering-type :portkey.aws.rds.-2014-10-31.reserved-db-instances-offering/multi-az]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/resource-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/readers-arn-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.ec-2-security-group/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.ec-2-security-group/ec-2-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.ec-2-security-group/ec-2-security-group-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.ec-2-security-group/ec-2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/ec-2-security-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.ec-2-security-group/status :portkey.aws.rds.-2014-10-31.ec-2-security-group/ec-2-security-group-name :portkey.aws.rds.-2014-10-31.ec-2-security-group/ec-2-security-group-id :portkey.aws.rds.-2014-10-31.ec-2-security-group/ec-2-security-group-owner-id]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/option-group-membership))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.remove-source-identifier-from-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.remove-source-identifier-from-subscription-message/source-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/remove-source-identifier-from-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.remove-source-identifier-from-subscription-message/subscription-name :portkey.aws.rds.-2014-10-31.remove-source-identifier-from-subscription-message/source-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-cluster-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-instance-roles (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-instance-role))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/point-in-time-restore-not-enabled-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.remove-tags-from-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.remove-tags-from-resource-message/tag-keys (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/key-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/remove-tags-from-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.remove-tags-from-resource-message/resource-name :portkey.aws.rds.-2014-10-31.remove-tags-from-resource-message/tag-keys] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/event-categories-map-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/event-categories-map))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-endpoint-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-cluster-endpoint))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/integer clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-snapshot-attribute-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-snapshot-attribute-message/attribute-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-snapshot-attribute-message/values-to-add (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-cluster-snapshot-attribute-message/values-to-remove (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-cluster-snapshot-attribute-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.modify-db-cluster-snapshot-attribute-message/db-cluster-snapshot-identifier :portkey.aws.rds.-2014-10-31.modify-db-cluster-snapshot-attribute-message/attribute-name] :opt-un [:portkey.aws.rds.-2014-10-31.modify-db-cluster-snapshot-attribute-message/values-to-add :portkey.aws.rds.-2014-10-31.modify-db-cluster-snapshot-attribute-message/values-to-remove]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot-attribute/attribute-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot-attribute/attribute-values (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-attribute (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-snapshot-attribute/attribute-name :portkey.aws.rds.-2014-10-31.db-cluster-snapshot-attribute/attribute-values]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.parameter/data-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.parameter/supported-engine-modes (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/engine-mode-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.parameter/parameter-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.parameter/source (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.parameter/minimum-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.parameter/allowed-values (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.parameter/apply-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.parameter/description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.parameter/is-modifiable (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.parameter/parameter-value (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/parameter (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.parameter/data-type :portkey.aws.rds.-2014-10-31.parameter/supported-engine-modes :portkey.aws.rds.-2014-10-31.parameter/parameter-name :portkey.aws.rds.-2014-10-31.parameter/source :portkey.aws.rds.-2014-10-31.parameter/minimum-engine-version :portkey.aws.rds.-2014-10-31.parameter/allowed-values :portkey.aws.rds.-2014-10-31.parameter/apply-type :portkey.aws.rds.-2014-10-31.parameter/description :portkey.aws.rds.-2014-10-31/apply-method :portkey.aws.rds.-2014-10-31.parameter/is-modifiable :portkey.aws.rds.-2014-10-31.parameter/parameter-value]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/vpc-security-group-id-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-log-files-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/describe-db-log-files-details))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-security-group-membership/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-security-group-membership/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-security-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-security-group-membership/db-security-group-name :portkey.aws.rds.-2014-10-31.db-security-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/read-replica-db-cluster-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot-attributes-result/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-snapshot-attributes-result/db-cluster-snapshot-attributes (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-attribute-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-attributes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-snapshot-attributes-result/db-cluster-snapshot-identifier :portkey.aws.rds.-2014-10-31.db-cluster-snapshot-attributes-result/db-cluster-snapshot-attributes]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/db-security-groups (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/secondary-availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/promotion-tier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/character-set-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/read-replica-db-cluster-identifiers (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/read-replica-db-cluster-identifier-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/read-replica-db-instance-identifiers (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/read-replica-db-instance-identifier-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/domain-memberships (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/domain-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/enabled-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/db-instance-port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/db-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/db-instance-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/instance-create-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/read-replica-source-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/listener-endpoint (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/endpoint))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/monitoring-interval (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/timezone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/master-username (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/performance-insights-enabled (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/dbi-resource-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/iops (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/storage-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/ca-certificate-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/option-group-memberships (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/option-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/iam-database-authentication-enabled (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/performance-insights-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/db-parameter-groups (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-parameter-group-status-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/vpc-security-groups (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/db-instance-status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/status-infos (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-instance-status-info-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/associated-roles (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-instance-roles))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/enhanced-monitoring-resource-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/performance-insights-kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance/latest-restorable-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-instance/deletion-protection :portkey.aws.rds.-2014-10-31.db-instance/backup-retention-period :portkey.aws.rds.-2014-10-31.db-instance/db-security-groups :portkey.aws.rds.-2014-10-31.db-instance/secondary-availability-zone :portkey.aws.rds.-2014-10-31.db-instance/promotion-tier :portkey.aws.rds.-2014-10-31.db-instance/character-set-name :portkey.aws.rds.-2014-10-31.db-instance/publicly-accessible :portkey.aws.rds.-2014-10-31.db-instance/read-replica-db-cluster-identifiers :portkey.aws.rds.-2014-10-31.db-instance/read-replica-db-instance-identifiers :portkey.aws.rds.-2014-10-31.db-instance/domain-memberships :portkey.aws.rds.-2014-10-31.db-instance/preferred-maintenance-window :portkey.aws.rds.-2014-10-31.db-instance/copy-tags-to-snapshot :portkey.aws.rds.-2014-10-31.db-instance/db-instance-identifier :portkey.aws.rds.-2014-10-31.db-instance/enabled-cloudwatch-logs-exports :portkey.aws.rds.-2014-10-31.db-instance/auto-minor-version-upgrade :portkey.aws.rds.-2014-10-31.db-instance/db-instance-port :portkey.aws.rds.-2014-10-31.db-instance/db-name :portkey.aws.rds.-2014-10-31.db-instance/db-instance-arn :portkey.aws.rds.-2014-10-31.db-instance/instance-create-time :portkey.aws.rds.-2014-10-31.db-instance/availability-zone :portkey.aws.rds.-2014-10-31.db-instance/read-replica-source-db-instance-identifier :portkey.aws.rds.-2014-10-31.db-instance/license-model :portkey.aws.rds.-2014-10-31.db-instance/listener-endpoint :portkey.aws.rds.-2014-10-31.db-instance/allocated-storage :portkey.aws.rds.-2014-10-31.db-instance/monitoring-interval :portkey.aws.rds.-2014-10-31.db-instance/timezone :portkey.aws.rds.-2014-10-31.db-instance/master-username :portkey.aws.rds.-2014-10-31.db-instance/engine-version :portkey.aws.rds.-2014-10-31.db-instance/performance-insights-enabled :portkey.aws.rds.-2014-10-31.db-instance/storage-encrypted :portkey.aws.rds.-2014-10-31.db-instance/kms-key-id :portkey.aws.rds.-2014-10-31.db-instance/dbi-resource-id :portkey.aws.rds.-2014-10-31.db-instance/iops :portkey.aws.rds.-2014-10-31.db-instance/storage-type :portkey.aws.rds.-2014-10-31.db-instance/processor-features :portkey.aws.rds.-2014-10-31.db-instance/ca-certificate-identifier :portkey.aws.rds.-2014-10-31/endpoint :portkey.aws.rds.-2014-10-31.db-instance/option-group-memberships :portkey.aws.rds.-2014-10-31.db-instance/iam-database-authentication-enabled :portkey.aws.rds.-2014-10-31.db-instance/performance-insights-retention-period :portkey.aws.rds.-2014-10-31.db-instance/db-instance-class :portkey.aws.rds.-2014-10-31.db-instance/db-parameter-groups :portkey.aws.rds.-2014-10-31.db-instance/vpc-security-groups :portkey.aws.rds.-2014-10-31.db-instance/engine :portkey.aws.rds.-2014-10-31.db-instance/db-instance-status :portkey.aws.rds.-2014-10-31.db-instance/status-infos :portkey.aws.rds.-2014-10-31.db-instance/associated-roles :portkey.aws.rds.-2014-10-31.db-instance/monitoring-role-arn :portkey.aws.rds.-2014-10-31.db-instance/tde-credential-arn :portkey.aws.rds.-2014-10-31.db-instance/enhanced-monitoring-resource-arn :portkey.aws.rds.-2014-10-31.db-instance/multi-az :portkey.aws.rds.-2014-10-31.db-instance/performance-insights-kms-key-id :portkey.aws.rds.-2014-10-31.db-instance/db-cluster-identifier :portkey.aws.rds.-2014-10-31.db-instance/preferred-backup-window :portkey.aws.rds.-2014-10-31/pending-modified-values :portkey.aws.rds.-2014-10-31.db-instance/latest-restorable-time :portkey.aws.rds.-2014-10-31/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-group-option-versions-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/option-version))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-subnet-group-not-allowed-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-cluster-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster-snapshot]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.global-clusters-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.global-clusters-message/global-clusters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/global-cluster-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/global-clusters-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.global-clusters-message/marker :portkey.aws.rds.-2014-10-31.global-clusters-message/global-clusters]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/t-stamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-message/db-clusters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-message/marker :portkey.aws.rds.-2014-10-31.db-cluster-message/db-clusters]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.purchase-reserved-db-instances-offering-message/reserved-db-instances-offering-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.purchase-reserved-db-instances-offering-message/reserved-db-instance-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.purchase-reserved-db-instances-offering-message/db-instance-count (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.purchase-reserved-db-instances-offering-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/purchase-reserved-db-instances-offering-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.purchase-reserved-db-instances-offering-message/reserved-db-instances-offering-id] :opt-un [:portkey.aws.rds.-2014-10-31.purchase-reserved-db-instances-offering-message/reserved-db-instance-id :portkey.aws.rds.-2014-10-31.purchase-reserved-db-instances-offering-message/db-instance-count :portkey.aws.rds.-2014-10-31.purchase-reserved-db-instances-offering-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-security-group-membership))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-certificates-message/certificate-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-certificates-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-certificates-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-certificates-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-certificates-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-certificates-message/certificate-identifier :portkey.aws.rds.-2014-10-31.describe-certificates-message/filters :portkey.aws.rds.-2014-10-31.describe-certificates-message/max-records :portkey.aws.rds.-2014-10-31.describe-certificates-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event-categories-map/source-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.event-categories-map/event-categories (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/event-categories-map (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.event-categories-map/source-type :portkey.aws.rds.-2014-10-31.event-categories-map/event-categories]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reserved-db-instances-offering-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/reserved-db-instances-offering))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/event-subscription-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-cluster-snapshot-attributes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster-snapshot-attributes-result]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-event-subscription-message/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-event-subscription-message/source-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-event-subscription-message/event-categories (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-event-subscription-message/source-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/source-ids-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-event-subscription-message/enabled (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-event-subscription-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-event-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.create-event-subscription-message/subscription-name :portkey.aws.rds.-2014-10-31.create-event-subscription-message/sns-topic-arn] :opt-un [:portkey.aws.rds.-2014-10-31.create-event-subscription-message/source-type :portkey.aws.rds.-2014-10-31.create-event-subscription-message/event-categories :portkey.aws.rds.-2014-10-31.create-event-subscription-message/source-ids :portkey.aws.rds.-2014-10-31.create-event-subscription-message/enabled :portkey.aws.rds.-2014-10-31.create-event-subscription-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshot-attributes-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-cluster-snapshot-attributes-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.describe-db-cluster-snapshot-attributes-message/db-cluster-snapshot-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-instance-automated-backups-message/dbi-resource-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-instance-automated-backups-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-instance-automated-backups-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-instance-automated-backups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-instance-automated-backups-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-instance-automated-backups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-instance-automated-backups-message/dbi-resource-id :portkey.aws.rds.-2014-10-31.describe-db-instance-automated-backups-message/db-instance-identifier :portkey.aws.rds.-2014-10-31.describe-db-instance-automated-backups-message/filters :portkey.aws.rds.-2014-10-31.describe-db-instance-automated-backups-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-instance-automated-backups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-log-files-response/describe-db-log-files (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/describe-db-log-files-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-log-files-response/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-log-files-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-log-files-response/describe-db-log-files :portkey.aws.rds.-2014-10-31.describe-db-log-files-response/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-global-cluster-message/global-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-global-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.delete-global-cluster-message/global-cluster-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/recurring-charge-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/recurring-charge))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-instance-role-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/stop-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/event-categories-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-engine-version-message/db-engine-versions (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-engine-version-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-engine-version-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-engine-version-message/marker :portkey.aws.rds.-2014-10-31.db-engine-version-message/db-engine-versions]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-cluster-snapshot-attribute-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster-snapshot-attributes-result]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-message/db-instances (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-instance-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-instance-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-instance-message/marker :portkey.aws.rds.-2014-10-31.db-instance-message/db-instances]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-security-group-name-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.processor-feature/name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.processor-feature/value (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/processor-feature (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.processor-feature/name :portkey.aws.rds.-2014-10-31.processor-feature/value]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reserved-db-instance-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-clusters-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-clusters-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-clusters-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-clusters-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-clusters-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-clusters-message/db-cluster-identifier :portkey.aws.rds.-2014-10-31.describe-db-clusters-message/filters :portkey.aws.rds.-2014-10-31.describe-db-clusters-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-clusters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-security-group-not-supported-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-instance-role-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-parameter-group/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-parameter-group/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-parameter-group/description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-parameter-group/db-cluster-parameter-group-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-parameter-group/db-cluster-parameter-group-name :portkey.aws.rds.-2014-10-31.db-cluster-parameter-group/db-parameter-group-family :portkey.aws.rds.-2014-10-31.db-cluster-parameter-group/description :portkey.aws.rds.-2014-10-31.db-cluster-parameter-group/db-cluster-parameter-group-arn]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-log-files-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-log-files-message/filename-contains (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-log-files-message/file-last-written (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-log-files-message/file-size (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-log-files-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-log-files-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-log-files-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-log-files-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.describe-db-log-files-message/db-instance-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-log-files-message/filename-contains :portkey.aws.rds.-2014-10-31.describe-db-log-files-message/file-last-written :portkey.aws.rds.-2014-10-31.describe-db-log-files-message/file-size :portkey.aws.rds.-2014-10-31.describe-db-log-files-message/filters :portkey.aws.rds.-2014-10-31.describe-db-log-files-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-log-files-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/apply-method #{"immediate" :pendingreboot :immediate "pending-reboot"})

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-engine-default-cluster-parameters-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/engine-defaults]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-instance-automated-backup-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-snapshot-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-snapshot-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-cluster-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.create-db-cluster-snapshot-message/db-cluster-snapshot-identifier :portkey.aws.rds.-2014-10-31.create-db-cluster-snapshot-message/db-cluster-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.create-db-cluster-snapshot-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.endpoint/address (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.endpoint/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.endpoint/hosted-zone-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/endpoint (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.endpoint/address :portkey.aws.rds.-2014-10-31.endpoint/port :portkey.aws.rds.-2014-10-31.endpoint/hosted-zone-id]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-db-cluster-snapshot-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-parameter-group/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-parameter-group/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-parameter-group/description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-parameter-group/db-parameter-group-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-parameter-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-parameter-group/db-parameter-group-name :portkey.aws.rds.-2014-10-31.db-parameter-group/db-parameter-group-family :portkey.aws.rds.-2014-10-31.db-parameter-group/description :portkey.aws.rds.-2014-10-31.db-parameter-group/db-parameter-group-arn]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/supported-character-sets-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/character-set))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/storage-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.cloudwatch-logs-export-configuration/enable-log-types (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.cloudwatch-logs-export-configuration/disable-log-types (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/cloudwatch-logs-export-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.cloudwatch-logs-export-configuration/enable-log-types :portkey.aws.rds.-2014-10-31.cloudwatch-logs-export-configuration/disable-log-types]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-restore-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/log-type-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-backtracks-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-backtracks-message/backtrack-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-backtracks-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-backtracks-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-cluster-backtracks-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-cluster-backtracks-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.describe-db-cluster-backtracks-message/db-cluster-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-cluster-backtracks-message/backtrack-identifier :portkey.aws.rds.-2014-10-31.describe-db-cluster-backtracks-message/filters :portkey.aws.rds.-2014-10-31.describe-db-cluster-backtracks-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-cluster-backtracks-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/insufficient-db-cluster-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.account-quota/account-quota-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.account-quota/used (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.account-quota/max (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/account-quota (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.account-quota/account-quota-name :portkey.aws.rds.-2014-10-31.account-quota/used :portkey.aws.rds.-2014-10-31.account-quota/max]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-option-group-status/db-cluster-option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-option-group-status/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-option-group-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-option-group-status/db-cluster-option-group-name :portkey.aws.rds.-2014-10-31.db-cluster-option-group-status/status]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-snapshot-attributes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-snapshot-attributes-result]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-membership/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-group-membership/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.option-group-membership/option-group-name :portkey.aws.rds.-2014-10-31.option-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-security-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.upgrade-target/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.upgrade-target/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.upgrade-target/description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.upgrade-target/auto-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.upgrade-target/is-major-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/upgrade-target (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.upgrade-target/engine :portkey.aws.rds.-2014-10-31.upgrade-target/engine-version :portkey.aws.rds.-2014-10-31.upgrade-target/description :portkey.aws.rds.-2014-10-31.upgrade-target/auto-upgrade :portkey.aws.rds.-2014-10-31.upgrade-target/is-major-version-upgrade]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/global-cluster-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/available-processor-feature-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/available-processor-feature))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-parameter-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/attribute-value-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.add-role-to-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.add-role-to-db-instance-message/role-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.add-role-to-db-instance-message/feature-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/add-role-to-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.add-role-to-db-instance-message/db-instance-identifier :portkey.aws.rds.-2014-10-31.add-role-to-db-instance-message/role-arn :portkey.aws.rds.-2014-10-31.add-role-to-db-instance-message/feature-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/reserved-db-instance-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/currency-code (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/reserved-db-instances-offering-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/start-time (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/fixed-price (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/double))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/reserved-db-instance-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/db-instance-count (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/duration (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/usage-price (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/double))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/product-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/state (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/recurring-charges (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/recurring-charge-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/offering-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.reserved-db-instance/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reserved-db-instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.reserved-db-instance/reserved-db-instance-id :portkey.aws.rds.-2014-10-31.reserved-db-instance/currency-code :portkey.aws.rds.-2014-10-31.reserved-db-instance/reserved-db-instances-offering-id :portkey.aws.rds.-2014-10-31.reserved-db-instance/start-time :portkey.aws.rds.-2014-10-31.reserved-db-instance/fixed-price :portkey.aws.rds.-2014-10-31.reserved-db-instance/reserved-db-instance-arn :portkey.aws.rds.-2014-10-31.reserved-db-instance/db-instance-count :portkey.aws.rds.-2014-10-31.reserved-db-instance/duration :portkey.aws.rds.-2014-10-31.reserved-db-instance/usage-price :portkey.aws.rds.-2014-10-31.reserved-db-instance/product-description :portkey.aws.rds.-2014-10-31.reserved-db-instance/db-instance-class :portkey.aws.rds.-2014-10-31.reserved-db-instance/state :portkey.aws.rds.-2014-10-31.reserved-db-instance/recurring-charges :portkey.aws.rds.-2014-10-31.reserved-db-instance/offering-type :portkey.aws.rds.-2014-10-31.reserved-db-instance/multi-az]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-parameter-groups-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-parameter-groups-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-parameter-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-parameter-groups-message/db-parameter-group-name :portkey.aws.rds.-2014-10-31.describe-db-parameter-groups-message/filters :portkey.aws.rds.-2014-10-31.describe-db-parameter-groups-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-parameter-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-db-subnet-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.ip-range/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.ip-range/cidrip (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/ip-range (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.ip-range/status :portkey.aws.rds.-2014-10-31.ip-range/cidrip]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-endpoint-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.character-set/character-set-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.character-set/character-set-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/character-set (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.character-set/character-set-name :portkey.aws.rds.-2014-10-31.character-set/character-set-description]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-parameter-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-group-option-settings-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/option-group-option-setting))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/stop-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-capacity-info/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-capacity-info/pending-capacity (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-capacity-info/current-capacity (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-capacity-info/seconds-before-timeout (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-capacity-info/timeout-action (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-capacity-info (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-capacity-info/db-cluster-identifier :portkey.aws.rds.-2014-10-31.db-cluster-capacity-info/pending-capacity :portkey.aws.rds.-2014-10-31.db-cluster-capacity-info/current-capacity :portkey.aws.rds.-2014-10-31.db-cluster-capacity-info/seconds-before-timeout :portkey.aws.rds.-2014-10-31.db-cluster-capacity-info/timeout-action]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-current-db-cluster-capacity-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-current-db-cluster-capacity-message/capacity (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-current-db-cluster-capacity-message/seconds-before-timeout (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-current-db-cluster-capacity-message/timeout-action (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-current-db-cluster-capacity-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.modify-current-db-cluster-capacity-message/db-cluster-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.modify-current-db-cluster-capacity-message/capacity :portkey.aws.rds.-2014-10-31.modify-current-db-cluster-capacity-message/seconds-before-timeout :portkey.aws.rds.-2014-10-31.modify-current-db-cluster-capacity-message/timeout-action]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-cluster-message/skip-final-snapshot (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-cluster-message/final-db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.delete-db-cluster-message/db-cluster-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.delete-db-cluster-message/skip-final-snapshot :portkey.aws.rds.-2014-10-31.delete-db-cluster-message/final-db-snapshot-identifier]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/backup-policy-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-valid-db-instance-modifications-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/valid-db-instance-modifications-message]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-event-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.tag/key (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.tag/value (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/tag (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.tag/key :portkey.aws.rds.-2014-10-31.tag/value]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-event-categories-message/source-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-event-categories-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-event-categories-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-event-categories-message/source-type :portkey.aws.rds.-2014-10-31.describe-event-categories-message/filters]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/insufficient-db-instance-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/boolean-optional clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/failover-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/sns-invalid-topic-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/options-depended-on (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-setting/data-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-setting/allowed-values (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-setting/value (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-setting/apply-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-setting/description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-setting/default-value (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-setting/is-modifiable (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-setting/is-collection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-setting/name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-setting (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.option-setting/data-type :portkey.aws.rds.-2014-10-31.option-setting/allowed-values :portkey.aws.rds.-2014-10-31.option-setting/value :portkey.aws.rds.-2014-10-31.option-setting/apply-type :portkey.aws.rds.-2014-10-31.option-setting/description :portkey.aws.rds.-2014-10-31.option-setting/default-value :portkey.aws.rds.-2014-10-31.option-setting/is-modifiable :portkey.aws.rds.-2014-10-31.option-setting/is-collection :portkey.aws.rds.-2014-10-31.option-setting/name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-cluster-parameter-group-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.delete-db-cluster-parameter-group-message/db-cluster-parameter-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.list-tags-for-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.list-tags-for-resource-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/list-tags-for-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.list-tags-for-resource-message/resource-name] :opt-un [:portkey.aws.rds.-2014-10-31.list-tags-for-resource-message/filters]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.failover-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.failover-db-cluster-message/target-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/failover-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.failover-db-cluster-message/db-cluster-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.failover-db-cluster-message/target-db-instance-identifier]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-db-subnet-group-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.delete-db-subnet-group-message/db-subnet-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-instance-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-instance))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/global-cluster-member-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/global-cluster-member))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/replication-source-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/character-set-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/pre-signed-url (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/database-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/engine-mode (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/master-username (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/backtrack-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/long-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/global-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.create-db-cluster-message/db-cluster-identifier :portkey.aws.rds.-2014-10-31.create-db-cluster-message/engine] :opt-un [:portkey.aws.rds.-2014-10-31.create-db-cluster-message/deletion-protection :portkey.aws.rds.-2014-10-31.create-db-cluster-message/backup-retention-period :portkey.aws.rds.-2014-10-31.create-db-cluster-message/option-group-name :portkey.aws.rds.-2014-10-31.create-db-cluster-message/replication-source-identifier :portkey.aws.rds.-2014-10-31.create-db-cluster-message/character-set-name :portkey.aws.rds.-2014-10-31.create-db-cluster-message/enable-iam-database-authentication :portkey.aws.rds.-2014-10-31.create-db-cluster-message/pre-signed-url :portkey.aws.rds.-2014-10-31.create-db-cluster-message/database-name :portkey.aws.rds.-2014-10-31.create-db-cluster-message/preferred-maintenance-window :portkey.aws.rds.-2014-10-31.create-db-cluster-message/engine-mode :portkey.aws.rds.-2014-10-31.create-db-cluster-message/enable-cloudwatch-logs-exports :portkey.aws.rds.-2014-10-31.create-db-cluster-message/tags :portkey.aws.rds.-2014-10-31/scaling-configuration :portkey.aws.rds.-2014-10-31.create-db-cluster-message/vpc-security-group-ids :portkey.aws.rds.-2014-10-31.create-db-cluster-message/db-cluster-parameter-group-name :portkey.aws.rds.-2014-10-31.create-db-cluster-message/master-user-password :portkey.aws.rds.-2014-10-31.create-db-cluster-message/master-username :portkey.aws.rds.-2014-10-31.create-db-cluster-message/engine-version :portkey.aws.rds.-2014-10-31.create-db-cluster-message/storage-encrypted :portkey.aws.rds.-2014-10-31.create-db-cluster-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.create-db-cluster-message/port :portkey.aws.rds.-2014-10-31.create-db-cluster-message/kms-key-id :portkey.aws.rds.-2014-10-31.create-db-cluster-message/backtrack-window :portkey.aws.rds.-2014-10-31.create-db-cluster-message/global-cluster-identifier :portkey.aws.rds.-2014-10-31/availability-zones :portkey.aws.rds.-2014-10-31.create-db-cluster-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-role/role-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-role/feature-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-instance-role/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-instance-role (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-instance-role/role-arn :portkey.aws.rds.-2014-10-31.db-instance-role/feature-name :portkey.aws.rds.-2014-10-31.db-instance-role/status]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-event-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/option-configuration))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-maintenance-actions-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/pending-maintenance-actions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/pending-maintenance-actions :portkey.aws.rds.-2014-10-31.pending-maintenance-actions-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-account-attributes-message (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/engine-mode-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reserved-db-instances-offering-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-subnet-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/add-source-identifier-to-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.download-db-log-file-portion-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.download-db-log-file-portion-message/log-file-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.download-db-log-file-portion-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.download-db-log-file-portion-message/number-of-lines (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/download-db-log-file-portion-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.download-db-log-file-portion-message/db-instance-identifier :portkey.aws.rds.-2014-10-31.download-db-log-file-portion-message/log-file-name] :opt-un [:portkey.aws.rds.-2014-10-31.download-db-log-file-portion-message/marker :portkey.aws.rds.-2014-10-31.download-db-log-file-portion-message/number-of-lines]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-security-group-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-security-group-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-security-group-message/marker :portkey.aws.rds.-2014-10-31/db-security-groups]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-parameter-groups-message/db-cluster-parameter-groups (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-parameter-groups-message/marker :portkey.aws.rds.-2014-10-31.db-cluster-parameter-groups-message/db-cluster-parameter-groups]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-security-group-message/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-security-group-message/db-security-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-security-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-security-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.create-db-security-group-message/db-security-group-name :portkey.aws.rds.-2014-10-31.create-db-security-group-message/db-security-group-description] :opt-un [:portkey.aws.rds.-2014-10-31.create-db-security-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/event-subscriptions-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/event-subscription))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-snapshot-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-snapshot))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-parameter-group-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-parameter-group-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-parameter-group-message/description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.create-db-cluster-parameter-group-message/db-cluster-parameter-group-name :portkey.aws.rds.-2014-10-31.create-db-cluster-parameter-group-message/db-parameter-group-family :portkey.aws.rds.-2014-10-31.create-db-cluster-parameter-group-message/description] :opt-un [:portkey.aws.rds.-2014-10-31.create-db-cluster-parameter-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-snapshot-attribute-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-snapshot-attributes-result]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/start-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-option-group-memberships (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-cluster-option-group-status))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-endpoint/excluded-members (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-endpoint/endpoint-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-endpoint/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-endpoint/db-cluster-endpoint-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-endpoint/custom-endpoint-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-endpoint/static-members (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-endpoint/db-cluster-endpoint-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-endpoint/endpoint (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-endpoint/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-cluster-endpoint/db-cluster-endpoint-resource-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-cluster-endpoint (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-cluster-endpoint/excluded-members :portkey.aws.rds.-2014-10-31.db-cluster-endpoint/endpoint-type :portkey.aws.rds.-2014-10-31.db-cluster-endpoint/status :portkey.aws.rds.-2014-10-31.db-cluster-endpoint/db-cluster-endpoint-identifier :portkey.aws.rds.-2014-10-31.db-cluster-endpoint/custom-endpoint-type :portkey.aws.rds.-2014-10-31.db-cluster-endpoint/static-members :portkey.aws.rds.-2014-10-31.db-cluster-endpoint/db-cluster-endpoint-arn :portkey.aws.rds.-2014-10-31.db-cluster-endpoint/endpoint :portkey.aws.rds.-2014-10-31.db-cluster-endpoint/db-cluster-identifier :portkey.aws.rds.-2014-10-31.db-cluster-endpoint/db-cluster-endpoint-resource-identifier]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.engine-defaults/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.engine-defaults/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.engine-defaults/parameters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/engine-defaults (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.engine-defaults/db-parameter-group-family :portkey.aws.rds.-2014-10-31.engine-defaults/marker :portkey.aws.rds.-2014-10-31.engine-defaults/parameters]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-snapshot-attributes-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-snapshot-attributes-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.describe-db-snapshot-attributes-message/db-snapshot-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/availability-zones (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-subnet-groups (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-subnet-group))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/long-optional clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/global-cluster-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/global-cluster))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/processor-feature-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/processor-feature))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-configuration/option-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-configuration/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-configuration/option-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-configuration/db-security-group-memberships (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-configuration/vpc-security-group-memberships (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.option-configuration/option-settings (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/option-settings-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-configuration (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.option-configuration/option-name] :opt-un [:portkey.aws.rds.-2014-10-31.option-configuration/port :portkey.aws.rds.-2014-10-31.option-configuration/option-version :portkey.aws.rds.-2014-10-31.option-configuration/db-security-group-memberships :portkey.aws.rds.-2014-10-31.option-configuration/vpc-security-group-memberships :portkey.aws.rds.-2014-10-31.option-configuration/option-settings]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-subnet-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-db-snapshot-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.remove-role-from-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.remove-role-from-db-instance-message/role-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.remove-role-from-db-instance-message/feature-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/remove-role-from-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.remove-role-from-db-instance-message/db-instance-identifier :portkey.aws.rds.-2014-10-31.remove-role-from-db-instance-message/role-arn :portkey.aws.rds.-2014-10-31.remove-role-from-db-instance-message/feature-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/integer-optional clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-security-group/owner-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-security-group/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-security-group/db-security-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-security-group/vpc-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-security-group/ec-2-security-groups (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/ec-2-security-group-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-security-group/ip-ranges (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/ip-range-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-security-group/db-security-group-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-security-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-security-group/owner-id :portkey.aws.rds.-2014-10-31.db-security-group/db-security-group-name :portkey.aws.rds.-2014-10-31.db-security-group/db-security-group-description :portkey.aws.rds.-2014-10-31.db-security-group/vpc-id :portkey.aws.rds.-2014-10-31.db-security-group/ec-2-security-groups :portkey.aws.rds.-2014-10-31.db-security-group/ip-ranges :portkey.aws.rds.-2014-10-31.db-security-group/db-security-group-arn]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/reserved-db-instances-offering-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/duration (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/product-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/offering-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-reserved-db-instances-offerings-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/reserved-db-instances-offering-id :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/max-records :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/marker :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/duration :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/filters :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/product-description :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/db-instance-class :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/offering-type :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-offerings-message/multi-az]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/supported-timezones-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/timezone))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/range-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/range))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.stop-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.stop-db-instance-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/stop-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.stop-db-instance-message/db-instance-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.stop-db-instance-message/db-snapshot-identifier]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-security-groups-message/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-security-groups-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-security-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-security-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-security-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-security-groups-message/db-security-group-name :portkey.aws.rds.-2014-10-31.describe-db-security-groups-message/filters :portkey.aws.rds.-2014-10-31.describe-db-security-groups-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-security-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-instance-role-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/option-settings-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/option-setting))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.delete-option-group-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/delete-option-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.delete-option-group-message/option-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-instance-status-info-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/db-instance-status-info))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-parameters-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-parameters-message/source (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-db-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-db-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.describe-db-parameters-message/db-parameter-group-name] :opt-un [:portkey.aws.rds.-2014-10-31.describe-db-parameters-message/source :portkey.aws.rds.-2014-10-31.describe-db-parameters-message/filters :portkey.aws.rds.-2014-10-31.describe-db-parameters-message/max-records :portkey.aws.rds.-2014-10-31.describe-db-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.certificate/certificate-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.certificate/certificate-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.certificate/thumbprint (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.certificate/valid-from (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.certificate/valid-till (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.certificate/certificate-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/certificate (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.certificate/certificate-identifier :portkey.aws.rds.-2014-10-31.certificate/certificate-type :portkey.aws.rds.-2014-10-31.certificate/thumbprint :portkey.aws.rds.-2014-10-31.certificate/valid-from :portkey.aws.rds.-2014-10-31.certificate/valid-till :portkey.aws.rds.-2014-10-31.certificate/certificate-arn]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/reserved-db-instance-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/purchase-reserved-db-instances-offering-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/reserved-db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/reserved-db-instance-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/reserved-db-instances-offering-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/duration (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/product-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/offering-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-reserved-db-instances-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/reserved-db-instance-id :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/reserved-db-instances-offering-id :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/max-records :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/marker :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/duration :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/filters :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/product-description :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/db-instance-class :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/offering-type :portkey.aws.rds.-2014-10-31.describe-reserved-db-instances-message/multi-az]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.revoke-db-security-group-ingress-message/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.revoke-db-security-group-ingress-message/cidrip (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.revoke-db-security-group-ingress-message/ec-2-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.revoke-db-security-group-ingress-message/ec-2-security-group-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.revoke-db-security-group-ingress-message/ec-2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/revoke-db-security-group-ingress-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.revoke-db-security-group-ingress-message/db-security-group-name] :opt-un [:portkey.aws.rds.-2014-10-31.revoke-db-security-group-ingress-message/cidrip :portkey.aws.rds.-2014-10-31.revoke-db-security-group-ingress-message/ec-2-security-group-name :portkey.aws.rds.-2014-10-31.revoke-db-security-group-ingress-message/ec-2-security-group-id :portkey.aws.rds.-2014-10-31.revoke-db-security-group-ingress-message/ec-2-security-group-owner-id]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.domain-membership/domain (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.domain-membership/status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.domain-membership/fqdn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.domain-membership/iam-role-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/domain-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.domain-membership/domain :portkey.aws.rds.-2014-10-31.domain-membership/status :portkey.aws.rds.-2014-10-31.domain-membership/fqdn :portkey.aws.rds.-2014-10-31.domain-membership/iam-role-name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/supports-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/supports-iops (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/supported-engine-modes (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/engine-mode-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/multi-az-capable (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/min-storage-size (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/max-iops-per-gib (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/double-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/min-iops-per-db-instance (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/available-processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/available-processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/vpc (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/supports-performance-insights (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/storage-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/max-storage-size (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/min-iops-per-gib (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/double-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/read-replica-capable (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/supports-storage-encryption (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/availability-zones (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/availability-zone-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/supports-enhanced-monitoring (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/max-iops-per-db-instance (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/orderable-db-instance-option (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.orderable-db-instance-option/supports-iam-database-authentication :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/supports-iops :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/supported-engine-modes :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/multi-az-capable :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/min-storage-size :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/max-iops-per-gib :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/min-iops-per-db-instance :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/license-model :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/engine-version :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/available-processor-features :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/vpc :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/supports-performance-insights :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/storage-type :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/max-storage-size :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/min-iops-per-gib :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/read-replica-capable :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/db-instance-class :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/supports-storage-encryption :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/engine :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/availability-zones :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/supports-enhanced-monitoring :portkey.aws.rds.-2014-10-31.orderable-db-instance-option/max-iops-per-db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/master-user-password (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/iops (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/storage-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/ca-certificate-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.pending-modified-values/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/pending-modified-values (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.pending-modified-values/backup-retention-period :portkey.aws.rds.-2014-10-31/pending-cloudwatch-logs-exports :portkey.aws.rds.-2014-10-31.pending-modified-values/db-instance-identifier :portkey.aws.rds.-2014-10-31.pending-modified-values/master-user-password :portkey.aws.rds.-2014-10-31.pending-modified-values/license-model :portkey.aws.rds.-2014-10-31.pending-modified-values/allocated-storage :portkey.aws.rds.-2014-10-31.pending-modified-values/engine-version :portkey.aws.rds.-2014-10-31.pending-modified-values/db-subnet-group-name :portkey.aws.rds.-2014-10-31.pending-modified-values/port :portkey.aws.rds.-2014-10-31.pending-modified-values/iops :portkey.aws.rds.-2014-10-31.pending-modified-values/storage-type :portkey.aws.rds.-2014-10-31.pending-modified-values/processor-features :portkey.aws.rds.-2014-10-31.pending-modified-values/ca-certificate-identifier :portkey.aws.rds.-2014-10-31.pending-modified-values/db-instance-class :portkey.aws.rds.-2014-10-31.pending-modified-values/multi-az]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-subnet-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/subnet-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/subnet))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/filter-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2014-10-31/filter))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/remove-from-global-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/global-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-instance-read-replica-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.available-processor-feature/name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.available-processor-feature/default-value (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.available-processor-feature/allowed-values (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/available-processor-feature (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.available-processor-feature/name :portkey.aws.rds.-2014-10-31.available-processor-feature/default-value :portkey.aws.rds.-2014-10-31.available-processor-feature/allowed-values]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.download-db-log-file-portion-details/log-file-data (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.download-db-log-file-portion-details/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.download-db-log-file-portion-details/additional-data-pending (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/download-db-log-file-portion-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.download-db-log-file-portion-details/log-file-data :portkey.aws.rds.-2014-10-31.download-db-log-file-portion-details/marker :portkey.aws.rds.-2014-10-31.download-db-log-file-portion-details/additional-data-pending]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-snapshot-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/invalid-db-parameter-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/db-security-groups (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/promotion-tier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/domain-iam-role-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/new-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/use-default-processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/domain (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/allow-major-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/monitoring-interval (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/db-port-number (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/iops (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/tde-credential-password (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/storage-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/ca-certificate-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/performance-insights-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/enable-performance-insights (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/performance-insights-kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-db-instance-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.modify-db-instance-message/db-instance-identifier] :opt-un [:portkey.aws.rds.-2014-10-31.modify-db-instance-message/deletion-protection :portkey.aws.rds.-2014-10-31.modify-db-instance-message/backup-retention-period :portkey.aws.rds.-2014-10-31.modify-db-instance-message/option-group-name :portkey.aws.rds.-2014-10-31.modify-db-instance-message/db-security-groups :portkey.aws.rds.-2014-10-31.modify-db-instance-message/promotion-tier :portkey.aws.rds.-2014-10-31.modify-db-instance-message/enable-iam-database-authentication :portkey.aws.rds.-2014-10-31.modify-db-instance-message/publicly-accessible :portkey.aws.rds.-2014-10-31.modify-db-instance-message/domain-iam-role-name :portkey.aws.rds.-2014-10-31.modify-db-instance-message/preferred-maintenance-window :portkey.aws.rds.-2014-10-31.modify-db-instance-message/copy-tags-to-snapshot :portkey.aws.rds.-2014-10-31.modify-db-instance-message/auto-minor-version-upgrade :portkey.aws.rds.-2014-10-31.modify-db-instance-message/new-db-instance-identifier :portkey.aws.rds.-2014-10-31.modify-db-instance-message/vpc-security-group-ids :portkey.aws.rds.-2014-10-31.modify-db-instance-message/use-default-processor-features :portkey.aws.rds.-2014-10-31.modify-db-instance-message/master-user-password :portkey.aws.rds.-2014-10-31.modify-db-instance-message/license-model :portkey.aws.rds.-2014-10-31.modify-db-instance-message/domain :portkey.aws.rds.-2014-10-31.modify-db-instance-message/allow-major-version-upgrade :portkey.aws.rds.-2014-10-31.modify-db-instance-message/allocated-storage :portkey.aws.rds.-2014-10-31.modify-db-instance-message/monitoring-interval :portkey.aws.rds.-2014-10-31.modify-db-instance-message/engine-version :portkey.aws.rds.-2014-10-31.modify-db-instance-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.modify-db-instance-message/db-port-number :portkey.aws.rds.-2014-10-31.modify-db-instance-message/iops :portkey.aws.rds.-2014-10-31.modify-db-instance-message/tde-credential-password :portkey.aws.rds.-2014-10-31.modify-db-instance-message/storage-type :portkey.aws.rds.-2014-10-31.modify-db-instance-message/apply-immediately :portkey.aws.rds.-2014-10-31.modify-db-instance-message/processor-features :portkey.aws.rds.-2014-10-31.modify-db-instance-message/ca-certificate-identifier :portkey.aws.rds.-2014-10-31/cloudwatch-logs-export-configuration :portkey.aws.rds.-2014-10-31.modify-db-instance-message/performance-insights-retention-period :portkey.aws.rds.-2014-10-31.modify-db-instance-message/db-instance-class :portkey.aws.rds.-2014-10-31.modify-db-instance-message/db-parameter-group-name :portkey.aws.rds.-2014-10-31.modify-db-instance-message/enable-performance-insights :portkey.aws.rds.-2014-10-31.modify-db-instance-message/monitoring-role-arn :portkey.aws.rds.-2014-10-31.modify-db-instance-message/tde-credential-arn :portkey.aws.rds.-2014-10-31.modify-db-instance-message/multi-az :portkey.aws.rds.-2014-10-31.modify-db-instance-message/performance-insights-kms-key-id :portkey.aws.rds.-2014-10-31.modify-db-instance-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/db-security-groups (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/s-3-ingestion-role-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/s-3-bucket-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/db-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/use-default-processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/source-engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/monitoring-interval (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/master-username (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/port (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/source-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/iops (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/storage-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/processor-features (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/performance-insights-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/engine (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/s-3-prefix (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/enable-performance-insights (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/performance-insights-kms-key-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/restore-db-instance-from-s-3-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/db-instance-identifier :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/db-instance-class :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/engine :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/source-engine :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/source-engine-version :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/s-3-bucket-name :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/s-3-ingestion-role-arn] :opt-un [:portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/deletion-protection :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/backup-retention-period :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/option-group-name :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/db-security-groups :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/enable-iam-database-authentication :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/publicly-accessible :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/preferred-maintenance-window :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/copy-tags-to-snapshot :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/enable-cloudwatch-logs-exports :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/auto-minor-version-upgrade :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/tags :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/db-name :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/vpc-security-group-ids :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/use-default-processor-features :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/availability-zone :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/master-user-password :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/license-model :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/allocated-storage :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/monitoring-interval :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/master-username :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/engine-version :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/storage-encrypted :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/db-subnet-group-name :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/port :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/kms-key-id :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/iops :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/storage-type :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/processor-features :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/performance-insights-retention-period :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/s-3-prefix :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/db-parameter-group-name :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/enable-performance-insights :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/monitoring-role-arn :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/multi-az :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/performance-insights-kms-key-id :portkey.aws.rds.-2014-10-31.restore-db-instance-from-s-3-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-option-group-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-option-group-message/options-to-include (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/option-configuration-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-option-group-message/options-to-remove (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/option-names-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-option-group-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-option-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.modify-option-group-message/option-group-name] :opt-un [:portkey.aws.rds.-2014-10-31.modify-option-group-message/options-to-include :portkey.aws.rds.-2014-10-31.modify-option-group-message/options-to-remove :portkey.aws.rds.-2014-10-31.modify-option-group-message/apply-immediately]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-security-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-security-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-subnet-group/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-subnet-group/db-subnet-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-subnet-group/vpc-id (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-subnet-group/subnet-group-status (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-subnet-group/subnets (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/subnet-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.db-subnet-group/db-subnet-group-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/db-subnet-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.db-subnet-group/db-subnet-group-name :portkey.aws.rds.-2014-10-31.db-subnet-group/db-subnet-group-description :portkey.aws.rds.-2014-10-31.db-subnet-group/vpc-id :portkey.aws.rds.-2014-10-31.db-subnet-group/subnet-group-status :portkey.aws.rds.-2014-10-31.db-subnet-group/subnets :portkey.aws.rds.-2014-10-31.db-subnet-group/db-subnet-group-arn]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-endpoint-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-endpoint-message/db-cluster-endpoint-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-endpoint-message/endpoint-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-endpoint-message/static-members (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.create-db-cluster-endpoint-message/excluded-members (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/create-db-cluster-endpoint-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.create-db-cluster-endpoint-message/db-cluster-identifier :portkey.aws.rds.-2014-10-31.create-db-cluster-endpoint-message/db-cluster-endpoint-identifier :portkey.aws.rds.-2014-10-31.create-db-cluster-endpoint-message/endpoint-type] :opt-un [:portkey.aws.rds.-2014-10-31.create-db-cluster-endpoint-message/static-members :portkey.aws.rds.-2014-10-31.create-db-cluster-endpoint-message/excluded-members]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-option-groups-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-option-groups-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-option-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-option-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-option-groups-message/engine-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-option-groups-message/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-option-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2014-10-31.describe-option-groups-message/option-group-name :portkey.aws.rds.-2014-10-31.describe-option-groups-message/filters :portkey.aws.rds.-2014-10-31.describe-option-groups-message/marker :portkey.aws.rds.-2014-10-31.describe-option-groups-message/max-records :portkey.aws.rds.-2014-10-31.describe-option-groups-message/engine-name :portkey.aws.rds.-2014-10-31.describe-option-groups-message/major-engine-version]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-event-subscription-message/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-event-subscription-message/source-type (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-event-subscription-message/event-categories (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.modify-event-subscription-message/enabled (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/modify-event-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.modify-event-subscription-message/subscription-name] :opt-un [:portkey.aws.rds.-2014-10-31.modify-event-subscription-message/sns-topic-arn :portkey.aws.rds.-2014-10-31.modify-event-subscription-message/source-type :portkey.aws.rds.-2014-10-31.modify-event-subscription-message/event-categories :portkey.aws.rds.-2014-10-31.modify-event-subscription-message/enabled]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-option-group-options-message/engine-name (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-option-group-options-message/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-option-group-options-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-option-group-options-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31.describe-option-group-options-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/describe-option-group-options-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2014-10-31.describe-option-group-options-message/engine-name] :opt-un [:portkey.aws.rds.-2014-10-31.describe-option-group-options-message/major-engine-version :portkey.aws.rds.-2014-10-31.describe-option-group-options-message/filters :portkey.aws.rds.-2014-10-31.describe-option-group-options-message/max-records :portkey.aws.rds.-2014-10-31.describe-option-group-options-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2014-10-31/global-cluster-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.core/defn add-source-identifier-to-subscription ([add-source-identifier-to-subscription-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-add-source-identifier-to-subscription-message add-source-identifier-to-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/add-source-identifier-to-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/add-source-identifier-to-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "AddSourceIdentifierToSubscriptionResult", :http.request.configuration/action "AddSourceIdentifierToSubscription", :http.request.configuration/output-deser-fn response-add-source-identifier-to-subscription-result, :http.request.spec/error-spec {"SubscriptionNotFoundFault" :portkey.aws.rds.-2014-10-31/subscription-not-found-fault, "SourceNotFoundFault" :portkey.aws.rds.-2014-10-31/source-not-found-fault}})))))
(clojure.spec.alpha/fdef add-source-identifier-to-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/add-source-identifier-to-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/add-source-identifier-to-subscription-result))

(clojure.core/defn delete-db-snapshot ([delete-db-snapshot-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-db-snapshot-message delete-db-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/delete-db-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/delete-db-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteDBSnapshotResult", :http.request.configuration/action "DeleteDBSnapshot", :http.request.configuration/output-deser-fn response-delete-db-snapshot-result, :http.request.spec/error-spec {"InvalidDBSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-snapshot-state-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/delete-db-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/delete-db-snapshot-result))

(clojure.core/defn delete-db-subnet-group ([delete-db-subnet-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-db-subnet-group-message delete-db-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/delete-db-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteDBSubnetGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"InvalidDBSubnetGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-subnet-group-state-fault, "InvalidDBSubnetStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-subnet-state-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/delete-db-subnet-group-message) :ret clojure.core/true?)

(clojure.core/defn remove-from-global-cluster ([] (remove-from-global-cluster {})) ([remove-from-global-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-remove-from-global-cluster-message remove-from-global-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/remove-from-global-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/remove-from-global-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RemoveFromGlobalClusterResult", :http.request.configuration/action "RemoveFromGlobalCluster", :http.request.configuration/output-deser-fn response-remove-from-global-cluster-result, :http.request.spec/error-spec {"GlobalClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/global-cluster-not-found-fault, "InvalidGlobalClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-global-cluster-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef remove-from-global-cluster :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/remove-from-global-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/remove-from-global-cluster-result))

(clojure.core/defn describe-orderable-db-instance-options ([describe-orderable-db-instance-options-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-orderable-db-instance-options-message describe-orderable-db-instance-options-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/orderable-db-instance-options-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-orderable-db-instance-options-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeOrderableDBInstanceOptionsResult", :http.request.configuration/action "DescribeOrderableDBInstanceOptions", :http.request.configuration/output-deser-fn response-orderable-db-instance-options-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-orderable-db-instance-options :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/describe-orderable-db-instance-options-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/orderable-db-instance-options-message))

(clojure.core/defn copy-db-cluster-parameter-group ([copy-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-copy-db-cluster-parameter-group-message copy-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/copy-db-cluster-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/copy-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CopyDBClusterParameterGroupResult", :http.request.configuration/action "CopyDBClusterParameterGroup", :http.request.configuration/output-deser-fn response-copy-db-cluster-parameter-group-result, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault, "DBParameterGroupQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-quota-exceeded-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-already-exists-fault}})))))
(clojure.spec.alpha/fdef copy-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/copy-db-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/copy-db-cluster-parameter-group-result))

(clojure.core/defn revoke-db-security-group-ingress ([revoke-db-security-group-ingress-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-revoke-db-security-group-ingress-message revoke-db-security-group-ingress-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/revoke-db-security-group-ingress-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/revoke-db-security-group-ingress-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RevokeDBSecurityGroupIngressResult", :http.request.configuration/action "RevokeDBSecurityGroupIngress", :http.request.configuration/output-deser-fn response-revoke-db-security-group-ingress-result, :http.request.spec/error-spec {"DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-security-group-not-found-fault, "AuthorizationNotFoundFault" :portkey.aws.rds.-2014-10-31/authorization-not-found-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-security-group-state-fault}})))))
(clojure.spec.alpha/fdef revoke-db-security-group-ingress :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/revoke-db-security-group-ingress-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/revoke-db-security-group-ingress-result))

(clojure.core/defn authorize-db-security-group-ingress ([authorize-db-security-group-ingress-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-authorize-db-security-group-ingress-message authorize-db-security-group-ingress-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/authorize-db-security-group-ingress-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/authorize-db-security-group-ingress-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "AuthorizeDBSecurityGroupIngressResult", :http.request.configuration/action "AuthorizeDBSecurityGroupIngress", :http.request.configuration/output-deser-fn response-authorize-db-security-group-ingress-result, :http.request.spec/error-spec {"DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-security-group-not-found-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-security-group-state-fault, "AuthorizationAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/authorization-already-exists-fault, "AuthorizationQuotaExceededFault" :portkey.aws.rds.-2014-10-31/authorization-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef authorize-db-security-group-ingress :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/authorize-db-security-group-ingress-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/authorize-db-security-group-ingress-result))

(clojure.core/defn modify-db-subnet-group ([modify-db-subnet-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-db-subnet-group-message modify-db-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/modify-db-subnet-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/modify-db-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBSubnetGroupResult", :http.request.configuration/action "ModifyDBSubnetGroup", :http.request.configuration/output-deser-fn response-modify-db-subnet-group-result, :http.request.spec/error-spec {"DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault, "DBSubnetQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-subnet-quota-exceeded-fault, "SubnetAlreadyInUse" :portkey.aws.rds.-2014-10-31/subnet-already-in-use, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet}})))))
(clojure.spec.alpha/fdef modify-db-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/modify-db-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/modify-db-subnet-group-result))

(clojure.core/defn modify-db-snapshot ([modify-db-snapshot-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-db-snapshot-message modify-db-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/modify-db-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/modify-db-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBSnapshotResult", :http.request.configuration/action "ModifyDBSnapshot", :http.request.configuration/output-deser-fn response-modify-db-snapshot-result, :http.request.spec/error-spec {"DBSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef modify-db-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/modify-db-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/modify-db-snapshot-result))

(clojure.core/defn restore-db-instance-to-point-in-time ([restore-db-instance-to-point-in-time-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-restore-db-instance-to-point-in-time-message restore-db-instance-to-point-in-time-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/restore-db-instance-to-point-in-time-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/restore-db-instance-to-point-in-time-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RestoreDBInstanceToPointInTimeResult", :http.request.configuration/action "RestoreDBInstanceToPointInTime", :http.request.configuration/output-deser-fn response-restore-db-instance-to-point-in-time-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "DomainNotFoundFault" :portkey.aws.rds.-2014-10-31/domain-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault, "InstanceQuotaExceededFault" :portkey.aws.rds.-2014-10-31/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-instance-already-exists-fault, "DBInstanceAutomatedBackupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-automated-backup-not-found-fault, "StorageTypeNotSupportedFault" :portkey.aws.rds.-2014-10-31/storage-type-not-supported-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs, "AuthorizationNotFoundFault" :portkey.aws.rds.-2014-10-31/authorization-not-found-fault, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds.-2014-10-31/provisioned-iops-not-available-in-az-fault, "PointInTimeRestoreNotEnabledFault" :portkey.aws.rds.-2014-10-31/point-in-time-restore-not-enabled-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2014-10-31/storage-quota-exceeded-fault, "InvalidRestoreFault" :portkey.aws.rds.-2014-10-31/invalid-restore-fault, "BackupPolicyNotFoundFault" :portkey.aws.rds.-2014-10-31/backup-policy-not-found-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-db-instance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef restore-db-instance-to-point-in-time :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/restore-db-instance-to-point-in-time-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/restore-db-instance-to-point-in-time-result))

(clojure.core/defn restore-db-cluster-to-point-in-time ([restore-db-cluster-to-point-in-time-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-restore-db-cluster-to-point-in-time-message restore-db-cluster-to-point-in-time-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/restore-db-cluster-to-point-in-time-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/restore-db-cluster-to-point-in-time-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RestoreDBClusterToPointInTimeResult", :http.request.configuration/action "RestoreDBClusterToPointInTime", :http.request.configuration/output-deser-fn response-restore-db-cluster-to-point-in-time-result, :http.request.spec/error-spec {"DBClusterAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-cluster-already-exists-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "DBClusterParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-not-found-fault, "InsufficientStorageClusterCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-storage-cluster-capacity-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet, "DBClusterQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-cluster-quota-exceeded-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-snapshot-state-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2014-10-31/storage-quota-exceeded-fault, "InvalidRestoreFault" :portkey.aws.rds.-2014-10-31/invalid-restore-fault, "InsufficientDBClusterCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-db-cluster-capacity-fault, "InvalidDBSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-snapshot-state-fault}})))))
(clojure.spec.alpha/fdef restore-db-cluster-to-point-in-time :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/restore-db-cluster-to-point-in-time-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/restore-db-cluster-to-point-in-time-result))

(clojure.core/defn describe-events ([] (describe-events {})) ([describe-events-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-events-message describe-events-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/events-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-events-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEventsResult", :http.request.configuration/action "DescribeEvents", :http.request.configuration/output-deser-fn response-events-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-events :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-events-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/events-message))

(clojure.core/defn reset-db-parameter-group ([reset-db-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-reset-db-parameter-group-message reset-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/reset-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ResetDBParameterGroupResult", :http.request.configuration/action "ResetDBParameterGroup", :http.request.configuration/output-deser-fn response-db-parameter-group-name-message, :http.request.spec/error-spec {"InvalidDBParameterGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-parameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef reset-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/reset-db-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-parameter-group-name-message))

(clojure.core/defn remove-role-from-db-cluster ([remove-role-from-db-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-remove-role-from-db-cluster-message remove-role-from-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/remove-role-from-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RemoveRoleFromDBCluster", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "DBClusterRoleNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-role-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault}})))))
(clojure.spec.alpha/fdef remove-role-from-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/remove-role-from-db-cluster-message) :ret clojure.core/true?)

(clojure.core/defn describe-option-groups ([] (describe-option-groups {})) ([describe-option-groups-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-option-groups-message describe-option-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/option-groups, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-option-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeOptionGroupsResult", :http.request.configuration/action "DescribeOptionGroups", :http.request.configuration/output-deser-fn response-option-groups, :http.request.spec/error-spec {"OptionGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/option-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-option-groups :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-option-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/option-groups))

(clojure.core/defn delete-db-cluster-snapshot ([delete-db-cluster-snapshot-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-db-cluster-snapshot-message delete-db-cluster-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/delete-db-cluster-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/delete-db-cluster-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteDBClusterSnapshotResult", :http.request.configuration/action "DeleteDBClusterSnapshot", :http.request.configuration/output-deser-fn response-delete-db-cluster-snapshot-result, :http.request.spec/error-spec {"InvalidDBClusterSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-snapshot-state-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/delete-db-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/delete-db-cluster-snapshot-result))

(clojure.core/defn reboot-db-instance ([reboot-db-instance-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-reboot-db-instance-message reboot-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/reboot-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/reboot-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RebootDBInstanceResult", :http.request.configuration/action "RebootDBInstance", :http.request.configuration/output-deser-fn response-reboot-db-instance-result, :http.request.spec/error-spec {"InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault, "DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef reboot-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/reboot-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/reboot-db-instance-result))

(clojure.core/defn create-db-cluster-parameter-group ([create-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-db-cluster-parameter-group-message create-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/create-db-cluster-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/create-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBClusterParameterGroupResult", :http.request.configuration/action "CreateDBClusterParameterGroup", :http.request.configuration/output-deser-fn response-create-db-cluster-parameter-group-result, :http.request.spec/error-spec {"DBParameterGroupQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-quota-exceeded-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-already-exists-fault}})))))
(clojure.spec.alpha/fdef create-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/create-db-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/create-db-cluster-parameter-group-result))

(clojure.core/defn delete-db-security-group ([delete-db-security-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-db-security-group-message delete-db-security-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/delete-db-security-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteDBSecurityGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"InvalidDBSecurityGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-security-group-state-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-security-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/delete-db-security-group-message) :ret clojure.core/true?)

(clojure.core/defn copy-db-parameter-group ([copy-db-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-copy-db-parameter-group-message copy-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/copy-db-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/copy-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CopyDBParameterGroupResult", :http.request.configuration/action "CopyDBParameterGroup", :http.request.configuration/output-deser-fn response-copy-db-parameter-group-result, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-already-exists-fault, "DBParameterGroupQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef copy-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/copy-db-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/copy-db-parameter-group-result))

(clojure.core/defn list-tags-for-resource ([list-tags-for-resource-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-list-tags-for-resource-message list-tags-for-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/tag-list-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/list-tags-for-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListTagsForResourceResult", :http.request.configuration/action "ListTagsForResource", :http.request.configuration/output-deser-fn response-tag-list-message, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-snapshot-not-found-fault, "DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef list-tags-for-resource :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/list-tags-for-resource-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/tag-list-message))

(clojure.core/defn delete-db-instance-automated-backup ([delete-db-instance-automated-backup-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-db-instance-automated-backup-message delete-db-instance-automated-backup-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/delete-db-instance-automated-backup-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/delete-db-instance-automated-backup-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteDBInstanceAutomatedBackupResult", :http.request.configuration/action "DeleteDBInstanceAutomatedBackup", :http.request.configuration/output-deser-fn response-delete-db-instance-automated-backup-result, :http.request.spec/error-spec {"InvalidDBInstanceAutomatedBackupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-automated-backup-state-fault, "DBInstanceAutomatedBackupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-automated-backup-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-instance-automated-backup :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/delete-db-instance-automated-backup-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/delete-db-instance-automated-backup-result))

(clojure.core/defn describe-certificates ([] (describe-certificates {})) ([describe-certificates-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-certificates-message describe-certificates-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/certificate-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-certificates-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeCertificatesResult", :http.request.configuration/action "DescribeCertificates", :http.request.configuration/output-deser-fn response-certificate-message, :http.request.spec/error-spec {"CertificateNotFoundFault" :portkey.aws.rds.-2014-10-31/certificate-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-certificates :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-certificates-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/certificate-message))

(clojure.core/defn describe-global-clusters ([] (describe-global-clusters {})) ([describe-global-clusters-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-global-clusters-message describe-global-clusters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/global-clusters-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-global-clusters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeGlobalClustersResult", :http.request.configuration/action "DescribeGlobalClusters", :http.request.configuration/output-deser-fn response-global-clusters-message, :http.request.spec/error-spec {"GlobalClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/global-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-global-clusters :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-global-clusters-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/global-clusters-message))

(clojure.core/defn stop-db-instance ([stop-db-instance-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-stop-db-instance-message stop-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/stop-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/stop-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "StopDBInstanceResult", :http.request.configuration/action "StopDBInstance", :http.request.configuration/output-deser-fn response-stop-db-instance-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault, "DBSnapshotAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-snapshot-already-exists-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds.-2014-10-31/snapshot-quota-exceeded-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault}})))))
(clojure.spec.alpha/fdef stop-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/stop-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/stop-db-instance-result))

(clojure.core/defn describe-engine-default-parameters ([describe-engine-default-parameters-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-engine-default-parameters-message describe-engine-default-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/describe-engine-default-parameters-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-engine-default-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEngineDefaultParametersResult", :http.request.configuration/action "DescribeEngineDefaultParameters", :http.request.configuration/output-deser-fn response-describe-engine-default-parameters-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-engine-default-parameters :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/describe-engine-default-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/describe-engine-default-parameters-result))

(clojure.core/defn delete-db-instance ([delete-db-instance-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-db-instance-message delete-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/delete-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/delete-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteDBInstanceResult", :http.request.configuration/action "DeleteDBInstance", :http.request.configuration/output-deser-fn response-delete-db-instance-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault, "DBSnapshotAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-snapshot-already-exists-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds.-2014-10-31/snapshot-quota-exceeded-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "DBInstanceAutomatedBackupQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-instance-automated-backup-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef delete-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/delete-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/delete-db-instance-result))

(clojure.core/defn describe-db-subnet-groups ([] (describe-db-subnet-groups {})) ([describe-db-subnet-groups-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-subnet-groups-message describe-db-subnet-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-subnet-group-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-subnet-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBSubnetGroupsResult", :http.request.configuration/action "DescribeDBSubnetGroups", :http.request.configuration/output-deser-fn response-db-subnet-group-message, :http.request.spec/error-spec {"DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-subnet-groups :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-db-subnet-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-subnet-group-message))

(clojure.core/defn modify-global-cluster ([] (modify-global-cluster {})) ([modify-global-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-global-cluster-message modify-global-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/modify-global-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/modify-global-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyGlobalClusterResult", :http.request.configuration/action "ModifyGlobalCluster", :http.request.configuration/output-deser-fn response-modify-global-cluster-result, :http.request.spec/error-spec {"GlobalClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/global-cluster-not-found-fault, "InvalidGlobalClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-global-cluster-state-fault}})))))
(clojure.spec.alpha/fdef modify-global-cluster :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/modify-global-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/modify-global-cluster-result))

(clojure.core/defn describe-db-clusters ([] (describe-db-clusters {})) ([describe-db-clusters-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-clusters-message describe-db-clusters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-cluster-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-clusters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBClustersResult", :http.request.configuration/action "DescribeDBClusters", :http.request.configuration/output-deser-fn response-db-cluster-message, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-clusters :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-db-clusters-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-message))

(clojure.core/defn create-db-cluster ([create-db-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-db-cluster-message create-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/create-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/create-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBClusterResult", :http.request.configuration/action "CreateDBCluster", :http.request.configuration/output-deser-fn response-create-db-cluster-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "DBClusterAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-cluster-already-exists-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault, "InvalidDBSubnetGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-subnet-group-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "DBClusterParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-not-found-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs, "InsufficientStorageClusterCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-storage-cluster-capacity-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet, "InvalidGlobalClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-global-cluster-state-fault, "DBClusterQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-cluster-quota-exceeded-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2014-10-31/storage-quota-exceeded-fault, "GlobalClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/global-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef create-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/create-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/create-db-cluster-result))

(clojure.core/defn create-global-cluster ([] (create-global-cluster {})) ([create-global-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-global-cluster-message create-global-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/create-global-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/create-global-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateGlobalClusterResult", :http.request.configuration/action "CreateGlobalCluster", :http.request.configuration/output-deser-fn response-create-global-cluster-result, :http.request.spec/error-spec {"GlobalClusterAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/global-cluster-already-exists-fault, "GlobalClusterQuotaExceededFault" :portkey.aws.rds.-2014-10-31/global-cluster-quota-exceeded-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef create-global-cluster :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/create-global-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/create-global-cluster-result))

(clojure.core/defn failover-db-cluster ([failover-db-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-failover-db-cluster-message failover-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/failover-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/failover-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "FailoverDBClusterResult", :http.request.configuration/action "FailoverDBCluster", :http.request.configuration/output-deser-fn response-failover-db-cluster-result, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef failover-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/failover-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/failover-db-cluster-result))

(clojure.core/defn reset-db-cluster-parameter-group ([reset-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-reset-db-cluster-parameter-group-message reset-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/reset-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ResetDBClusterParameterGroupResult", :http.request.configuration/action "ResetDBClusterParameterGroup", :http.request.configuration/output-deser-fn response-db-cluster-parameter-group-name-message, :http.request.spec/error-spec {"InvalidDBParameterGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-parameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef reset-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/reset-db-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-name-message))

(clojure.core/defn create-db-instance ([create-db-instance-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-db-instance-message create-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/create-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/create-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBInstanceResult", :http.request.configuration/action "CreateDBInstance", :http.request.configuration/output-deser-fn response-create-db-instance-result, :http.request.spec/error-spec {"DomainNotFoundFault" :portkey.aws.rds.-2014-10-31/domain-not-found-fault, "InstanceQuotaExceededFault" :portkey.aws.rds.-2014-10-31/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-instance-already-exists-fault, "DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "StorageTypeNotSupportedFault" :portkey.aws.rds.-2014-10-31/storage-type-not-supported-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs, "AuthorizationNotFoundFault" :portkey.aws.rds.-2014-10-31/authorization-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds.-2014-10-31/provisioned-iops-not-available-in-az-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2014-10-31/storage-quota-exceeded-fault, "BackupPolicyNotFoundFault" :portkey.aws.rds.-2014-10-31/backup-policy-not-found-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-db-instance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef create-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/create-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/create-db-instance-result))

(clojure.core/defn promote-read-replica ([promote-read-replica-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-promote-read-replica-message promote-read-replica-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/promote-read-replica-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/promote-read-replica-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "PromoteReadReplicaResult", :http.request.configuration/action "PromoteReadReplica", :http.request.configuration/output-deser-fn response-promote-read-replica-result, :http.request.spec/error-spec {"InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault, "DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef promote-read-replica :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/promote-read-replica-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/promote-read-replica-result))

(clojure.core/defn delete-event-subscription ([delete-event-subscription-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-event-subscription-message delete-event-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/delete-event-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/delete-event-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteEventSubscriptionResult", :http.request.configuration/action "DeleteEventSubscription", :http.request.configuration/output-deser-fn response-delete-event-subscription-result, :http.request.spec/error-spec {"SubscriptionNotFoundFault" :portkey.aws.rds.-2014-10-31/subscription-not-found-fault, "InvalidEventSubscriptionStateFault" :portkey.aws.rds.-2014-10-31/invalid-event-subscription-state-fault}})))))
(clojure.spec.alpha/fdef delete-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/delete-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/delete-event-subscription-result))

(clojure.core/defn apply-pending-maintenance-action ([apply-pending-maintenance-action-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-apply-pending-maintenance-action-message apply-pending-maintenance-action-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/apply-pending-maintenance-action-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/apply-pending-maintenance-action-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ApplyPendingMaintenanceActionResult", :http.request.configuration/action "ApplyPendingMaintenanceAction", :http.request.configuration/output-deser-fn response-apply-pending-maintenance-action-result, :http.request.spec/error-spec {"ResourceNotFoundFault" :portkey.aws.rds.-2014-10-31/resource-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef apply-pending-maintenance-action :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/apply-pending-maintenance-action-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/apply-pending-maintenance-action-result))

(clojure.core/defn delete-db-cluster ([delete-db-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-db-cluster-message delete-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/delete-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/delete-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteDBClusterResult", :http.request.configuration/action "DeleteDBCluster", :http.request.configuration/output-deser-fn response-delete-db-cluster-result, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "DBClusterSnapshotAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-already-exists-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds.-2014-10-31/snapshot-quota-exceeded-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-snapshot-state-fault}})))))
(clojure.spec.alpha/fdef delete-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/delete-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/delete-db-cluster-result))

(clojure.core/defn restore-db-instance-from-s-3 ([restore-db-instance-from-s-3-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-restore-db-instance-from-s-3-message restore-db-instance-from-s-3-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/restore-db-instance-from-s-3-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/restore-db-instance-from-s-3-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RestoreDBInstanceFromS3Result", :http.request.configuration/action "RestoreDBInstanceFromS3", :http.request.configuration/output-deser-fn response-restore-db-instance-from-s-3-result, :http.request.spec/error-spec {"InstanceQuotaExceededFault" :portkey.aws.rds.-2014-10-31/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-instance-already-exists-fault, "StorageTypeNotSupportedFault" :portkey.aws.rds.-2014-10-31/storage-type-not-supported-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs, "AuthorizationNotFoundFault" :portkey.aws.rds.-2014-10-31/authorization-not-found-fault, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet, "InvalidS3BucketFault" :portkey.aws.rds.-2014-10-31/invalid-s-3-bucket-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds.-2014-10-31/provisioned-iops-not-available-in-az-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2014-10-31/storage-quota-exceeded-fault, "BackupPolicyNotFoundFault" :portkey.aws.rds.-2014-10-31/backup-policy-not-found-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-db-instance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef restore-db-instance-from-s-3 :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/restore-db-instance-from-s-3-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/restore-db-instance-from-s-3-result))

(clojure.core/defn describe-db-log-files ([describe-db-log-files-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-log-files-message describe-db-log-files-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/describe-db-log-files-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-log-files-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBLogFilesResult", :http.request.configuration/action "DescribeDBLogFiles", :http.request.configuration/output-deser-fn response-describe-db-log-files-response, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-log-files :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/describe-db-log-files-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/describe-db-log-files-response))

(clojure.core/defn restore-db-instance-from-db-snapshot ([restore-db-instance-from-db-snapshot-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-restore-db-instance-from-db-snapshot-message restore-db-instance-from-db-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/restore-db-instance-from-db-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/restore-db-instance-from-db-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RestoreDBInstanceFromDBSnapshotResult", :http.request.configuration/action "RestoreDBInstanceFromDBSnapshot", :http.request.configuration/output-deser-fn response-restore-db-instance-from-db-snapshot-result, :http.request.spec/error-spec {"DomainNotFoundFault" :portkey.aws.rds.-2014-10-31/domain-not-found-fault, "InstanceQuotaExceededFault" :portkey.aws.rds.-2014-10-31/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-instance-already-exists-fault, "StorageTypeNotSupportedFault" :portkey.aws.rds.-2014-10-31/storage-type-not-supported-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs, "AuthorizationNotFoundFault" :portkey.aws.rds.-2014-10-31/authorization-not-found-fault, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds.-2014-10-31/provisioned-iops-not-available-in-az-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2014-10-31/storage-quota-exceeded-fault, "InvalidRestoreFault" :portkey.aws.rds.-2014-10-31/invalid-restore-fault, "BackupPolicyNotFoundFault" :portkey.aws.rds.-2014-10-31/backup-policy-not-found-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-db-instance-capacity-fault, "InvalidDBSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-snapshot-state-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-snapshot-not-found-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef restore-db-instance-from-db-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/restore-db-instance-from-db-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/restore-db-instance-from-db-snapshot-result))

(clojure.core/defn describe-db-snapshots ([] (describe-db-snapshots {})) ([describe-db-snapshots-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-snapshots-message describe-db-snapshots-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-snapshot-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-snapshots-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBSnapshotsResult", :http.request.configuration/action "DescribeDBSnapshots", :http.request.configuration/output-deser-fn response-db-snapshot-message, :http.request.spec/error-spec {"DBSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-snapshots :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-db-snapshots-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-snapshot-message))

(clojure.core/defn delete-db-cluster-endpoint ([delete-db-cluster-endpoint-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-db-cluster-endpoint-message delete-db-cluster-endpoint-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-cluster-endpoint, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/delete-db-cluster-endpoint-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteDBClusterEndpointResult", :http.request.configuration/action "DeleteDBClusterEndpoint", :http.request.configuration/output-deser-fn response-db-cluster-endpoint, :http.request.spec/error-spec {"InvalidDBClusterEndpointStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-endpoint-state-fault, "DBClusterEndpointNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-endpoint-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault}})))))
(clojure.spec.alpha/fdef delete-db-cluster-endpoint :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/delete-db-cluster-endpoint-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-endpoint))

(clojure.core/defn describe-db-cluster-backtracks ([describe-db-cluster-backtracks-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-cluster-backtracks-message describe-db-cluster-backtracks-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-cluster-backtrack-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-cluster-backtracks-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBClusterBacktracksResult", :http.request.configuration/action "DescribeDBClusterBacktracks", :http.request.configuration/output-deser-fn response-db-cluster-backtrack-message, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "DBClusterBacktrackNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-backtrack-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-backtracks :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/describe-db-cluster-backtracks-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-backtrack-message))

(clojure.core/defn create-db-subnet-group ([create-db-subnet-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-db-subnet-group-message create-db-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/create-db-subnet-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/create-db-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBSubnetGroupResult", :http.request.configuration/action "CreateDBSubnetGroup", :http.request.configuration/output-deser-fn response-create-db-subnet-group-result, :http.request.spec/error-spec {"DBSubnetGroupAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-already-exists-fault, "DBSubnetGroupQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-quota-exceeded-fault, "DBSubnetQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-subnet-quota-exceeded-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet}})))))
(clojure.spec.alpha/fdef create-db-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/create-db-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/create-db-subnet-group-result))

(clojure.core/defn remove-source-identifier-from-subscription ([remove-source-identifier-from-subscription-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-remove-source-identifier-from-subscription-message remove-source-identifier-from-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/remove-source-identifier-from-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/remove-source-identifier-from-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RemoveSourceIdentifierFromSubscriptionResult", :http.request.configuration/action "RemoveSourceIdentifierFromSubscription", :http.request.configuration/output-deser-fn response-remove-source-identifier-from-subscription-result, :http.request.spec/error-spec {"SubscriptionNotFoundFault" :portkey.aws.rds.-2014-10-31/subscription-not-found-fault, "SourceNotFoundFault" :portkey.aws.rds.-2014-10-31/source-not-found-fault}})))))
(clojure.spec.alpha/fdef remove-source-identifier-from-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/remove-source-identifier-from-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/remove-source-identifier-from-subscription-result))

(clojure.core/defn create-option-group ([create-option-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-option-group-message create-option-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/create-option-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/create-option-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateOptionGroupResult", :http.request.configuration/action "CreateOptionGroup", :http.request.configuration/output-deser-fn response-create-option-group-result, :http.request.spec/error-spec {"OptionGroupAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/option-group-already-exists-fault, "OptionGroupQuotaExceededFault" :portkey.aws.rds.-2014-10-31/option-group-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef create-option-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/create-option-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/create-option-group-result))

(clojure.core/defn describe-db-cluster-parameters ([describe-db-cluster-parameters-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-cluster-parameters-message describe-db-cluster-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-details, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-cluster-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBClusterParametersResult", :http.request.configuration/action "DescribeDBClusterParameters", :http.request.configuration/output-deser-fn response-db-cluster-parameter-group-details, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-parameters :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/describe-db-cluster-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-details))

(clojure.core/defn describe-event-categories ([] (describe-event-categories {})) ([describe-event-categories-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-event-categories-message describe-event-categories-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/event-categories-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-event-categories-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEventCategoriesResult", :http.request.configuration/action "DescribeEventCategories", :http.request.configuration/output-deser-fn response-event-categories-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-event-categories :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-event-categories-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/event-categories-message))

(clojure.core/defn describe-account-attributes ([] (describe-account-attributes {})) ([describe-account-attributes-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-account-attributes-message describe-account-attributes-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/account-attributes-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-account-attributes-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeAccountAttributesResult", :http.request.configuration/action "DescribeAccountAttributes", :http.request.configuration/output-deser-fn response-account-attributes-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-account-attributes :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-account-attributes-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/account-attributes-message))

(clojure.core/defn describe-engine-default-cluster-parameters ([describe-engine-default-cluster-parameters-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-engine-default-cluster-parameters-message describe-engine-default-cluster-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/describe-engine-default-cluster-parameters-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-engine-default-cluster-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEngineDefaultClusterParametersResult", :http.request.configuration/action "DescribeEngineDefaultClusterParameters", :http.request.configuration/output-deser-fn response-describe-engine-default-cluster-parameters-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-engine-default-cluster-parameters :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/describe-engine-default-cluster-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/describe-engine-default-cluster-parameters-result))

(clojure.core/defn describe-db-cluster-endpoints ([] (describe-db-cluster-endpoints {})) ([describe-db-cluster-endpoints-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-cluster-endpoints-message describe-db-cluster-endpoints-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-cluster-endpoint-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-cluster-endpoints-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBClusterEndpointsResult", :http.request.configuration/action "DescribeDBClusterEndpoints", :http.request.configuration/output-deser-fn response-db-cluster-endpoint-message, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-endpoints :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-db-cluster-endpoints-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-endpoint-message))

(clojure.core/defn modify-db-cluster ([modify-db-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-db-cluster-message modify-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/modify-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/modify-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBClusterResult", :http.request.configuration/action "ModifyDBCluster", :http.request.configuration/output-deser-fn response-modify-db-cluster-result, :http.request.spec/error-spec {"DBClusterAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-cluster-already-exists-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault, "InvalidDBSubnetGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-subnet-group-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-security-group-state-fault, "DBClusterParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2014-10-31/storage-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef modify-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/modify-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/modify-db-cluster-result))

(clojure.core/defn remove-role-from-db-instance ([remove-role-from-db-instance-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-remove-role-from-db-instance-message remove-role-from-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/remove-role-from-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RemoveRoleFromDBInstance", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "DBInstanceRoleNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-role-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef remove-role-from-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/remove-role-from-db-instance-message) :ret clojure.core/true?)

(clojure.core/defn restore-db-cluster-from-s-3 ([restore-db-cluster-from-s-3-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-restore-db-cluster-from-s-3-message restore-db-cluster-from-s-3-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/restore-db-cluster-from-s-3-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/restore-db-cluster-from-s-3-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RestoreDBClusterFromS3Result", :http.request.configuration/action "RestoreDBClusterFromS3", :http.request.configuration/output-deser-fn response-restore-db-cluster-from-s-3-result, :http.request.spec/error-spec {"DBClusterAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-cluster-already-exists-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault, "InvalidDBSubnetGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-subnet-group-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "DBClusterParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-not-found-fault, "InsufficientStorageClusterCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-storage-cluster-capacity-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet, "DBClusterQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-cluster-quota-exceeded-fault, "InvalidS3BucketFault" :portkey.aws.rds.-2014-10-31/invalid-s-3-bucket-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2014-10-31/storage-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef restore-db-cluster-from-s-3 :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/restore-db-cluster-from-s-3-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/restore-db-cluster-from-s-3-result))

(clojure.core/defn describe-reserved-db-instances-offerings ([] (describe-reserved-db-instances-offerings {})) ([describe-reserved-db-instances-offerings-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-reserved-db-instances-offerings-message describe-reserved-db-instances-offerings-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/reserved-db-instances-offering-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-reserved-db-instances-offerings-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeReservedDBInstancesOfferingsResult", :http.request.configuration/action "DescribeReservedDBInstancesOfferings", :http.request.configuration/output-deser-fn response-reserved-db-instances-offering-message, :http.request.spec/error-spec {"ReservedDBInstancesOfferingNotFoundFault" :portkey.aws.rds.-2014-10-31/reserved-db-instances-offering-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-reserved-db-instances-offerings :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-reserved-db-instances-offerings-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/reserved-db-instances-offering-message))

(clojure.core/defn describe-pending-maintenance-actions ([] (describe-pending-maintenance-actions {})) ([describe-pending-maintenance-actions-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-pending-maintenance-actions-message describe-pending-maintenance-actions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/pending-maintenance-actions-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-pending-maintenance-actions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribePendingMaintenanceActionsResult", :http.request.configuration/action "DescribePendingMaintenanceActions", :http.request.configuration/output-deser-fn response-pending-maintenance-actions-message, :http.request.spec/error-spec {"ResourceNotFoundFault" :portkey.aws.rds.-2014-10-31/resource-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-pending-maintenance-actions :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-pending-maintenance-actions-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/pending-maintenance-actions-message))

(clojure.core/defn modify-db-cluster-endpoint ([modify-db-cluster-endpoint-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-db-cluster-endpoint-message modify-db-cluster-endpoint-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-cluster-endpoint, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/modify-db-cluster-endpoint-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBClusterEndpointResult", :http.request.configuration/action "ModifyDBClusterEndpoint", :http.request.configuration/output-deser-fn response-db-cluster-endpoint, :http.request.spec/error-spec {"InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidDBClusterEndpointStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-endpoint-state-fault, "DBClusterEndpointNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-endpoint-not-found-fault, "DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef modify-db-cluster-endpoint :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/modify-db-cluster-endpoint-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-endpoint))

(clojure.core/defn create-db-cluster-endpoint ([create-db-cluster-endpoint-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-db-cluster-endpoint-message create-db-cluster-endpoint-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-cluster-endpoint, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/create-db-cluster-endpoint-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBClusterEndpointResult", :http.request.configuration/action "CreateDBClusterEndpoint", :http.request.configuration/output-deser-fn response-db-cluster-endpoint, :http.request.spec/error-spec {"DBClusterEndpointQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-cluster-endpoint-quota-exceeded-fault, "DBClusterEndpointAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-cluster-endpoint-already-exists-fault, "DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef create-db-cluster-endpoint :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/create-db-cluster-endpoint-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-endpoint))

(clojure.core/defn create-db-snapshot ([create-db-snapshot-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-db-snapshot-message create-db-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/create-db-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/create-db-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBSnapshotResult", :http.request.configuration/action "CreateDBSnapshot", :http.request.configuration/output-deser-fn response-create-db-snapshot-result, :http.request.spec/error-spec {"DBSnapshotAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-snapshot-already-exists-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault, "DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds.-2014-10-31/snapshot-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef create-db-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/create-db-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/create-db-snapshot-result))

(clojure.core/defn download-db-log-file-portion ([download-db-log-file-portion-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-download-db-log-file-portion-message download-db-log-file-portion-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/download-db-log-file-portion-details, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/download-db-log-file-portion-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DownloadDBLogFilePortionResult", :http.request.configuration/action "DownloadDBLogFilePortion", :http.request.configuration/output-deser-fn response-download-db-log-file-portion-details, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "DBLogFileNotFoundFault" :portkey.aws.rds.-2014-10-31/db-log-file-not-found-fault}})))))
(clojure.spec.alpha/fdef download-db-log-file-portion :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/download-db-log-file-portion-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/download-db-log-file-portion-details))

(clojure.core/defn modify-db-snapshot-attribute ([modify-db-snapshot-attribute-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-db-snapshot-attribute-message modify-db-snapshot-attribute-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/modify-db-snapshot-attribute-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/modify-db-snapshot-attribute-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBSnapshotAttributeResult", :http.request.configuration/action "ModifyDBSnapshotAttribute", :http.request.configuration/output-deser-fn response-modify-db-snapshot-attribute-result, :http.request.spec/error-spec {"DBSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-snapshot-not-found-fault, "InvalidDBSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-snapshot-state-fault, "SharedSnapshotQuotaExceededFault" :portkey.aws.rds.-2014-10-31/shared-snapshot-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef modify-db-snapshot-attribute :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/modify-db-snapshot-attribute-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/modify-db-snapshot-attribute-result))

(clojure.core/defn describe-source-regions ([] (describe-source-regions {})) ([describe-source-regions-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-source-regions-message describe-source-regions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/source-region-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-source-regions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeSourceRegionsResult", :http.request.configuration/action "DescribeSourceRegions", :http.request.configuration/output-deser-fn response-source-region-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-source-regions :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-source-regions-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/source-region-message))

(clojure.core/defn start-db-instance ([start-db-instance-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-start-db-instance-message start-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/start-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/start-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "StartDBInstanceResult", :http.request.configuration/action "StartDBInstance", :http.request.configuration/output-deser-fn response-start-db-instance-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs, "AuthorizationNotFoundFault" :portkey.aws.rds.-2014-10-31/authorization-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-db-instance-capacity-fault}})))))
(clojure.spec.alpha/fdef start-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/start-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/start-db-instance-result))

(clojure.core/defn start-db-cluster ([start-db-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-start-db-cluster-message start-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/start-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/start-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "StartDBClusterResult", :http.request.configuration/action "StartDBCluster", :http.request.configuration/output-deser-fn response-start-db-cluster-result, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef start-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/start-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/start-db-cluster-result))

(clojure.core/defn describe-db-snapshot-attributes ([describe-db-snapshot-attributes-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-snapshot-attributes-message describe-db-snapshot-attributes-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/describe-db-snapshot-attributes-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-snapshot-attributes-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBSnapshotAttributesResult", :http.request.configuration/action "DescribeDBSnapshotAttributes", :http.request.configuration/output-deser-fn response-describe-db-snapshot-attributes-result, :http.request.spec/error-spec {"DBSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-snapshot-attributes :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/describe-db-snapshot-attributes-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/describe-db-snapshot-attributes-result))

(clojure.core/defn describe-db-instances ([] (describe-db-instances {})) ([describe-db-instances-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-instances-message describe-db-instances-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-instance-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-instances-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBInstancesResult", :http.request.configuration/action "DescribeDBInstances", :http.request.configuration/output-deser-fn response-db-instance-message, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-instances :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-db-instances-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-instance-message))

(clojure.core/defn modify-event-subscription ([modify-event-subscription-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-event-subscription-message modify-event-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/modify-event-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/modify-event-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyEventSubscriptionResult", :http.request.configuration/action "ModifyEventSubscription", :http.request.configuration/output-deser-fn response-modify-event-subscription-result, :http.request.spec/error-spec {"EventSubscriptionQuotaExceededFault" :portkey.aws.rds.-2014-10-31/event-subscription-quota-exceeded-fault, "SubscriptionNotFoundFault" :portkey.aws.rds.-2014-10-31/subscription-not-found-fault, "SNSInvalidTopicFault" :portkey.aws.rds.-2014-10-31/sns-invalid-topic-fault, "SNSNoAuthorizationFault" :portkey.aws.rds.-2014-10-31/sns-no-authorization-fault, "SNSTopicArnNotFoundFault" :portkey.aws.rds.-2014-10-31/sns-topic-arn-not-found-fault, "SubscriptionCategoryNotFoundFault" :portkey.aws.rds.-2014-10-31/subscription-category-not-found-fault}})))))
(clojure.spec.alpha/fdef modify-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/modify-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/modify-event-subscription-result))

(clojure.core/defn describe-db-engine-versions ([] (describe-db-engine-versions {})) ([describe-db-engine-versions-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-engine-versions-message describe-db-engine-versions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-engine-version-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-engine-versions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBEngineVersionsResult", :http.request.configuration/action "DescribeDBEngineVersions", :http.request.configuration/output-deser-fn response-db-engine-version-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-db-engine-versions :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-db-engine-versions-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-engine-version-message))

(clojure.core/defn modify-db-cluster-parameter-group ([modify-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-db-cluster-parameter-group-message modify-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/modify-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBClusterParameterGroupResult", :http.request.configuration/action "ModifyDBClusterParameterGroup", :http.request.configuration/output-deser-fn response-db-cluster-parameter-group-name-message, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault, "InvalidDBParameterGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-parameter-group-state-fault}})))))
(clojure.spec.alpha/fdef modify-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/modify-db-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-name-message))

(clojure.core/defn describe-option-group-options ([describe-option-group-options-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-option-group-options-message describe-option-group-options-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/option-group-options-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-option-group-options-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeOptionGroupOptionsResult", :http.request.configuration/action "DescribeOptionGroupOptions", :http.request.configuration/output-deser-fn response-option-group-options-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-option-group-options :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/describe-option-group-options-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/option-group-options-message))

(clojure.core/defn create-db-security-group ([create-db-security-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-db-security-group-message create-db-security-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/create-db-security-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/create-db-security-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBSecurityGroupResult", :http.request.configuration/action "CreateDBSecurityGroup", :http.request.configuration/output-deser-fn response-create-db-security-group-result, :http.request.spec/error-spec {"DBSecurityGroupAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-security-group-already-exists-fault, "DBSecurityGroupQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-security-group-quota-exceeded-fault, "DBSecurityGroupNotSupportedFault" :portkey.aws.rds.-2014-10-31/db-security-group-not-supported-fault}})))))
(clojure.spec.alpha/fdef create-db-security-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/create-db-security-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/create-db-security-group-result))

(clojure.core/defn delete-option-group ([delete-option-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-option-group-message delete-option-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/delete-option-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteOptionGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"OptionGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/option-group-not-found-fault, "InvalidOptionGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-option-group-state-fault}})))))
(clojure.spec.alpha/fdef delete-option-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/delete-option-group-message) :ret clojure.core/true?)

(clojure.core/defn create-event-subscription ([create-event-subscription-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-event-subscription-message create-event-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/create-event-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/create-event-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateEventSubscriptionResult", :http.request.configuration/action "CreateEventSubscription", :http.request.configuration/output-deser-fn response-create-event-subscription-result, :http.request.spec/error-spec {"EventSubscriptionQuotaExceededFault" :portkey.aws.rds.-2014-10-31/event-subscription-quota-exceeded-fault, "SubscriptionAlreadyExistFault" :portkey.aws.rds.-2014-10-31/subscription-already-exist-fault, "SNSInvalidTopicFault" :portkey.aws.rds.-2014-10-31/sns-invalid-topic-fault, "SNSNoAuthorizationFault" :portkey.aws.rds.-2014-10-31/sns-no-authorization-fault, "SNSTopicArnNotFoundFault" :portkey.aws.rds.-2014-10-31/sns-topic-arn-not-found-fault, "SubscriptionCategoryNotFoundFault" :portkey.aws.rds.-2014-10-31/subscription-category-not-found-fault, "SourceNotFoundFault" :portkey.aws.rds.-2014-10-31/source-not-found-fault}})))))
(clojure.spec.alpha/fdef create-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/create-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/create-event-subscription-result))

(clojure.core/defn modify-db-cluster-snapshot-attribute ([modify-db-cluster-snapshot-attribute-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-db-cluster-snapshot-attribute-message modify-db-cluster-snapshot-attribute-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/modify-db-cluster-snapshot-attribute-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/modify-db-cluster-snapshot-attribute-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBClusterSnapshotAttributeResult", :http.request.configuration/action "ModifyDBClusterSnapshotAttribute", :http.request.configuration/output-deser-fn response-modify-db-cluster-snapshot-attribute-result, :http.request.spec/error-spec {"DBClusterSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-not-found-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-snapshot-state-fault, "SharedSnapshotQuotaExceededFault" :portkey.aws.rds.-2014-10-31/shared-snapshot-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef modify-db-cluster-snapshot-attribute :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/modify-db-cluster-snapshot-attribute-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/modify-db-cluster-snapshot-attribute-result))

(clojure.core/defn stop-db-cluster ([stop-db-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-stop-db-cluster-message stop-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/stop-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/stop-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "StopDBClusterResult", :http.request.configuration/action "StopDBCluster", :http.request.configuration/output-deser-fn response-stop-db-cluster-result, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef stop-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/stop-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/stop-db-cluster-result))

(clojure.core/defn backtrack-db-cluster ([backtrack-db-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-backtrack-db-cluster-message backtrack-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-cluster-backtrack, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/backtrack-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "BacktrackDBClusterResult", :http.request.configuration/action "BacktrackDBCluster", :http.request.configuration/output-deser-fn response-db-cluster-backtrack, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault}})))))
(clojure.spec.alpha/fdef backtrack-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/backtrack-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-backtrack))

(clojure.core/defn create-db-parameter-group ([create-db-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-db-parameter-group-message create-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/create-db-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/create-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBParameterGroupResult", :http.request.configuration/action "CreateDBParameterGroup", :http.request.configuration/output-deser-fn response-create-db-parameter-group-result, :http.request.spec/error-spec {"DBParameterGroupQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-quota-exceeded-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-already-exists-fault}})))))
(clojure.spec.alpha/fdef create-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/create-db-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/create-db-parameter-group-result))

(clojure.core/defn describe-valid-db-instance-modifications ([describe-valid-db-instance-modifications-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-valid-db-instance-modifications-message describe-valid-db-instance-modifications-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/describe-valid-db-instance-modifications-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-valid-db-instance-modifications-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeValidDBInstanceModificationsResult", :http.request.configuration/action "DescribeValidDBInstanceModifications", :http.request.configuration/output-deser-fn response-describe-valid-db-instance-modifications-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef describe-valid-db-instance-modifications :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/describe-valid-db-instance-modifications-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/describe-valid-db-instance-modifications-result))

(clojure.core/defn add-role-to-db-instance ([add-role-to-db-instance-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-add-role-to-db-instance-message add-role-to-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/add-role-to-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AddRoleToDBInstance", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "DBInstanceRoleAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-instance-role-already-exists-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault, "DBInstanceRoleQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-instance-role-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef add-role-to-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/add-role-to-db-instance-message) :ret clojure.core/true?)

(clojure.core/defn purchase-reserved-db-instances-offering ([purchase-reserved-db-instances-offering-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-purchase-reserved-db-instances-offering-message purchase-reserved-db-instances-offering-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/purchase-reserved-db-instances-offering-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/purchase-reserved-db-instances-offering-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "PurchaseReservedDBInstancesOfferingResult", :http.request.configuration/action "PurchaseReservedDBInstancesOffering", :http.request.configuration/output-deser-fn response-purchase-reserved-db-instances-offering-result, :http.request.spec/error-spec {"ReservedDBInstancesOfferingNotFoundFault" :portkey.aws.rds.-2014-10-31/reserved-db-instances-offering-not-found-fault, "ReservedDBInstanceAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/reserved-db-instance-already-exists-fault, "ReservedDBInstanceQuotaExceededFault" :portkey.aws.rds.-2014-10-31/reserved-db-instance-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef purchase-reserved-db-instances-offering :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/purchase-reserved-db-instances-offering-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/purchase-reserved-db-instances-offering-result))

(clojure.core/defn describe-db-cluster-snapshots ([] (describe-db-cluster-snapshots {})) ([describe-db-cluster-snapshots-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-cluster-snapshots-message describe-db-cluster-snapshots-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-cluster-snapshots-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBClusterSnapshotsResult", :http.request.configuration/action "DescribeDBClusterSnapshots", :http.request.configuration/output-deser-fn response-db-cluster-snapshot-message, :http.request.spec/error-spec {"DBClusterSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-snapshots :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-db-cluster-snapshots-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-message))

(clojure.core/defn describe-db-instance-automated-backups ([] (describe-db-instance-automated-backups {})) ([describe-db-instance-automated-backups-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-instance-automated-backups-message describe-db-instance-automated-backups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-instance-automated-backup-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-instance-automated-backups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBInstanceAutomatedBackupsResult", :http.request.configuration/action "DescribeDBInstanceAutomatedBackups", :http.request.configuration/output-deser-fn response-db-instance-automated-backup-message, :http.request.spec/error-spec {"DBInstanceAutomatedBackupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-automated-backup-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-instance-automated-backups :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-db-instance-automated-backups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-instance-automated-backup-message))

(clojure.core/defn delete-db-parameter-group ([delete-db-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-db-parameter-group-message delete-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/delete-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteDBParameterGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"InvalidDBParameterGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-parameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/delete-db-parameter-group-message) :ret clojure.core/true?)

(clojure.core/defn copy-db-snapshot ([copy-db-snapshot-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-copy-db-snapshot-message copy-db-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/copy-db-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/copy-db-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CopyDBSnapshotResult", :http.request.configuration/action "CopyDBSnapshot", :http.request.configuration/output-deser-fn response-copy-db-snapshot-result, :http.request.spec/error-spec {"DBSnapshotAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-snapshot-already-exists-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-snapshot-not-found-fault, "InvalidDBSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-snapshot-state-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds.-2014-10-31/snapshot-quota-exceeded-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault}})))))
(clojure.spec.alpha/fdef copy-db-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/copy-db-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/copy-db-snapshot-result))

(clojure.core/defn describe-reserved-db-instances ([] (describe-reserved-db-instances {})) ([describe-reserved-db-instances-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-reserved-db-instances-message describe-reserved-db-instances-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/reserved-db-instance-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-reserved-db-instances-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeReservedDBInstancesResult", :http.request.configuration/action "DescribeReservedDBInstances", :http.request.configuration/output-deser-fn response-reserved-db-instance-message, :http.request.spec/error-spec {"ReservedDBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/reserved-db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-reserved-db-instances :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-reserved-db-instances-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/reserved-db-instance-message))

(clojure.core/defn describe-event-subscriptions ([] (describe-event-subscriptions {})) ([describe-event-subscriptions-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-event-subscriptions-message describe-event-subscriptions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/event-subscriptions-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-event-subscriptions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEventSubscriptionsResult", :http.request.configuration/action "DescribeEventSubscriptions", :http.request.configuration/output-deser-fn response-event-subscriptions-message, :http.request.spec/error-spec {"SubscriptionNotFoundFault" :portkey.aws.rds.-2014-10-31/subscription-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-event-subscriptions :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-event-subscriptions-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/event-subscriptions-message))

(clojure.core/defn modify-db-instance ([modify-db-instance-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-db-instance-message modify-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/modify-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/modify-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBInstanceResult", :http.request.configuration/action "ModifyDBInstance", :http.request.configuration/output-deser-fn response-modify-db-instance-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "DomainNotFoundFault" :portkey.aws.rds.-2014-10-31/domain-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-instance-already-exists-fault, "CertificateNotFoundFault" :portkey.aws.rds.-2014-10-31/certificate-not-found-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-security-group-state-fault, "StorageTypeNotSupportedFault" :portkey.aws.rds.-2014-10-31/storage-type-not-supported-fault, "AuthorizationNotFoundFault" :portkey.aws.rds.-2014-10-31/authorization-not-found-fault, "DBUpgradeDependencyFailureFault" :portkey.aws.rds.-2014-10-31/db-upgrade-dependency-failure-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds.-2014-10-31/provisioned-iops-not-available-in-az-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2014-10-31/storage-quota-exceeded-fault, "BackupPolicyNotFoundFault" :portkey.aws.rds.-2014-10-31/backup-policy-not-found-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-db-instance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef modify-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/modify-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/modify-db-instance-result))

(clojure.core/defn describe-db-cluster-parameter-groups ([] (describe-db-cluster-parameter-groups {})) ([describe-db-cluster-parameter-groups-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-cluster-parameter-groups-message describe-db-cluster-parameter-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-cluster-parameter-groups-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-cluster-parameter-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBClusterParameterGroupsResult", :http.request.configuration/action "DescribeDBClusterParameterGroups", :http.request.configuration/output-deser-fn response-db-cluster-parameter-groups-message, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-parameter-groups :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-db-cluster-parameter-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-parameter-groups-message))

(clojure.core/defn create-db-cluster-snapshot ([create-db-cluster-snapshot-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-db-cluster-snapshot-message create-db-cluster-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/create-db-cluster-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/create-db-cluster-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBClusterSnapshotResult", :http.request.configuration/action "CreateDBClusterSnapshot", :http.request.configuration/output-deser-fn response-create-db-cluster-snapshot-result, :http.request.spec/error-spec {"DBClusterSnapshotAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-already-exists-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds.-2014-10-31/snapshot-quota-exceeded-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-snapshot-state-fault}})))))
(clojure.spec.alpha/fdef create-db-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/create-db-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/create-db-cluster-snapshot-result))

(clojure.core/defn describe-db-parameters ([describe-db-parameters-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-parameters-message describe-db-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-parameter-group-details, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBParametersResult", :http.request.configuration/action "DescribeDBParameters", :http.request.configuration/output-deser-fn response-db-parameter-group-details, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-parameters :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/describe-db-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-parameter-group-details))

(clojure.core/defn modify-option-group ([modify-option-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-option-group-message modify-option-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/modify-option-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/modify-option-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyOptionGroupResult", :http.request.configuration/action "ModifyOptionGroup", :http.request.configuration/output-deser-fn response-modify-option-group-result, :http.request.spec/error-spec {"InvalidOptionGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-option-group-state-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/option-group-not-found-fault}})))))
(clojure.spec.alpha/fdef modify-option-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/modify-option-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/modify-option-group-result))

(clojure.core/defn describe-db-parameter-groups ([] (describe-db-parameter-groups {})) ([describe-db-parameter-groups-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-parameter-groups-message describe-db-parameter-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-parameter-groups-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-parameter-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBParameterGroupsResult", :http.request.configuration/action "DescribeDBParameterGroups", :http.request.configuration/output-deser-fn response-db-parameter-groups-message, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-parameter-groups :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-db-parameter-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-parameter-groups-message))

(clojure.core/defn remove-tags-from-resource ([remove-tags-from-resource-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-remove-tags-from-resource-message remove-tags-from-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/remove-tags-from-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RemoveTagsFromResource", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-snapshot-not-found-fault, "DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef remove-tags-from-resource :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/remove-tags-from-resource-message) :ret clojure.core/true?)

(clojure.core/defn copy-db-cluster-snapshot ([copy-db-cluster-snapshot-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-copy-db-cluster-snapshot-message copy-db-cluster-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/copy-db-cluster-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/copy-db-cluster-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CopyDBClusterSnapshotResult", :http.request.configuration/action "CopyDBClusterSnapshot", :http.request.configuration/output-deser-fn response-copy-db-cluster-snapshot-result, :http.request.spec/error-spec {"DBClusterSnapshotAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-already-exists-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-snapshot-state-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds.-2014-10-31/snapshot-quota-exceeded-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault}})))))
(clojure.spec.alpha/fdef copy-db-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/copy-db-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/copy-db-cluster-snapshot-result))

(clojure.core/defn delete-db-cluster-parameter-group ([delete-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-db-cluster-parameter-group-message delete-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/delete-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteDBClusterParameterGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"InvalidDBParameterGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-parameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/delete-db-cluster-parameter-group-message) :ret clojure.core/true?)

(clojure.core/defn add-role-to-db-cluster ([add-role-to-db-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-add-role-to-db-cluster-message add-role-to-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/add-role-to-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AddRoleToDBCluster", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "DBClusterRoleAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-cluster-role-already-exists-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "DBClusterRoleQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-cluster-role-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef add-role-to-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/add-role-to-db-cluster-message) :ret clojure.core/true?)

(clojure.core/defn modify-current-db-cluster-capacity ([modify-current-db-cluster-capacity-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-current-db-cluster-capacity-message modify-current-db-cluster-capacity-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-cluster-capacity-info, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/modify-current-db-cluster-capacity-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyCurrentDBClusterCapacityResult", :http.request.configuration/action "ModifyCurrentDBClusterCapacity", :http.request.configuration/output-deser-fn response-db-cluster-capacity-info, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault, "InvalidDBClusterCapacityFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-capacity-fault}})))))
(clojure.spec.alpha/fdef modify-current-db-cluster-capacity :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/modify-current-db-cluster-capacity-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-cluster-capacity-info))

(clojure.core/defn copy-option-group ([copy-option-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-copy-option-group-message copy-option-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/copy-option-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/copy-option-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CopyOptionGroupResult", :http.request.configuration/action "CopyOptionGroup", :http.request.configuration/output-deser-fn response-copy-option-group-result, :http.request.spec/error-spec {"OptionGroupAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/option-group-already-exists-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/option-group-not-found-fault, "OptionGroupQuotaExceededFault" :portkey.aws.rds.-2014-10-31/option-group-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef copy-option-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/copy-option-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/copy-option-group-result))

(clojure.core/defn promote-read-replica-db-cluster ([promote-read-replica-db-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-promote-read-replica-db-cluster-message promote-read-replica-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/promote-read-replica-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/promote-read-replica-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "PromoteReadReplicaDBClusterResult", :http.request.configuration/action "PromoteReadReplicaDBCluster", :http.request.configuration/output-deser-fn response-promote-read-replica-db-cluster-result, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-state-fault}})))))
(clojure.spec.alpha/fdef promote-read-replica-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/promote-read-replica-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/promote-read-replica-db-cluster-result))

(clojure.core/defn add-tags-to-resource ([add-tags-to-resource-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-add-tags-to-resource-message add-tags-to-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/add-tags-to-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AddTagsToResource", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-snapshot-not-found-fault, "DBClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef add-tags-to-resource :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/add-tags-to-resource-message) :ret clojure.core/true?)

(clojure.core/defn restore-db-cluster-from-snapshot ([restore-db-cluster-from-snapshot-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-restore-db-cluster-from-snapshot-message restore-db-cluster-from-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/restore-db-cluster-from-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/restore-db-cluster-from-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RestoreDBClusterFromSnapshotResult", :http.request.configuration/action "RestoreDBClusterFromSnapshot", :http.request.configuration/output-deser-fn response-restore-db-cluster-from-snapshot-result, :http.request.spec/error-spec {"DBClusterAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-cluster-already-exists-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault, "DBClusterParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-parameter-group-not-found-fault, "InsufficientStorageClusterCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-storage-cluster-capacity-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-not-found-fault, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet, "DBClusterQuotaExceededFault" :portkey.aws.rds.-2014-10-31/db-cluster-quota-exceeded-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-cluster-snapshot-state-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2014-10-31/storage-quota-exceeded-fault, "InvalidRestoreFault" :portkey.aws.rds.-2014-10-31/invalid-restore-fault, "InsufficientDBClusterCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-db-cluster-capacity-fault, "InvalidDBSnapshotStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-snapshot-state-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef restore-db-cluster-from-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/restore-db-cluster-from-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/restore-db-cluster-from-snapshot-result))

(clojure.core/defn modify-db-parameter-group ([modify-db-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-db-parameter-group-message modify-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/modify-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBParameterGroupResult", :http.request.configuration/action "ModifyDBParameterGroup", :http.request.configuration/output-deser-fn response-db-parameter-group-name-message, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault, "InvalidDBParameterGroupStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-parameter-group-state-fault}})))))
(clojure.spec.alpha/fdef modify-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/modify-db-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-parameter-group-name-message))

(clojure.core/defn describe-db-cluster-snapshot-attributes ([describe-db-cluster-snapshot-attributes-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-cluster-snapshot-attributes-message describe-db-cluster-snapshot-attributes-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/describe-db-cluster-snapshot-attributes-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-cluster-snapshot-attributes-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBClusterSnapshotAttributesResult", :http.request.configuration/action "DescribeDBClusterSnapshotAttributes", :http.request.configuration/output-deser-fn response-describe-db-cluster-snapshot-attributes-result, :http.request.spec/error-spec {"DBClusterSnapshotNotFoundFault" :portkey.aws.rds.-2014-10-31/db-cluster-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-snapshot-attributes :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/describe-db-cluster-snapshot-attributes-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/describe-db-cluster-snapshot-attributes-result))

(clojure.core/defn describe-db-security-groups ([] (describe-db-security-groups {})) ([describe-db-security-groups-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-security-groups-message describe-db-security-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/db-security-group-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/describe-db-security-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBSecurityGroupsResult", :http.request.configuration/action "DescribeDBSecurityGroups", :http.request.configuration/output-deser-fn response-db-security-group-message, :http.request.spec/error-spec {"DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-security-groups :args (clojure.spec.alpha/? :portkey.aws.rds.-2014-10-31/describe-db-security-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/db-security-group-message))

(clojure.core/defn delete-global-cluster ([delete-global-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-global-cluster-message delete-global-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/delete-global-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/delete-global-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteGlobalClusterResult", :http.request.configuration/action "DeleteGlobalCluster", :http.request.configuration/output-deser-fn response-delete-global-cluster-result, :http.request.spec/error-spec {"GlobalClusterNotFoundFault" :portkey.aws.rds.-2014-10-31/global-cluster-not-found-fault, "InvalidGlobalClusterStateFault" :portkey.aws.rds.-2014-10-31/invalid-global-cluster-state-fault}})))))
(clojure.spec.alpha/fdef delete-global-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/delete-global-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/delete-global-cluster-result))

(clojure.core/defn create-db-instance-read-replica ([create-db-instance-read-replica-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-db-instance-read-replica-message create-db-instance-read-replica-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2014-10-31/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2014-10-31/create-db-instance-read-replica-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2014-10-31/create-db-instance-read-replica-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBInstanceReadReplicaResult", :http.request.configuration/action "CreateDBInstanceReadReplica", :http.request.configuration/output-deser-fn response-create-db-instance-read-replica-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2014-10-31/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2014-10-31/invalid-db-instance-state-fault, "InstanceQuotaExceededFault" :portkey.aws.rds.-2014-10-31/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2014-10-31/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds.-2014-10-31/db-instance-already-exists-fault, "InvalidDBSubnetGroupFault" :portkey.aws.rds.-2014-10-31/invalid-db-subnet-group-fault, "StorageTypeNotSupportedFault" :portkey.aws.rds.-2014-10-31/storage-type-not-supported-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds.-2014-10-31/db-subnet-group-does-not-cover-enough-a-zs, "InvalidSubnet" :portkey.aws.rds.-2014-10-31/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds.-2014-10-31/provisioned-iops-not-available-in-az-fault, "DBSubnetGroupNotAllowedFault" :portkey.aws.rds.-2014-10-31/db-subnet-group-not-allowed-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-parameter-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds.-2014-10-31/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2014-10-31/storage-quota-exceeded-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds.-2014-10-31/insufficient-db-instance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2014-10-31/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef create-db-instance-read-replica :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2014-10-31/create-db-instance-read-replica-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2014-10-31/create-db-instance-read-replica-result))
