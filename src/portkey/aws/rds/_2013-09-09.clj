(ns portkey.aws.rds.-2013-09-09 (:require [portkey.aws]))

(def
 endpoints
 '{"us-gov-east-1"
   {:credential-scope {:service "rds", :region "us-gov-east-1"},
    :ssl-common-name "rds.us-gov-east-1.amazonaws.com",
    :endpoint "https://rds.us-gov-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-northeast-1"
   {:credential-scope {:service "rds", :region "ap-northeast-1"},
    :ssl-common-name "rds.ap-northeast-1.amazonaws.com",
    :endpoint "https://rds.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "rds", :region "eu-west-1"},
    :ssl-common-name "rds.eu-west-1.amazonaws.com",
    :endpoint "https://rds.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "rds", :region "us-east-2"},
    :ssl-common-name "rds.us-east-2.amazonaws.com",
    :endpoint "https://rds.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope {:service "rds", :region "ap-southeast-2"},
    :ssl-common-name "rds.ap-southeast-2.amazonaws.com",
    :endpoint "https://rds.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "cn-north-1"
   {:credential-scope {:service "rds", :region "cn-north-1"},
    :ssl-common-name "rds.cn-north-1.amazonaws.com.cn",
    :endpoint "https://rds.cn-north-1.amazonaws.com.cn",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "rds", :region "sa-east-1"},
    :ssl-common-name "rds.sa-east-1.amazonaws.com",
    :endpoint "https://rds.sa-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope {:service "rds", :region "ap-southeast-1"},
    :ssl-common-name "rds.ap-southeast-1.amazonaws.com",
    :endpoint "https://rds.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "cn-northwest-1"
   {:credential-scope {:service "rds", :region "cn-northwest-1"},
    :ssl-common-name "rds.cn-northwest-1.amazonaws.com.cn",
    :endpoint "https://rds.cn-northwest-1.amazonaws.com.cn",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope {:service "rds", :region "ap-northeast-2"},
    :ssl-common-name "rds.ap-northeast-2.amazonaws.com",
    :endpoint "https://rds.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-west-3"
   {:credential-scope {:service "rds", :region "eu-west-3"},
    :ssl-common-name "rds.eu-west-3.amazonaws.com",
    :endpoint "https://rds.eu-west-3.amazonaws.com",
    :signature-version :v4},
   "ca-central-1"
   {:credential-scope {:service "rds", :region "ca-central-1"},
    :ssl-common-name "rds.ca-central-1.amazonaws.com",
    :endpoint "https://rds.ca-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "rds", :region "eu-central-1"},
    :ssl-common-name "rds.eu-central-1.amazonaws.com",
    :endpoint "https://rds.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "rds", :region "eu-west-2"},
    :ssl-common-name "rds.eu-west-2.amazonaws.com",
    :endpoint "https://rds.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-gov-west-1"
   {:credential-scope {:service "rds", :region "us-gov-west-1"},
    :ssl-common-name "rds.us-gov-west-1.amazonaws.com",
    :endpoint "https://rds.us-gov-west-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "rds", :region "us-west-2"},
    :ssl-common-name "rds.us-west-2.amazonaws.com",
    :endpoint "https://rds.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "rds", :region "us-east-1"},
    :ssl-common-name "rds.amazonaws.com",
    :endpoint "https://rds.us-east-1.amazonaws.com",
    :signature-version :v4},
   "us-west-1"
   {:credential-scope {:service "rds", :region "us-west-1"},
    :ssl-common-name "rds.us-west-1.amazonaws.com",
    :endpoint "https://rds.us-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-south-1"
   {:credential-scope {:service "rds", :region "ap-south-1"},
    :ssl-common-name "rds.ap-south-1.amazonaws.com",
    :endpoint "https://rds.ap-south-1.amazonaws.com",
    :signature-version :v4},
   "eu-north-1"
   {:credential-scope {:service "rds", :region "eu-north-1"},
    :ssl-common-name "rds.eu-north-1.amazonaws.com",
    :endpoint "https://rds.eu-north-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-subnet-identifier-list)

(clojure.core/declare ser-filter-value-list)

(clojure.core/declare ser-parameters-list)

(clojure.core/declare ser-filter)

(clojure.core/declare ser-source-ids-list)

(clojure.core/declare ser-key-list)

(clojure.core/declare ser-option-names-list)

(clojure.core/declare ser-source-type)

(clojure.core/declare ser-tag-list)

(clojure.core/declare ser-integer)

(clojure.core/declare ser-string)

(clojure.core/declare ser-parameter)

(clojure.core/declare ser-vpc-security-group-id-list)

(clojure.core/declare ser-t-stamp)

(clojure.core/declare ser-event-categories-list)

(clojure.core/declare ser-db-security-group-name-list)

(clojure.core/declare ser-apply-method)

(clojure.core/declare ser-long)

(clojure.core/declare ser-tag)

(clojure.core/declare ser-boolean-optional)

(clojure.core/declare ser-option-setting)

(clojure.core/declare ser-option-configuration-list)

(clojure.core/declare ser-option-configuration)

(clojure.core/declare ser-integer-optional)

(clojure.core/declare ser-option-settings-list)

(clojure.core/declare ser-filter-list)

(clojure.core/declare ser-boolean)

(clojure.core/defn- ser-subnet-identifier-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SubnetIdentifier"}))) input), :shape "SubnetIdentifierList", :type "list"})

(clojure.core/defn- ser-filter-value-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "Value"}))) input), :shape "FilterValueList", :type "list"})

(clojure.core/defn- ser-parameters-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-parameter coll) #:http.request.field{:shape "Parameter", :location-name "Parameter"}))) input), :shape "ParametersList", :type "list"})

(clojure.core/defn- ser-filter [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:name input)) #:http.request.field{:name "Name", :shape "String"}) (clojure.core/into (ser-filter-value-list (:values input)) #:http.request.field{:name "Values", :shape "FilterValueList"})], :shape "Filter", :type "structure"}))

(clojure.core/defn- ser-source-ids-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SourceId"}))) input), :shape "SourceIdsList", :type "list"})

(clojure.core/defn- ser-key-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "KeyList", :type "list"})

(clojure.core/defn- ser-option-names-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "OptionNamesList", :type "list"})

(clojure.core/defn- ser-source-type [input] #:http.request.field{:value (clojure.core/get {"db-instance" "db-instance", :dbinstance "db-instance", "db-parameter-group" "db-parameter-group", :dbparametergroup "db-parameter-group", "db-security-group" "db-security-group", :dbsecuritygroup "db-security-group", "db-snapshot" "db-snapshot", :dbsnapshot "db-snapshot"} input), :shape "SourceType"})

(clojure.core/defn- ser-tag-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-tag coll) #:http.request.field{:shape "Tag", :location-name "Tag"}))) input), :shape "TagList", :type "list"})

(clojure.core/defn- ser-integer [input] #:http.request.field{:value input, :shape "Integer"})

(clojure.core/defn- ser-string [input] #:http.request.field{:value input, :shape "String"})

(clojure.core/defn- ser-parameter [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Parameter", :type "structure"} (clojure.core/contains? input :data-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :data-type)) #:http.request.field{:name "DataType", :shape "String"})) (clojure.core/contains? input :parameter-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :parameter-name)) #:http.request.field{:name "ParameterName", :shape "String"})) (clojure.core/contains? input :source) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source)) #:http.request.field{:name "Source", :shape "String"})) (clojure.core/contains? input :minimum-engine-version) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :minimum-engine-version)) #:http.request.field{:name "MinimumEngineVersion", :shape "String"})) (clojure.core/contains? input :allowed-values) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :allowed-values)) #:http.request.field{:name "AllowedValues", :shape "String"})) (clojure.core/contains? input :apply-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :apply-type)) #:http.request.field{:name "ApplyType", :shape "String"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :apply-method) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-apply-method (input :apply-method)) #:http.request.field{:name "ApplyMethod", :shape "ApplyMethod"})) (clojure.core/contains? input :is-modifiable) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :is-modifiable)) #:http.request.field{:name "IsModifiable", :shape "Boolean"})) (clojure.core/contains? input :parameter-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :parameter-value)) #:http.request.field{:name "ParameterValue", :shape "String"}))))

(clojure.core/defn- ser-vpc-security-group-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "VpcSecurityGroupId"}))) input), :shape "VpcSecurityGroupIdList", :type "list"})

(clojure.core/defn- ser-t-stamp [input] #:http.request.field{:value input, :shape "TStamp"})

(clojure.core/defn- ser-event-categories-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "EventCategory"}))) input), :shape "EventCategoriesList", :type "list"})

(clojure.core/defn- ser-db-security-group-name-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "DBSecurityGroupName"}))) input), :shape "DBSecurityGroupNameList", :type "list"})

(clojure.core/defn- ser-apply-method [input] #:http.request.field{:value (clojure.core/get {"immediate" "immediate", :immediate "immediate", "pending-reboot" "pending-reboot", :pendingreboot "pending-reboot"} input), :shape "ApplyMethod"})

(clojure.core/defn- ser-long [input] #:http.request.field{:value input, :shape "Long"})

(clojure.core/defn- ser-tag [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Tag", :type "structure"} (clojure.core/contains? input :key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key)) #:http.request.field{:name "Key", :shape "String"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String"}))))

(clojure.core/defn- ser-boolean-optional [input] #:http.request.field{:value input, :shape "BooleanOptional"})

(clojure.core/defn- ser-option-setting [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "OptionSetting", :type "structure"} (clojure.core/contains? input :data-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :data-type)) #:http.request.field{:name "DataType", :shape "String"})) (clojure.core/contains? input :allowed-values) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :allowed-values)) #:http.request.field{:name "AllowedValues", :shape "String"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String"})) (clojure.core/contains? input :apply-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :apply-type)) #:http.request.field{:name "ApplyType", :shape "String"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :default-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :default-value)) #:http.request.field{:name "DefaultValue", :shape "String"})) (clojure.core/contains? input :is-modifiable) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :is-modifiable)) #:http.request.field{:name "IsModifiable", :shape "Boolean"})) (clojure.core/contains? input :is-collection) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :is-collection)) #:http.request.field{:name "IsCollection", :shape "Boolean"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"}))))

(clojure.core/defn- ser-option-configuration-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-option-configuration coll) #:http.request.field{:shape "OptionConfiguration", :location-name "OptionConfiguration"}))) input), :shape "OptionConfigurationList", :type "list"})

(clojure.core/defn- ser-option-configuration [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:option-name input)) #:http.request.field{:name "OptionName", :shape "String"})], :shape "OptionConfiguration", :type "structure"} (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :db-security-group-memberships) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-db-security-group-name-list (input :db-security-group-memberships)) #:http.request.field{:name "DBSecurityGroupMemberships", :shape "DBSecurityGroupNameList"})) (clojure.core/contains? input :vpc-security-group-memberships) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-memberships)) #:http.request.field{:name "VpcSecurityGroupMemberships", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :option-settings) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-option-settings-list (input :option-settings)) #:http.request.field{:name "OptionSettings", :shape "OptionSettingsList"}))))

(clojure.core/defn- ser-integer-optional [input] #:http.request.field{:value input, :shape "IntegerOptional"})

(clojure.core/defn- ser-option-settings-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-option-setting coll) #:http.request.field{:shape "OptionSetting", :location-name "OptionSetting"}))) input), :shape "OptionSettingsList", :type "list"})

(clojure.core/defn- ser-filter-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-filter coll) #:http.request.field{:shape "Filter", :location-name "Filter"}))) input), :shape "FilterList", :type "list"})

(clojure.core/defn- ser-boolean [input] #:http.request.field{:value input, :shape "Boolean"})

(clojure.core/defn- req-describe-db-instances-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-delete-db-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"})]}))

(clojure.core/defn- req-describe-db-snapshots-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})) (clojure.core/contains? input :db-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"})) (clojure.core/contains? input :snapshot-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-type)) #:http.request.field{:name "SnapshotType", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-delete-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})]}))

(clojure.core/defn- req-describe-engine-default-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"})]} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-db-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-engine-versions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :db-parameter-group-family) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :default-only) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :default-only)) #:http.request.field{:name "DefaultOnly", :shape "Boolean"})) (clojure.core/contains? input :list-supported-character-sets) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :list-supported-character-sets)) #:http.request.field{:name "ListSupportedCharacterSets", :shape "BooleanOptional"}))))

(clojure.core/defn- req-describe-event-subscriptions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :subscription-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-db-subnet-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-restore-db-instance-from-db-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"})]} (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :db-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-name)) #:http.request.field{:name "DBName", :shape "String"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"}))))

(clojure.core/defn- req-modify-db-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"}) (clojure.core/into (ser-subnet-identifier-list (input :subnet-ids)) #:http.request.field{:name "SubnetIds", :shape "SubnetIdentifierList"})]} (clojure.core/contains? input :db-subnet-group-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-description)) #:http.request.field{:name "DBSubnetGroupDescription", :shape "String"}))))

(clojure.core/defn- req-delete-db-security-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-security-group-name)) #:http.request.field{:name "DBSecurityGroupName", :shape "String"})]}))

(clojure.core/defn- req-create-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-integer-optional (input :allocated-storage)) #:http.request.field{:name "AllocatedStorage", :shape "IntegerOptional"}) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"}) (clojure.core/into (ser-string (input :master-username)) #:http.request.field{:name "MasterUsername", :shape "String"}) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})]} (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :db-security-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-db-security-group-name-list (input :db-security-groups)) #:http.request.field{:name "DBSecurityGroups", :shape "DBSecurityGroupNameList"})) (clojure.core/contains? input :character-set-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :character-set-name)) #:http.request.field{:name "CharacterSetName", :shape "String"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :db-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-name)) #:http.request.field{:name "DBName", :shape "String"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-promote-read-replica-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-create-option-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"}) (clojure.core/into (ser-string (input :engine-name)) #:http.request.field{:name "EngineName", :shape "String"}) (clojure.core/into (ser-string (input :major-engine-version)) #:http.request.field{:name "MajorEngineVersion", :shape "String"}) (clojure.core/into (ser-string (input :option-group-description)) #:http.request.field{:name "OptionGroupDescription", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-delete-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :skip-final-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :skip-final-snapshot)) #:http.request.field{:name "SkipFinalSnapshot", :shape "Boolean"})) (clojure.core/contains? input :final-db-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :final-db-snapshot-identifier)) #:http.request.field{:name "FinalDBSnapshotIdentifier", :shape "String"}))))

(clojure.core/defn- req-describe-events-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :end-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :end-time)) #:http.request.field{:name "EndTime", :shape "TStamp"})) (clojure.core/contains? input :start-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :start-time)) #:http.request.field{:name "StartTime", :shape "TStamp"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-source-type (input :source-type)) #:http.request.field{:name "SourceType", :shape "SourceType"})) (clojure.core/contains? input :duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :duration)) #:http.request.field{:name "Duration", :shape "IntegerOptional"})) (clojure.core/contains? input :event-categories) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-event-categories-list (input :event-categories)) #:http.request.field{:name "EventCategories", :shape "EventCategoriesList"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :source-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-identifier)) #:http.request.field{:name "SourceIdentifier", :shape "String"}))))

(clojure.core/defn- req-authorize-db-security-group-ingress-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-security-group-name)) #:http.request.field{:name "DBSecurityGroupName", :shape "String"})]} (clojure.core/contains? input :cidrip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidrip)) #:http.request.field{:name "CIDRIP", :shape "String"})) (clojure.core/contains? input :ec-2-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-security-group-name)) #:http.request.field{:name "EC2SecurityGroupName", :shape "String"})) (clojure.core/contains? input :ec-2-security-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-security-group-id)) #:http.request.field{:name "EC2SecurityGroupId", :shape "String"})) (clojure.core/contains? input :ec-2-security-group-owner-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-security-group-owner-id)) #:http.request.field{:name "EC2SecurityGroupOwnerId", :shape "String"}))))

(clojure.core/defn- req-reset-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})]} (clojure.core/contains? input :reset-all-parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :reset-all-parameters)) #:http.request.field{:name "ResetAllParameters", :shape "Boolean"})) (clojure.core/contains? input :parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-parameters-list (input :parameters)) #:http.request.field{:name "Parameters", :shape "ParametersList"}))))

(clojure.core/defn- req-describe-orderable-db-instance-options-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})]} (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :vpc) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :vpc)) #:http.request.field{:name "Vpc", :shape "BooleanOptional"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-db-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"}) (clojure.core/into (ser-string (input :db-subnet-group-description)) #:http.request.field{:name "DBSubnetGroupDescription", :shape "String"}) (clojure.core/into (ser-subnet-identifier-list (input :subnet-ids)) #:http.request.field{:name "SubnetIds", :shape "SubnetIdentifierList"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-delete-event-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"})]}))

(clojure.core/defn- req-copy-db-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-db-snapshot-identifier)) #:http.request.field{:name "SourceDBSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-snapshot-identifier)) #:http.request.field{:name "TargetDBSnapshotIdentifier", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-create-db-instance-read-replica-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :source-db-instance-identifier)) #:http.request.field{:name "SourceDBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"}))))

(clojure.core/defn- req-add-source-identifier-to-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"}) (clojure.core/into (ser-string (input :source-identifier)) #:http.request.field{:name "SourceIdentifier", :shape "String"})]}))

(clojure.core/defn- req-add-tags-to-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"}) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})]}))

(clojure.core/defn- req-create-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"}) (clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"}) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-restore-db-instance-to-point-in-time-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-db-instance-identifier)) #:http.request.field{:name "SourceDBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-instance-identifier)) #:http.request.field{:name "TargetDBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :db-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-name)) #:http.request.field{:name "DBName", :shape "String"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :restore-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :restore-time)) #:http.request.field{:name "RestoreTime", :shape "TStamp"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"})) (clojure.core/contains? input :use-latest-restorable-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :use-latest-restorable-time)) #:http.request.field{:name "UseLatestRestorableTime", :shape "Boolean"}))))

(clojure.core/defn- req-modify-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"}) (clojure.core/into (ser-parameters-list (input :parameters)) #:http.request.field{:name "Parameters", :shape "ParametersList"})]}))

(clojure.core/defn- req-reboot-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :force-failover) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :force-failover)) #:http.request.field{:name "ForceFailover", :shape "BooleanOptional"}))))

(clojure.core/defn- req-remove-source-identifier-from-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"}) (clojure.core/into (ser-string (input :source-identifier)) #:http.request.field{:name "SourceIdentifier", :shape "String"})]}))

(clojure.core/defn- req-remove-tags-from-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"}) (clojure.core/into (ser-key-list (input :tag-keys)) #:http.request.field{:name "TagKeys", :shape "KeyList"})]}))

(clojure.core/defn- req-purchase-reserved-db-instances-offering-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :reserved-db-instances-offering-id)) #:http.request.field{:name "ReservedDBInstancesOfferingId", :shape "String"})]} (clojure.core/contains? input :reserved-db-instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-db-instance-id)) #:http.request.field{:name "ReservedDBInstanceId", :shape "String"})) (clojure.core/contains? input :db-instance-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :db-instance-count)) #:http.request.field{:name "DBInstanceCount", :shape "IntegerOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-create-event-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"}) (clojure.core/into (ser-string (input :sns-topic-arn)) #:http.request.field{:name "SnsTopicArn", :shape "String"})]} (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-type)) #:http.request.field{:name "SourceType", :shape "String"})) (clojure.core/contains? input :event-categories) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-event-categories-list (input :event-categories)) #:http.request.field{:name "EventCategories", :shape "EventCategoriesList"})) (clojure.core/contains? input :source-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-source-ids-list (input :source-ids)) #:http.request.field{:name "SourceIds", :shape "SourceIdsList"})) (clojure.core/contains? input :enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enabled)) #:http.request.field{:name "Enabled", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-log-files-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :filename-contains) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :filename-contains)) #:http.request.field{:name "FilenameContains", :shape "String"})) (clojure.core/contains? input :file-last-written) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long (input :file-last-written)) #:http.request.field{:name "FileLastWritten", :shape "Long"})) (clojure.core/contains? input :file-size) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long (input :file-size)) #:http.request.field{:name "FileSize", :shape "Long"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-db-parameter-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-event-categories-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-type)) #:http.request.field{:name "SourceType", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"}))))

(clojure.core/defn- req-list-tags-for-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"})]} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"}))))

(clojure.core/defn- req-delete-db-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})]}))

(clojure.core/defn- req-download-db-log-file-portion-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :log-file-name)) #:http.request.field{:name "LogFileName", :shape "String"})]} (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :number-of-lines) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :number-of-lines)) #:http.request.field{:name "NumberOfLines", :shape "Integer"}))))

(clojure.core/defn- req-create-db-security-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-security-group-name)) #:http.request.field{:name "DBSecurityGroupName", :shape "String"}) (clojure.core/into (ser-string (input :db-security-group-description)) #:http.request.field{:name "DBSecurityGroupDescription", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-reserved-db-instances-offerings-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :reserved-db-instances-offering-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-db-instances-offering-id)) #:http.request.field{:name "ReservedDBInstancesOfferingId", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :duration)) #:http.request.field{:name "Duration", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :product-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :product-description)) #:http.request.field{:name "ProductDescription", :shape "String"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :offering-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :offering-type)) #:http.request.field{:name "OfferingType", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"}))))

(clojure.core/defn- req-describe-db-security-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-security-group-name)) #:http.request.field{:name "DBSecurityGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-delete-option-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})]}))

(clojure.core/defn- req-describe-db-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})]} (clojure.core/contains? input :source) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source)) #:http.request.field{:name "Source", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-reserved-db-instances-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :reserved-db-instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-db-instance-id)) #:http.request.field{:name "ReservedDBInstanceId", :shape "String"})) (clojure.core/contains? input :reserved-db-instances-offering-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-db-instances-offering-id)) #:http.request.field{:name "ReservedDBInstancesOfferingId", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :duration)) #:http.request.field{:name "Duration", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :product-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :product-description)) #:http.request.field{:name "ProductDescription", :shape "String"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :offering-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :offering-type)) #:http.request.field{:name "OfferingType", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"}))))

(clojure.core/defn- req-revoke-db-security-group-ingress-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-security-group-name)) #:http.request.field{:name "DBSecurityGroupName", :shape "String"})]} (clojure.core/contains? input :cidrip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidrip)) #:http.request.field{:name "CIDRIP", :shape "String"})) (clojure.core/contains? input :ec-2-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-security-group-name)) #:http.request.field{:name "EC2SecurityGroupName", :shape "String"})) (clojure.core/contains? input :ec-2-security-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-security-group-id)) #:http.request.field{:name "EC2SecurityGroupId", :shape "String"})) (clojure.core/contains? input :ec-2-security-group-owner-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-security-group-owner-id)) #:http.request.field{:name "EC2SecurityGroupOwnerId", :shape "String"}))))

(clojure.core/defn- req-modify-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :db-security-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-db-security-group-name-list (input :db-security-groups)) #:http.request.field{:name "DBSecurityGroups", :shape "DBSecurityGroupNameList"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :new-db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :new-db-instance-identifier)) #:http.request.field{:name "NewDBInstanceIdentifier", :shape "String"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :allow-major-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :allow-major-version-upgrade)) #:http.request.field{:name "AllowMajorVersionUpgrade", :shape "Boolean"})) (clojure.core/contains? input :allocated-storage) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :allocated-storage)) #:http.request.field{:name "AllocatedStorage", :shape "IntegerOptional"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :apply-immediately) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-modify-option-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})]} (clojure.core/contains? input :options-to-include) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-option-configuration-list (input :options-to-include)) #:http.request.field{:name "OptionsToInclude", :shape "OptionConfigurationList"})) (clojure.core/contains? input :options-to-remove) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-option-names-list (input :options-to-remove)) #:http.request.field{:name "OptionsToRemove", :shape "OptionNamesList"})) (clojure.core/contains? input :apply-immediately) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"}))))

(clojure.core/defn- req-describe-option-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :engine-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-name)) #:http.request.field{:name "EngineName", :shape "String"})) (clojure.core/contains? input :major-engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :major-engine-version)) #:http.request.field{:name "MajorEngineVersion", :shape "String"}))))

(clojure.core/defn- req-modify-event-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"})]} (clojure.core/contains? input :sns-topic-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :sns-topic-arn)) #:http.request.field{:name "SnsTopicArn", :shape "String"})) (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-type)) #:http.request.field{:name "SourceType", :shape "String"})) (clojure.core/contains? input :event-categories) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-event-categories-list (input :event-categories)) #:http.request.field{:name "EventCategories", :shape "EventCategoriesList"})) (clojure.core/contains? input :enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enabled)) #:http.request.field{:name "Enabled", :shape "BooleanOptional"}))))

(clojure.core/defn- req-describe-option-group-options-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :engine-name)) #:http.request.field{:name "EngineName", :shape "String"})]} (clojure.core/contains? input :major-engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :major-engine-version)) #:http.request.field{:name "MajorEngineVersion", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/declare deser-vpc-security-group-membership-list)

(clojure.core/declare deser-double)

(clojure.core/declare deser-parameters-list)

(clojure.core/declare deser-ec-2-security-group-list)

(clojure.core/declare deser-db-parameter-group-status)

(clojure.core/declare deser-db-security-groups)

(clojure.core/declare deser-source-ids-list)

(clojure.core/declare deser-options-list)

(clojure.core/declare deser-option)

(clojure.core/declare deser-option-group-options-list)

(clojure.core/declare deser-db-parameter-group-list)

(clojure.core/declare deser-db-parameter-group-status-list)

(clojure.core/declare deser-option-group-option-setting)

(clojure.core/declare deser-subnet)

(clojure.core/declare deser-db-engine-version-list)

(clojure.core/declare deser-event-subscription)

(clojure.core/declare deser-db-snapshot)

(clojure.core/declare deser-describe-db-log-files-details)

(clojure.core/declare deser-reserved-db-instance-list)

(clojure.core/declare deser-option-group)

(clojure.core/declare deser-option-groups-list)

(clojure.core/declare deser-ip-range-list)

(clojure.core/declare deser-db-instance-status-info)

(clojure.core/declare deser-event-list)

(clojure.core/declare deser-source-type)

(clojure.core/declare deser-orderable-db-instance-options-list)

(clojure.core/declare deser-event)

(clojure.core/declare deser-availability-zone-list)

(clojure.core/declare deser-availability-zone)

(clojure.core/declare deser-read-replica-db-instance-identifier-list)

(clojure.core/declare deser-recurring-charge)

(clojure.core/declare deser-option-group-option)

(clojure.core/declare deser-tag-list)

(clojure.core/declare deser-db-engine-version)

(clojure.core/declare deser-option-setting-configuration-list)

(clojure.core/declare deser-vpc-security-group-membership)

(clojure.core/declare deser-reserved-db-instances-offering)

(clojure.core/declare deser-ec-2-security-group)

(clojure.core/declare deser-option-group-membership-list)

(clojure.core/declare deser-event-categories-map-list)

(clojure.core/declare deser-integer)

(clojure.core/declare deser-string)

(clojure.core/declare deser-parameter)

(clojure.core/declare deser-describe-db-log-files-list)

(clojure.core/declare deser-db-security-group-membership)

(clojure.core/declare deser-db-instance)

(clojure.core/declare deser-t-stamp)

(clojure.core/declare deser-db-security-group-membership-list)

(clojure.core/declare deser-event-categories-map)

(clojure.core/declare deser-reserved-db-instances-offering-list)

(clojure.core/declare deser-recurring-charge-list)

(clojure.core/declare deser-event-categories-list)

(clojure.core/declare deser-apply-method)

(clojure.core/declare deser-endpoint)

(clojure.core/declare deser-db-parameter-group)

(clojure.core/declare deser-supported-character-sets-list)

(clojure.core/declare deser-long)

(clojure.core/declare deser-option-group-membership)

(clojure.core/declare deser-reserved-db-instance)

(clojure.core/declare deser-ip-range)

(clojure.core/declare deser-character-set)

(clojure.core/declare deser-option-group-option-settings-list)

(clojure.core/declare deser-tag)

(clojure.core/declare deser-boolean-optional)

(clojure.core/declare deser-options-depended-on)

(clojure.core/declare deser-option-setting)

(clojure.core/declare deser-db-instance-list)

(clojure.core/declare deser-event-subscriptions-list)

(clojure.core/declare deser-db-snapshot-list)

(clojure.core/declare deser-engine-defaults)

(clojure.core/declare deser-db-subnet-groups)

(clojure.core/declare deser-integer-optional)

(clojure.core/declare deser-db-security-group)

(clojure.core/declare deser-db-instance-status-info-list)

(clojure.core/declare deser-orderable-db-instance-option)

(clojure.core/declare deser-pending-modified-values)

(clojure.core/declare deser-subnet-list)

(clojure.core/declare deser-db-subnet-group)

(clojure.core/declare deser-boolean)

(clojure.core/defn- deser-vpc-security-group-membership-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpc-security-group-membership coll))) input))

(clojure.core/defn- deser-double [input] (java.lang.Double. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-parameters-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-parameter coll))) input))

(clojure.core/defn- deser-ec-2-security-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-ec-2-security-group coll))) input))

(clojure.core/defn- deser-db-parameter-group-status [input] (clojure.core/let [letvar477337 {"DBParameterGroupName" (portkey.aws/search-for-tag input "DBParameterGroupName" :flattened? nil :xmlAttribute? nil), "ParameterApplyStatus" (portkey.aws/search-for-tag input "ParameterApplyStatus" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar477337 "DBParameterGroupName") (clojure.core/assoc :db-parameter-group-name (deser-string (clojure.core/get-in letvar477337 ["DBParameterGroupName" :content]))) (letvar477337 "ParameterApplyStatus") (clojure.core/assoc :parameter-apply-status (deser-string (clojure.core/get-in letvar477337 ["ParameterApplyStatus" :content]))))))

(clojure.core/defn- deser-db-security-groups [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-security-group coll))) input))

(clojure.core/defn- deser-source-ids-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-options-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-option coll))) input))

(clojure.core/defn- deser-option [input] (clojure.core/let [letvar477496 {"OptionName" (portkey.aws/search-for-tag input "OptionName" :flattened? nil :xmlAttribute? nil), "OptionDescription" (portkey.aws/search-for-tag input "OptionDescription" :flattened? nil :xmlAttribute? nil), "Persistent" (portkey.aws/search-for-tag input "Persistent" :flattened? nil :xmlAttribute? nil), "Permanent" (portkey.aws/search-for-tag input "Permanent" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "OptionSettings" (portkey.aws/search-for-tag input "OptionSettings" :flattened? nil :xmlAttribute? nil), "DBSecurityGroupMemberships" (portkey.aws/search-for-tag input "DBSecurityGroupMemberships" :flattened? nil :xmlAttribute? nil), "VpcSecurityGroupMemberships" (portkey.aws/search-for-tag input "VpcSecurityGroupMemberships" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar477496 "OptionName") (clojure.core/assoc :option-name (deser-string (clojure.core/get-in letvar477496 ["OptionName" :content]))) (letvar477496 "OptionDescription") (clojure.core/assoc :option-description (deser-string (clojure.core/get-in letvar477496 ["OptionDescription" :content]))) (letvar477496 "Persistent") (clojure.core/assoc :persistent (deser-boolean (clojure.core/get-in letvar477496 ["Persistent" :content]))) (letvar477496 "Permanent") (clojure.core/assoc :permanent (deser-boolean (clojure.core/get-in letvar477496 ["Permanent" :content]))) (letvar477496 "Port") (clojure.core/assoc :port (deser-integer-optional (clojure.core/get-in letvar477496 ["Port" :content]))) (letvar477496 "OptionSettings") (clojure.core/assoc :option-settings (deser-option-setting-configuration-list (clojure.core/get-in letvar477496 ["OptionSettings" :content]))) (letvar477496 "DBSecurityGroupMemberships") (clojure.core/assoc :db-security-group-memberships (deser-db-security-group-membership-list (clojure.core/get-in letvar477496 ["DBSecurityGroupMemberships" :content]))) (letvar477496 "VpcSecurityGroupMemberships") (clojure.core/assoc :vpc-security-group-memberships (deser-vpc-security-group-membership-list (clojure.core/get-in letvar477496 ["VpcSecurityGroupMemberships" :content]))))))

(clojure.core/defn- deser-option-group-options-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-option-group-option coll))) input))

(clojure.core/defn- deser-db-parameter-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-parameter-group coll))) input))

(clojure.core/defn- deser-db-parameter-group-status-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-parameter-group-status coll))) input))

(clojure.core/defn- deser-option-group-option-setting [input] (clojure.core/let [letvar477655 {"SettingName" (portkey.aws/search-for-tag input "SettingName" :flattened? nil :xmlAttribute? nil), "SettingDescription" (portkey.aws/search-for-tag input "SettingDescription" :flattened? nil :xmlAttribute? nil), "DefaultValue" (portkey.aws/search-for-tag input "DefaultValue" :flattened? nil :xmlAttribute? nil), "ApplyType" (portkey.aws/search-for-tag input "ApplyType" :flattened? nil :xmlAttribute? nil), "AllowedValues" (portkey.aws/search-for-tag input "AllowedValues" :flattened? nil :xmlAttribute? nil), "IsModifiable" (portkey.aws/search-for-tag input "IsModifiable" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar477655 "SettingName") (clojure.core/assoc :setting-name (deser-string (clojure.core/get-in letvar477655 ["SettingName" :content]))) (letvar477655 "SettingDescription") (clojure.core/assoc :setting-description (deser-string (clojure.core/get-in letvar477655 ["SettingDescription" :content]))) (letvar477655 "DefaultValue") (clojure.core/assoc :default-value (deser-string (clojure.core/get-in letvar477655 ["DefaultValue" :content]))) (letvar477655 "ApplyType") (clojure.core/assoc :apply-type (deser-string (clojure.core/get-in letvar477655 ["ApplyType" :content]))) (letvar477655 "AllowedValues") (clojure.core/assoc :allowed-values (deser-string (clojure.core/get-in letvar477655 ["AllowedValues" :content]))) (letvar477655 "IsModifiable") (clojure.core/assoc :is-modifiable (deser-boolean (clojure.core/get-in letvar477655 ["IsModifiable" :content]))))))

(clojure.core/defn- deser-subnet [input] (clojure.core/let [letvar477763 {"SubnetIdentifier" (portkey.aws/search-for-tag input "SubnetIdentifier" :flattened? nil :xmlAttribute? nil), "SubnetAvailabilityZone" (portkey.aws/search-for-tag input "SubnetAvailabilityZone" :flattened? nil :xmlAttribute? nil), "SubnetStatus" (portkey.aws/search-for-tag input "SubnetStatus" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar477763 "SubnetIdentifier") (clojure.core/assoc :subnet-identifier (deser-string (clojure.core/get-in letvar477763 ["SubnetIdentifier" :content]))) (letvar477763 "SubnetAvailabilityZone") (clojure.core/assoc :subnet-availability-zone (deser-availability-zone (clojure.core/get-in letvar477763 ["SubnetAvailabilityZone" :content]))) (letvar477763 "SubnetStatus") (clojure.core/assoc :subnet-status (deser-string (clojure.core/get-in letvar477763 ["SubnetStatus" :content]))))))

(clojure.core/defn- deser-db-engine-version-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-engine-version coll))) input))

(clojure.core/defn- deser-event-subscription [input] (clojure.core/let [letvar477888 {"SourceIdsList" (portkey.aws/search-for-tag input "SourceIdsList" :flattened? nil :xmlAttribute? nil), "CustomerAwsId" (portkey.aws/search-for-tag input "CustomerAwsId" :flattened? nil :xmlAttribute? nil), "SourceType" (portkey.aws/search-for-tag input "SourceType" :flattened? nil :xmlAttribute? nil), "Enabled" (portkey.aws/search-for-tag input "Enabled" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "SnsTopicArn" (portkey.aws/search-for-tag input "SnsTopicArn" :flattened? nil :xmlAttribute? nil), "EventCategoriesList" (portkey.aws/search-for-tag input "EventCategoriesList" :flattened? nil :xmlAttribute? nil), "CustSubscriptionId" (portkey.aws/search-for-tag input "CustSubscriptionId" :flattened? nil :xmlAttribute? nil), "SubscriptionCreationTime" (portkey.aws/search-for-tag input "SubscriptionCreationTime" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar477888 "SourceIdsList") (clojure.core/assoc :source-ids-list (deser-source-ids-list (clojure.core/get-in letvar477888 ["SourceIdsList" :content]))) (letvar477888 "CustomerAwsId") (clojure.core/assoc :customer-aws-id (deser-string (clojure.core/get-in letvar477888 ["CustomerAwsId" :content]))) (letvar477888 "SourceType") (clojure.core/assoc :source-type (deser-string (clojure.core/get-in letvar477888 ["SourceType" :content]))) (letvar477888 "Enabled") (clojure.core/assoc :enabled (deser-boolean (clojure.core/get-in letvar477888 ["Enabled" :content]))) (letvar477888 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar477888 ["Status" :content]))) (letvar477888 "SnsTopicArn") (clojure.core/assoc :sns-topic-arn (deser-string (clojure.core/get-in letvar477888 ["SnsTopicArn" :content]))) (letvar477888 "EventCategoriesList") (clojure.core/assoc :event-categories-list (deser-event-categories-list (clojure.core/get-in letvar477888 ["EventCategoriesList" :content]))) (letvar477888 "CustSubscriptionId") (clojure.core/assoc :cust-subscription-id (deser-string (clojure.core/get-in letvar477888 ["CustSubscriptionId" :content]))) (letvar477888 "SubscriptionCreationTime") (clojure.core/assoc :subscription-creation-time (deser-string (clojure.core/get-in letvar477888 ["SubscriptionCreationTime" :content]))))))

(clojure.core/defn- deser-db-snapshot [input] (clojure.core/let [letvar477996 {"SnapshotCreateTime" (portkey.aws/search-for-tag input "SnapshotCreateTime" :flattened? nil :xmlAttribute? nil), "OptionGroupName" (portkey.aws/search-for-tag input "OptionGroupName" :flattened? nil :xmlAttribute? nil), "SourceRegion" (portkey.aws/search-for-tag input "SourceRegion" :flattened? nil :xmlAttribute? nil), "DBInstanceIdentifier" (portkey.aws/search-for-tag input "DBInstanceIdentifier" :flattened? nil :xmlAttribute? nil), "InstanceCreateTime" (portkey.aws/search-for-tag input "InstanceCreateTime" :flattened? nil :xmlAttribute? nil), "AvailabilityZone" (portkey.aws/search-for-tag input "AvailabilityZone" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "SnapshotType" (portkey.aws/search-for-tag input "SnapshotType" :flattened? nil :xmlAttribute? nil), "LicenseModel" (portkey.aws/search-for-tag input "LicenseModel" :flattened? nil :xmlAttribute? nil), "AllocatedStorage" (portkey.aws/search-for-tag input "AllocatedStorage" :flattened? nil :xmlAttribute? nil), "MasterUsername" (portkey.aws/search-for-tag input "MasterUsername" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "DBSnapshotIdentifier" (portkey.aws/search-for-tag input "DBSnapshotIdentifier" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "VpcId" (portkey.aws/search-for-tag input "VpcId" :flattened? nil :xmlAttribute? nil), "Iops" (portkey.aws/search-for-tag input "Iops" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "PercentProgress" (portkey.aws/search-for-tag input "PercentProgress" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar477996 "SnapshotCreateTime") (clojure.core/assoc :snapshot-create-time (deser-t-stamp (clojure.core/get-in letvar477996 ["SnapshotCreateTime" :content]))) (letvar477996 "OptionGroupName") (clojure.core/assoc :option-group-name (deser-string (clojure.core/get-in letvar477996 ["OptionGroupName" :content]))) (letvar477996 "SourceRegion") (clojure.core/assoc :source-region (deser-string (clojure.core/get-in letvar477996 ["SourceRegion" :content]))) (letvar477996 "DBInstanceIdentifier") (clojure.core/assoc :db-instance-identifier (deser-string (clojure.core/get-in letvar477996 ["DBInstanceIdentifier" :content]))) (letvar477996 "InstanceCreateTime") (clojure.core/assoc :instance-create-time (deser-t-stamp (clojure.core/get-in letvar477996 ["InstanceCreateTime" :content]))) (letvar477996 "AvailabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar477996 ["AvailabilityZone" :content]))) (letvar477996 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar477996 ["Status" :content]))) (letvar477996 "SnapshotType") (clojure.core/assoc :snapshot-type (deser-string (clojure.core/get-in letvar477996 ["SnapshotType" :content]))) (letvar477996 "LicenseModel") (clojure.core/assoc :license-model (deser-string (clojure.core/get-in letvar477996 ["LicenseModel" :content]))) (letvar477996 "AllocatedStorage") (clojure.core/assoc :allocated-storage (deser-integer (clojure.core/get-in letvar477996 ["AllocatedStorage" :content]))) (letvar477996 "MasterUsername") (clojure.core/assoc :master-username (deser-string (clojure.core/get-in letvar477996 ["MasterUsername" :content]))) (letvar477996 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar477996 ["EngineVersion" :content]))) (letvar477996 "DBSnapshotIdentifier") (clojure.core/assoc :db-snapshot-identifier (deser-string (clojure.core/get-in letvar477996 ["DBSnapshotIdentifier" :content]))) (letvar477996 "Port") (clojure.core/assoc :port (deser-integer (clojure.core/get-in letvar477996 ["Port" :content]))) (letvar477996 "VpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar477996 ["VpcId" :content]))) (letvar477996 "Iops") (clojure.core/assoc :iops (deser-integer-optional (clojure.core/get-in letvar477996 ["Iops" :content]))) (letvar477996 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar477996 ["Engine" :content]))) (letvar477996 "PercentProgress") (clojure.core/assoc :percent-progress (deser-integer (clojure.core/get-in letvar477996 ["PercentProgress" :content]))))))

(clojure.core/defn- deser-describe-db-log-files-details [input] (clojure.core/let [letvar478104 {"LogFileName" (portkey.aws/search-for-tag input "LogFileName" :flattened? nil :xmlAttribute? nil), "LastWritten" (portkey.aws/search-for-tag input "LastWritten" :flattened? nil :xmlAttribute? nil), "Size" (portkey.aws/search-for-tag input "Size" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar478104 "LogFileName") (clojure.core/assoc :log-file-name (deser-string (clojure.core/get-in letvar478104 ["LogFileName" :content]))) (letvar478104 "LastWritten") (clojure.core/assoc :last-written (deser-long (clojure.core/get-in letvar478104 ["LastWritten" :content]))) (letvar478104 "Size") (clojure.core/assoc :size (deser-long (clojure.core/get-in letvar478104 ["Size" :content]))))))

(clojure.core/defn- deser-reserved-db-instance-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-db-instance coll))) input))

(clojure.core/defn- deser-option-group [input] (clojure.core/let [letvar478229 {"OptionGroupName" (portkey.aws/search-for-tag input "OptionGroupName" :flattened? nil :xmlAttribute? nil), "OptionGroupDescription" (portkey.aws/search-for-tag input "OptionGroupDescription" :flattened? nil :xmlAttribute? nil), "EngineName" (portkey.aws/search-for-tag input "EngineName" :flattened? nil :xmlAttribute? nil), "MajorEngineVersion" (portkey.aws/search-for-tag input "MajorEngineVersion" :flattened? nil :xmlAttribute? nil), "Options" (portkey.aws/search-for-tag input "Options" :flattened? nil :xmlAttribute? nil), "AllowsVpcAndNonVpcInstanceMemberships" (portkey.aws/search-for-tag input "AllowsVpcAndNonVpcInstanceMemberships" :flattened? nil :xmlAttribute? nil), "VpcId" (portkey.aws/search-for-tag input "VpcId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar478229 "OptionGroupName") (clojure.core/assoc :option-group-name (deser-string (clojure.core/get-in letvar478229 ["OptionGroupName" :content]))) (letvar478229 "OptionGroupDescription") (clojure.core/assoc :option-group-description (deser-string (clojure.core/get-in letvar478229 ["OptionGroupDescription" :content]))) (letvar478229 "EngineName") (clojure.core/assoc :engine-name (deser-string (clojure.core/get-in letvar478229 ["EngineName" :content]))) (letvar478229 "MajorEngineVersion") (clojure.core/assoc :major-engine-version (deser-string (clojure.core/get-in letvar478229 ["MajorEngineVersion" :content]))) (letvar478229 "Options") (clojure.core/assoc :options (deser-options-list (clojure.core/get-in letvar478229 ["Options" :content]))) (letvar478229 "AllowsVpcAndNonVpcInstanceMemberships") (clojure.core/assoc :allows-vpc-and-non-vpc-instance-memberships (deser-boolean (clojure.core/get-in letvar478229 ["AllowsVpcAndNonVpcInstanceMemberships" :content]))) (letvar478229 "VpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar478229 ["VpcId" :content]))))))

(clojure.core/defn- deser-option-groups-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-option-group coll))) input))

(clojure.core/defn- deser-ip-range-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-ip-range coll))) input))

(clojure.core/defn- deser-db-instance-status-info [input] (clojure.core/let [letvar478371 {"StatusType" (portkey.aws/search-for-tag input "StatusType" :flattened? nil :xmlAttribute? nil), "Normal" (portkey.aws/search-for-tag input "Normal" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "Message" (portkey.aws/search-for-tag input "Message" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar478371 "StatusType") (clojure.core/assoc :status-type (deser-string (clojure.core/get-in letvar478371 ["StatusType" :content]))) (letvar478371 "Normal") (clojure.core/assoc :normal (deser-boolean (clojure.core/get-in letvar478371 ["Normal" :content]))) (letvar478371 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar478371 ["Status" :content]))) (letvar478371 "Message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar478371 ["Message" :content]))))))

(clojure.core/defn- deser-event-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-event coll))) input))

(clojure.core/defn- deser-source-type [input] (clojure.core/get {"db-instance" :dbinstance, "db-parameter-group" :dbparametergroup, "db-security-group" :dbsecuritygroup, "db-snapshot" :dbsnapshot} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-orderable-db-instance-options-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-orderable-db-instance-option coll))) input))

(clojure.core/defn- deser-event [input] (clojure.core/let [letvar478518 {"SourceIdentifier" (portkey.aws/search-for-tag input "SourceIdentifier" :flattened? nil :xmlAttribute? nil), "SourceType" (portkey.aws/search-for-tag input "SourceType" :flattened? nil :xmlAttribute? nil), "Message" (portkey.aws/search-for-tag input "Message" :flattened? nil :xmlAttribute? nil), "EventCategories" (portkey.aws/search-for-tag input "EventCategories" :flattened? nil :xmlAttribute? nil), "Date" (portkey.aws/search-for-tag input "Date" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar478518 "SourceIdentifier") (clojure.core/assoc :source-identifier (deser-string (clojure.core/get-in letvar478518 ["SourceIdentifier" :content]))) (letvar478518 "SourceType") (clojure.core/assoc :source-type (deser-source-type (clojure.core/get-in letvar478518 ["SourceType" :content]))) (letvar478518 "Message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar478518 ["Message" :content]))) (letvar478518 "EventCategories") (clojure.core/assoc :event-categories (deser-event-categories-list (clojure.core/get-in letvar478518 ["EventCategories" :content]))) (letvar478518 "Date") (clojure.core/assoc :date (deser-t-stamp (clojure.core/get-in letvar478518 ["Date" :content]))))))

(clojure.core/defn- deser-availability-zone-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-availability-zone coll))) input))

(clojure.core/defn- deser-availability-zone [input] (clojure.core/let [letvar478643 {"Name" (portkey.aws/search-for-tag input "Name" :flattened? nil :xmlAttribute? nil), "ProvisionedIopsCapable" (portkey.aws/search-for-tag input "ProvisionedIopsCapable" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar478643 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar478643 ["Name" :content]))) (letvar478643 "ProvisionedIopsCapable") (clojure.core/assoc :provisioned-iops-capable (deser-boolean (clojure.core/get-in letvar478643 ["ProvisionedIopsCapable" :content]))))))

(clojure.core/defn- deser-read-replica-db-instance-identifier-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-recurring-charge [input] (clojure.core/let [letvar478768 {"RecurringChargeAmount" (portkey.aws/search-for-tag input "RecurringChargeAmount" :flattened? nil :xmlAttribute? nil), "RecurringChargeFrequency" (portkey.aws/search-for-tag input "RecurringChargeFrequency" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar478768 "RecurringChargeAmount") (clojure.core/assoc :recurring-charge-amount (deser-double (clojure.core/get-in letvar478768 ["RecurringChargeAmount" :content]))) (letvar478768 "RecurringChargeFrequency") (clojure.core/assoc :recurring-charge-frequency (deser-string (clojure.core/get-in letvar478768 ["RecurringChargeFrequency" :content]))))))

(clojure.core/defn- deser-option-group-option [input] (clojure.core/let [letvar478876 {"MajorEngineVersion" (portkey.aws/search-for-tag input "MajorEngineVersion" :flattened? nil :xmlAttribute? nil), "EngineName" (portkey.aws/search-for-tag input "EngineName" :flattened? nil :xmlAttribute? nil), "Permanent" (portkey.aws/search-for-tag input "Permanent" :flattened? nil :xmlAttribute? nil), "PortRequired" (portkey.aws/search-for-tag input "PortRequired" :flattened? nil :xmlAttribute? nil), "OptionGroupOptionSettings" (portkey.aws/search-for-tag input "OptionGroupOptionSettings" :flattened? nil :xmlAttribute? nil), "Persistent" (portkey.aws/search-for-tag input "Persistent" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "MinimumRequiredMinorEngineVersion" (portkey.aws/search-for-tag input "MinimumRequiredMinorEngineVersion" :flattened? nil :xmlAttribute? nil), "DefaultPort" (portkey.aws/search-for-tag input "DefaultPort" :flattened? nil :xmlAttribute? nil), "OptionsDependedOn" (portkey.aws/search-for-tag input "OptionsDependedOn" :flattened? nil :xmlAttribute? nil), "Name" (portkey.aws/search-for-tag input "Name" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar478876 "MajorEngineVersion") (clojure.core/assoc :major-engine-version (deser-string (clojure.core/get-in letvar478876 ["MajorEngineVersion" :content]))) (letvar478876 "EngineName") (clojure.core/assoc :engine-name (deser-string (clojure.core/get-in letvar478876 ["EngineName" :content]))) (letvar478876 "Permanent") (clojure.core/assoc :permanent (deser-boolean (clojure.core/get-in letvar478876 ["Permanent" :content]))) (letvar478876 "PortRequired") (clojure.core/assoc :port-required (deser-boolean (clojure.core/get-in letvar478876 ["PortRequired" :content]))) (letvar478876 "OptionGroupOptionSettings") (clojure.core/assoc :option-group-option-settings (deser-option-group-option-settings-list (clojure.core/get-in letvar478876 ["OptionGroupOptionSettings" :content]))) (letvar478876 "Persistent") (clojure.core/assoc :persistent (deser-boolean (clojure.core/get-in letvar478876 ["Persistent" :content]))) (letvar478876 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar478876 ["Description" :content]))) (letvar478876 "MinimumRequiredMinorEngineVersion") (clojure.core/assoc :minimum-required-minor-engine-version (deser-string (clojure.core/get-in letvar478876 ["MinimumRequiredMinorEngineVersion" :content]))) (letvar478876 "DefaultPort") (clojure.core/assoc :default-port (deser-integer-optional (clojure.core/get-in letvar478876 ["DefaultPort" :content]))) (letvar478876 "OptionsDependedOn") (clojure.core/assoc :options-depended-on (deser-options-depended-on (clojure.core/get-in letvar478876 ["OptionsDependedOn" :content]))) (letvar478876 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar478876 ["Name" :content]))))))

(clojure.core/defn- deser-tag-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-tag coll))) input))

(clojure.core/defn- deser-db-engine-version [input] (clojure.core/let [letvar479001 {"Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "DBParameterGroupFamily" (portkey.aws/search-for-tag input "DBParameterGroupFamily" :flattened? nil :xmlAttribute? nil), "DBEngineDescription" (portkey.aws/search-for-tag input "DBEngineDescription" :flattened? nil :xmlAttribute? nil), "DBEngineVersionDescription" (portkey.aws/search-for-tag input "DBEngineVersionDescription" :flattened? nil :xmlAttribute? nil), "DefaultCharacterSet" (portkey.aws/search-for-tag input "DefaultCharacterSet" :flattened? nil :xmlAttribute? nil), "SupportedCharacterSets" (portkey.aws/search-for-tag input "SupportedCharacterSets" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar479001 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar479001 ["Engine" :content]))) (letvar479001 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar479001 ["EngineVersion" :content]))) (letvar479001 "DBParameterGroupFamily") (clojure.core/assoc :db-parameter-group-family (deser-string (clojure.core/get-in letvar479001 ["DBParameterGroupFamily" :content]))) (letvar479001 "DBEngineDescription") (clojure.core/assoc :db-engine-description (deser-string (clojure.core/get-in letvar479001 ["DBEngineDescription" :content]))) (letvar479001 "DBEngineVersionDescription") (clojure.core/assoc :db-engine-version-description (deser-string (clojure.core/get-in letvar479001 ["DBEngineVersionDescription" :content]))) (letvar479001 "DefaultCharacterSet") (clojure.core/assoc :default-character-set (deser-character-set (clojure.core/get-in letvar479001 ["DefaultCharacterSet" :content]))) (letvar479001 "SupportedCharacterSets") (clojure.core/assoc :supported-character-sets (deser-supported-character-sets-list (clojure.core/get-in letvar479001 ["SupportedCharacterSets" :content]))))))

(clojure.core/defn- deser-option-setting-configuration-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-option-setting coll))) input))

(clojure.core/defn- deser-vpc-security-group-membership [input] (clojure.core/let [letvar479126 {"VpcSecurityGroupId" (portkey.aws/search-for-tag input "VpcSecurityGroupId" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar479126 "VpcSecurityGroupId") (clojure.core/assoc :vpc-security-group-id (deser-string (clojure.core/get-in letvar479126 ["VpcSecurityGroupId" :content]))) (letvar479126 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar479126 ["Status" :content]))))))

(clojure.core/defn- deser-reserved-db-instances-offering [input] (clojure.core/let [letvar479234 {"CurrencyCode" (portkey.aws/search-for-tag input "CurrencyCode" :flattened? nil :xmlAttribute? nil), "ReservedDBInstancesOfferingId" (portkey.aws/search-for-tag input "ReservedDBInstancesOfferingId" :flattened? nil :xmlAttribute? nil), "FixedPrice" (portkey.aws/search-for-tag input "FixedPrice" :flattened? nil :xmlAttribute? nil), "Duration" (portkey.aws/search-for-tag input "Duration" :flattened? nil :xmlAttribute? nil), "UsagePrice" (portkey.aws/search-for-tag input "UsagePrice" :flattened? nil :xmlAttribute? nil), "ProductDescription" (portkey.aws/search-for-tag input "ProductDescription" :flattened? nil :xmlAttribute? nil), "DBInstanceClass" (portkey.aws/search-for-tag input "DBInstanceClass" :flattened? nil :xmlAttribute? nil), "RecurringCharges" (portkey.aws/search-for-tag input "RecurringCharges" :flattened? nil :xmlAttribute? nil), "OfferingType" (portkey.aws/search-for-tag input "OfferingType" :flattened? nil :xmlAttribute? nil), "MultiAZ" (portkey.aws/search-for-tag input "MultiAZ" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar479234 "CurrencyCode") (clojure.core/assoc :currency-code (deser-string (clojure.core/get-in letvar479234 ["CurrencyCode" :content]))) (letvar479234 "ReservedDBInstancesOfferingId") (clojure.core/assoc :reserved-db-instances-offering-id (deser-string (clojure.core/get-in letvar479234 ["ReservedDBInstancesOfferingId" :content]))) (letvar479234 "FixedPrice") (clojure.core/assoc :fixed-price (deser-double (clojure.core/get-in letvar479234 ["FixedPrice" :content]))) (letvar479234 "Duration") (clojure.core/assoc :duration (deser-integer (clojure.core/get-in letvar479234 ["Duration" :content]))) (letvar479234 "UsagePrice") (clojure.core/assoc :usage-price (deser-double (clojure.core/get-in letvar479234 ["UsagePrice" :content]))) (letvar479234 "ProductDescription") (clojure.core/assoc :product-description (deser-string (clojure.core/get-in letvar479234 ["ProductDescription" :content]))) (letvar479234 "DBInstanceClass") (clojure.core/assoc :db-instance-class (deser-string (clojure.core/get-in letvar479234 ["DBInstanceClass" :content]))) (letvar479234 "RecurringCharges") (clojure.core/assoc :recurring-charges (deser-recurring-charge-list (clojure.core/get-in letvar479234 ["RecurringCharges" :content]))) (letvar479234 "OfferingType") (clojure.core/assoc :offering-type (deser-string (clojure.core/get-in letvar479234 ["OfferingType" :content]))) (letvar479234 "MultiAZ") (clojure.core/assoc :multi-az (deser-boolean (clojure.core/get-in letvar479234 ["MultiAZ" :content]))))))

(clojure.core/defn- deser-ec-2-security-group [input] (clojure.core/let [letvar479342 {"Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "EC2SecurityGroupName" (portkey.aws/search-for-tag input "EC2SecurityGroupName" :flattened? nil :xmlAttribute? nil), "EC2SecurityGroupId" (portkey.aws/search-for-tag input "EC2SecurityGroupId" :flattened? nil :xmlAttribute? nil), "EC2SecurityGroupOwnerId" (portkey.aws/search-for-tag input "EC2SecurityGroupOwnerId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar479342 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar479342 ["Status" :content]))) (letvar479342 "EC2SecurityGroupName") (clojure.core/assoc :ec-2-security-group-name (deser-string (clojure.core/get-in letvar479342 ["EC2SecurityGroupName" :content]))) (letvar479342 "EC2SecurityGroupId") (clojure.core/assoc :ec-2-security-group-id (deser-string (clojure.core/get-in letvar479342 ["EC2SecurityGroupId" :content]))) (letvar479342 "EC2SecurityGroupOwnerId") (clojure.core/assoc :ec-2-security-group-owner-id (deser-string (clojure.core/get-in letvar479342 ["EC2SecurityGroupOwnerId" :content]))))))

(clojure.core/defn- deser-option-group-membership-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-option-group-membership coll))) input))

(clojure.core/defn- deser-event-categories-map-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-event-categories-map coll))) input))

(clojure.core/defn- deser-integer [input] (java.lang.Integer. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-string [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-parameter [input] (clojure.core/let [letvar479491 {"DataType" (portkey.aws/search-for-tag input "DataType" :flattened? nil :xmlAttribute? nil), "ParameterName" (portkey.aws/search-for-tag input "ParameterName" :flattened? nil :xmlAttribute? nil), "Source" (portkey.aws/search-for-tag input "Source" :flattened? nil :xmlAttribute? nil), "MinimumEngineVersion" (portkey.aws/search-for-tag input "MinimumEngineVersion" :flattened? nil :xmlAttribute? nil), "AllowedValues" (portkey.aws/search-for-tag input "AllowedValues" :flattened? nil :xmlAttribute? nil), "ApplyType" (portkey.aws/search-for-tag input "ApplyType" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "ApplyMethod" (portkey.aws/search-for-tag input "ApplyMethod" :flattened? nil :xmlAttribute? nil), "IsModifiable" (portkey.aws/search-for-tag input "IsModifiable" :flattened? nil :xmlAttribute? nil), "ParameterValue" (portkey.aws/search-for-tag input "ParameterValue" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar479491 "DataType") (clojure.core/assoc :data-type (deser-string (clojure.core/get-in letvar479491 ["DataType" :content]))) (letvar479491 "ParameterName") (clojure.core/assoc :parameter-name (deser-string (clojure.core/get-in letvar479491 ["ParameterName" :content]))) (letvar479491 "Source") (clojure.core/assoc :source (deser-string (clojure.core/get-in letvar479491 ["Source" :content]))) (letvar479491 "MinimumEngineVersion") (clojure.core/assoc :minimum-engine-version (deser-string (clojure.core/get-in letvar479491 ["MinimumEngineVersion" :content]))) (letvar479491 "AllowedValues") (clojure.core/assoc :allowed-values (deser-string (clojure.core/get-in letvar479491 ["AllowedValues" :content]))) (letvar479491 "ApplyType") (clojure.core/assoc :apply-type (deser-string (clojure.core/get-in letvar479491 ["ApplyType" :content]))) (letvar479491 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar479491 ["Description" :content]))) (letvar479491 "ApplyMethod") (clojure.core/assoc :apply-method (deser-apply-method (clojure.core/get-in letvar479491 ["ApplyMethod" :content]))) (letvar479491 "IsModifiable") (clojure.core/assoc :is-modifiable (deser-boolean (clojure.core/get-in letvar479491 ["IsModifiable" :content]))) (letvar479491 "ParameterValue") (clojure.core/assoc :parameter-value (deser-string (clojure.core/get-in letvar479491 ["ParameterValue" :content]))))))

(clojure.core/defn- deser-describe-db-log-files-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-describe-db-log-files-details coll))) input))

(clojure.core/defn- deser-db-security-group-membership [input] (clojure.core/let [letvar479616 {"DBSecurityGroupName" (portkey.aws/search-for-tag input "DBSecurityGroupName" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar479616 "DBSecurityGroupName") (clojure.core/assoc :db-security-group-name (deser-string (clojure.core/get-in letvar479616 ["DBSecurityGroupName" :content]))) (letvar479616 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar479616 ["Status" :content]))))))

(clojure.core/defn- deser-db-instance [input] (clojure.core/let [letvar479724 {"BackupRetentionPeriod" (portkey.aws/search-for-tag input "BackupRetentionPeriod" :flattened? nil :xmlAttribute? nil), "DBSecurityGroups" (portkey.aws/search-for-tag input "DBSecurityGroups" :flattened? nil :xmlAttribute? nil), "SecondaryAvailabilityZone" (portkey.aws/search-for-tag input "SecondaryAvailabilityZone" :flattened? nil :xmlAttribute? nil), "CharacterSetName" (portkey.aws/search-for-tag input "CharacterSetName" :flattened? nil :xmlAttribute? nil), "PubliclyAccessible" (portkey.aws/search-for-tag input "PubliclyAccessible" :flattened? nil :xmlAttribute? nil), "ReadReplicaDBInstanceIdentifiers" (portkey.aws/search-for-tag input "ReadReplicaDBInstanceIdentifiers" :flattened? nil :xmlAttribute? nil), "PreferredMaintenanceWindow" (portkey.aws/search-for-tag input "PreferredMaintenanceWindow" :flattened? nil :xmlAttribute? nil), "DBInstanceIdentifier" (portkey.aws/search-for-tag input "DBInstanceIdentifier" :flattened? nil :xmlAttribute? nil), "AutoMinorVersionUpgrade" (portkey.aws/search-for-tag input "AutoMinorVersionUpgrade" :flattened? nil :xmlAttribute? nil), "DBName" (portkey.aws/search-for-tag input "DBName" :flattened? nil :xmlAttribute? nil), "InstanceCreateTime" (portkey.aws/search-for-tag input "InstanceCreateTime" :flattened? nil :xmlAttribute? nil), "AvailabilityZone" (portkey.aws/search-for-tag input "AvailabilityZone" :flattened? nil :xmlAttribute? nil), "ReadReplicaSourceDBInstanceIdentifier" (portkey.aws/search-for-tag input "ReadReplicaSourceDBInstanceIdentifier" :flattened? nil :xmlAttribute? nil), "LicenseModel" (portkey.aws/search-for-tag input "LicenseModel" :flattened? nil :xmlAttribute? nil), "AllocatedStorage" (portkey.aws/search-for-tag input "AllocatedStorage" :flattened? nil :xmlAttribute? nil), "MasterUsername" (portkey.aws/search-for-tag input "MasterUsername" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "Iops" (portkey.aws/search-for-tag input "Iops" :flattened? nil :xmlAttribute? nil), "Endpoint" (portkey.aws/search-for-tag input "Endpoint" :flattened? nil :xmlAttribute? nil), "OptionGroupMemberships" (portkey.aws/search-for-tag input "OptionGroupMemberships" :flattened? nil :xmlAttribute? nil), "DBInstanceClass" (portkey.aws/search-for-tag input "DBInstanceClass" :flattened? nil :xmlAttribute? nil), "DBParameterGroups" (portkey.aws/search-for-tag input "DBParameterGroups" :flattened? nil :xmlAttribute? nil), "VpcSecurityGroups" (portkey.aws/search-for-tag input "VpcSecurityGroups" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "DBInstanceStatus" (portkey.aws/search-for-tag input "DBInstanceStatus" :flattened? nil :xmlAttribute? nil), "StatusInfos" (portkey.aws/search-for-tag input "StatusInfos" :flattened? nil :xmlAttribute? nil), "MultiAZ" (portkey.aws/search-for-tag input "MultiAZ" :flattened? nil :xmlAttribute? nil), "PreferredBackupWindow" (portkey.aws/search-for-tag input "PreferredBackupWindow" :flattened? nil :xmlAttribute? nil), "PendingModifiedValues" (portkey.aws/search-for-tag input "PendingModifiedValues" :flattened? nil :xmlAttribute? nil), "LatestRestorableTime" (portkey.aws/search-for-tag input "LatestRestorableTime" :flattened? nil :xmlAttribute? nil), "DBSubnetGroup" (portkey.aws/search-for-tag input "DBSubnetGroup" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar479724 "BackupRetentionPeriod") (clojure.core/assoc :backup-retention-period (deser-integer (clojure.core/get-in letvar479724 ["BackupRetentionPeriod" :content]))) (letvar479724 "DBSecurityGroups") (clojure.core/assoc :db-security-groups (deser-db-security-group-membership-list (clojure.core/get-in letvar479724 ["DBSecurityGroups" :content]))) (letvar479724 "SecondaryAvailabilityZone") (clojure.core/assoc :secondary-availability-zone (deser-string (clojure.core/get-in letvar479724 ["SecondaryAvailabilityZone" :content]))) (letvar479724 "CharacterSetName") (clojure.core/assoc :character-set-name (deser-string (clojure.core/get-in letvar479724 ["CharacterSetName" :content]))) (letvar479724 "PubliclyAccessible") (clojure.core/assoc :publicly-accessible (deser-boolean (clojure.core/get-in letvar479724 ["PubliclyAccessible" :content]))) (letvar479724 "ReadReplicaDBInstanceIdentifiers") (clojure.core/assoc :read-replica-db-instance-identifiers (deser-read-replica-db-instance-identifier-list (clojure.core/get-in letvar479724 ["ReadReplicaDBInstanceIdentifiers" :content]))) (letvar479724 "PreferredMaintenanceWindow") (clojure.core/assoc :preferred-maintenance-window (deser-string (clojure.core/get-in letvar479724 ["PreferredMaintenanceWindow" :content]))) (letvar479724 "DBInstanceIdentifier") (clojure.core/assoc :db-instance-identifier (deser-string (clojure.core/get-in letvar479724 ["DBInstanceIdentifier" :content]))) (letvar479724 "AutoMinorVersionUpgrade") (clojure.core/assoc :auto-minor-version-upgrade (deser-boolean (clojure.core/get-in letvar479724 ["AutoMinorVersionUpgrade" :content]))) (letvar479724 "DBName") (clojure.core/assoc :db-name (deser-string (clojure.core/get-in letvar479724 ["DBName" :content]))) (letvar479724 "InstanceCreateTime") (clojure.core/assoc :instance-create-time (deser-t-stamp (clojure.core/get-in letvar479724 ["InstanceCreateTime" :content]))) (letvar479724 "AvailabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar479724 ["AvailabilityZone" :content]))) (letvar479724 "ReadReplicaSourceDBInstanceIdentifier") (clojure.core/assoc :read-replica-source-db-instance-identifier (deser-string (clojure.core/get-in letvar479724 ["ReadReplicaSourceDBInstanceIdentifier" :content]))) (letvar479724 "LicenseModel") (clojure.core/assoc :license-model (deser-string (clojure.core/get-in letvar479724 ["LicenseModel" :content]))) (letvar479724 "AllocatedStorage") (clojure.core/assoc :allocated-storage (deser-integer (clojure.core/get-in letvar479724 ["AllocatedStorage" :content]))) (letvar479724 "MasterUsername") (clojure.core/assoc :master-username (deser-string (clojure.core/get-in letvar479724 ["MasterUsername" :content]))) (letvar479724 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar479724 ["EngineVersion" :content]))) (letvar479724 "Iops") (clojure.core/assoc :iops (deser-integer-optional (clojure.core/get-in letvar479724 ["Iops" :content]))) (letvar479724 "Endpoint") (clojure.core/assoc :endpoint (deser-endpoint (clojure.core/get-in letvar479724 ["Endpoint" :content]))) (letvar479724 "OptionGroupMemberships") (clojure.core/assoc :option-group-memberships (deser-option-group-membership-list (clojure.core/get-in letvar479724 ["OptionGroupMemberships" :content]))) (letvar479724 "DBInstanceClass") (clojure.core/assoc :db-instance-class (deser-string (clojure.core/get-in letvar479724 ["DBInstanceClass" :content]))) (letvar479724 "DBParameterGroups") (clojure.core/assoc :db-parameter-groups (deser-db-parameter-group-status-list (clojure.core/get-in letvar479724 ["DBParameterGroups" :content]))) (letvar479724 "VpcSecurityGroups") (clojure.core/assoc :vpc-security-groups (deser-vpc-security-group-membership-list (clojure.core/get-in letvar479724 ["VpcSecurityGroups" :content]))) (letvar479724 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar479724 ["Engine" :content]))) (letvar479724 "DBInstanceStatus") (clojure.core/assoc :db-instance-status (deser-string (clojure.core/get-in letvar479724 ["DBInstanceStatus" :content]))) (letvar479724 "StatusInfos") (clojure.core/assoc :status-infos (deser-db-instance-status-info-list (clojure.core/get-in letvar479724 ["StatusInfos" :content]))) (letvar479724 "MultiAZ") (clojure.core/assoc :multi-az (deser-boolean (clojure.core/get-in letvar479724 ["MultiAZ" :content]))) (letvar479724 "PreferredBackupWindow") (clojure.core/assoc :preferred-backup-window (deser-string (clojure.core/get-in letvar479724 ["PreferredBackupWindow" :content]))) (letvar479724 "PendingModifiedValues") (clojure.core/assoc :pending-modified-values (deser-pending-modified-values (clojure.core/get-in letvar479724 ["PendingModifiedValues" :content]))) (letvar479724 "LatestRestorableTime") (clojure.core/assoc :latest-restorable-time (deser-t-stamp (clojure.core/get-in letvar479724 ["LatestRestorableTime" :content]))) (letvar479724 "DBSubnetGroup") (clojure.core/assoc :db-subnet-group (deser-db-subnet-group (clojure.core/get-in letvar479724 ["DBSubnetGroup" :content]))))))

(clojure.core/defn- deser-t-stamp [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-db-security-group-membership-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-security-group-membership coll))) input))

(clojure.core/defn- deser-event-categories-map [input] (clojure.core/let [letvar479851 {"SourceType" (portkey.aws/search-for-tag input "SourceType" :flattened? nil :xmlAttribute? nil), "EventCategories" (portkey.aws/search-for-tag input "EventCategories" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar479851 "SourceType") (clojure.core/assoc :source-type (deser-string (clojure.core/get-in letvar479851 ["SourceType" :content]))) (letvar479851 "EventCategories") (clojure.core/assoc :event-categories (deser-event-categories-list (clojure.core/get-in letvar479851 ["EventCategories" :content]))))))

(clojure.core/defn- deser-reserved-db-instances-offering-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-db-instances-offering coll))) input))

(clojure.core/defn- deser-recurring-charge-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-recurring-charge coll))) input))

(clojure.core/defn- deser-event-categories-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-apply-method [input] (clojure.core/get {"immediate" :immediate, "pending-reboot" :pendingreboot} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-endpoint [input] (clojure.core/let [letvar480015 {"Address" (portkey.aws/search-for-tag input "Address" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar480015 "Address") (clojure.core/assoc :address (deser-string (clojure.core/get-in letvar480015 ["Address" :content]))) (letvar480015 "Port") (clojure.core/assoc :port (deser-integer (clojure.core/get-in letvar480015 ["Port" :content]))))))

(clojure.core/defn- deser-db-parameter-group [input] (clojure.core/let [letvar480123 {"DBParameterGroupName" (portkey.aws/search-for-tag input "DBParameterGroupName" :flattened? nil :xmlAttribute? nil), "DBParameterGroupFamily" (portkey.aws/search-for-tag input "DBParameterGroupFamily" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar480123 "DBParameterGroupName") (clojure.core/assoc :db-parameter-group-name (deser-string (clojure.core/get-in letvar480123 ["DBParameterGroupName" :content]))) (letvar480123 "DBParameterGroupFamily") (clojure.core/assoc :db-parameter-group-family (deser-string (clojure.core/get-in letvar480123 ["DBParameterGroupFamily" :content]))) (letvar480123 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar480123 ["Description" :content]))))))

(clojure.core/defn- deser-supported-character-sets-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-character-set coll))) input))

(clojure.core/defn- deser-long [input] (java.lang.Long. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-option-group-membership [input] (clojure.core/let [letvar480250 {"OptionGroupName" (portkey.aws/search-for-tag input "OptionGroupName" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar480250 "OptionGroupName") (clojure.core/assoc :option-group-name (deser-string (clojure.core/get-in letvar480250 ["OptionGroupName" :content]))) (letvar480250 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar480250 ["Status" :content]))))))

(clojure.core/defn- deser-reserved-db-instance [input] (clojure.core/let [letvar480358 {"ReservedDBInstanceId" (portkey.aws/search-for-tag input "ReservedDBInstanceId" :flattened? nil :xmlAttribute? nil), "CurrencyCode" (portkey.aws/search-for-tag input "CurrencyCode" :flattened? nil :xmlAttribute? nil), "ReservedDBInstancesOfferingId" (portkey.aws/search-for-tag input "ReservedDBInstancesOfferingId" :flattened? nil :xmlAttribute? nil), "StartTime" (portkey.aws/search-for-tag input "StartTime" :flattened? nil :xmlAttribute? nil), "FixedPrice" (portkey.aws/search-for-tag input "FixedPrice" :flattened? nil :xmlAttribute? nil), "DBInstanceCount" (portkey.aws/search-for-tag input "DBInstanceCount" :flattened? nil :xmlAttribute? nil), "Duration" (portkey.aws/search-for-tag input "Duration" :flattened? nil :xmlAttribute? nil), "UsagePrice" (portkey.aws/search-for-tag input "UsagePrice" :flattened? nil :xmlAttribute? nil), "ProductDescription" (portkey.aws/search-for-tag input "ProductDescription" :flattened? nil :xmlAttribute? nil), "DBInstanceClass" (portkey.aws/search-for-tag input "DBInstanceClass" :flattened? nil :xmlAttribute? nil), "State" (portkey.aws/search-for-tag input "State" :flattened? nil :xmlAttribute? nil), "RecurringCharges" (portkey.aws/search-for-tag input "RecurringCharges" :flattened? nil :xmlAttribute? nil), "OfferingType" (portkey.aws/search-for-tag input "OfferingType" :flattened? nil :xmlAttribute? nil), "MultiAZ" (portkey.aws/search-for-tag input "MultiAZ" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar480358 "ReservedDBInstanceId") (clojure.core/assoc :reserved-db-instance-id (deser-string (clojure.core/get-in letvar480358 ["ReservedDBInstanceId" :content]))) (letvar480358 "CurrencyCode") (clojure.core/assoc :currency-code (deser-string (clojure.core/get-in letvar480358 ["CurrencyCode" :content]))) (letvar480358 "ReservedDBInstancesOfferingId") (clojure.core/assoc :reserved-db-instances-offering-id (deser-string (clojure.core/get-in letvar480358 ["ReservedDBInstancesOfferingId" :content]))) (letvar480358 "StartTime") (clojure.core/assoc :start-time (deser-t-stamp (clojure.core/get-in letvar480358 ["StartTime" :content]))) (letvar480358 "FixedPrice") (clojure.core/assoc :fixed-price (deser-double (clojure.core/get-in letvar480358 ["FixedPrice" :content]))) (letvar480358 "DBInstanceCount") (clojure.core/assoc :db-instance-count (deser-integer (clojure.core/get-in letvar480358 ["DBInstanceCount" :content]))) (letvar480358 "Duration") (clojure.core/assoc :duration (deser-integer (clojure.core/get-in letvar480358 ["Duration" :content]))) (letvar480358 "UsagePrice") (clojure.core/assoc :usage-price (deser-double (clojure.core/get-in letvar480358 ["UsagePrice" :content]))) (letvar480358 "ProductDescription") (clojure.core/assoc :product-description (deser-string (clojure.core/get-in letvar480358 ["ProductDescription" :content]))) (letvar480358 "DBInstanceClass") (clojure.core/assoc :db-instance-class (deser-string (clojure.core/get-in letvar480358 ["DBInstanceClass" :content]))) (letvar480358 "State") (clojure.core/assoc :state (deser-string (clojure.core/get-in letvar480358 ["State" :content]))) (letvar480358 "RecurringCharges") (clojure.core/assoc :recurring-charges (deser-recurring-charge-list (clojure.core/get-in letvar480358 ["RecurringCharges" :content]))) (letvar480358 "OfferingType") (clojure.core/assoc :offering-type (deser-string (clojure.core/get-in letvar480358 ["OfferingType" :content]))) (letvar480358 "MultiAZ") (clojure.core/assoc :multi-az (deser-boolean (clojure.core/get-in letvar480358 ["MultiAZ" :content]))))))

(clojure.core/defn- deser-ip-range [input] (clojure.core/let [letvar480466 {"Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "CIDRIP" (portkey.aws/search-for-tag input "CIDRIP" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar480466 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar480466 ["Status" :content]))) (letvar480466 "CIDRIP") (clojure.core/assoc :cidrip (deser-string (clojure.core/get-in letvar480466 ["CIDRIP" :content]))))))

(clojure.core/defn- deser-character-set [input] (clojure.core/let [letvar480574 {"CharacterSetName" (portkey.aws/search-for-tag input "CharacterSetName" :flattened? nil :xmlAttribute? nil), "CharacterSetDescription" (portkey.aws/search-for-tag input "CharacterSetDescription" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar480574 "CharacterSetName") (clojure.core/assoc :character-set-name (deser-string (clojure.core/get-in letvar480574 ["CharacterSetName" :content]))) (letvar480574 "CharacterSetDescription") (clojure.core/assoc :character-set-description (deser-string (clojure.core/get-in letvar480574 ["CharacterSetDescription" :content]))))))

(clojure.core/defn- deser-option-group-option-settings-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-option-group-option-setting coll))) input))

(clojure.core/defn- deser-tag [input] (clojure.core/let [letvar480699 {"Key" (portkey.aws/search-for-tag input "Key" :flattened? nil :xmlAttribute? nil), "Value" (portkey.aws/search-for-tag input "Value" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar480699 "Key") (clojure.core/assoc :key (deser-string (clojure.core/get-in letvar480699 ["Key" :content]))) (letvar480699 "Value") (clojure.core/assoc :value (deser-string (clojure.core/get-in letvar480699 ["Value" :content]))))))

(clojure.core/defn- deser-boolean-optional [input] (clojure.core/when-let [boolstr__283693__auto__ (portkey.aws/unbox-xml-primitive-value input)] (clojure.core/cond (clojure.core/= "true" boolstr__283693__auto__) true (clojure.core/= "false" boolstr__283693__auto__) false)))

(clojure.core/defn- deser-options-depended-on [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-option-setting [input] (clojure.core/let [letvar480826 {"DataType" (portkey.aws/search-for-tag input "DataType" :flattened? nil :xmlAttribute? nil), "AllowedValues" (portkey.aws/search-for-tag input "AllowedValues" :flattened? nil :xmlAttribute? nil), "Value" (portkey.aws/search-for-tag input "Value" :flattened? nil :xmlAttribute? nil), "ApplyType" (portkey.aws/search-for-tag input "ApplyType" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "DefaultValue" (portkey.aws/search-for-tag input "DefaultValue" :flattened? nil :xmlAttribute? nil), "IsModifiable" (portkey.aws/search-for-tag input "IsModifiable" :flattened? nil :xmlAttribute? nil), "IsCollection" (portkey.aws/search-for-tag input "IsCollection" :flattened? nil :xmlAttribute? nil), "Name" (portkey.aws/search-for-tag input "Name" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar480826 "DataType") (clojure.core/assoc :data-type (deser-string (clojure.core/get-in letvar480826 ["DataType" :content]))) (letvar480826 "AllowedValues") (clojure.core/assoc :allowed-values (deser-string (clojure.core/get-in letvar480826 ["AllowedValues" :content]))) (letvar480826 "Value") (clojure.core/assoc :value (deser-string (clojure.core/get-in letvar480826 ["Value" :content]))) (letvar480826 "ApplyType") (clojure.core/assoc :apply-type (deser-string (clojure.core/get-in letvar480826 ["ApplyType" :content]))) (letvar480826 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar480826 ["Description" :content]))) (letvar480826 "DefaultValue") (clojure.core/assoc :default-value (deser-string (clojure.core/get-in letvar480826 ["DefaultValue" :content]))) (letvar480826 "IsModifiable") (clojure.core/assoc :is-modifiable (deser-boolean (clojure.core/get-in letvar480826 ["IsModifiable" :content]))) (letvar480826 "IsCollection") (clojure.core/assoc :is-collection (deser-boolean (clojure.core/get-in letvar480826 ["IsCollection" :content]))) (letvar480826 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar480826 ["Name" :content]))))))

(clojure.core/defn- deser-db-instance-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-instance coll))) input))

(clojure.core/defn- deser-event-subscriptions-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-event-subscription coll))) input))

(clojure.core/defn- deser-db-snapshot-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-snapshot coll))) input))

(clojure.core/defn- deser-engine-defaults [input] (clojure.core/let [letvar480985 {"DBParameterGroupFamily" (portkey.aws/search-for-tag input "DBParameterGroupFamily" :flattened? nil :xmlAttribute? nil), "Marker" (portkey.aws/search-for-tag input "Marker" :flattened? nil :xmlAttribute? nil), "Parameters" (portkey.aws/search-for-tag input "Parameters" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar480985 "DBParameterGroupFamily") (clojure.core/assoc :db-parameter-group-family (deser-string (clojure.core/get-in letvar480985 ["DBParameterGroupFamily" :content]))) (letvar480985 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar480985 ["Marker" :content]))) (letvar480985 "Parameters") (clojure.core/assoc :parameters (deser-parameters-list (clojure.core/get-in letvar480985 ["Parameters" :content]))))))

(clojure.core/defn- deser-db-subnet-groups [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-subnet-group coll))) input))

(clojure.core/defn- deser-integer-optional [input] (java.lang.Integer. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-db-security-group [input] (clojure.core/let [letvar481112 {"OwnerId" (portkey.aws/search-for-tag input "OwnerId" :flattened? nil :xmlAttribute? nil), "DBSecurityGroupName" (portkey.aws/search-for-tag input "DBSecurityGroupName" :flattened? nil :xmlAttribute? nil), "DBSecurityGroupDescription" (portkey.aws/search-for-tag input "DBSecurityGroupDescription" :flattened? nil :xmlAttribute? nil), "VpcId" (portkey.aws/search-for-tag input "VpcId" :flattened? nil :xmlAttribute? nil), "EC2SecurityGroups" (portkey.aws/search-for-tag input "EC2SecurityGroups" :flattened? nil :xmlAttribute? nil), "IPRanges" (portkey.aws/search-for-tag input "IPRanges" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar481112 "OwnerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar481112 ["OwnerId" :content]))) (letvar481112 "DBSecurityGroupName") (clojure.core/assoc :db-security-group-name (deser-string (clojure.core/get-in letvar481112 ["DBSecurityGroupName" :content]))) (letvar481112 "DBSecurityGroupDescription") (clojure.core/assoc :db-security-group-description (deser-string (clojure.core/get-in letvar481112 ["DBSecurityGroupDescription" :content]))) (letvar481112 "VpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar481112 ["VpcId" :content]))) (letvar481112 "EC2SecurityGroups") (clojure.core/assoc :ec-2-security-groups (deser-ec-2-security-group-list (clojure.core/get-in letvar481112 ["EC2SecurityGroups" :content]))) (letvar481112 "IPRanges") (clojure.core/assoc :ip-ranges (deser-ip-range-list (clojure.core/get-in letvar481112 ["IPRanges" :content]))))))

(clojure.core/defn- deser-db-instance-status-info-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-instance-status-info coll))) input))

(clojure.core/defn- deser-orderable-db-instance-option [input] (clojure.core/let [letvar481237 {"Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "DBInstanceClass" (portkey.aws/search-for-tag input "DBInstanceClass" :flattened? nil :xmlAttribute? nil), "LicenseModel" (portkey.aws/search-for-tag input "LicenseModel" :flattened? nil :xmlAttribute? nil), "AvailabilityZones" (portkey.aws/search-for-tag input "AvailabilityZones" :flattened? nil :xmlAttribute? nil), "MultiAZCapable" (portkey.aws/search-for-tag input "MultiAZCapable" :flattened? nil :xmlAttribute? nil), "ReadReplicaCapable" (portkey.aws/search-for-tag input "ReadReplicaCapable" :flattened? nil :xmlAttribute? nil), "Vpc" (portkey.aws/search-for-tag input "Vpc" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar481237 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar481237 ["Engine" :content]))) (letvar481237 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar481237 ["EngineVersion" :content]))) (letvar481237 "DBInstanceClass") (clojure.core/assoc :db-instance-class (deser-string (clojure.core/get-in letvar481237 ["DBInstanceClass" :content]))) (letvar481237 "LicenseModel") (clojure.core/assoc :license-model (deser-string (clojure.core/get-in letvar481237 ["LicenseModel" :content]))) (letvar481237 "AvailabilityZones") (clojure.core/assoc :availability-zones (deser-availability-zone-list (clojure.core/get-in letvar481237 ["AvailabilityZones" :content]))) (letvar481237 "MultiAZCapable") (clojure.core/assoc :multi-az-capable (deser-boolean (clojure.core/get-in letvar481237 ["MultiAZCapable" :content]))) (letvar481237 "ReadReplicaCapable") (clojure.core/assoc :read-replica-capable (deser-boolean (clojure.core/get-in letvar481237 ["ReadReplicaCapable" :content]))) (letvar481237 "Vpc") (clojure.core/assoc :vpc (deser-boolean (clojure.core/get-in letvar481237 ["Vpc" :content]))))))

(clojure.core/defn- deser-pending-modified-values [input] (clojure.core/let [letvar481345 {"BackupRetentionPeriod" (portkey.aws/search-for-tag input "BackupRetentionPeriod" :flattened? nil :xmlAttribute? nil), "DBInstanceIdentifier" (portkey.aws/search-for-tag input "DBInstanceIdentifier" :flattened? nil :xmlAttribute? nil), "MasterUserPassword" (portkey.aws/search-for-tag input "MasterUserPassword" :flattened? nil :xmlAttribute? nil), "AllocatedStorage" (portkey.aws/search-for-tag input "AllocatedStorage" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "Iops" (portkey.aws/search-for-tag input "Iops" :flattened? nil :xmlAttribute? nil), "DBInstanceClass" (portkey.aws/search-for-tag input "DBInstanceClass" :flattened? nil :xmlAttribute? nil), "MultiAZ" (portkey.aws/search-for-tag input "MultiAZ" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar481345 "BackupRetentionPeriod") (clojure.core/assoc :backup-retention-period (deser-integer-optional (clojure.core/get-in letvar481345 ["BackupRetentionPeriod" :content]))) (letvar481345 "DBInstanceIdentifier") (clojure.core/assoc :db-instance-identifier (deser-string (clojure.core/get-in letvar481345 ["DBInstanceIdentifier" :content]))) (letvar481345 "MasterUserPassword") (clojure.core/assoc :master-user-password (deser-string (clojure.core/get-in letvar481345 ["MasterUserPassword" :content]))) (letvar481345 "AllocatedStorage") (clojure.core/assoc :allocated-storage (deser-integer-optional (clojure.core/get-in letvar481345 ["AllocatedStorage" :content]))) (letvar481345 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar481345 ["EngineVersion" :content]))) (letvar481345 "Port") (clojure.core/assoc :port (deser-integer-optional (clojure.core/get-in letvar481345 ["Port" :content]))) (letvar481345 "Iops") (clojure.core/assoc :iops (deser-integer-optional (clojure.core/get-in letvar481345 ["Iops" :content]))) (letvar481345 "DBInstanceClass") (clojure.core/assoc :db-instance-class (deser-string (clojure.core/get-in letvar481345 ["DBInstanceClass" :content]))) (letvar481345 "MultiAZ") (clojure.core/assoc :multi-az (deser-boolean-optional (clojure.core/get-in letvar481345 ["MultiAZ" :content]))))))

(clojure.core/defn- deser-subnet-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-subnet coll))) input))

(clojure.core/defn- deser-db-subnet-group [input] (clojure.core/let [letvar481470 {"DBSubnetGroupName" (portkey.aws/search-for-tag input "DBSubnetGroupName" :flattened? nil :xmlAttribute? nil), "DBSubnetGroupDescription" (portkey.aws/search-for-tag input "DBSubnetGroupDescription" :flattened? nil :xmlAttribute? nil), "VpcId" (portkey.aws/search-for-tag input "VpcId" :flattened? nil :xmlAttribute? nil), "SubnetGroupStatus" (portkey.aws/search-for-tag input "SubnetGroupStatus" :flattened? nil :xmlAttribute? nil), "Subnets" (portkey.aws/search-for-tag input "Subnets" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar481470 "DBSubnetGroupName") (clojure.core/assoc :db-subnet-group-name (deser-string (clojure.core/get-in letvar481470 ["DBSubnetGroupName" :content]))) (letvar481470 "DBSubnetGroupDescription") (clojure.core/assoc :db-subnet-group-description (deser-string (clojure.core/get-in letvar481470 ["DBSubnetGroupDescription" :content]))) (letvar481470 "VpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar481470 ["VpcId" :content]))) (letvar481470 "SubnetGroupStatus") (clojure.core/assoc :subnet-group-status (deser-string (clojure.core/get-in letvar481470 ["SubnetGroupStatus" :content]))) (letvar481470 "Subnets") (clojure.core/assoc :subnets (deser-subnet-list (clojure.core/get-in letvar481470 ["Subnets" :content]))))))

(clojure.core/defn- deser-boolean [input] (clojure.core/when-let [boolstr__283693__auto__ (portkey.aws/unbox-xml-primitive-value input)] (clojure.core/cond (clojure.core/= "true" boolstr__283693__auto__) true (clojure.core/= "false" boolstr__283693__auto__) false)))

(clojure.core/defn- response-source-not-found-fault ([input] (response-source-not-found-fault nil input)) ([resultWrapper481474 input] (clojure.core/let [rawinput481473 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481475 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-instance-not-found-fault ([input] (response-db-instance-not-found-fault nil input)) ([resultWrapper481477 input] (clojure.core/let [rawinput481476 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481478 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-restore-db-instance-from-db-snapshot-result ([input] (response-restore-db-instance-from-db-snapshot-result nil input)) ([resultWrapper481480 input] (clojure.core/let [rawinput481479 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481481 {"DBInstance" (portkey.aws/search-for-tag rawinput481479 "DBInstance" :flattened? nil :result-wrapper resultWrapper481480)}] (clojure.core/cond-> {} (letvar481481 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar481481 ["DBInstance" :content])))))))

(clojure.core/defn- response-remove-source-identifier-from-subscription-result ([input] (response-remove-source-identifier-from-subscription-result nil input)) ([resultWrapper481483 input] (clojure.core/let [rawinput481482 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481484 {"EventSubscription" (portkey.aws/search-for-tag rawinput481482 "EventSubscription" :flattened? nil :result-wrapper resultWrapper481483)}] (clojure.core/cond-> {} (letvar481484 "EventSubscription") (clojure.core/assoc :event-subscription (deser-event-subscription (clojure.core/get-in letvar481484 ["EventSubscription" :content])))))))

(clojure.core/defn- response-delete-db-snapshot-result ([input] (response-delete-db-snapshot-result nil input)) ([resultWrapper481486 input] (clojure.core/let [rawinput481485 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481487 {"DBSnapshot" (portkey.aws/search-for-tag rawinput481485 "DBSnapshot" :flattened? nil :result-wrapper resultWrapper481486)}] (clojure.core/cond-> {} (letvar481487 "DBSnapshot") (clojure.core/assoc :db-snapshot (deser-db-snapshot (clojure.core/get-in letvar481487 ["DBSnapshot" :content])))))))

(clojure.core/defn- response-snapshot-quota-exceeded-fault ([input] (response-snapshot-quota-exceeded-fault nil input)) ([resultWrapper481489 input] (clojure.core/let [rawinput481488 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481490 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-snapshot-already-exists-fault ([input] (response-db-snapshot-already-exists-fault nil input)) ([resultWrapper481492 input] (clojure.core/let [rawinput481491 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481493 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-restore-db-instance-to-point-in-time-result ([input] (response-restore-db-instance-to-point-in-time-result nil input)) ([resultWrapper481495 input] (clojure.core/let [rawinput481494 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481496 {"DBInstance" (portkey.aws/search-for-tag rawinput481494 "DBInstance" :flattened? nil :result-wrapper resultWrapper481495)}] (clojure.core/cond-> {} (letvar481496 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar481496 ["DBInstance" :content])))))))

(clojure.core/defn- response-db-parameter-group-details ([input] (response-db-parameter-group-details nil input)) ([resultWrapper481498 input] (clojure.core/let [rawinput481497 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481499 {"Parameters" (portkey.aws/search-for-tag rawinput481497 "Parameters" :flattened? nil :result-wrapper resultWrapper481498), "Marker" (portkey.aws/search-for-tag rawinput481497 "Marker" :flattened? nil :result-wrapper resultWrapper481498)}] (clojure.core/cond-> {} (letvar481499 "Parameters") (clojure.core/assoc :parameters (deser-parameters-list (clojure.core/get-in letvar481499 ["Parameters" :content]))) (letvar481499 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar481499 ["Marker" :content])))))))

(clojure.core/defn- response-invalid-db-instance-state-fault ([input] (response-invalid-db-instance-state-fault nil input)) ([resultWrapper481501 input] (clojure.core/let [rawinput481500 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481502 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-sns-no-authorization-fault ([input] (response-sns-no-authorization-fault nil input)) ([resultWrapper481504 input] (clojure.core/let [rawinput481503 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481505 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-reboot-db-instance-result ([input] (response-reboot-db-instance-result nil input)) ([resultWrapper481507 input] (clojure.core/let [rawinput481506 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481508 {"DBInstance" (portkey.aws/search-for-tag rawinput481506 "DBInstance" :flattened? nil :result-wrapper resultWrapper481507)}] (clojure.core/cond-> {} (letvar481508 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar481508 ["DBInstance" :content])))))))

(clojure.core/defn- response-instance-quota-exceeded-fault ([input] (response-instance-quota-exceeded-fault nil input)) ([resultWrapper481510 input] (clojure.core/let [rawinput481509 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481511 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-parameter-group-name-message ([input] (response-db-parameter-group-name-message nil input)) ([resultWrapper481513 input] (clojure.core/let [rawinput481512 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481514 {"DBParameterGroupName" (portkey.aws/search-for-tag rawinput481512 "DBParameterGroupName" :flattened? nil :result-wrapper resultWrapper481513)}] (clojure.core/cond-> {} (letvar481514 "DBParameterGroupName") (clojure.core/assoc :db-parameter-group-name (deser-string (clojure.core/get-in letvar481514 ["DBParameterGroupName" :content])))))))

(clojure.core/defn- response-option-group-not-found-fault ([input] (response-option-group-not-found-fault nil input)) ([resultWrapper481516 input] (clojure.core/let [rawinput481515 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481517 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-subnet-group-message ([input] (response-db-subnet-group-message nil input)) ([resultWrapper481519 input] (clojure.core/let [rawinput481518 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481520 {"Marker" (portkey.aws/search-for-tag rawinput481518 "Marker" :flattened? nil :result-wrapper resultWrapper481519), "DBSubnetGroups" (portkey.aws/search-for-tag rawinput481518 "DBSubnetGroups" :flattened? nil :result-wrapper resultWrapper481519)}] (clojure.core/cond-> {} (letvar481520 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar481520 ["Marker" :content]))) (letvar481520 "DBSubnetGroups") (clojure.core/assoc :db-subnet-groups (deser-db-subnet-groups (clojure.core/get-in letvar481520 ["DBSubnetGroups" :content])))))))

(clojure.core/defn- response-promote-read-replica-result ([input] (response-promote-read-replica-result nil input)) ([resultWrapper481522 input] (clojure.core/let [rawinput481521 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481523 {"DBInstance" (portkey.aws/search-for-tag rawinput481521 "DBInstance" :flattened? nil :result-wrapper resultWrapper481522)}] (clojure.core/cond-> {} (letvar481523 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar481523 ["DBInstance" :content])))))))

(clojure.core/defn- response-invalid-vpc-network-state-fault ([input] (response-invalid-vpc-network-state-fault nil input)) ([resultWrapper481525 input] (clojure.core/let [rawinput481524 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481526 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-instance-already-exists-fault ([input] (response-db-instance-already-exists-fault nil input)) ([resultWrapper481528 input] (clojure.core/let [rawinput481527 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481529 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-subnet-group-fault ([input] (response-invalid-db-subnet-group-fault nil input)) ([resultWrapper481531 input] (clojure.core/let [rawinput481530 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481532 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-orderable-db-instance-options-message ([input] (response-orderable-db-instance-options-message nil input)) ([resultWrapper481534 input] (clojure.core/let [rawinput481533 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481535 {"OrderableDBInstanceOptions" (portkey.aws/search-for-tag rawinput481533 "OrderableDBInstanceOptions" :flattened? nil :result-wrapper resultWrapper481534), "Marker" (portkey.aws/search-for-tag rawinput481533 "Marker" :flattened? nil :result-wrapper resultWrapper481534)}] (clojure.core/cond-> {} (letvar481535 "OrderableDBInstanceOptions") (clojure.core/assoc :orderable-db-instance-options (deser-orderable-db-instance-options-list (clojure.core/get-in letvar481535 ["OrderableDBInstanceOptions" :content]))) (letvar481535 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar481535 ["Marker" :content])))))))

(clojure.core/defn- response-event-categories-message ([input] (response-event-categories-message nil input)) ([resultWrapper481537 input] (clojure.core/let [rawinput481536 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481538 {"EventCategoriesMapList" (portkey.aws/search-for-tag rawinput481536 "EventCategoriesMapList" :flattened? nil :result-wrapper resultWrapper481537)}] (clojure.core/cond-> {} (letvar481538 "EventCategoriesMapList") (clojure.core/assoc :event-categories-map-list (deser-event-categories-map-list (clojure.core/get-in letvar481538 ["EventCategoriesMapList" :content])))))))

(clojure.core/defn- response-subscription-not-found-fault ([input] (response-subscription-not-found-fault nil input)) ([resultWrapper481540 input] (clojure.core/let [rawinput481539 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481541 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-authorization-already-exists-fault ([input] (response-authorization-already-exists-fault nil input)) ([resultWrapper481543 input] (clojure.core/let [rawinput481542 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481544 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-subnet-group-state-fault ([input] (response-invalid-db-subnet-group-state-fault nil input)) ([resultWrapper481546 input] (clojure.core/let [rawinput481545 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481547 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-option-group-already-exists-fault ([input] (response-option-group-already-exists-fault nil input)) ([resultWrapper481549 input] (clojure.core/let [rawinput481548 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481550 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-db-snapshot-result ([input] (response-create-db-snapshot-result nil input)) ([resultWrapper481552 input] (clojure.core/let [rawinput481551 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481553 {"DBSnapshot" (portkey.aws/search-for-tag rawinput481551 "DBSnapshot" :flattened? nil :result-wrapper resultWrapper481552)}] (clojure.core/cond-> {} (letvar481553 "DBSnapshot") (clojure.core/assoc :db-snapshot (deser-db-snapshot (clojure.core/get-in letvar481553 ["DBSnapshot" :content])))))))

(clojure.core/defn- response-sns-topic-arn-not-found-fault ([input] (response-sns-topic-arn-not-found-fault nil input)) ([resultWrapper481555 input] (clojure.core/let [rawinput481554 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481556 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-events-message ([input] (response-events-message nil input)) ([resultWrapper481558 input] (clojure.core/let [rawinput481557 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481559 {"Marker" (portkey.aws/search-for-tag rawinput481557 "Marker" :flattened? nil :result-wrapper resultWrapper481558), "Events" (portkey.aws/search-for-tag rawinput481557 "Events" :flattened? nil :result-wrapper resultWrapper481558)}] (clojure.core/cond-> {} (letvar481559 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar481559 ["Marker" :content]))) (letvar481559 "Events") (clojure.core/assoc :events (deser-event-list (clojure.core/get-in letvar481559 ["Events" :content])))))))

(clojure.core/defn- response-db-snapshot-message ([input] (response-db-snapshot-message nil input)) ([resultWrapper481561 input] (clojure.core/let [rawinput481560 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481562 {"Marker" (portkey.aws/search-for-tag rawinput481560 "Marker" :flattened? nil :result-wrapper resultWrapper481561), "DBSnapshots" (portkey.aws/search-for-tag rawinput481560 "DBSnapshots" :flattened? nil :result-wrapper resultWrapper481561)}] (clojure.core/cond-> {} (letvar481562 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar481562 ["Marker" :content]))) (letvar481562 "DBSnapshots") (clojure.core/assoc :db-snapshots (deser-db-snapshot-list (clojure.core/get-in letvar481562 ["DBSnapshots" :content])))))))

(clojure.core/defn- response-subscription-category-not-found-fault ([input] (response-subscription-category-not-found-fault nil input)) ([resultWrapper481564 input] (clojure.core/let [rawinput481563 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481565 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-option-group-options-message ([input] (response-option-group-options-message nil input)) ([resultWrapper481567 input] (clojure.core/let [rawinput481566 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481568 {"OptionGroupOptions" (portkey.aws/search-for-tag rawinput481566 "OptionGroupOptions" :flattened? nil :result-wrapper resultWrapper481567), "Marker" (portkey.aws/search-for-tag rawinput481566 "Marker" :flattened? nil :result-wrapper resultWrapper481567)}] (clojure.core/cond-> {} (letvar481568 "OptionGroupOptions") (clojure.core/assoc :option-group-options (deser-option-group-options-list (clojure.core/get-in letvar481568 ["OptionGroupOptions" :content]))) (letvar481568 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar481568 ["Marker" :content])))))))

(clojure.core/defn- response-revoke-db-security-group-ingress-result ([input] (response-revoke-db-security-group-ingress-result nil input)) ([resultWrapper481570 input] (clojure.core/let [rawinput481569 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481571 {"DBSecurityGroup" (portkey.aws/search-for-tag rawinput481569 "DBSecurityGroup" :flattened? nil :result-wrapper resultWrapper481570)}] (clojure.core/cond-> {} (letvar481571 "DBSecurityGroup") (clojure.core/assoc :db-security-group (deser-db-security-group (clojure.core/get-in letvar481571 ["DBSecurityGroup" :content])))))))

(clojure.core/defn- response-event-subscriptions-message ([input] (response-event-subscriptions-message nil input)) ([resultWrapper481573 input] (clojure.core/let [rawinput481572 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481574 {"Marker" (portkey.aws/search-for-tag rawinput481572 "Marker" :flattened? nil :result-wrapper resultWrapper481573), "EventSubscriptionsList" (portkey.aws/search-for-tag rawinput481572 "EventSubscriptionsList" :flattened? nil :result-wrapper resultWrapper481573)}] (clojure.core/cond-> {} (letvar481574 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar481574 ["Marker" :content]))) (letvar481574 "EventSubscriptionsList") (clojure.core/assoc :event-subscriptions-list (deser-event-subscriptions-list (clojure.core/get-in letvar481574 ["EventSubscriptionsList" :content])))))))

(clojure.core/defn- response-reserved-db-instances-offering-message ([input] (response-reserved-db-instances-offering-message nil input)) ([resultWrapper481576 input] (clojure.core/let [rawinput481575 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481577 {"Marker" (portkey.aws/search-for-tag rawinput481575 "Marker" :flattened? nil :result-wrapper resultWrapper481576), "ReservedDBInstancesOfferings" (portkey.aws/search-for-tag rawinput481575 "ReservedDBInstancesOfferings" :flattened? nil :result-wrapper resultWrapper481576)}] (clojure.core/cond-> {} (letvar481577 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar481577 ["Marker" :content]))) (letvar481577 "ReservedDBInstancesOfferings") (clojure.core/assoc :reserved-db-instances-offerings (deser-reserved-db-instances-offering-list (clojure.core/get-in letvar481577 ["ReservedDBInstancesOfferings" :content])))))))

(clojure.core/defn- response-create-db-subnet-group-result ([input] (response-create-db-subnet-group-result nil input)) ([resultWrapper481579 input] (clojure.core/let [rawinput481578 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481580 {"DBSubnetGroup" (portkey.aws/search-for-tag rawinput481578 "DBSubnetGroup" :flattened? nil :result-wrapper resultWrapper481579)}] (clojure.core/cond-> {} (letvar481580 "DBSubnetGroup") (clojure.core/assoc :db-subnet-group (deser-db-subnet-group (clojure.core/get-in letvar481580 ["DBSubnetGroup" :content])))))))

(clojure.core/defn- response-create-event-subscription-result ([input] (response-create-event-subscription-result nil input)) ([resultWrapper481582 input] (clojure.core/let [rawinput481581 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481583 {"EventSubscription" (portkey.aws/search-for-tag rawinput481581 "EventSubscription" :flattened? nil :result-wrapper resultWrapper481582)}] (clojure.core/cond-> {} (letvar481583 "EventSubscription") (clojure.core/assoc :event-subscription (deser-event-subscription (clojure.core/get-in letvar481583 ["EventSubscription" :content])))))))

(clojure.core/defn- response-create-db-security-group-result ([input] (response-create-db-security-group-result nil input)) ([resultWrapper481585 input] (clojure.core/let [rawinput481584 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481586 {"DBSecurityGroup" (portkey.aws/search-for-tag rawinput481584 "DBSecurityGroup" :flattened? nil :result-wrapper resultWrapper481585)}] (clojure.core/cond-> {} (letvar481586 "DBSecurityGroup") (clojure.core/assoc :db-security-group (deser-db-security-group (clojure.core/get-in letvar481586 ["DBSecurityGroup" :content])))))))

(clojure.core/defn- response-invalid-db-security-group-state-fault ([input] (response-invalid-db-security-group-state-fault nil input)) ([resultWrapper481588 input] (clojure.core/let [rawinput481587 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481589 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-option-groups ([input] (response-option-groups nil input)) ([resultWrapper481591 input] (clojure.core/let [rawinput481590 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481592 {"OptionGroupsList" (portkey.aws/search-for-tag rawinput481590 "OptionGroupsList" :flattened? nil :result-wrapper resultWrapper481591), "Marker" (portkey.aws/search-for-tag rawinput481590 "Marker" :flattened? nil :result-wrapper resultWrapper481591)}] (clojure.core/cond-> {} (letvar481592 "OptionGroupsList") (clojure.core/assoc :option-groups-list (deser-option-groups-list (clojure.core/get-in letvar481592 ["OptionGroupsList" :content]))) (letvar481592 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar481592 ["Marker" :content])))))))

(clojure.core/defn- response-authorize-db-security-group-ingress-result ([input] (response-authorize-db-security-group-ingress-result nil input)) ([resultWrapper481594 input] (clojure.core/let [rawinput481593 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481595 {"DBSecurityGroup" (portkey.aws/search-for-tag rawinput481593 "DBSecurityGroup" :flattened? nil :result-wrapper resultWrapper481594)}] (clojure.core/cond-> {} (letvar481595 "DBSecurityGroup") (clojure.core/assoc :db-security-group (deser-db-security-group (clojure.core/get-in letvar481595 ["DBSecurityGroup" :content])))))))

(clojure.core/defn- response-db-subnet-group-does-not-cover-enough-a-zs ([input] (response-db-subnet-group-does-not-cover-enough-a-zs nil input)) ([resultWrapper481597 input] (clojure.core/let [rawinput481596 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481598 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-parameter-groups-message ([input] (response-db-parameter-groups-message nil input)) ([resultWrapper481600 input] (clojure.core/let [rawinput481599 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481601 {"Marker" (portkey.aws/search-for-tag rawinput481599 "Marker" :flattened? nil :result-wrapper resultWrapper481600), "DBParameterGroups" (portkey.aws/search-for-tag rawinput481599 "DBParameterGroups" :flattened? nil :result-wrapper resultWrapper481600)}] (clojure.core/cond-> {} (letvar481601 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar481601 ["Marker" :content]))) (letvar481601 "DBParameterGroups") (clojure.core/assoc :db-parameter-groups (deser-db-parameter-group-list (clojure.core/get-in letvar481601 ["DBParameterGroups" :content])))))))

(clojure.core/defn- response-describe-engine-default-parameters-result ([input] (response-describe-engine-default-parameters-result nil input)) ([resultWrapper481603 input] (clojure.core/let [rawinput481602 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481604 {"EngineDefaults" (portkey.aws/search-for-tag rawinput481602 "EngineDefaults" :flattened? nil :result-wrapper resultWrapper481603)}] (clojure.core/cond-> {} (letvar481604 "EngineDefaults") (clojure.core/assoc :engine-defaults (deser-engine-defaults (clojure.core/get-in letvar481604 ["EngineDefaults" :content])))))))

(clojure.core/defn- response-authorization-not-found-fault ([input] (response-authorization-not-found-fault nil input)) ([resultWrapper481606 input] (clojure.core/let [rawinput481605 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481607 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-db-instance-result ([input] (response-create-db-instance-result nil input)) ([resultWrapper481609 input] (clojure.core/let [rawinput481608 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481610 {"DBInstance" (portkey.aws/search-for-tag rawinput481608 "DBInstance" :flattened? nil :result-wrapper resultWrapper481609)}] (clojure.core/cond-> {} (letvar481610 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar481610 ["DBInstance" :content])))))))

(clojure.core/defn- response-subnet-already-in-use ([input] (response-subnet-already-in-use nil input)) ([resultWrapper481612 input] (clojure.core/let [rawinput481611 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481613 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-option-group-result ([input] (response-create-option-group-result nil input)) ([resultWrapper481615 input] (clojure.core/let [rawinput481614 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481616 {"OptionGroup" (portkey.aws/search-for-tag rawinput481614 "OptionGroup" :flattened? nil :result-wrapper resultWrapper481615)}] (clojure.core/cond-> {} (letvar481616 "OptionGroup") (clojure.core/assoc :option-group (deser-option-group (clojure.core/get-in letvar481616 ["OptionGroup" :content])))))))

(clojure.core/defn- response-copy-db-snapshot-result ([input] (response-copy-db-snapshot-result nil input)) ([resultWrapper481618 input] (clojure.core/let [rawinput481617 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481619 {"DBSnapshot" (portkey.aws/search-for-tag rawinput481617 "DBSnapshot" :flattened? nil :result-wrapper resultWrapper481618)}] (clojure.core/cond-> {} (letvar481619 "DBSnapshot") (clojure.core/assoc :db-snapshot (deser-db-snapshot (clojure.core/get-in letvar481619 ["DBSnapshot" :content])))))))

(clojure.core/defn- response-modify-db-subnet-group-result ([input] (response-modify-db-subnet-group-result nil input)) ([resultWrapper481621 input] (clojure.core/let [rawinput481620 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481622 {"DBSubnetGroup" (portkey.aws/search-for-tag rawinput481620 "DBSubnetGroup" :flattened? nil :result-wrapper resultWrapper481621)}] (clojure.core/cond-> {} (letvar481622 "DBSubnetGroup") (clojure.core/assoc :db-subnet-group (deser-db-subnet-group (clojure.core/get-in letvar481622 ["DBSubnetGroup" :content])))))))

(clojure.core/defn- response-option-group-quota-exceeded-fault ([input] (response-option-group-quota-exceeded-fault nil input)) ([resultWrapper481624 input] (clojure.core/let [rawinput481623 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481625 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-subnet ([input] (response-invalid-subnet nil input)) ([resultWrapper481627 input] (clojure.core/let [rawinput481626 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481628 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-modify-option-group-result ([input] (response-modify-option-group-result nil input)) ([resultWrapper481630 input] (clojure.core/let [rawinput481629 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481631 {"OptionGroup" (portkey.aws/search-for-tag rawinput481629 "OptionGroup" :flattened? nil :result-wrapper resultWrapper481630)}] (clojure.core/cond-> {} (letvar481631 "OptionGroup") (clojure.core/assoc :option-group (deser-option-group (clojure.core/get-in letvar481631 ["OptionGroup" :content])))))))

(clojure.core/defn- response-subscription-already-exist-fault ([input] (response-subscription-already-exist-fault nil input)) ([resultWrapper481633 input] (clojure.core/let [rawinput481632 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481634 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-upgrade-dependency-failure-fault ([input] (response-db-upgrade-dependency-failure-fault nil input)) ([resultWrapper481636 input] (clojure.core/let [rawinput481635 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481637 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-event-subscription-state-fault ([input] (response-invalid-event-subscription-state-fault nil input)) ([resultWrapper481639 input] (clojure.core/let [rawinput481638 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481640 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-tag-list-message ([input] (response-tag-list-message nil input)) ([resultWrapper481642 input] (clojure.core/let [rawinput481641 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481643 {"TagList" (portkey.aws/search-for-tag rawinput481641 "TagList" :flattened? nil :result-wrapper resultWrapper481642)}] (clojure.core/cond-> {} (letvar481643 "TagList") (clojure.core/assoc :tag-list (deser-tag-list (clojure.core/get-in letvar481643 ["TagList" :content])))))))

(clojure.core/defn- response-authorization-quota-exceeded-fault ([input] (response-authorization-quota-exceeded-fault nil input)) ([resultWrapper481645 input] (clojure.core/let [rawinput481644 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481646 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-subnet-group-not-found-fault ([input] (response-db-subnet-group-not-found-fault nil input)) ([resultWrapper481648 input] (clojure.core/let [rawinput481647 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481649 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-log-file-not-found-fault ([input] (response-db-log-file-not-found-fault nil input)) ([resultWrapper481651 input] (clojure.core/let [rawinput481650 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481652 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-provisioned-iops-not-available-in-az-fault ([input] (response-provisioned-iops-not-available-in-az-fault nil input)) ([resultWrapper481654 input] (clojure.core/let [rawinput481653 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481655 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-reserved-db-instance-message ([input] (response-reserved-db-instance-message nil input)) ([resultWrapper481657 input] (clojure.core/let [rawinput481656 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481658 {"Marker" (portkey.aws/search-for-tag rawinput481656 "Marker" :flattened? nil :result-wrapper resultWrapper481657), "ReservedDBInstances" (portkey.aws/search-for-tag rawinput481656 "ReservedDBInstances" :flattened? nil :result-wrapper resultWrapper481657)}] (clojure.core/cond-> {} (letvar481658 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar481658 ["Marker" :content]))) (letvar481658 "ReservedDBInstances") (clojure.core/assoc :reserved-db-instances (deser-reserved-db-instance-list (clojure.core/get-in letvar481658 ["ReservedDBInstances" :content])))))))

(clojure.core/defn- response-modify-db-instance-result ([input] (response-modify-db-instance-result nil input)) ([resultWrapper481660 input] (clojure.core/let [rawinput481659 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481661 {"DBInstance" (portkey.aws/search-for-tag rawinput481659 "DBInstance" :flattened? nil :result-wrapper resultWrapper481660)}] (clojure.core/cond-> {} (letvar481661 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar481661 ["DBInstance" :content])))))))

(clojure.core/defn- response-reserved-db-instance-not-found-fault ([input] (response-reserved-db-instance-not-found-fault nil input)) ([resultWrapper481663 input] (clojure.core/let [rawinput481662 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481664 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-option-group-state-fault ([input] (response-invalid-option-group-state-fault nil input)) ([resultWrapper481666 input] (clojure.core/let [rawinput481665 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481667 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-point-in-time-restore-not-enabled-fault ([input] (response-point-in-time-restore-not-enabled-fault nil input)) ([resultWrapper481669 input] (clojure.core/let [rawinput481668 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481670 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-subnet-group-not-allowed-fault ([input] (response-db-subnet-group-not-allowed-fault nil input)) ([resultWrapper481672 input] (clojure.core/let [rawinput481671 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481673 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-parameter-group-not-found-fault ([input] (response-db-parameter-group-not-found-fault nil input)) ([resultWrapper481675 input] (clojure.core/let [rawinput481674 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481676 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-event-subscription-quota-exceeded-fault ([input] (response-event-subscription-quota-exceeded-fault nil input)) ([resultWrapper481678 input] (clojure.core/let [rawinput481677 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481679 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-describe-db-log-files-response ([input] (response-describe-db-log-files-response nil input)) ([resultWrapper481681 input] (clojure.core/let [rawinput481680 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481682 {"DescribeDBLogFiles" (portkey.aws/search-for-tag rawinput481680 "DescribeDBLogFiles" :flattened? nil :result-wrapper resultWrapper481681), "Marker" (portkey.aws/search-for-tag rawinput481680 "Marker" :flattened? nil :result-wrapper resultWrapper481681)}] (clojure.core/cond-> {} (letvar481682 "DescribeDBLogFiles") (clojure.core/assoc :describe-db-log-files (deser-describe-db-log-files-list (clojure.core/get-in letvar481682 ["DescribeDBLogFiles" :content]))) (letvar481682 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar481682 ["Marker" :content])))))))

(clojure.core/defn- response-db-engine-version-message ([input] (response-db-engine-version-message nil input)) ([resultWrapper481684 input] (clojure.core/let [rawinput481683 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481685 {"Marker" (portkey.aws/search-for-tag rawinput481683 "Marker" :flattened? nil :result-wrapper resultWrapper481684), "DBEngineVersions" (portkey.aws/search-for-tag rawinput481683 "DBEngineVersions" :flattened? nil :result-wrapper resultWrapper481684)}] (clojure.core/cond-> {} (letvar481685 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar481685 ["Marker" :content]))) (letvar481685 "DBEngineVersions") (clojure.core/assoc :db-engine-versions (deser-db-engine-version-list (clojure.core/get-in letvar481685 ["DBEngineVersions" :content])))))))

(clojure.core/defn- response-db-instance-message ([input] (response-db-instance-message nil input)) ([resultWrapper481687 input] (clojure.core/let [rawinput481686 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481688 {"Marker" (portkey.aws/search-for-tag rawinput481686 "Marker" :flattened? nil :result-wrapper resultWrapper481687), "DBInstances" (portkey.aws/search-for-tag rawinput481686 "DBInstances" :flattened? nil :result-wrapper resultWrapper481687)}] (clojure.core/cond-> {} (letvar481688 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar481688 ["Marker" :content]))) (letvar481688 "DBInstances") (clojure.core/assoc :db-instances (deser-db-instance-list (clojure.core/get-in letvar481688 ["DBInstances" :content])))))))

(clojure.core/defn- response-reserved-db-instance-already-exists-fault ([input] (response-reserved-db-instance-already-exists-fault nil input)) ([resultWrapper481690 input] (clojure.core/let [rawinput481689 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481691 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-security-group-not-supported-fault ([input] (response-db-security-group-not-supported-fault nil input)) ([resultWrapper481693 input] (clojure.core/let [rawinput481692 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481694 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-db-parameter-group-result ([input] (response-create-db-parameter-group-result nil input)) ([resultWrapper481696 input] (clojure.core/let [rawinput481695 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481697 {"DBParameterGroup" (portkey.aws/search-for-tag rawinput481695 "DBParameterGroup" :flattened? nil :result-wrapper resultWrapper481696)}] (clojure.core/cond-> {} (letvar481697 "DBParameterGroup") (clojure.core/assoc :db-parameter-group (deser-db-parameter-group (clojure.core/get-in letvar481697 ["DBParameterGroup" :content])))))))

(clojure.core/defn- response-storage-quota-exceeded-fault ([input] (response-storage-quota-exceeded-fault nil input)) ([resultWrapper481699 input] (clojure.core/let [rawinput481698 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481700 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-restore-fault ([input] (response-invalid-restore-fault nil input)) ([resultWrapper481702 input] (clojure.core/let [rawinput481701 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481703 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-security-group-quota-exceeded-fault ([input] (response-db-security-group-quota-exceeded-fault nil input)) ([resultWrapper481705 input] (clojure.core/let [rawinput481704 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481706 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-parameter-group-already-exists-fault ([input] (response-db-parameter-group-already-exists-fault nil input)) ([resultWrapper481708 input] (clojure.core/let [rawinput481707 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481709 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-subnet-state-fault ([input] (response-invalid-db-subnet-state-fault nil input)) ([resultWrapper481711 input] (clojure.core/let [rawinput481710 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481712 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-parameter-group-quota-exceeded-fault ([input] (response-db-parameter-group-quota-exceeded-fault nil input)) ([resultWrapper481714 input] (clojure.core/let [rawinput481713 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481715 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-modify-event-subscription-result ([input] (response-modify-event-subscription-result nil input)) ([resultWrapper481717 input] (clojure.core/let [rawinput481716 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481718 {"EventSubscription" (portkey.aws/search-for-tag rawinput481716 "EventSubscription" :flattened? nil :result-wrapper resultWrapper481717)}] (clojure.core/cond-> {} (letvar481718 "EventSubscription") (clojure.core/assoc :event-subscription (deser-event-subscription (clojure.core/get-in letvar481718 ["EventSubscription" :content])))))))

(clojure.core/defn- response-insufficient-db-instance-capacity-fault ([input] (response-insufficient-db-instance-capacity-fault nil input)) ([resultWrapper481720 input] (clojure.core/let [rawinput481719 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481721 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-sns-invalid-topic-fault ([input] (response-sns-invalid-topic-fault nil input)) ([resultWrapper481723 input] (clojure.core/let [rawinput481722 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481724 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-delete-db-instance-result ([input] (response-delete-db-instance-result nil input)) ([resultWrapper481726 input] (clojure.core/let [rawinput481725 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481727 {"DBInstance" (portkey.aws/search-for-tag rawinput481725 "DBInstance" :flattened? nil :result-wrapper resultWrapper481726)}] (clojure.core/cond-> {} (letvar481727 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar481727 ["DBInstance" :content])))))))

(clojure.core/defn- response-delete-event-subscription-result ([input] (response-delete-event-subscription-result nil input)) ([resultWrapper481729 input] (clojure.core/let [rawinput481728 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481730 {"EventSubscription" (portkey.aws/search-for-tag rawinput481728 "EventSubscription" :flattened? nil :result-wrapper resultWrapper481729)}] (clojure.core/cond-> {} (letvar481730 "EventSubscription") (clojure.core/assoc :event-subscription (deser-event-subscription (clojure.core/get-in letvar481730 ["EventSubscription" :content])))))))

(clojure.core/defn- response-reserved-db-instances-offering-not-found-fault ([input] (response-reserved-db-instances-offering-not-found-fault nil input)) ([resultWrapper481732 input] (clojure.core/let [rawinput481731 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481733 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-subnet-group-quota-exceeded-fault ([input] (response-db-subnet-group-quota-exceeded-fault nil input)) ([resultWrapper481735 input] (clojure.core/let [rawinput481734 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481736 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-add-source-identifier-to-subscription-result ([input] (response-add-source-identifier-to-subscription-result nil input)) ([resultWrapper481738 input] (clojure.core/let [rawinput481737 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481739 {"EventSubscription" (portkey.aws/search-for-tag rawinput481737 "EventSubscription" :flattened? nil :result-wrapper resultWrapper481738)}] (clojure.core/cond-> {} (letvar481739 "EventSubscription") (clojure.core/assoc :event-subscription (deser-event-subscription (clojure.core/get-in letvar481739 ["EventSubscription" :content])))))))

(clojure.core/defn- response-db-security-group-message ([input] (response-db-security-group-message nil input)) ([resultWrapper481741 input] (clojure.core/let [rawinput481740 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481742 {"Marker" (portkey.aws/search-for-tag rawinput481740 "Marker" :flattened? nil :result-wrapper resultWrapper481741), "DBSecurityGroups" (portkey.aws/search-for-tag rawinput481740 "DBSecurityGroups" :flattened? nil :result-wrapper resultWrapper481741)}] (clojure.core/cond-> {} (letvar481742 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar481742 ["Marker" :content]))) (letvar481742 "DBSecurityGroups") (clojure.core/assoc :db-security-groups (deser-db-security-groups (clojure.core/get-in letvar481742 ["DBSecurityGroups" :content])))))))

(clojure.core/defn- response-db-subnet-quota-exceeded-fault ([input] (response-db-subnet-quota-exceeded-fault nil input)) ([resultWrapper481744 input] (clojure.core/let [rawinput481743 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481745 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-snapshot-state-fault ([input] (response-invalid-db-snapshot-state-fault nil input)) ([resultWrapper481747 input] (clojure.core/let [rawinput481746 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481748 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-reserved-db-instance-quota-exceeded-fault ([input] (response-reserved-db-instance-quota-exceeded-fault nil input)) ([resultWrapper481750 input] (clojure.core/let [rawinput481749 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481751 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-purchase-reserved-db-instances-offering-result ([input] (response-purchase-reserved-db-instances-offering-result nil input)) ([resultWrapper481753 input] (clojure.core/let [rawinput481752 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481754 {"ReservedDBInstance" (portkey.aws/search-for-tag rawinput481752 "ReservedDBInstance" :flattened? nil :result-wrapper resultWrapper481753)}] (clojure.core/cond-> {} (letvar481754 "ReservedDBInstance") (clojure.core/assoc :reserved-db-instance (deser-reserved-db-instance (clojure.core/get-in letvar481754 ["ReservedDBInstance" :content])))))))

(clojure.core/defn- response-db-subnet-group-already-exists-fault ([input] (response-db-subnet-group-already-exists-fault nil input)) ([resultWrapper481756 input] (clojure.core/let [rawinput481755 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481757 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-db-instance-read-replica-result ([input] (response-create-db-instance-read-replica-result nil input)) ([resultWrapper481759 input] (clojure.core/let [rawinput481758 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481760 {"DBInstance" (portkey.aws/search-for-tag rawinput481758 "DBInstance" :flattened? nil :result-wrapper resultWrapper481759)}] (clojure.core/cond-> {} (letvar481760 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar481760 ["DBInstance" :content])))))))

(clojure.core/defn- response-download-db-log-file-portion-details ([input] (response-download-db-log-file-portion-details nil input)) ([resultWrapper481762 input] (clojure.core/let [rawinput481761 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481763 {"LogFileData" (portkey.aws/search-for-tag rawinput481761 "LogFileData" :flattened? nil :result-wrapper resultWrapper481762), "Marker" (portkey.aws/search-for-tag rawinput481761 "Marker" :flattened? nil :result-wrapper resultWrapper481762), "AdditionalDataPending" (portkey.aws/search-for-tag rawinput481761 "AdditionalDataPending" :flattened? nil :result-wrapper resultWrapper481762)}] (clojure.core/cond-> {} (letvar481763 "LogFileData") (clojure.core/assoc :log-file-data (deser-string (clojure.core/get-in letvar481763 ["LogFileData" :content]))) (letvar481763 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar481763 ["Marker" :content]))) (letvar481763 "AdditionalDataPending") (clojure.core/assoc :additional-data-pending (deser-boolean (clojure.core/get-in letvar481763 ["AdditionalDataPending" :content])))))))

(clojure.core/defn- response-db-snapshot-not-found-fault ([input] (response-db-snapshot-not-found-fault nil input)) ([resultWrapper481765 input] (clojure.core/let [rawinput481764 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481766 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-parameter-group-state-fault ([input] (response-invalid-db-parameter-group-state-fault nil input)) ([resultWrapper481768 input] (clojure.core/let [rawinput481767 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481769 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-security-group-not-found-fault ([input] (response-db-security-group-not-found-fault nil input)) ([resultWrapper481771 input] (clojure.core/let [rawinput481770 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481772 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-security-group-already-exists-fault ([input] (response-db-security-group-already-exists-fault nil input)) ([resultWrapper481774 input] (clojure.core/let [rawinput481773 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar481775 {}] (clojure.core/cond-> {}))))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/source-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/vpc-security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/vpc-security-group-membership))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/subnet-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-instance-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/restore-db-instance-from-db-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/remove-source-identifier-from-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/delete-db-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/db-snapshot]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/snapshot-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/filter-value-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/parameters-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/parameter))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/ec-2-security-group-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/ec-2-security-group))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-snapshot-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.filter/name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.filter/values (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/filter-value-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/filter (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.filter/name :portkey.aws.rds.-2013-09-09.filter/values] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-parameter-group-status/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-parameter-group-status/parameter-apply-status (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-parameter-group-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.db-parameter-group-status/db-parameter-group-name :portkey.aws.rds.-2013-09-09.db-parameter-group-status/parameter-apply-status]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-security-groups (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/db-security-group))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-instances-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-instances-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-instances-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-instances-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/describe-db-instances-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.describe-db-instances-message/db-instance-identifier :portkey.aws.rds.-2013-09-09.describe-db-instances-message/filters :portkey.aws.rds.-2013-09-09.describe-db-instances-message/max-records :portkey.aws.rds.-2013-09-09.describe-db-instances-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/restore-db-instance-to-point-in-time-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.delete-db-snapshot-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/delete-db-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.delete-db-snapshot-message/db-snapshot-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-snapshots-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-snapshots-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-snapshots-message/snapshot-type (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-snapshots-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-snapshots-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-snapshots-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/describe-db-snapshots-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.describe-db-snapshots-message/db-instance-identifier :portkey.aws.rds.-2013-09-09.describe-db-snapshots-message/db-snapshot-identifier :portkey.aws.rds.-2013-09-09.describe-db-snapshots-message/snapshot-type :portkey.aws.rds.-2013-09-09.describe-db-snapshots-message/filters :portkey.aws.rds.-2013-09-09.describe-db-snapshots-message/max-records :portkey.aws.rds.-2013-09-09.describe-db-snapshots-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-parameter-group-details/parameters (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-parameter-group-details/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-parameter-group-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.db-parameter-group-details/parameters :portkey.aws.rds.-2013-09-09.db-parameter-group-details/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.delete-db-parameter-group-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/delete-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.delete-db-parameter-group-message/db-parameter-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/source-ids-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/options-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/option))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-engine-default-parameters-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-engine-default-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-engine-default-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-engine-default-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/describe-engine-default-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.describe-engine-default-parameters-message/db-parameter-group-family] :opt-un [:portkey.aws.rds.-2013-09-09.describe-engine-default-parameters-message/filters :portkey.aws.rds.-2013-09-09.describe-engine-default-parameters-message/max-records :portkey.aws.rds.-2013-09-09.describe-engine-default-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/invalid-db-instance-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/sns-no-authorization-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option/option-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option/option-description (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option/persistent (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option/permanent (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option/port (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option/option-settings (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/option-setting-configuration-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option/db-security-group-memberships (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/db-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option/vpc-security-group-memberships (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/vpc-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/option (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.option/option-name :portkey.aws.rds.-2013-09-09.option/option-description :portkey.aws.rds.-2013-09-09.option/persistent :portkey.aws.rds.-2013-09-09.option/permanent :portkey.aws.rds.-2013-09-09.option/port :portkey.aws.rds.-2013-09-09.option/option-settings :portkey.aws.rds.-2013-09-09.option/db-security-group-memberships :portkey.aws.rds.-2013-09-09.option/vpc-security-group-memberships]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/option-group-options-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/option-group-option))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-snapshot-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-snapshot-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/create-db-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.create-db-snapshot-message/db-snapshot-identifier :portkey.aws.rds.-2013-09-09.create-db-snapshot-message/db-instance-identifier] :opt-un [:portkey.aws.rds.-2013-09-09.create-db-snapshot-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-parameter-group-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/db-parameter-group))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/reboot-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/instance-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-parameter-group-status-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/db-parameter-group-status))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-parameter-group-name-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-parameter-group-name-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.db-parameter-group-name-message/db-parameter-group-name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-engine-versions-message/engine (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-engine-versions-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-engine-versions-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-engine-versions-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-engine-versions-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-engine-versions-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-engine-versions-message/default-only (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-engine-versions-message/list-supported-character-sets (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/describe-db-engine-versions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.describe-db-engine-versions-message/engine :portkey.aws.rds.-2013-09-09.describe-db-engine-versions-message/engine-version :portkey.aws.rds.-2013-09-09.describe-db-engine-versions-message/db-parameter-group-family :portkey.aws.rds.-2013-09-09.describe-db-engine-versions-message/filters :portkey.aws.rds.-2013-09-09.describe-db-engine-versions-message/max-records :portkey.aws.rds.-2013-09-09.describe-db-engine-versions-message/marker :portkey.aws.rds.-2013-09-09.describe-db-engine-versions-message/default-only :portkey.aws.rds.-2013-09-09.describe-db-engine-versions-message/list-supported-character-sets]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-event-subscriptions-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-event-subscriptions-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-event-subscriptions-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-event-subscriptions-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/describe-event-subscriptions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.describe-event-subscriptions-message/subscription-name :portkey.aws.rds.-2013-09-09.describe-event-subscriptions-message/filters :portkey.aws.rds.-2013-09-09.describe-event-subscriptions-message/max-records :portkey.aws.rds.-2013-09-09.describe-event-subscriptions-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-subnet-groups-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-subnet-groups-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-subnet-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-subnet-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/describe-db-subnet-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.describe-db-subnet-groups-message/db-subnet-group-name :portkey.aws.rds.-2013-09-09.describe-db-subnet-groups-message/filters :portkey.aws.rds.-2013-09-09.describe-db-subnet-groups-message/max-records :portkey.aws.rds.-2013-09-09.describe-db-subnet-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/db-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/port (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/iops (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/engine (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/restore-db-instance-from-db-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/db-instance-identifier :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/db-snapshot-identifier] :opt-un [:portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/option-group-name :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/publicly-accessible :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/auto-minor-version-upgrade :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/tags :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/db-name :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/availability-zone :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/license-model :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/db-subnet-group-name :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/port :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/iops :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/db-instance-class :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/engine :portkey.aws.rds.-2013-09-09.restore-db-instance-from-db-snapshot-message/multi-az]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group-option-setting/setting-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group-option-setting/setting-description (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group-option-setting/default-value (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group-option-setting/apply-type (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group-option-setting/allowed-values (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group-option-setting/is-modifiable (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/option-group-option-setting (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.option-group-option-setting/setting-name :portkey.aws.rds.-2013-09-09.option-group-option-setting/setting-description :portkey.aws.rds.-2013-09-09.option-group-option-setting/default-value :portkey.aws.rds.-2013-09-09.option-group-option-setting/apply-type :portkey.aws.rds.-2013-09-09.option-group-option-setting/allowed-values :portkey.aws.rds.-2013-09-09.option-group-option-setting/is-modifiable]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.subnet/subnet-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.subnet/subnet-availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/availability-zone))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.subnet/subnet-status (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/subnet (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.subnet/subnet-identifier :portkey.aws.rds.-2013-09-09.subnet/subnet-availability-zone :portkey.aws.rds.-2013-09-09.subnet/subnet-status]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/option-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-subnet-group-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-subnet-group-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.db-subnet-group-message/marker :portkey.aws.rds.-2013-09-09/db-subnet-groups]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-db-subnet-group-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-db-subnet-group-message/db-subnet-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-db-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/modify-db-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.modify-db-subnet-group-message/db-subnet-group-name :portkey.aws.rds.-2013-09-09.modify-db-subnet-group-message/subnet-ids] :opt-un [:portkey.aws.rds.-2013-09-09.modify-db-subnet-group-message/db-subnet-group-description]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.delete-db-security-group-message/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/delete-db-security-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.delete-db-security-group-message/db-security-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/promote-read-replica-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/db-security-groups (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/db-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/character-set-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/db-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/master-username (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/port (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/iops (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/engine (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/create-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.create-db-instance-message/db-instance-identifier :portkey.aws.rds.-2013-09-09.create-db-instance-message/allocated-storage :portkey.aws.rds.-2013-09-09.create-db-instance-message/db-instance-class :portkey.aws.rds.-2013-09-09.create-db-instance-message/engine :portkey.aws.rds.-2013-09-09.create-db-instance-message/master-username :portkey.aws.rds.-2013-09-09.create-db-instance-message/master-user-password] :opt-un [:portkey.aws.rds.-2013-09-09.create-db-instance-message/backup-retention-period :portkey.aws.rds.-2013-09-09.create-db-instance-message/option-group-name :portkey.aws.rds.-2013-09-09.create-db-instance-message/db-security-groups :portkey.aws.rds.-2013-09-09.create-db-instance-message/character-set-name :portkey.aws.rds.-2013-09-09.create-db-instance-message/publicly-accessible :portkey.aws.rds.-2013-09-09.create-db-instance-message/preferred-maintenance-window :portkey.aws.rds.-2013-09-09.create-db-instance-message/auto-minor-version-upgrade :portkey.aws.rds.-2013-09-09.create-db-instance-message/tags :portkey.aws.rds.-2013-09-09.create-db-instance-message/db-name :portkey.aws.rds.-2013-09-09.create-db-instance-message/vpc-security-group-ids :portkey.aws.rds.-2013-09-09.create-db-instance-message/availability-zone :portkey.aws.rds.-2013-09-09.create-db-instance-message/license-model :portkey.aws.rds.-2013-09-09.create-db-instance-message/engine-version :portkey.aws.rds.-2013-09-09.create-db-instance-message/db-subnet-group-name :portkey.aws.rds.-2013-09-09.create-db-instance-message/port :portkey.aws.rds.-2013-09-09.create-db-instance-message/iops :portkey.aws.rds.-2013-09-09.create-db-instance-message/db-parameter-group-name :portkey.aws.rds.-2013-09-09.create-db-instance-message/multi-az :portkey.aws.rds.-2013-09-09.create-db-instance-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.promote-read-replica-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.promote-read-replica-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.promote-read-replica-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/promote-read-replica-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.promote-read-replica-message/db-instance-identifier] :opt-un [:portkey.aws.rds.-2013-09-09.promote-read-replica-message/backup-retention-period :portkey.aws.rds.-2013-09-09.promote-read-replica-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/key-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-engine-version-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/db-engine-version))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.event-subscription/customer-aws-id (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.event-subscription/source-type (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.event-subscription/enabled (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.event-subscription/status (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.event-subscription/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.event-subscription/cust-subscription-id (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.event-subscription/subscription-creation-time (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/event-subscription (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/source-ids-list :portkey.aws.rds.-2013-09-09.event-subscription/customer-aws-id :portkey.aws.rds.-2013-09-09.event-subscription/source-type :portkey.aws.rds.-2013-09-09.event-subscription/enabled :portkey.aws.rds.-2013-09-09.event-subscription/status :portkey.aws.rds.-2013-09-09.event-subscription/sns-topic-arn :portkey.aws.rds.-2013-09-09/event-categories-list :portkey.aws.rds.-2013-09-09.event-subscription/cust-subscription-id :portkey.aws.rds.-2013-09-09.event-subscription/subscription-creation-time]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-snapshot/snapshot-create-time (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-snapshot/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-snapshot/source-region (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-snapshot/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-snapshot/instance-create-time (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-snapshot/availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-snapshot/status (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-snapshot/snapshot-type (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-snapshot/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-snapshot/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-snapshot/master-username (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-snapshot/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-snapshot/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-snapshot/port (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-snapshot/vpc-id (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-snapshot/iops (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-snapshot/engine (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-snapshot/percent-progress (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-snapshot (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.db-snapshot/snapshot-create-time :portkey.aws.rds.-2013-09-09.db-snapshot/option-group-name :portkey.aws.rds.-2013-09-09.db-snapshot/source-region :portkey.aws.rds.-2013-09-09.db-snapshot/db-instance-identifier :portkey.aws.rds.-2013-09-09.db-snapshot/instance-create-time :portkey.aws.rds.-2013-09-09.db-snapshot/availability-zone :portkey.aws.rds.-2013-09-09.db-snapshot/status :portkey.aws.rds.-2013-09-09.db-snapshot/snapshot-type :portkey.aws.rds.-2013-09-09.db-snapshot/license-model :portkey.aws.rds.-2013-09-09.db-snapshot/allocated-storage :portkey.aws.rds.-2013-09-09.db-snapshot/master-username :portkey.aws.rds.-2013-09-09.db-snapshot/engine-version :portkey.aws.rds.-2013-09-09.db-snapshot/db-snapshot-identifier :portkey.aws.rds.-2013-09-09.db-snapshot/port :portkey.aws.rds.-2013-09-09.db-snapshot/vpc-id :portkey.aws.rds.-2013-09-09.db-snapshot/iops :portkey.aws.rds.-2013-09-09.db-snapshot/engine :portkey.aws.rds.-2013-09-09.db-snapshot/percent-progress]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-log-files-details/log-file-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-log-files-details/last-written (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/long))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-log-files-details/size (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/long))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/describe-db-log-files-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.describe-db-log-files-details/log-file-name :portkey.aws.rds.-2013-09-09.describe-db-log-files-details/last-written :portkey.aws.rds.-2013-09-09.describe-db-log-files-details/size]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-option-group-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-option-group-message/engine-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-option-group-message/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-option-group-message/option-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-option-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/create-option-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.create-option-group-message/option-group-name :portkey.aws.rds.-2013-09-09.create-option-group-message/engine-name :portkey.aws.rds.-2013-09-09.create-option-group-message/major-engine-version :portkey.aws.rds.-2013-09-09.create-option-group-message/option-group-description] :opt-un [:portkey.aws.rds.-2013-09-09.create-option-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/invalid-vpc-network-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-instance-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/option-names-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.delete-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.delete-db-instance-message/skip-final-snapshot (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.delete-db-instance-message/final-db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/delete-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.delete-db-instance-message/db-instance-identifier] :opt-un [:portkey.aws.rds.-2013-09-09.delete-db-instance-message/skip-final-snapshot :portkey.aws.rds.-2013-09-09.delete-db-instance-message/final-db-snapshot-identifier]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/invalid-db-subnet-group-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/reserved-db-instance-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/reserved-db-instance))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.orderable-db-instance-options-message/orderable-db-instance-options (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/orderable-db-instance-options-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.orderable-db-instance-options-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/orderable-db-instance-options-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.orderable-db-instance-options-message/orderable-db-instance-options :portkey.aws.rds.-2013-09-09.orderable-db-instance-options-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/event-categories-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/event-categories-map-list]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-events-message/end-time (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-events-message/start-time (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-events-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-events-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-events-message/duration (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-events-message/event-categories (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-events-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-events-message/source-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/describe-events-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.describe-events-message/end-time :portkey.aws.rds.-2013-09-09.describe-events-message/start-time :portkey.aws.rds.-2013-09-09.describe-events-message/max-records :portkey.aws.rds.-2013-09-09.describe-events-message/marker :portkey.aws.rds.-2013-09-09/source-type :portkey.aws.rds.-2013-09-09.describe-events-message/duration :portkey.aws.rds.-2013-09-09.describe-events-message/event-categories :portkey.aws.rds.-2013-09-09.describe-events-message/filters :portkey.aws.rds.-2013-09-09.describe-events-message/source-identifier]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/subscription-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group/option-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group/engine-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group/options (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/options-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group/allows-vpc-and-non-vpc-instance-memberships (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group/vpc-id (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/option-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.option-group/option-group-name :portkey.aws.rds.-2013-09-09.option-group/option-group-description :portkey.aws.rds.-2013-09-09.option-group/engine-name :portkey.aws.rds.-2013-09-09.option-group/major-engine-version :portkey.aws.rds.-2013-09-09.option-group/options :portkey.aws.rds.-2013-09-09.option-group/allows-vpc-and-non-vpc-instance-memberships :portkey.aws.rds.-2013-09-09.option-group/vpc-id]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/authorization-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/option-groups-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/option-group))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/ip-range-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/ip-range))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/invalid-db-subnet-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/option-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/create-db-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/db-snapshot]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance-status-info/status-type (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance-status-info/normal (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance-status-info/status (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance-status-info/message (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-instance-status-info (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.db-instance-status-info/status-type :portkey.aws.rds.-2013-09-09.db-instance-status-info/normal :portkey.aws.rds.-2013-09-09.db-instance-status-info/status :portkey.aws.rds.-2013-09-09.db-instance-status-info/message]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.authorize-db-security-group-ingress-message/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.authorize-db-security-group-ingress-message/cidrip (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.authorize-db-security-group-ingress-message/ec-2-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.authorize-db-security-group-ingress-message/ec-2-security-group-id (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.authorize-db-security-group-ingress-message/ec-2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/authorize-db-security-group-ingress-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.authorize-db-security-group-ingress-message/db-security-group-name] :opt-un [:portkey.aws.rds.-2013-09-09.authorize-db-security-group-ingress-message/cidrip :portkey.aws.rds.-2013-09-09.authorize-db-security-group-ingress-message/ec-2-security-group-name :portkey.aws.rds.-2013-09-09.authorize-db-security-group-ingress-message/ec-2-security-group-id :portkey.aws.rds.-2013-09-09.authorize-db-security-group-ingress-message/ec-2-security-group-owner-id]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/sns-topic-arn-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/event-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/event))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.events-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.events-message/events (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/event-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/events-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.events-message/marker :portkey.aws.rds.-2013-09-09.events-message/events]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/source-type #{"db-security-group" :dbsecuritygroup "db-instance" :dbparametergroup "db-parameter-group" "db-snapshot" :dbsnapshot :dbinstance})

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/orderable-db-instance-options-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/orderable-db-instance-option))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-snapshot-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-snapshot-message/db-snapshots (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/db-snapshot-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-snapshot-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.db-snapshot-message/marker :portkey.aws.rds.-2013-09-09.db-snapshot-message/db-snapshots]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/subscription-category-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.event/source-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.event/message (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.event/event-categories (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.event/date (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/event (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.event/source-identifier :portkey.aws.rds.-2013-09-09/source-type :portkey.aws.rds.-2013-09-09.event/message :portkey.aws.rds.-2013-09-09.event/event-categories :portkey.aws.rds.-2013-09-09.event/date]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group-options-message/option-group-options (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/option-group-options-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group-options-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/option-group-options-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.option-group-options-message/option-group-options :portkey.aws.rds.-2013-09-09.option-group-options-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/revoke-db-security-group-ingress-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/db-security-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/availability-zone-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/availability-zone))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reset-db-parameter-group-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reset-db-parameter-group-message/reset-all-parameters (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reset-db-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/reset-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.reset-db-parameter-group-message/db-parameter-group-name] :opt-un [:portkey.aws.rds.-2013-09-09.reset-db-parameter-group-message/reset-all-parameters :portkey.aws.rds.-2013-09-09.reset-db-parameter-group-message/parameters]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.availability-zone/name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.availability-zone/provisioned-iops-capable (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/availability-zone (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.availability-zone/name :portkey.aws.rds.-2013-09-09.availability-zone/provisioned-iops-capable]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.event-subscriptions-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/event-subscriptions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.event-subscriptions-message/marker :portkey.aws.rds.-2013-09-09/event-subscriptions-list]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instances-offering-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instances-offering-message/reserved-db-instances-offerings (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/reserved-db-instances-offering-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/reserved-db-instances-offering-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.reserved-db-instances-offering-message/marker :portkey.aws.rds.-2013-09-09.reserved-db-instances-offering-message/reserved-db-instances-offerings]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/create-db-subnet-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/create-event-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/create-db-security-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/db-security-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-orderable-db-instance-options-message/engine (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-orderable-db-instance-options-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-orderable-db-instance-options-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-orderable-db-instance-options-message/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-orderable-db-instance-options-message/vpc (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-orderable-db-instance-options-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-orderable-db-instance-options-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-orderable-db-instance-options-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/describe-orderable-db-instance-options-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.describe-orderable-db-instance-options-message/engine] :opt-un [:portkey.aws.rds.-2013-09-09.describe-orderable-db-instance-options-message/engine-version :portkey.aws.rds.-2013-09-09.describe-orderable-db-instance-options-message/db-instance-class :portkey.aws.rds.-2013-09-09.describe-orderable-db-instance-options-message/license-model :portkey.aws.rds.-2013-09-09.describe-orderable-db-instance-options-message/vpc :portkey.aws.rds.-2013-09-09.describe-orderable-db-instance-options-message/filters :portkey.aws.rds.-2013-09-09.describe-orderable-db-instance-options-message/max-records :portkey.aws.rds.-2013-09-09.describe-orderable-db-instance-options-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-subnet-group-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-subnet-group-message/db-subnet-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-subnet-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/create-db-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.create-db-subnet-group-message/db-subnet-group-name :portkey.aws.rds.-2013-09-09.create-db-subnet-group-message/db-subnet-group-description :portkey.aws.rds.-2013-09-09.create-db-subnet-group-message/subnet-ids] :opt-un [:portkey.aws.rds.-2013-09-09.create-db-subnet-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/invalid-db-security-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-groups/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/option-groups (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/option-groups-list :portkey.aws.rds.-2013-09-09.option-groups/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.delete-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/delete-event-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.delete-event-subscription-message/subscription-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/read-replica-db-instance-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/authorize-db-security-group-ingress-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/db-security-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-subnet-group-does-not-cover-enough-a-zs (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-parameter-groups-message/db-parameter-groups (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/db-parameter-group-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.db-parameter-groups-message/marker :portkey.aws.rds.-2013-09-09.db-parameter-groups-message/db-parameter-groups]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.recurring-charge/recurring-charge-amount (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/double))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.recurring-charge/recurring-charge-frequency (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/recurring-charge (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.recurring-charge/recurring-charge-amount :portkey.aws.rds.-2013-09-09.recurring-charge/recurring-charge-frequency]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/describe-engine-default-parameters-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/engine-defaults]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/authorization-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.copy-db-snapshot-message/source-db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.copy-db-snapshot-message/target-db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.copy-db-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/copy-db-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.copy-db-snapshot-message/source-db-snapshot-identifier :portkey.aws.rds.-2013-09-09.copy-db-snapshot-message/target-db-snapshot-identifier] :opt-un [:portkey.aws.rds.-2013-09-09.copy-db-snapshot-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-read-replica-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-read-replica-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-read-replica-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-read-replica-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-read-replica-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-read-replica-message/availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-read-replica-message/source-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-read-replica-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-read-replica-message/port (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-read-replica-message/iops (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-instance-read-replica-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/create-db-instance-read-replica-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.create-db-instance-read-replica-message/db-instance-identifier :portkey.aws.rds.-2013-09-09.create-db-instance-read-replica-message/source-db-instance-identifier] :opt-un [:portkey.aws.rds.-2013-09-09.create-db-instance-read-replica-message/option-group-name :portkey.aws.rds.-2013-09-09.create-db-instance-read-replica-message/publicly-accessible :portkey.aws.rds.-2013-09-09.create-db-instance-read-replica-message/auto-minor-version-upgrade :portkey.aws.rds.-2013-09-09.create-db-instance-read-replica-message/tags :portkey.aws.rds.-2013-09-09.create-db-instance-read-replica-message/availability-zone :portkey.aws.rds.-2013-09-09.create-db-instance-read-replica-message/db-subnet-group-name :portkey.aws.rds.-2013-09-09.create-db-instance-read-replica-message/port :portkey.aws.rds.-2013-09-09.create-db-instance-read-replica-message/iops :portkey.aws.rds.-2013-09-09.create-db-instance-read-replica-message/db-instance-class]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/create-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/subnet-already-in-use (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/create-option-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/option-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/copy-db-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/db-snapshot]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/modify-db-subnet-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group-option/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group-option/engine-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group-option/permanent (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group-option/port-required (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group-option/option-group-option-settings (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/option-group-option-settings-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group-option/persistent (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group-option/description (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group-option/minimum-required-minor-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group-option/default-port (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group-option/name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/option-group-option (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.option-group-option/major-engine-version :portkey.aws.rds.-2013-09-09.option-group-option/engine-name :portkey.aws.rds.-2013-09-09.option-group-option/permanent :portkey.aws.rds.-2013-09-09.option-group-option/port-required :portkey.aws.rds.-2013-09-09.option-group-option/option-group-option-settings :portkey.aws.rds.-2013-09-09.option-group-option/persistent :portkey.aws.rds.-2013-09-09.option-group-option/description :portkey.aws.rds.-2013-09-09.option-group-option/minimum-required-minor-engine-version :portkey.aws.rds.-2013-09-09.option-group-option/default-port :portkey.aws.rds.-2013-09-09/options-depended-on :portkey.aws.rds.-2013-09-09.option-group-option/name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/option-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/invalid-subnet (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/tag-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/tag))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/modify-option-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/option-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-engine-version/engine (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-engine-version/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-engine-version/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-engine-version/db-engine-description (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-engine-version/db-engine-version-description (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-engine-version/default-character-set (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/character-set))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-engine-version/supported-character-sets (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/supported-character-sets-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-engine-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.db-engine-version/engine :portkey.aws.rds.-2013-09-09.db-engine-version/engine-version :portkey.aws.rds.-2013-09-09.db-engine-version/db-parameter-group-family :portkey.aws.rds.-2013-09-09.db-engine-version/db-engine-description :portkey.aws.rds.-2013-09-09.db-engine-version/db-engine-version-description :portkey.aws.rds.-2013-09-09.db-engine-version/default-character-set :portkey.aws.rds.-2013-09-09.db-engine-version/supported-character-sets]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/option-setting-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/option-setting))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/subscription-already-exist-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-upgrade-dependency-failure-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.add-source-identifier-to-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.add-source-identifier-to-subscription-message/source-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/add-source-identifier-to-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.add-source-identifier-to-subscription-message/subscription-name :portkey.aws.rds.-2013-09-09.add-source-identifier-to-subscription-message/source-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.add-tags-to-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.add-tags-to-resource-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/add-tags-to-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.add-tags-to-resource-message/resource-name :portkey.aws.rds.-2013-09-09.add-tags-to-resource-message/tags] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/invalid-event-subscription-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/tag-list-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/tag-list]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-parameter-group-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-parameter-group-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-parameter-group-message/description (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/create-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.create-db-parameter-group-message/db-parameter-group-name :portkey.aws.rds.-2013-09-09.create-db-parameter-group-message/db-parameter-group-family :portkey.aws.rds.-2013-09-09.create-db-parameter-group-message/description] :opt-un [:portkey.aws.rds.-2013-09-09.create-db-parameter-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.vpc-security-group-membership/vpc-security-group-id (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.vpc-security-group-membership/status (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/vpc-security-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.vpc-security-group-membership/vpc-security-group-id :portkey.aws.rds.-2013-09-09.vpc-security-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/db-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/restore-time (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/source-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/port (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/target-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/iops (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/engine (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/use-latest-restorable-time (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/restore-db-instance-to-point-in-time-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/source-db-instance-identifier :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/target-db-instance-identifier] :opt-un [:portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/option-group-name :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/publicly-accessible :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/auto-minor-version-upgrade :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/tags :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/db-name :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/availability-zone :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/restore-time :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/license-model :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/db-subnet-group-name :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/port :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/iops :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/db-instance-class :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/engine :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/multi-az :portkey.aws.rds.-2013-09-09.restore-db-instance-to-point-in-time-message/use-latest-restorable-time]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/authorization-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-subnet-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-log-file-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/provisioned-iops-not-available-in-az-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instance-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instance-message/reserved-db-instances (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/reserved-db-instance-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/reserved-db-instance-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.reserved-db-instance-message/marker :portkey.aws.rds.-2013-09-09.reserved-db-instance-message/reserved-db-instances]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-db-parameter-group-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-db-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/modify-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.modify-db-parameter-group-message/db-parameter-group-name :portkey.aws.rds.-2013-09-09.modify-db-parameter-group-message/parameters] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/modify-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reboot-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reboot-db-instance-message/force-failover (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/reboot-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.reboot-db-instance-message/db-instance-identifier] :opt-un [:portkey.aws.rds.-2013-09-09.reboot-db-instance-message/force-failover]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/reserved-db-instance-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/invalid-option-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instances-offering/currency-code (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instances-offering/reserved-db-instances-offering-id (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instances-offering/fixed-price (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/double))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instances-offering/duration (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instances-offering/usage-price (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/double))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instances-offering/product-description (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instances-offering/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instances-offering/recurring-charges (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/recurring-charge-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instances-offering/offering-type (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instances-offering/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/reserved-db-instances-offering (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.reserved-db-instances-offering/currency-code :portkey.aws.rds.-2013-09-09.reserved-db-instances-offering/reserved-db-instances-offering-id :portkey.aws.rds.-2013-09-09.reserved-db-instances-offering/fixed-price :portkey.aws.rds.-2013-09-09.reserved-db-instances-offering/duration :portkey.aws.rds.-2013-09-09.reserved-db-instances-offering/usage-price :portkey.aws.rds.-2013-09-09.reserved-db-instances-offering/product-description :portkey.aws.rds.-2013-09-09.reserved-db-instances-offering/db-instance-class :portkey.aws.rds.-2013-09-09.reserved-db-instances-offering/recurring-charges :portkey.aws.rds.-2013-09-09.reserved-db-instances-offering/offering-type :portkey.aws.rds.-2013-09-09.reserved-db-instances-offering/multi-az]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.ec-2-security-group/status (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.ec-2-security-group/ec-2-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.ec-2-security-group/ec-2-security-group-id (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.ec-2-security-group/ec-2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/ec-2-security-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.ec-2-security-group/status :portkey.aws.rds.-2013-09-09.ec-2-security-group/ec-2-security-group-name :portkey.aws.rds.-2013-09-09.ec-2-security-group/ec-2-security-group-id :portkey.aws.rds.-2013-09-09.ec-2-security-group/ec-2-security-group-owner-id]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/option-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/option-group-membership))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.remove-source-identifier-from-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.remove-source-identifier-from-subscription-message/source-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/remove-source-identifier-from-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.remove-source-identifier-from-subscription-message/subscription-name :portkey.aws.rds.-2013-09-09.remove-source-identifier-from-subscription-message/source-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/point-in-time-restore-not-enabled-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.remove-tags-from-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.remove-tags-from-resource-message/tag-keys (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/key-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/remove-tags-from-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.remove-tags-from-resource-message/resource-name :portkey.aws.rds.-2013-09-09.remove-tags-from-resource-message/tag-keys] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/event-categories-map-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/event-categories-map))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/integer clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.parameter/data-type (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.parameter/parameter-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.parameter/source (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.parameter/minimum-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.parameter/allowed-values (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.parameter/apply-type (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.parameter/description (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.parameter/is-modifiable (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.parameter/parameter-value (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/parameter (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.parameter/data-type :portkey.aws.rds.-2013-09-09.parameter/parameter-name :portkey.aws.rds.-2013-09-09.parameter/source :portkey.aws.rds.-2013-09-09.parameter/minimum-engine-version :portkey.aws.rds.-2013-09-09.parameter/allowed-values :portkey.aws.rds.-2013-09-09.parameter/apply-type :portkey.aws.rds.-2013-09-09.parameter/description :portkey.aws.rds.-2013-09-09/apply-method :portkey.aws.rds.-2013-09-09.parameter/is-modifiable :portkey.aws.rds.-2013-09-09.parameter/parameter-value]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/vpc-security-group-id-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/describe-db-log-files-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/describe-db-log-files-details))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-security-group-membership/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-security-group-membership/status (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-security-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.db-security-group-membership/db-security-group-name :portkey.aws.rds.-2013-09-09.db-security-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/db-security-groups (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/db-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/secondary-availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/character-set-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/read-replica-db-instance-identifiers (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/read-replica-db-instance-identifier-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/db-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/instance-create-time (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/availability-zone (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/read-replica-source-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/master-username (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/iops (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/option-group-memberships (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/option-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/db-parameter-groups (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/db-parameter-group-status-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/vpc-security-groups (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/vpc-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/engine (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/db-instance-status (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/status-infos (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/db-instance-status-info-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance/latest-restorable-time (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.db-instance/backup-retention-period :portkey.aws.rds.-2013-09-09.db-instance/db-security-groups :portkey.aws.rds.-2013-09-09.db-instance/secondary-availability-zone :portkey.aws.rds.-2013-09-09.db-instance/character-set-name :portkey.aws.rds.-2013-09-09.db-instance/publicly-accessible :portkey.aws.rds.-2013-09-09.db-instance/read-replica-db-instance-identifiers :portkey.aws.rds.-2013-09-09.db-instance/preferred-maintenance-window :portkey.aws.rds.-2013-09-09.db-instance/db-instance-identifier :portkey.aws.rds.-2013-09-09.db-instance/auto-minor-version-upgrade :portkey.aws.rds.-2013-09-09.db-instance/db-name :portkey.aws.rds.-2013-09-09.db-instance/instance-create-time :portkey.aws.rds.-2013-09-09.db-instance/availability-zone :portkey.aws.rds.-2013-09-09.db-instance/read-replica-source-db-instance-identifier :portkey.aws.rds.-2013-09-09.db-instance/license-model :portkey.aws.rds.-2013-09-09.db-instance/allocated-storage :portkey.aws.rds.-2013-09-09.db-instance/master-username :portkey.aws.rds.-2013-09-09.db-instance/engine-version :portkey.aws.rds.-2013-09-09.db-instance/iops :portkey.aws.rds.-2013-09-09/endpoint :portkey.aws.rds.-2013-09-09.db-instance/option-group-memberships :portkey.aws.rds.-2013-09-09.db-instance/db-instance-class :portkey.aws.rds.-2013-09-09.db-instance/db-parameter-groups :portkey.aws.rds.-2013-09-09.db-instance/vpc-security-groups :portkey.aws.rds.-2013-09-09.db-instance/engine :portkey.aws.rds.-2013-09-09.db-instance/db-instance-status :portkey.aws.rds.-2013-09-09.db-instance/status-infos :portkey.aws.rds.-2013-09-09.db-instance/multi-az :portkey.aws.rds.-2013-09-09.db-instance/preferred-backup-window :portkey.aws.rds.-2013-09-09/pending-modified-values :portkey.aws.rds.-2013-09-09.db-instance/latest-restorable-time :portkey.aws.rds.-2013-09-09/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-subnet-group-not-allowed-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-parameter-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/t-stamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.purchase-reserved-db-instances-offering-message/reserved-db-instances-offering-id (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.purchase-reserved-db-instances-offering-message/reserved-db-instance-id (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.purchase-reserved-db-instances-offering-message/db-instance-count (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.purchase-reserved-db-instances-offering-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/purchase-reserved-db-instances-offering-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.purchase-reserved-db-instances-offering-message/reserved-db-instances-offering-id] :opt-un [:portkey.aws.rds.-2013-09-09.purchase-reserved-db-instances-offering-message/reserved-db-instance-id :portkey.aws.rds.-2013-09-09.purchase-reserved-db-instances-offering-message/db-instance-count :portkey.aws.rds.-2013-09-09.purchase-reserved-db-instances-offering-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/db-security-group-membership))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.event-categories-map/source-type (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.event-categories-map/event-categories (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/event-categories-map (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.event-categories-map/source-type :portkey.aws.rds.-2013-09-09.event-categories-map/event-categories]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/reserved-db-instances-offering-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/reserved-db-instances-offering))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/event-subscription-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-event-subscription-message/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-event-subscription-message/source-type (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-event-subscription-message/event-categories (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-event-subscription-message/source-ids (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/source-ids-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-event-subscription-message/enabled (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-event-subscription-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/create-event-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.create-event-subscription-message/subscription-name :portkey.aws.rds.-2013-09-09.create-event-subscription-message/sns-topic-arn] :opt-un [:portkey.aws.rds.-2013-09-09.create-event-subscription-message/source-type :portkey.aws.rds.-2013-09-09.create-event-subscription-message/event-categories :portkey.aws.rds.-2013-09-09.create-event-subscription-message/source-ids :portkey.aws.rds.-2013-09-09.create-event-subscription-message/enabled :portkey.aws.rds.-2013-09-09.create-event-subscription-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-log-files-response/describe-db-log-files (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/describe-db-log-files-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-log-files-response/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/describe-db-log-files-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.describe-db-log-files-response/describe-db-log-files :portkey.aws.rds.-2013-09-09.describe-db-log-files-response/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/recurring-charge-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/recurring-charge))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/event-categories-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-engine-version-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-engine-version-message/db-engine-versions (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/db-engine-version-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-engine-version-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.db-engine-version-message/marker :portkey.aws.rds.-2013-09-09.db-engine-version-message/db-engine-versions]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-instance-message/db-instances (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/db-instance-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-instance-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.db-instance-message/marker :portkey.aws.rds.-2013-09-09.db-instance-message/db-instances]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-security-group-name-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/reserved-db-instance-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-security-group-not-supported-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/create-db-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/db-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-log-files-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-log-files-message/filename-contains (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-log-files-message/file-last-written (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/long))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-log-files-message/file-size (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/long))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-log-files-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-log-files-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-log-files-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/describe-db-log-files-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.describe-db-log-files-message/db-instance-identifier] :opt-un [:portkey.aws.rds.-2013-09-09.describe-db-log-files-message/filename-contains :portkey.aws.rds.-2013-09-09.describe-db-log-files-message/file-last-written :portkey.aws.rds.-2013-09-09.describe-db-log-files-message/file-size :portkey.aws.rds.-2013-09-09.describe-db-log-files-message/filters :portkey.aws.rds.-2013-09-09.describe-db-log-files-message/max-records :portkey.aws.rds.-2013-09-09.describe-db-log-files-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/apply-method #{"immediate" :pendingreboot :immediate "pending-reboot"})

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.endpoint/address (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.endpoint/port (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/endpoint (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.endpoint/address :portkey.aws.rds.-2013-09-09.endpoint/port]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-parameter-group/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-parameter-group/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-parameter-group/description (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-parameter-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.db-parameter-group/db-parameter-group-name :portkey.aws.rds.-2013-09-09.db-parameter-group/db-parameter-group-family :portkey.aws.rds.-2013-09-09.db-parameter-group/description]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/supported-character-sets-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/character-set))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/storage-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/invalid-restore-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group-membership/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-group-membership/status (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/option-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.option-group-membership/option-group-name :portkey.aws.rds.-2013-09-09.option-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-security-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-parameter-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instance/reserved-db-instance-id (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instance/currency-code (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instance/reserved-db-instances-offering-id (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instance/start-time (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instance/fixed-price (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/double))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instance/db-instance-count (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instance/duration (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instance/usage-price (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/double))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instance/product-description (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instance/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instance/state (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instance/recurring-charges (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/recurring-charge-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instance/offering-type (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.reserved-db-instance/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/reserved-db-instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.reserved-db-instance/reserved-db-instance-id :portkey.aws.rds.-2013-09-09.reserved-db-instance/currency-code :portkey.aws.rds.-2013-09-09.reserved-db-instance/reserved-db-instances-offering-id :portkey.aws.rds.-2013-09-09.reserved-db-instance/start-time :portkey.aws.rds.-2013-09-09.reserved-db-instance/fixed-price :portkey.aws.rds.-2013-09-09.reserved-db-instance/db-instance-count :portkey.aws.rds.-2013-09-09.reserved-db-instance/duration :portkey.aws.rds.-2013-09-09.reserved-db-instance/usage-price :portkey.aws.rds.-2013-09-09.reserved-db-instance/product-description :portkey.aws.rds.-2013-09-09.reserved-db-instance/db-instance-class :portkey.aws.rds.-2013-09-09.reserved-db-instance/state :portkey.aws.rds.-2013-09-09.reserved-db-instance/recurring-charges :portkey.aws.rds.-2013-09-09.reserved-db-instance/offering-type :portkey.aws.rds.-2013-09-09.reserved-db-instance/multi-az]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-parameter-groups-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-parameter-groups-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-parameter-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/describe-db-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.describe-db-parameter-groups-message/db-parameter-group-name :portkey.aws.rds.-2013-09-09.describe-db-parameter-groups-message/filters :portkey.aws.rds.-2013-09-09.describe-db-parameter-groups-message/max-records :portkey.aws.rds.-2013-09-09.describe-db-parameter-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/invalid-db-subnet-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.ip-range/status (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.ip-range/cidrip (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/ip-range (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.ip-range/status :portkey.aws.rds.-2013-09-09.ip-range/cidrip]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.character-set/character-set-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.character-set/character-set-description (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/character-set (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.character-set/character-set-name :portkey.aws.rds.-2013-09-09.character-set/character-set-description]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-parameter-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/option-group-option-settings-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/option-group-option-setting))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/modify-event-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.tag/key (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.tag/value (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/tag (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.tag/key :portkey.aws.rds.-2013-09-09.tag/value]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-event-categories-message/source-type (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-event-categories-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/describe-event-categories-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.describe-event-categories-message/source-type :portkey.aws.rds.-2013-09-09.describe-event-categories-message/filters]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/insufficient-db-instance-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/boolean-optional clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/sns-invalid-topic-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/options-depended-on (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/string))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-setting/data-type (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-setting/allowed-values (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-setting/value (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-setting/apply-type (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-setting/description (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-setting/default-value (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-setting/is-modifiable (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-setting/is-collection (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-setting/name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/option-setting (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.option-setting/data-type :portkey.aws.rds.-2013-09-09.option-setting/allowed-values :portkey.aws.rds.-2013-09-09.option-setting/value :portkey.aws.rds.-2013-09-09.option-setting/apply-type :portkey.aws.rds.-2013-09-09.option-setting/description :portkey.aws.rds.-2013-09-09.option-setting/default-value :portkey.aws.rds.-2013-09-09.option-setting/is-modifiable :portkey.aws.rds.-2013-09-09.option-setting/is-collection :portkey.aws.rds.-2013-09-09.option-setting/name]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.list-tags-for-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.list-tags-for-resource-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/list-tags-for-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.list-tags-for-resource-message/resource-name] :opt-un [:portkey.aws.rds.-2013-09-09.list-tags-for-resource-message/filters]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.delete-db-subnet-group-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/delete-db-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.delete-db-subnet-group-message/db-subnet-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-instance-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/db-instance))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/delete-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/delete-event-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/option-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/option-configuration))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/reserved-db-instances-offering-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-subnet-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/add-source-identifier-to-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.download-db-log-file-portion-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.download-db-log-file-portion-message/log-file-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.download-db-log-file-portion-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.download-db-log-file-portion-message/number-of-lines (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/download-db-log-file-portion-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.download-db-log-file-portion-message/db-instance-identifier :portkey.aws.rds.-2013-09-09.download-db-log-file-portion-message/log-file-name] :opt-un [:portkey.aws.rds.-2013-09-09.download-db-log-file-portion-message/marker :portkey.aws.rds.-2013-09-09.download-db-log-file-portion-message/number-of-lines]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-security-group-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-security-group-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.db-security-group-message/marker :portkey.aws.rds.-2013-09-09/db-security-groups]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-security-group-message/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-security-group-message/db-security-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.create-db-security-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/create-db-security-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.create-db-security-group-message/db-security-group-name :portkey.aws.rds.-2013-09-09.create-db-security-group-message/db-security-group-description] :opt-un [:portkey.aws.rds.-2013-09-09.create-db-security-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/event-subscriptions-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/event-subscription))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-snapshot-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/db-snapshot))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.engine-defaults/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.engine-defaults/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.engine-defaults/parameters (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/engine-defaults (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.engine-defaults/db-parameter-group-family :portkey.aws.rds.-2013-09-09.engine-defaults/marker :portkey.aws.rds.-2013-09-09.engine-defaults/parameters]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-subnet-groups (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/db-subnet-group))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-configuration/option-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-configuration/port (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-configuration/db-security-group-memberships (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/db-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-configuration/vpc-security-group-memberships (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.option-configuration/option-settings (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/option-settings-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/option-configuration (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.option-configuration/option-name] :opt-un [:portkey.aws.rds.-2013-09-09.option-configuration/port :portkey.aws.rds.-2013-09-09.option-configuration/db-security-group-memberships :portkey.aws.rds.-2013-09-09.option-configuration/vpc-security-group-memberships :portkey.aws.rds.-2013-09-09.option-configuration/option-settings]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-subnet-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/invalid-db-snapshot-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/integer-optional clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-security-group/owner-id (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-security-group/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-security-group/db-security-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-security-group/vpc-id (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-security-group/ec-2-security-groups (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/ec-2-security-group-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-security-group/ip-ranges (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/ip-range-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-security-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.db-security-group/owner-id :portkey.aws.rds.-2013-09-09.db-security-group/db-security-group-name :portkey.aws.rds.-2013-09-09.db-security-group/db-security-group-description :portkey.aws.rds.-2013-09-09.db-security-group/vpc-id :portkey.aws.rds.-2013-09-09.db-security-group/ec-2-security-groups :portkey.aws.rds.-2013-09-09.db-security-group/ip-ranges]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-offerings-message/reserved-db-instances-offering-id (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-offerings-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-offerings-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-offerings-message/duration (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-offerings-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-offerings-message/product-description (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-offerings-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-offerings-message/offering-type (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-offerings-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/describe-reserved-db-instances-offerings-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-offerings-message/reserved-db-instances-offering-id :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-offerings-message/max-records :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-offerings-message/marker :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-offerings-message/duration :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-offerings-message/filters :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-offerings-message/product-description :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-offerings-message/db-instance-class :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-offerings-message/offering-type :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-offerings-message/multi-az]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-security-groups-message/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-security-groups-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-security-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-security-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/describe-db-security-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.describe-db-security-groups-message/db-security-group-name :portkey.aws.rds.-2013-09-09.describe-db-security-groups-message/filters :portkey.aws.rds.-2013-09-09.describe-db-security-groups-message/max-records :portkey.aws.rds.-2013-09-09.describe-db-security-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/option-settings-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/option-setting))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.delete-option-group-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/delete-option-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.delete-option-group-message/option-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-instance-status-info-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/db-instance-status-info))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-parameters-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-parameters-message/source (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-db-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/describe-db-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.describe-db-parameters-message/db-parameter-group-name] :opt-un [:portkey.aws.rds.-2013-09-09.describe-db-parameters-message/source :portkey.aws.rds.-2013-09-09.describe-db-parameters-message/filters :portkey.aws.rds.-2013-09-09.describe-db-parameters-message/max-records :portkey.aws.rds.-2013-09-09.describe-db-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/reserved-db-instance-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/purchase-reserved-db-instances-offering-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/reserved-db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-message/reserved-db-instance-id (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-message/reserved-db-instances-offering-id (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-message/duration (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-message/product-description (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-message/offering-type (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/describe-reserved-db-instances-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-message/reserved-db-instance-id :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-message/reserved-db-instances-offering-id :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-message/max-records :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-message/marker :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-message/duration :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-message/filters :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-message/product-description :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-message/db-instance-class :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-message/offering-type :portkey.aws.rds.-2013-09-09.describe-reserved-db-instances-message/multi-az]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.revoke-db-security-group-ingress-message/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.revoke-db-security-group-ingress-message/cidrip (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.revoke-db-security-group-ingress-message/ec-2-security-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.revoke-db-security-group-ingress-message/ec-2-security-group-id (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.revoke-db-security-group-ingress-message/ec-2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/revoke-db-security-group-ingress-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.revoke-db-security-group-ingress-message/db-security-group-name] :opt-un [:portkey.aws.rds.-2013-09-09.revoke-db-security-group-ingress-message/cidrip :portkey.aws.rds.-2013-09-09.revoke-db-security-group-ingress-message/ec-2-security-group-name :portkey.aws.rds.-2013-09-09.revoke-db-security-group-ingress-message/ec-2-security-group-id :portkey.aws.rds.-2013-09-09.revoke-db-security-group-ingress-message/ec-2-security-group-owner-id]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.orderable-db-instance-option/engine (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.orderable-db-instance-option/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.orderable-db-instance-option/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.orderable-db-instance-option/license-model (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.orderable-db-instance-option/availability-zones (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/availability-zone-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.orderable-db-instance-option/multi-az-capable (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.orderable-db-instance-option/read-replica-capable (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.orderable-db-instance-option/vpc (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/orderable-db-instance-option (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.orderable-db-instance-option/engine :portkey.aws.rds.-2013-09-09.orderable-db-instance-option/engine-version :portkey.aws.rds.-2013-09-09.orderable-db-instance-option/db-instance-class :portkey.aws.rds.-2013-09-09.orderable-db-instance-option/license-model :portkey.aws.rds.-2013-09-09.orderable-db-instance-option/availability-zones :portkey.aws.rds.-2013-09-09.orderable-db-instance-option/multi-az-capable :portkey.aws.rds.-2013-09-09.orderable-db-instance-option/read-replica-capable :portkey.aws.rds.-2013-09-09.orderable-db-instance-option/vpc]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.pending-modified-values/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.pending-modified-values/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.pending-modified-values/master-user-password (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.pending-modified-values/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.pending-modified-values/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.pending-modified-values/port (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.pending-modified-values/iops (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.pending-modified-values/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.pending-modified-values/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/pending-modified-values (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.pending-modified-values/backup-retention-period :portkey.aws.rds.-2013-09-09.pending-modified-values/db-instance-identifier :portkey.aws.rds.-2013-09-09.pending-modified-values/master-user-password :portkey.aws.rds.-2013-09-09.pending-modified-values/allocated-storage :portkey.aws.rds.-2013-09-09.pending-modified-values/engine-version :portkey.aws.rds.-2013-09-09.pending-modified-values/port :portkey.aws.rds.-2013-09-09.pending-modified-values/iops :portkey.aws.rds.-2013-09-09.pending-modified-values/db-instance-class :portkey.aws.rds.-2013-09-09.pending-modified-values/multi-az]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-subnet-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/subnet-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/subnet))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/filter-list (clojure.spec.alpha/coll-of :portkey.aws.rds.-2013-09-09/filter))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/create-db-instance-read-replica-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.download-db-log-file-portion-details/log-file-data (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.download-db-log-file-portion-details/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.download-db-log-file-portion-details/additional-data-pending (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/download-db-log-file-portion-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.download-db-log-file-portion-details/log-file-data :portkey.aws.rds.-2013-09-09.download-db-log-file-portion-details/marker :portkey.aws.rds.-2013-09-09.download-db-log-file-portion-details/additional-data-pending]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-snapshot-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/invalid-db-parameter-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-db-instance-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-db-instance-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-db-instance-message/db-security-groups (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/db-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-db-instance-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-db-instance-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-db-instance-message/new-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-db-instance-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-db-instance-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-db-instance-message/allow-major-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-db-instance-message/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-db-instance-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-db-instance-message/iops (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-db-instance-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-db-instance-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-db-instance-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-db-instance-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-db-instance-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/modify-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.modify-db-instance-message/db-instance-identifier] :opt-un [:portkey.aws.rds.-2013-09-09.modify-db-instance-message/backup-retention-period :portkey.aws.rds.-2013-09-09.modify-db-instance-message/option-group-name :portkey.aws.rds.-2013-09-09.modify-db-instance-message/db-security-groups :portkey.aws.rds.-2013-09-09.modify-db-instance-message/preferred-maintenance-window :portkey.aws.rds.-2013-09-09.modify-db-instance-message/auto-minor-version-upgrade :portkey.aws.rds.-2013-09-09.modify-db-instance-message/new-db-instance-identifier :portkey.aws.rds.-2013-09-09.modify-db-instance-message/vpc-security-group-ids :portkey.aws.rds.-2013-09-09.modify-db-instance-message/master-user-password :portkey.aws.rds.-2013-09-09.modify-db-instance-message/allow-major-version-upgrade :portkey.aws.rds.-2013-09-09.modify-db-instance-message/allocated-storage :portkey.aws.rds.-2013-09-09.modify-db-instance-message/engine-version :portkey.aws.rds.-2013-09-09.modify-db-instance-message/iops :portkey.aws.rds.-2013-09-09.modify-db-instance-message/apply-immediately :portkey.aws.rds.-2013-09-09.modify-db-instance-message/db-instance-class :portkey.aws.rds.-2013-09-09.modify-db-instance-message/db-parameter-group-name :portkey.aws.rds.-2013-09-09.modify-db-instance-message/multi-az :portkey.aws.rds.-2013-09-09.modify-db-instance-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-option-group-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-option-group-message/options-to-include (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/option-configuration-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-option-group-message/options-to-remove (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/option-names-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-option-group-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/modify-option-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.modify-option-group-message/option-group-name] :opt-un [:portkey.aws.rds.-2013-09-09.modify-option-group-message/options-to-include :portkey.aws.rds.-2013-09-09.modify-option-group-message/options-to-remove :portkey.aws.rds.-2013-09-09.modify-option-group-message/apply-immediately]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-security-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-security-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-subnet-group/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-subnet-group/db-subnet-group-description (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-subnet-group/vpc-id (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-subnet-group/subnet-group-status (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.db-subnet-group/subnets (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/subnet-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/db-subnet-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.db-subnet-group/db-subnet-group-name :portkey.aws.rds.-2013-09-09.db-subnet-group/db-subnet-group-description :portkey.aws.rds.-2013-09-09.db-subnet-group/vpc-id :portkey.aws.rds.-2013-09-09.db-subnet-group/subnet-group-status :portkey.aws.rds.-2013-09-09.db-subnet-group/subnets]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-option-groups-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-option-groups-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-option-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-option-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-option-groups-message/engine-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-option-groups-message/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/describe-option-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.-2013-09-09.describe-option-groups-message/option-group-name :portkey.aws.rds.-2013-09-09.describe-option-groups-message/filters :portkey.aws.rds.-2013-09-09.describe-option-groups-message/marker :portkey.aws.rds.-2013-09-09.describe-option-groups-message/max-records :portkey.aws.rds.-2013-09-09.describe-option-groups-message/engine-name :portkey.aws.rds.-2013-09-09.describe-option-groups-message/major-engine-version]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-event-subscription-message/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-event-subscription-message/source-type (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-event-subscription-message/event-categories (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.modify-event-subscription-message/enabled (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/modify-event-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.modify-event-subscription-message/subscription-name] :opt-un [:portkey.aws.rds.-2013-09-09.modify-event-subscription-message/sns-topic-arn :portkey.aws.rds.-2013-09-09.modify-event-subscription-message/source-type :portkey.aws.rds.-2013-09-09.modify-event-subscription-message/event-categories :portkey.aws.rds.-2013-09-09.modify-event-subscription-message/enabled]))

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-option-group-options-message/engine-name (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-option-group-options-message/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-option-group-options-message/filters (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-option-group-options-message/max-records (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09.describe-option-group-options-message/marker (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/string))
(clojure.spec.alpha/def :portkey.aws.rds.-2013-09-09/describe-option-group-options-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.-2013-09-09.describe-option-group-options-message/engine-name] :opt-un [:portkey.aws.rds.-2013-09-09.describe-option-group-options-message/major-engine-version :portkey.aws.rds.-2013-09-09.describe-option-group-options-message/filters :portkey.aws.rds.-2013-09-09.describe-option-group-options-message/max-records :portkey.aws.rds.-2013-09-09.describe-option-group-options-message/marker]))

(clojure.core/defn add-source-identifier-to-subscription ([add-source-identifier-to-subscription-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-add-source-identifier-to-subscription-message add-source-identifier-to-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/add-source-identifier-to-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/add-source-identifier-to-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "AddSourceIdentifierToSubscriptionResult", :http.request.configuration/action "AddSourceIdentifierToSubscription", :http.request.configuration/output-deser-fn response-add-source-identifier-to-subscription-result, :http.request.spec/error-spec {"SubscriptionNotFoundFault" :portkey.aws.rds.-2013-09-09/subscription-not-found-fault, "SourceNotFoundFault" :portkey.aws.rds.-2013-09-09/source-not-found-fault}})))))
(clojure.spec.alpha/fdef add-source-identifier-to-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/add-source-identifier-to-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/add-source-identifier-to-subscription-result))

(clojure.core/defn delete-db-snapshot ([delete-db-snapshot-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-db-snapshot-message delete-db-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/delete-db-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/delete-db-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteDBSnapshotResult", :http.request.configuration/action "DeleteDBSnapshot", :http.request.configuration/output-deser-fn response-delete-db-snapshot-result, :http.request.spec/error-spec {"InvalidDBSnapshotStateFault" :portkey.aws.rds.-2013-09-09/invalid-db-snapshot-state-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds.-2013-09-09/db-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/delete-db-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/delete-db-snapshot-result))

(clojure.core/defn delete-db-subnet-group ([delete-db-subnet-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-db-subnet-group-message delete-db-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/delete-db-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteDBSubnetGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"InvalidDBSubnetGroupStateFault" :portkey.aws.rds.-2013-09-09/invalid-db-subnet-group-state-fault, "InvalidDBSubnetStateFault" :portkey.aws.rds.-2013-09-09/invalid-db-subnet-state-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/db-subnet-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/delete-db-subnet-group-message) :ret clojure.core/true?)

(clojure.core/defn describe-orderable-db-instance-options ([describe-orderable-db-instance-options-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-orderable-db-instance-options-message describe-orderable-db-instance-options-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/orderable-db-instance-options-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/describe-orderable-db-instance-options-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeOrderableDBInstanceOptionsResult", :http.request.configuration/action "DescribeOrderableDBInstanceOptions", :http.request.configuration/output-deser-fn response-orderable-db-instance-options-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-orderable-db-instance-options :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/describe-orderable-db-instance-options-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/orderable-db-instance-options-message))

(clojure.core/defn revoke-db-security-group-ingress ([revoke-db-security-group-ingress-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-revoke-db-security-group-ingress-message revoke-db-security-group-ingress-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/revoke-db-security-group-ingress-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/revoke-db-security-group-ingress-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RevokeDBSecurityGroupIngressResult", :http.request.configuration/action "RevokeDBSecurityGroupIngress", :http.request.configuration/output-deser-fn response-revoke-db-security-group-ingress-result, :http.request.spec/error-spec {"DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/db-security-group-not-found-fault, "AuthorizationNotFoundFault" :portkey.aws.rds.-2013-09-09/authorization-not-found-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.rds.-2013-09-09/invalid-db-security-group-state-fault}})))))
(clojure.spec.alpha/fdef revoke-db-security-group-ingress :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/revoke-db-security-group-ingress-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/revoke-db-security-group-ingress-result))

(clojure.core/defn authorize-db-security-group-ingress ([authorize-db-security-group-ingress-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-authorize-db-security-group-ingress-message authorize-db-security-group-ingress-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/authorize-db-security-group-ingress-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/authorize-db-security-group-ingress-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "AuthorizeDBSecurityGroupIngressResult", :http.request.configuration/action "AuthorizeDBSecurityGroupIngress", :http.request.configuration/output-deser-fn response-authorize-db-security-group-ingress-result, :http.request.spec/error-spec {"DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/db-security-group-not-found-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.rds.-2013-09-09/invalid-db-security-group-state-fault, "AuthorizationAlreadyExistsFault" :portkey.aws.rds.-2013-09-09/authorization-already-exists-fault, "AuthorizationQuotaExceededFault" :portkey.aws.rds.-2013-09-09/authorization-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef authorize-db-security-group-ingress :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/authorize-db-security-group-ingress-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/authorize-db-security-group-ingress-result))

(clojure.core/defn modify-db-subnet-group ([modify-db-subnet-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-db-subnet-group-message modify-db-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/modify-db-subnet-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/modify-db-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBSubnetGroupResult", :http.request.configuration/action "ModifyDBSubnetGroup", :http.request.configuration/output-deser-fn response-modify-db-subnet-group-result, :http.request.spec/error-spec {"DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/db-subnet-group-not-found-fault, "DBSubnetQuotaExceededFault" :portkey.aws.rds.-2013-09-09/db-subnet-quota-exceeded-fault, "SubnetAlreadyInUse" :portkey.aws.rds.-2013-09-09/subnet-already-in-use, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds.-2013-09-09/db-subnet-group-does-not-cover-enough-a-zs, "InvalidSubnet" :portkey.aws.rds.-2013-09-09/invalid-subnet}})))))
(clojure.spec.alpha/fdef modify-db-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/modify-db-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/modify-db-subnet-group-result))

(clojure.core/defn restore-db-instance-to-point-in-time ([restore-db-instance-to-point-in-time-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-restore-db-instance-to-point-in-time-message restore-db-instance-to-point-in-time-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/restore-db-instance-to-point-in-time-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/restore-db-instance-to-point-in-time-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RestoreDBInstanceToPointInTimeResult", :http.request.configuration/action "RestoreDBInstanceToPointInTime", :http.request.configuration/output-deser-fn response-restore-db-instance-to-point-in-time-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2013-09-09/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2013-09-09/invalid-db-instance-state-fault, "InstanceQuotaExceededFault" :portkey.aws.rds.-2013-09-09/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2013-09-09/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds.-2013-09-09/db-instance-already-exists-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds.-2013-09-09/db-subnet-group-does-not-cover-enough-a-zs, "InvalidSubnet" :portkey.aws.rds.-2013-09-09/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/db-subnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds.-2013-09-09/provisioned-iops-not-available-in-az-fault, "PointInTimeRestoreNotEnabledFault" :portkey.aws.rds.-2013-09-09/point-in-time-restore-not-enabled-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2013-09-09/storage-quota-exceeded-fault, "InvalidRestoreFault" :portkey.aws.rds.-2013-09-09/invalid-restore-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds.-2013-09-09/insufficient-db-instance-capacity-fault}})))))
(clojure.spec.alpha/fdef restore-db-instance-to-point-in-time :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/restore-db-instance-to-point-in-time-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/restore-db-instance-to-point-in-time-result))

(clojure.core/defn describe-events ([] (describe-events {})) ([describe-events-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-events-message describe-events-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/events-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/describe-events-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEventsResult", :http.request.configuration/action "DescribeEvents", :http.request.configuration/output-deser-fn response-events-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-events :args (clojure.spec.alpha/? :portkey.aws.rds.-2013-09-09/describe-events-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/events-message))

(clojure.core/defn reset-db-parameter-group ([reset-db-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-reset-db-parameter-group-message reset-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/db-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/reset-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ResetDBParameterGroupResult", :http.request.configuration/action "ResetDBParameterGroup", :http.request.configuration/output-deser-fn response-db-parameter-group-name-message, :http.request.spec/error-spec {"InvalidDBParameterGroupStateFault" :portkey.aws.rds.-2013-09-09/invalid-db-parameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef reset-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/reset-db-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/db-parameter-group-name-message))

(clojure.core/defn describe-option-groups ([] (describe-option-groups {})) ([describe-option-groups-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-option-groups-message describe-option-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/option-groups, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/describe-option-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeOptionGroupsResult", :http.request.configuration/action "DescribeOptionGroups", :http.request.configuration/output-deser-fn response-option-groups, :http.request.spec/error-spec {"OptionGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/option-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-option-groups :args (clojure.spec.alpha/? :portkey.aws.rds.-2013-09-09/describe-option-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/option-groups))

(clojure.core/defn reboot-db-instance ([reboot-db-instance-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-reboot-db-instance-message reboot-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/reboot-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/reboot-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RebootDBInstanceResult", :http.request.configuration/action "RebootDBInstance", :http.request.configuration/output-deser-fn response-reboot-db-instance-result, :http.request.spec/error-spec {"InvalidDBInstanceStateFault" :portkey.aws.rds.-2013-09-09/invalid-db-instance-state-fault, "DBInstanceNotFoundFault" :portkey.aws.rds.-2013-09-09/db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef reboot-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/reboot-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/reboot-db-instance-result))

(clojure.core/defn delete-db-security-group ([delete-db-security-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-db-security-group-message delete-db-security-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/delete-db-security-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteDBSecurityGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"InvalidDBSecurityGroupStateFault" :portkey.aws.rds.-2013-09-09/invalid-db-security-group-state-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-security-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/delete-db-security-group-message) :ret clojure.core/true?)

(clojure.core/defn list-tags-for-resource ([list-tags-for-resource-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-list-tags-for-resource-message list-tags-for-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/tag-list-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/list-tags-for-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListTagsForResourceResult", :http.request.configuration/action "ListTagsForResource", :http.request.configuration/output-deser-fn response-tag-list-message, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2013-09-09/db-instance-not-found-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds.-2013-09-09/db-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef list-tags-for-resource :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/list-tags-for-resource-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/tag-list-message))

(clojure.core/defn describe-engine-default-parameters ([describe-engine-default-parameters-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-engine-default-parameters-message describe-engine-default-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/describe-engine-default-parameters-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/describe-engine-default-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEngineDefaultParametersResult", :http.request.configuration/action "DescribeEngineDefaultParameters", :http.request.configuration/output-deser-fn response-describe-engine-default-parameters-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-engine-default-parameters :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/describe-engine-default-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/describe-engine-default-parameters-result))

(clojure.core/defn delete-db-instance ([delete-db-instance-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-db-instance-message delete-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/delete-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/delete-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteDBInstanceResult", :http.request.configuration/action "DeleteDBInstance", :http.request.configuration/output-deser-fn response-delete-db-instance-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2013-09-09/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2013-09-09/invalid-db-instance-state-fault, "DBSnapshotAlreadyExistsFault" :portkey.aws.rds.-2013-09-09/db-snapshot-already-exists-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds.-2013-09-09/snapshot-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef delete-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/delete-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/delete-db-instance-result))

(clojure.core/defn describe-db-subnet-groups ([] (describe-db-subnet-groups {})) ([describe-db-subnet-groups-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-subnet-groups-message describe-db-subnet-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/db-subnet-group-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/describe-db-subnet-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBSubnetGroupsResult", :http.request.configuration/action "DescribeDBSubnetGroups", :http.request.configuration/output-deser-fn response-db-subnet-group-message, :http.request.spec/error-spec {"DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/db-subnet-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-subnet-groups :args (clojure.spec.alpha/? :portkey.aws.rds.-2013-09-09/describe-db-subnet-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/db-subnet-group-message))

(clojure.core/defn create-db-instance ([create-db-instance-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-db-instance-message create-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/create-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/create-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBInstanceResult", :http.request.configuration/action "CreateDBInstance", :http.request.configuration/output-deser-fn response-create-db-instance-result, :http.request.spec/error-spec {"InstanceQuotaExceededFault" :portkey.aws.rds.-2013-09-09/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2013-09-09/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds.-2013-09-09/db-instance-already-exists-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds.-2013-09-09/db-subnet-group-does-not-cover-enough-a-zs, "InvalidSubnet" :portkey.aws.rds.-2013-09-09/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/db-subnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds.-2013-09-09/provisioned-iops-not-available-in-az-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/db-parameter-group-not-found-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2013-09-09/storage-quota-exceeded-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds.-2013-09-09/insufficient-db-instance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef create-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/create-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/create-db-instance-result))

(clojure.core/defn promote-read-replica ([promote-read-replica-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-promote-read-replica-message promote-read-replica-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/promote-read-replica-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/promote-read-replica-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "PromoteReadReplicaResult", :http.request.configuration/action "PromoteReadReplica", :http.request.configuration/output-deser-fn response-promote-read-replica-result, :http.request.spec/error-spec {"InvalidDBInstanceStateFault" :portkey.aws.rds.-2013-09-09/invalid-db-instance-state-fault, "DBInstanceNotFoundFault" :portkey.aws.rds.-2013-09-09/db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef promote-read-replica :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/promote-read-replica-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/promote-read-replica-result))

(clojure.core/defn delete-event-subscription ([delete-event-subscription-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-event-subscription-message delete-event-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/delete-event-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/delete-event-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteEventSubscriptionResult", :http.request.configuration/action "DeleteEventSubscription", :http.request.configuration/output-deser-fn response-delete-event-subscription-result, :http.request.spec/error-spec {"SubscriptionNotFoundFault" :portkey.aws.rds.-2013-09-09/subscription-not-found-fault, "InvalidEventSubscriptionStateFault" :portkey.aws.rds.-2013-09-09/invalid-event-subscription-state-fault}})))))
(clojure.spec.alpha/fdef delete-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/delete-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/delete-event-subscription-result))

(clojure.core/defn describe-db-log-files ([describe-db-log-files-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-log-files-message describe-db-log-files-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/describe-db-log-files-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/describe-db-log-files-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBLogFilesResult", :http.request.configuration/action "DescribeDBLogFiles", :http.request.configuration/output-deser-fn response-describe-db-log-files-response, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2013-09-09/db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-log-files :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/describe-db-log-files-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/describe-db-log-files-response))

(clojure.core/defn restore-db-instance-from-db-snapshot ([restore-db-instance-from-db-snapshot-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-restore-db-instance-from-db-snapshot-message restore-db-instance-from-db-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/restore-db-instance-from-db-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/restore-db-instance-from-db-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RestoreDBInstanceFromDBSnapshotResult", :http.request.configuration/action "RestoreDBInstanceFromDBSnapshot", :http.request.configuration/output-deser-fn response-restore-db-instance-from-db-snapshot-result, :http.request.spec/error-spec {"InstanceQuotaExceededFault" :portkey.aws.rds.-2013-09-09/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2013-09-09/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds.-2013-09-09/db-instance-already-exists-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds.-2013-09-09/db-subnet-group-does-not-cover-enough-a-zs, "InvalidSubnet" :portkey.aws.rds.-2013-09-09/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/db-subnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds.-2013-09-09/provisioned-iops-not-available-in-az-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2013-09-09/storage-quota-exceeded-fault, "InvalidRestoreFault" :portkey.aws.rds.-2013-09-09/invalid-restore-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds.-2013-09-09/insufficient-db-instance-capacity-fault, "InvalidDBSnapshotStateFault" :portkey.aws.rds.-2013-09-09/invalid-db-snapshot-state-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds.-2013-09-09/db-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef restore-db-instance-from-db-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/restore-db-instance-from-db-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/restore-db-instance-from-db-snapshot-result))

(clojure.core/defn describe-db-snapshots ([] (describe-db-snapshots {})) ([describe-db-snapshots-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-snapshots-message describe-db-snapshots-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/db-snapshot-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/describe-db-snapshots-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBSnapshotsResult", :http.request.configuration/action "DescribeDBSnapshots", :http.request.configuration/output-deser-fn response-db-snapshot-message, :http.request.spec/error-spec {"DBSnapshotNotFoundFault" :portkey.aws.rds.-2013-09-09/db-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-snapshots :args (clojure.spec.alpha/? :portkey.aws.rds.-2013-09-09/describe-db-snapshots-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/db-snapshot-message))

(clojure.core/defn create-db-subnet-group ([create-db-subnet-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-db-subnet-group-message create-db-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/create-db-subnet-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/create-db-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBSubnetGroupResult", :http.request.configuration/action "CreateDBSubnetGroup", :http.request.configuration/output-deser-fn response-create-db-subnet-group-result, :http.request.spec/error-spec {"DBSubnetGroupAlreadyExistsFault" :portkey.aws.rds.-2013-09-09/db-subnet-group-already-exists-fault, "DBSubnetGroupQuotaExceededFault" :portkey.aws.rds.-2013-09-09/db-subnet-group-quota-exceeded-fault, "DBSubnetQuotaExceededFault" :portkey.aws.rds.-2013-09-09/db-subnet-quota-exceeded-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds.-2013-09-09/db-subnet-group-does-not-cover-enough-a-zs, "InvalidSubnet" :portkey.aws.rds.-2013-09-09/invalid-subnet}})))))
(clojure.spec.alpha/fdef create-db-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/create-db-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/create-db-subnet-group-result))

(clojure.core/defn remove-source-identifier-from-subscription ([remove-source-identifier-from-subscription-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-remove-source-identifier-from-subscription-message remove-source-identifier-from-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/remove-source-identifier-from-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/remove-source-identifier-from-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RemoveSourceIdentifierFromSubscriptionResult", :http.request.configuration/action "RemoveSourceIdentifierFromSubscription", :http.request.configuration/output-deser-fn response-remove-source-identifier-from-subscription-result, :http.request.spec/error-spec {"SubscriptionNotFoundFault" :portkey.aws.rds.-2013-09-09/subscription-not-found-fault, "SourceNotFoundFault" :portkey.aws.rds.-2013-09-09/source-not-found-fault}})))))
(clojure.spec.alpha/fdef remove-source-identifier-from-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/remove-source-identifier-from-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/remove-source-identifier-from-subscription-result))

(clojure.core/defn create-option-group ([create-option-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-option-group-message create-option-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/create-option-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/create-option-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateOptionGroupResult", :http.request.configuration/action "CreateOptionGroup", :http.request.configuration/output-deser-fn response-create-option-group-result, :http.request.spec/error-spec {"OptionGroupAlreadyExistsFault" :portkey.aws.rds.-2013-09-09/option-group-already-exists-fault, "OptionGroupQuotaExceededFault" :portkey.aws.rds.-2013-09-09/option-group-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef create-option-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/create-option-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/create-option-group-result))

(clojure.core/defn describe-event-categories ([] (describe-event-categories {})) ([describe-event-categories-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-event-categories-message describe-event-categories-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/event-categories-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/describe-event-categories-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEventCategoriesResult", :http.request.configuration/action "DescribeEventCategories", :http.request.configuration/output-deser-fn response-event-categories-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-event-categories :args (clojure.spec.alpha/? :portkey.aws.rds.-2013-09-09/describe-event-categories-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/event-categories-message))

(clojure.core/defn describe-reserved-db-instances-offerings ([] (describe-reserved-db-instances-offerings {})) ([describe-reserved-db-instances-offerings-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-reserved-db-instances-offerings-message describe-reserved-db-instances-offerings-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/reserved-db-instances-offering-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/describe-reserved-db-instances-offerings-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeReservedDBInstancesOfferingsResult", :http.request.configuration/action "DescribeReservedDBInstancesOfferings", :http.request.configuration/output-deser-fn response-reserved-db-instances-offering-message, :http.request.spec/error-spec {"ReservedDBInstancesOfferingNotFoundFault" :portkey.aws.rds.-2013-09-09/reserved-db-instances-offering-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-reserved-db-instances-offerings :args (clojure.spec.alpha/? :portkey.aws.rds.-2013-09-09/describe-reserved-db-instances-offerings-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/reserved-db-instances-offering-message))

(clojure.core/defn create-db-snapshot ([create-db-snapshot-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-db-snapshot-message create-db-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/create-db-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/create-db-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBSnapshotResult", :http.request.configuration/action "CreateDBSnapshot", :http.request.configuration/output-deser-fn response-create-db-snapshot-result, :http.request.spec/error-spec {"DBSnapshotAlreadyExistsFault" :portkey.aws.rds.-2013-09-09/db-snapshot-already-exists-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2013-09-09/invalid-db-instance-state-fault, "DBInstanceNotFoundFault" :portkey.aws.rds.-2013-09-09/db-instance-not-found-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds.-2013-09-09/snapshot-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef create-db-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/create-db-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/create-db-snapshot-result))

(clojure.core/defn download-db-log-file-portion ([download-db-log-file-portion-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-download-db-log-file-portion-message download-db-log-file-portion-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/download-db-log-file-portion-details, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/download-db-log-file-portion-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DownloadDBLogFilePortionResult", :http.request.configuration/action "DownloadDBLogFilePortion", :http.request.configuration/output-deser-fn response-download-db-log-file-portion-details, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2013-09-09/db-instance-not-found-fault, "DBLogFileNotFoundFault" :portkey.aws.rds.-2013-09-09/db-log-file-not-found-fault}})))))
(clojure.spec.alpha/fdef download-db-log-file-portion :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/download-db-log-file-portion-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/download-db-log-file-portion-details))

(clojure.core/defn describe-db-instances ([] (describe-db-instances {})) ([describe-db-instances-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-instances-message describe-db-instances-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/db-instance-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/describe-db-instances-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBInstancesResult", :http.request.configuration/action "DescribeDBInstances", :http.request.configuration/output-deser-fn response-db-instance-message, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2013-09-09/db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-instances :args (clojure.spec.alpha/? :portkey.aws.rds.-2013-09-09/describe-db-instances-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/db-instance-message))

(clojure.core/defn modify-event-subscription ([modify-event-subscription-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-event-subscription-message modify-event-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/modify-event-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/modify-event-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyEventSubscriptionResult", :http.request.configuration/action "ModifyEventSubscription", :http.request.configuration/output-deser-fn response-modify-event-subscription-result, :http.request.spec/error-spec {"EventSubscriptionQuotaExceededFault" :portkey.aws.rds.-2013-09-09/event-subscription-quota-exceeded-fault, "SubscriptionNotFoundFault" :portkey.aws.rds.-2013-09-09/subscription-not-found-fault, "SNSInvalidTopicFault" :portkey.aws.rds.-2013-09-09/sns-invalid-topic-fault, "SNSNoAuthorizationFault" :portkey.aws.rds.-2013-09-09/sns-no-authorization-fault, "SNSTopicArnNotFoundFault" :portkey.aws.rds.-2013-09-09/sns-topic-arn-not-found-fault, "SubscriptionCategoryNotFoundFault" :portkey.aws.rds.-2013-09-09/subscription-category-not-found-fault}})))))
(clojure.spec.alpha/fdef modify-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/modify-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/modify-event-subscription-result))

(clojure.core/defn describe-db-engine-versions ([] (describe-db-engine-versions {})) ([describe-db-engine-versions-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-engine-versions-message describe-db-engine-versions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/db-engine-version-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/describe-db-engine-versions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBEngineVersionsResult", :http.request.configuration/action "DescribeDBEngineVersions", :http.request.configuration/output-deser-fn response-db-engine-version-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-db-engine-versions :args (clojure.spec.alpha/? :portkey.aws.rds.-2013-09-09/describe-db-engine-versions-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/db-engine-version-message))

(clojure.core/defn describe-option-group-options ([describe-option-group-options-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-option-group-options-message describe-option-group-options-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/option-group-options-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/describe-option-group-options-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeOptionGroupOptionsResult", :http.request.configuration/action "DescribeOptionGroupOptions", :http.request.configuration/output-deser-fn response-option-group-options-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-option-group-options :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/describe-option-group-options-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/option-group-options-message))

(clojure.core/defn create-db-security-group ([create-db-security-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-db-security-group-message create-db-security-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/create-db-security-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/create-db-security-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBSecurityGroupResult", :http.request.configuration/action "CreateDBSecurityGroup", :http.request.configuration/output-deser-fn response-create-db-security-group-result, :http.request.spec/error-spec {"DBSecurityGroupAlreadyExistsFault" :portkey.aws.rds.-2013-09-09/db-security-group-already-exists-fault, "DBSecurityGroupQuotaExceededFault" :portkey.aws.rds.-2013-09-09/db-security-group-quota-exceeded-fault, "DBSecurityGroupNotSupportedFault" :portkey.aws.rds.-2013-09-09/db-security-group-not-supported-fault}})))))
(clojure.spec.alpha/fdef create-db-security-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/create-db-security-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/create-db-security-group-result))

(clojure.core/defn delete-option-group ([delete-option-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-option-group-message delete-option-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/delete-option-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteOptionGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"OptionGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/option-group-not-found-fault, "InvalidOptionGroupStateFault" :portkey.aws.rds.-2013-09-09/invalid-option-group-state-fault}})))))
(clojure.spec.alpha/fdef delete-option-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/delete-option-group-message) :ret clojure.core/true?)

(clojure.core/defn create-event-subscription ([create-event-subscription-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-event-subscription-message create-event-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/create-event-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/create-event-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateEventSubscriptionResult", :http.request.configuration/action "CreateEventSubscription", :http.request.configuration/output-deser-fn response-create-event-subscription-result, :http.request.spec/error-spec {"EventSubscriptionQuotaExceededFault" :portkey.aws.rds.-2013-09-09/event-subscription-quota-exceeded-fault, "SubscriptionAlreadyExistFault" :portkey.aws.rds.-2013-09-09/subscription-already-exist-fault, "SNSInvalidTopicFault" :portkey.aws.rds.-2013-09-09/sns-invalid-topic-fault, "SNSNoAuthorizationFault" :portkey.aws.rds.-2013-09-09/sns-no-authorization-fault, "SNSTopicArnNotFoundFault" :portkey.aws.rds.-2013-09-09/sns-topic-arn-not-found-fault, "SubscriptionCategoryNotFoundFault" :portkey.aws.rds.-2013-09-09/subscription-category-not-found-fault, "SourceNotFoundFault" :portkey.aws.rds.-2013-09-09/source-not-found-fault}})))))
(clojure.spec.alpha/fdef create-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/create-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/create-event-subscription-result))

(clojure.core/defn create-db-parameter-group ([create-db-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-db-parameter-group-message create-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/create-db-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/create-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBParameterGroupResult", :http.request.configuration/action "CreateDBParameterGroup", :http.request.configuration/output-deser-fn response-create-db-parameter-group-result, :http.request.spec/error-spec {"DBParameterGroupQuotaExceededFault" :portkey.aws.rds.-2013-09-09/db-parameter-group-quota-exceeded-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.rds.-2013-09-09/db-parameter-group-already-exists-fault}})))))
(clojure.spec.alpha/fdef create-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/create-db-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/create-db-parameter-group-result))

(clojure.core/defn purchase-reserved-db-instances-offering ([purchase-reserved-db-instances-offering-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-purchase-reserved-db-instances-offering-message purchase-reserved-db-instances-offering-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/purchase-reserved-db-instances-offering-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/purchase-reserved-db-instances-offering-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "PurchaseReservedDBInstancesOfferingResult", :http.request.configuration/action "PurchaseReservedDBInstancesOffering", :http.request.configuration/output-deser-fn response-purchase-reserved-db-instances-offering-result, :http.request.spec/error-spec {"ReservedDBInstancesOfferingNotFoundFault" :portkey.aws.rds.-2013-09-09/reserved-db-instances-offering-not-found-fault, "ReservedDBInstanceAlreadyExistsFault" :portkey.aws.rds.-2013-09-09/reserved-db-instance-already-exists-fault, "ReservedDBInstanceQuotaExceededFault" :portkey.aws.rds.-2013-09-09/reserved-db-instance-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef purchase-reserved-db-instances-offering :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/purchase-reserved-db-instances-offering-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/purchase-reserved-db-instances-offering-result))

(clojure.core/defn delete-db-parameter-group ([delete-db-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-db-parameter-group-message delete-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/delete-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteDBParameterGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"InvalidDBParameterGroupStateFault" :portkey.aws.rds.-2013-09-09/invalid-db-parameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/delete-db-parameter-group-message) :ret clojure.core/true?)

(clojure.core/defn copy-db-snapshot ([copy-db-snapshot-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-copy-db-snapshot-message copy-db-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/copy-db-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/copy-db-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CopyDBSnapshotResult", :http.request.configuration/action "CopyDBSnapshot", :http.request.configuration/output-deser-fn response-copy-db-snapshot-result, :http.request.spec/error-spec {"DBSnapshotAlreadyExistsFault" :portkey.aws.rds.-2013-09-09/db-snapshot-already-exists-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds.-2013-09-09/db-snapshot-not-found-fault, "InvalidDBSnapshotStateFault" :portkey.aws.rds.-2013-09-09/invalid-db-snapshot-state-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds.-2013-09-09/snapshot-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef copy-db-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/copy-db-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/copy-db-snapshot-result))

(clojure.core/defn describe-reserved-db-instances ([] (describe-reserved-db-instances {})) ([describe-reserved-db-instances-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-reserved-db-instances-message describe-reserved-db-instances-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/reserved-db-instance-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/describe-reserved-db-instances-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeReservedDBInstancesResult", :http.request.configuration/action "DescribeReservedDBInstances", :http.request.configuration/output-deser-fn response-reserved-db-instance-message, :http.request.spec/error-spec {"ReservedDBInstanceNotFoundFault" :portkey.aws.rds.-2013-09-09/reserved-db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-reserved-db-instances :args (clojure.spec.alpha/? :portkey.aws.rds.-2013-09-09/describe-reserved-db-instances-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/reserved-db-instance-message))

(clojure.core/defn describe-event-subscriptions ([] (describe-event-subscriptions {})) ([describe-event-subscriptions-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-event-subscriptions-message describe-event-subscriptions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/event-subscriptions-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/describe-event-subscriptions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEventSubscriptionsResult", :http.request.configuration/action "DescribeEventSubscriptions", :http.request.configuration/output-deser-fn response-event-subscriptions-message, :http.request.spec/error-spec {"SubscriptionNotFoundFault" :portkey.aws.rds.-2013-09-09/subscription-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-event-subscriptions :args (clojure.spec.alpha/? :portkey.aws.rds.-2013-09-09/describe-event-subscriptions-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/event-subscriptions-message))

(clojure.core/defn modify-db-instance ([modify-db-instance-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-db-instance-message modify-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/modify-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/modify-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBInstanceResult", :http.request.configuration/action "ModifyDBInstance", :http.request.configuration/output-deser-fn response-modify-db-instance-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2013-09-09/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2013-09-09/invalid-db-instance-state-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2013-09-09/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds.-2013-09-09/db-instance-already-exists-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.rds.-2013-09-09/invalid-db-security-group-state-fault, "DBUpgradeDependencyFailureFault" :portkey.aws.rds.-2013-09-09/db-upgrade-dependency-failure-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds.-2013-09-09/provisioned-iops-not-available-in-az-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/db-parameter-group-not-found-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2013-09-09/storage-quota-exceeded-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds.-2013-09-09/insufficient-db-instance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef modify-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/modify-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/modify-db-instance-result))

(clojure.core/defn describe-db-parameters ([describe-db-parameters-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-parameters-message describe-db-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/db-parameter-group-details, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/describe-db-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBParametersResult", :http.request.configuration/action "DescribeDBParameters", :http.request.configuration/output-deser-fn response-db-parameter-group-details, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-parameters :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/describe-db-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/db-parameter-group-details))

(clojure.core/defn modify-option-group ([modify-option-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-option-group-message modify-option-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/modify-option-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/modify-option-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyOptionGroupResult", :http.request.configuration/action "ModifyOptionGroup", :http.request.configuration/output-deser-fn response-modify-option-group-result, :http.request.spec/error-spec {"InvalidOptionGroupStateFault" :portkey.aws.rds.-2013-09-09/invalid-option-group-state-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/option-group-not-found-fault}})))))
(clojure.spec.alpha/fdef modify-option-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/modify-option-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/modify-option-group-result))

(clojure.core/defn describe-db-parameter-groups ([] (describe-db-parameter-groups {})) ([describe-db-parameter-groups-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-parameter-groups-message describe-db-parameter-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/db-parameter-groups-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/describe-db-parameter-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBParameterGroupsResult", :http.request.configuration/action "DescribeDBParameterGroups", :http.request.configuration/output-deser-fn response-db-parameter-groups-message, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-parameter-groups :args (clojure.spec.alpha/? :portkey.aws.rds.-2013-09-09/describe-db-parameter-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/db-parameter-groups-message))

(clojure.core/defn remove-tags-from-resource ([remove-tags-from-resource-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-remove-tags-from-resource-message remove-tags-from-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/remove-tags-from-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RemoveTagsFromResource", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2013-09-09/db-instance-not-found-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds.-2013-09-09/db-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef remove-tags-from-resource :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/remove-tags-from-resource-message) :ret clojure.core/true?)

(clojure.core/defn add-tags-to-resource ([add-tags-to-resource-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-add-tags-to-resource-message add-tags-to-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/add-tags-to-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AddTagsToResource", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2013-09-09/db-instance-not-found-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds.-2013-09-09/db-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef add-tags-to-resource :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/add-tags-to-resource-message) :ret clojure.core/true?)

(clojure.core/defn modify-db-parameter-group ([modify-db-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-db-parameter-group-message modify-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/db-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/modify-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBParameterGroupResult", :http.request.configuration/action "ModifyDBParameterGroup", :http.request.configuration/output-deser-fn response-db-parameter-group-name-message, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/db-parameter-group-not-found-fault, "InvalidDBParameterGroupStateFault" :portkey.aws.rds.-2013-09-09/invalid-db-parameter-group-state-fault}})))))
(clojure.spec.alpha/fdef modify-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/modify-db-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/db-parameter-group-name-message))

(clojure.core/defn describe-db-security-groups ([] (describe-db-security-groups {})) ([describe-db-security-groups-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-security-groups-message describe-db-security-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/db-security-group-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/describe-db-security-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBSecurityGroupsResult", :http.request.configuration/action "DescribeDBSecurityGroups", :http.request.configuration/output-deser-fn response-db-security-group-message, :http.request.spec/error-spec {"DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-security-groups :args (clojure.spec.alpha/? :portkey.aws.rds.-2013-09-09/describe-db-security-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/db-security-group-message))

(clojure.core/defn create-db-instance-read-replica ([create-db-instance-read-replica-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-db-instance-read-replica-message create-db-instance-read-replica-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.rds.-2013-09-09/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds.-2013-09-09/create-db-instance-read-replica-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-09-09", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds.-2013-09-09/create-db-instance-read-replica-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBInstanceReadReplicaResult", :http.request.configuration/action "CreateDBInstanceReadReplica", :http.request.configuration/output-deser-fn response-create-db-instance-read-replica-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds.-2013-09-09/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds.-2013-09-09/invalid-db-instance-state-fault, "InstanceQuotaExceededFault" :portkey.aws.rds.-2013-09-09/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds.-2013-09-09/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds.-2013-09-09/db-instance-already-exists-fault, "InvalidDBSubnetGroupFault" :portkey.aws.rds.-2013-09-09/invalid-db-subnet-group-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds.-2013-09-09/db-subnet-group-does-not-cover-enough-a-zs, "InvalidSubnet" :portkey.aws.rds.-2013-09-09/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/db-subnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds.-2013-09-09/provisioned-iops-not-available-in-az-fault, "DBSubnetGroupNotAllowedFault" :portkey.aws.rds.-2013-09-09/db-subnet-group-not-allowed-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/db-parameter-group-not-found-fault, "StorageQuotaExceededFault" :portkey.aws.rds.-2013-09-09/storage-quota-exceeded-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds.-2013-09-09/insufficient-db-instance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds.-2013-09-09/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef create-db-instance-read-replica :args (clojure.spec.alpha/tuple :portkey.aws.rds.-2013-09-09/create-db-instance-read-replica-message) :ret (clojure.spec.alpha/and :portkey.aws.rds.-2013-09-09/create-db-instance-read-replica-result))
