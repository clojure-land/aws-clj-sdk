(ns portkey.aws.redshift.-2012-12-01 (:require [portkey.aws]))

(def
 endpoints
 '{"ap-northeast-1"
   {:credential-scope {:service "redshift", :region "ap-northeast-1"},
    :ssl-common-name "redshift.ap-northeast-1.amazonaws.com",
    :endpoint "https://redshift.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "redshift", :region "eu-west-1"},
    :ssl-common-name "redshift.eu-west-1.amazonaws.com",
    :endpoint "https://redshift.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "redshift", :region "us-east-2"},
    :ssl-common-name "redshift.us-east-2.amazonaws.com",
    :endpoint "https://redshift.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope {:service "redshift", :region "ap-southeast-2"},
    :ssl-common-name "redshift.ap-southeast-2.amazonaws.com",
    :endpoint "https://redshift.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "cn-north-1"
   {:credential-scope {:service "redshift", :region "cn-north-1"},
    :ssl-common-name "redshift.cn-north-1.amazonaws.com.cn",
    :endpoint "https://redshift.cn-north-1.amazonaws.com.cn",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "redshift", :region "sa-east-1"},
    :ssl-common-name "redshift.sa-east-1.amazonaws.com",
    :endpoint "https://redshift.sa-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope {:service "redshift", :region "ap-southeast-1"},
    :ssl-common-name "redshift.ap-southeast-1.amazonaws.com",
    :endpoint "https://redshift.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "cn-northwest-1"
   {:credential-scope {:service "redshift", :region "cn-northwest-1"},
    :ssl-common-name "redshift.cn-northwest-1.amazonaws.com.cn",
    :endpoint "https://redshift.cn-northwest-1.amazonaws.com.cn",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope {:service "redshift", :region "ap-northeast-2"},
    :ssl-common-name "redshift.ap-northeast-2.amazonaws.com",
    :endpoint "https://redshift.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-west-3"
   {:credential-scope {:service "redshift", :region "eu-west-3"},
    :ssl-common-name "redshift.eu-west-3.amazonaws.com",
    :endpoint "https://redshift.eu-west-3.amazonaws.com",
    :signature-version :v4},
   "ca-central-1"
   {:credential-scope {:service "redshift", :region "ca-central-1"},
    :ssl-common-name "redshift.ca-central-1.amazonaws.com",
    :endpoint "https://redshift.ca-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "redshift", :region "eu-central-1"},
    :ssl-common-name "redshift.eu-central-1.amazonaws.com",
    :endpoint "https://redshift.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "redshift", :region "eu-west-2"},
    :ssl-common-name "redshift.eu-west-2.amazonaws.com",
    :endpoint "https://redshift.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-gov-west-1"
   {:credential-scope {:service "redshift", :region "us-gov-west-1"},
    :ssl-common-name "redshift.us-gov-west-1.amazonaws.com",
    :endpoint "https://redshift.us-gov-west-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "redshift", :region "us-west-2"},
    :ssl-common-name "redshift.us-west-2.amazonaws.com",
    :endpoint "https://redshift.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "redshift", :region "us-east-1"},
    :ssl-common-name "redshift.us-east-1.amazonaws.com",
    :endpoint "https://redshift.us-east-1.amazonaws.com",
    :signature-version :v4},
   "us-west-1"
   {:credential-scope {:service "redshift", :region "us-west-1"},
    :ssl-common-name "redshift.us-west-1.amazonaws.com",
    :endpoint "https://redshift.us-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-south-1"
   {:credential-scope {:service "redshift", :region "ap-south-1"},
    :ssl-common-name "redshift.ap-south-1.amazonaws.com",
    :endpoint "https://redshift.ap-south-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-subnet-identifier-list ser-parameters-list ser-tag-value-list ser-source-ids-list ser-parameter-apply-type ser-source-type ser-tag-list ser-tag-key-list ser-integer ser-iam-role-arn-list ser-string ser-parameter ser-vpc-security-group-id-list ser-tstamp ser-event-categories-list ser-tag ser-boolean-optional ser-cluster-security-group-name-list ser-db-group-list ser-integer-optional ser-boolean)

(clojure.core/defn- ser-subnet-identifier-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-parameters-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-tag-value-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-source-ids-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-parameter-apply-type [shape-input] ({"static" "static", :static "static", "dynamic" "dynamic", :dynamic "dynamic"} shape-input))
(clojure.core/defn- ser-source-type [shape-input] ({"cluster" "cluster", :cluster "cluster", "cluster-parameter-group" "cluster-parameter-group", :cluster-parameter-group "cluster-parameter-group", "cluster-security-group" "cluster-security-group", :cluster-security-group "cluster-security-group", "cluster-snapshot" "cluster-snapshot", :cluster-snapshot "cluster-snapshot"} shape-input))
(clojure.core/defn- ser-tag-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-tag-key-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-integer [shape-input] shape-input)
(clojure.core/defn- ser-iam-role-arn-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-string [shape-input] shape-input)
(clojure.core/defn- ser-parameter [shape-input] (clojure.core/cond-> {} (:data-type shape-input) (clojure.core/assoc "Parameter.DataType" (ser-string (:data-type shape-input))) (:parameter-name shape-input) (clojure.core/assoc "Parameter.ParameterName" (ser-string (:parameter-name shape-input))) (:source shape-input) (clojure.core/assoc "Parameter.Source" (ser-string (:source shape-input))) (:minimum-engine-version shape-input) (clojure.core/assoc "Parameter.MinimumEngineVersion" (ser-string (:minimum-engine-version shape-input))) (:allowed-values shape-input) (clojure.core/assoc "Parameter.AllowedValues" (ser-string (:allowed-values shape-input))) (:apply-type shape-input) (clojure.core/assoc "Parameter.ApplyType" (ser-parameter-apply-type (:apply-type shape-input))) (:description shape-input) (clojure.core/assoc "Parameter.Description" (ser-string (:description shape-input))) (:is-modifiable shape-input) (clojure.core/assoc "Parameter.IsModifiable" (ser-boolean (:is-modifiable shape-input))) (:parameter-value shape-input) (clojure.core/assoc "Parameter.ParameterValue" (ser-string (:parameter-value shape-input)))))
(clojure.core/defn- ser-vpc-security-group-id-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-tstamp [shape-input] shape-input)
(clojure.core/defn- ser-event-categories-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-tag [shape-input] (clojure.core/cond-> {} (:key shape-input) (clojure.core/assoc "Tag.Key" (ser-string (:key shape-input))) (:value shape-input) (clojure.core/assoc "Tag.Value" (ser-string (:value shape-input)))))
(clojure.core/defn- ser-boolean-optional [shape-input] shape-input)
(clojure.core/defn- ser-cluster-security-group-name-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-db-group-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-integer-optional [shape-input] shape-input)
(clojure.core/defn- ser-boolean [shape-input] shape-input)

(clojure.core/defn req<-describe-cluster-parameters-message [action-name74628 input74627] (clojure.core/let [input74629 {:body {"ParameterGroupName" (ser-string (input74627 :parameter-group-name)), "Version" "2012-12-01", "Action" action-name74628}}] (clojure.core/cond-> input74629 (clojure.core/contains? input74627 :source) (clojure.core/assoc-in [:body "Source"] (ser-string (input74627 :source))) (clojure.core/contains? input74627 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input74627 :max-records))) (clojure.core/contains? input74627 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input74627 :marker))))))
(clojure.core/defn req<-enable-snapshot-copy-message [action-name74631 input74630] (clojure.core/let [input74632 {:body {"ClusterIdentifier" (ser-string (input74630 :cluster-identifier)), "DestinationRegion" (ser-string (input74630 :destination-region)), "Version" "2012-12-01", "Action" action-name74631}}] (clojure.core/cond-> input74632 (clojure.core/contains? input74630 :retention-period) (clojure.core/assoc-in [:body "RetentionPeriod"] (ser-integer-optional (input74630 :retention-period))) (clojure.core/contains? input74630 :snapshot-copy-grant-name) (clojure.core/assoc-in [:body "SnapshotCopyGrantName"] (ser-string (input74630 :snapshot-copy-grant-name))))))
(clojure.core/defn req<-disable-snapshot-copy-message [action-name74634 input74633] {:body {"ClusterIdentifier" (ser-string (input74633 :cluster-identifier)), "Version" "2012-12-01", "Action" action-name74634}})
(clojure.core/defn req<-create-cluster-message [action-name74636 input74635] (clojure.core/let [input74637 {:body {"ClusterIdentifier" (ser-string (input74635 :cluster-identifier)), "MasterUserPassword" (ser-string (input74635 :master-user-password)), "MasterUsername" (ser-string (input74635 :master-username)), "NodeType" (ser-string (input74635 :node-type)), "Version" "2012-12-01", "Action" action-name74636}}] (clojure.core/cond-> input74637 (clojure.core/contains? input74635 :enhanced-vpc-routing) (clojure.core/assoc-in [:body "EnhancedVpcRouting"] (ser-boolean-optional (input74635 :enhanced-vpc-routing))) (clojure.core/contains? input74635 :publicly-accessible) (clojure.core/assoc-in [:body "PubliclyAccessible"] (ser-boolean-optional (input74635 :publicly-accessible))) (clojure.core/contains? input74635 :preferred-maintenance-window) (clojure.core/assoc-in [:body "PreferredMaintenanceWindow"] (ser-string (input74635 :preferred-maintenance-window))) (clojure.core/contains? input74635 :encrypted) (clojure.core/assoc-in [:body "Encrypted"] (ser-boolean-optional (input74635 :encrypted))) (clojure.core/contains? input74635 :hsm-client-certificate-identifier) (clojure.core/assoc-in [:body "HsmClientCertificateIdentifier"] (ser-string (input74635 :hsm-client-certificate-identifier))) (clojure.core/contains? input74635 :cluster-subnet-group-name) (clojure.core/assoc-in [:body "ClusterSubnetGroupName"] (ser-string (input74635 :cluster-subnet-group-name))) (clojure.core/contains? input74635 :number-of-nodes) (clojure.core/assoc-in [:body "NumberOfNodes"] (ser-integer-optional (input74635 :number-of-nodes))) (clojure.core/contains? input74635 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input74635 :tags))) (clojure.core/contains? input74635 :dbname) (clojure.core/assoc-in [:body "DBName"] (ser-string (input74635 :dbname))) (clojure.core/contains? input74635 :vpc-security-group-ids) (clojure.core/assoc-in [:body "VpcSecurityGroupIds"] (ser-vpc-security-group-id-list (input74635 :vpc-security-group-ids))) (clojure.core/contains? input74635 :availability-zone) (clojure.core/assoc-in [:body "AvailabilityZone"] (ser-string (input74635 :availability-zone))) (clojure.core/contains? input74635 :cluster-type) (clojure.core/assoc-in [:body "ClusterType"] (ser-string (input74635 :cluster-type))) (clojure.core/contains? input74635 :cluster-security-groups) (clojure.core/assoc-in [:body "ClusterSecurityGroups"] (ser-cluster-security-group-name-list (input74635 :cluster-security-groups))) (clojure.core/contains? input74635 :additional-info) (clojure.core/assoc-in [:body "AdditionalInfo"] (ser-string (input74635 :additional-info))) (clojure.core/contains? input74635 :elastic-ip) (clojure.core/assoc-in [:body "ElasticIp"] (ser-string (input74635 :elastic-ip))) (clojure.core/contains? input74635 :hsm-configuration-identifier) (clojure.core/assoc-in [:body "HsmConfigurationIdentifier"] (ser-string (input74635 :hsm-configuration-identifier))) (clojure.core/contains? input74635 :port) (clojure.core/assoc-in [:body "Port"] (ser-integer-optional (input74635 :port))) (clojure.core/contains? input74635 :kms-key-id) (clojure.core/assoc-in [:body "KmsKeyId"] (ser-string (input74635 :kms-key-id))) (clojure.core/contains? input74635 :allow-version-upgrade) (clojure.core/assoc-in [:body "AllowVersionUpgrade"] (ser-boolean-optional (input74635 :allow-version-upgrade))) (clojure.core/contains? input74635 :cluster-version) (clojure.core/assoc-in [:body "ClusterVersion"] (ser-string (input74635 :cluster-version))) (clojure.core/contains? input74635 :automated-snapshot-retention-period) (clojure.core/assoc-in [:body "AutomatedSnapshotRetentionPeriod"] (ser-integer-optional (input74635 :automated-snapshot-retention-period))) (clojure.core/contains? input74635 :iam-roles) (clojure.core/assoc-in [:body "IamRoles"] (ser-iam-role-arn-list (input74635 :iam-roles))) (clojure.core/contains? input74635 :cluster-parameter-group-name) (clojure.core/assoc-in [:body "ClusterParameterGroupName"] (ser-string (input74635 :cluster-parameter-group-name))))))
(clojure.core/defn req<-describe-cluster-snapshots-message [action-name74639 input74638] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name74639}} (clojure.core/contains? input74638 :tag-keys) (clojure.core/assoc-in [:body "TagKeys"] (ser-tag-key-list (input74638 :tag-keys))) (clojure.core/contains? input74638 :tag-values) (clojure.core/assoc-in [:body "TagValues"] (ser-tag-value-list (input74638 :tag-values))) (clojure.core/contains? input74638 :snapshot-identifier) (clojure.core/assoc-in [:body "SnapshotIdentifier"] (ser-string (input74638 :snapshot-identifier))) (clojure.core/contains? input74638 :end-time) (clojure.core/assoc-in [:body "EndTime"] (ser-tstamp (input74638 :end-time))) (clojure.core/contains? input74638 :start-time) (clojure.core/assoc-in [:body "StartTime"] (ser-tstamp (input74638 :start-time))) (clojure.core/contains? input74638 :owner-account) (clojure.core/assoc-in [:body "OwnerAccount"] (ser-string (input74638 :owner-account))) (clojure.core/contains? input74638 :cluster-identifier) (clojure.core/assoc-in [:body "ClusterIdentifier"] (ser-string (input74638 :cluster-identifier))) (clojure.core/contains? input74638 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input74638 :max-records))) (clojure.core/contains? input74638 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input74638 :marker))) (clojure.core/contains? input74638 :snapshot-type) (clojure.core/assoc-in [:body "SnapshotType"] (ser-string (input74638 :snapshot-type))) (clojure.core/contains? input74638 :cluster-exists) (clojure.core/assoc-in [:body "ClusterExists"] (ser-boolean-optional (input74638 :cluster-exists)))))
(clojure.core/defn req<-create-hsm-client-certificate-message [action-name74641 input74640] (clojure.core/let [input74642 {:body {"HsmClientCertificateIdentifier" (ser-string (input74640 :hsm-client-certificate-identifier)), "Version" "2012-12-01", "Action" action-name74641}}] (clojure.core/cond-> input74642 (clojure.core/contains? input74640 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input74640 :tags))))))
(clojure.core/defn req<-delete-tags-message [action-name74644 input74643] {:body {"ResourceName" (ser-string (input74643 :resource-name)), "TagKeys" (ser-tag-key-list (input74643 :tag-keys)), "Version" "2012-12-01", "Action" action-name74644}})
(clojure.core/defn req<-describe-cluster-subnet-groups-message [action-name74646 input74645] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name74646}} (clojure.core/contains? input74645 :cluster-subnet-group-name) (clojure.core/assoc-in [:body "ClusterSubnetGroupName"] (ser-string (input74645 :cluster-subnet-group-name))) (clojure.core/contains? input74645 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input74645 :max-records))) (clojure.core/contains? input74645 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input74645 :marker))) (clojure.core/contains? input74645 :tag-keys) (clojure.core/assoc-in [:body "TagKeys"] (ser-tag-key-list (input74645 :tag-keys))) (clojure.core/contains? input74645 :tag-values) (clojure.core/assoc-in [:body "TagValues"] (ser-tag-value-list (input74645 :tag-values)))))
(clojure.core/defn req<-delete-cluster-subnet-group-message [action-name74648 input74647] {:body {"ClusterSubnetGroupName" (ser-string (input74647 :cluster-subnet-group-name)), "Version" "2012-12-01", "Action" action-name74648}})
(clojure.core/defn req<-describe-events-message [action-name74650 input74649] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name74650}} (clojure.core/contains? input74649 :source-identifier) (clojure.core/assoc-in [:body "SourceIdentifier"] (ser-string (input74649 :source-identifier))) (clojure.core/contains? input74649 :source-type) (clojure.core/assoc-in [:body "SourceType"] (ser-source-type (input74649 :source-type))) (clojure.core/contains? input74649 :start-time) (clojure.core/assoc-in [:body "StartTime"] (ser-tstamp (input74649 :start-time))) (clojure.core/contains? input74649 :end-time) (clojure.core/assoc-in [:body "EndTime"] (ser-tstamp (input74649 :end-time))) (clojure.core/contains? input74649 :duration) (clojure.core/assoc-in [:body "Duration"] (ser-integer-optional (input74649 :duration))) (clojure.core/contains? input74649 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input74649 :max-records))) (clojure.core/contains? input74649 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input74649 :marker)))))
(clojure.core/defn req<-rotate-encryption-key-message [action-name74652 input74651] {:body {"ClusterIdentifier" (ser-string (input74651 :cluster-identifier)), "Version" "2012-12-01", "Action" action-name74652}})
(clojure.core/defn req<-describe-hsm-configurations-message [action-name74654 input74653] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name74654}} (clojure.core/contains? input74653 :hsm-configuration-identifier) (clojure.core/assoc-in [:body "HsmConfigurationIdentifier"] (ser-string (input74653 :hsm-configuration-identifier))) (clojure.core/contains? input74653 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input74653 :max-records))) (clojure.core/contains? input74653 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input74653 :marker))) (clojure.core/contains? input74653 :tag-keys) (clojure.core/assoc-in [:body "TagKeys"] (ser-tag-key-list (input74653 :tag-keys))) (clojure.core/contains? input74653 :tag-values) (clojure.core/assoc-in [:body "TagValues"] (ser-tag-value-list (input74653 :tag-values)))))
(clojure.core/defn req<-revoke-snapshot-access-message [action-name74656 input74655] (clojure.core/let [input74657 {:body {"SnapshotIdentifier" (ser-string (input74655 :snapshot-identifier)), "AccountWithRestoreAccess" (ser-string (input74655 :account-with-restore-access)), "Version" "2012-12-01", "Action" action-name74656}}] (clojure.core/cond-> input74657 (clojure.core/contains? input74655 :snapshot-cluster-identifier) (clojure.core/assoc-in [:body "SnapshotClusterIdentifier"] (ser-string (input74655 :snapshot-cluster-identifier))))))
(clojure.core/defn req<-create-tags-message [action-name74659 input74658] {:body {"ResourceName" (ser-string (input74658 :resource-name)), "Tags" (ser-tag-list (input74658 :tags)), "Version" "2012-12-01", "Action" action-name74659}})
(clojure.core/defn req<-restore-from-cluster-snapshot-message [action-name74661 input74660] (clojure.core/let [input74662 {:body {"SnapshotIdentifier" (ser-string (input74660 :snapshot-identifier)), "ClusterIdentifier" (ser-string (input74660 :cluster-identifier)), "Version" "2012-12-01", "Action" action-name74661}}] (clojure.core/cond-> input74662 (clojure.core/contains? input74660 :enhanced-vpc-routing) (clojure.core/assoc-in [:body "EnhancedVpcRouting"] (ser-boolean-optional (input74660 :enhanced-vpc-routing))) (clojure.core/contains? input74660 :publicly-accessible) (clojure.core/assoc-in [:body "PubliclyAccessible"] (ser-boolean-optional (input74660 :publicly-accessible))) (clojure.core/contains? input74660 :preferred-maintenance-window) (clojure.core/assoc-in [:body "PreferredMaintenanceWindow"] (ser-string (input74660 :preferred-maintenance-window))) (clojure.core/contains? input74660 :owner-account) (clojure.core/assoc-in [:body "OwnerAccount"] (ser-string (input74660 :owner-account))) (clojure.core/contains? input74660 :hsm-client-certificate-identifier) (clojure.core/assoc-in [:body "HsmClientCertificateIdentifier"] (ser-string (input74660 :hsm-client-certificate-identifier))) (clojure.core/contains? input74660 :cluster-subnet-group-name) (clojure.core/assoc-in [:body "ClusterSubnetGroupName"] (ser-string (input74660 :cluster-subnet-group-name))) (clojure.core/contains? input74660 :vpc-security-group-ids) (clojure.core/assoc-in [:body "VpcSecurityGroupIds"] (ser-vpc-security-group-id-list (input74660 :vpc-security-group-ids))) (clojure.core/contains? input74660 :availability-zone) (clojure.core/assoc-in [:body "AvailabilityZone"] (ser-string (input74660 :availability-zone))) (clojure.core/contains? input74660 :cluster-security-groups) (clojure.core/assoc-in [:body "ClusterSecurityGroups"] (ser-cluster-security-group-name-list (input74660 :cluster-security-groups))) (clojure.core/contains? input74660 :additional-info) (clojure.core/assoc-in [:body "AdditionalInfo"] (ser-string (input74660 :additional-info))) (clojure.core/contains? input74660 :elastic-ip) (clojure.core/assoc-in [:body "ElasticIp"] (ser-string (input74660 :elastic-ip))) (clojure.core/contains? input74660 :hsm-configuration-identifier) (clojure.core/assoc-in [:body "HsmConfigurationIdentifier"] (ser-string (input74660 :hsm-configuration-identifier))) (clojure.core/contains? input74660 :port) (clojure.core/assoc-in [:body "Port"] (ser-integer-optional (input74660 :port))) (clojure.core/contains? input74660 :kms-key-id) (clojure.core/assoc-in [:body "KmsKeyId"] (ser-string (input74660 :kms-key-id))) (clojure.core/contains? input74660 :allow-version-upgrade) (clojure.core/assoc-in [:body "AllowVersionUpgrade"] (ser-boolean-optional (input74660 :allow-version-upgrade))) (clojure.core/contains? input74660 :automated-snapshot-retention-period) (clojure.core/assoc-in [:body "AutomatedSnapshotRetentionPeriod"] (ser-integer-optional (input74660 :automated-snapshot-retention-period))) (clojure.core/contains? input74660 :iam-roles) (clojure.core/assoc-in [:body "IamRoles"] (ser-iam-role-arn-list (input74660 :iam-roles))) (clojure.core/contains? input74660 :node-type) (clojure.core/assoc-in [:body "NodeType"] (ser-string (input74660 :node-type))) (clojure.core/contains? input74660 :snapshot-cluster-identifier) (clojure.core/assoc-in [:body "SnapshotClusterIdentifier"] (ser-string (input74660 :snapshot-cluster-identifier))) (clojure.core/contains? input74660 :cluster-parameter-group-name) (clojure.core/assoc-in [:body "ClusterParameterGroupName"] (ser-string (input74660 :cluster-parameter-group-name))))))
(clojure.core/defn req<-modify-cluster-parameter-group-message [action-name74664 input74663] {:body {"ParameterGroupName" (ser-string (input74663 :parameter-group-name)), "Parameters" (ser-parameters-list (input74663 :parameters)), "Version" "2012-12-01", "Action" action-name74664}})
(clojure.core/defn req<-describe-table-restore-status-message [action-name74666 input74665] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name74666}} (clojure.core/contains? input74665 :cluster-identifier) (clojure.core/assoc-in [:body "ClusterIdentifier"] (ser-string (input74665 :cluster-identifier))) (clojure.core/contains? input74665 :table-restore-request-id) (clojure.core/assoc-in [:body "TableRestoreRequestId"] (ser-string (input74665 :table-restore-request-id))) (clojure.core/contains? input74665 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input74665 :max-records))) (clojure.core/contains? input74665 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input74665 :marker)))))
(clojure.core/defn req<-revoke-cluster-security-group-ingress-message [action-name74668 input74667] (clojure.core/let [input74669 {:body {"ClusterSecurityGroupName" (ser-string (input74667 :cluster-security-group-name)), "Version" "2012-12-01", "Action" action-name74668}}] (clojure.core/cond-> input74669 (clojure.core/contains? input74667 :cidrip) (clojure.core/assoc-in [:body "CIDRIP"] (ser-string (input74667 :cidrip))) (clojure.core/contains? input74667 :ec2-security-group-name) (clojure.core/assoc-in [:body "EC2SecurityGroupName"] (ser-string (input74667 :ec2-security-group-name))) (clojure.core/contains? input74667 :ec2-security-group-owner-id) (clojure.core/assoc-in [:body "EC2SecurityGroupOwnerId"] (ser-string (input74667 :ec2-security-group-owner-id))))))
(clojure.core/defn req<-create-cluster-snapshot-message [action-name74671 input74670] (clojure.core/let [input74672 {:body {"SnapshotIdentifier" (ser-string (input74670 :snapshot-identifier)), "ClusterIdentifier" (ser-string (input74670 :cluster-identifier)), "Version" "2012-12-01", "Action" action-name74671}}] (clojure.core/cond-> input74672 (clojure.core/contains? input74670 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input74670 :tags))))))
(clojure.core/defn req<-create-hsm-configuration-message [action-name74674 input74673] (clojure.core/let [input74675 {:body {"HsmConfigurationIdentifier" (ser-string (input74673 :hsm-configuration-identifier)), "Description" (ser-string (input74673 :description)), "HsmIpAddress" (ser-string (input74673 :hsm-ip-address)), "HsmPartitionName" (ser-string (input74673 :hsm-partition-name)), "HsmPartitionPassword" (ser-string (input74673 :hsm-partition-password)), "HsmServerPublicCertificate" (ser-string (input74673 :hsm-server-public-certificate)), "Version" "2012-12-01", "Action" action-name74674}}] (clojure.core/cond-> input74675 (clojure.core/contains? input74673 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input74673 :tags))))))
(clojure.core/defn req<-delete-hsm-client-certificate-message [action-name74677 input74676] {:body {"HsmClientCertificateIdentifier" (ser-string (input74676 :hsm-client-certificate-identifier)), "Version" "2012-12-01", "Action" action-name74677}})
(clojure.core/defn req<-describe-clusters-message [action-name74679 input74678] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name74679}} (clojure.core/contains? input74678 :cluster-identifier) (clojure.core/assoc-in [:body "ClusterIdentifier"] (ser-string (input74678 :cluster-identifier))) (clojure.core/contains? input74678 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input74678 :max-records))) (clojure.core/contains? input74678 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input74678 :marker))) (clojure.core/contains? input74678 :tag-keys) (clojure.core/assoc-in [:body "TagKeys"] (ser-tag-key-list (input74678 :tag-keys))) (clojure.core/contains? input74678 :tag-values) (clojure.core/assoc-in [:body "TagValues"] (ser-tag-value-list (input74678 :tag-values)))))
(clojure.core/defn req<-disable-logging-message [action-name74681 input74680] {:body {"ClusterIdentifier" (ser-string (input74680 :cluster-identifier)), "Version" "2012-12-01", "Action" action-name74681}})
(clojure.core/defn req<-delete-cluster-snapshot-message [action-name74683 input74682] (clojure.core/let [input74684 {:body {"SnapshotIdentifier" (ser-string (input74682 :snapshot-identifier)), "Version" "2012-12-01", "Action" action-name74683}}] (clojure.core/cond-> input74684 (clojure.core/contains? input74682 :snapshot-cluster-identifier) (clojure.core/assoc-in [:body "SnapshotClusterIdentifier"] (ser-string (input74682 :snapshot-cluster-identifier))))))
(clojure.core/defn req<-create-snapshot-copy-grant-message [action-name74686 input74685] (clojure.core/let [input74687 {:body {"SnapshotCopyGrantName" (ser-string (input74685 :snapshot-copy-grant-name)), "Version" "2012-12-01", "Action" action-name74686}}] (clojure.core/cond-> input74687 (clojure.core/contains? input74685 :kms-key-id) (clojure.core/assoc-in [:body "KmsKeyId"] (ser-string (input74685 :kms-key-id))) (clojure.core/contains? input74685 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input74685 :tags))))))
(clojure.core/defn req<-describe-tags-message [action-name74689 input74688] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name74689}} (clojure.core/contains? input74688 :resource-name) (clojure.core/assoc-in [:body "ResourceName"] (ser-string (input74688 :resource-name))) (clojure.core/contains? input74688 :resource-type) (clojure.core/assoc-in [:body "ResourceType"] (ser-string (input74688 :resource-type))) (clojure.core/contains? input74688 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input74688 :max-records))) (clojure.core/contains? input74688 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input74688 :marker))) (clojure.core/contains? input74688 :tag-keys) (clojure.core/assoc-in [:body "TagKeys"] (ser-tag-key-list (input74688 :tag-keys))) (clojure.core/contains? input74688 :tag-values) (clojure.core/assoc-in [:body "TagValues"] (ser-tag-value-list (input74688 :tag-values)))))
(clojure.core/defn req<-modify-snapshot-copy-retention-period-message [action-name74691 input74690] {:body {"ClusterIdentifier" (ser-string (input74690 :cluster-identifier)), "RetentionPeriod" (ser-integer (input74690 :retention-period)), "Version" "2012-12-01", "Action" action-name74691}})
(clojure.core/defn req<-delete-event-subscription-message [action-name74693 input74692] {:body {"SubscriptionName" (ser-string (input74692 :subscription-name)), "Version" "2012-12-01", "Action" action-name74693}})
(clojure.core/defn req<-describe-default-cluster-parameters-message [action-name74695 input74694] (clojure.core/let [input74696 {:body {"ParameterGroupFamily" (ser-string (input74694 :parameter-group-family)), "Version" "2012-12-01", "Action" action-name74695}}] (clojure.core/cond-> input74696 (clojure.core/contains? input74694 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input74694 :max-records))) (clojure.core/contains? input74694 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input74694 :marker))))))
(clojure.core/defn req<-copy-cluster-snapshot-message [action-name74698 input74697] (clojure.core/let [input74699 {:body {"SourceSnapshotIdentifier" (ser-string (input74697 :source-snapshot-identifier)), "TargetSnapshotIdentifier" (ser-string (input74697 :target-snapshot-identifier)), "Version" "2012-12-01", "Action" action-name74698}}] (clojure.core/cond-> input74699 (clojure.core/contains? input74697 :source-snapshot-cluster-identifier) (clojure.core/assoc-in [:body "SourceSnapshotClusterIdentifier"] (ser-string (input74697 :source-snapshot-cluster-identifier))))))
(clojure.core/defn req<-get-cluster-credentials-message [action-name74701 input74700] (clojure.core/let [input74702 {:body {"DbUser" (ser-string (input74700 :db-user)), "ClusterIdentifier" (ser-string (input74700 :cluster-identifier)), "Version" "2012-12-01", "Action" action-name74701}}] (clojure.core/cond-> input74702 (clojure.core/contains? input74700 :db-name) (clojure.core/assoc-in [:body "DbName"] (ser-string (input74700 :db-name))) (clojure.core/contains? input74700 :duration-seconds) (clojure.core/assoc-in [:body "DurationSeconds"] (ser-integer-optional (input74700 :duration-seconds))) (clojure.core/contains? input74700 :auto-create) (clojure.core/assoc-in [:body "AutoCreate"] (ser-boolean-optional (input74700 :auto-create))) (clojure.core/contains? input74700 :db-groups) (clojure.core/assoc-in [:body "DbGroups"] (ser-db-group-list (input74700 :db-groups))))))
(clojure.core/defn req<-restore-table-from-cluster-snapshot-message [action-name74704 input74703] (clojure.core/let [input74705 {:body {"ClusterIdentifier" (ser-string (input74703 :cluster-identifier)), "SnapshotIdentifier" (ser-string (input74703 :snapshot-identifier)), "SourceDatabaseName" (ser-string (input74703 :source-database-name)), "SourceTableName" (ser-string (input74703 :source-table-name)), "NewTableName" (ser-string (input74703 :new-table-name)), "Version" "2012-12-01", "Action" action-name74704}}] (clojure.core/cond-> input74705 (clojure.core/contains? input74703 :source-schema-name) (clojure.core/assoc-in [:body "SourceSchemaName"] (ser-string (input74703 :source-schema-name))) (clojure.core/contains? input74703 :target-database-name) (clojure.core/assoc-in [:body "TargetDatabaseName"] (ser-string (input74703 :target-database-name))) (clojure.core/contains? input74703 :target-schema-name) (clojure.core/assoc-in [:body "TargetSchemaName"] (ser-string (input74703 :target-schema-name))))))
(clojure.core/defn req<-reset-cluster-parameter-group-message [action-name74707 input74706] (clojure.core/let [input74708 {:body {"ParameterGroupName" (ser-string (input74706 :parameter-group-name)), "Version" "2012-12-01", "Action" action-name74707}}] (clojure.core/cond-> input74708 (clojure.core/contains? input74706 :reset-all-parameters) (clojure.core/assoc-in [:body "ResetAllParameters"] (ser-boolean (input74706 :reset-all-parameters))) (clojure.core/contains? input74706 :parameters) (clojure.core/assoc-in [:body "Parameters"] (ser-parameters-list (input74706 :parameters))))))
(clojure.core/defn req<-enable-logging-message [action-name74710 input74709] (clojure.core/let [input74711 {:body {"ClusterIdentifier" (ser-string (input74709 :cluster-identifier)), "BucketName" (ser-string (input74709 :bucket-name)), "Version" "2012-12-01", "Action" action-name74710}}] (clojure.core/cond-> input74711 (clojure.core/contains? input74709 :s3-key-prefix) (clojure.core/assoc-in [:body "S3KeyPrefix"] (ser-string (input74709 :s3-key-prefix))))))
(clojure.core/defn req<-describe-event-categories-message [action-name74713 input74712] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name74713}} (clojure.core/contains? input74712 :source-type) (clojure.core/assoc-in [:body "SourceType"] (ser-string (input74712 :source-type)))))
(clojure.core/defn req<-describe-cluster-versions-message [action-name74715 input74714] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name74715}} (clojure.core/contains? input74714 :cluster-version) (clojure.core/assoc-in [:body "ClusterVersion"] (ser-string (input74714 :cluster-version))) (clojure.core/contains? input74714 :cluster-parameter-group-family) (clojure.core/assoc-in [:body "ClusterParameterGroupFamily"] (ser-string (input74714 :cluster-parameter-group-family))) (clojure.core/contains? input74714 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input74714 :max-records))) (clojure.core/contains? input74714 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input74714 :marker)))))
(clojure.core/defn req<-describe-reserved-nodes-message [action-name74717 input74716] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name74717}} (clojure.core/contains? input74716 :reserved-node-id) (clojure.core/assoc-in [:body "ReservedNodeId"] (ser-string (input74716 :reserved-node-id))) (clojure.core/contains? input74716 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input74716 :max-records))) (clojure.core/contains? input74716 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input74716 :marker)))))
(clojure.core/defn req<-modify-cluster-message [action-name74719 input74718] (clojure.core/let [input74720 {:body {"ClusterIdentifier" (ser-string (input74718 :cluster-identifier)), "Version" "2012-12-01", "Action" action-name74719}}] (clojure.core/cond-> input74720 (clojure.core/contains? input74718 :enhanced-vpc-routing) (clojure.core/assoc-in [:body "EnhancedVpcRouting"] (ser-boolean-optional (input74718 :enhanced-vpc-routing))) (clojure.core/contains? input74718 :publicly-accessible) (clojure.core/assoc-in [:body "PubliclyAccessible"] (ser-boolean-optional (input74718 :publicly-accessible))) (clojure.core/contains? input74718 :preferred-maintenance-window) (clojure.core/assoc-in [:body "PreferredMaintenanceWindow"] (ser-string (input74718 :preferred-maintenance-window))) (clojure.core/contains? input74718 :hsm-client-certificate-identifier) (clojure.core/assoc-in [:body "HsmClientCertificateIdentifier"] (ser-string (input74718 :hsm-client-certificate-identifier))) (clojure.core/contains? input74718 :number-of-nodes) (clojure.core/assoc-in [:body "NumberOfNodes"] (ser-integer-optional (input74718 :number-of-nodes))) (clojure.core/contains? input74718 :vpc-security-group-ids) (clojure.core/assoc-in [:body "VpcSecurityGroupIds"] (ser-vpc-security-group-id-list (input74718 :vpc-security-group-ids))) (clojure.core/contains? input74718 :cluster-type) (clojure.core/assoc-in [:body "ClusterType"] (ser-string (input74718 :cluster-type))) (clojure.core/contains? input74718 :master-user-password) (clojure.core/assoc-in [:body "MasterUserPassword"] (ser-string (input74718 :master-user-password))) (clojure.core/contains? input74718 :cluster-security-groups) (clojure.core/assoc-in [:body "ClusterSecurityGroups"] (ser-cluster-security-group-name-list (input74718 :cluster-security-groups))) (clojure.core/contains? input74718 :elastic-ip) (clojure.core/assoc-in [:body "ElasticIp"] (ser-string (input74718 :elastic-ip))) (clojure.core/contains? input74718 :hsm-configuration-identifier) (clojure.core/assoc-in [:body "HsmConfigurationIdentifier"] (ser-string (input74718 :hsm-configuration-identifier))) (clojure.core/contains? input74718 :allow-version-upgrade) (clojure.core/assoc-in [:body "AllowVersionUpgrade"] (ser-boolean-optional (input74718 :allow-version-upgrade))) (clojure.core/contains? input74718 :cluster-version) (clojure.core/assoc-in [:body "ClusterVersion"] (ser-string (input74718 :cluster-version))) (clojure.core/contains? input74718 :automated-snapshot-retention-period) (clojure.core/assoc-in [:body "AutomatedSnapshotRetentionPeriod"] (ser-integer-optional (input74718 :automated-snapshot-retention-period))) (clojure.core/contains? input74718 :new-cluster-identifier) (clojure.core/assoc-in [:body "NewClusterIdentifier"] (ser-string (input74718 :new-cluster-identifier))) (clojure.core/contains? input74718 :node-type) (clojure.core/assoc-in [:body "NodeType"] (ser-string (input74718 :node-type))) (clojure.core/contains? input74718 :cluster-parameter-group-name) (clojure.core/assoc-in [:body "ClusterParameterGroupName"] (ser-string (input74718 :cluster-parameter-group-name))))))
(clojure.core/defn req<-purchase-reserved-node-offering-message [action-name74722 input74721] (clojure.core/let [input74723 {:body {"ReservedNodeOfferingId" (ser-string (input74721 :reserved-node-offering-id)), "Version" "2012-12-01", "Action" action-name74722}}] (clojure.core/cond-> input74723 (clojure.core/contains? input74721 :node-count) (clojure.core/assoc-in [:body "NodeCount"] (ser-integer-optional (input74721 :node-count))))))
(clojure.core/defn req<-describe-reserved-node-offerings-message [action-name74725 input74724] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name74725}} (clojure.core/contains? input74724 :reserved-node-offering-id) (clojure.core/assoc-in [:body "ReservedNodeOfferingId"] (ser-string (input74724 :reserved-node-offering-id))) (clojure.core/contains? input74724 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input74724 :max-records))) (clojure.core/contains? input74724 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input74724 :marker)))))
(clojure.core/defn req<-delete-cluster-parameter-group-message [action-name74727 input74726] {:body {"ParameterGroupName" (ser-string (input74726 :parameter-group-name)), "Version" "2012-12-01", "Action" action-name74727}})
(clojure.core/defn req<-delete-snapshot-copy-grant-message [action-name74729 input74728] {:body {"SnapshotCopyGrantName" (ser-string (input74728 :snapshot-copy-grant-name)), "Version" "2012-12-01", "Action" action-name74729}})
(clojure.core/defn req<-delete-cluster-message [action-name74731 input74730] (clojure.core/let [input74732 {:body {"ClusterIdentifier" (ser-string (input74730 :cluster-identifier)), "Version" "2012-12-01", "Action" action-name74731}}] (clojure.core/cond-> input74732 (clojure.core/contains? input74730 :skip-final-cluster-snapshot) (clojure.core/assoc-in [:body "SkipFinalClusterSnapshot"] (ser-boolean (input74730 :skip-final-cluster-snapshot))) (clojure.core/contains? input74730 :final-cluster-snapshot-identifier) (clojure.core/assoc-in [:body "FinalClusterSnapshotIdentifier"] (ser-string (input74730 :final-cluster-snapshot-identifier))))))
(clojure.core/defn req<-modify-event-subscription-message [action-name74734 input74733] (clojure.core/let [input74735 {:body {"SubscriptionName" (ser-string (input74733 :subscription-name)), "Version" "2012-12-01", "Action" action-name74734}}] (clojure.core/cond-> input74735 (clojure.core/contains? input74733 :sns-topic-arn) (clojure.core/assoc-in [:body "SnsTopicArn"] (ser-string (input74733 :sns-topic-arn))) (clojure.core/contains? input74733 :source-type) (clojure.core/assoc-in [:body "SourceType"] (ser-string (input74733 :source-type))) (clojure.core/contains? input74733 :source-ids) (clojure.core/assoc-in [:body "SourceIds"] (ser-source-ids-list (input74733 :source-ids))) (clojure.core/contains? input74733 :event-categories) (clojure.core/assoc-in [:body "EventCategories"] (ser-event-categories-list (input74733 :event-categories))) (clojure.core/contains? input74733 :severity) (clojure.core/assoc-in [:body "Severity"] (ser-string (input74733 :severity))) (clojure.core/contains? input74733 :enabled) (clojure.core/assoc-in [:body "Enabled"] (ser-boolean-optional (input74733 :enabled))))))
(clojure.core/defn req<-describe-hsm-client-certificates-message [action-name74737 input74736] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name74737}} (clojure.core/contains? input74736 :hsm-client-certificate-identifier) (clojure.core/assoc-in [:body "HsmClientCertificateIdentifier"] (ser-string (input74736 :hsm-client-certificate-identifier))) (clojure.core/contains? input74736 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input74736 :max-records))) (clojure.core/contains? input74736 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input74736 :marker))) (clojure.core/contains? input74736 :tag-keys) (clojure.core/assoc-in [:body "TagKeys"] (ser-tag-key-list (input74736 :tag-keys))) (clojure.core/contains? input74736 :tag-values) (clojure.core/assoc-in [:body "TagValues"] (ser-tag-value-list (input74736 :tag-values)))))
(clojure.core/defn req<-create-event-subscription-message [action-name74739 input74738] (clojure.core/let [input74740 {:body {"SubscriptionName" (ser-string (input74738 :subscription-name)), "SnsTopicArn" (ser-string (input74738 :sns-topic-arn)), "Version" "2012-12-01", "Action" action-name74739}}] (clojure.core/cond-> input74740 (clojure.core/contains? input74738 :source-type) (clojure.core/assoc-in [:body "SourceType"] (ser-string (input74738 :source-type))) (clojure.core/contains? input74738 :source-ids) (clojure.core/assoc-in [:body "SourceIds"] (ser-source-ids-list (input74738 :source-ids))) (clojure.core/contains? input74738 :event-categories) (clojure.core/assoc-in [:body "EventCategories"] (ser-event-categories-list (input74738 :event-categories))) (clojure.core/contains? input74738 :severity) (clojure.core/assoc-in [:body "Severity"] (ser-string (input74738 :severity))) (clojure.core/contains? input74738 :enabled) (clojure.core/assoc-in [:body "Enabled"] (ser-boolean-optional (input74738 :enabled))) (clojure.core/contains? input74738 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input74738 :tags))))))
(clojure.core/defn req<-create-cluster-security-group-message [action-name74742 input74741] (clojure.core/let [input74743 {:body {"ClusterSecurityGroupName" (ser-string (input74741 :cluster-security-group-name)), "Description" (ser-string (input74741 :description)), "Version" "2012-12-01", "Action" action-name74742}}] (clojure.core/cond-> input74743 (clojure.core/contains? input74741 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input74741 :tags))))))
(clojure.core/defn req<-describe-snapshot-copy-grants-message [action-name74745 input74744] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name74745}} (clojure.core/contains? input74744 :snapshot-copy-grant-name) (clojure.core/assoc-in [:body "SnapshotCopyGrantName"] (ser-string (input74744 :snapshot-copy-grant-name))) (clojure.core/contains? input74744 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input74744 :max-records))) (clojure.core/contains? input74744 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input74744 :marker))) (clojure.core/contains? input74744 :tag-keys) (clojure.core/assoc-in [:body "TagKeys"] (ser-tag-key-list (input74744 :tag-keys))) (clojure.core/contains? input74744 :tag-values) (clojure.core/assoc-in [:body "TagValues"] (ser-tag-value-list (input74744 :tag-values)))))
(clojure.core/defn req<-authorize-cluster-security-group-ingress-message [action-name74747 input74746] (clojure.core/let [input74748 {:body {"ClusterSecurityGroupName" (ser-string (input74746 :cluster-security-group-name)), "Version" "2012-12-01", "Action" action-name74747}}] (clojure.core/cond-> input74748 (clojure.core/contains? input74746 :cidrip) (clojure.core/assoc-in [:body "CIDRIP"] (ser-string (input74746 :cidrip))) (clojure.core/contains? input74746 :ec2-security-group-name) (clojure.core/assoc-in [:body "EC2SecurityGroupName"] (ser-string (input74746 :ec2-security-group-name))) (clojure.core/contains? input74746 :ec2-security-group-owner-id) (clojure.core/assoc-in [:body "EC2SecurityGroupOwnerId"] (ser-string (input74746 :ec2-security-group-owner-id))))))
(clojure.core/defn req<-modify-cluster-subnet-group-message [action-name74750 input74749] (clojure.core/let [input74751 {:body {"ClusterSubnetGroupName" (ser-string (input74749 :cluster-subnet-group-name)), "SubnetIds" (ser-subnet-identifier-list (input74749 :subnet-ids)), "Version" "2012-12-01", "Action" action-name74750}}] (clojure.core/cond-> input74751 (clojure.core/contains? input74749 :description) (clojure.core/assoc-in [:body "Description"] (ser-string (input74749 :description))))))
(clojure.core/defn req<-delete-hsm-configuration-message [action-name74753 input74752] {:body {"HsmConfigurationIdentifier" (ser-string (input74752 :hsm-configuration-identifier)), "Version" "2012-12-01", "Action" action-name74753}})
(clojure.core/defn req<-describe-event-subscriptions-message [action-name74755 input74754] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name74755}} (clojure.core/contains? input74754 :subscription-name) (clojure.core/assoc-in [:body "SubscriptionName"] (ser-string (input74754 :subscription-name))) (clojure.core/contains? input74754 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input74754 :max-records))) (clojure.core/contains? input74754 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input74754 :marker))) (clojure.core/contains? input74754 :tag-keys) (clojure.core/assoc-in [:body "TagKeys"] (ser-tag-key-list (input74754 :tag-keys))) (clojure.core/contains? input74754 :tag-values) (clojure.core/assoc-in [:body "TagValues"] (ser-tag-value-list (input74754 :tag-values)))))
(clojure.core/defn req<-create-cluster-parameter-group-message [action-name74757 input74756] (clojure.core/let [input74758 {:body {"ParameterGroupName" (ser-string (input74756 :parameter-group-name)), "ParameterGroupFamily" (ser-string (input74756 :parameter-group-family)), "Description" (ser-string (input74756 :description)), "Version" "2012-12-01", "Action" action-name74757}}] (clojure.core/cond-> input74758 (clojure.core/contains? input74756 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input74756 :tags))))))
(clojure.core/defn req<-describe-cluster-parameter-groups-message [action-name74760 input74759] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name74760}} (clojure.core/contains? input74759 :parameter-group-name) (clojure.core/assoc-in [:body "ParameterGroupName"] (ser-string (input74759 :parameter-group-name))) (clojure.core/contains? input74759 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input74759 :max-records))) (clojure.core/contains? input74759 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input74759 :marker))) (clojure.core/contains? input74759 :tag-keys) (clojure.core/assoc-in [:body "TagKeys"] (ser-tag-key-list (input74759 :tag-keys))) (clojure.core/contains? input74759 :tag-values) (clojure.core/assoc-in [:body "TagValues"] (ser-tag-value-list (input74759 :tag-values)))))
(clojure.core/defn req<-authorize-snapshot-access-message [action-name74762 input74761] (clojure.core/let [input74763 {:body {"SnapshotIdentifier" (ser-string (input74761 :snapshot-identifier)), "AccountWithRestoreAccess" (ser-string (input74761 :account-with-restore-access)), "Version" "2012-12-01", "Action" action-name74762}}] (clojure.core/cond-> input74763 (clojure.core/contains? input74761 :snapshot-cluster-identifier) (clojure.core/assoc-in [:body "SnapshotClusterIdentifier"] (ser-string (input74761 :snapshot-cluster-identifier))))))
(clojure.core/defn req<-describe-logging-status-message [action-name74765 input74764] {:body {"ClusterIdentifier" (ser-string (input74764 :cluster-identifier)), "Version" "2012-12-01", "Action" action-name74765}})
(clojure.core/defn req<-describe-resize-message [action-name74767 input74766] {:body {"ClusterIdentifier" (ser-string (input74766 :cluster-identifier)), "Version" "2012-12-01", "Action" action-name74767}})
(clojure.core/defn req<-reboot-cluster-message [action-name74769 input74768] {:body {"ClusterIdentifier" (ser-string (input74768 :cluster-identifier)), "Version" "2012-12-01", "Action" action-name74769}})
(clojure.core/defn req<-describe-orderable-cluster-options-message [action-name74771 input74770] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name74771}} (clojure.core/contains? input74770 :cluster-version) (clojure.core/assoc-in [:body "ClusterVersion"] (ser-string (input74770 :cluster-version))) (clojure.core/contains? input74770 :node-type) (clojure.core/assoc-in [:body "NodeType"] (ser-string (input74770 :node-type))) (clojure.core/contains? input74770 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input74770 :max-records))) (clojure.core/contains? input74770 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input74770 :marker)))))
(clojure.core/defn req<-create-cluster-subnet-group-message [action-name74773 input74772] (clojure.core/let [input74774 {:body {"ClusterSubnetGroupName" (ser-string (input74772 :cluster-subnet-group-name)), "Description" (ser-string (input74772 :description)), "SubnetIds" (ser-subnet-identifier-list (input74772 :subnet-ids)), "Version" "2012-12-01", "Action" action-name74773}}] (clojure.core/cond-> input74774 (clojure.core/contains? input74772 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input74772 :tags))))))
(clojure.core/defn req<-modify-cluster-iam-roles-message [action-name74776 input74775] (clojure.core/let [input74777 {:body {"ClusterIdentifier" (ser-string (input74775 :cluster-identifier)), "Version" "2012-12-01", "Action" action-name74776}}] (clojure.core/cond-> input74777 (clojure.core/contains? input74775 :add-iam-roles) (clojure.core/assoc-in [:body "AddIamRoles"] (ser-iam-role-arn-list (input74775 :add-iam-roles))) (clojure.core/contains? input74775 :remove-iam-roles) (clojure.core/assoc-in [:body "RemoveIamRoles"] (ser-iam-role-arn-list (input74775 :remove-iam-roles))))))
(clojure.core/defn req<-delete-cluster-security-group-message [action-name74779 input74778] {:body {"ClusterSecurityGroupName" (ser-string (input74778 :cluster-security-group-name)), "Version" "2012-12-01", "Action" action-name74779}})
(clojure.core/defn req<-describe-cluster-security-groups-message [action-name74781 input74780] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name74781}} (clojure.core/contains? input74780 :cluster-security-group-name) (clojure.core/assoc-in [:body "ClusterSecurityGroupName"] (ser-string (input74780 :cluster-security-group-name))) (clojure.core/contains? input74780 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input74780 :max-records))) (clojure.core/contains? input74780 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input74780 :marker))) (clojure.core/contains? input74780 :tag-keys) (clojure.core/assoc-in [:body "TagKeys"] (ser-tag-key-list (input74780 :tag-keys))) (clojure.core/contains? input74780 :tag-values) (clojure.core/assoc-in [:body "TagValues"] (ser-tag-value-list (input74780 :tag-values)))))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-table-restore-status-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-table-restore-status-message/table-restore-request-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-table-restore-status-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-table-restore-status-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/describe-table-restore-status-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.describe-table-restore-status-message/ClusterIdentifier :portkey.aws.redshift.-2012-12-01.describe-table-restore-status-message/TableRestoreRequestId :portkey.aws.redshift.-2012-12-01.describe-table-restore-status-message/MaxRecords :portkey.aws.redshift.-2012-12-01.describe-table-restore-status-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/source-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/vpc-security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/vpc-security-group-membership))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/enhanced-vpc-routing (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/encrypted (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/hsm-client-certificate-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/cluster-subnet-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/number-of-nodes (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/tags (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/dbname (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/availability-zone (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/cluster-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/master-user-password (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/cluster-security-groups (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/cluster-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/additional-info (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/elastic-ip (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/master-username (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/hsm-configuration-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/port (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/allow-version-upgrade (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/cluster-version (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/automated-snapshot-retention-period (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/iam-roles (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/iam-role-arn-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/node-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-message/cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/create-cluster-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.create-cluster-message/ClusterIdentifier :portkey.aws.redshift.-2012-12-01.create-cluster-message/NodeType :portkey.aws.redshift.-2012-12-01.create-cluster-message/MasterUsername :portkey.aws.redshift.-2012-12-01.create-cluster-message/MasterUserPassword] :opt-un [:portkey.aws.redshift.-2012-12-01.create-cluster-message/EnhancedVpcRouting :portkey.aws.redshift.-2012-12-01.create-cluster-message/PubliclyAccessible :portkey.aws.redshift.-2012-12-01.create-cluster-message/PreferredMaintenanceWindow :portkey.aws.redshift.-2012-12-01.create-cluster-message/Encrypted :portkey.aws.redshift.-2012-12-01.create-cluster-message/HsmClientCertificateIdentifier :portkey.aws.redshift.-2012-12-01.create-cluster-message/ClusterSubnetGroupName :portkey.aws.redshift.-2012-12-01.create-cluster-message/NumberOfNodes :portkey.aws.redshift.-2012-12-01.create-cluster-message/Tags :portkey.aws.redshift.-2012-12-01.create-cluster-message/DBName :portkey.aws.redshift.-2012-12-01.create-cluster-message/VpcSecurityGroupIds :portkey.aws.redshift.-2012-12-01.create-cluster-message/AvailabilityZone :portkey.aws.redshift.-2012-12-01.create-cluster-message/ClusterType :portkey.aws.redshift.-2012-12-01.create-cluster-message/ClusterSecurityGroups :portkey.aws.redshift.-2012-12-01.create-cluster-message/AdditionalInfo :portkey.aws.redshift.-2012-12-01.create-cluster-message/ElasticIp :portkey.aws.redshift.-2012-12-01.create-cluster-message/HsmConfigurationIdentifier :portkey.aws.redshift.-2012-12-01.create-cluster-message/Port :portkey.aws.redshift.-2012-12-01.create-cluster-message/KmsKeyId :portkey.aws.redshift.-2012-12-01.create-cluster-message/AllowVersionUpgrade :portkey.aws.redshift.-2012-12-01.create-cluster-message/ClusterVersion :portkey.aws.redshift.-2012-12-01.create-cluster-message/AutomatedSnapshotRetentionPeriod :portkey.aws.redshift.-2012-12-01.create-cluster-message/IamRoles :portkey.aws.redshift.-2012-12-01.create-cluster-message/ClusterParameterGroupName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/dependent-service-request-throttling-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/snapshot-copy-grant-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/snapshot-copy-grant))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/insufficient-cluster-capacity-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/subnet-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/string))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.enable-logging-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.enable-logging-message/bucket-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.enable-logging-message/s3-key-prefix (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/enable-logging-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.enable-logging-message/ClusterIdentifier :portkey.aws.redshift.-2012-12-01.enable-logging-message/BucketName] :opt-un [:portkey.aws.redshift.-2012-12-01.enable-logging-message/S3KeyPrefix] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.hsm-configuration/hsm-configuration-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.hsm-configuration/description (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.hsm-configuration/hsm-ip-address (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.hsm-configuration/hsm-partition-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.hsm-configuration/tags (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/hsm-configuration (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.hsm-configuration/HsmConfigurationIdentifier :portkey.aws.redshift.-2012-12-01.hsm-configuration/Description :portkey.aws.redshift.-2012-12-01.hsm-configuration/HsmIpAddress :portkey.aws.redshift.-2012-12-01.hsm-configuration/HsmPartitionName :portkey.aws.redshift.-2012-12-01.hsm-configuration/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.resize-progress-message/avg-resize-rate-in-mega-bytes-per-second (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/double-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.resize-progress-message/total-resize-data-in-mega-bytes (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/long-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.resize-progress-message/target-cluster-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.resize-progress-message/progress-in-mega-bytes (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/long-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.resize-progress-message/status (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.resize-progress-message/target-node-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.resize-progress-message/estimated-time-to-completion-in-seconds (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/long-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.resize-progress-message/target-number-of-nodes (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.resize-progress-message/elapsed-time-in-seconds (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/long-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/resize-progress-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.resize-progress-message/AvgResizeRateInMegaBytesPerSecond :portkey.aws.redshift.-2012-12-01/ImportTablesNotStarted :portkey.aws.redshift.-2012-12-01.resize-progress-message/TotalResizeDataInMegaBytes :portkey.aws.redshift.-2012-12-01.resize-progress-message/TargetClusterType :portkey.aws.redshift.-2012-12-01.resize-progress-message/ProgressInMegaBytes :portkey.aws.redshift.-2012-12-01.resize-progress-message/Status :portkey.aws.redshift.-2012-12-01.resize-progress-message/TargetNodeType :portkey.aws.redshift.-2012-12-01/ImportTablesCompleted :portkey.aws.redshift.-2012-12-01/ImportTablesInProgress :portkey.aws.redshift.-2012-12-01.resize-progress-message/EstimatedTimeToCompletionInSeconds :portkey.aws.redshift.-2012-12-01.resize-progress-message/TargetNumberOfNodes :portkey.aws.redshift.-2012-12-01.resize-progress-message/ElapsedTimeInSeconds] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-hsm-client-certificates-message/hsm-client-certificate-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-hsm-client-certificates-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-hsm-client-certificates-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-hsm-client-certificates-message/tag-keys (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-hsm-client-certificates-message/tag-values (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-value-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/describe-hsm-client-certificates-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.describe-hsm-client-certificates-message/HsmClientCertificateIdentifier :portkey.aws.redshift.-2012-12-01.describe-hsm-client-certificates-message/MaxRecords :portkey.aws.redshift.-2012-12-01.describe-hsm-client-certificates-message/Marker :portkey.aws.redshift.-2012-12-01.describe-hsm-client-certificates-message/TagKeys :portkey.aws.redshift.-2012-12-01.describe-hsm-client-certificates-message/TagValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/parameters-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/parameter))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/ec2-security-group-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/ec2-security-group))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/tag-value-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/string))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/table-restore-status-type {"CANCELED" "CANCELED", "IN_PROGRESS" "IN_PROGRESS", :in-progress "IN_PROGRESS", :pending "PENDING", "PENDING" "PENDING", :canceled "CANCELED", "SUCCEEDED" "SUCCEEDED", "FAILED" "FAILED", :failed "FAILED", :succeeded "SUCCEEDED"})

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/import-tables-not-started (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/string))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-node/node-role (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-node/privateipaddress (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-node/publicipaddress (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-node (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.cluster-node/NodeRole :portkey.aws.redshift.-2012-12-01.cluster-node/PrivateIPAddress :portkey.aws.redshift.-2012-12-01.cluster-node/PublicIPAddress] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reserved-node/currency-code (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reserved-node/start-time (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reserved-node/node-count (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reserved-node/fixed-price (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/double))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reserved-node/reserved-node-offering-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reserved-node/duration (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reserved-node/reserved-node-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reserved-node/usage-price (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/double))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reserved-node/state (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reserved-node/recurring-charges (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/recurring-charge-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reserved-node/offering-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reserved-node/node-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/reserved-node (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.reserved-node/CurrencyCode :portkey.aws.redshift.-2012-12-01.reserved-node/StartTime :portkey.aws.redshift.-2012-12-01.reserved-node/NodeCount :portkey.aws.redshift.-2012-12-01.reserved-node/FixedPrice :portkey.aws.redshift.-2012-12-01/ReservedNodeOfferingType :portkey.aws.redshift.-2012-12-01.reserved-node/ReservedNodeOfferingId :portkey.aws.redshift.-2012-12-01.reserved-node/Duration :portkey.aws.redshift.-2012-12-01.reserved-node/ReservedNodeId :portkey.aws.redshift.-2012-12-01.reserved-node/UsagePrice :portkey.aws.redshift.-2012-12-01.reserved-node/State :portkey.aws.redshift.-2012-12-01.reserved-node/RecurringCharges :portkey.aws.redshift.-2012-12-01.reserved-node/OfferingType :portkey.aws.redshift.-2012-12-01.reserved-node/NodeType] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.enable-snapshot-copy-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.enable-snapshot-copy-message/destination-region (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.enable-snapshot-copy-message/retention-period (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.enable-snapshot-copy-message/snapshot-copy-grant-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/enable-snapshot-copy-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.enable-snapshot-copy-message/ClusterIdentifier :portkey.aws.redshift.-2012-12-01.enable-snapshot-copy-message/DestinationRegion] :opt-un [:portkey.aws.redshift.-2012-12-01.enable-snapshot-copy-message/RetentionPeriod :portkey.aws.redshift.-2012-12-01.enable-snapshot-copy-message/SnapshotCopyGrantName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/reserved-node-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reserved-nodes-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reserved-nodes-message/reserved-nodes (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/reserved-node-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/reserved-nodes-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.reserved-nodes-message/Marker :portkey.aws.redshift.-2012-12-01.reserved-nodes-message/ReservedNodes] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/double-optional clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/source-ids-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/string))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/number-of-nodes-per-cluster-limit-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/snsno-authorization-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reserved-node-offerings-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reserved-node-offerings-message/reserved-node-offerings (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/reserved-node-offering-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/reserved-node-offerings-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.reserved-node-offerings-message/Marker :portkey.aws.redshift.-2012-12-01.reserved-node-offerings-message/ReservedNodeOfferings] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/invalid-elastic-ip-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-parameter-status-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/cluster-parameter-status))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/disable-snapshot-copy-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/Cluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/authorize-snapshot-access-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/Snapshot] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-clusters-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-clusters-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-clusters-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-clusters-message/tag-keys (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-clusters-message/tag-values (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-value-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/describe-clusters-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.describe-clusters-message/ClusterIdentifier :portkey.aws.redshift.-2012-12-01.describe-clusters-message/MaxRecords :portkey.aws.redshift.-2012-12-01.describe-clusters-message/Marker :portkey.aws.redshift.-2012-12-01.describe-clusters-message/TagKeys :portkey.aws.redshift.-2012-12-01.describe-clusters-message/TagValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.revoke-snapshot-access-message/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.revoke-snapshot-access-message/snapshot-cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.revoke-snapshot-access-message/account-with-restore-access (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/revoke-snapshot-access-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.revoke-snapshot-access-message/SnapshotIdentifier :portkey.aws.redshift.-2012-12-01.revoke-snapshot-access-message/AccountWithRestoreAccess] :opt-un [:portkey.aws.redshift.-2012-12-01.revoke-snapshot-access-message/SnapshotClusterIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/snapshot-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/snapshot))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-event-subscriptions-message/subscription-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-event-subscriptions-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-event-subscriptions-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-event-subscriptions-message/tag-keys (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-event-subscriptions-message/tag-values (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-value-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/describe-event-subscriptions-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.describe-event-subscriptions-message/SubscriptionName :portkey.aws.redshift.-2012-12-01.describe-event-subscriptions-message/MaxRecords :portkey.aws.redshift.-2012-12-01.describe-event-subscriptions-message/Marker :portkey.aws.redshift.-2012-12-01.describe-event-subscriptions-message/TagKeys :portkey.aws.redshift.-2012-12-01.describe-event-subscriptions-message/TagValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/enhanced-vpc-routing (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/owner-account (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/hsm-client-certificate-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/cluster-subnet-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/availability-zone (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/cluster-security-groups (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/cluster-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/additional-info (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/elastic-ip (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/hsm-configuration-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/port (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/allow-version-upgrade (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/automated-snapshot-retention-period (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/iam-roles (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/iam-role-arn-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/node-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/snapshot-cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/restore-from-cluster-snapshot-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/ClusterIdentifier :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/SnapshotIdentifier] :opt-un [:portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/EnhancedVpcRouting :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/PubliclyAccessible :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/PreferredMaintenanceWindow :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/OwnerAccount :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/HsmClientCertificateIdentifier :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/ClusterSubnetGroupName :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/VpcSecurityGroupIds :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/AvailabilityZone :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/ClusterSecurityGroups :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/AdditionalInfo :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/ElasticIp :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/HsmConfigurationIdentifier :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/Port :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/KmsKeyId :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/AllowVersionUpgrade :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/AutomatedSnapshotRetentionPeriod :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/IamRoles :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/NodeType :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/SnapshotClusterIdentifier :portkey.aws.redshift.-2012-12-01.restore-from-cluster-snapshot-message/ClusterParameterGroupName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.delete-cluster-parameter-group-message/parameter-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/delete-cluster-parameter-group-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.delete-cluster-parameter-group-message/ParameterGroupName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/hsm-client-certificate-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.subnet/subnet-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.subnet/subnet-availability-zone (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/availability-zone))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.subnet/subnet-status (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/subnet (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.subnet/SubnetIdentifier :portkey.aws.redshift.-2012-12-01.subnet/SubnetAvailabilityZone :portkey.aws.redshift.-2012-12-01.subnet/SubnetStatus] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-hsm-configurations-message/hsm-configuration-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-hsm-configurations-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-hsm-configurations-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-hsm-configurations-message/tag-keys (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-hsm-configurations-message/tag-values (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-value-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/describe-hsm-configurations-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.describe-hsm-configurations-message/HsmConfigurationIdentifier :portkey.aws.redshift.-2012-12-01.describe-hsm-configurations-message/MaxRecords :portkey.aws.redshift.-2012-12-01.describe-hsm-configurations-message/Marker :portkey.aws.redshift.-2012-12-01.describe-hsm-configurations-message/TagKeys :portkey.aws.redshift.-2012-12-01.describe-hsm-configurations-message/TagValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-parameter-groups-message/parameter-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-parameter-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-parameter-groups-message/tag-keys (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-parameter-groups-message/tag-values (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-value-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/describe-cluster-parameter-groups-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.describe-cluster-parameter-groups-message/ParameterGroupName :portkey.aws.redshift.-2012-12-01.describe-cluster-parameter-groups-message/MaxRecords :portkey.aws.redshift.-2012-12-01.describe-cluster-parameter-groups-message/Marker :portkey.aws.redshift.-2012-12-01.describe-cluster-parameter-groups-message/TagKeys :portkey.aws.redshift.-2012-12-01.describe-cluster-parameter-groups-message/TagValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-subnet-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/create-cluster-parameter-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/ClusterParameterGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/reserved-node-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/event-info-map-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/event-info-map))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.authorize-cluster-security-group-ingress-message/cluster-security-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.authorize-cluster-security-group-ingress-message/cidrip (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.authorize-cluster-security-group-ingress-message/ec2-security-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.authorize-cluster-security-group-ingress-message/ec2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/authorize-cluster-security-group-ingress-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.authorize-cluster-security-group-ingress-message/ClusterSecurityGroupName] :opt-un [:portkey.aws.redshift.-2012-12-01.authorize-cluster-security-group-ingress-message/CIDRIP :portkey.aws.redshift.-2012-12-01.authorize-cluster-security-group-ingress-message/EC2SecurityGroupName :portkey.aws.redshift.-2012-12-01.authorize-cluster-security-group-ingress-message/EC2SecurityGroupOwnerId] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.hsm-configuration-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.hsm-configuration-message/hsm-configurations (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/hsm-configuration-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/hsm-configuration-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.hsm-configuration-message/Marker :portkey.aws.redshift.-2012-12-01.hsm-configuration-message/HsmConfigurations] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/invalid-hsm-configuration-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-resize-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/describe-resize-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.describe-resize-message/ClusterIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/invalids3-bucket-name-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/supported-platforms-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/supported-platform))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.event-subscription/severity (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.event-subscription/customer-aws-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.event-subscription/tags (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.event-subscription/source-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.event-subscription/enabled (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.event-subscription/status (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.event-subscription/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.event-subscription/cust-subscription-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.event-subscription/subscription-creation-time (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/event-subscription (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.event-subscription/Severity :portkey.aws.redshift.-2012-12-01/SourceIdsList :portkey.aws.redshift.-2012-12-01.event-subscription/CustomerAwsId :portkey.aws.redshift.-2012-12-01.event-subscription/Tags :portkey.aws.redshift.-2012-12-01.event-subscription/SourceType :portkey.aws.redshift.-2012-12-01.event-subscription/Enabled :portkey.aws.redshift.-2012-12-01.event-subscription/Status :portkey.aws.redshift.-2012-12-01.event-subscription/SnsTopicArn :portkey.aws.redshift.-2012-12-01/EventCategoriesList :portkey.aws.redshift.-2012-12-01.event-subscription/CustSubscriptionId :portkey.aws.redshift.-2012-12-01.event-subscription/SubscriptionCreationTime] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-snapshot-copy-status/destination-region (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-snapshot-copy-status/retention-period (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/long))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-snapshot-copy-status/snapshot-copy-grant-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-snapshot-copy-status (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.cluster-snapshot-copy-status/DestinationRegion :portkey.aws.redshift.-2012-12-01.cluster-snapshot-copy-status/RetentionPeriod :portkey.aws.redshift.-2012-12-01.cluster-snapshot-copy-status/SnapshotCopyGrantName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-default-cluster-parameters-message/parameter-group-family (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-default-cluster-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-default-cluster-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/describe-default-cluster-parameters-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.describe-default-cluster-parameters-message/ParameterGroupFamily] :opt-un [:portkey.aws.redshift.-2012-12-01.describe-default-cluster-parameters-message/MaxRecords :portkey.aws.redshift.-2012-12-01.describe-default-cluster-parameters-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/describe-default-cluster-parameters-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/DefaultClusterParameters] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot-message/snapshots (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/snapshot-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/snapshot-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.snapshot-message/Marker :portkey.aws.redshift.-2012-12-01.snapshot-message/Snapshots] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/subscription-severity-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/invalidvpcnetwork-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-subnet-group-message/cluster-subnet-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-subnet-group-message/description (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/modify-cluster-subnet-group-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.modify-cluster-subnet-group-message/ClusterSubnetGroupName :portkey.aws.redshift.-2012-12-01.modify-cluster-subnet-group-message/SubnetIds] :opt-un [:portkey.aws.redshift.-2012-12-01.modify-cluster-subnet-group-message/Description] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.disable-logging-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/disable-logging-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.disable-logging-message/ClusterIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-reserved-node-offerings-message/reserved-node-offering-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-reserved-node-offerings-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-reserved-node-offerings-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/describe-reserved-node-offerings-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.describe-reserved-node-offerings-message/ReservedNodeOfferingId :portkey.aws.redshift.-2012-12-01.describe-reserved-node-offerings-message/MaxRecords :portkey.aws.redshift.-2012-12-01.describe-reserved-node-offerings-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/reserved-node-offering-type {"Regular" "Regular", :regular "Regular", "Upgradable" "Upgradable", :upgradable "Upgradable"})

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/revoke-cluster-security-group-ingress-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/ClusterSecurityGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/invalid-table-restore-argument-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/orderable-cluster-options-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/orderable-cluster-option))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.logging-status/logging-enabled (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.logging-status/bucket-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.logging-status/s3-key-prefix (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.logging-status/last-successful-delivery-time (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.logging-status/last-failure-time (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.logging-status/last-failure-message (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/logging-status (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.logging-status/LoggingEnabled :portkey.aws.redshift.-2012-12-01.logging-status/BucketName :portkey.aws.redshift.-2012-12-01.logging-status/S3KeyPrefix :portkey.aws.redshift.-2012-12-01.logging-status/LastSuccessfulDeliveryTime :portkey.aws.redshift.-2012-12-01.logging-status/LastFailureTime :portkey.aws.redshift.-2012-12-01.logging-status/LastFailureMessage] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-security-group-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-security-group-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.cluster-security-group-message/Marker :portkey.aws.redshift.-2012-12-01/ClusterSecurityGroups] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/reserved-node-offering-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/reserved-node-offering))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/event-categories-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/EventCategoriesMapList] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/hsm-configuration-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-events-message/source-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-events-message/start-time (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-events-message/end-time (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-events-message/duration (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-events-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-events-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/describe-events-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.describe-events-message/SourceIdentifier :portkey.aws.redshift.-2012-12-01/SourceType :portkey.aws.redshift.-2012-12-01.describe-events-message/StartTime :portkey.aws.redshift.-2012-12-01.describe-events-message/EndTime :portkey.aws.redshift.-2012-12-01.describe-events-message/Duration :portkey.aws.redshift.-2012-12-01.describe-events-message/MaxRecords :portkey.aws.redshift.-2012-12-01.describe-events-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/parameter-apply-type {"static" "static", :static "static", "dynamic" "dynamic", :dynamic "dynamic"})

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/subscription-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/authorization-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/bucket-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/iprange-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/iprange))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/copy-to-region-disabled-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/snstopic-arn-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/event-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/event))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.hsm-client-certificate/hsm-client-certificate-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.hsm-client-certificate/hsm-client-certificate-public-key (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.hsm-client-certificate/tags (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/hsm-client-certificate (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.hsm-client-certificate/HsmClientCertificateIdentifier :portkey.aws.redshift.-2012-12-01.hsm-client-certificate/HsmClientCertificatePublicKey :portkey.aws.redshift.-2012-12-01.hsm-client-certificate/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.events-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.events-message/events (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/event-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/events-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.events-message/Marker :portkey.aws.redshift.-2012-12-01.events-message/Events] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/source-type {"cluster" "cluster", :cluster "cluster", "cluster-parameter-group" "cluster-parameter-group", :cluster-parameter-group "cluster-parameter-group", "cluster-security-group" "cluster-security-group", :cluster-security-group "cluster-security-group", "cluster-snapshot" "cluster-snapshot", :cluster-snapshot "cluster-snapshot"})

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/create-cluster-snapshot-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/Snapshot] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-security-group-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/unauthorized-operation (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/subscription-category-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.event/source-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.event/message (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.event/event-categories (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.event/severity (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.event/date (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.event/event-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/event (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.event/SourceIdentifier :portkey.aws.redshift.-2012-12-01/SourceType :portkey.aws.redshift.-2012-12-01.event/Message :portkey.aws.redshift.-2012-12-01.event/EventCategories :portkey.aws.redshift.-2012-12-01.event/Severity :portkey.aws.redshift.-2012-12-01.event/Date :portkey.aws.redshift.-2012-12-01.event/EventId] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.revoke-cluster-security-group-ingress-message/cluster-security-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.revoke-cluster-security-group-ingress-message/cidrip (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.revoke-cluster-security-group-ingress-message/ec2-security-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.revoke-cluster-security-group-ingress-message/ec2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/revoke-cluster-security-group-ingress-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.revoke-cluster-security-group-ingress-message/ClusterSecurityGroupName] :opt-un [:portkey.aws.redshift.-2012-12-01.revoke-cluster-security-group-ingress-message/CIDRIP :portkey.aws.redshift.-2012-12-01.revoke-cluster-security-group-ingress-message/EC2SecurityGroupName :portkey.aws.redshift.-2012-12-01.revoke-cluster-security-group-ingress-message/EC2SecurityGroupOwnerId] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/rotate-encryption-key-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/Cluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/invalid-hsm-client-certificate-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.disable-snapshot-copy-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/disable-snapshot-copy-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.disable-snapshot-copy-message/ClusterIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/availability-zone-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/availability-zone))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.availability-zone/name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.availability-zone/supported-platforms (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/supported-platforms-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/availability-zone (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.availability-zone/Name :portkey.aws.redshift.-2012-12-01.availability-zone/SupportedPlatforms] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.event-subscriptions-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/event-subscriptions-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.event-subscriptions-message/Marker :portkey.aws.redshift.-2012-12-01/EventSubscriptionsList] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/create-event-subscription-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/EventSubscription] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/restore-table-from-cluster-snapshot-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/TableRestoreStatus] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.delete-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/delete-event-subscription-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.delete-event-subscription-message/SubscriptionName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.supported-platform/name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/supported-platform (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.supported-platform/Name] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/sensitive-string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/cluster))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/invalid-subscription-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-security-groups-message/cluster-security-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-security-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-security-groups-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-security-groups-message/tag-keys (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-security-groups-message/tag-values (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-value-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/describe-cluster-security-groups-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.describe-cluster-security-groups-message/ClusterSecurityGroupName :portkey.aws.redshift.-2012-12-01.describe-cluster-security-groups-message/MaxRecords :portkey.aws.redshift.-2012-12-01.describe-cluster-security-groups-message/Marker :portkey.aws.redshift.-2012-12-01.describe-cluster-security-groups-message/TagKeys :portkey.aws.redshift.-2012-12-01.describe-cluster-security-groups-message/TagValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-security-groups (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/cluster-security-group))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.recurring-charge/recurring-charge-amount (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/double))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.recurring-charge/recurring-charge-frequency (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/recurring-charge (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.recurring-charge/RecurringChargeAmount :portkey.aws.redshift.-2012-12-01.recurring-charge/RecurringChargeFrequency] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/resize-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-parameter-group-message/parameter-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/parameters-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/modify-cluster-parameter-group-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.modify-cluster-parameter-group-message/ParameterGroupName :portkey.aws.redshift.-2012-12-01.modify-cluster-parameter-group-message/Parameters] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/restore-from-cluster-snapshot-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/Cluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/authorization-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-snapshot-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-tags-message/resource-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-tags-message/tags (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/create-tags-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.create-tags-message/ResourceName :portkey.aws.redshift.-2012-12-01.create-tags-message/Tags] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/reboot-cluster-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/Cluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/subnet-already-in-use (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-security-group-membership/cluster-security-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-security-group-membership/status (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-security-group-membership (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.cluster-security-group-membership/ClusterSecurityGroupName :portkey.aws.redshift.-2012-12-01.cluster-security-group-membership/Status] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-subnet-group-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-iam-role/iam-role-arn (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-iam-role/apply-status (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-iam-role (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.cluster-iam-role/IamRoleArn :portkey.aws.redshift.-2012-12-01.cluster-iam-role/ApplyStatus] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/invalid-subnet (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/tag-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/tag))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/create-cluster-security-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/ClusterSecurityGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.hsm-client-certificate-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.hsm-client-certificate-message/hsm-client-certificates (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/hsm-client-certificate-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/hsm-client-certificate-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.hsm-client-certificate-message/Marker :portkey.aws.redshift.-2012-12-01.hsm-client-certificate-message/HsmClientCertificates] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-parameters-message/parameter-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-parameters-message/source (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/describe-cluster-parameters-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.describe-cluster-parameters-message/ParameterGroupName] :opt-un [:portkey.aws.redshift.-2012-12-01.describe-cluster-parameters-message/Source :portkey.aws.redshift.-2012-12-01.describe-cluster-parameters-message/MaxRecords :portkey.aws.redshift.-2012-12-01.describe-cluster-parameters-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-snapshot-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-tags-message/resource-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-tags-message/resource-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-tags-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-tags-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-tags-message/tag-keys (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-tags-message/tag-values (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-value-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/describe-tags-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.describe-tags-message/ResourceName :portkey.aws.redshift.-2012-12-01.describe-tags-message/ResourceType :portkey.aws.redshift.-2012-12-01.describe-tags-message/MaxRecords :portkey.aws.redshift.-2012-12-01.describe-tags-message/Marker :portkey.aws.redshift.-2012-12-01.describe-tags-message/TagKeys :portkey.aws.redshift.-2012-12-01.describe-tags-message/TagValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/reserved-node-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/hsm-client-certificate-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/tag-key-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/string))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-subnet-group-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-snapshots-message/tag-keys (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-snapshots-message/tag-values (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-value-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-snapshots-message/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-snapshots-message/end-time (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-snapshots-message/start-time (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-snapshots-message/owner-account (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-snapshots-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-snapshots-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-snapshots-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-snapshots-message/snapshot-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-snapshots-message/cluster-exists (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/describe-cluster-snapshots-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.describe-cluster-snapshots-message/TagKeys :portkey.aws.redshift.-2012-12-01.describe-cluster-snapshots-message/TagValues :portkey.aws.redshift.-2012-12-01.describe-cluster-snapshots-message/SnapshotIdentifier :portkey.aws.redshift.-2012-12-01.describe-cluster-snapshots-message/EndTime :portkey.aws.redshift.-2012-12-01.describe-cluster-snapshots-message/StartTime :portkey.aws.redshift.-2012-12-01.describe-cluster-snapshots-message/OwnerAccount :portkey.aws.redshift.-2012-12-01.describe-cluster-snapshots-message/ClusterIdentifier :portkey.aws.redshift.-2012-12-01.describe-cluster-snapshots-message/MaxRecords :portkey.aws.redshift.-2012-12-01.describe-cluster-snapshots-message/Marker :portkey.aws.redshift.-2012-12-01.describe-cluster-snapshots-message/SnapshotType :portkey.aws.redshift.-2012-12-01.describe-cluster-snapshots-message/ClusterExists] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/unsupported-option-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/hsm-configuration-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-logging-status-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/describe-logging-status-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.describe-logging-status-message/ClusterIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/subscription-already-exist-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/invalids3-key-prefix-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.delete-snapshot-copy-grant-message/snapshot-copy-grant-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/delete-snapshot-copy-grant-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.delete-snapshot-copy-grant-message/SnapshotCopyGrantName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/cluster-public-key (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/enhanced-vpc-routing (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/publicly-accessible (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/encrypted (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/cluster-subnet-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/number-of-nodes (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/tags (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/dbname (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/cluster-parameter-groups (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-status-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/availability-zone (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/cluster-security-groups (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/cluster-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/master-username (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/cluster-status (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/vpc-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/kms-key-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/cluster-create-time (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/cluster-revision-number (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/allow-version-upgrade (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/cluster-version (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/modify-status (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/automated-snapshot-retention-period (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/iam-roles (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/cluster-iam-role-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/vpc-security-groups (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/vpc-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/cluster-nodes (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/cluster-nodes-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster/node-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.cluster/ClusterPublicKey :portkey.aws.redshift.-2012-12-01.cluster/EnhancedVpcRouting :portkey.aws.redshift.-2012-12-01.cluster/PubliclyAccessible :portkey.aws.redshift.-2012-12-01.cluster/PreferredMaintenanceWindow :portkey.aws.redshift.-2012-12-01.cluster/Encrypted :portkey.aws.redshift.-2012-12-01.cluster/ClusterIdentifier :portkey.aws.redshift.-2012-12-01/ClusterSnapshotCopyStatus :portkey.aws.redshift.-2012-12-01.cluster/ClusterSubnetGroupName :portkey.aws.redshift.-2012-12-01.cluster/NumberOfNodes :portkey.aws.redshift.-2012-12-01.cluster/Tags :portkey.aws.redshift.-2012-12-01.cluster/DBName :portkey.aws.redshift.-2012-12-01.cluster/ClusterParameterGroups :portkey.aws.redshift.-2012-12-01.cluster/AvailabilityZone :portkey.aws.redshift.-2012-12-01.cluster/ClusterSecurityGroups :portkey.aws.redshift.-2012-12-01.cluster/MasterUsername :portkey.aws.redshift.-2012-12-01.cluster/ClusterStatus :portkey.aws.redshift.-2012-12-01.cluster/VpcId :portkey.aws.redshift.-2012-12-01.cluster/KmsKeyId :portkey.aws.redshift.-2012-12-01/RestoreStatus :portkey.aws.redshift.-2012-12-01.cluster/ClusterCreateTime :portkey.aws.redshift.-2012-12-01.cluster/ClusterRevisionNumber :portkey.aws.redshift.-2012-12-01.cluster/AllowVersionUpgrade :portkey.aws.redshift.-2012-12-01.cluster/ClusterVersion :portkey.aws.redshift.-2012-12-01.cluster/ModifyStatus :portkey.aws.redshift.-2012-12-01/Endpoint :portkey.aws.redshift.-2012-12-01.cluster/AutomatedSnapshotRetentionPeriod :portkey.aws.redshift.-2012-12-01.cluster/IamRoles :portkey.aws.redshift.-2012-12-01.cluster/VpcSecurityGroups :portkey.aws.redshift.-2012-12-01.cluster/ClusterNodes :portkey.aws.redshift.-2012-12-01/HsmStatus :portkey.aws.redshift.-2012-12-01/ElasticIpStatus :portkey.aws.redshift.-2012-12-01.cluster/NodeType :portkey.aws.redshift.-2012-12-01/PendingModifiedValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/snapshot-copy-grant-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/in-progress-table-restore-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/hsm-client-certificate-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/hsm-client-certificate))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/invalid-snapshot-copy-grant-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reserved-node-offering/currency-code (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reserved-node-offering/fixed-price (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/double))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reserved-node-offering/reserved-node-offering-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reserved-node-offering/duration (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reserved-node-offering/usage-price (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/double))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reserved-node-offering/recurring-charges (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/recurring-charge-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reserved-node-offering/offering-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reserved-node-offering/node-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/reserved-node-offering (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.reserved-node-offering/CurrencyCode :portkey.aws.redshift.-2012-12-01.reserved-node-offering/FixedPrice :portkey.aws.redshift.-2012-12-01/ReservedNodeOfferingType :portkey.aws.redshift.-2012-12-01.reserved-node-offering/ReservedNodeOfferingId :portkey.aws.redshift.-2012-12-01.reserved-node-offering/Duration :portkey.aws.redshift.-2012-12-01.reserved-node-offering/UsagePrice :portkey.aws.redshift.-2012-12-01.reserved-node-offering/RecurringCharges :portkey.aws.redshift.-2012-12-01.reserved-node-offering/OfferingType :portkey.aws.redshift.-2012-12-01.reserved-node-offering/NodeType] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-snapshot-message/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-snapshot-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/create-cluster-snapshot-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.create-cluster-snapshot-message/SnapshotIdentifier :portkey.aws.redshift.-2012-12-01.create-cluster-snapshot-message/ClusterIdentifier] :opt-un [:portkey.aws.redshift.-2012-12-01.create-cluster-snapshot-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/invalid-cluster-subnet-group-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/modify-cluster-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/Cluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/limit-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.delete-cluster-security-group-message/cluster-security-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/delete-cluster-security-group-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.delete-cluster-security-group-message/ClusterSecurityGroupName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/accounts-with-restore-access-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/account-with-restore-access))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.vpc-security-group-membership/vpc-security-group-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.vpc-security-group-membership/status (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/vpc-security-group-membership (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.vpc-security-group-membership/VpcSecurityGroupId :portkey.aws.redshift.-2012-12-01.vpc-security-group-membership/Status] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/authorization-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-reserved-nodes-message/reserved-node-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-reserved-nodes-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-reserved-nodes-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/describe-reserved-nodes-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.describe-reserved-nodes-message/ReservedNodeId :portkey.aws.redshift.-2012-12-01.describe-reserved-nodes-message/MaxRecords :portkey.aws.redshift.-2012-12-01.describe-reserved-nodes-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/invalid-cluster-security-group-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.event-info-map/event-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.event-info-map/event-categories (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.event-info-map/event-description (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.event-info-map/severity (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/event-info-map (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.event-info-map/EventId :portkey.aws.redshift.-2012-12-01.event-info-map/EventCategories :portkey.aws.redshift.-2012-12-01.event-info-map/EventDescription :portkey.aws.redshift.-2012-12-01.event-info-map/Severity] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/subscription-event-id-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.delete-cluster-subnet-group-message/cluster-subnet-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/delete-cluster-subnet-group-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.delete-cluster-subnet-group-message/ClusterSubnetGroupName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/insufficients3-bucket-policy-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-credentials/db-user (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-credentials/db-password (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/sensitive-string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-credentials/expiration (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-credentials (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.cluster-credentials/DbUser :portkey.aws.redshift.-2012-12-01.cluster-credentials/DbPassword :portkey.aws.redshift.-2012-12-01.cluster-credentials/Expiration] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/hsm-configuration-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/invalid-cluster-snapshot-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/snapshot-copy-already-enabled-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/resource-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.ec2-security-group/status (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.ec2-security-group/ec2-security-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.ec2-security-group/ec2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.ec2-security-group/tags (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/ec2-security-group (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.ec2-security-group/Status :portkey.aws.redshift.-2012-12-01.ec2-security-group/EC2SecurityGroupName :portkey.aws.redshift.-2012-12-01.ec2-security-group/EC2SecurityGroupOwnerId :portkey.aws.redshift.-2012-12-01.ec2-security-group/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-subnet-group-message/cluster-subnet-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-subnet-group-message/description (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-subnet-group-message/tags (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/create-cluster-subnet-group-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.create-cluster-subnet-group-message/ClusterSubnetGroupName :portkey.aws.redshift.-2012-12-01.create-cluster-subnet-group-message/Description :portkey.aws.redshift.-2012-12-01.create-cluster-subnet-group-message/SubnetIds] :opt-un [:portkey.aws.redshift.-2012-12-01.create-cluster-subnet-group-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-message/enhanced-vpc-routing (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-message/hsm-client-certificate-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-message/number-of-nodes (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-message/cluster-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-message/master-user-password (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-message/cluster-security-groups (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/cluster-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-message/elastic-ip (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-message/hsm-configuration-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-message/allow-version-upgrade (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-message/cluster-version (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-message/automated-snapshot-retention-period (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-message/new-cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-message/node-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-message/cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/modify-cluster-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.modify-cluster-message/ClusterIdentifier] :opt-un [:portkey.aws.redshift.-2012-12-01.modify-cluster-message/EnhancedVpcRouting :portkey.aws.redshift.-2012-12-01.modify-cluster-message/PubliclyAccessible :portkey.aws.redshift.-2012-12-01.modify-cluster-message/PreferredMaintenanceWindow :portkey.aws.redshift.-2012-12-01.modify-cluster-message/HsmClientCertificateIdentifier :portkey.aws.redshift.-2012-12-01.modify-cluster-message/NumberOfNodes :portkey.aws.redshift.-2012-12-01.modify-cluster-message/VpcSecurityGroupIds :portkey.aws.redshift.-2012-12-01.modify-cluster-message/ClusterType :portkey.aws.redshift.-2012-12-01.modify-cluster-message/MasterUserPassword :portkey.aws.redshift.-2012-12-01.modify-cluster-message/ClusterSecurityGroups :portkey.aws.redshift.-2012-12-01.modify-cluster-message/ElasticIp :portkey.aws.redshift.-2012-12-01.modify-cluster-message/HsmConfigurationIdentifier :portkey.aws.redshift.-2012-12-01.modify-cluster-message/AllowVersionUpgrade :portkey.aws.redshift.-2012-12-01.modify-cluster-message/ClusterVersion :portkey.aws.redshift.-2012-12-01.modify-cluster-message/AutomatedSnapshotRetentionPeriod :portkey.aws.redshift.-2012-12-01.modify-cluster-message/NewClusterIdentifier :portkey.aws.redshift.-2012-12-01.modify-cluster-message/NodeType :portkey.aws.redshift.-2012-12-01.modify-cluster-message/ClusterParameterGroupName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/copy-cluster-snapshot-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/Snapshot] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/create-snapshot-copy-grant-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/SnapshotCopyGrant] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.delete-cluster-snapshot-message/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.delete-cluster-snapshot-message/snapshot-cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/delete-cluster-snapshot-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.delete-cluster-snapshot-message/SnapshotIdentifier] :opt-un [:portkey.aws.redshift.-2012-12-01.delete-cluster-snapshot-message/SnapshotClusterIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/event-categories-map-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/event-categories-map))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/integer clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/iam-role-arn-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/string))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/snapshot-copy-grant-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.parameter/data-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.parameter/parameter-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.parameter/source (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.parameter/minimum-engine-version (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.parameter/allowed-values (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.parameter/apply-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/parameter-apply-type))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.parameter/description (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.parameter/is-modifiable (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.parameter/parameter-value (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/parameter (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.parameter/DataType :portkey.aws.redshift.-2012-12-01.parameter/ParameterName :portkey.aws.redshift.-2012-12-01.parameter/Source :portkey.aws.redshift.-2012-12-01.parameter/MinimumEngineVersion :portkey.aws.redshift.-2012-12-01.parameter/AllowedValues :portkey.aws.redshift.-2012-12-01.parameter/ApplyType :portkey.aws.redshift.-2012-12-01.parameter/Description :portkey.aws.redshift.-2012-12-01.parameter/IsModifiable :portkey.aws.redshift.-2012-12-01.parameter/ParameterValue] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-parameter-status/parameter-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-parameter-status/parameter-apply-status (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-parameter-status/parameter-apply-error-description (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-parameter-status (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.cluster-parameter-status/ParameterName :portkey.aws.redshift.-2012-12-01.cluster-parameter-status/ParameterApplyStatus :portkey.aws.redshift.-2012-12-01.cluster-parameter-status/ParameterApplyErrorDescription] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/vpc-security-group-id-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/string))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/table-restore-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-parameter-group-status/parameter-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-parameter-group-status/parameter-apply-status (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-status (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.cluster-parameter-group-status/ParameterGroupName :portkey.aws.redshift.-2012-12-01.cluster-parameter-group-status/ParameterApplyStatus :portkey.aws.redshift.-2012-12-01/ClusterParameterStatusList] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/cluster-security-group-membership))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-status/status (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-status/current-restore-rate-in-mega-bytes-per-second (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/double))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-status/snapshot-size-in-mega-bytes (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/long))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-status/progress-in-mega-bytes (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/long))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-status/elapsed-time-in-seconds (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/long))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-status/estimated-time-to-completion-in-seconds (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/long))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/restore-status (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.restore-status/Status :portkey.aws.redshift.-2012-12-01.restore-status/CurrentRestoreRateInMegaBytesPerSecond :portkey.aws.redshift.-2012-12-01.restore-status/SnapshotSizeInMegaBytes :portkey.aws.redshift.-2012-12-01.restore-status/ProgressInMegaBytes :portkey.aws.redshift.-2012-12-01.restore-status/ElapsedTimeInSeconds :portkey.aws.redshift.-2012-12-01.restore-status/EstimatedTimeToCompletionInSeconds] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-snapshot-copy-grants-message/snapshot-copy-grant-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-snapshot-copy-grants-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-snapshot-copy-grants-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-snapshot-copy-grants-message/tag-keys (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-snapshot-copy-grants-message/tag-values (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-value-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/describe-snapshot-copy-grants-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.describe-snapshot-copy-grants-message/SnapshotCopyGrantName :portkey.aws.redshift.-2012-12-01.describe-snapshot-copy-grants-message/MaxRecords :portkey.aws.redshift.-2012-12-01.describe-snapshot-copy-grants-message/Marker :portkey.aws.redshift.-2012-12-01.describe-snapshot-copy-grants-message/TagKeys :portkey.aws.redshift.-2012-12-01.describe-snapshot-copy-grants-message/TagValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.delete-cluster-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.delete-cluster-message/skip-final-cluster-snapshot (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.delete-cluster-message/final-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/delete-cluster-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.delete-cluster-message/ClusterIdentifier] :opt-un [:portkey.aws.redshift.-2012-12-01.delete-cluster-message/SkipFinalClusterSnapshot :portkey.aws.redshift.-2012-12-01.delete-cluster-message/FinalClusterSnapshotIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-security-group-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reboot-cluster-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/reboot-cluster-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.reboot-cluster-message/ClusterIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/reserved-node-offering-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-security-group-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/incompatible-orderable-options (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/restorable-node-types (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/restorable-node-type-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/snapshot-create-time (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/enhanced-vpc-routing (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/source-region (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/encrypted-withhsm (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/encrypted (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/owner-account (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/number-of-nodes (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/tags (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/dbname (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/estimated-seconds-to-completion (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/long))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/availability-zone (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/status (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/snapshot-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/actual-incremental-backup-size-in-mega-bytes (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/double))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/master-username (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/backup-progress-in-mega-bytes (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/double))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/accounts-with-restore-access (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/accounts-with-restore-access-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/port (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/vpc-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/kms-key-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/cluster-create-time (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/cluster-version (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/elapsed-time-in-seconds (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/long))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/current-backup-rate-in-mega-bytes-per-second (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/double))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/node-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot/total-backup-size-in-mega-bytes (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/double))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/snapshot (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.snapshot/SnapshotIdentifier :portkey.aws.redshift.-2012-12-01.snapshot/RestorableNodeTypes :portkey.aws.redshift.-2012-12-01.snapshot/SnapshotCreateTime :portkey.aws.redshift.-2012-12-01.snapshot/EnhancedVpcRouting :portkey.aws.redshift.-2012-12-01.snapshot/SourceRegion :portkey.aws.redshift.-2012-12-01.snapshot/EncryptedWithHSM :portkey.aws.redshift.-2012-12-01.snapshot/Encrypted :portkey.aws.redshift.-2012-12-01.snapshot/OwnerAccount :portkey.aws.redshift.-2012-12-01.snapshot/ClusterIdentifier :portkey.aws.redshift.-2012-12-01.snapshot/NumberOfNodes :portkey.aws.redshift.-2012-12-01.snapshot/Tags :portkey.aws.redshift.-2012-12-01.snapshot/DBName :portkey.aws.redshift.-2012-12-01.snapshot/EstimatedSecondsToCompletion :portkey.aws.redshift.-2012-12-01.snapshot/AvailabilityZone :portkey.aws.redshift.-2012-12-01.snapshot/Status :portkey.aws.redshift.-2012-12-01.snapshot/SnapshotType :portkey.aws.redshift.-2012-12-01.snapshot/ActualIncrementalBackupSizeInMegaBytes :portkey.aws.redshift.-2012-12-01.snapshot/MasterUsername :portkey.aws.redshift.-2012-12-01.snapshot/BackupProgressInMegaBytes :portkey.aws.redshift.-2012-12-01.snapshot/AccountsWithRestoreAccess :portkey.aws.redshift.-2012-12-01.snapshot/Port :portkey.aws.redshift.-2012-12-01.snapshot/VpcId :portkey.aws.redshift.-2012-12-01.snapshot/KmsKeyId :portkey.aws.redshift.-2012-12-01.snapshot/ClusterCreateTime :portkey.aws.redshift.-2012-12-01.snapshot/ClusterVersion :portkey.aws.redshift.-2012-12-01.snapshot/ElapsedTimeInSeconds :portkey.aws.redshift.-2012-12-01.snapshot/CurrentBackupRateInMegaBytesPerSecond :portkey.aws.redshift.-2012-12-01.snapshot/NodeType :portkey.aws.redshift.-2012-12-01.snapshot/TotalBackupSizeInMegaBytes] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/tstamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/delete-cluster-snapshot-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/Snapshot] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-subnet-groups (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/cluster-subnet-group))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.event-categories-map/source-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.event-categories-map/events (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/event-info-map-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/event-categories-map (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.event-categories-map/SourceType :portkey.aws.redshift.-2012-12-01.event-categories-map/Events] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/event-subscription-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-event-subscription-message/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-event-subscription-message/source-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-event-subscription-message/source-ids (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/source-ids-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-event-subscription-message/event-categories (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-event-subscription-message/severity (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-event-subscription-message/enabled (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-event-subscription-message/tags (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/create-event-subscription-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.create-event-subscription-message/SubscriptionName :portkey.aws.redshift.-2012-12-01.create-event-subscription-message/SnsTopicArn] :opt-un [:portkey.aws.redshift.-2012-12-01.create-event-subscription-message/SourceType :portkey.aws.redshift.-2012-12-01.create-event-subscription-message/SourceIds :portkey.aws.redshift.-2012-12-01.create-event-subscription-message/EventCategories :portkey.aws.redshift.-2012-12-01.create-event-subscription-message/Severity :portkey.aws.redshift.-2012-12-01.create-event-subscription-message/Enabled :portkey.aws.redshift.-2012-12-01.create-event-subscription-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-status-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-status))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/create-cluster-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/Cluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/recurring-charge-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/recurring-charge))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot-copy-grant-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot-copy-grant-message/snapshot-copy-grants (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/snapshot-copy-grant-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/snapshot-copy-grant-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.snapshot-copy-grant-message/Marker :portkey.aws.redshift.-2012-12-01.snapshot-copy-grant-message/SnapshotCopyGrants] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.tagged-resource-list-message/tagged-resources (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tagged-resource-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.tagged-resource-list-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/tagged-resource-list-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.tagged-resource-list-message/TaggedResources :portkey.aws.redshift.-2012-12-01.tagged-resource-list-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-orderable-cluster-options-message/cluster-version (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-orderable-cluster-options-message/node-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-orderable-cluster-options-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-orderable-cluster-options-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/describe-orderable-cluster-options-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.describe-orderable-cluster-options-message/ClusterVersion :portkey.aws.redshift.-2012-12-01.describe-orderable-cluster-options-message/NodeType :portkey.aws.redshift.-2012-12-01.describe-orderable-cluster-options-message/MaxRecords :portkey.aws.redshift.-2012-12-01.describe-orderable-cluster-options-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/event-categories-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/string))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/invalid-tag-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/dependent-service-unavailable-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.account-with-restore-access/account-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.account-with-restore-access/account-alias (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/account-with-restore-access (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.account-with-restore-access/AccountId :portkey.aws.redshift.-2012-12-01.account-with-restore-access/AccountAlias] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-subnet-group-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/table-restore-status-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/table-restore-status))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-parameter-group-details/parameters (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/parameters-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-parameter-group-details/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-details (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.cluster-parameter-group-details/Parameters :portkey.aws.redshift.-2012-12-01.cluster-parameter-group-details/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-version/cluster-version (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-version/cluster-parameter-group-family (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-version/description (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-version (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.cluster-version/ClusterVersion :portkey.aws.redshift.-2012-12-01.cluster-version/ClusterParameterGroupFamily :portkey.aws.redshift.-2012-12-01.cluster-version/Description] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.orderable-cluster-options-message/orderable-cluster-options (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/orderable-cluster-options-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.orderable-cluster-options-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/orderable-cluster-options-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.orderable-cluster-options-message/OrderableClusterOptions :portkey.aws.redshift.-2012-12-01.orderable-cluster-options-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.rotate-encryption-key-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/rotate-encryption-key-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.rotate-encryption-key-message/ClusterIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.endpoint/address (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.endpoint/port (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/endpoint (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.endpoint/Address :portkey.aws.redshift.-2012-12-01.endpoint/Port] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-parameter-group-message/parameter-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-parameter-group-message/parameter-group-family (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-parameter-group-message/description (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/create-cluster-parameter-group-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.create-cluster-parameter-group-message/ParameterGroupName :portkey.aws.redshift.-2012-12-01.create-cluster-parameter-group-message/ParameterGroupFamily :portkey.aws.redshift.-2012-12-01.create-cluster-parameter-group-message/Description] :opt-un [:portkey.aws.redshift.-2012-12-01.create-cluster-parameter-group-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.table-restore-status/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.table-restore-status/target-schema-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.table-restore-status/source-schema-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.table-restore-status/total-data-in-mega-bytes (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/long-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.table-restore-status/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.table-restore-status/request-time (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.table-restore-status/new-table-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.table-restore-status/progress-in-mega-bytes (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/long-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.table-restore-status/source-database-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.table-restore-status/status (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/table-restore-status-type))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.table-restore-status/message (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.table-restore-status/source-table-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.table-restore-status/table-restore-request-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.table-restore-status/target-database-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/table-restore-status (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.table-restore-status/SnapshotIdentifier :portkey.aws.redshift.-2012-12-01.table-restore-status/TargetSchemaName :portkey.aws.redshift.-2012-12-01.table-restore-status/SourceSchemaName :portkey.aws.redshift.-2012-12-01.table-restore-status/TotalDataInMegaBytes :portkey.aws.redshift.-2012-12-01.table-restore-status/ClusterIdentifier :portkey.aws.redshift.-2012-12-01.table-restore-status/RequestTime :portkey.aws.redshift.-2012-12-01.table-restore-status/NewTableName :portkey.aws.redshift.-2012-12-01.table-restore-status/ProgressInMegaBytes :portkey.aws.redshift.-2012-12-01.table-restore-status/SourceDatabaseName :portkey.aws.redshift.-2012-12-01.table-restore-status/Status :portkey.aws.redshift.-2012-12-01.table-restore-status/Message :portkey.aws.redshift.-2012-12-01.table-restore-status/SourceTableName :portkey.aws.redshift.-2012-12-01.table-restore-status/TableRestoreRequestId :portkey.aws.redshift.-2012-12-01.table-restore-status/TargetDatabaseName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/invalid-restore-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/import-tables-completed (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/string))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/reserved-node-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/reserved-node))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/invalid-cluster-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/snapshot-copy-already-disabled-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-hsm-configuration-message/hsm-configuration-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-hsm-configuration-message/description (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-hsm-configuration-message/hsm-ip-address (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-hsm-configuration-message/hsm-partition-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-hsm-configuration-message/hsm-partition-password (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-hsm-configuration-message/hsm-server-public-certificate (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-hsm-configuration-message/tags (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/create-hsm-configuration-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.create-hsm-configuration-message/HsmConfigurationIdentifier :portkey.aws.redshift.-2012-12-01.create-hsm-configuration-message/Description :portkey.aws.redshift.-2012-12-01.create-hsm-configuration-message/HsmIpAddress :portkey.aws.redshift.-2012-12-01.create-hsm-configuration-message/HsmPartitionName :portkey.aws.redshift.-2012-12-01.create-hsm-configuration-message/HsmPartitionPassword :portkey.aws.redshift.-2012-12-01.create-hsm-configuration-message/HsmServerPublicCertificate] :opt-un [:portkey.aws.redshift.-2012-12-01.create-hsm-configuration-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/import-tables-in-progress (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/string))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/snapshot-copy-disabled-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-subnet-group-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-subnet-group-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.cluster-subnet-group-message/Marker :portkey.aws.redshift.-2012-12-01/ClusterSubnetGroups] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.delete-tags-message/resource-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.delete-tags-message/tag-keys (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/delete-tags-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.delete-tags-message/ResourceName :portkey.aws.redshift.-2012-12-01.delete-tags-message/TagKeys] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/number-of-nodes-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/purchase-reserved-node-offering-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/ReservedNode] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.iprange/status (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.iprange/cidrip (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.iprange/tags (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/iprange (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.iprange/Status :portkey.aws.redshift.-2012-12-01.iprange/CIDRIP :portkey.aws.redshift.-2012-12-01.iprange/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.clusters-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.clusters-message/clusters (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/cluster-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/clusters-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.clusters-message/Marker :portkey.aws.redshift.-2012-12-01.clusters-message/Clusters] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-subnet-group/cluster-subnet-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-subnet-group/description (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-subnet-group/vpc-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-subnet-group/subnet-group-status (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-subnet-group/subnets (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/subnet-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-subnet-group/tags (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-subnet-group (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.cluster-subnet-group/ClusterSubnetGroupName :portkey.aws.redshift.-2012-12-01.cluster-subnet-group/Description :portkey.aws.redshift.-2012-12-01.cluster-subnet-group/VpcId :portkey.aws.redshift.-2012-12-01.cluster-subnet-group/SubnetGroupStatus :portkey.aws.redshift.-2012-12-01.cluster-subnet-group/Subnets :portkey.aws.redshift.-2012-12-01.cluster-subnet-group/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/create-hsm-client-certificate-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/HsmClientCertificate] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-nodes-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/cluster-node))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/revoke-snapshot-access-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/Snapshot] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/invalid-cluster-subnet-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/delete-cluster-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/Cluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-snapshot-copy-retention-period-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-snapshot-copy-retention-period-message/retention-period (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/modify-snapshot-copy-retention-period-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.modify-snapshot-copy-retention-period-message/ClusterIdentifier :portkey.aws.redshift.-2012-12-01.modify-snapshot-copy-retention-period-message/RetentionPeriod] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/modify-snapshot-copy-retention-period-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/Cluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-parameter-group-name-message/parameter-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-parameter-group-name-message/parameter-group-status (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-name-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.cluster-parameter-group-name-message/ParameterGroupName :portkey.aws.redshift.-2012-12-01.cluster-parameter-group-name-message/ParameterGroupStatus] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.delete-hsm-client-certificate-message/hsm-client-certificate-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/delete-hsm-client-certificate-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.delete-hsm-client-certificate-message/HsmClientCertificateIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/modify-event-subscription-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/EventSubscription] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.tag/key (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.tag/value (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/tag (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.tag/Key :portkey.aws.redshift.-2012-12-01.tag/Value] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-event-categories-message/source-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/describe-event-categories-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.describe-event-categories-message/SourceType] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-versions-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-versions-message/cluster-versions (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/cluster-version-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-versions-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.cluster-versions-message/Marker :portkey.aws.redshift.-2012-12-01.cluster-versions-message/ClusterVersions] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/snapshot-copy-grant-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/boolean-optional clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/snsinvalid-topic-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-iam-role-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/cluster-iam-role))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-security-group-name-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/string))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.tagged-resource/resource-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.tagged-resource/resource-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/tagged-resource (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/Tag :portkey.aws.redshift.-2012-12-01.tagged-resource/ResourceName :portkey.aws.redshift.-2012-12-01.tagged-resource/ResourceType] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/unknown-snapshot-copy-region-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/modify-cluster-subnet-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/ClusterSubnetGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/access-to-snapshot-denied-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/restorable-node-type-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/string))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.copy-cluster-snapshot-message/source-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.copy-cluster-snapshot-message/source-snapshot-cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.copy-cluster-snapshot-message/target-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/copy-cluster-snapshot-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.copy-cluster-snapshot-message/SourceSnapshotIdentifier :portkey.aws.redshift.-2012-12-01.copy-cluster-snapshot-message/TargetSnapshotIdentifier] :opt-un [:portkey.aws.redshift.-2012-12-01.copy-cluster-snapshot-message/SourceSnapshotClusterIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/hsm-client-certificate-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/create-cluster-subnet-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/ClusterSubnetGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-parameter-group/parameter-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-parameter-group/parameter-group-family (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-parameter-group/description (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-parameter-group/tags (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-parameter-group (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.cluster-parameter-group/ParameterGroupName :portkey.aws.redshift.-2012-12-01.cluster-parameter-group/ParameterGroupFamily :portkey.aws.redshift.-2012-12-01.cluster-parameter-group/Description :portkey.aws.redshift.-2012-12-01.cluster-parameter-group/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/invalid-cluster-parameter-group-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/event-subscriptions-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/event-subscription))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/hsm-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/hsm-configuration))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/authorize-cluster-security-group-ingress-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/ClusterSecurityGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-subnet-groups-message/cluster-subnet-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-subnet-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-subnet-groups-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-subnet-groups-message/tag-keys (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-subnet-groups-message/tag-values (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-value-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/describe-cluster-subnet-groups-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.describe-cluster-subnet-groups-message/ClusterSubnetGroupName :portkey.aws.redshift.-2012-12-01.describe-cluster-subnet-groups-message/MaxRecords :portkey.aws.redshift.-2012-12-01.describe-cluster-subnet-groups-message/Marker :portkey.aws.redshift.-2012-12-01.describe-cluster-subnet-groups-message/TagKeys :portkey.aws.redshift.-2012-12-01.describe-cluster-subnet-groups-message/TagValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/tag-limit-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-hsm-client-certificate-message/hsm-client-certificate-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-hsm-client-certificate-message/tags (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/create-hsm-client-certificate-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.create-hsm-client-certificate-message/HsmClientCertificateIdentifier] :opt-un [:portkey.aws.redshift.-2012-12-01.create-hsm-client-certificate-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/long-optional clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/modify-cluster-iam-roles-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/Cluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/db-group-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/string))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-version-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/cluster-version))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/integer-optional clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.hsm-status/hsm-client-certificate-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.hsm-status/hsm-configuration-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.hsm-status/status (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/hsm-status (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.hsm-status/HsmClientCertificateIdentifier :portkey.aws.redshift.-2012-12-01.hsm-status/HsmConfigurationIdentifier :portkey.aws.redshift.-2012-12-01.hsm-status/Status] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.elastic-ip-status/elastic-ip (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.elastic-ip-status/status (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/elastic-ip-status (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.elastic-ip-status/ElasticIp :portkey.aws.redshift.-2012-12-01.elastic-ip-status/Status] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.orderable-cluster-option/cluster-version (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.orderable-cluster-option/cluster-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.orderable-cluster-option/node-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.orderable-cluster-option/availability-zones (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/availability-zone-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/orderable-cluster-option (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.orderable-cluster-option/ClusterVersion :portkey.aws.redshift.-2012-12-01.orderable-cluster-option/ClusterType :portkey.aws.redshift.-2012-12-01.orderable-cluster-option/NodeType :portkey.aws.redshift.-2012-12-01.orderable-cluster-option/AvailabilityZones] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-table-from-cluster-snapshot-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-table-from-cluster-snapshot-message/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-table-from-cluster-snapshot-message/source-database-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-table-from-cluster-snapshot-message/source-schema-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-table-from-cluster-snapshot-message/source-table-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-table-from-cluster-snapshot-message/target-database-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-table-from-cluster-snapshot-message/target-schema-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.restore-table-from-cluster-snapshot-message/new-table-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/restore-table-from-cluster-snapshot-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.restore-table-from-cluster-snapshot-message/ClusterIdentifier :portkey.aws.redshift.-2012-12-01.restore-table-from-cluster-snapshot-message/SnapshotIdentifier :portkey.aws.redshift.-2012-12-01.restore-table-from-cluster-snapshot-message/SourceDatabaseName :portkey.aws.redshift.-2012-12-01.restore-table-from-cluster-snapshot-message/SourceTableName :portkey.aws.redshift.-2012-12-01.restore-table-from-cluster-snapshot-message/NewTableName] :opt-un [:portkey.aws.redshift.-2012-12-01.restore-table-from-cluster-snapshot-message/SourceSchemaName :portkey.aws.redshift.-2012-12-01.restore-table-from-cluster-snapshot-message/TargetDatabaseName :portkey.aws.redshift.-2012-12-01.restore-table-from-cluster-snapshot-message/TargetSchemaName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-snapshot-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-iam-roles-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-iam-roles-message/add-iam-roles (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/iam-role-arn-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-cluster-iam-roles-message/remove-iam-roles (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/iam-role-arn-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/modify-cluster-iam-roles-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.modify-cluster-iam-roles-message/ClusterIdentifier] :opt-un [:portkey.aws.redshift.-2012-12-01.modify-cluster-iam-roles-message/AddIamRoles :portkey.aws.redshift.-2012-12-01.modify-cluster-iam-roles-message/RemoveIamRoles] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/unsupported-operation-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-versions-message/cluster-version (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-versions-message/cluster-parameter-group-family (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-versions-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.describe-cluster-versions-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/describe-cluster-versions-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.describe-cluster-versions-message/ClusterVersion :portkey.aws.redshift.-2012-12-01.describe-cluster-versions-message/ClusterParameterGroupFamily :portkey.aws.redshift.-2012-12-01.describe-cluster-versions-message/MaxRecords :portkey.aws.redshift.-2012-12-01.describe-cluster-versions-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-snapshot-copy-grant-message/snapshot-copy-grant-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-snapshot-copy-grant-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-snapshot-copy-grant-message/tags (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/create-snapshot-copy-grant-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.create-snapshot-copy-grant-message/SnapshotCopyGrantName] :opt-un [:portkey.aws.redshift.-2012-12-01.create-snapshot-copy-grant-message/KmsKeyId :portkey.aws.redshift.-2012-12-01.create-snapshot-copy-grant-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/create-hsm-configuration-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/HsmConfiguration] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.purchase-reserved-node-offering-message/reserved-node-offering-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.purchase-reserved-node-offering-message/node-count (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/purchase-reserved-node-offering-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.purchase-reserved-node-offering-message/ReservedNodeOfferingId] :opt-un [:portkey.aws.redshift.-2012-12-01.purchase-reserved-node-offering-message/NodeCount] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-security-group/cluster-security-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-security-group/description (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-security-group/ec2-security-groups (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/ec2-security-group-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-security-group/ipranges (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/iprange-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-security-group/tags (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-security-group (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.cluster-security-group/ClusterSecurityGroupName :portkey.aws.redshift.-2012-12-01.cluster-security-group/Description :portkey.aws.redshift.-2012-12-01.cluster-security-group/EC2SecurityGroups :portkey.aws.redshift.-2012-12-01.cluster-security-group/IPRanges :portkey.aws.redshift.-2012-12-01.cluster-security-group/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.pending-modified-values/enhanced-vpc-routing (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.pending-modified-values/publicly-accessible (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.pending-modified-values/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.pending-modified-values/number-of-nodes (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.pending-modified-values/cluster-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.pending-modified-values/master-user-password (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.pending-modified-values/cluster-version (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.pending-modified-values/automated-snapshot-retention-period (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.pending-modified-values/node-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/pending-modified-values (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.pending-modified-values/EnhancedVpcRouting :portkey.aws.redshift.-2012-12-01.pending-modified-values/PubliclyAccessible :portkey.aws.redshift.-2012-12-01.pending-modified-values/ClusterIdentifier :portkey.aws.redshift.-2012-12-01.pending-modified-values/NumberOfNodes :portkey.aws.redshift.-2012-12-01.pending-modified-values/ClusterType :portkey.aws.redshift.-2012-12-01.pending-modified-values/MasterUserPassword :portkey.aws.redshift.-2012-12-01.pending-modified-values/ClusterVersion :portkey.aws.redshift.-2012-12-01.pending-modified-values/AutomatedSnapshotRetentionPeriod :portkey.aws.redshift.-2012-12-01.pending-modified-values/NodeType] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/subnet-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/subnet))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.authorize-snapshot-access-message/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.authorize-snapshot-access-message/snapshot-cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.authorize-snapshot-access-message/account-with-restore-access (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/authorize-snapshot-access-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.authorize-snapshot-access-message/SnapshotIdentifier :portkey.aws.redshift.-2012-12-01.authorize-snapshot-access-message/AccountWithRestoreAccess] :opt-un [:portkey.aws.redshift.-2012-12-01.authorize-snapshot-access-message/SnapshotClusterIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reset-cluster-parameter-group-message/parameter-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reset-cluster-parameter-group-message/reset-all-parameters (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.reset-cluster-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/parameters-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/reset-cluster-parameter-group-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.reset-cluster-parameter-group-message/ParameterGroupName] :opt-un [:portkey.aws.redshift.-2012-12-01.reset-cluster-parameter-group-message/ResetAllParameters :portkey.aws.redshift.-2012-12-01.reset-cluster-parameter-group-message/Parameters] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/enable-snapshot-copy-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01/Cluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.cluster-parameter-groups-message/parameter-groups (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/parameter-group-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/cluster-parameter-groups-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.cluster-parameter-groups-message/Marker :portkey.aws.redshift.-2012-12-01.cluster-parameter-groups-message/ParameterGroups] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot-copy-grant/snapshot-copy-grant-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot-copy-grant/kms-key-id (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.snapshot-copy-grant/tags (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/snapshot-copy-grant (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.snapshot-copy-grant/SnapshotCopyGrantName :portkey.aws.redshift.-2012-12-01.snapshot-copy-grant/KmsKeyId :portkey.aws.redshift.-2012-12-01.snapshot-copy-grant/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.delete-hsm-configuration-message/hsm-configuration-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/delete-hsm-configuration-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.delete-hsm-configuration-message/HsmConfigurationIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-security-group-message/cluster-security-group-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-security-group-message/description (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.create-cluster-security-group-message/tags (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/create-cluster-security-group-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.create-cluster-security-group-message/ClusterSecurityGroupName :portkey.aws.redshift.-2012-12-01.create-cluster-security-group-message/Description] :opt-un [:portkey.aws.redshift.-2012-12-01.create-cluster-security-group-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/parameter-group-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/cluster-parameter-group))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/tagged-resource-list (clojure.spec.alpha/coll-of :portkey.aws.redshift.-2012-12-01/tagged-resource))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.table-restore-status-message/table-restore-status-details (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/table-restore-status-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.table-restore-status-message/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/table-restore-status-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.table-restore-status-message/TableRestoreStatusDetails :portkey.aws.redshift.-2012-12-01.table-restore-status-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.get-cluster-credentials-message/db-user (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.get-cluster-credentials-message/db-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.get-cluster-credentials-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.get-cluster-credentials-message/duration-seconds (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.get-cluster-credentials-message/auto-create (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.get-cluster-credentials-message/db-groups (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/db-group-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/get-cluster-credentials-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.get-cluster-credentials-message/DbUser :portkey.aws.redshift.-2012-12-01.get-cluster-credentials-message/ClusterIdentifier] :opt-un [:portkey.aws.redshift.-2012-12-01.get-cluster-credentials-message/DbName :portkey.aws.redshift.-2012-12-01.get-cluster-credentials-message/DurationSeconds :portkey.aws.redshift.-2012-12-01.get-cluster-credentials-message/AutoCreate :portkey.aws.redshift.-2012-12-01.get-cluster-credentials-message/DbGroups] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-event-subscription-message/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-event-subscription-message/source-type (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-event-subscription-message/source-ids (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/source-ids-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-event-subscription-message/event-categories (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-event-subscription-message/severity (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.modify-event-subscription-message/enabled (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/modify-event-subscription-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.-2012-12-01.modify-event-subscription-message/SubscriptionName] :opt-un [:portkey.aws.redshift.-2012-12-01.modify-event-subscription-message/SnsTopicArn :portkey.aws.redshift.-2012-12-01.modify-event-subscription-message/SourceType :portkey.aws.redshift.-2012-12-01.modify-event-subscription-message/SourceIds :portkey.aws.redshift.-2012-12-01.modify-event-subscription-message/EventCategories :portkey.aws.redshift.-2012-12-01.modify-event-subscription-message/Severity :portkey.aws.redshift.-2012-12-01.modify-event-subscription-message/Enabled] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.default-cluster-parameters/parameter-group-family (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.default-cluster-parameters/marker (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/string))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01.default-cluster-parameters/parameters (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/parameters-list))
(clojure.spec.alpha/def :portkey.aws.redshift.-2012-12-01/default-cluster-parameters (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.-2012-12-01.default-cluster-parameters/ParameterGroupFamily :portkey.aws.redshift.-2012-12-01.default-cluster-parameters/Marker :portkey.aws.redshift.-2012-12-01.default-cluster-parameters/Parameters] :locations {}))

(clojure.core/defn describe-cluster-parameters "Returns a detailed list of parameters contained within the specified Amazon\nRedshift parameter group. For each parameter the response includes information\nsuch as parameter name, description, data type, value, whether the parameter\nvalue is modifiable, and so on.\n You can specify source filter to retrieve parameters of only specific type. For\nexample, to retrieve parameters that were modified by a user action such as from\nModifyClusterParameterGroup, you can specify source equal to user.\n For more information about parameters and parameter groups, go to Amazon\nRedshift Parameter Groups\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html)\nin the Amazon Redshift Cluster Management Guide." ([describe-cluster-parameters-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-cluster-parameters-message "DescribeClusterParameters" describe-cluster-parameters-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/describe-cluster-parameters-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-details {"ClusterParameterGroupNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-not-found-fault}))))
(clojure.spec.alpha/fdef describe-cluster-parameters :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/describe-cluster-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-details))

(clojure.core/defn enable-snapshot-copy "Enables the automatic copy of snapshots from one region to another region for a\nspecified cluster." ([enable-snapshot-copy-message] (clojure.core/let [req<-input__36755__auto__ (req<-enable-snapshot-copy-message "EnableSnapshotCopy" enable-snapshot-copy-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/enable-snapshot-copy-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/enable-snapshot-copy-result {"DependentServiceRequestThrottlingFault" :portkey.aws.redshift.-2012-12-01/dependent-service-request-throttling-fault, "CopyToRegionDisabledFault" :portkey.aws.redshift.-2012-12-01/copy-to-region-disabled-fault, "UnauthorizedOperation" :portkey.aws.redshift.-2012-12-01/unauthorized-operation, "SnapshotCopyGrantNotFoundFault" :portkey.aws.redshift.-2012-12-01/snapshot-copy-grant-not-found-fault, "LimitExceededFault" :portkey.aws.redshift.-2012-12-01/limit-exceeded-fault, "SnapshotCopyAlreadyEnabledFault" :portkey.aws.redshift.-2012-12-01/snapshot-copy-already-enabled-fault, "IncompatibleOrderableOptions" :portkey.aws.redshift.-2012-12-01/incompatible-orderable-options, "InvalidClusterStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-state-fault, "ClusterNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-not-found-fault, "UnknownSnapshotCopyRegionFault" :portkey.aws.redshift.-2012-12-01/unknown-snapshot-copy-region-fault}))))
(clojure.spec.alpha/fdef enable-snapshot-copy :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/enable-snapshot-copy-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/enable-snapshot-copy-result))

(clojure.core/defn disable-snapshot-copy "Disables the automatic copying of snapshots from one region to another region\nfor a specified cluster.\n If your cluster and its snapshots are encrypted using a customer master key\n(CMK) from AWS KMS, use DeleteSnapshotCopyGrant to delete the grant that grants\nAmazon Redshift permission to the CMK in the destination region." ([disable-snapshot-copy-message] (clojure.core/let [req<-input__36755__auto__ (req<-disable-snapshot-copy-message "DisableSnapshotCopy" disable-snapshot-copy-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/disable-snapshot-copy-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/disable-snapshot-copy-result {"ClusterNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-not-found-fault, "SnapshotCopyAlreadyDisabledFault" :portkey.aws.redshift.-2012-12-01/snapshot-copy-already-disabled-fault, "InvalidClusterStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-state-fault, "UnauthorizedOperation" :portkey.aws.redshift.-2012-12-01/unauthorized-operation}))))
(clojure.spec.alpha/fdef disable-snapshot-copy :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/disable-snapshot-copy-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/disable-snapshot-copy-result))

(clojure.core/defn create-cluster "Creates a new cluster.\n To create the cluster in Virtual Private Cloud (VPC), you must provide a\ncluster subnet group name. The cluster subnet group identifies the subnets of\nyour VPC that Amazon Redshift uses when creating the cluster. For more\ninformation about managing clusters, go to Amazon Redshift Clusters\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html) in\nthe Amazon Redshift Cluster Management Guide." ([create-cluster-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-cluster-message "CreateCluster" create-cluster-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/create-cluster-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/create-cluster-result {"DependentServiceRequestThrottlingFault" :portkey.aws.redshift.-2012-12-01/dependent-service-request-throttling-fault, "InsufficientClusterCapacityFault" :portkey.aws.redshift.-2012-12-01/insufficient-cluster-capacity-fault, "NumberOfNodesPerClusterLimitExceededFault" :portkey.aws.redshift.-2012-12-01/number-of-nodes-per-cluster-limit-exceeded-fault, "InvalidElasticIpFault" :portkey.aws.redshift.-2012-12-01/invalid-elastic-ip-fault, "ClusterAlreadyExistsFault" :portkey.aws.redshift.-2012-12-01/cluster-already-exists-fault, "InvalidVPCNetworkStateFault" :portkey.aws.redshift.-2012-12-01/invalidvpcnetwork-state-fault, "UnauthorizedOperation" :portkey.aws.redshift.-2012-12-01/unauthorized-operation, "InvalidSubnet" :portkey.aws.redshift.-2012-12-01/invalid-subnet, "HsmClientCertificateNotFoundFault" :portkey.aws.redshift.-2012-12-01/hsm-client-certificate-not-found-fault, "ClusterSubnetGroupNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-subnet-group-not-found-fault, "HsmConfigurationNotFoundFault" :portkey.aws.redshift.-2012-12-01/hsm-configuration-not-found-fault, "ClusterQuotaExceededFault" :portkey.aws.redshift.-2012-12-01/cluster-quota-exceeded-fault, "InvalidClusterSubnetGroupStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-subnet-group-state-fault, "LimitExceededFault" :portkey.aws.redshift.-2012-12-01/limit-exceeded-fault, "ClusterParameterGroupNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-not-found-fault, "ClusterSecurityGroupNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-security-group-not-found-fault, "InvalidTagFault" :portkey.aws.redshift.-2012-12-01/invalid-tag-fault, "NumberOfNodesQuotaExceededFault" :portkey.aws.redshift.-2012-12-01/number-of-nodes-quota-exceeded-fault, "TagLimitExceededFault" :portkey.aws.redshift.-2012-12-01/tag-limit-exceeded-fault}))))
(clojure.spec.alpha/fdef create-cluster :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/create-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/create-cluster-result))

(clojure.core/defn describe-cluster-snapshots "Returns one or more snapshot objects, which contain metadata about your cluster\nsnapshots. By default, this operation returns information about all snapshots of\nall clusters that are owned by you AWS customer account. No information is\nreturned for snapshots owned by inactive AWS customer accounts.\n If you specify both tag keys and tag values in the same request, Amazon\nRedshift returns all snapshots that match any combination of the specified keys\nand values. For example, if you have owner and environment for tag keys, and\nadmin and test for tag values, all snapshots that have any combination of those\nvalues are returned. Only snapshots that you own are returned in the response;\nshared snapshots are not returned with the tag key and tag value request\nparameters.\n If both tag keys and values are omitted from the request, snapshots are\nreturned regardless of whether they have tag keys or values associated with\nthem." ([] (describe-cluster-snapshots {})) ([describe-cluster-snapshots-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-cluster-snapshots-message "DescribeClusterSnapshots" describe-cluster-snapshots-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/describe-cluster-snapshots-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/snapshot-message {"ClusterNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-not-found-fault, "ClusterSnapshotNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-snapshot-not-found-fault, "InvalidTagFault" :portkey.aws.redshift.-2012-12-01/invalid-tag-fault}))))
(clojure.spec.alpha/fdef describe-cluster-snapshots :args (clojure.spec.alpha/? :portkey.aws.redshift.-2012-12-01/describe-cluster-snapshots-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/snapshot-message))

(clojure.core/defn create-hsm-client-certificate "Creates an HSM client certificate that an Amazon Redshift cluster will use to\nconnect to the client's HSM in order to store and retrieve the keys used to\nencrypt the cluster databases.\n The command returns a public key, which you must store in the HSM. In addition\nto creating the HSM certificate, you must create an Amazon Redshift HSM\nconfiguration that provides a cluster the information needed to store and use\nencryption keys in the HSM. For more information, go to Hardware Security\nModules (http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-HSM.html)\nin the Amazon Redshift Cluster Management Guide." ([create-hsm-client-certificate-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-hsm-client-certificate-message "CreateHsmClientCertificate" create-hsm-client-certificate-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/create-hsm-client-certificate-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/create-hsm-client-certificate-result {"HsmClientCertificateAlreadyExistsFault" :portkey.aws.redshift.-2012-12-01/hsm-client-certificate-already-exists-fault, "HsmClientCertificateQuotaExceededFault" :portkey.aws.redshift.-2012-12-01/hsm-client-certificate-quota-exceeded-fault, "TagLimitExceededFault" :portkey.aws.redshift.-2012-12-01/tag-limit-exceeded-fault, "InvalidTagFault" :portkey.aws.redshift.-2012-12-01/invalid-tag-fault}))))
(clojure.spec.alpha/fdef create-hsm-client-certificate :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/create-hsm-client-certificate-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/create-hsm-client-certificate-result))

(clojure.core/defn delete-tags "Deletes a tag or tags from a resource. You must provide the ARN of the resource\nfrom which you want to delete the tag or tags." ([delete-tags-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-tags-message "DeleteTags" delete-tags-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/delete-tags-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"ResourceNotFoundFault" :portkey.aws.redshift.-2012-12-01/resource-not-found-fault, "InvalidTagFault" :portkey.aws.redshift.-2012-12-01/invalid-tag-fault}))))
(clojure.spec.alpha/fdef delete-tags :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/delete-tags-message) :ret clojure.core/true?)

(clojure.core/defn describe-cluster-subnet-groups "Returns one or more cluster subnet group objects, which contain metadata about\nyour cluster subnet groups. By default, this operation returns information about\nall cluster subnet groups that are defined in you AWS account.\n If you specify both tag keys and tag values in the same request, Amazon\nRedshift returns all subnet groups that match any combination of the specified\nkeys and values. For example, if you have owner and environment for tag keys,\nand admin and test for tag values, all subnet groups that have any combination\nof those values are returned.\n If both tag keys and values are omitted from the request, subnet groups are\nreturned regardless of whether they have tag keys or values associated with\nthem." ([] (describe-cluster-subnet-groups {})) ([describe-cluster-subnet-groups-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-cluster-subnet-groups-message "DescribeClusterSubnetGroups" describe-cluster-subnet-groups-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/describe-cluster-subnet-groups-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/cluster-subnet-group-message {"ClusterSubnetGroupNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-subnet-group-not-found-fault, "InvalidTagFault" :portkey.aws.redshift.-2012-12-01/invalid-tag-fault}))))
(clojure.spec.alpha/fdef describe-cluster-subnet-groups :args (clojure.spec.alpha/? :portkey.aws.redshift.-2012-12-01/describe-cluster-subnet-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/cluster-subnet-group-message))

(clojure.core/defn delete-cluster-subnet-group "Deletes the specified cluster subnet group." ([delete-cluster-subnet-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-cluster-subnet-group-message "DeleteClusterSubnetGroup" delete-cluster-subnet-group-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/delete-cluster-subnet-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"InvalidClusterSubnetGroupStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-subnet-group-state-fault, "InvalidClusterSubnetStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-subnet-state-fault, "ClusterSubnetGroupNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-subnet-group-not-found-fault}))))
(clojure.spec.alpha/fdef delete-cluster-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/delete-cluster-subnet-group-message) :ret clojure.core/true?)

(clojure.core/defn describe-events "Returns events related to clusters, security groups, snapshots, and parameter\ngroups for the past 14 days. Events specific to a particular cluster, security\ngroup, snapshot or parameter group can be obtained by providing the name as a\nparameter. By default, the past hour of events are returned." ([] (describe-events {})) ([describe-events-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-events-message "DescribeEvents" describe-events-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/describe-events-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/events-message {}))))
(clojure.spec.alpha/fdef describe-events :args (clojure.spec.alpha/? :portkey.aws.redshift.-2012-12-01/describe-events-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/events-message))

(clojure.core/defn rotate-encryption-key "Rotates the encryption keys for a cluster." ([rotate-encryption-key-message] (clojure.core/let [req<-input__36755__auto__ (req<-rotate-encryption-key-message "RotateEncryptionKey" rotate-encryption-key-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/rotate-encryption-key-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/rotate-encryption-key-result {"ClusterNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-not-found-fault, "InvalidClusterStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-state-fault, "DependentServiceRequestThrottlingFault" :portkey.aws.redshift.-2012-12-01/dependent-service-request-throttling-fault}))))
(clojure.spec.alpha/fdef rotate-encryption-key :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/rotate-encryption-key-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/rotate-encryption-key-result))

(clojure.core/defn describe-hsm-configurations "Returns information about the specified Amazon Redshift HSM configuration. If no\nconfiguration ID is specified, returns information about all the HSM\nconfigurations owned by your AWS customer account.\n If you specify both tag keys and tag values in the same request, Amazon\nRedshift returns all HSM connections that match any combination of the specified\nkeys and values. For example, if you have owner and environment for tag keys,\nand admin and test for tag values, all HSM connections that have any combination\nof those values are returned.\n If both tag keys and values are omitted from the request, HSM connections are\nreturned regardless of whether they have tag keys or values associated with\nthem." ([] (describe-hsm-configurations {})) ([describe-hsm-configurations-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-hsm-configurations-message "DescribeHsmConfigurations" describe-hsm-configurations-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/describe-hsm-configurations-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/hsm-configuration-message {"HsmConfigurationNotFoundFault" :portkey.aws.redshift.-2012-12-01/hsm-configuration-not-found-fault, "InvalidTagFault" :portkey.aws.redshift.-2012-12-01/invalid-tag-fault}))))
(clojure.spec.alpha/fdef describe-hsm-configurations :args (clojure.spec.alpha/? :portkey.aws.redshift.-2012-12-01/describe-hsm-configurations-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/hsm-configuration-message))

(clojure.core/defn revoke-snapshot-access "Removes the ability of the specified AWS customer account to restore the\nspecified snapshot. If the account is currently restoring the snapshot, the\nrestore will run to completion.\n For more information about working with snapshots, go to Amazon Redshift\nSnapshots\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html) in\nthe Amazon Redshift Cluster Management Guide." ([revoke-snapshot-access-message] (clojure.core/let [req<-input__36755__auto__ (req<-revoke-snapshot-access-message "RevokeSnapshotAccess" revoke-snapshot-access-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/revoke-snapshot-access-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/revoke-snapshot-access-result {"AccessToSnapshotDeniedFault" :portkey.aws.redshift.-2012-12-01/access-to-snapshot-denied-fault, "AuthorizationNotFoundFault" :portkey.aws.redshift.-2012-12-01/authorization-not-found-fault, "ClusterSnapshotNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-snapshot-not-found-fault}))))
(clojure.spec.alpha/fdef revoke-snapshot-access :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/revoke-snapshot-access-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/revoke-snapshot-access-result))

(clojure.core/defn create-tags "Adds one or more tags to a specified resource.\n A resource can have up to 10 tags. If you try to create more than 10 tags for a\nresource, you will receive an error and the attempt will fail.\n If you specify a key that already exists for the resource, the value for that\nkey will be updated with the new value." ([create-tags-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-tags-message "CreateTags" create-tags-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/create-tags-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"TagLimitExceededFault" :portkey.aws.redshift.-2012-12-01/tag-limit-exceeded-fault, "ResourceNotFoundFault" :portkey.aws.redshift.-2012-12-01/resource-not-found-fault, "InvalidTagFault" :portkey.aws.redshift.-2012-12-01/invalid-tag-fault}))))
(clojure.spec.alpha/fdef create-tags :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/create-tags-message) :ret clojure.core/true?)

(clojure.core/defn restore-from-cluster-snapshot "Creates a new cluster from a snapshot. By default, Amazon Redshift creates the\nresulting cluster with the same configuration as the original cluster from which\nthe snapshot was created, except that the new cluster is created with the\ndefault cluster security and parameter groups. After Amazon Redshift creates the\ncluster, you can use the ModifyCluster API to associate a different security\ngroup and different parameter group with the restored cluster. If you are using\na DS node type, you can also choose to change to another DS node type of the\nsame size during restore.\n If you restore a cluster into a VPC, you must provide a cluster subnet group\nwhere you want the cluster restored.\n For more information about working with snapshots, go to Amazon Redshift\nSnapshots\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html) in\nthe Amazon Redshift Cluster Management Guide." ([restore-from-cluster-snapshot-message] (clojure.core/let [req<-input__36755__auto__ (req<-restore-from-cluster-snapshot-message "RestoreFromClusterSnapshot" restore-from-cluster-snapshot-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/restore-from-cluster-snapshot-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/restore-from-cluster-snapshot-result {"DependentServiceRequestThrottlingFault" :portkey.aws.redshift.-2012-12-01/dependent-service-request-throttling-fault, "InsufficientClusterCapacityFault" :portkey.aws.redshift.-2012-12-01/insufficient-cluster-capacity-fault, "NumberOfNodesPerClusterLimitExceededFault" :portkey.aws.redshift.-2012-12-01/number-of-nodes-per-cluster-limit-exceeded-fault, "InvalidElasticIpFault" :portkey.aws.redshift.-2012-12-01/invalid-elastic-ip-fault, "ClusterAlreadyExistsFault" :portkey.aws.redshift.-2012-12-01/cluster-already-exists-fault, "InvalidVPCNetworkStateFault" :portkey.aws.redshift.-2012-12-01/invalidvpcnetwork-state-fault, "UnauthorizedOperation" :portkey.aws.redshift.-2012-12-01/unauthorized-operation, "ClusterSnapshotNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-snapshot-not-found-fault, "InvalidSubnet" :portkey.aws.redshift.-2012-12-01/invalid-subnet, "HsmClientCertificateNotFoundFault" :portkey.aws.redshift.-2012-12-01/hsm-client-certificate-not-found-fault, "ClusterSubnetGroupNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-subnet-group-not-found-fault, "HsmConfigurationNotFoundFault" :portkey.aws.redshift.-2012-12-01/hsm-configuration-not-found-fault, "ClusterQuotaExceededFault" :portkey.aws.redshift.-2012-12-01/cluster-quota-exceeded-fault, "InvalidClusterSubnetGroupStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-subnet-group-state-fault, "LimitExceededFault" :portkey.aws.redshift.-2012-12-01/limit-exceeded-fault, "ClusterParameterGroupNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-not-found-fault, "InvalidClusterSnapshotStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-snapshot-state-fault, "ClusterSecurityGroupNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-security-group-not-found-fault, "InvalidRestoreFault" :portkey.aws.redshift.-2012-12-01/invalid-restore-fault, "NumberOfNodesQuotaExceededFault" :portkey.aws.redshift.-2012-12-01/number-of-nodes-quota-exceeded-fault, "AccessToSnapshotDeniedFault" :portkey.aws.redshift.-2012-12-01/access-to-snapshot-denied-fault}))))
(clojure.spec.alpha/fdef restore-from-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/restore-from-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/restore-from-cluster-snapshot-result))

(clojure.core/defn modify-cluster-parameter-group "Modifies the parameters of a parameter group.\n For more information about parameters and parameter groups, go to Amazon\nRedshift Parameter Groups\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html)\nin the Amazon Redshift Cluster Management Guide." ([modify-cluster-parameter-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-modify-cluster-parameter-group-message "ModifyClusterParameterGroup" modify-cluster-parameter-group-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/modify-cluster-parameter-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-name-message {"ClusterParameterGroupNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-not-found-fault, "InvalidClusterParameterGroupStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-parameter-group-state-fault}))))
(clojure.spec.alpha/fdef modify-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/modify-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-name-message))

(clojure.core/defn describe-table-restore-status "Lists the status of one or more table restore requests made using the\nRestoreTableFromClusterSnapshot API action. If you don't specify a value for the\nTableRestoreRequestId parameter, then DescribeTableRestoreStatus returns the\nstatus of all table restore requests ordered by the date and time of the request\nin ascending order. Otherwise DescribeTableRestoreStatus returns the status of\nthe table specified by TableRestoreRequestId." ([] (describe-table-restore-status {})) ([describe-table-restore-status-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-table-restore-status-message "DescribeTableRestoreStatus" describe-table-restore-status-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/describe-table-restore-status-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/table-restore-status-message {"TableRestoreNotFoundFault" :portkey.aws.redshift.-2012-12-01/table-restore-not-found-fault, "ClusterNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-not-found-fault}))))
(clojure.spec.alpha/fdef describe-table-restore-status :args (clojure.spec.alpha/? :portkey.aws.redshift.-2012-12-01/describe-table-restore-status-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/table-restore-status-message))

(clojure.core/defn revoke-cluster-security-group-ingress "Revokes an ingress rule in an Amazon Redshift security group for a previously\nauthorized IP range or Amazon EC2 security group. To add an ingress rule, see\nAuthorizeClusterSecurityGroupIngress. For information about managing security\ngroups, go to Amazon Redshift Cluster Security Groups\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html)\nin the Amazon Redshift Cluster Management Guide." ([revoke-cluster-security-group-ingress-message] (clojure.core/let [req<-input__36755__auto__ (req<-revoke-cluster-security-group-ingress-message "RevokeClusterSecurityGroupIngress" revoke-cluster-security-group-ingress-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/revoke-cluster-security-group-ingress-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/revoke-cluster-security-group-ingress-result {"ClusterSecurityGroupNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-security-group-not-found-fault, "AuthorizationNotFoundFault" :portkey.aws.redshift.-2012-12-01/authorization-not-found-fault, "InvalidClusterSecurityGroupStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-security-group-state-fault}))))
(clojure.spec.alpha/fdef revoke-cluster-security-group-ingress :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/revoke-cluster-security-group-ingress-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/revoke-cluster-security-group-ingress-result))

(clojure.core/defn create-cluster-snapshot "Creates a manual snapshot of the specified cluster. The cluster must be in the\navailable state.\n For more information about working with snapshots, go to Amazon Redshift\nSnapshots\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html) in\nthe Amazon Redshift Cluster Management Guide." ([create-cluster-snapshot-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-cluster-snapshot-message "CreateClusterSnapshot" create-cluster-snapshot-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/create-cluster-snapshot-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/create-cluster-snapshot-result {"ClusterSnapshotAlreadyExistsFault" :portkey.aws.redshift.-2012-12-01/cluster-snapshot-already-exists-fault, "InvalidClusterStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-state-fault, "ClusterNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-not-found-fault, "ClusterSnapshotQuotaExceededFault" :portkey.aws.redshift.-2012-12-01/cluster-snapshot-quota-exceeded-fault, "TagLimitExceededFault" :portkey.aws.redshift.-2012-12-01/tag-limit-exceeded-fault, "InvalidTagFault" :portkey.aws.redshift.-2012-12-01/invalid-tag-fault}))))
(clojure.spec.alpha/fdef create-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/create-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/create-cluster-snapshot-result))

(clojure.core/defn create-hsm-configuration "Creates an HSM configuration that contains the information required by an Amazon\nRedshift cluster to store and use database encryption keys in a Hardware\nSecurity Module (HSM). After creating the HSM configuration, you can specify it\nas a parameter when creating a cluster. The cluster will then store its\nencryption keys in the HSM.\n In addition to creating an HSM configuration, you must also create an HSM\nclient certificate. For more information, go to Hardware Security Modules\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-HSM.html) in the\nAmazon Redshift Cluster Management Guide." ([create-hsm-configuration-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-hsm-configuration-message "CreateHsmConfiguration" create-hsm-configuration-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/create-hsm-configuration-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/create-hsm-configuration-result {"HsmConfigurationAlreadyExistsFault" :portkey.aws.redshift.-2012-12-01/hsm-configuration-already-exists-fault, "HsmConfigurationQuotaExceededFault" :portkey.aws.redshift.-2012-12-01/hsm-configuration-quota-exceeded-fault, "TagLimitExceededFault" :portkey.aws.redshift.-2012-12-01/tag-limit-exceeded-fault, "InvalidTagFault" :portkey.aws.redshift.-2012-12-01/invalid-tag-fault}))))
(clojure.spec.alpha/fdef create-hsm-configuration :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/create-hsm-configuration-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/create-hsm-configuration-result))

(clojure.core/defn delete-hsm-client-certificate "Deletes the specified HSM client certificate." ([delete-hsm-client-certificate-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-hsm-client-certificate-message "DeleteHsmClientCertificate" delete-hsm-client-certificate-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/delete-hsm-client-certificate-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"InvalidHsmClientCertificateStateFault" :portkey.aws.redshift.-2012-12-01/invalid-hsm-client-certificate-state-fault, "HsmClientCertificateNotFoundFault" :portkey.aws.redshift.-2012-12-01/hsm-client-certificate-not-found-fault}))))
(clojure.spec.alpha/fdef delete-hsm-client-certificate :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/delete-hsm-client-certificate-message) :ret clojure.core/true?)

(clojure.core/defn describe-clusters "Returns properties of provisioned clusters including general cluster properties,\ncluster database properties, maintenance and backup properties, and security and\naccess properties. This operation supports pagination. For more information\nabout managing clusters, go to Amazon Redshift Clusters\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html) in\nthe Amazon Redshift Cluster Management Guide.\n If you specify both tag keys and tag values in the same request, Amazon\nRedshift returns all clusters that match any combination of the specified keys\nand values. For example, if you have owner and environment for tag keys, and\nadmin and test for tag values, all clusters that have any combination of those\nvalues are returned.\n If both tag keys and values are omitted from the request, clusters are returned\nregardless of whether they have tag keys or values associated with them." ([] (describe-clusters {})) ([describe-clusters-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-clusters-message "DescribeClusters" describe-clusters-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/describe-clusters-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/clusters-message {"ClusterNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-not-found-fault, "InvalidTagFault" :portkey.aws.redshift.-2012-12-01/invalid-tag-fault}))))
(clojure.spec.alpha/fdef describe-clusters :args (clojure.spec.alpha/? :portkey.aws.redshift.-2012-12-01/describe-clusters-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/clusters-message))

(clojure.core/defn disable-logging "Stops logging information, such as queries and connection attempts, for the\nspecified Amazon Redshift cluster." ([disable-logging-message] (clojure.core/let [req<-input__36755__auto__ (req<-disable-logging-message "DisableLogging" disable-logging-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/disable-logging-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/logging-status {"ClusterNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-not-found-fault}))))
(clojure.spec.alpha/fdef disable-logging :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/disable-logging-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/logging-status))

(clojure.core/defn delete-cluster-snapshot "Deletes the specified manual snapshot. The snapshot must be in the available\nstate, with no other users authorized to access the snapshot.\n Unlike automated snapshots, manual snapshots are retained even after you delete\nyour cluster. Amazon Redshift does not delete your manual snapshots. You must\ndelete manual snapshot explicitly to avoid getting charged. If other accounts\nare authorized to access the snapshot, you must revoke all of the authorizations\nbefore you can delete the snapshot." ([delete-cluster-snapshot-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-cluster-snapshot-message "DeleteClusterSnapshot" delete-cluster-snapshot-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/delete-cluster-snapshot-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/delete-cluster-snapshot-result {"InvalidClusterSnapshotStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-snapshot-state-fault, "ClusterSnapshotNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-snapshot-not-found-fault}))))
(clojure.spec.alpha/fdef delete-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/delete-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/delete-cluster-snapshot-result))

(clojure.core/defn create-snapshot-copy-grant "Creates a snapshot copy grant that permits Amazon Redshift to use a customer\nmaster key (CMK) from AWS Key Management Service (AWS KMS) to encrypt copied\nsnapshots in a destination region.\n For more information about managing snapshot copy grants, go to Amazon Redshift\nDatabase Encryption\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html)\nin the Amazon Redshift Cluster Management Guide." ([create-snapshot-copy-grant-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-snapshot-copy-grant-message "CreateSnapshotCopyGrant" create-snapshot-copy-grant-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/create-snapshot-copy-grant-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/create-snapshot-copy-grant-result {"SnapshotCopyGrantAlreadyExistsFault" :portkey.aws.redshift.-2012-12-01/snapshot-copy-grant-already-exists-fault, "SnapshotCopyGrantQuotaExceededFault" :portkey.aws.redshift.-2012-12-01/snapshot-copy-grant-quota-exceeded-fault, "LimitExceededFault" :portkey.aws.redshift.-2012-12-01/limit-exceeded-fault, "TagLimitExceededFault" :portkey.aws.redshift.-2012-12-01/tag-limit-exceeded-fault, "InvalidTagFault" :portkey.aws.redshift.-2012-12-01/invalid-tag-fault, "DependentServiceRequestThrottlingFault" :portkey.aws.redshift.-2012-12-01/dependent-service-request-throttling-fault}))))
(clojure.spec.alpha/fdef create-snapshot-copy-grant :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/create-snapshot-copy-grant-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/create-snapshot-copy-grant-result))

(clojure.core/defn describe-tags "Returns a list of tags. You can return tags from a specific resource by\nspecifying an ARN, or you can return all tags for a given type of resource, such\nas clusters, snapshots, and so on.\n The following are limitations for DescribeTags:\n * You cannot specify an ARN and a resource-type value together in the same\nrequest.\n * You cannot use the MaxRecords and Marker parameters together with the ARN\nparameter.\n * The MaxRecords parameter can be a range from 10 to 50 results to return in a\nrequest.\n If you specify both tag keys and tag values in the same request, Amazon\nRedshift returns all resources that match any combination of the specified keys\nand values. For example, if you have owner and environment for tag keys, and\nadmin and test for tag values, all resources that have any combination of those\nvalues are returned.\n If both tag keys and values are omitted from the request, resources are\nreturned regardless of whether they have tag keys or values associated with\nthem." ([] (describe-tags {})) ([describe-tags-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-tags-message "DescribeTags" describe-tags-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/describe-tags-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/tagged-resource-list-message {"ResourceNotFoundFault" :portkey.aws.redshift.-2012-12-01/resource-not-found-fault, "InvalidTagFault" :portkey.aws.redshift.-2012-12-01/invalid-tag-fault}))))
(clojure.spec.alpha/fdef describe-tags :args (clojure.spec.alpha/? :portkey.aws.redshift.-2012-12-01/describe-tags-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/tagged-resource-list-message))

(clojure.core/defn modify-snapshot-copy-retention-period "Modifies the number of days to retain automated snapshots in the destination\nregion after they are copied from the source region." ([modify-snapshot-copy-retention-period-message] (clojure.core/let [req<-input__36755__auto__ (req<-modify-snapshot-copy-retention-period-message "ModifySnapshotCopyRetentionPeriod" modify-snapshot-copy-retention-period-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/modify-snapshot-copy-retention-period-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/modify-snapshot-copy-retention-period-result {"ClusterNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-not-found-fault, "SnapshotCopyDisabledFault" :portkey.aws.redshift.-2012-12-01/snapshot-copy-disabled-fault, "UnauthorizedOperation" :portkey.aws.redshift.-2012-12-01/unauthorized-operation, "InvalidClusterStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-state-fault}))))
(clojure.spec.alpha/fdef modify-snapshot-copy-retention-period :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/modify-snapshot-copy-retention-period-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/modify-snapshot-copy-retention-period-result))

(clojure.core/defn delete-event-subscription "Deletes an Amazon Redshift event notification subscription." ([delete-event-subscription-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-event-subscription-message "DeleteEventSubscription" delete-event-subscription-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/delete-event-subscription-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"SubscriptionNotFoundFault" :portkey.aws.redshift.-2012-12-01/subscription-not-found-fault, "InvalidSubscriptionStateFault" :portkey.aws.redshift.-2012-12-01/invalid-subscription-state-fault}))))
(clojure.spec.alpha/fdef delete-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/delete-event-subscription-message) :ret clojure.core/true?)

(clojure.core/defn describe-default-cluster-parameters "Returns a list of parameter settings for the specified parameter group family.\n For more information about parameters and parameter groups, go to Amazon\nRedshift Parameter Groups\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html)\nin the Amazon Redshift Cluster Management Guide." ([describe-default-cluster-parameters-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-default-cluster-parameters-message "DescribeDefaultClusterParameters" describe-default-cluster-parameters-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/describe-default-cluster-parameters-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/describe-default-cluster-parameters-result {}))))
(clojure.spec.alpha/fdef describe-default-cluster-parameters :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/describe-default-cluster-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/describe-default-cluster-parameters-result))

(clojure.core/defn copy-cluster-snapshot "Copies the specified automated cluster snapshot to a new manual cluster\nsnapshot. The source must be an automated snapshot and it must be in the\navailable state.\n When you delete a cluster, Amazon Redshift deletes any automated snapshots of\nthe cluster. Also, when the retention period of the snapshot expires, Amazon\nRedshift automatically deletes it. If you want to keep an automated snapshot for\na longer period, you can make a manual copy of the snapshot. Manual snapshots\nare retained until you delete them.\n For more information about working with snapshots, go to Amazon Redshift\nSnapshots\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html) in\nthe Amazon Redshift Cluster Management Guide." ([copy-cluster-snapshot-message] (clojure.core/let [req<-input__36755__auto__ (req<-copy-cluster-snapshot-message "CopyClusterSnapshot" copy-cluster-snapshot-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/copy-cluster-snapshot-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/copy-cluster-snapshot-result {"ClusterSnapshotAlreadyExistsFault" :portkey.aws.redshift.-2012-12-01/cluster-snapshot-already-exists-fault, "ClusterSnapshotNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-snapshot-not-found-fault, "InvalidClusterSnapshotStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-snapshot-state-fault, "ClusterSnapshotQuotaExceededFault" :portkey.aws.redshift.-2012-12-01/cluster-snapshot-quota-exceeded-fault}))))
(clojure.spec.alpha/fdef copy-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/copy-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/copy-cluster-snapshot-result))

(clojure.core/defn get-cluster-credentials "Returns a database user name and temporary password with temporary authorization\nto log on to an Amazon Redshift database. The action returns the database user\nname prefixed with IAM: if AutoCreate is False or IAMA: if AutoCreate is True.\nYou can optionally specify one or more database user groups that the user will\njoin at log on. By default, the temporary credentials expire in 900 seconds. You\ncan optionally specify a duration between 900 seconds (15 minutes) and 3600\nseconds (60 minutes). For more information, see Using IAM Authentication to\nGenerate Database User Credentials\n(http://docs.aws.amazon.com/redshift/latest/mgmt/generating-user-credentials.html)\nin the Amazon Redshift Cluster Management Guide.\n The AWS Identity and Access Management (IAM)user or role that executes\nGetClusterCredentials must have an IAM policy attached that allows access to all\nnecessary actions and resources. For more information about permissions, see\nResource Policies for GetClusterCredentials\n(http://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html#redshift-policy-resources.getclustercredentials-resources)\nin the Amazon Redshift Cluster Management Guide.\n If the DbGroups parameter is specified, the IAM policy must allow the\nredshift:JoinGroup action with access to the listed dbgroups.\n In addition, if the AutoCreate parameter is set to True, then the policy must\ninclude the redshift:CreateClusterUser privilege.\n If the DbName parameter is specified, the IAM policy must allow access to the\nresource dbname for the specified database name." ([get-cluster-credentials-message] (clojure.core/let [req<-input__36755__auto__ (req<-get-cluster-credentials-message "GetClusterCredentials" get-cluster-credentials-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/get-cluster-credentials-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/cluster-credentials {"ClusterNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-not-found-fault, "UnsupportedOperationFault" :portkey.aws.redshift.-2012-12-01/unsupported-operation-fault}))))
(clojure.spec.alpha/fdef get-cluster-credentials :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/get-cluster-credentials-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/cluster-credentials))

(clojure.core/defn restore-table-from-cluster-snapshot "Creates a new table from a table in an Amazon Redshift cluster snapshot. You\nmust create the new table within the Amazon Redshift cluster that the snapshot\nwas taken from.\n You cannot use RestoreTableFromClusterSnapshot to restore a table with the same\nname as an existing table in an Amazon Redshift cluster. That is, you cannot\noverwrite an existing table in a cluster with a restored table. If you want to\nreplace your original table with a new, restored table, then rename or drop your\noriginal table before you call RestoreTableFromClusterSnapshot. When you have\nrenamed your original table, then you can pass the original name of the table as\nthe NewTableName parameter value in the call to RestoreTableFromClusterSnapshot.\nThis way, you can replace the original table with the table created from the\nsnapshot." ([restore-table-from-cluster-snapshot-message] (clojure.core/let [req<-input__36755__auto__ (req<-restore-table-from-cluster-snapshot-message "RestoreTableFromClusterSnapshot" restore-table-from-cluster-snapshot-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/restore-table-from-cluster-snapshot-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/restore-table-from-cluster-snapshot-result {"ClusterSnapshotNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-snapshot-not-found-fault, "InProgressTableRestoreQuotaExceededFault" :portkey.aws.redshift.-2012-12-01/in-progress-table-restore-quota-exceeded-fault, "InvalidClusterSnapshotStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-snapshot-state-fault, "InvalidTableRestoreArgumentFault" :portkey.aws.redshift.-2012-12-01/invalid-table-restore-argument-fault, "ClusterNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-not-found-fault, "InvalidClusterStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-state-fault, "UnsupportedOperationFault" :portkey.aws.redshift.-2012-12-01/unsupported-operation-fault}))))
(clojure.spec.alpha/fdef restore-table-from-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/restore-table-from-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/restore-table-from-cluster-snapshot-result))

(clojure.core/defn reset-cluster-parameter-group "Sets one or more parameters of the specified parameter group to their default\nvalues and sets the source values of the parameters to \"engine-default\". To\nreset the entire parameter group specify the ResetAllParameters parameter. For\nparameter changes to take effect you must reboot any associated clusters." ([reset-cluster-parameter-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-reset-cluster-parameter-group-message "ResetClusterParameterGroup" reset-cluster-parameter-group-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/reset-cluster-parameter-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-name-message {"InvalidClusterParameterGroupStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-parameter-group-state-fault, "ClusterParameterGroupNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-not-found-fault}))))
(clojure.spec.alpha/fdef reset-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/reset-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-name-message))

(clojure.core/defn enable-logging "Starts logging information, such as queries and connection attempts, for the\nspecified Amazon Redshift cluster." ([enable-logging-message] (clojure.core/let [req<-input__36755__auto__ (req<-enable-logging-message "EnableLogging" enable-logging-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/enable-logging-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/logging-status {"ClusterNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-not-found-fault, "BucketNotFoundFault" :portkey.aws.redshift.-2012-12-01/bucket-not-found-fault, "InsufficientS3BucketPolicyFault" :portkey.aws.redshift.-2012-12-01/insufficients3-bucket-policy-fault, "InvalidS3KeyPrefixFault" :portkey.aws.redshift.-2012-12-01/invalids3-key-prefix-fault, "InvalidS3BucketNameFault" :portkey.aws.redshift.-2012-12-01/invalids3-bucket-name-fault}))))
(clojure.spec.alpha/fdef enable-logging :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/enable-logging-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/logging-status))

(clojure.core/defn describe-event-categories "Displays a list of event categories for all event source types, or for a\nspecified source type. For a list of the event categories and source types, go\nto Amazon Redshift Event Notifications\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-event-notifications.html)." ([] (describe-event-categories {})) ([describe-event-categories-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-event-categories-message "DescribeEventCategories" describe-event-categories-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/describe-event-categories-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/event-categories-message {}))))
(clojure.spec.alpha/fdef describe-event-categories :args (clojure.spec.alpha/? :portkey.aws.redshift.-2012-12-01/describe-event-categories-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/event-categories-message))

(clojure.core/defn describe-cluster-versions "Returns descriptions of the available Amazon Redshift cluster versions. You can\ncall this operation even before creating any clusters to learn more about the\nAmazon Redshift versions. For more information about managing clusters, go to\nAmazon Redshift Clusters\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html) in\nthe Amazon Redshift Cluster Management Guide." ([] (describe-cluster-versions {})) ([describe-cluster-versions-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-cluster-versions-message "DescribeClusterVersions" describe-cluster-versions-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/describe-cluster-versions-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/cluster-versions-message {}))))
(clojure.spec.alpha/fdef describe-cluster-versions :args (clojure.spec.alpha/? :portkey.aws.redshift.-2012-12-01/describe-cluster-versions-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/cluster-versions-message))

(clojure.core/defn describe-reserved-nodes "Returns the descriptions of the reserved nodes." ([] (describe-reserved-nodes {})) ([describe-reserved-nodes-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-reserved-nodes-message "DescribeReservedNodes" describe-reserved-nodes-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/describe-reserved-nodes-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/reserved-nodes-message {"ReservedNodeNotFoundFault" :portkey.aws.redshift.-2012-12-01/reserved-node-not-found-fault, "DependentServiceUnavailableFault" :portkey.aws.redshift.-2012-12-01/dependent-service-unavailable-fault}))))
(clojure.spec.alpha/fdef describe-reserved-nodes :args (clojure.spec.alpha/? :portkey.aws.redshift.-2012-12-01/describe-reserved-nodes-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/reserved-nodes-message))

(clojure.core/defn modify-cluster "Modifies the settings for a cluster. For example, you can add another security\nor parameter group, update the preferred maintenance window, or change the\nmaster user password. Resetting a cluster password or modifying the security\ngroups associated with a cluster do not need a reboot. However, modifying a\nparameter group requires a reboot for parameters to take effect. For more\ninformation about managing clusters, go to Amazon Redshift Clusters\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html) in\nthe Amazon Redshift Cluster Management Guide.\n You can also change node type and the number of nodes to scale up or down the\ncluster. When resizing a cluster, you must specify both the number of nodes and\nthe node type even if one of the parameters does not change." ([modify-cluster-message] (clojure.core/let [req<-input__36755__auto__ (req<-modify-cluster-message "ModifyCluster" modify-cluster-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/modify-cluster-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/modify-cluster-result {"DependentServiceRequestThrottlingFault" :portkey.aws.redshift.-2012-12-01/dependent-service-request-throttling-fault, "InsufficientClusterCapacityFault" :portkey.aws.redshift.-2012-12-01/insufficient-cluster-capacity-fault, "NumberOfNodesPerClusterLimitExceededFault" :portkey.aws.redshift.-2012-12-01/number-of-nodes-per-cluster-limit-exceeded-fault, "InvalidElasticIpFault" :portkey.aws.redshift.-2012-12-01/invalid-elastic-ip-fault, "ClusterAlreadyExistsFault" :portkey.aws.redshift.-2012-12-01/cluster-already-exists-fault, "UnauthorizedOperation" :portkey.aws.redshift.-2012-12-01/unauthorized-operation, "HsmClientCertificateNotFoundFault" :portkey.aws.redshift.-2012-12-01/hsm-client-certificate-not-found-fault, "UnsupportedOptionFault" :portkey.aws.redshift.-2012-12-01/unsupported-option-fault, "HsmConfigurationNotFoundFault" :portkey.aws.redshift.-2012-12-01/hsm-configuration-not-found-fault, "LimitExceededFault" :portkey.aws.redshift.-2012-12-01/limit-exceeded-fault, "InvalidClusterSecurityGroupStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-security-group-state-fault, "ClusterParameterGroupNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-not-found-fault, "ClusterSecurityGroupNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-security-group-not-found-fault, "InvalidClusterStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-state-fault, "ClusterNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-not-found-fault, "NumberOfNodesQuotaExceededFault" :portkey.aws.redshift.-2012-12-01/number-of-nodes-quota-exceeded-fault}))))
(clojure.spec.alpha/fdef modify-cluster :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/modify-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/modify-cluster-result))

(clojure.core/defn purchase-reserved-node-offering "Allows you to purchase reserved nodes. Amazon Redshift offers a predefined set\nof reserved node offerings. You can purchase one or more of the offerings. You\ncan call the DescribeReservedNodeOfferings API to obtain the available reserved\nnode offerings. You can call this API by providing a specific reserved node\noffering and the number of nodes you want to reserve.\n For more information about reserved node offerings, go to Purchasing Reserved\nNodes\n(http://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html)\nin the Amazon Redshift Cluster Management Guide." ([purchase-reserved-node-offering-message] (clojure.core/let [req<-input__36755__auto__ (req<-purchase-reserved-node-offering-message "PurchaseReservedNodeOffering" purchase-reserved-node-offering-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/purchase-reserved-node-offering-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/purchase-reserved-node-offering-result {"ReservedNodeOfferingNotFoundFault" :portkey.aws.redshift.-2012-12-01/reserved-node-offering-not-found-fault, "ReservedNodeAlreadyExistsFault" :portkey.aws.redshift.-2012-12-01/reserved-node-already-exists-fault, "ReservedNodeQuotaExceededFault" :portkey.aws.redshift.-2012-12-01/reserved-node-quota-exceeded-fault, "UnsupportedOperationFault" :portkey.aws.redshift.-2012-12-01/unsupported-operation-fault}))))
(clojure.spec.alpha/fdef purchase-reserved-node-offering :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/purchase-reserved-node-offering-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/purchase-reserved-node-offering-result))

(clojure.core/defn describe-reserved-node-offerings "Returns a list of the available reserved node offerings by Amazon Redshift with\ntheir descriptions including the node type, the fixed and recurring costs of\nreserving the node and duration the node will be reserved for you. These\ndescriptions help you determine which reserve node offering you want to\npurchase. You then use the unique offering ID in you call to\nPurchaseReservedNodeOffering to reserve one or more nodes for your Amazon\nRedshift cluster.\n For more information about reserved node offerings, go to Purchasing Reserved\nNodes\n(http://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html)\nin the Amazon Redshift Cluster Management Guide." ([] (describe-reserved-node-offerings {})) ([describe-reserved-node-offerings-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-reserved-node-offerings-message "DescribeReservedNodeOfferings" describe-reserved-node-offerings-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/describe-reserved-node-offerings-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/reserved-node-offerings-message {"ReservedNodeOfferingNotFoundFault" :portkey.aws.redshift.-2012-12-01/reserved-node-offering-not-found-fault, "UnsupportedOperationFault" :portkey.aws.redshift.-2012-12-01/unsupported-operation-fault, "DependentServiceUnavailableFault" :portkey.aws.redshift.-2012-12-01/dependent-service-unavailable-fault}))))
(clojure.spec.alpha/fdef describe-reserved-node-offerings :args (clojure.spec.alpha/? :portkey.aws.redshift.-2012-12-01/describe-reserved-node-offerings-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/reserved-node-offerings-message))

(clojure.core/defn delete-cluster-parameter-group "Deletes a specified Amazon Redshift parameter group.\n You cannot delete a parameter group if it is associated with a cluster." ([delete-cluster-parameter-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-cluster-parameter-group-message "DeleteClusterParameterGroup" delete-cluster-parameter-group-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/delete-cluster-parameter-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"InvalidClusterParameterGroupStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-parameter-group-state-fault, "ClusterParameterGroupNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-not-found-fault}))))
(clojure.spec.alpha/fdef delete-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/delete-cluster-parameter-group-message) :ret clojure.core/true?)

(clojure.core/defn delete-snapshot-copy-grant "Deletes the specified snapshot copy grant." ([delete-snapshot-copy-grant-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-snapshot-copy-grant-message "DeleteSnapshotCopyGrant" delete-snapshot-copy-grant-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/delete-snapshot-copy-grant-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"InvalidSnapshotCopyGrantStateFault" :portkey.aws.redshift.-2012-12-01/invalid-snapshot-copy-grant-state-fault, "SnapshotCopyGrantNotFoundFault" :portkey.aws.redshift.-2012-12-01/snapshot-copy-grant-not-found-fault}))))
(clojure.spec.alpha/fdef delete-snapshot-copy-grant :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/delete-snapshot-copy-grant-message) :ret clojure.core/true?)

(clojure.core/defn delete-cluster "Deletes a previously provisioned cluster. A successful response from the web\nservice indicates that the request was received correctly. Use DescribeClusters\nto monitor the status of the deletion. The delete operation cannot be canceled\nor reverted once submitted. For more information about managing clusters, go to\nAmazon Redshift Clusters\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html) in\nthe Amazon Redshift Cluster Management Guide.\n If you want to shut down the cluster and retain it for future use, set\nSkipFinalClusterSnapshot to false and specify a name for\nFinalClusterSnapshotIdentifier. You can later restore this snapshot to resume\nusing the cluster. If a final cluster snapshot is requested, the status of the\ncluster will be \"final-snapshot\" while the snapshot is being taken, then it's\n\"deleting\" once Amazon Redshift begins deleting the cluster.\n For more information about managing clusters, go to Amazon Redshift Clusters\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html) in\nthe Amazon Redshift Cluster Management Guide." ([delete-cluster-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-cluster-message "DeleteCluster" delete-cluster-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/delete-cluster-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/delete-cluster-result {"ClusterNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-not-found-fault, "InvalidClusterStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-state-fault, "ClusterSnapshotAlreadyExistsFault" :portkey.aws.redshift.-2012-12-01/cluster-snapshot-already-exists-fault, "ClusterSnapshotQuotaExceededFault" :portkey.aws.redshift.-2012-12-01/cluster-snapshot-quota-exceeded-fault}))))
(clojure.spec.alpha/fdef delete-cluster :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/delete-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/delete-cluster-result))

(clojure.core/defn modify-event-subscription "Modifies an existing Amazon Redshift event notification subscription." ([modify-event-subscription-message] (clojure.core/let [req<-input__36755__auto__ (req<-modify-event-subscription-message "ModifyEventSubscription" modify-event-subscription-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/modify-event-subscription-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/modify-event-subscription-result {"SourceNotFoundFault" :portkey.aws.redshift.-2012-12-01/source-not-found-fault, "SNSNoAuthorizationFault" :portkey.aws.redshift.-2012-12-01/snsno-authorization-fault, "SubscriptionSeverityNotFoundFault" :portkey.aws.redshift.-2012-12-01/subscription-severity-not-found-fault, "SubscriptionNotFoundFault" :portkey.aws.redshift.-2012-12-01/subscription-not-found-fault, "SNSTopicArnNotFoundFault" :portkey.aws.redshift.-2012-12-01/snstopic-arn-not-found-fault, "SubscriptionCategoryNotFoundFault" :portkey.aws.redshift.-2012-12-01/subscription-category-not-found-fault, "InvalidSubscriptionStateFault" :portkey.aws.redshift.-2012-12-01/invalid-subscription-state-fault, "SubscriptionEventIdNotFoundFault" :portkey.aws.redshift.-2012-12-01/subscription-event-id-not-found-fault, "SNSInvalidTopicFault" :portkey.aws.redshift.-2012-12-01/snsinvalid-topic-fault}))))
(clojure.spec.alpha/fdef modify-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/modify-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/modify-event-subscription-result))

(clojure.core/defn describe-hsm-client-certificates "Returns information about the specified HSM client certificate. If no\ncertificate ID is specified, returns information about all the HSM certificates\nowned by your AWS customer account.\n If you specify both tag keys and tag values in the same request, Amazon\nRedshift returns all HSM client certificates that match any combination of the\nspecified keys and values. For example, if you have owner and environment for\ntag keys, and admin and test for tag values, all HSM client certificates that\nhave any combination of those values are returned.\n If both tag keys and values are omitted from the request, HSM client\ncertificates are returned regardless of whether they have tag keys or values\nassociated with them." ([] (describe-hsm-client-certificates {})) ([describe-hsm-client-certificates-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-hsm-client-certificates-message "DescribeHsmClientCertificates" describe-hsm-client-certificates-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/describe-hsm-client-certificates-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/hsm-client-certificate-message {"HsmClientCertificateNotFoundFault" :portkey.aws.redshift.-2012-12-01/hsm-client-certificate-not-found-fault, "InvalidTagFault" :portkey.aws.redshift.-2012-12-01/invalid-tag-fault}))))
(clojure.spec.alpha/fdef describe-hsm-client-certificates :args (clojure.spec.alpha/? :portkey.aws.redshift.-2012-12-01/describe-hsm-client-certificates-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/hsm-client-certificate-message))

(clojure.core/defn create-event-subscription "Creates an Amazon Redshift event notification subscription. This action requires\nan ARN (Amazon Resource Name) of an Amazon SNS topic created by either the\nAmazon Redshift console, the Amazon SNS console, or the Amazon SNS API. To\nobtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and\nsubscribe to the topic. The ARN is displayed in the SNS console.\n You can specify the source type, and lists of Amazon Redshift source IDs, event\ncategories, and event severities. Notifications will be sent for all events you\nwant that match those criteria. For example, you can specify source type =\ncluster, source ID = my-cluster-1 and mycluster2, event categories =\nAvailability, Backup, and severity = ERROR. The subscription will only send\nnotifications for those ERROR events in the Availability and Backup categories\nfor the specified clusters.\n If you specify both the source type and source IDs, such as source type =\ncluster and source identifier = my-cluster-1, notifications will be sent for all\nthe cluster events for my-cluster-1. If you specify a source type but do not\nspecify a source identifier, you will receive notice of the events for the\nobjects of that type in your AWS account. If you do not specify either the\nSourceType nor the SourceIdentifier, you will be notified of events generated\nfrom all Amazon Redshift sources belonging to your AWS account. You must specify\na source type if you specify a source ID." ([create-event-subscription-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-event-subscription-message "CreateEventSubscription" create-event-subscription-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/create-event-subscription-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/create-event-subscription-result {"SourceNotFoundFault" :portkey.aws.redshift.-2012-12-01/source-not-found-fault, "SNSNoAuthorizationFault" :portkey.aws.redshift.-2012-12-01/snsno-authorization-fault, "SubscriptionSeverityNotFoundFault" :portkey.aws.redshift.-2012-12-01/subscription-severity-not-found-fault, "SNSTopicArnNotFoundFault" :portkey.aws.redshift.-2012-12-01/snstopic-arn-not-found-fault, "SubscriptionCategoryNotFoundFault" :portkey.aws.redshift.-2012-12-01/subscription-category-not-found-fault, "SubscriptionAlreadyExistFault" :portkey.aws.redshift.-2012-12-01/subscription-already-exist-fault, "SubscriptionEventIdNotFoundFault" :portkey.aws.redshift.-2012-12-01/subscription-event-id-not-found-fault, "EventSubscriptionQuotaExceededFault" :portkey.aws.redshift.-2012-12-01/event-subscription-quota-exceeded-fault, "InvalidTagFault" :portkey.aws.redshift.-2012-12-01/invalid-tag-fault, "SNSInvalidTopicFault" :portkey.aws.redshift.-2012-12-01/snsinvalid-topic-fault, "TagLimitExceededFault" :portkey.aws.redshift.-2012-12-01/tag-limit-exceeded-fault}))))
(clojure.spec.alpha/fdef create-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/create-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/create-event-subscription-result))

(clojure.core/defn create-cluster-security-group "Creates a new Amazon Redshift security group. You use security groups to control\naccess to non-VPC clusters.\n For information about managing security groups, go to Amazon Redshift Cluster\nSecurity Groups\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html)\nin the Amazon Redshift Cluster Management Guide." ([create-cluster-security-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-cluster-security-group-message "CreateClusterSecurityGroup" create-cluster-security-group-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/create-cluster-security-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/create-cluster-security-group-result {"ClusterSecurityGroupAlreadyExistsFault" :portkey.aws.redshift.-2012-12-01/cluster-security-group-already-exists-fault, "ClusterSecurityGroupQuotaExceededFault" :portkey.aws.redshift.-2012-12-01/cluster-security-group-quota-exceeded-fault, "TagLimitExceededFault" :portkey.aws.redshift.-2012-12-01/tag-limit-exceeded-fault, "InvalidTagFault" :portkey.aws.redshift.-2012-12-01/invalid-tag-fault}))))
(clojure.spec.alpha/fdef create-cluster-security-group :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/create-cluster-security-group-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/create-cluster-security-group-result))

(clojure.core/defn describe-snapshot-copy-grants "Returns a list of snapshot copy grants owned by the AWS account in the\ndestination region.\n For more information about managing snapshot copy grants, go to Amazon Redshift\nDatabase Encryption\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html)\nin the Amazon Redshift Cluster Management Guide." ([] (describe-snapshot-copy-grants {})) ([describe-snapshot-copy-grants-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-snapshot-copy-grants-message "DescribeSnapshotCopyGrants" describe-snapshot-copy-grants-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/describe-snapshot-copy-grants-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/snapshot-copy-grant-message {"SnapshotCopyGrantNotFoundFault" :portkey.aws.redshift.-2012-12-01/snapshot-copy-grant-not-found-fault, "InvalidTagFault" :portkey.aws.redshift.-2012-12-01/invalid-tag-fault}))))
(clojure.spec.alpha/fdef describe-snapshot-copy-grants :args (clojure.spec.alpha/? :portkey.aws.redshift.-2012-12-01/describe-snapshot-copy-grants-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/snapshot-copy-grant-message))

(clojure.core/defn authorize-cluster-security-group-ingress "Adds an inbound (ingress) rule to an Amazon Redshift security group. Depending\non whether the application accessing your cluster is running on the Internet or\nan Amazon EC2 instance, you can authorize inbound access to either a Classless\nInterdomain Routing (CIDR)/Internet Protocol (IP) range or to an Amazon EC2\nsecurity group. You can add as many as 20 ingress rules to an Amazon Redshift\nsecurity group.\n If you authorize access to an Amazon EC2 security group, specify\nEC2SecurityGroupName and EC2SecurityGroupOwnerId. The Amazon EC2 security group\nand Amazon Redshift cluster must be in the same AWS region.\n If you authorize access to a CIDR/IP address range, specify CIDRIP. For an\noverview of CIDR blocks, see the Wikipedia article on Classless Inter-Domain\nRouting (http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing).\n You must also associate the security group with a cluster so that clients\nrunning on these IP addresses or the EC2 instance are authorized to connect to\nthe cluster. For information about managing security groups, go to Working with\nSecurity Groups\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html)\nin the Amazon Redshift Cluster Management Guide." ([authorize-cluster-security-group-ingress-message] (clojure.core/let [req<-input__36755__auto__ (req<-authorize-cluster-security-group-ingress-message "AuthorizeClusterSecurityGroupIngress" authorize-cluster-security-group-ingress-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/authorize-cluster-security-group-ingress-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/authorize-cluster-security-group-ingress-result {"ClusterSecurityGroupNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-security-group-not-found-fault, "InvalidClusterSecurityGroupStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-security-group-state-fault, "AuthorizationAlreadyExistsFault" :portkey.aws.redshift.-2012-12-01/authorization-already-exists-fault, "AuthorizationQuotaExceededFault" :portkey.aws.redshift.-2012-12-01/authorization-quota-exceeded-fault}))))
(clojure.spec.alpha/fdef authorize-cluster-security-group-ingress :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/authorize-cluster-security-group-ingress-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/authorize-cluster-security-group-ingress-result))

(clojure.core/defn modify-cluster-subnet-group "Modifies a cluster subnet group to include the specified list of VPC subnets.\nThe operation replaces the existing list of subnets with the new list of\nsubnets." ([modify-cluster-subnet-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-modify-cluster-subnet-group-message "ModifyClusterSubnetGroup" modify-cluster-subnet-group-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/modify-cluster-subnet-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/modify-cluster-subnet-group-result {"ClusterSubnetGroupNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-subnet-group-not-found-fault, "ClusterSubnetQuotaExceededFault" :portkey.aws.redshift.-2012-12-01/cluster-subnet-quota-exceeded-fault, "SubnetAlreadyInUse" :portkey.aws.redshift.-2012-12-01/subnet-already-in-use, "InvalidSubnet" :portkey.aws.redshift.-2012-12-01/invalid-subnet, "UnauthorizedOperation" :portkey.aws.redshift.-2012-12-01/unauthorized-operation, "DependentServiceRequestThrottlingFault" :portkey.aws.redshift.-2012-12-01/dependent-service-request-throttling-fault}))))
(clojure.spec.alpha/fdef modify-cluster-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/modify-cluster-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/modify-cluster-subnet-group-result))

(clojure.core/defn delete-hsm-configuration "Deletes the specified Amazon Redshift HSM configuration." ([delete-hsm-configuration-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-hsm-configuration-message "DeleteHsmConfiguration" delete-hsm-configuration-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/delete-hsm-configuration-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"InvalidHsmConfigurationStateFault" :portkey.aws.redshift.-2012-12-01/invalid-hsm-configuration-state-fault, "HsmConfigurationNotFoundFault" :portkey.aws.redshift.-2012-12-01/hsm-configuration-not-found-fault}))))
(clojure.spec.alpha/fdef delete-hsm-configuration :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/delete-hsm-configuration-message) :ret clojure.core/true?)

(clojure.core/defn describe-event-subscriptions "Lists descriptions of all the Amazon Redshift event notification subscriptions\nfor a customer account. If you specify a subscription name, lists the\ndescription for that subscription.\n If you specify both tag keys and tag values in the same request, Amazon\nRedshift returns all event notification subscriptions that match any combination\nof the specified keys and values. For example, if you have owner and environment\nfor tag keys, and admin and test for tag values, all subscriptions that have any\ncombination of those values are returned.\n If both tag keys and values are omitted from the request, subscriptions are\nreturned regardless of whether they have tag keys or values associated with\nthem." ([] (describe-event-subscriptions {})) ([describe-event-subscriptions-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-event-subscriptions-message "DescribeEventSubscriptions" describe-event-subscriptions-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/describe-event-subscriptions-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/event-subscriptions-message {"SubscriptionNotFoundFault" :portkey.aws.redshift.-2012-12-01/subscription-not-found-fault, "InvalidTagFault" :portkey.aws.redshift.-2012-12-01/invalid-tag-fault}))))
(clojure.spec.alpha/fdef describe-event-subscriptions :args (clojure.spec.alpha/? :portkey.aws.redshift.-2012-12-01/describe-event-subscriptions-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/event-subscriptions-message))

(clojure.core/defn create-cluster-parameter-group "Creates an Amazon Redshift parameter group.\n Creating parameter groups is independent of creating clusters. You can\nassociate a cluster with a parameter group when you create the cluster. You can\nalso associate an existing cluster with a parameter group after the cluster is\ncreated by using ModifyCluster.\n Parameters in the parameter group define specific behavior that applies to the\ndatabases you create on the cluster. For more information about parameters and\nparameter groups, go to Amazon Redshift Parameter Groups\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html)\nin the Amazon Redshift Cluster Management Guide." ([create-cluster-parameter-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-cluster-parameter-group-message "CreateClusterParameterGroup" create-cluster-parameter-group-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/create-cluster-parameter-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/create-cluster-parameter-group-result {"ClusterParameterGroupQuotaExceededFault" :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-quota-exceeded-fault, "ClusterParameterGroupAlreadyExistsFault" :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-already-exists-fault, "TagLimitExceededFault" :portkey.aws.redshift.-2012-12-01/tag-limit-exceeded-fault, "InvalidTagFault" :portkey.aws.redshift.-2012-12-01/invalid-tag-fault}))))
(clojure.spec.alpha/fdef create-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/create-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/create-cluster-parameter-group-result))

(clojure.core/defn describe-cluster-parameter-groups "Returns a list of Amazon Redshift parameter groups, including parameter groups\nyou created and the default parameter group. For each parameter group, the\nresponse includes the parameter group name, description, and parameter group\nfamily name. You can optionally specify a name to retrieve the description of a\nspecific parameter group.\n For more information about parameters and parameter groups, go to Amazon\nRedshift Parameter Groups\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html)\nin the Amazon Redshift Cluster Management Guide.\n If you specify both tag keys and tag values in the same request, Amazon\nRedshift returns all parameter groups that match any combination of the\nspecified keys and values. For example, if you have owner and environment for\ntag keys, and admin and test for tag values, all parameter groups that have any\ncombination of those values are returned.\n If both tag keys and values are omitted from the request, parameter groups are\nreturned regardless of whether they have tag keys or values associated with\nthem." ([] (describe-cluster-parameter-groups {})) ([describe-cluster-parameter-groups-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-cluster-parameter-groups-message "DescribeClusterParameterGroups" describe-cluster-parameter-groups-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/describe-cluster-parameter-groups-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/cluster-parameter-groups-message {"ClusterParameterGroupNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-parameter-group-not-found-fault, "InvalidTagFault" :portkey.aws.redshift.-2012-12-01/invalid-tag-fault}))))
(clojure.spec.alpha/fdef describe-cluster-parameter-groups :args (clojure.spec.alpha/? :portkey.aws.redshift.-2012-12-01/describe-cluster-parameter-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/cluster-parameter-groups-message))

(clojure.core/defn authorize-snapshot-access "Authorizes the specified AWS customer account to restore the specified snapshot.\n For more information about working with snapshots, go to Amazon Redshift\nSnapshots\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html) in\nthe Amazon Redshift Cluster Management Guide." ([authorize-snapshot-access-message] (clojure.core/let [req<-input__36755__auto__ (req<-authorize-snapshot-access-message "AuthorizeSnapshotAccess" authorize-snapshot-access-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/authorize-snapshot-access-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/authorize-snapshot-access-result {"ClusterSnapshotNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-snapshot-not-found-fault, "AuthorizationAlreadyExistsFault" :portkey.aws.redshift.-2012-12-01/authorization-already-exists-fault, "AuthorizationQuotaExceededFault" :portkey.aws.redshift.-2012-12-01/authorization-quota-exceeded-fault, "DependentServiceRequestThrottlingFault" :portkey.aws.redshift.-2012-12-01/dependent-service-request-throttling-fault, "InvalidClusterSnapshotStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-snapshot-state-fault, "LimitExceededFault" :portkey.aws.redshift.-2012-12-01/limit-exceeded-fault}))))
(clojure.spec.alpha/fdef authorize-snapshot-access :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/authorize-snapshot-access-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/authorize-snapshot-access-result))

(clojure.core/defn describe-logging-status "Describes whether information, such as queries and connection attempts, is being\nlogged for the specified Amazon Redshift cluster." ([describe-logging-status-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-logging-status-message "DescribeLoggingStatus" describe-logging-status-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/describe-logging-status-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/logging-status {"ClusterNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-not-found-fault}))))
(clojure.spec.alpha/fdef describe-logging-status :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/describe-logging-status-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/logging-status))

(clojure.core/defn describe-resize "Returns information about the last resize operation for the specified cluster.\nIf no resize operation has ever been initiated for the specified cluster, a HTTP\n404 error is returned. If a resize operation was initiated and completed, the\nstatus of the resize remains as SUCCEEDED until the next resize.\n A resize operation can be requested using ModifyCluster and specifying a\ndifferent number or type of nodes for the cluster." ([describe-resize-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-resize-message "DescribeResize" describe-resize-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/describe-resize-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/resize-progress-message {"ClusterNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-not-found-fault, "ResizeNotFoundFault" :portkey.aws.redshift.-2012-12-01/resize-not-found-fault}))))
(clojure.spec.alpha/fdef describe-resize :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/describe-resize-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/resize-progress-message))

(clojure.core/defn reboot-cluster "Reboots a cluster. This action is taken as soon as possible. It results in a\nmomentary outage to the cluster, during which the cluster status is set to\nrebooting. A cluster event is created when the reboot is completed. Any pending\ncluster modifications (see ModifyCluster) are applied at this reboot. For more\ninformation about managing clusters, go to Amazon Redshift Clusters\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html) in\nthe Amazon Redshift Cluster Management Guide." ([reboot-cluster-message] (clojure.core/let [req<-input__36755__auto__ (req<-reboot-cluster-message "RebootCluster" reboot-cluster-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/reboot-cluster-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/reboot-cluster-result {"InvalidClusterStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-state-fault, "ClusterNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-not-found-fault}))))
(clojure.spec.alpha/fdef reboot-cluster :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/reboot-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/reboot-cluster-result))

(clojure.core/defn describe-orderable-cluster-options "Returns a list of orderable cluster options. Before you create a new cluster you\ncan use this operation to find what options are available, such as the EC2\nAvailability Zones (AZ) in the specific AWS region that you can specify, and the\nnode types you can request. The node types differ by available storage, memory,\nCPU and price. With the cost involved you might want to obtain a list of cluster\noptions in the specific region and specify values when creating a cluster. For\nmore information about managing clusters, go to Amazon Redshift Clusters\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html) in\nthe Amazon Redshift Cluster Management Guide." ([] (describe-orderable-cluster-options {})) ([describe-orderable-cluster-options-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-orderable-cluster-options-message "DescribeOrderableClusterOptions" describe-orderable-cluster-options-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/describe-orderable-cluster-options-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/orderable-cluster-options-message {}))))
(clojure.spec.alpha/fdef describe-orderable-cluster-options :args (clojure.spec.alpha/? :portkey.aws.redshift.-2012-12-01/describe-orderable-cluster-options-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/orderable-cluster-options-message))

(clojure.core/defn create-cluster-subnet-group "Creates a new Amazon Redshift subnet group. You must provide a list of one or\nmore subnets in your existing Amazon Virtual Private Cloud (Amazon VPC) when\ncreating Amazon Redshift subnet group.\n For information about subnet groups, go to Amazon Redshift Cluster Subnet\nGroups\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-cluster-subnet-groups.html)\nin the Amazon Redshift Cluster Management Guide." ([create-cluster-subnet-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-cluster-subnet-group-message "CreateClusterSubnetGroup" create-cluster-subnet-group-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/create-cluster-subnet-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/create-cluster-subnet-group-result {"ClusterSubnetGroupAlreadyExistsFault" :portkey.aws.redshift.-2012-12-01/cluster-subnet-group-already-exists-fault, "ClusterSubnetGroupQuotaExceededFault" :portkey.aws.redshift.-2012-12-01/cluster-subnet-group-quota-exceeded-fault, "ClusterSubnetQuotaExceededFault" :portkey.aws.redshift.-2012-12-01/cluster-subnet-quota-exceeded-fault, "InvalidSubnet" :portkey.aws.redshift.-2012-12-01/invalid-subnet, "UnauthorizedOperation" :portkey.aws.redshift.-2012-12-01/unauthorized-operation, "TagLimitExceededFault" :portkey.aws.redshift.-2012-12-01/tag-limit-exceeded-fault, "InvalidTagFault" :portkey.aws.redshift.-2012-12-01/invalid-tag-fault, "DependentServiceRequestThrottlingFault" :portkey.aws.redshift.-2012-12-01/dependent-service-request-throttling-fault}))))
(clojure.spec.alpha/fdef create-cluster-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/create-cluster-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/create-cluster-subnet-group-result))

(clojure.core/defn modify-cluster-iam-roles "Modifies the list of AWS Identity and Access Management (IAM) roles that can be\nused by the cluster to access other AWS services.\n A cluster can have up to 10 IAM roles associated at any time." ([modify-cluster-iam-roles-message] (clojure.core/let [req<-input__36755__auto__ (req<-modify-cluster-iam-roles-message "ModifyClusterIamRoles" modify-cluster-iam-roles-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/modify-cluster-iam-roles-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/modify-cluster-iam-roles-result {"InvalidClusterStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-state-fault, "ClusterNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-not-found-fault}))))
(clojure.spec.alpha/fdef modify-cluster-iam-roles :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/modify-cluster-iam-roles-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/modify-cluster-iam-roles-result))

(clojure.core/defn delete-cluster-security-group "Deletes an Amazon Redshift security group.\n You cannot delete a security group that is associated with any clusters. You\ncannot delete the default security group.\n For information about managing security groups, go to Amazon Redshift Cluster\nSecurity Groups\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html)\nin the Amazon Redshift Cluster Management Guide." ([delete-cluster-security-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-cluster-security-group-message "DeleteClusterSecurityGroup" delete-cluster-security-group-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/delete-cluster-security-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"InvalidClusterSecurityGroupStateFault" :portkey.aws.redshift.-2012-12-01/invalid-cluster-security-group-state-fault, "ClusterSecurityGroupNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-security-group-not-found-fault}))))
(clojure.spec.alpha/fdef delete-cluster-security-group :args (clojure.spec.alpha/tuple :portkey.aws.redshift.-2012-12-01/delete-cluster-security-group-message) :ret clojure.core/true?)

(clojure.core/defn describe-cluster-security-groups "Returns information about Amazon Redshift security groups. If the name of a\nsecurity group is specified, the response will contain only information about\nonly that security group.\n For information about managing security groups, go to Amazon Redshift Cluster\nSecurity Groups\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html)\nin the Amazon Redshift Cluster Management Guide.\n If you specify both tag keys and tag values in the same request, Amazon\nRedshift returns all security groups that match any combination of the specified\nkeys and values. For example, if you have owner and environment for tag keys,\nand admin and test for tag values, all security groups that have any combination\nof those values are returned.\n If both tag keys and values are omitted from the request, security groups are\nreturned regardless of whether they have tag keys or values associated with\nthem." ([] (describe-cluster-security-groups {})) ([describe-cluster-security-groups-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-cluster-security-groups-message "DescribeClusterSecurityGroups" describe-cluster-security-groups-message)] (portkey.aws/-query-call portkey.aws.redshift.-2012-12-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift.-2012-12-01/describe-cluster-security-groups-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift.-2012-12-01/cluster-security-group-message {"ClusterSecurityGroupNotFoundFault" :portkey.aws.redshift.-2012-12-01/cluster-security-group-not-found-fault, "InvalidTagFault" :portkey.aws.redshift.-2012-12-01/invalid-tag-fault}))))
(clojure.spec.alpha/fdef describe-cluster-security-groups :args (clojure.spec.alpha/? :portkey.aws.redshift.-2012-12-01/describe-cluster-security-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift.-2012-12-01/cluster-security-group-message))
