(ns portkey.aws.serverlessrepo.-2017-09-08 (:require [portkey.aws]))

(def
 endpoints
 '{"ap-northeast-1"
   {:credential-scope
    {:service "serverlessrepo", :region "ap-northeast-1"},
    :ssl-common-name "serverlessrepo.ap-northeast-1.amazonaws.com",
    :endpoint "https://serverlessrepo.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "serverlessrepo", :region "eu-west-1"},
    :ssl-common-name "serverlessrepo.eu-west-1.amazonaws.com",
    :endpoint "https://serverlessrepo.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "serverlessrepo", :region "us-east-2"},
    :ssl-common-name "serverlessrepo.us-east-2.amazonaws.com",
    :endpoint "https://serverlessrepo.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope
    {:service "serverlessrepo", :region "ap-southeast-2"},
    :ssl-common-name "serverlessrepo.ap-southeast-2.amazonaws.com",
    :endpoint "https://serverlessrepo.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "serverlessrepo", :region "sa-east-1"},
    :ssl-common-name "serverlessrepo.sa-east-1.amazonaws.com",
    :endpoint "https://serverlessrepo.sa-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope
    {:service "serverlessrepo", :region "ap-southeast-1"},
    :ssl-common-name "serverlessrepo.ap-southeast-1.amazonaws.com",
    :endpoint "https://serverlessrepo.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope
    {:service "serverlessrepo", :region "ap-northeast-2"},
    :ssl-common-name "serverlessrepo.ap-northeast-2.amazonaws.com",
    :endpoint "https://serverlessrepo.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "ca-central-1"
   {:credential-scope
    {:service "serverlessrepo", :region "ca-central-1"},
    :ssl-common-name "serverlessrepo.ca-central-1.amazonaws.com",
    :endpoint "https://serverlessrepo.ca-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope
    {:service "serverlessrepo", :region "eu-central-1"},
    :ssl-common-name "serverlessrepo.eu-central-1.amazonaws.com",
    :endpoint "https://serverlessrepo.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "serverlessrepo", :region "eu-west-2"},
    :ssl-common-name "serverlessrepo.eu-west-2.amazonaws.com",
    :endpoint "https://serverlessrepo.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "serverlessrepo", :region "us-west-2"},
    :ssl-common-name "serverlessrepo.us-west-2.amazonaws.com",
    :endpoint "https://serverlessrepo.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "serverlessrepo", :region "us-east-1"},
    :ssl-common-name "serverlessrepo.us-east-1.amazonaws.com",
    :endpoint "https://serverlessrepo.us-east-1.amazonaws.com",
    :signature-version :v4},
   "us-west-1"
   {:credential-scope {:service "serverlessrepo", :region "us-west-1"},
    :ssl-common-name "serverlessrepo.us-west-1.amazonaws.com",
    :endpoint "https://serverlessrepo.us-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-south-1"
   {:credential-scope
    {:service "serverlessrepo", :region "ap-south-1"},
    :ssl-common-name "serverlessrepo.ap-south-1.amazonaws.com",
    :endpoint "https://serverlessrepo.ap-south-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-application-policy-statement)

(clojure.core/declare ser-rollback-configuration)

(clojure.core/declare ser-list-of-application-policy-statement)

(clojure.core/declare ser-string)

(clojure.core/declare ser-rollback-trigger)

(clojure.core/declare ser-list-of-rollback-trigger)

(clojure.core/declare ser-list-of-string)

(clojure.core/declare ser-max-items)

(clojure.core/declare ser-tag)

(clojure.core/declare ser-integer)

(clojure.core/declare ser-list-of-tag)

(clojure.core/declare ser-parameter-value)

(clojure.core/declare ser-list-of-parameter-value)

(clojure.core/defn- ser-application-policy-statement [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-list-of-string (:principals input)) #:http.request.field{:name "Principals", :shape "__listOf__string", :location-name "principals"}) (clojure.core/into (ser-list-of-string (:actions input)) #:http.request.field{:name "Actions", :shape "__listOf__string", :location-name "actions"})], :shape "ApplicationPolicyStatement", :type "structure"} (clojure.core/contains? input :statement-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :statement-id)) #:http.request.field{:name "StatementId", :shape "__string", :location-name "statementId"}))))

(clojure.core/defn- ser-rollback-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "RollbackConfiguration", :type "structure"} (clojure.core/contains? input :monitoring-time-in-minutes) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :monitoring-time-in-minutes)) #:http.request.field{:name "MonitoringTimeInMinutes", :shape "__integer", :location-name "monitoringTimeInMinutes"})) (clojure.core/contains? input :rollback-triggers) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-rollback-trigger (input :rollback-triggers)) #:http.request.field{:name "RollbackTriggers", :shape "__listOfRollbackTrigger", :location-name "rollbackTriggers"}))))

(clojure.core/defn- ser-list-of-application-policy-statement [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-application-policy-statement coll) #:http.request.field{:shape "ApplicationPolicyStatement"}))) input), :shape "__listOfApplicationPolicyStatement", :type "list"})

(clojure.core/defn- ser-string [input] #:http.request.field{:value input, :shape "__string"})

(clojure.core/defn- ser-rollback-trigger [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:type input)) #:http.request.field{:name "Type", :shape "__string", :location-name "type"}) (clojure.core/into (ser-string (:arn input)) #:http.request.field{:name "Arn", :shape "__string", :location-name "arn"})], :shape "RollbackTrigger", :type "structure"}))

(clojure.core/defn- ser-list-of-rollback-trigger [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-rollback-trigger coll) #:http.request.field{:shape "RollbackTrigger"}))) input), :shape "__listOfRollbackTrigger", :type "list"})

(clojure.core/defn- ser-list-of-string [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "__string"}))) input), :shape "__listOf__string", :type "list"})

(clojure.core/defn- ser-max-items [input] #:http.request.field{:value input, :shape "MaxItems"})

(clojure.core/defn- ser-tag [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:value input)) #:http.request.field{:name "Value", :shape "__string", :location-name "value"}) (clojure.core/into (ser-string (:key input)) #:http.request.field{:name "Key", :shape "__string", :location-name "key"})], :shape "Tag", :type "structure"}))

(clojure.core/defn- ser-integer [input] #:http.request.field{:value input, :shape "__integer"})

(clojure.core/defn- ser-list-of-tag [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-tag coll) #:http.request.field{:shape "Tag"}))) input), :shape "__listOfTag", :type "list"})

(clojure.core/defn- ser-parameter-value [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:value input)) #:http.request.field{:name "Value", :shape "__string", :location-name "value"}) (clojure.core/into (ser-string (:name input)) #:http.request.field{:name "Name", :shape "__string", :location-name "name"})], :shape "ParameterValue", :type "structure"}))

(clojure.core/defn- ser-list-of-parameter-value [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-parameter-value coll) #:http.request.field{:shape "ParameterValue"}))) input), :shape "__listOfParameterValue", :type "list"})

(clojure.core/defn- req-get-cloud-formation-template-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :application-id)) #:http.request.field{:name "ApplicationId", :shape "__string", :location "uri", :location-name "applicationId"}) (clojure.core/into (ser-string (input :template-id)) #:http.request.field{:name "TemplateId", :shape "__string", :location "uri", :location-name "templateId"})]}))

(clojure.core/defn- req-create-application-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "__string", :location-name "description"}) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "__string", :location-name "name"}) (clojure.core/into (ser-string (input :author)) #:http.request.field{:name "Author", :shape "__string", :location-name "author"})]} (clojure.core/contains? input :license-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-url)) #:http.request.field{:name "LicenseUrl", :shape "__string", :location-name "licenseUrl"})) (clojure.core/contains? input :template-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :template-url)) #:http.request.field{:name "TemplateUrl", :shape "__string", :location-name "templateUrl"})) (clojure.core/contains? input :readme-body) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :readme-body)) #:http.request.field{:name "ReadmeBody", :shape "__string", :location-name "readmeBody"})) (clojure.core/contains? input :source-code-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-code-url)) #:http.request.field{:name "SourceCodeUrl", :shape "__string", :location-name "sourceCodeUrl"})) (clojure.core/contains? input :template-body) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :template-body)) #:http.request.field{:name "TemplateBody", :shape "__string", :location-name "templateBody"})) (clojure.core/contains? input :spdx-license-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :spdx-license-id)) #:http.request.field{:name "SpdxLicenseId", :shape "__string", :location-name "spdxLicenseId"})) (clojure.core/contains? input :labels) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-string (input :labels)) #:http.request.field{:name "Labels", :shape "__listOf__string", :location-name "labels"})) (clojure.core/contains? input :license-body) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-body)) #:http.request.field{:name "LicenseBody", :shape "__string", :location-name "licenseBody"})) (clojure.core/contains? input :home-page-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :home-page-url)) #:http.request.field{:name "HomePageUrl", :shape "__string", :location-name "homePageUrl"})) (clojure.core/contains? input :readme-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :readme-url)) #:http.request.field{:name "ReadmeUrl", :shape "__string", :location-name "readmeUrl"})) (clojure.core/contains? input :semantic-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :semantic-version)) #:http.request.field{:name "SemanticVersion", :shape "__string", :location-name "semanticVersion"}))))

(clojure.core/defn- req-create-application-version-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :application-id)) #:http.request.field{:name "ApplicationId", :shape "__string", :location "uri", :location-name "applicationId"}) (clojure.core/into (ser-string (input :semantic-version)) #:http.request.field{:name "SemanticVersion", :shape "__string", :location "uri", :location-name "semanticVersion"})]} (clojure.core/contains? input :source-code-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-code-url)) #:http.request.field{:name "SourceCodeUrl", :shape "__string", :location-name "sourceCodeUrl"})) (clojure.core/contains? input :template-body) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :template-body)) #:http.request.field{:name "TemplateBody", :shape "__string", :location-name "templateBody"})) (clojure.core/contains? input :template-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :template-url)) #:http.request.field{:name "TemplateUrl", :shape "__string", :location-name "templateUrl"}))))

(clojure.core/defn- req-create-cloud-formation-template-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :application-id)) #:http.request.field{:name "ApplicationId", :shape "__string", :location "uri", :location-name "applicationId"})]} (clojure.core/contains? input :semantic-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :semantic-version)) #:http.request.field{:name "SemanticVersion", :shape "__string", :location-name "semanticVersion"}))))

(clojure.core/defn- req-get-application-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :application-id)) #:http.request.field{:name "ApplicationId", :shape "__string", :location "uri", :location-name "applicationId"})]} (clojure.core/contains? input :semantic-version) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :semantic-version)) #:http.request.field{:name "SemanticVersion", :shape "__string", :location "querystring", :location-name "semanticVersion"}))))

(clojure.core/defn- req-put-application-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :application-id)) #:http.request.field{:name "ApplicationId", :shape "__string", :location "uri", :location-name "applicationId"})], :body [(clojure.core/into (ser-list-of-application-policy-statement (input :statements)) #:http.request.field{:name "Statements", :shape "__listOfApplicationPolicyStatement", :location-name "statements"})]}))

(clojure.core/defn- req-list-applications-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-max-items (input :max-items)) #:http.request.field{:name "MaxItems", :shape "MaxItems", :location "querystring", :location-name "maxItems"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "nextToken"}))))

(clojure.core/defn- req-get-application-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :application-id)) #:http.request.field{:name "ApplicationId", :shape "__string", :location "uri", :location-name "applicationId"})]}))

(clojure.core/defn- req-create-cloud-formation-change-set-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :application-id)) #:http.request.field{:name "ApplicationId", :shape "__string", :location "uri", :location-name "applicationId"})], :body [(clojure.core/into (ser-string (input :stack-name)) #:http.request.field{:name "StackName", :shape "__string", :location-name "stackName"})]} (clojure.core/contains? input :rollback-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-rollback-configuration (input :rollback-configuration)) #:http.request.field{:name "RollbackConfiguration", :shape "RollbackConfiguration", :location-name "rollbackConfiguration"})) (clojure.core/contains? input :change-set-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :change-set-name)) #:http.request.field{:name "ChangeSetName", :shape "__string", :location-name "changeSetName"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-tag (input :tags)) #:http.request.field{:name "Tags", :shape "__listOfTag", :location-name "tags"})) (clojure.core/contains? input :capabilities) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-string (input :capabilities)) #:http.request.field{:name "Capabilities", :shape "__listOf__string", :location-name "capabilities"})) (clojure.core/contains? input :notification-arns) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-string (input :notification-arns)) #:http.request.field{:name "NotificationArns", :shape "__listOf__string", :location-name "notificationArns"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "__string", :location-name "description"})) (clojure.core/contains? input :template-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :template-id)) #:http.request.field{:name "TemplateId", :shape "__string", :location-name "templateId"})) (clojure.core/contains? input :resource-types) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-string (input :resource-types)) #:http.request.field{:name "ResourceTypes", :shape "__listOf__string", :location-name "resourceTypes"})) (clojure.core/contains? input :parameter-overrides) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-parameter-value (input :parameter-overrides)) #:http.request.field{:name "ParameterOverrides", :shape "__listOfParameterValue", :location-name "parameterOverrides"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "__string", :location-name "clientToken"})) (clojure.core/contains? input :semantic-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :semantic-version)) #:http.request.field{:name "SemanticVersion", :shape "__string", :location-name "semanticVersion"}))))

(clojure.core/defn- req-delete-application-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :application-id)) #:http.request.field{:name "ApplicationId", :shape "__string", :location "uri", :location-name "applicationId"})]}))

(clojure.core/defn- req-list-application-versions-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :application-id)) #:http.request.field{:name "ApplicationId", :shape "__string", :location "uri", :location-name "applicationId"})]} (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-max-items (input :max-items)) #:http.request.field{:name "MaxItems", :shape "MaxItems", :location "querystring", :location-name "maxItems"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "nextToken"}))))

(clojure.core/defn- req-update-application-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :application-id)) #:http.request.field{:name "ApplicationId", :shape "__string", :location "uri", :location-name "applicationId"})]} (clojure.core/contains? input :author) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :author)) #:http.request.field{:name "Author", :shape "__string", :location-name "author"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "__string", :location-name "description"})) (clojure.core/contains? input :home-page-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :home-page-url)) #:http.request.field{:name "HomePageUrl", :shape "__string", :location-name "homePageUrl"})) (clojure.core/contains? input :labels) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-string (input :labels)) #:http.request.field{:name "Labels", :shape "__listOf__string", :location-name "labels"})) (clojure.core/contains? input :readme-body) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :readme-body)) #:http.request.field{:name "ReadmeBody", :shape "__string", :location-name "readmeBody"})) (clojure.core/contains? input :readme-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :readme-url)) #:http.request.field{:name "ReadmeUrl", :shape "__string", :location-name "readmeUrl"}))))

(clojure.core/defn- req-list-application-dependencies-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :application-id)) #:http.request.field{:name "ApplicationId", :shape "__string", :location "uri", :location-name "applicationId"})]} (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-max-items (input :max-items)) #:http.request.field{:name "MaxItems", :shape "MaxItems", :location "querystring", :location-name "maxItems"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "nextToken"})) (clojure.core/contains? input :semantic-version) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :semantic-version)) #:http.request.field{:name "SemanticVersion", :shape "__string", :location "querystring", :location-name "semanticVersion"}))))

(clojure.core/declare deser-application-policy-statement)

(clojure.core/declare deser-list-of-application-summary)

(clojure.core/declare deser-list-of-application-policy-statement)

(clojure.core/declare deser-string)

(clojure.core/declare deser-list-of-version-summary)

(clojure.core/declare deser-application-summary)

(clojure.core/declare deser-status)

(clojure.core/declare deser-application-dependency-summary)

(clojure.core/declare deser-list-of-parameter-definition)

(clojure.core/declare deser-version-summary)

(clojure.core/declare deser-capability)

(clojure.core/declare deser-list-of-string)

(clojure.core/declare deser-boolean)

(clojure.core/declare deser-list-of-application-dependency-summary)

(clojure.core/declare deser-version)

(clojure.core/declare deser-parameter-definition)

(clojure.core/declare deser-integer)

(clojure.core/declare deser-list-of-capability)

(clojure.core/defn- deser-application-policy-statement [input] (clojure.core/cond-> {:principals (deser-list-of-string (input "principals")), :actions (deser-list-of-string (input "actions"))} (clojure.core/contains? input "statementId") (clojure.core/assoc :statement-id (deser-string (input "statementId")))))

(clojure.core/defn- deser-list-of-application-summary [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-application-summary coll))) input))

(clojure.core/defn- deser-list-of-application-policy-statement [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-application-policy-statement coll))) input))

(clojure.core/defn- deser-string [input] input)

(clojure.core/defn- deser-list-of-version-summary [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-version-summary coll))) input))

(clojure.core/defn- deser-application-summary [input] (clojure.core/cond-> {:description (deser-string (input "description")), :author (deser-string (input "author")), :application-id (deser-string (input "applicationId")), :name (deser-string (input "name"))} (clojure.core/contains? input "creationTime") (clojure.core/assoc :creation-time (deser-string (input "creationTime"))) (clojure.core/contains? input "homePageUrl") (clojure.core/assoc :home-page-url (deser-string (input "homePageUrl"))) (clojure.core/contains? input "labels") (clojure.core/assoc :labels (deser-list-of-string (input "labels"))) (clojure.core/contains? input "spdxLicenseId") (clojure.core/assoc :spdx-license-id (deser-string (input "spdxLicenseId")))))

(clojure.core/defn- deser-status [input] (clojure.core/get {"PREPARING" :preparing, "ACTIVE" :active, "EXPIRED" :expired} input))

(clojure.core/defn- deser-application-dependency-summary [input] (clojure.core/cond-> {:application-id (deser-string (input "applicationId")), :semantic-version (deser-string (input "semanticVersion"))}))

(clojure.core/defn- deser-list-of-parameter-definition [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-parameter-definition coll))) input))

(clojure.core/defn- deser-version-summary [input] (clojure.core/cond-> {:creation-time (deser-string (input "creationTime")), :application-id (deser-string (input "applicationId")), :semantic-version (deser-string (input "semanticVersion"))} (clojure.core/contains? input "sourceCodeUrl") (clojure.core/assoc :source-code-url (deser-string (input "sourceCodeUrl")))))

(clojure.core/defn- deser-capability [input] (clojure.core/get {"CAPABILITY_IAM" :capability-iam, "CAPABILITY_NAMED_IAM" :capability-named-iam, "CAPABILITY_AUTO_EXPAND" :capability-auto-expand, "CAPABILITY_RESOURCE_POLICY" :capability-resource-policy} input))

(clojure.core/defn- deser-list-of-string [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-boolean [input] input)

(clojure.core/defn- deser-list-of-application-dependency-summary [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-application-dependency-summary coll))) input))

(clojure.core/defn- deser-version [input] (clojure.core/cond-> {:template-url (deser-string (input "templateUrl")), :parameter-definitions (deser-list-of-parameter-definition (input "parameterDefinitions")), :resources-supported (deser-boolean (input "resourcesSupported")), :creation-time (deser-string (input "creationTime")), :required-capabilities (deser-list-of-capability (input "requiredCapabilities")), :application-id (deser-string (input "applicationId")), :semantic-version (deser-string (input "semanticVersion"))} (clojure.core/contains? input "sourceCodeUrl") (clojure.core/assoc :source-code-url (deser-string (input "sourceCodeUrl")))))

(clojure.core/defn- deser-parameter-definition [input] (clojure.core/cond-> {:referenced-by-resources (deser-list-of-string (input "referencedByResources")), :name (deser-string (input "name"))} (clojure.core/contains? input "type") (clojure.core/assoc :type (deser-string (input "type"))) (clojure.core/contains? input "minValue") (clojure.core/assoc :min-value (deser-integer (input "minValue"))) (clojure.core/contains? input "allowedValues") (clojure.core/assoc :allowed-values (deser-list-of-string (input "allowedValues"))) (clojure.core/contains? input "minLength") (clojure.core/assoc :min-length (deser-integer (input "minLength"))) (clojure.core/contains? input "maxValue") (clojure.core/assoc :max-value (deser-integer (input "maxValue"))) (clojure.core/contains? input "maxLength") (clojure.core/assoc :max-length (deser-integer (input "maxLength"))) (clojure.core/contains? input "allowedPattern") (clojure.core/assoc :allowed-pattern (deser-string (input "allowedPattern"))) (clojure.core/contains? input "description") (clojure.core/assoc :description (deser-string (input "description"))) (clojure.core/contains? input "defaultValue") (clojure.core/assoc :default-value (deser-string (input "defaultValue"))) (clojure.core/contains? input "noEcho") (clojure.core/assoc :no-echo (deser-boolean (input "noEcho"))) (clojure.core/contains? input "constraintDescription") (clojure.core/assoc :constraint-description (deser-string (input "constraintDescription")))))

(clojure.core/defn- deser-integer [input] input)

(clojure.core/defn- deser-list-of-capability [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-capability coll))) input))

(clojure.core/defn- response-create-cloud-formation-template-response ([input] (response-create-cloud-formation-template-response nil input)) ([resultWrapper468414 input] (clojure.core/let [rawinput468413 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar468415 {"applicationId" (rawinput468413 "applicationId"), "creationTime" (rawinput468413 "creationTime"), "expirationTime" (rawinput468413 "expirationTime"), "semanticVersion" (rawinput468413 "semanticVersion"), "status" (rawinput468413 "status"), "templateId" (rawinput468413 "templateId"), "templateUrl" (rawinput468413 "templateUrl")}] (clojure.core/cond-> {} (letvar468415 "applicationId") (clojure.core/assoc :application-id (deser-string (clojure.core/get-in letvar468415 ["applicationId"]))) (letvar468415 "creationTime") (clojure.core/assoc :creation-time (deser-string (clojure.core/get-in letvar468415 ["creationTime"]))) (letvar468415 "expirationTime") (clojure.core/assoc :expiration-time (deser-string (clojure.core/get-in letvar468415 ["expirationTime"]))) (letvar468415 "semanticVersion") (clojure.core/assoc :semantic-version (deser-string (clojure.core/get-in letvar468415 ["semanticVersion"]))) (letvar468415 "status") (clojure.core/assoc :status (deser-status (clojure.core/get-in letvar468415 ["status"]))) (letvar468415 "templateId") (clojure.core/assoc :template-id (deser-string (clojure.core/get-in letvar468415 ["templateId"]))) (letvar468415 "templateUrl") (clojure.core/assoc :template-url (deser-string (clojure.core/get-in letvar468415 ["templateUrl"])))))))

(clojure.core/defn- response-internal-server-error-exception ([input] (response-internal-server-error-exception nil input)) ([resultWrapper468417 input] (clojure.core/let [rawinput468416 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar468418 {"errorCode" (rawinput468416 "errorCode"), "message" (rawinput468416 "message")}] (clojure.core/cond-> {} (letvar468418 "errorCode") (clojure.core/assoc :error-code (deser-string (clojure.core/get-in letvar468418 ["errorCode"]))) (letvar468418 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar468418 ["message"])))))))

(clojure.core/defn- response-bad-request-exception ([input] (response-bad-request-exception nil input)) ([resultWrapper468420 input] (clojure.core/let [rawinput468419 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar468421 {"errorCode" (rawinput468419 "errorCode"), "message" (rawinput468419 "message")}] (clojure.core/cond-> {} (letvar468421 "errorCode") (clojure.core/assoc :error-code (deser-string (clojure.core/get-in letvar468421 ["errorCode"]))) (letvar468421 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar468421 ["message"])))))))

(clojure.core/defn- response-get-cloud-formation-template-response ([input] (response-get-cloud-formation-template-response nil input)) ([resultWrapper468423 input] (clojure.core/let [rawinput468422 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar468424 {"applicationId" (rawinput468422 "applicationId"), "creationTime" (rawinput468422 "creationTime"), "expirationTime" (rawinput468422 "expirationTime"), "semanticVersion" (rawinput468422 "semanticVersion"), "status" (rawinput468422 "status"), "templateId" (rawinput468422 "templateId"), "templateUrl" (rawinput468422 "templateUrl")}] (clojure.core/cond-> {} (letvar468424 "applicationId") (clojure.core/assoc :application-id (deser-string (clojure.core/get-in letvar468424 ["applicationId"]))) (letvar468424 "creationTime") (clojure.core/assoc :creation-time (deser-string (clojure.core/get-in letvar468424 ["creationTime"]))) (letvar468424 "expirationTime") (clojure.core/assoc :expiration-time (deser-string (clojure.core/get-in letvar468424 ["expirationTime"]))) (letvar468424 "semanticVersion") (clojure.core/assoc :semantic-version (deser-string (clojure.core/get-in letvar468424 ["semanticVersion"]))) (letvar468424 "status") (clojure.core/assoc :status (deser-status (clojure.core/get-in letvar468424 ["status"]))) (letvar468424 "templateId") (clojure.core/assoc :template-id (deser-string (clojure.core/get-in letvar468424 ["templateId"]))) (letvar468424 "templateUrl") (clojure.core/assoc :template-url (deser-string (clojure.core/get-in letvar468424 ["templateUrl"])))))))

(clojure.core/defn- response-list-application-versions-response ([input] (response-list-application-versions-response nil input)) ([resultWrapper468426 input] (clojure.core/let [rawinput468425 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar468427 {"nextToken" (rawinput468425 "nextToken"), "versions" (rawinput468425 "versions")}] (clojure.core/cond-> {} (letvar468427 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar468427 ["nextToken"]))) (letvar468427 "versions") (clojure.core/assoc :versions (deser-list-of-version-summary (clojure.core/get-in letvar468427 ["versions"])))))))

(clojure.core/defn- response-forbidden-exception ([input] (response-forbidden-exception nil input)) ([resultWrapper468429 input] (clojure.core/let [rawinput468428 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar468430 {"errorCode" (rawinput468428 "errorCode"), "message" (rawinput468428 "message")}] (clojure.core/cond-> {} (letvar468430 "errorCode") (clojure.core/assoc :error-code (deser-string (clojure.core/get-in letvar468430 ["errorCode"]))) (letvar468430 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar468430 ["message"])))))))

(clojure.core/defn- response-update-application-response ([input] (response-update-application-response nil input)) ([resultWrapper468432 input] (clojure.core/let [rawinput468431 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar468433 {"spdxLicenseId" (rawinput468431 "spdxLicenseId"), "applicationId" (rawinput468431 "applicationId"), "author" (rawinput468431 "author"), "name" (rawinput468431 "name"), "labels" (rawinput468431 "labels"), "homePageUrl" (rawinput468431 "homePageUrl"), "creationTime" (rawinput468431 "creationTime"), "version" (rawinput468431 "version"), "readmeUrl" (rawinput468431 "readmeUrl"), "licenseUrl" (rawinput468431 "licenseUrl"), "description" (rawinput468431 "description")}] (clojure.core/cond-> {} (letvar468433 "licenseUrl") (clojure.core/assoc :license-url (deser-string (clojure.core/get-in letvar468433 ["licenseUrl"]))) (letvar468433 "spdxLicenseId") (clojure.core/assoc :spdx-license-id (deser-string (clojure.core/get-in letvar468433 ["spdxLicenseId"]))) (letvar468433 "applicationId") (clojure.core/assoc :application-id (deser-string (clojure.core/get-in letvar468433 ["applicationId"]))) (letvar468433 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar468433 ["description"]))) (letvar468433 "labels") (clojure.core/assoc :labels (deser-list-of-string (clojure.core/get-in letvar468433 ["labels"]))) (letvar468433 "homePageUrl") (clojure.core/assoc :home-page-url (deser-string (clojure.core/get-in letvar468433 ["homePageUrl"]))) (letvar468433 "readmeUrl") (clojure.core/assoc :readme-url (deser-string (clojure.core/get-in letvar468433 ["readmeUrl"]))) (letvar468433 "creationTime") (clojure.core/assoc :creation-time (deser-string (clojure.core/get-in letvar468433 ["creationTime"]))) (letvar468433 "author") (clojure.core/assoc :author (deser-string (clojure.core/get-in letvar468433 ["author"]))) (letvar468433 "version") (clojure.core/assoc :version (deser-version (clojure.core/get-in letvar468433 ["version"]))) (letvar468433 "name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar468433 ["name"])))))))

(clojure.core/defn- response-too-many-requests-exception ([input] (response-too-many-requests-exception nil input)) ([resultWrapper468435 input] (clojure.core/let [rawinput468434 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar468436 {"errorCode" (rawinput468434 "errorCode"), "message" (rawinput468434 "message")}] (clojure.core/cond-> {} (letvar468436 "errorCode") (clojure.core/assoc :error-code (deser-string (clojure.core/get-in letvar468436 ["errorCode"]))) (letvar468436 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar468436 ["message"])))))))

(clojure.core/defn- response-create-application-version-response ([input] (response-create-application-version-response nil input)) ([resultWrapper468438 input] (clojure.core/let [rawinput468437 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar468439 {"applicationId" (rawinput468437 "applicationId"), "creationTime" (rawinput468437 "creationTime"), "parameterDefinitions" (rawinput468437 "parameterDefinitions"), "requiredCapabilities" (rawinput468437 "requiredCapabilities"), "resourcesSupported" (rawinput468437 "resourcesSupported"), "semanticVersion" (rawinput468437 "semanticVersion"), "sourceCodeUrl" (rawinput468437 "sourceCodeUrl"), "templateUrl" (rawinput468437 "templateUrl")}] (clojure.core/cond-> {} (letvar468439 "applicationId") (clojure.core/assoc :application-id (deser-string (clojure.core/get-in letvar468439 ["applicationId"]))) (letvar468439 "creationTime") (clojure.core/assoc :creation-time (deser-string (clojure.core/get-in letvar468439 ["creationTime"]))) (letvar468439 "parameterDefinitions") (clojure.core/assoc :parameter-definitions (deser-list-of-parameter-definition (clojure.core/get-in letvar468439 ["parameterDefinitions"]))) (letvar468439 "requiredCapabilities") (clojure.core/assoc :required-capabilities (deser-list-of-capability (clojure.core/get-in letvar468439 ["requiredCapabilities"]))) (letvar468439 "resourcesSupported") (clojure.core/assoc :resources-supported (deser-boolean (clojure.core/get-in letvar468439 ["resourcesSupported"]))) (letvar468439 "semanticVersion") (clojure.core/assoc :semantic-version (deser-string (clojure.core/get-in letvar468439 ["semanticVersion"]))) (letvar468439 "sourceCodeUrl") (clojure.core/assoc :source-code-url (deser-string (clojure.core/get-in letvar468439 ["sourceCodeUrl"]))) (letvar468439 "templateUrl") (clojure.core/assoc :template-url (deser-string (clojure.core/get-in letvar468439 ["templateUrl"])))))))

(clojure.core/defn- response-conflict-exception ([input] (response-conflict-exception nil input)) ([resultWrapper468441 input] (clojure.core/let [rawinput468440 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar468442 {"errorCode" (rawinput468440 "errorCode"), "message" (rawinput468440 "message")}] (clojure.core/cond-> {} (letvar468442 "errorCode") (clojure.core/assoc :error-code (deser-string (clojure.core/get-in letvar468442 ["errorCode"]))) (letvar468442 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar468442 ["message"])))))))

(clojure.core/defn- response-not-found-exception ([input] (response-not-found-exception nil input)) ([resultWrapper468444 input] (clojure.core/let [rawinput468443 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar468445 {"errorCode" (rawinput468443 "errorCode"), "message" (rawinput468443 "message")}] (clojure.core/cond-> {} (letvar468445 "errorCode") (clojure.core/assoc :error-code (deser-string (clojure.core/get-in letvar468445 ["errorCode"]))) (letvar468445 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar468445 ["message"])))))))

(clojure.core/defn- response-create-application-response ([input] (response-create-application-response nil input)) ([resultWrapper468447 input] (clojure.core/let [rawinput468446 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar468448 {"spdxLicenseId" (rawinput468446 "spdxLicenseId"), "applicationId" (rawinput468446 "applicationId"), "author" (rawinput468446 "author"), "name" (rawinput468446 "name"), "labels" (rawinput468446 "labels"), "homePageUrl" (rawinput468446 "homePageUrl"), "creationTime" (rawinput468446 "creationTime"), "version" (rawinput468446 "version"), "readmeUrl" (rawinput468446 "readmeUrl"), "licenseUrl" (rawinput468446 "licenseUrl"), "description" (rawinput468446 "description")}] (clojure.core/cond-> {} (letvar468448 "licenseUrl") (clojure.core/assoc :license-url (deser-string (clojure.core/get-in letvar468448 ["licenseUrl"]))) (letvar468448 "spdxLicenseId") (clojure.core/assoc :spdx-license-id (deser-string (clojure.core/get-in letvar468448 ["spdxLicenseId"]))) (letvar468448 "applicationId") (clojure.core/assoc :application-id (deser-string (clojure.core/get-in letvar468448 ["applicationId"]))) (letvar468448 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar468448 ["description"]))) (letvar468448 "labels") (clojure.core/assoc :labels (deser-list-of-string (clojure.core/get-in letvar468448 ["labels"]))) (letvar468448 "homePageUrl") (clojure.core/assoc :home-page-url (deser-string (clojure.core/get-in letvar468448 ["homePageUrl"]))) (letvar468448 "readmeUrl") (clojure.core/assoc :readme-url (deser-string (clojure.core/get-in letvar468448 ["readmeUrl"]))) (letvar468448 "creationTime") (clojure.core/assoc :creation-time (deser-string (clojure.core/get-in letvar468448 ["creationTime"]))) (letvar468448 "author") (clojure.core/assoc :author (deser-string (clojure.core/get-in letvar468448 ["author"]))) (letvar468448 "version") (clojure.core/assoc :version (deser-version (clojure.core/get-in letvar468448 ["version"]))) (letvar468448 "name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar468448 ["name"])))))))

(clojure.core/defn- response-list-application-dependencies-response ([input] (response-list-application-dependencies-response nil input)) ([resultWrapper468450 input] (clojure.core/let [rawinput468449 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar468451 {"dependencies" (rawinput468449 "dependencies"), "nextToken" (rawinput468449 "nextToken")}] (clojure.core/cond-> {} (letvar468451 "dependencies") (clojure.core/assoc :dependencies (deser-list-of-application-dependency-summary (clojure.core/get-in letvar468451 ["dependencies"]))) (letvar468451 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar468451 ["nextToken"])))))))

(clojure.core/defn- response-get-application-response ([input] (response-get-application-response nil input)) ([resultWrapper468453 input] (clojure.core/let [rawinput468452 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar468454 {"spdxLicenseId" (rawinput468452 "spdxLicenseId"), "applicationId" (rawinput468452 "applicationId"), "author" (rawinput468452 "author"), "name" (rawinput468452 "name"), "labels" (rawinput468452 "labels"), "homePageUrl" (rawinput468452 "homePageUrl"), "creationTime" (rawinput468452 "creationTime"), "version" (rawinput468452 "version"), "readmeUrl" (rawinput468452 "readmeUrl"), "licenseUrl" (rawinput468452 "licenseUrl"), "description" (rawinput468452 "description")}] (clojure.core/cond-> {} (letvar468454 "licenseUrl") (clojure.core/assoc :license-url (deser-string (clojure.core/get-in letvar468454 ["licenseUrl"]))) (letvar468454 "spdxLicenseId") (clojure.core/assoc :spdx-license-id (deser-string (clojure.core/get-in letvar468454 ["spdxLicenseId"]))) (letvar468454 "applicationId") (clojure.core/assoc :application-id (deser-string (clojure.core/get-in letvar468454 ["applicationId"]))) (letvar468454 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar468454 ["description"]))) (letvar468454 "labels") (clojure.core/assoc :labels (deser-list-of-string (clojure.core/get-in letvar468454 ["labels"]))) (letvar468454 "homePageUrl") (clojure.core/assoc :home-page-url (deser-string (clojure.core/get-in letvar468454 ["homePageUrl"]))) (letvar468454 "readmeUrl") (clojure.core/assoc :readme-url (deser-string (clojure.core/get-in letvar468454 ["readmeUrl"]))) (letvar468454 "creationTime") (clojure.core/assoc :creation-time (deser-string (clojure.core/get-in letvar468454 ["creationTime"]))) (letvar468454 "author") (clojure.core/assoc :author (deser-string (clojure.core/get-in letvar468454 ["author"]))) (letvar468454 "version") (clojure.core/assoc :version (deser-version (clojure.core/get-in letvar468454 ["version"]))) (letvar468454 "name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar468454 ["name"])))))))

(clojure.core/defn- response-get-application-policy-response ([input] (response-get-application-policy-response nil input)) ([resultWrapper468456 input] (clojure.core/let [rawinput468455 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar468457 {"statements" (rawinput468455 "statements")}] (clojure.core/cond-> {} (letvar468457 "statements") (clojure.core/assoc :statements (deser-list-of-application-policy-statement (clojure.core/get-in letvar468457 ["statements"])))))))

(clojure.core/defn- response-create-cloud-formation-change-set-response ([input] (response-create-cloud-formation-change-set-response nil input)) ([resultWrapper468459 input] (clojure.core/let [rawinput468458 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar468460 {"applicationId" (rawinput468458 "applicationId"), "changeSetId" (rawinput468458 "changeSetId"), "semanticVersion" (rawinput468458 "semanticVersion"), "stackId" (rawinput468458 "stackId")}] (clojure.core/cond-> {} (letvar468460 "applicationId") (clojure.core/assoc :application-id (deser-string (clojure.core/get-in letvar468460 ["applicationId"]))) (letvar468460 "changeSetId") (clojure.core/assoc :change-set-id (deser-string (clojure.core/get-in letvar468460 ["changeSetId"]))) (letvar468460 "semanticVersion") (clojure.core/assoc :semantic-version (deser-string (clojure.core/get-in letvar468460 ["semanticVersion"]))) (letvar468460 "stackId") (clojure.core/assoc :stack-id (deser-string (clojure.core/get-in letvar468460 ["stackId"])))))))

(clojure.core/defn- response-put-application-policy-response ([input] (response-put-application-policy-response nil input)) ([resultWrapper468462 input] (clojure.core/let [rawinput468461 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar468463 {"statements" (rawinput468461 "statements")}] (clojure.core/cond-> {} (letvar468463 "statements") (clojure.core/assoc :statements (deser-list-of-application-policy-statement (clojure.core/get-in letvar468463 ["statements"])))))))

(clojure.core/defn- response-list-applications-response ([input] (response-list-applications-response nil input)) ([resultWrapper468465 input] (clojure.core/let [rawinput468464 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar468466 {"applications" (rawinput468464 "applications"), "nextToken" (rawinput468464 "nextToken")}] (clojure.core/cond-> {} (letvar468466 "applications") (clojure.core/assoc :applications (deser-list-of-application-summary (clojure.core/get-in letvar468466 ["applications"]))) (letvar468466 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar468466 ["nextToken"])))))))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-template-response/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-template-response/creation-time (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-template-response/expiration-time (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-template-response/semantic-version (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-template-response/template-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-template-response/template-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/create-cloud-formation-template-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-template-response/application-id :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-template-response/creation-time :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-template-response/expiration-time :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-template-response/semantic-version :portkey.aws.serverlessrepo.-2017-09-08/status :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-template-response/template-id :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-template-response/template-url]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application/license-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application/spdx-license-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application/description (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application/labels (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application/home-page-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application/readme-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application/creation-time (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application/author (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application/name (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/application (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.application/description :portkey.aws.serverlessrepo.-2017-09-08.application/author :portkey.aws.serverlessrepo.-2017-09-08.application/application-id :portkey.aws.serverlessrepo.-2017-09-08.application/name] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.application/license-url :portkey.aws.serverlessrepo.-2017-09-08.application/spdx-license-id :portkey.aws.serverlessrepo.-2017-09-08.application/labels :portkey.aws.serverlessrepo.-2017-09-08.application/home-page-url :portkey.aws.serverlessrepo.-2017-09-08.application/readme-url :portkey.aws.serverlessrepo.-2017-09-08.application/creation-time :portkey.aws.serverlessrepo.-2017-09-08/version]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.internal-server-error-exception/error-code (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.internal-server-error-exception/message (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/internal-server-error-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.internal-server-error-exception/error-code :portkey.aws.serverlessrepo.-2017-09-08.internal-server-error-exception/message]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application-policy-statement/actions (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application-policy-statement/principals (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application-policy-statement/statement-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/application-policy-statement (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.application-policy-statement/principals :portkey.aws.serverlessrepo.-2017-09-08.application-policy-statement/actions] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.application-policy-statement/statement-id]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/list-of-application-summary (clojure.spec.alpha/coll-of :portkey.aws.serverlessrepo.-2017-09-08/application-summary))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.rollback-configuration/monitoring-time-in-minutes (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/integer))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.rollback-configuration/rollback-triggers (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-rollback-trigger))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/rollback-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.rollback-configuration/monitoring-time-in-minutes :portkey.aws.serverlessrepo.-2017-09-08.rollback-configuration/rollback-triggers]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.get-cloud-formation-template-request/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.get-cloud-formation-template-request/template-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/get-cloud-formation-template-request (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.get-cloud-formation-template-request/application-id :portkey.aws.serverlessrepo.-2017-09-08.get-cloud-formation-template-request/template-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.bad-request-exception/error-code (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.bad-request-exception/message (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/bad-request-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.bad-request-exception/error-code :portkey.aws.serverlessrepo.-2017-09-08.bad-request-exception/message]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/license-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/template-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/readme-body (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/source-code-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/template-body (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/spdx-license-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/description (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/labels (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/license-body (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/home-page-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/readme-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/author (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/name (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/semantic-version (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/create-application-request (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.create-application-request/description :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/name :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/author] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.create-application-request/license-url :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/template-url :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/readme-body :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/source-code-url :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/template-body :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/spdx-license-id :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/labels :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/license-body :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/home-page-url :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/readme-url :portkey.aws.serverlessrepo.-2017-09-08.create-application-request/semantic-version]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application-policy/statements (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-application-policy-statement))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/application-policy (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.application-policy/statements] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-input/source-code-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-input/template-body (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-input/template-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/create-application-version-input (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.create-application-version-input/source-code-url :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-input/template-body :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-input/template-url]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.get-cloud-formation-template-response/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.get-cloud-formation-template-response/creation-time (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.get-cloud-formation-template-response/expiration-time (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.get-cloud-formation-template-response/semantic-version (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.get-cloud-formation-template-response/template-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.get-cloud-formation-template-response/template-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/get-cloud-formation-template-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.get-cloud-formation-template-response/application-id :portkey.aws.serverlessrepo.-2017-09-08.get-cloud-formation-template-response/creation-time :portkey.aws.serverlessrepo.-2017-09-08.get-cloud-formation-template-response/expiration-time :portkey.aws.serverlessrepo.-2017-09-08.get-cloud-formation-template-response/semantic-version :portkey.aws.serverlessrepo.-2017-09-08/status :portkey.aws.serverlessrepo.-2017-09-08.get-cloud-formation-template-response/template-id :portkey.aws.serverlessrepo.-2017-09-08.get-cloud-formation-template-response/template-url]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/list-of-application-policy-statement (clojure.spec.alpha/coll-of :portkey.aws.serverlessrepo.-2017-09-08/application-policy-statement))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.list-application-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.list-application-versions-response/versions (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-version-summary))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/list-application-versions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.list-application-versions-response/next-token :portkey.aws.serverlessrepo.-2017-09-08.list-application-versions-response/versions]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.forbidden-exception/error-code (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.forbidden-exception/message (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/forbidden-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.forbidden-exception/error-code :portkey.aws.serverlessrepo.-2017-09-08.forbidden-exception/message]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-request/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-request/semantic-version (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-request/source-code-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-request/template-body (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-request/template-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/create-application-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.create-application-version-request/application-id :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-request/semantic-version] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.create-application-version-request/source-code-url :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-request/template-body :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-request/template-url]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application-page/applications (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-application-summary))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application-page/next-token (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/application-page (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.application-page/applications] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.application-page/next-token]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.rollback-trigger/arn (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.rollback-trigger/type (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/rollback-trigger (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.rollback-trigger/type :portkey.aws.serverlessrepo.-2017-09-08.rollback-trigger/arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-template-request/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-template-request/semantic-version (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/create-cloud-formation-template-request (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-template-request/application-id] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-template-request/semantic-version]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/list-of-version-summary (clojure.spec.alpha/coll-of :portkey.aws.serverlessrepo.-2017-09-08/version-summary))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application-summary/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application-summary/author (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application-summary/creation-time (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application-summary/description (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application-summary/home-page-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application-summary/labels (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application-summary/name (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application-summary/spdx-license-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/application-summary (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.application-summary/description :portkey.aws.serverlessrepo.-2017-09-08.application-summary/author :portkey.aws.serverlessrepo.-2017-09-08.application-summary/application-id :portkey.aws.serverlessrepo.-2017-09-08.application-summary/name] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.application-summary/creation-time :portkey.aws.serverlessrepo.-2017-09-08.application-summary/home-page-url :portkey.aws.serverlessrepo.-2017-09-08.application-summary/labels :portkey.aws.serverlessrepo.-2017-09-08.application-summary/spdx-license-id]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.update-application-response/license-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.update-application-response/spdx-license-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.update-application-response/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.update-application-response/description (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.update-application-response/labels (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.update-application-response/home-page-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.update-application-response/readme-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.update-application-response/creation-time (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.update-application-response/author (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.update-application-response/name (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/update-application-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.update-application-response/license-url :portkey.aws.serverlessrepo.-2017-09-08.update-application-response/spdx-license-id :portkey.aws.serverlessrepo.-2017-09-08.update-application-response/application-id :portkey.aws.serverlessrepo.-2017-09-08.update-application-response/description :portkey.aws.serverlessrepo.-2017-09-08.update-application-response/labels :portkey.aws.serverlessrepo.-2017-09-08.update-application-response/home-page-url :portkey.aws.serverlessrepo.-2017-09-08.update-application-response/readme-url :portkey.aws.serverlessrepo.-2017-09-08.update-application-response/creation-time :portkey.aws.serverlessrepo.-2017-09-08.update-application-response/author :portkey.aws.serverlessrepo.-2017-09-08/version :portkey.aws.serverlessrepo.-2017-09-08.update-application-response/name]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/license-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/template-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/readme-body (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/source-code-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/template-body (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/spdx-license-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/description (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/labels (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/license-body (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/home-page-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/readme-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/author (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/name (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/semantic-version (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/create-application-input (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.create-application-input/description :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/name :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/author] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.create-application-input/license-url :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/template-url :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/readme-body :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/source-code-url :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/template-body :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/spdx-license-id :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/labels :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/license-body :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/home-page-url :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/readme-url :portkey.aws.serverlessrepo.-2017-09-08.create-application-input/semantic-version]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application-version-page/next-token (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application-version-page/versions (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-version-summary))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/application-version-page (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.application-version-page/versions] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.application-version-page/next-token]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.get-application-request/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.get-application-request/semantic-version (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/get-application-request (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.get-application-request/application-id] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.get-application-request/semantic-version]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/status #{:preparing "EXPIRED" "PREPARING" :active "ACTIVE" :expired})

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application-dependency-page/dependencies (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-application-dependency-summary))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application-dependency-page/next-token (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/application-dependency-page (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.application-dependency-page/dependencies] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.application-dependency-page/next-token]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.too-many-requests-exception/error-code (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.too-many-requests-exception/message (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/too-many-requests-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.too-many-requests-exception/error-code :portkey.aws.serverlessrepo.-2017-09-08.too-many-requests-exception/message]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-response/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-response/creation-time (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-response/parameter-definitions (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-parameter-definition))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-response/required-capabilities (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-capability))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-response/resources-supported (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/boolean))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-response/semantic-version (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-response/source-code-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-response/template-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/create-application-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.create-application-version-response/application-id :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-response/creation-time :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-response/parameter-definitions :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-response/required-capabilities :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-response/resources-supported :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-response/semantic-version :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-response/source-code-url :portkey.aws.serverlessrepo.-2017-09-08.create-application-version-response/template-url]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application-dependency-summary/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.application-dependency-summary/semantic-version (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/application-dependency-summary (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.application-dependency-summary/application-id :portkey.aws.serverlessrepo.-2017-09-08.application-dependency-summary/semantic-version] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/list-of-rollback-trigger (clojure.spec.alpha/coll-of :portkey.aws.serverlessrepo.-2017-09-08/rollback-trigger))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/list-of-parameter-definition (clojure.spec.alpha/coll-of :portkey.aws.serverlessrepo.-2017-09-08/parameter-definition))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.version-summary/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.version-summary/creation-time (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.version-summary/semantic-version (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.version-summary/source-code-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/version-summary (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.version-summary/creation-time :portkey.aws.serverlessrepo.-2017-09-08.version-summary/application-id :portkey.aws.serverlessrepo.-2017-09-08.version-summary/semantic-version] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.version-summary/source-code-url]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/capability #{:capability-resource-policy :capability-named-iam :capability-iam "CAPABILITY_NAMED_IAM" "CAPABILITY_RESOURCE_POLICY" "CAPABILITY_IAM" :capability-auto-expand "CAPABILITY_AUTO_EXPAND"})

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.change-set-details/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.change-set-details/change-set-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.change-set-details/semantic-version (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.change-set-details/stack-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/change-set-details (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.change-set-details/change-set-id :portkey.aws.serverlessrepo.-2017-09-08.change-set-details/application-id :portkey.aws.serverlessrepo.-2017-09-08.change-set-details/stack-id :portkey.aws.serverlessrepo.-2017-09-08.change-set-details/semantic-version] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/list-of-string (clojure.spec.alpha/coll-of :portkey.aws.serverlessrepo.-2017-09-08/string))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.put-application-policy-request/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.put-application-policy-request/statements (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-application-policy-statement))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/put-application-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.put-application-policy-request/application-id :portkey.aws.serverlessrepo.-2017-09-08.put-application-policy-request/statements] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.conflict-exception/error-code (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.conflict-exception/message (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/conflict-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.conflict-exception/error-code :portkey.aws.serverlessrepo.-2017-09-08.conflict-exception/message]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.template-details/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.template-details/creation-time (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.template-details/expiration-time (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.template-details/semantic-version (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.template-details/template-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.template-details/template-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/template-details (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08/status :portkey.aws.serverlessrepo.-2017-09-08.template-details/template-url :portkey.aws.serverlessrepo.-2017-09-08.template-details/creation-time :portkey.aws.serverlessrepo.-2017-09-08.template-details/expiration-time :portkey.aws.serverlessrepo.-2017-09-08.template-details/application-id :portkey.aws.serverlessrepo.-2017-09-08.template-details/template-id :portkey.aws.serverlessrepo.-2017-09-08.template-details/semantic-version] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.not-found-exception/error-code (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.not-found-exception/message (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/not-found-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.not-found-exception/error-code :portkey.aws.serverlessrepo.-2017-09-08.not-found-exception/message]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.list-applications-request/next-token (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/list-applications-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08/max-items :portkey.aws.serverlessrepo.-2017-09-08.list-applications-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-response/license-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-response/spdx-license-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-response/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-response/description (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-response/labels (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-response/home-page-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-response/readme-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-response/creation-time (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-response/author (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-application-response/name (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/create-application-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.create-application-response/license-url :portkey.aws.serverlessrepo.-2017-09-08.create-application-response/spdx-license-id :portkey.aws.serverlessrepo.-2017-09-08.create-application-response/application-id :portkey.aws.serverlessrepo.-2017-09-08.create-application-response/description :portkey.aws.serverlessrepo.-2017-09-08.create-application-response/labels :portkey.aws.serverlessrepo.-2017-09-08.create-application-response/home-page-url :portkey.aws.serverlessrepo.-2017-09-08.create-application-response/readme-url :portkey.aws.serverlessrepo.-2017-09-08.create-application-response/creation-time :portkey.aws.serverlessrepo.-2017-09-08.create-application-response/author :portkey.aws.serverlessrepo.-2017-09-08/version :portkey.aws.serverlessrepo.-2017-09-08.create-application-response/name]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.list-application-dependencies-response/dependencies (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-application-dependency-summary))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.list-application-dependencies-response/next-token (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/list-application-dependencies-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.list-application-dependencies-response/dependencies :portkey.aws.serverlessrepo.-2017-09-08.list-application-dependencies-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/max-items (clojure.spec.alpha/int-in 1 100))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.get-application-policy-request/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/get-application-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.get-application-policy-request/application-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-request/change-set-name (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-request/tags (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-tag))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-request/capabilities (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-request/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-request/notification-arns (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-request/description (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-request/template-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-request/stack-name (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-request/resource-types (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-request/parameter-overrides (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-parameter-value))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-request/client-token (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-request/semantic-version (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/create-cloud-formation-change-set-request (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-request/application-id :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-request/stack-name] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08/rollback-configuration :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-request/change-set-name :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-request/tags :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-request/capabilities :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-request/notification-arns :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-request/description :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-request/template-id :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-request/resource-types :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-request/parameter-overrides :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-request/client-token :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-request/semantic-version]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.delete-application-request/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/delete-application-request (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.delete-application-request/application-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.get-application-response/license-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.get-application-response/spdx-license-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.get-application-response/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.get-application-response/description (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.get-application-response/labels (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.get-application-response/home-page-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.get-application-response/readme-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.get-application-response/creation-time (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.get-application-response/author (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.get-application-response/name (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/get-application-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.get-application-response/license-url :portkey.aws.serverlessrepo.-2017-09-08.get-application-response/spdx-license-id :portkey.aws.serverlessrepo.-2017-09-08.get-application-response/application-id :portkey.aws.serverlessrepo.-2017-09-08.get-application-response/description :portkey.aws.serverlessrepo.-2017-09-08.get-application-response/labels :portkey.aws.serverlessrepo.-2017-09-08.get-application-response/home-page-url :portkey.aws.serverlessrepo.-2017-09-08.get-application-response/readme-url :portkey.aws.serverlessrepo.-2017-09-08.get-application-response/creation-time :portkey.aws.serverlessrepo.-2017-09-08.get-application-response/author :portkey.aws.serverlessrepo.-2017-09-08/version :portkey.aws.serverlessrepo.-2017-09-08.get-application-response/name]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/list-of-application-dependency-summary (clojure.spec.alpha/coll-of :portkey.aws.serverlessrepo.-2017-09-08/application-dependency-summary))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.update-application-input/author (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.update-application-input/description (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.update-application-input/home-page-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.update-application-input/labels (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.update-application-input/readme-body (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.update-application-input/readme-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/update-application-input (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.update-application-input/author :portkey.aws.serverlessrepo.-2017-09-08.update-application-input/description :portkey.aws.serverlessrepo.-2017-09-08.update-application-input/home-page-url :portkey.aws.serverlessrepo.-2017-09-08.update-application-input/labels :portkey.aws.serverlessrepo.-2017-09-08.update-application-input/readme-body :portkey.aws.serverlessrepo.-2017-09-08.update-application-input/readme-url]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.tag/key (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.tag/value (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/tag (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.tag/value :portkey.aws.serverlessrepo.-2017-09-08.tag/key] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.version/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.version/creation-time (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.version/parameter-definitions (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-parameter-definition))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.version/required-capabilities (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-capability))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.version/resources-supported (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/boolean))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.version/semantic-version (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.version/source-code-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.version/template-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/version (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.version/template-url :portkey.aws.serverlessrepo.-2017-09-08.version/parameter-definitions :portkey.aws.serverlessrepo.-2017-09-08.version/resources-supported :portkey.aws.serverlessrepo.-2017-09-08.version/creation-time :portkey.aws.serverlessrepo.-2017-09-08.version/required-capabilities :portkey.aws.serverlessrepo.-2017-09-08.version/application-id :portkey.aws.serverlessrepo.-2017-09-08.version/semantic-version] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.version/source-code-url]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.get-application-policy-response/statements (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-application-policy-statement))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/get-application-policy-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.get-application-policy-response/statements]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/type (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/min-value (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/integer))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/allowed-values (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/min-length (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/integer))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/max-value (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/integer))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/max-length (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/integer))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/allowed-pattern (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/description (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/referenced-by-resources (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/default-value (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/no-echo (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/boolean))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/constraint-description (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/name (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/parameter-definition (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/referenced-by-resources :portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/name] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/type :portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/min-value :portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/allowed-values :portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/min-length :portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/max-value :portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/max-length :portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/allowed-pattern :portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/description :portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/default-value :portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/no-echo :portkey.aws.serverlessrepo.-2017-09-08.parameter-definition/constraint-description]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/integer clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-input/change-set-name (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-input/tags (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-tag))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-input/capabilities (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-input/notification-arns (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-input/description (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-input/template-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-input/stack-name (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-input/resource-types (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-input/parameter-overrides (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-parameter-value))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-input/client-token (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-input/semantic-version (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/create-cloud-formation-change-set-input (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-input/stack-name] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08/rollback-configuration :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-input/change-set-name :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-input/tags :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-input/capabilities :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-input/notification-arns :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-input/description :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-input/template-id :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-input/resource-types :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-input/parameter-overrides :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-input/client-token :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-input/semantic-version]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/list-of-tag (clojure.spec.alpha/coll-of :portkey.aws.serverlessrepo.-2017-09-08/tag))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-response/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-response/change-set-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-response/semantic-version (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-response/stack-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/create-cloud-formation-change-set-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-response/application-id :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-response/change-set-id :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-response/semantic-version :portkey.aws.serverlessrepo.-2017-09-08.create-cloud-formation-change-set-response/stack-id]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.list-application-versions-request/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.list-application-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/list-application-versions-request (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.list-application-versions-request/application-id] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08/max-items :portkey.aws.serverlessrepo.-2017-09-08.list-application-versions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.put-application-policy-response/statements (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-application-policy-statement))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/put-application-policy-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.put-application-policy-response/statements]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/list-of-capability (clojure.spec.alpha/coll-of :portkey.aws.serverlessrepo.-2017-09-08/capability))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.list-applications-response/applications (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-application-summary))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.list-applications-response/next-token (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/list-applications-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.list-applications-response/applications :portkey.aws.serverlessrepo.-2017-09-08.list-applications-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.update-application-request/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.update-application-request/author (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.update-application-request/description (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.update-application-request/home-page-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.update-application-request/labels (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-of-string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.update-application-request/readme-body (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.update-application-request/readme-url (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/update-application-request (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.update-application-request/application-id] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08.update-application-request/author :portkey.aws.serverlessrepo.-2017-09-08.update-application-request/description :portkey.aws.serverlessrepo.-2017-09-08.update-application-request/home-page-url :portkey.aws.serverlessrepo.-2017-09-08.update-application-request/labels :portkey.aws.serverlessrepo.-2017-09-08.update-application-request/readme-body :portkey.aws.serverlessrepo.-2017-09-08.update-application-request/readme-url]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.list-application-dependencies-request/application-id (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.list-application-dependencies-request/next-token (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.list-application-dependencies-request/semantic-version (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/list-application-dependencies-request (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.list-application-dependencies-request/application-id] :opt-un [:portkey.aws.serverlessrepo.-2017-09-08/max-items :portkey.aws.serverlessrepo.-2017-09-08.list-application-dependencies-request/next-token :portkey.aws.serverlessrepo.-2017-09-08.list-application-dependencies-request/semantic-version]))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.parameter-value/name (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08.parameter-value/value (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/string))
(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/parameter-value (clojure.spec.alpha/keys :req-un [:portkey.aws.serverlessrepo.-2017-09-08.parameter-value/value :portkey.aws.serverlessrepo.-2017-09-08.parameter-value/name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.serverlessrepo.-2017-09-08/list-of-parameter-value (clojure.spec.alpha/coll-of :portkey.aws.serverlessrepo.-2017-09-08/parameter-value))

(clojure.core/defn list-applications "Lists applications owned by the requester." ([] (list-applications {})) ([list-applications-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-list-applications-request list-applications-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.serverlessrepo.-2017-09-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.serverlessrepo.-2017-09-08/list-applications-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/applications", :http.request.configuration/version "2017-09-08", :http.request.configuration/service-id "ServerlessApplicationRepository", :http.request.spec/input-spec :portkey.aws.serverlessrepo.-2017-09-08/list-applications-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListApplications", :http.request.configuration/output-deser-fn response-list-applications-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.serverlessrepo.-2017-09-08/not-found-exception, "BadRequestException" :portkey.aws.serverlessrepo.-2017-09-08/bad-request-exception, "InternalServerErrorException" :portkey.aws.serverlessrepo.-2017-09-08/internal-server-error-exception, "ForbiddenException" :portkey.aws.serverlessrepo.-2017-09-08/forbidden-exception}})))))
(clojure.spec.alpha/fdef list-applications :args (clojure.spec.alpha/? :portkey.aws.serverlessrepo.-2017-09-08/list-applications-request) :ret (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-applications-response))

(clojure.core/defn create-application-version "Creates an application version." ([create-application-version-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-create-application-version-request create-application-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.serverlessrepo.-2017-09-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.serverlessrepo.-2017-09-08/create-application-version-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/applications/{applicationId}/versions/{semanticVersion}", :http.request.configuration/version "2017-09-08", :http.request.configuration/service-id "ServerlessApplicationRepository", :http.request.spec/input-spec :portkey.aws.serverlessrepo.-2017-09-08/create-application-version-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 201, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateApplicationVersion", :http.request.configuration/output-deser-fn response-create-application-version-response, :http.request.spec/error-spec {"TooManyRequestsException" :portkey.aws.serverlessrepo.-2017-09-08/too-many-requests-exception, "BadRequestException" :portkey.aws.serverlessrepo.-2017-09-08/bad-request-exception, "InternalServerErrorException" :portkey.aws.serverlessrepo.-2017-09-08/internal-server-error-exception, "ConflictException" :portkey.aws.serverlessrepo.-2017-09-08/conflict-exception, "ForbiddenException" :portkey.aws.serverlessrepo.-2017-09-08/forbidden-exception}})))))
(clojure.spec.alpha/fdef create-application-version :args (clojure.spec.alpha/tuple :portkey.aws.serverlessrepo.-2017-09-08/create-application-version-request) :ret (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/create-application-version-response))

(clojure.core/defn delete-application "Deletes the specified application." ([delete-application-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-delete-application-request delete-application-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.serverlessrepo.-2017-09-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/applications/{applicationId}", :http.request.configuration/version "2017-09-08", :http.request.configuration/service-id "ServerlessApplicationRepository", :http.request.spec/input-spec :portkey.aws.serverlessrepo.-2017-09-08/delete-application-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 204, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteApplication", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22152__auto__] {}), :http.request.spec/error-spec {"BadRequestException" :portkey.aws.serverlessrepo.-2017-09-08/bad-request-exception, "InternalServerErrorException" :portkey.aws.serverlessrepo.-2017-09-08/internal-server-error-exception, "ForbiddenException" :portkey.aws.serverlessrepo.-2017-09-08/forbidden-exception, "NotFoundException" :portkey.aws.serverlessrepo.-2017-09-08/not-found-exception, "TooManyRequestsException" :portkey.aws.serverlessrepo.-2017-09-08/too-many-requests-exception, "ConflictException" :portkey.aws.serverlessrepo.-2017-09-08/conflict-exception}})))))
(clojure.spec.alpha/fdef delete-application :args (clojure.spec.alpha/tuple :portkey.aws.serverlessrepo.-2017-09-08/delete-application-request) :ret clojure.core/true?)

(clojure.core/defn list-application-dependencies "Retrieves the list of applications nested in the containing application." ([list-application-dependencies-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-list-application-dependencies-request list-application-dependencies-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.serverlessrepo.-2017-09-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.serverlessrepo.-2017-09-08/list-application-dependencies-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/applications/{applicationId}/dependencies", :http.request.configuration/version "2017-09-08", :http.request.configuration/service-id "ServerlessApplicationRepository", :http.request.spec/input-spec :portkey.aws.serverlessrepo.-2017-09-08/list-application-dependencies-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListApplicationDependencies", :http.request.configuration/output-deser-fn response-list-application-dependencies-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.serverlessrepo.-2017-09-08/not-found-exception, "TooManyRequestsException" :portkey.aws.serverlessrepo.-2017-09-08/too-many-requests-exception, "BadRequestException" :portkey.aws.serverlessrepo.-2017-09-08/bad-request-exception, "InternalServerErrorException" :portkey.aws.serverlessrepo.-2017-09-08/internal-server-error-exception, "ForbiddenException" :portkey.aws.serverlessrepo.-2017-09-08/forbidden-exception}})))))
(clojure.spec.alpha/fdef list-application-dependencies :args (clojure.spec.alpha/tuple :portkey.aws.serverlessrepo.-2017-09-08/list-application-dependencies-request) :ret (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-application-dependencies-response))

(clojure.core/defn get-application "Gets the specified application." ([get-application-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-application-request get-application-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.serverlessrepo.-2017-09-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.serverlessrepo.-2017-09-08/get-application-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/applications/{applicationId}", :http.request.configuration/version "2017-09-08", :http.request.configuration/service-id "ServerlessApplicationRepository", :http.request.spec/input-spec :portkey.aws.serverlessrepo.-2017-09-08/get-application-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetApplication", :http.request.configuration/output-deser-fn response-get-application-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.serverlessrepo.-2017-09-08/not-found-exception, "TooManyRequestsException" :portkey.aws.serverlessrepo.-2017-09-08/too-many-requests-exception, "BadRequestException" :portkey.aws.serverlessrepo.-2017-09-08/bad-request-exception, "InternalServerErrorException" :portkey.aws.serverlessrepo.-2017-09-08/internal-server-error-exception, "ForbiddenException" :portkey.aws.serverlessrepo.-2017-09-08/forbidden-exception}})))))
(clojure.spec.alpha/fdef get-application :args (clojure.spec.alpha/tuple :portkey.aws.serverlessrepo.-2017-09-08/get-application-request) :ret (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/get-application-response))

(clojure.core/defn create-cloud-formation-template "Creates an AWS CloudFormation template." ([create-cloud-formation-template-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-create-cloud-formation-template-request create-cloud-formation-template-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.serverlessrepo.-2017-09-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.serverlessrepo.-2017-09-08/create-cloud-formation-template-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/applications/{applicationId}/templates", :http.request.configuration/version "2017-09-08", :http.request.configuration/service-id "ServerlessApplicationRepository", :http.request.spec/input-spec :portkey.aws.serverlessrepo.-2017-09-08/create-cloud-formation-template-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 201, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateCloudFormationTemplate", :http.request.configuration/output-deser-fn response-create-cloud-formation-template-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.serverlessrepo.-2017-09-08/not-found-exception, "TooManyRequestsException" :portkey.aws.serverlessrepo.-2017-09-08/too-many-requests-exception, "BadRequestException" :portkey.aws.serverlessrepo.-2017-09-08/bad-request-exception, "InternalServerErrorException" :portkey.aws.serverlessrepo.-2017-09-08/internal-server-error-exception, "ForbiddenException" :portkey.aws.serverlessrepo.-2017-09-08/forbidden-exception}})))))
(clojure.spec.alpha/fdef create-cloud-formation-template :args (clojure.spec.alpha/tuple :portkey.aws.serverlessrepo.-2017-09-08/create-cloud-formation-template-request) :ret (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/create-cloud-formation-template-response))

(clojure.core/defn update-application "Updates the specified application." ([update-application-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-update-application-request update-application-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.serverlessrepo.-2017-09-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.serverlessrepo.-2017-09-08/update-application-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/applications/{applicationId}", :http.request.configuration/version "2017-09-08", :http.request.configuration/service-id "ServerlessApplicationRepository", :http.request.spec/input-spec :portkey.aws.serverlessrepo.-2017-09-08/update-application-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :patch, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateApplication", :http.request.configuration/output-deser-fn response-update-application-response, :http.request.spec/error-spec {"BadRequestException" :portkey.aws.serverlessrepo.-2017-09-08/bad-request-exception, "InternalServerErrorException" :portkey.aws.serverlessrepo.-2017-09-08/internal-server-error-exception, "ForbiddenException" :portkey.aws.serverlessrepo.-2017-09-08/forbidden-exception, "NotFoundException" :portkey.aws.serverlessrepo.-2017-09-08/not-found-exception, "TooManyRequestsException" :portkey.aws.serverlessrepo.-2017-09-08/too-many-requests-exception, "ConflictException" :portkey.aws.serverlessrepo.-2017-09-08/conflict-exception}})))))
(clojure.spec.alpha/fdef update-application :args (clojure.spec.alpha/tuple :portkey.aws.serverlessrepo.-2017-09-08/update-application-request) :ret (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/update-application-response))

(clojure.core/defn create-cloud-formation-change-set "Creates an AWS CloudFormation change set for the given application." ([create-cloud-formation-change-set-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-create-cloud-formation-change-set-request create-cloud-formation-change-set-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.serverlessrepo.-2017-09-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.serverlessrepo.-2017-09-08/create-cloud-formation-change-set-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/applications/{applicationId}/changesets", :http.request.configuration/version "2017-09-08", :http.request.configuration/service-id "ServerlessApplicationRepository", :http.request.spec/input-spec :portkey.aws.serverlessrepo.-2017-09-08/create-cloud-formation-change-set-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 201, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateCloudFormationChangeSet", :http.request.configuration/output-deser-fn response-create-cloud-formation-change-set-response, :http.request.spec/error-spec {"TooManyRequestsException" :portkey.aws.serverlessrepo.-2017-09-08/too-many-requests-exception, "BadRequestException" :portkey.aws.serverlessrepo.-2017-09-08/bad-request-exception, "InternalServerErrorException" :portkey.aws.serverlessrepo.-2017-09-08/internal-server-error-exception, "ForbiddenException" :portkey.aws.serverlessrepo.-2017-09-08/forbidden-exception}})))))
(clojure.spec.alpha/fdef create-cloud-formation-change-set :args (clojure.spec.alpha/tuple :portkey.aws.serverlessrepo.-2017-09-08/create-cloud-formation-change-set-request) :ret (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/create-cloud-formation-change-set-response))

(clojure.core/defn get-cloud-formation-template "Gets the specified AWS CloudFormation template." ([get-cloud-formation-template-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-cloud-formation-template-request get-cloud-formation-template-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.serverlessrepo.-2017-09-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.serverlessrepo.-2017-09-08/get-cloud-formation-template-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/applications/{applicationId}/templates/{templateId}", :http.request.configuration/version "2017-09-08", :http.request.configuration/service-id "ServerlessApplicationRepository", :http.request.spec/input-spec :portkey.aws.serverlessrepo.-2017-09-08/get-cloud-formation-template-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetCloudFormationTemplate", :http.request.configuration/output-deser-fn response-get-cloud-formation-template-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.serverlessrepo.-2017-09-08/not-found-exception, "TooManyRequestsException" :portkey.aws.serverlessrepo.-2017-09-08/too-many-requests-exception, "BadRequestException" :portkey.aws.serverlessrepo.-2017-09-08/bad-request-exception, "InternalServerErrorException" :portkey.aws.serverlessrepo.-2017-09-08/internal-server-error-exception, "ForbiddenException" :portkey.aws.serverlessrepo.-2017-09-08/forbidden-exception}})))))
(clojure.spec.alpha/fdef get-cloud-formation-template :args (clojure.spec.alpha/tuple :portkey.aws.serverlessrepo.-2017-09-08/get-cloud-formation-template-request) :ret (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/get-cloud-formation-template-response))

(clojure.core/defn create-application "Creates an application, optionally including an AWS SAM file to create the first\napplication version in the same call." ([create-application-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-create-application-request create-application-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.serverlessrepo.-2017-09-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.serverlessrepo.-2017-09-08/create-application-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/applications", :http.request.configuration/version "2017-09-08", :http.request.configuration/service-id "ServerlessApplicationRepository", :http.request.spec/input-spec :portkey.aws.serverlessrepo.-2017-09-08/create-application-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 201, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateApplication", :http.request.configuration/output-deser-fn response-create-application-response, :http.request.spec/error-spec {"TooManyRequestsException" :portkey.aws.serverlessrepo.-2017-09-08/too-many-requests-exception, "BadRequestException" :portkey.aws.serverlessrepo.-2017-09-08/bad-request-exception, "InternalServerErrorException" :portkey.aws.serverlessrepo.-2017-09-08/internal-server-error-exception, "ConflictException" :portkey.aws.serverlessrepo.-2017-09-08/conflict-exception, "ForbiddenException" :portkey.aws.serverlessrepo.-2017-09-08/forbidden-exception}})))))
(clojure.spec.alpha/fdef create-application :args (clojure.spec.alpha/tuple :portkey.aws.serverlessrepo.-2017-09-08/create-application-request) :ret (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/create-application-response))

(clojure.core/defn put-application-policy "Sets the permission policy for an application. For the list of actions supported\nfor this operation, see Application Permissions\n(https://docs.aws.amazon.com/serverlessrepo/latest/devguide/access-control-resource-based.html#application-permissions)\n." ([put-application-policy-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-put-application-policy-request put-application-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.serverlessrepo.-2017-09-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.serverlessrepo.-2017-09-08/put-application-policy-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/applications/{applicationId}/policy", :http.request.configuration/version "2017-09-08", :http.request.configuration/service-id "ServerlessApplicationRepository", :http.request.spec/input-spec :portkey.aws.serverlessrepo.-2017-09-08/put-application-policy-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "PutApplicationPolicy", :http.request.configuration/output-deser-fn response-put-application-policy-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.serverlessrepo.-2017-09-08/not-found-exception, "TooManyRequestsException" :portkey.aws.serverlessrepo.-2017-09-08/too-many-requests-exception, "BadRequestException" :portkey.aws.serverlessrepo.-2017-09-08/bad-request-exception, "InternalServerErrorException" :portkey.aws.serverlessrepo.-2017-09-08/internal-server-error-exception, "ForbiddenException" :portkey.aws.serverlessrepo.-2017-09-08/forbidden-exception}})))))
(clojure.spec.alpha/fdef put-application-policy :args (clojure.spec.alpha/tuple :portkey.aws.serverlessrepo.-2017-09-08/put-application-policy-request) :ret (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/put-application-policy-response))

(clojure.core/defn get-application-policy "Retrieves the policy for the application." ([get-application-policy-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-get-application-policy-request get-application-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.serverlessrepo.-2017-09-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.serverlessrepo.-2017-09-08/get-application-policy-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/applications/{applicationId}/policy", :http.request.configuration/version "2017-09-08", :http.request.configuration/service-id "ServerlessApplicationRepository", :http.request.spec/input-spec :portkey.aws.serverlessrepo.-2017-09-08/get-application-policy-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetApplicationPolicy", :http.request.configuration/output-deser-fn response-get-application-policy-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.serverlessrepo.-2017-09-08/not-found-exception, "TooManyRequestsException" :portkey.aws.serverlessrepo.-2017-09-08/too-many-requests-exception, "BadRequestException" :portkey.aws.serverlessrepo.-2017-09-08/bad-request-exception, "InternalServerErrorException" :portkey.aws.serverlessrepo.-2017-09-08/internal-server-error-exception, "ForbiddenException" :portkey.aws.serverlessrepo.-2017-09-08/forbidden-exception}})))))
(clojure.spec.alpha/fdef get-application-policy :args (clojure.spec.alpha/tuple :portkey.aws.serverlessrepo.-2017-09-08/get-application-policy-request) :ret (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/get-application-policy-response))

(clojure.core/defn list-application-versions "Lists versions for the specified application." ([list-application-versions-requestinput] (clojure.core/let [request-function-result__22153__auto__ (req-list-application-versions-request list-application-versions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22153__auto__ {:http.request.configuration/endpoints portkey.aws.serverlessrepo.-2017-09-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.serverlessrepo.-2017-09-08/list-application-versions-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/applications/{applicationId}/versions", :http.request.configuration/version "2017-09-08", :http.request.configuration/service-id "ServerlessApplicationRepository", :http.request.spec/input-spec :portkey.aws.serverlessrepo.-2017-09-08/list-application-versions-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListApplicationVersions", :http.request.configuration/output-deser-fn response-list-application-versions-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.serverlessrepo.-2017-09-08/not-found-exception, "TooManyRequestsException" :portkey.aws.serverlessrepo.-2017-09-08/too-many-requests-exception, "BadRequestException" :portkey.aws.serverlessrepo.-2017-09-08/bad-request-exception, "InternalServerErrorException" :portkey.aws.serverlessrepo.-2017-09-08/internal-server-error-exception, "ForbiddenException" :portkey.aws.serverlessrepo.-2017-09-08/forbidden-exception}})))))
(clojure.spec.alpha/fdef list-application-versions :args (clojure.spec.alpha/tuple :portkey.aws.serverlessrepo.-2017-09-08/list-application-versions-request) :ret (clojure.spec.alpha/and :portkey.aws.serverlessrepo.-2017-09-08/list-application-versions-response))
