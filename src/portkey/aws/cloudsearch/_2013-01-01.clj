(ns portkey.aws.cloudsearch.-2013-01-01 (:require [portkey.aws]))

(def
 endpoints
 '{"ap-northeast-1"
   {:credential-scope
    {:service "cloudsearch", :region "ap-northeast-1"},
    :ssl-common-name "cloudsearch.ap-northeast-1.amazonaws.com",
    :endpoint "https://cloudsearch.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "cloudsearch", :region "eu-west-1"},
    :ssl-common-name "cloudsearch.eu-west-1.amazonaws.com",
    :endpoint "https://cloudsearch.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope
    {:service "cloudsearch", :region "ap-southeast-2"},
    :ssl-common-name "cloudsearch.ap-southeast-2.amazonaws.com",
    :endpoint "https://cloudsearch.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "cloudsearch", :region "sa-east-1"},
    :ssl-common-name "cloudsearch.sa-east-1.amazonaws.com",
    :endpoint "https://cloudsearch.sa-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope
    {:service "cloudsearch", :region "ap-southeast-1"},
    :ssl-common-name "cloudsearch.ap-southeast-1.amazonaws.com",
    :endpoint "https://cloudsearch.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope
    {:service "cloudsearch", :region "ap-northeast-2"},
    :ssl-common-name "cloudsearch.ap-northeast-2.amazonaws.com",
    :endpoint "https://cloudsearch.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "cloudsearch", :region "eu-central-1"},
    :ssl-common-name "cloudsearch.eu-central-1.amazonaws.com",
    :endpoint "https://cloudsearch.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "cloudsearch", :region "us-west-2"},
    :ssl-common-name "cloudsearch.us-west-2.amazonaws.com",
    :endpoint "https://cloudsearch.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "cloudsearch", :region "us-east-1"},
    :ssl-common-name "cloudsearch.us-east-1.amazonaws.com",
    :endpoint "https://cloudsearch.us-east-1.amazonaws.com",
    :signature-version :v4},
   "us-west-1"
   {:credential-scope {:service "cloudsearch", :region "us-west-1"},
    :ssl-common-name "cloudsearch.us-west-1.amazonaws.com",
    :endpoint "https://cloudsearch.us-west-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-double-array-options ser-double ser-index-field-type ser-field-name-comma-list ser-suggester ser-lat-lon-options ser-text-options ser-standard-name ser-analysis-scheme ser-double-options ser-expression ser-text-array-options ser-int-array-options ser-domain-name-list ser-dynamic-field-name-list ser-analysis-options ser-date-array-options ser-policy-document ser-expression-value ser-algorithmic-stemming ser-string ser-date-options ser-field-name ser-standard-name-list ser-suggester-fuzzy-matching ser-dynamic-field-name ser-analysis-scheme-language ser-long ser-literal-array-options ser-word ser-partition-instance-type ser-literal-options ser-domain-name ser-index-field ser-field-value ser-uint-value ser-scaling-parameters ser-int-options ser-document-suggester-options ser-boolean)

(clojure.core/defn- ser-double-array-options [shape-input] (clojure.core/cond-> {} (:default-value shape-input) (clojure.core/assoc "DoubleArrayOptions.DefaultValue" (ser-double (:default-value shape-input))) (:source-fields shape-input) (clojure.core/assoc "DoubleArrayOptions.SourceFields" (ser-field-name-comma-list (:source-fields shape-input))) (:facet-enabled shape-input) (clojure.core/assoc "DoubleArrayOptions.FacetEnabled" (ser-boolean (:facet-enabled shape-input))) (:search-enabled shape-input) (clojure.core/assoc "DoubleArrayOptions.SearchEnabled" (ser-boolean (:search-enabled shape-input))) (:return-enabled shape-input) (clojure.core/assoc "DoubleArrayOptions.ReturnEnabled" (ser-boolean (:return-enabled shape-input)))))
(clojure.core/defn- ser-double [shape-input] shape-input)
(clojure.core/defn- ser-index-field-type [shape-input] ({"int" "int", :int-array "int-array", :date "date", :double "double", :int "int", :double-array "double-array", "text-array" "text-array", "latlon" "latlon", :text-array "text-array", "text" "text", "int-array" "int-array", "literal-array" "literal-array", :literal-array "literal-array", :latlon "latlon", :literal "literal", "double" "double", "date" "date", "double-array" "double-array", "literal" "literal", :date-array "date-array", :text "text", "date-array" "date-array"} shape-input))
(clojure.core/defn- ser-field-name-comma-list [shape-input] shape-input)
(clojure.core/defn- ser-suggester [shape-input] (clojure.core/cond-> {} (:suggester-name shape-input) (clojure.core/assoc "Suggester.SuggesterName" (ser-standard-name (:suggester-name shape-input))) (:document-suggester-options shape-input) (clojure.core/assoc "Suggester.DocumentSuggesterOptions" (ser-document-suggester-options (:document-suggester-options shape-input)))))
(clojure.core/defn- ser-lat-lon-options [shape-input] (clojure.core/cond-> {} (:default-value shape-input) (clojure.core/assoc "LatLonOptions.DefaultValue" (ser-field-value (:default-value shape-input))) (:source-field shape-input) (clojure.core/assoc "LatLonOptions.SourceField" (ser-field-name (:source-field shape-input))) (:facet-enabled shape-input) (clojure.core/assoc "LatLonOptions.FacetEnabled" (ser-boolean (:facet-enabled shape-input))) (:search-enabled shape-input) (clojure.core/assoc "LatLonOptions.SearchEnabled" (ser-boolean (:search-enabled shape-input))) (:return-enabled shape-input) (clojure.core/assoc "LatLonOptions.ReturnEnabled" (ser-boolean (:return-enabled shape-input))) (:sort-enabled shape-input) (clojure.core/assoc "LatLonOptions.SortEnabled" (ser-boolean (:sort-enabled shape-input)))))
(clojure.core/defn- ser-text-options [shape-input] (clojure.core/cond-> {} (:default-value shape-input) (clojure.core/assoc "TextOptions.DefaultValue" (ser-field-value (:default-value shape-input))) (:source-field shape-input) (clojure.core/assoc "TextOptions.SourceField" (ser-field-name (:source-field shape-input))) (:return-enabled shape-input) (clojure.core/assoc "TextOptions.ReturnEnabled" (ser-boolean (:return-enabled shape-input))) (:sort-enabled shape-input) (clojure.core/assoc "TextOptions.SortEnabled" (ser-boolean (:sort-enabled shape-input))) (:highlight-enabled shape-input) (clojure.core/assoc "TextOptions.HighlightEnabled" (ser-boolean (:highlight-enabled shape-input))) (:analysis-scheme shape-input) (clojure.core/assoc "TextOptions.AnalysisScheme" (ser-word (:analysis-scheme shape-input)))))
(clojure.core/defn- ser-standard-name [shape-input] shape-input)
(clojure.core/defn- ser-analysis-scheme [shape-input] (clojure.core/cond-> {} (:analysis-scheme-name shape-input) (clojure.core/assoc "AnalysisScheme.AnalysisSchemeName" (ser-standard-name (:analysis-scheme-name shape-input))) (:analysis-scheme-language shape-input) (clojure.core/assoc "AnalysisScheme.AnalysisSchemeLanguage" (ser-analysis-scheme-language (:analysis-scheme-language shape-input))) (:analysis-options shape-input) (clojure.core/assoc "AnalysisScheme.AnalysisOptions" (ser-analysis-options (:analysis-options shape-input)))))
(clojure.core/defn- ser-double-options [shape-input] (clojure.core/cond-> {} (:default-value shape-input) (clojure.core/assoc "DoubleOptions.DefaultValue" (ser-double (:default-value shape-input))) (:source-field shape-input) (clojure.core/assoc "DoubleOptions.SourceField" (ser-field-name (:source-field shape-input))) (:facet-enabled shape-input) (clojure.core/assoc "DoubleOptions.FacetEnabled" (ser-boolean (:facet-enabled shape-input))) (:search-enabled shape-input) (clojure.core/assoc "DoubleOptions.SearchEnabled" (ser-boolean (:search-enabled shape-input))) (:return-enabled shape-input) (clojure.core/assoc "DoubleOptions.ReturnEnabled" (ser-boolean (:return-enabled shape-input))) (:sort-enabled shape-input) (clojure.core/assoc "DoubleOptions.SortEnabled" (ser-boolean (:sort-enabled shape-input)))))
(clojure.core/defn- ser-expression [shape-input] (clojure.core/cond-> {} (:expression-name shape-input) (clojure.core/assoc "Expression.ExpressionName" (ser-standard-name (:expression-name shape-input))) (:expression-value shape-input) (clojure.core/assoc "Expression.ExpressionValue" (ser-expression-value (:expression-value shape-input)))))
(clojure.core/defn- ser-text-array-options [shape-input] (clojure.core/cond-> {} (:default-value shape-input) (clojure.core/assoc "TextArrayOptions.DefaultValue" (ser-field-value (:default-value shape-input))) (:source-fields shape-input) (clojure.core/assoc "TextArrayOptions.SourceFields" (ser-field-name-comma-list (:source-fields shape-input))) (:return-enabled shape-input) (clojure.core/assoc "TextArrayOptions.ReturnEnabled" (ser-boolean (:return-enabled shape-input))) (:highlight-enabled shape-input) (clojure.core/assoc "TextArrayOptions.HighlightEnabled" (ser-boolean (:highlight-enabled shape-input))) (:analysis-scheme shape-input) (clojure.core/assoc "TextArrayOptions.AnalysisScheme" (ser-word (:analysis-scheme shape-input)))))
(clojure.core/defn- ser-int-array-options [shape-input] (clojure.core/cond-> {} (:default-value shape-input) (clojure.core/assoc "IntArrayOptions.DefaultValue" (ser-long (:default-value shape-input))) (:source-fields shape-input) (clojure.core/assoc "IntArrayOptions.SourceFields" (ser-field-name-comma-list (:source-fields shape-input))) (:facet-enabled shape-input) (clojure.core/assoc "IntArrayOptions.FacetEnabled" (ser-boolean (:facet-enabled shape-input))) (:search-enabled shape-input) (clojure.core/assoc "IntArrayOptions.SearchEnabled" (ser-boolean (:search-enabled shape-input))) (:return-enabled shape-input) (clojure.core/assoc "IntArrayOptions.ReturnEnabled" (ser-boolean (:return-enabled shape-input)))))
(clojure.core/defn- ser-domain-name-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-dynamic-field-name-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-analysis-options [shape-input] (clojure.core/cond-> {} (:synonyms shape-input) (clojure.core/assoc "AnalysisOptions.Synonyms" (ser-string (:synonyms shape-input))) (:stopwords shape-input) (clojure.core/assoc "AnalysisOptions.Stopwords" (ser-string (:stopwords shape-input))) (:stemming-dictionary shape-input) (clojure.core/assoc "AnalysisOptions.StemmingDictionary" (ser-string (:stemming-dictionary shape-input))) (:japanese-tokenization-dictionary shape-input) (clojure.core/assoc "AnalysisOptions.JapaneseTokenizationDictionary" (ser-string (:japanese-tokenization-dictionary shape-input))) (:algorithmic-stemming shape-input) (clojure.core/assoc "AnalysisOptions.AlgorithmicStemming" (ser-algorithmic-stemming (:algorithmic-stemming shape-input)))))
(clojure.core/defn- ser-date-array-options [shape-input] (clojure.core/cond-> {} (:default-value shape-input) (clojure.core/assoc "DateArrayOptions.DefaultValue" (ser-field-value (:default-value shape-input))) (:source-fields shape-input) (clojure.core/assoc "DateArrayOptions.SourceFields" (ser-field-name-comma-list (:source-fields shape-input))) (:facet-enabled shape-input) (clojure.core/assoc "DateArrayOptions.FacetEnabled" (ser-boolean (:facet-enabled shape-input))) (:search-enabled shape-input) (clojure.core/assoc "DateArrayOptions.SearchEnabled" (ser-boolean (:search-enabled shape-input))) (:return-enabled shape-input) (clojure.core/assoc "DateArrayOptions.ReturnEnabled" (ser-boolean (:return-enabled shape-input)))))
(clojure.core/defn- ser-policy-document [shape-input] shape-input)
(clojure.core/defn- ser-expression-value [shape-input] shape-input)
(clojure.core/defn- ser-algorithmic-stemming [shape-input] ({"none" "none", :none "none", "minimal" "minimal", :minimal "minimal", "light" "light", :light "light", "full" "full", :full "full"} shape-input))
(clojure.core/defn- ser-string [shape-input] shape-input)
(clojure.core/defn- ser-date-options [shape-input] (clojure.core/cond-> {} (:default-value shape-input) (clojure.core/assoc "DateOptions.DefaultValue" (ser-field-value (:default-value shape-input))) (:source-field shape-input) (clojure.core/assoc "DateOptions.SourceField" (ser-field-name (:source-field shape-input))) (:facet-enabled shape-input) (clojure.core/assoc "DateOptions.FacetEnabled" (ser-boolean (:facet-enabled shape-input))) (:search-enabled shape-input) (clojure.core/assoc "DateOptions.SearchEnabled" (ser-boolean (:search-enabled shape-input))) (:return-enabled shape-input) (clojure.core/assoc "DateOptions.ReturnEnabled" (ser-boolean (:return-enabled shape-input))) (:sort-enabled shape-input) (clojure.core/assoc "DateOptions.SortEnabled" (ser-boolean (:sort-enabled shape-input)))))
(clojure.core/defn- ser-field-name [shape-input] shape-input)
(clojure.core/defn- ser-standard-name-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-suggester-fuzzy-matching [shape-input] ({"none" "none", :none "none", "low" "low", :low "low", "high" "high", :high "high"} shape-input))
(clojure.core/defn- ser-dynamic-field-name [shape-input] shape-input)
(clojure.core/defn- ser-analysis-scheme-language [shape-input] ({"nl" "nl", :fr "fr", :ja "ja", :el "el", "pt" "pt", "en" "en", :es "es", "lv" "lv", :pt "pt", :fi "fi", :ga "ga", "ro" "ro", "hy" "hy", "tr" "tr", "it" "it", "el" "el", "fa" "fa", :ca "ca", :ro "ro", :th "th", :tr "tr", :cs "cs", :hu "hu", "id" "id", "fi" "fi", :ko "ko", "ca" "ca", "sv" "sv", "fr" "fr", "eu" "eu", :it "it", "da" "da", "hu" "hu", "de" "de", "hi" "hi", :en "en", :nl "nl", "ru" "ru", :mul "mul", "ga" "ga", "es" "es", :de "de", :id "id", :ar "ar", :zh-hant "zh-Hant", "ja" "ja", :hy "hy", "mul" "mul", "gl" "gl", :ru "ru", :gl "gl", "cs" "cs", "no" "no", "zh-Hans" "zh-Hans", :he "he", :sv "sv", :da "da", "ar" "ar", "bg" "bg", "ko" "ko", :zh-hans "zh-Hans", :bg "bg", :lv "lv", "th" "th", :eu "eu", "he" "he", :hi "hi", :no "no", "zh-Hant" "zh-Hant", :fa "fa"} shape-input))
(clojure.core/defn- ser-long [shape-input] shape-input)
(clojure.core/defn- ser-literal-array-options [shape-input] (clojure.core/cond-> {} (:default-value shape-input) (clojure.core/assoc "LiteralArrayOptions.DefaultValue" (ser-field-value (:default-value shape-input))) (:source-fields shape-input) (clojure.core/assoc "LiteralArrayOptions.SourceFields" (ser-field-name-comma-list (:source-fields shape-input))) (:facet-enabled shape-input) (clojure.core/assoc "LiteralArrayOptions.FacetEnabled" (ser-boolean (:facet-enabled shape-input))) (:search-enabled shape-input) (clojure.core/assoc "LiteralArrayOptions.SearchEnabled" (ser-boolean (:search-enabled shape-input))) (:return-enabled shape-input) (clojure.core/assoc "LiteralArrayOptions.ReturnEnabled" (ser-boolean (:return-enabled shape-input)))))
(clojure.core/defn- ser-word [shape-input] shape-input)
(clojure.core/defn- ser-partition-instance-type [shape-input] ({"search.m3.2xlarge" "search.m3.2xlarge", "search.m3.large" "search.m3.large", :search.m3.2xlarge "search.m3.2xlarge", "search.m2.xlarge" "search.m2.xlarge", :search.m3.large "search.m3.large", :search.m3.medium "search.m3.medium", :search.m1.small "search.m1.small", :search.m1.large "search.m1.large", "search.m3.xlarge" "search.m3.xlarge", :search.m2.xlarge "search.m2.xlarge", "search.m1.small" "search.m1.small", "search.m3.medium" "search.m3.medium", :search.m3.xlarge "search.m3.xlarge", "search.m1.large" "search.m1.large", :search.m2.2xlarge "search.m2.2xlarge", "search.m2.2xlarge" "search.m2.2xlarge"} shape-input))
(clojure.core/defn- ser-literal-options [shape-input] (clojure.core/cond-> {} (:default-value shape-input) (clojure.core/assoc "LiteralOptions.DefaultValue" (ser-field-value (:default-value shape-input))) (:source-field shape-input) (clojure.core/assoc "LiteralOptions.SourceField" (ser-field-name (:source-field shape-input))) (:facet-enabled shape-input) (clojure.core/assoc "LiteralOptions.FacetEnabled" (ser-boolean (:facet-enabled shape-input))) (:search-enabled shape-input) (clojure.core/assoc "LiteralOptions.SearchEnabled" (ser-boolean (:search-enabled shape-input))) (:return-enabled shape-input) (clojure.core/assoc "LiteralOptions.ReturnEnabled" (ser-boolean (:return-enabled shape-input))) (:sort-enabled shape-input) (clojure.core/assoc "LiteralOptions.SortEnabled" (ser-boolean (:sort-enabled shape-input)))))
(clojure.core/defn- ser-domain-name [shape-input] shape-input)
(clojure.core/defn- ser-index-field [shape-input] (clojure.core/cond-> {} (:double-array-options shape-input) (clojure.core/assoc "IndexField.DoubleArrayOptions" (ser-double-array-options (:double-array-options shape-input))) (:index-field-type shape-input) (clojure.core/assoc "IndexField.IndexFieldType" (ser-index-field-type (:index-field-type shape-input))) (:lat-lon-options shape-input) (clojure.core/assoc "IndexField.LatLonOptions" (ser-lat-lon-options (:lat-lon-options shape-input))) (:text-options shape-input) (clojure.core/assoc "IndexField.TextOptions" (ser-text-options (:text-options shape-input))) (:double-options shape-input) (clojure.core/assoc "IndexField.DoubleOptions" (ser-double-options (:double-options shape-input))) (:text-array-options shape-input) (clojure.core/assoc "IndexField.TextArrayOptions" (ser-text-array-options (:text-array-options shape-input))) (:int-array-options shape-input) (clojure.core/assoc "IndexField.IntArrayOptions" (ser-int-array-options (:int-array-options shape-input))) (:date-array-options shape-input) (clojure.core/assoc "IndexField.DateArrayOptions" (ser-date-array-options (:date-array-options shape-input))) (:index-field-name shape-input) (clojure.core/assoc "IndexField.IndexFieldName" (ser-dynamic-field-name (:index-field-name shape-input))) (:date-options shape-input) (clojure.core/assoc "IndexField.DateOptions" (ser-date-options (:date-options shape-input))) (:literal-array-options shape-input) (clojure.core/assoc "IndexField.LiteralArrayOptions" (ser-literal-array-options (:literal-array-options shape-input))) (:literal-options shape-input) (clojure.core/assoc "IndexField.LiteralOptions" (ser-literal-options (:literal-options shape-input))) (:int-options shape-input) (clojure.core/assoc "IndexField.IntOptions" (ser-int-options (:int-options shape-input)))))
(clojure.core/defn- ser-field-value [shape-input] shape-input)
(clojure.core/defn- ser-uint-value [shape-input] shape-input)
(clojure.core/defn- ser-scaling-parameters [shape-input] (clojure.core/cond-> {} (:desired-instance-type shape-input) (clojure.core/assoc "ScalingParameters.DesiredInstanceType" (ser-partition-instance-type (:desired-instance-type shape-input))) (:desired-replication-count shape-input) (clojure.core/assoc "ScalingParameters.DesiredReplicationCount" (ser-uint-value (:desired-replication-count shape-input))) (:desired-partition-count shape-input) (clojure.core/assoc "ScalingParameters.DesiredPartitionCount" (ser-uint-value (:desired-partition-count shape-input)))))
(clojure.core/defn- ser-int-options [shape-input] (clojure.core/cond-> {} (:default-value shape-input) (clojure.core/assoc "IntOptions.DefaultValue" (ser-long (:default-value shape-input))) (:source-field shape-input) (clojure.core/assoc "IntOptions.SourceField" (ser-field-name (:source-field shape-input))) (:facet-enabled shape-input) (clojure.core/assoc "IntOptions.FacetEnabled" (ser-boolean (:facet-enabled shape-input))) (:search-enabled shape-input) (clojure.core/assoc "IntOptions.SearchEnabled" (ser-boolean (:search-enabled shape-input))) (:return-enabled shape-input) (clojure.core/assoc "IntOptions.ReturnEnabled" (ser-boolean (:return-enabled shape-input))) (:sort-enabled shape-input) (clojure.core/assoc "IntOptions.SortEnabled" (ser-boolean (:sort-enabled shape-input)))))
(clojure.core/defn- ser-document-suggester-options [shape-input] (clojure.core/cond-> {} (:source-field shape-input) (clojure.core/assoc "DocumentSuggesterOptions.SourceField" (ser-field-name (:source-field shape-input))) (:fuzzy-matching shape-input) (clojure.core/assoc "DocumentSuggesterOptions.FuzzyMatching" (ser-suggester-fuzzy-matching (:fuzzy-matching shape-input))) (:sort-expression shape-input) (clojure.core/assoc "DocumentSuggesterOptions.SortExpression" (ser-string (:sort-expression shape-input)))))
(clojure.core/defn- ser-boolean [shape-input] shape-input)

(clojure.core/defn req<-delete-index-field-request [action-name42900 input42899] {:body {"DomainName" (ser-domain-name (input42899 :domain-name)), "IndexFieldName" (ser-dynamic-field-name (input42899 :index-field-name)), "Version" "2013-01-01", "Action" action-name42900}})
(clojure.core/defn req<-update-service-access-policies-request [action-name42902 input42901] {:body {"DomainName" (ser-domain-name (input42901 :domain-name)), "AccessPolicies" (ser-policy-document (input42901 :access-policies)), "Version" "2013-01-01", "Action" action-name42902}})
(clojure.core/defn req<-describe-service-access-policies-request [action-name42904 input42903] (clojure.core/let [input42905 {:body {"DomainName" (ser-domain-name (input42903 :domain-name)), "Version" "2013-01-01", "Action" action-name42904}}] (clojure.core/cond-> input42905 (clojure.core/contains? input42903 :deployed) (clojure.core/assoc-in [:body "Deployed"] (ser-boolean (input42903 :deployed))))))
(clojure.core/defn req<-define-analysis-scheme-request [action-name42907 input42906] {:body {"DomainName" (ser-domain-name (input42906 :domain-name)), "AnalysisScheme" (ser-analysis-scheme (input42906 :analysis-scheme)), "Version" "2013-01-01", "Action" action-name42907}})
(clojure.core/defn req<-define-index-field-request [action-name42909 input42908] {:body {"DomainName" (ser-domain-name (input42908 :domain-name)), "IndexField" (ser-index-field (input42908 :index-field)), "Version" "2013-01-01", "Action" action-name42909}})
(clojure.core/defn req<-define-expression-request [action-name42911 input42910] {:body {"DomainName" (ser-domain-name (input42910 :domain-name)), "Expression" (ser-expression (input42910 :expression)), "Version" "2013-01-01", "Action" action-name42911}})
(clojure.core/defn req<-build-suggesters-request [action-name42913 input42912] {:body {"DomainName" (ser-domain-name (input42912 :domain-name)), "Version" "2013-01-01", "Action" action-name42913}})
(clojure.core/defn req<-describe-index-fields-request [action-name42915 input42914] (clojure.core/let [input42916 {:body {"DomainName" (ser-domain-name (input42914 :domain-name)), "Version" "2013-01-01", "Action" action-name42915}}] (clojure.core/cond-> input42916 (clojure.core/contains? input42914 :field-names) (clojure.core/assoc-in [:body "FieldNames"] (ser-dynamic-field-name-list (input42914 :field-names))) (clojure.core/contains? input42914 :deployed) (clojure.core/assoc-in [:body "Deployed"] (ser-boolean (input42914 :deployed))))))
(clojure.core/defn req<-create-domain-request [action-name42918 input42917] {:body {"DomainName" (ser-domain-name (input42917 :domain-name)), "Version" "2013-01-01", "Action" action-name42918}})
(clojure.core/defn req<-define-suggester-request [action-name42920 input42919] {:body {"DomainName" (ser-domain-name (input42919 :domain-name)), "Suggester" (ser-suggester (input42919 :suggester)), "Version" "2013-01-01", "Action" action-name42920}})
(clojure.core/defn req<-delete-expression-request [action-name42922 input42921] {:body {"DomainName" (ser-domain-name (input42921 :domain-name)), "ExpressionName" (ser-standard-name (input42921 :expression-name)), "Version" "2013-01-01", "Action" action-name42922}})
(clojure.core/defn req<-delete-analysis-scheme-request [action-name42924 input42923] {:body {"DomainName" (ser-domain-name (input42923 :domain-name)), "AnalysisSchemeName" (ser-standard-name (input42923 :analysis-scheme-name)), "Version" "2013-01-01", "Action" action-name42924}})
(clojure.core/defn req<-describe-analysis-schemes-request [action-name42926 input42925] (clojure.core/let [input42927 {:body {"DomainName" (ser-domain-name (input42925 :domain-name)), "Version" "2013-01-01", "Action" action-name42926}}] (clojure.core/cond-> input42927 (clojure.core/contains? input42925 :analysis-scheme-names) (clojure.core/assoc-in [:body "AnalysisSchemeNames"] (ser-standard-name-list (input42925 :analysis-scheme-names))) (clojure.core/contains? input42925 :deployed) (clojure.core/assoc-in [:body "Deployed"] (ser-boolean (input42925 :deployed))))))
(clojure.core/defn req<-describe-domains-request [action-name42929 input42928] (clojure.core/cond-> {:body {"Version" "2013-01-01", "Action" action-name42929}} (clojure.core/contains? input42928 :domain-names) (clojure.core/assoc-in [:body "DomainNames"] (ser-domain-name-list (input42928 :domain-names)))))
(clojure.core/defn req<-update-availability-options-request [action-name42931 input42930] {:body {"DomainName" (ser-domain-name (input42930 :domain-name)), "MultiAZ" (ser-boolean (input42930 :multiaz)), "Version" "2013-01-01", "Action" action-name42931}})
(clojure.core/defn req<-update-scaling-parameters-request [action-name42933 input42932] {:body {"DomainName" (ser-domain-name (input42932 :domain-name)), "ScalingParameters" (ser-scaling-parameters (input42932 :scaling-parameters)), "Version" "2013-01-01", "Action" action-name42933}})
(clojure.core/defn req<-describe-scaling-parameters-request [action-name42935 input42934] {:body {"DomainName" (ser-domain-name (input42934 :domain-name)), "Version" "2013-01-01", "Action" action-name42935}})
(clojure.core/defn req<-index-documents-request [action-name42937 input42936] {:body {"DomainName" (ser-domain-name (input42936 :domain-name)), "Version" "2013-01-01", "Action" action-name42937}})
(clojure.core/defn req<-delete-domain-request [action-name42939 input42938] {:body {"DomainName" (ser-domain-name (input42938 :domain-name)), "Version" "2013-01-01", "Action" action-name42939}})
(clojure.core/defn req<-delete-suggester-request [action-name42941 input42940] {:body {"DomainName" (ser-domain-name (input42940 :domain-name)), "SuggesterName" (ser-standard-name (input42940 :suggester-name)), "Version" "2013-01-01", "Action" action-name42941}})
(clojure.core/defn req<-describe-availability-options-request [action-name42943 input42942] (clojure.core/let [input42944 {:body {"DomainName" (ser-domain-name (input42942 :domain-name)), "Version" "2013-01-01", "Action" action-name42943}}] (clojure.core/cond-> input42944 (clojure.core/contains? input42942 :deployed) (clojure.core/assoc-in [:body "Deployed"] (ser-boolean (input42942 :deployed))))))
(clojure.core/defn req<-describe-expressions-request [action-name42946 input42945] (clojure.core/let [input42947 {:body {"DomainName" (ser-domain-name (input42945 :domain-name)), "Version" "2013-01-01", "Action" action-name42946}}] (clojure.core/cond-> input42947 (clojure.core/contains? input42945 :expression-names) (clojure.core/assoc-in [:body "ExpressionNames"] (ser-standard-name-list (input42945 :expression-names))) (clojure.core/contains? input42945 :deployed) (clojure.core/assoc-in [:body "Deployed"] (ser-boolean (input42945 :deployed))))))
(clojure.core/defn req<-describe-suggesters-request [action-name42949 input42948] (clojure.core/let [input42950 {:body {"DomainName" (ser-domain-name (input42948 :domain-name)), "Version" "2013-01-01", "Action" action-name42949}}] (clojure.core/cond-> input42950 (clojure.core/contains? input42948 :suggester-names) (clojure.core/assoc-in [:body "SuggesterNames"] (ser-standard-name-list (input42948 :suggester-names))) (clojure.core/contains? input42948 :deployed) (clojure.core/assoc-in [:body "Deployed"] (ser-boolean (input42948 :deployed))))))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.index-documents-response/field-names (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/field-name-list))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/index-documents-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.index-documents-response/FieldNames] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.double-array-options/default-value (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/double))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.double-array-options/source-fields (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/field-name-comma-list))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.double-array-options/facet-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.double-array-options/search-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.double-array-options/return-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/double-array-options (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.double-array-options/DefaultValue :portkey.aws.cloudsearch.-2013-01-01.double-array-options/SourceFields :portkey.aws.cloudsearch.-2013-01-01.double-array-options/FacetEnabled :portkey.aws.cloudsearch.-2013-01-01.double-array-options/SearchEnabled :portkey.aws.cloudsearch.-2013-01-01.double-array-options/ReturnEnabled] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/index-field-type {"int" "int", :int-array "int-array", :date "date", :double "double", :int "int", :double-array "double-array", "text-array" "text-array", "latlon" "latlon", :text-array "text-array", "text" "text", "int-array" "int-array", "literal-array" "literal-array", :literal-array "literal-array", :latlon "latlon", :literal "literal", "double" "double", "date" "date", "double-array" "double-array", "literal" "literal", :date-array "date-array", :text "text", "date-array" "date-array"})

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/index-field-status-list (clojure.spec.alpha/coll-of :portkey.aws.cloudsearch.-2013-01-01/index-field-status))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/update-timestamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/domain-status-list (clojure.spec.alpha/coll-of :portkey.aws.cloudsearch.-2013-01-01/domain-status))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.update-availability-options-request/multiaz (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/update-availability-options-request (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/DomainName :portkey.aws.cloudsearch.-2013-01-01.update-availability-options-request/MultiAZ] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.describe-index-fields-request/field-names (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/dynamic-field-name-list))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.describe-index-fields-request/deployed (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/describe-index-fields-request (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/DomainName] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.describe-index-fields-request/FieldNames :portkey.aws.cloudsearch.-2013-01-01.describe-index-fields-request/Deployed] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/define-analysis-scheme-request (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/DomainName :portkey.aws.cloudsearch.-2013-01-01/AnalysisScheme] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/describe-scaling-parameters-request (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/DomainName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/apiversion (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.define-index-field-response/index-field (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/index-field-status))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/define-index-field-response (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.define-index-field-response/IndexField] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.describe-analysis-schemes-request/analysis-scheme-names (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/standard-name-list))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.describe-analysis-schemes-request/deployed (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/describe-analysis-schemes-request (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/DomainName] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.describe-analysis-schemes-request/AnalysisSchemeNames :portkey.aws.cloudsearch.-2013-01-01.describe-analysis-schemes-request/Deployed] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.describe-expressions-response/expressions (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/expression-status-list))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/describe-expressions-response (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.describe-expressions-response/Expressions] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/field-name-comma-list (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36228__auto__] (clojure.core/re-matches #"\s*[a-z*][a-z0-9_]*\*?\s*(,\s*[a-z*][a-z0-9_]*\*?\s*)*" s__36228__auto__))))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/maximum-replication-count (clojure.spec.alpha/int-in 1 Long/MAX_VALUE))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.suggester/suggester-name (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/standard-name))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/suggester (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.suggester/SuggesterName :portkey.aws.cloudsearch.-2013-01-01/DocumentSuggesterOptions] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.delete-suggester-request/suggester-name (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/standard-name))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/delete-suggester-request (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/DomainName :portkey.aws.cloudsearch.-2013-01-01.delete-suggester-request/SuggesterName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.lat-lon-options/default-value (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/field-value))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.lat-lon-options/source-field (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/field-name))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.lat-lon-options/facet-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.lat-lon-options/search-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.lat-lon-options/return-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.lat-lon-options/sort-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/lat-lon-options (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.lat-lon-options/DefaultValue :portkey.aws.cloudsearch.-2013-01-01.lat-lon-options/SourceField :portkey.aws.cloudsearch.-2013-01-01.lat-lon-options/FacetEnabled :portkey.aws.cloudsearch.-2013-01-01.lat-lon-options/SearchEnabled :portkey.aws.cloudsearch.-2013-01-01.lat-lon-options/ReturnEnabled :portkey.aws.cloudsearch.-2013-01-01.lat-lon-options/SortEnabled] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.text-options/default-value (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/field-value))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.text-options/source-field (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/field-name))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.text-options/return-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.text-options/sort-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.text-options/highlight-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.text-options/analysis-scheme (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/word))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/text-options (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.text-options/DefaultValue :portkey.aws.cloudsearch.-2013-01-01.text-options/SourceField :portkey.aws.cloudsearch.-2013-01-01.text-options/ReturnEnabled :portkey.aws.cloudsearch.-2013-01-01.text-options/SortEnabled :portkey.aws.cloudsearch.-2013-01-01.text-options/HighlightEnabled :portkey.aws.cloudsearch.-2013-01-01.text-options/AnalysisScheme] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/instance-count (clojure.spec.alpha/int-in 1 Long/MAX_VALUE))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.analysis-scheme-status/options (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/analysis-scheme))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.analysis-scheme-status/status (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/option-status))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/analysis-scheme-status (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.analysis-scheme-status/Options :portkey.aws.cloudsearch.-2013-01-01.analysis-scheme-status/Status] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/define-suggester-request (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/DomainName :portkey.aws.cloudsearch.-2013-01-01/Suggester] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/standard-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36226__auto__] (clojure.core/<= 1 (clojure.core/count s__36226__auto__))) (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 64)) (clojure.core/fn [s__36228__auto__] (clojure.core/re-matches #"[a-z][a-z0-9_]*" s__36228__auto__))))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.delete-expression-request/expression-name (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/standard-name))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/delete-expression-request (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/DomainName :portkey.aws.cloudsearch.-2013-01-01.delete-expression-request/ExpressionName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.delete-index-field-request/index-field-name (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/dynamic-field-name))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/delete-index-field-request (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/DomainName :portkey.aws.cloudsearch.-2013-01-01.delete-index-field-request/IndexFieldName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.analysis-scheme/analysis-scheme-name (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/standard-name))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/analysis-scheme (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.analysis-scheme/AnalysisSchemeName :portkey.aws.cloudsearch.-2013-01-01/AnalysisSchemeLanguage] :opt-un [:portkey.aws.cloudsearch.-2013-01-01/AnalysisOptions] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.define-analysis-scheme-response/analysis-scheme (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/analysis-scheme-status))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/define-analysis-scheme-response (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.define-analysis-scheme-response/AnalysisScheme] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.index-field-status/options (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/index-field))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.index-field-status/status (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/option-status))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/index-field-status (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.index-field-status/Options :portkey.aws.cloudsearch.-2013-01-01.index-field-status/Status] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.describe-availability-options-request/deployed (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/describe-availability-options-request (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/DomainName] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.describe-availability-options-request/Deployed] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/create-domain-request (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/DomainName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/limit-exceeded-exception (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/describe-domains-response (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/DomainStatusList] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.scaling-parameters-status/options (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/scaling-parameters))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.scaling-parameters-status/status (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/option-status))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/scaling-parameters-status (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.scaling-parameters-status/Options :portkey.aws.cloudsearch.-2013-01-01.scaling-parameters-status/Status] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.double-options/default-value (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/double))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.double-options/source-field (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/field-name))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.double-options/facet-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.double-options/search-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.double-options/return-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.double-options/sort-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/double-options (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.double-options/DefaultValue :portkey.aws.cloudsearch.-2013-01-01.double-options/SourceField :portkey.aws.cloudsearch.-2013-01-01.double-options/FacetEnabled :portkey.aws.cloudsearch.-2013-01-01.double-options/SearchEnabled :portkey.aws.cloudsearch.-2013-01-01.double-options/ReturnEnabled :portkey.aws.cloudsearch.-2013-01-01.double-options/SortEnabled] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.expression/expression-name (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/standard-name))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/expression (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.expression/ExpressionName :portkey.aws.cloudsearch.-2013-01-01/ExpressionValue] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/field-name-list (clojure.spec.alpha/coll-of :portkey.aws.cloudsearch.-2013-01-01/field-name))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.text-array-options/default-value (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/field-value))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.text-array-options/source-fields (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/field-name-comma-list))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.text-array-options/return-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.text-array-options/highlight-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.text-array-options/analysis-scheme (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/word))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/text-array-options (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.text-array-options/DefaultValue :portkey.aws.cloudsearch.-2013-01-01.text-array-options/SourceFields :portkey.aws.cloudsearch.-2013-01-01.text-array-options/ReturnEnabled :portkey.aws.cloudsearch.-2013-01-01.text-array-options/HighlightEnabled :portkey.aws.cloudsearch.-2013-01-01.text-array-options/AnalysisScheme] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/define-expression-request (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/DomainName :portkey.aws.cloudsearch.-2013-01-01/Expression] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.update-availability-options-response/availability-options (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/availability-options-status))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/update-availability-options-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.update-availability-options-response/AvailabilityOptions] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/invalid-type-exception (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/update-scaling-parameters-request (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/DomainName :portkey.aws.cloudsearch.-2013-01-01/ScalingParameters] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.build-suggesters-response/field-names (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/field-name-list))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/build-suggesters-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.build-suggesters-response/FieldNames] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/error-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/service-url (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.int-array-options/default-value (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/long))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.int-array-options/source-fields (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/field-name-comma-list))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.int-array-options/facet-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.int-array-options/search-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.int-array-options/return-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/int-array-options (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.int-array-options/DefaultValue :portkey.aws.cloudsearch.-2013-01-01.int-array-options/SourceFields :portkey.aws.cloudsearch.-2013-01-01.int-array-options/FacetEnabled :portkey.aws.cloudsearch.-2013-01-01.int-array-options/SearchEnabled :portkey.aws.cloudsearch.-2013-01-01.int-array-options/ReturnEnabled] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/index-documents-request (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/DomainName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/disabled-operation-exception (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.list-domain-names-response/domain-names (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/domain-name-map))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/list-domain-names-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.list-domain-names-response/DomainNames] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/domain-name-list (clojure.spec.alpha/coll-of :portkey.aws.cloudsearch.-2013-01-01/domain-name))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.domain-status/created (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.domain-status/requires-index-documents (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.domain-status/doc-service (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/service-endpoint))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.domain-status/deleted (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.domain-status/search-instance-count (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/instance-count))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.domain-status/processing (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.domain-status/search-service (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/service-endpoint))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.domain-status/search-partition-count (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/partition-count))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/domain-status (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/DomainId :portkey.aws.cloudsearch.-2013-01-01/DomainName :portkey.aws.cloudsearch.-2013-01-01.domain-status/RequiresIndexDocuments] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.domain-status/Created :portkey.aws.cloudsearch.-2013-01-01/ARN :portkey.aws.cloudsearch.-2013-01-01/Limits :portkey.aws.cloudsearch.-2013-01-01.domain-status/DocService :portkey.aws.cloudsearch.-2013-01-01.domain-status/Deleted :portkey.aws.cloudsearch.-2013-01-01.domain-status/SearchInstanceCount :portkey.aws.cloudsearch.-2013-01-01.domain-status/Processing :portkey.aws.cloudsearch.-2013-01-01.domain-status/SearchService :portkey.aws.cloudsearch.-2013-01-01/SearchInstanceType :portkey.aws.cloudsearch.-2013-01-01.domain-status/SearchPartitionCount] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/delete-domain-request (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/DomainName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.service-endpoint/endpoint (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/service-url))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/service-endpoint (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.service-endpoint/Endpoint] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/suggester-status-list (clojure.spec.alpha/coll-of :portkey.aws.cloudsearch.-2013-01-01/suggester-status))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/limits (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/MaximumReplicationCount :portkey.aws.cloudsearch.-2013-01-01/MaximumPartitionCount] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/build-suggesters-request (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/DomainName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/dynamic-field-name-list (clojure.spec.alpha/coll-of :portkey.aws.cloudsearch.-2013-01-01/dynamic-field-name))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.analysis-options/synonyms (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/string))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.analysis-options/stopwords (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/string))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.analysis-options/stemming-dictionary (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/string))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.analysis-options/japanese-tokenization-dictionary (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/string))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/analysis-options (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.analysis-options/Synonyms :portkey.aws.cloudsearch.-2013-01-01.analysis-options/Stopwords :portkey.aws.cloudsearch.-2013-01-01.analysis-options/StemmingDictionary :portkey.aws.cloudsearch.-2013-01-01.analysis-options/JapaneseTokenizationDictionary :portkey.aws.cloudsearch.-2013-01-01/AlgorithmicStemming] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/error-code (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/partition-count (clojure.spec.alpha/int-in 1 Long/MAX_VALUE))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.delete-index-field-response/index-field (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/index-field-status))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/delete-index-field-response (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.delete-index-field-response/IndexField] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/resource-not-found-exception (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.describe-availability-options-response/availability-options (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/availability-options-status))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/describe-availability-options-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.describe-availability-options-response/AvailabilityOptions] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.describe-service-access-policies-request/deployed (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/describe-service-access-policies-request (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/DomainName] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.describe-service-access-policies-request/Deployed] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.option-status/creation-date (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/update-timestamp))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.option-status/update-date (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/update-timestamp))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.option-status/update-version (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/uint-value))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.option-status/state (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/option-state))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.option-status/pending-deletion (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/option-status (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.option-status/CreationDate :portkey.aws.cloudsearch.-2013-01-01.option-status/UpdateDate :portkey.aws.cloudsearch.-2013-01-01.option-status/State] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.option-status/UpdateVersion :portkey.aws.cloudsearch.-2013-01-01.option-status/PendingDeletion] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.date-array-options/default-value (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/field-value))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.date-array-options/source-fields (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/field-name-comma-list))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.date-array-options/facet-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.date-array-options/search-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.date-array-options/return-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/date-array-options (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.date-array-options/DefaultValue :portkey.aws.cloudsearch.-2013-01-01.date-array-options/SourceFields :portkey.aws.cloudsearch.-2013-01-01.date-array-options/FacetEnabled :portkey.aws.cloudsearch.-2013-01-01.date-array-options/SearchEnabled :portkey.aws.cloudsearch.-2013-01-01.date-array-options/ReturnEnabled] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/policy-document (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/expression-value (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36226__auto__] (clojure.core/<= 1 (clojure.core/count s__36226__auto__))) (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 10240))))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/algorithmic-stemming {"none" "none", :none "none", "minimal" "minimal", :minimal "minimal", "light" "light", :light "light", "full" "full", :full "full"})

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/internal-exception (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.suggester-status/options (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/suggester))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.suggester-status/status (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/option-status))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/suggester-status (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.suggester-status/Options :portkey.aws.cloudsearch.-2013-01-01.suggester-status/Status] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.define-suggester-response/suggester (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/suggester-status))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/define-suggester-response (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.define-suggester-response/Suggester] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.delete-suggester-response/suggester (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/suggester-status))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/delete-suggester-response (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.delete-suggester-response/Suggester] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.describe-service-access-policies-response/access-policies (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/access-policies-status))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/describe-service-access-policies-response (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.describe-service-access-policies-response/AccessPolicies] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.date-options/default-value (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/field-value))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.date-options/source-field (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/field-name))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.date-options/facet-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.date-options/search-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.date-options/return-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.date-options/sort-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/date-options (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.date-options/DefaultValue :portkey.aws.cloudsearch.-2013-01-01.date-options/SourceField :portkey.aws.cloudsearch.-2013-01-01.date-options/FacetEnabled :portkey.aws.cloudsearch.-2013-01-01.date-options/SearchEnabled :portkey.aws.cloudsearch.-2013-01-01.date-options/ReturnEnabled :portkey.aws.cloudsearch.-2013-01-01.date-options/SortEnabled] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.describe-analysis-schemes-response/analysis-schemes (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/analysis-scheme-status-list))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/describe-analysis-schemes-response (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.describe-analysis-schemes-response/AnalysisSchemes] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/field-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36226__auto__] (clojure.core/<= 1 (clojure.core/count s__36226__auto__))) (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 64)) (clojure.core/fn [s__36228__auto__] (clojure.core/re-matches #"[a-z][a-z0-9_]*" s__36228__auto__))))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/domain-name-map (clojure.spec.alpha/map-of :portkey.aws.cloudsearch.-2013-01-01/domain-name :portkey.aws.cloudsearch.-2013-01-01/apiversion))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.base-exception/code (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/error-code))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.base-exception/message (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/error-message))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/base-exception (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.base-exception/Code :portkey.aws.cloudsearch.-2013-01-01.base-exception/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/standard-name-list (clojure.spec.alpha/coll-of :portkey.aws.cloudsearch.-2013-01-01/standard-name))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/suggester-fuzzy-matching {"none" "none", :none "none", "low" "low", :low "low", "high" "high", :high "high"})

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/domain-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36226__auto__] (clojure.core/<= 1 (clojure.core/count s__36226__auto__))) (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 64))))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/delete-domain-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.cloudsearch.-2013-01-01/DomainStatus] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.describe-index-fields-response/index-fields (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/index-field-status-list))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/describe-index-fields-response (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.describe-index-fields-response/IndexFields] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/dynamic-field-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36226__auto__] (clojure.core/<= 1 (clojure.core/count s__36226__auto__))) (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 64)) (clojure.core/fn [s__36228__auto__] (clojure.core/re-matches #"([a-z][a-z0-9_]*\*?|\*[a-z0-9_]*)" s__36228__auto__))))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/expression-status-list (clojure.spec.alpha/coll-of :portkey.aws.cloudsearch.-2013-01-01/expression-status))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/analysis-scheme-language {"nl" "nl", :fr "fr", :ja "ja", :el "el", "pt" "pt", "en" "en", :es "es", "lv" "lv", :pt "pt", :fi "fi", :ga "ga", "ro" "ro", "hy" "hy", "tr" "tr", "it" "it", "el" "el", "fa" "fa", :ca "ca", :ro "ro", :th "th", :tr "tr", :cs "cs", :hu "hu", "id" "id", "fi" "fi", :ko "ko", "ca" "ca", "sv" "sv", "fr" "fr", "eu" "eu", :it "it", "da" "da", "hu" "hu", "de" "de", "hi" "hi", :en "en", :nl "nl", "ru" "ru", :mul "mul", "ga" "ga", "es" "es", :de "de", :id "id", :ar "ar", :zh-hant "zh-Hant", "ja" "ja", :hy "hy", "mul" "mul", "gl" "gl", :ru "ru", :gl "gl", "cs" "cs", "no" "no", "zh-Hans" "zh-Hans", :he "he", :sv "sv", :da "da", "ar" "ar", "bg" "bg", "ko" "ko", :zh-hans "zh-Hans", :bg "bg", :lv "lv", "th" "th", :eu "eu", "he" "he", :hi "hi", :no "no", "zh-Hant" "zh-Hant", :fa "fa"})

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.describe-suggesters-request/suggester-names (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/standard-name-list))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.describe-suggesters-request/deployed (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/describe-suggesters-request (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/DomainName] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.describe-suggesters-request/SuggesterNames :portkey.aws.cloudsearch.-2013-01-01.describe-suggesters-request/Deployed] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.define-expression-response/expression (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/expression-status))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/define-expression-response (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.define-expression-response/Expression] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.literal-array-options/default-value (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/field-value))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.literal-array-options/source-fields (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/field-name-comma-list))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.literal-array-options/facet-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.literal-array-options/search-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.literal-array-options/return-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/literal-array-options (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.literal-array-options/DefaultValue :portkey.aws.cloudsearch.-2013-01-01.literal-array-options/SourceFields :portkey.aws.cloudsearch.-2013-01-01.literal-array-options/FacetEnabled :portkey.aws.cloudsearch.-2013-01-01.literal-array-options/SearchEnabled :portkey.aws.cloudsearch.-2013-01-01.literal-array-options/ReturnEnabled] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.delete-analysis-scheme-response/analysis-scheme (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/analysis-scheme-status))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/delete-analysis-scheme-response (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.delete-analysis-scheme-response/AnalysisScheme] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/word (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36228__auto__] (clojure.core/re-matches #"[\S]+" s__36228__auto__))))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/partition-instance-type {"search.m3.2xlarge" "search.m3.2xlarge", "search.m3.large" "search.m3.large", :search.m3.2xlarge "search.m3.2xlarge", "search.m2.xlarge" "search.m2.xlarge", :search.m3.large "search.m3.large", :search.m3.medium "search.m3.medium", :search.m1.small "search.m1.small", :search.m1.large "search.m1.large", "search.m3.xlarge" "search.m3.xlarge", :search.m2.xlarge "search.m2.xlarge", "search.m1.small" "search.m1.small", "search.m3.medium" "search.m3.medium", :search.m3.xlarge "search.m3.xlarge", "search.m1.large" "search.m1.large", :search.m2.2xlarge "search.m2.2xlarge", "search.m2.2xlarge" "search.m2.2xlarge"})

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/define-index-field-request (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/DomainName :portkey.aws.cloudsearch.-2013-01-01/IndexField] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.expression-status/options (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/expression))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.expression-status/status (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/option-status))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/expression-status (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.expression-status/Options :portkey.aws.cloudsearch.-2013-01-01.expression-status/Status] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.literal-options/default-value (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/field-value))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.literal-options/source-field (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/field-name))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.literal-options/facet-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.literal-options/search-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.literal-options/return-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.literal-options/sort-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/literal-options (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.literal-options/DefaultValue :portkey.aws.cloudsearch.-2013-01-01.literal-options/SourceField :portkey.aws.cloudsearch.-2013-01-01.literal-options/FacetEnabled :portkey.aws.cloudsearch.-2013-01-01.literal-options/SearchEnabled :portkey.aws.cloudsearch.-2013-01-01.literal-options/ReturnEnabled :portkey.aws.cloudsearch.-2013-01-01.literal-options/SortEnabled] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.update-scaling-parameters-response/scaling-parameters (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/scaling-parameters-status))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/update-scaling-parameters-response (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.update-scaling-parameters-response/ScalingParameters] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.update-service-access-policies-response/access-policies (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/access-policies-status))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/update-service-access-policies-response (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.update-service-access-policies-response/AccessPolicies] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.access-policies-status/options (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/policy-document))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.access-policies-status/status (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/option-status))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/access-policies-status (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.access-policies-status/Options :portkey.aws.cloudsearch.-2013-01-01.access-policies-status/Status] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.describe-scaling-parameters-response/scaling-parameters (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/scaling-parameters-status))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/describe-scaling-parameters-response (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.describe-scaling-parameters-response/ScalingParameters] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/domain-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36226__auto__] (clojure.core/<= 3 (clojure.core/count s__36226__auto__))) (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 28)) (clojure.core/fn [s__36228__auto__] (clojure.core/re-matches #"[a-z][a-z0-9\-]+" s__36228__auto__))))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.describe-expressions-request/expression-names (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/standard-name-list))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.describe-expressions-request/deployed (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/describe-expressions-request (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/DomainName] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.describe-expressions-request/ExpressionNames :portkey.aws.cloudsearch.-2013-01-01.describe-expressions-request/Deployed] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.index-field/index-field-name (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/dynamic-field-name))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/index-field (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.index-field/IndexFieldName :portkey.aws.cloudsearch.-2013-01-01/IndexFieldType] :opt-un [:portkey.aws.cloudsearch.-2013-01-01/DoubleArrayOptions :portkey.aws.cloudsearch.-2013-01-01/LatLonOptions :portkey.aws.cloudsearch.-2013-01-01/TextOptions :portkey.aws.cloudsearch.-2013-01-01/DoubleOptions :portkey.aws.cloudsearch.-2013-01-01/TextArrayOptions :portkey.aws.cloudsearch.-2013-01-01/IntArrayOptions :portkey.aws.cloudsearch.-2013-01-01/DateArrayOptions :portkey.aws.cloudsearch.-2013-01-01/DateOptions :portkey.aws.cloudsearch.-2013-01-01/LiteralArrayOptions :portkey.aws.cloudsearch.-2013-01-01/LiteralOptions :portkey.aws.cloudsearch.-2013-01-01/IntOptions] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.describe-domains-request/domain-names (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/domain-name-list))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/describe-domains-request (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.describe-domains-request/DomainNames] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.delete-expression-response/expression (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/expression-status))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/delete-expression-response (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.delete-expression-response/Expression] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/field-value (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36226__auto__] (clojure.core/<= 0 (clojure.core/count s__36226__auto__))) (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 1024))))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.delete-analysis-scheme-request/analysis-scheme-name (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/standard-name))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/delete-analysis-scheme-request (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/DomainName :portkey.aws.cloudsearch.-2013-01-01.delete-analysis-scheme-request/AnalysisSchemeName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/maximum-partition-count (clojure.spec.alpha/int-in 1 Long/MAX_VALUE))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/search-instance-type (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.update-service-access-policies-request/access-policies (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/policy-document))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/update-service-access-policies-request (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01/DomainName :portkey.aws.cloudsearch.-2013-01-01.update-service-access-policies-request/AccessPolicies] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/option-state {"RequiresIndexDocuments" "RequiresIndexDocuments", :requires-index-documents "RequiresIndexDocuments", "Processing" "Processing", :processing "Processing", "Active" "Active", :active "Active", "FailedToValidate" "FailedToValidate", :failed-to-validate "FailedToValidate"})

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/create-domain-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.cloudsearch.-2013-01-01/DomainStatus] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/multiaz clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/uint-value (clojure.spec.alpha/int-in 0 Long/MAX_VALUE))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.scaling-parameters/desired-instance-type (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/partition-instance-type))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.scaling-parameters/desired-replication-count (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/uint-value))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.scaling-parameters/desired-partition-count (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/uint-value))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/scaling-parameters (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.scaling-parameters/DesiredInstanceType :portkey.aws.cloudsearch.-2013-01-01.scaling-parameters/DesiredReplicationCount :portkey.aws.cloudsearch.-2013-01-01.scaling-parameters/DesiredPartitionCount] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.describe-suggesters-response/suggesters (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/suggester-status-list))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/describe-suggesters-response (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.describe-suggesters-response/Suggesters] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.int-options/default-value (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/long))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.int-options/source-field (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/field-name))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.int-options/facet-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.int-options/search-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.int-options/return-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.int-options/sort-enabled (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/boolean))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/int-options (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.int-options/DefaultValue :portkey.aws.cloudsearch.-2013-01-01.int-options/SourceField :portkey.aws.cloudsearch.-2013-01-01.int-options/FacetEnabled :portkey.aws.cloudsearch.-2013-01-01.int-options/SearchEnabled :portkey.aws.cloudsearch.-2013-01-01.int-options/ReturnEnabled :portkey.aws.cloudsearch.-2013-01-01.int-options/SortEnabled] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/analysis-scheme-status-list (clojure.spec.alpha/coll-of :portkey.aws.cloudsearch.-2013-01-01/analysis-scheme-status))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.document-suggester-options/source-field (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/field-name))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.document-suggester-options/fuzzy-matching (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/suggester-fuzzy-matching))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.document-suggester-options/sort-expression (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/string))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/document-suggester-options (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.document-suggester-options/SourceField] :opt-un [:portkey.aws.cloudsearch.-2013-01-01.document-suggester-options/FuzzyMatching :portkey.aws.cloudsearch.-2013-01-01.document-suggester-options/SortExpression] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.availability-options-status/options (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/multiaz))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01.availability-options-status/status (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/option-status))
(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/availability-options-status (portkey.aws/json-keys :req-un [:portkey.aws.cloudsearch.-2013-01-01.availability-options-status/Options :portkey.aws.cloudsearch.-2013-01-01.availability-options-status/Status] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.cloudsearch.-2013-01-01/boolean clojure.core/boolean?)

(clojure.core/defn delete-index-field "Removes an IndexField from the search domain. For more information, see\nConfiguring Index Fields\n(http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-index-fields.html)\nin the Amazon CloudSearch Developer Guide." ([delete-index-field-request] (clojure.core/let [req<-input__36755__auto__ (req<-delete-index-field-request "DeleteIndexField" delete-index-field-request)] (portkey.aws/-query-call portkey.aws.cloudsearch.-2013-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.cloudsearch.-2013-01-01/delete-index-field-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.cloudsearch.-2013-01-01/delete-index-field-response {"BaseException" :portkey.aws.cloudsearch.-2013-01-01/base-exception, "InternalException" :portkey.aws.cloudsearch.-2013-01-01/internal-exception, "InvalidTypeException" :portkey.aws.cloudsearch.-2013-01-01/invalid-type-exception, "ResourceNotFoundException" :portkey.aws.cloudsearch.-2013-01-01/resource-not-found-exception}))))
(clojure.spec.alpha/fdef delete-index-field :args (clojure.spec.alpha/tuple :portkey.aws.cloudsearch.-2013-01-01/delete-index-field-request) :ret (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/delete-index-field-response))

nil

(clojure.core/defn update-service-access-policies "Configures the access rules that control access to the domain's document and\nsearch endpoints. For more information, see Configuring Access for an Amazon\nCloudSearch Domain\n(http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-access.html)." ([update-service-access-policies-request] (clojure.core/let [req<-input__36755__auto__ (req<-update-service-access-policies-request "UpdateServiceAccessPolicies" update-service-access-policies-request)] (portkey.aws/-query-call portkey.aws.cloudsearch.-2013-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.cloudsearch.-2013-01-01/update-service-access-policies-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.cloudsearch.-2013-01-01/update-service-access-policies-response {"BaseException" :portkey.aws.cloudsearch.-2013-01-01/base-exception, "InternalException" :portkey.aws.cloudsearch.-2013-01-01/internal-exception, "LimitExceededException" :portkey.aws.cloudsearch.-2013-01-01/limit-exceeded-exception, "ResourceNotFoundException" :portkey.aws.cloudsearch.-2013-01-01/resource-not-found-exception, "InvalidTypeException" :portkey.aws.cloudsearch.-2013-01-01/invalid-type-exception}))))
(clojure.spec.alpha/fdef update-service-access-policies :args (clojure.spec.alpha/tuple :portkey.aws.cloudsearch.-2013-01-01/update-service-access-policies-request) :ret (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/update-service-access-policies-response))

(clojure.core/defn describe-service-access-policies "Gets information about the access policies that control access to the domain's\ndocument and search endpoints. By default, shows the configuration with any\npending changes. Set the Deployed option to true to show the active\nconfiguration and exclude pending changes. For more information, see Configuring\nAccess for a Search Domain\n(http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-access.html)\nin the Amazon CloudSearch Developer Guide." ([describe-service-access-policies-request] (clojure.core/let [req<-input__36755__auto__ (req<-describe-service-access-policies-request "DescribeServiceAccessPolicies" describe-service-access-policies-request)] (portkey.aws/-query-call portkey.aws.cloudsearch.-2013-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.cloudsearch.-2013-01-01/describe-service-access-policies-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.cloudsearch.-2013-01-01/describe-service-access-policies-response {"BaseException" :portkey.aws.cloudsearch.-2013-01-01/base-exception, "InternalException" :portkey.aws.cloudsearch.-2013-01-01/internal-exception, "ResourceNotFoundException" :portkey.aws.cloudsearch.-2013-01-01/resource-not-found-exception}))))
(clojure.spec.alpha/fdef describe-service-access-policies :args (clojure.spec.alpha/tuple :portkey.aws.cloudsearch.-2013-01-01/describe-service-access-policies-request) :ret (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/describe-service-access-policies-response))

(clojure.core/defn define-analysis-scheme "Configures an analysis scheme that can be applied to a text or text-array field\nto define language-specific text processing options. For more information, see\nConfiguring Analysis Schemes\n(http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-analysis-schemes.html)\nin the Amazon CloudSearch Developer Guide." ([define-analysis-scheme-request] (clojure.core/let [req<-input__36755__auto__ (req<-define-analysis-scheme-request "DefineAnalysisScheme" define-analysis-scheme-request)] (portkey.aws/-query-call portkey.aws.cloudsearch.-2013-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.cloudsearch.-2013-01-01/define-analysis-scheme-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.cloudsearch.-2013-01-01/define-analysis-scheme-response {"BaseException" :portkey.aws.cloudsearch.-2013-01-01/base-exception, "InternalException" :portkey.aws.cloudsearch.-2013-01-01/internal-exception, "LimitExceededException" :portkey.aws.cloudsearch.-2013-01-01/limit-exceeded-exception, "InvalidTypeException" :portkey.aws.cloudsearch.-2013-01-01/invalid-type-exception, "ResourceNotFoundException" :portkey.aws.cloudsearch.-2013-01-01/resource-not-found-exception}))))
(clojure.spec.alpha/fdef define-analysis-scheme :args (clojure.spec.alpha/tuple :portkey.aws.cloudsearch.-2013-01-01/define-analysis-scheme-request) :ret (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/define-analysis-scheme-response))

(clojure.core/defn define-index-field "Configures an IndexField for the search domain. Used to create new fields and\nmodify existing ones. You must specify the name of the domain you are\nconfiguring and an index field configuration. The index field configuration\nspecifies a unique name, the index field type, and the options you want to\nconfigure for the field. The options you can specify depend on the\nIndexFieldType. If the field exists, the new configuration replaces the old one.\nFor more information, see Configuring Index Fields\n(http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-index-fields.html)\nin the Amazon CloudSearch Developer Guide." ([define-index-field-request] (clojure.core/let [req<-input__36755__auto__ (req<-define-index-field-request "DefineIndexField" define-index-field-request)] (portkey.aws/-query-call portkey.aws.cloudsearch.-2013-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.cloudsearch.-2013-01-01/define-index-field-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.cloudsearch.-2013-01-01/define-index-field-response {"BaseException" :portkey.aws.cloudsearch.-2013-01-01/base-exception, "InternalException" :portkey.aws.cloudsearch.-2013-01-01/internal-exception, "LimitExceededException" :portkey.aws.cloudsearch.-2013-01-01/limit-exceeded-exception, "InvalidTypeException" :portkey.aws.cloudsearch.-2013-01-01/invalid-type-exception, "ResourceNotFoundException" :portkey.aws.cloudsearch.-2013-01-01/resource-not-found-exception}))))
(clojure.spec.alpha/fdef define-index-field :args (clojure.spec.alpha/tuple :portkey.aws.cloudsearch.-2013-01-01/define-index-field-request) :ret (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/define-index-field-response))

(clojure.core/defn define-expression "Configures an Expression for the search domain. Used to create new expressions\nand modify existing ones. If the expression exists, the new configuration\nreplaces the old one. For more information, see Configuring Expressions\n(http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-expressions.html)\nin the Amazon CloudSearch Developer Guide." ([define-expression-request] (clojure.core/let [req<-input__36755__auto__ (req<-define-expression-request "DefineExpression" define-expression-request)] (portkey.aws/-query-call portkey.aws.cloudsearch.-2013-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.cloudsearch.-2013-01-01/define-expression-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.cloudsearch.-2013-01-01/define-expression-response {"BaseException" :portkey.aws.cloudsearch.-2013-01-01/base-exception, "InternalException" :portkey.aws.cloudsearch.-2013-01-01/internal-exception, "LimitExceededException" :portkey.aws.cloudsearch.-2013-01-01/limit-exceeded-exception, "InvalidTypeException" :portkey.aws.cloudsearch.-2013-01-01/invalid-type-exception, "ResourceNotFoundException" :portkey.aws.cloudsearch.-2013-01-01/resource-not-found-exception}))))
(clojure.spec.alpha/fdef define-expression :args (clojure.spec.alpha/tuple :portkey.aws.cloudsearch.-2013-01-01/define-expression-request) :ret (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/define-expression-response))

(clojure.core/defn build-suggesters "Indexes the search suggestions. For more information, see Configuring Suggesters\n(http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-suggestions.html#configuring-suggesters)\nin the Amazon CloudSearch Developer Guide." ([build-suggesters-request] (clojure.core/let [req<-input__36755__auto__ (req<-build-suggesters-request "BuildSuggesters" build-suggesters-request)] (portkey.aws/-query-call portkey.aws.cloudsearch.-2013-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.cloudsearch.-2013-01-01/build-suggesters-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.cloudsearch.-2013-01-01/build-suggesters-response {"BaseException" :portkey.aws.cloudsearch.-2013-01-01/base-exception, "InternalException" :portkey.aws.cloudsearch.-2013-01-01/internal-exception, "ResourceNotFoundException" :portkey.aws.cloudsearch.-2013-01-01/resource-not-found-exception}))))
(clojure.spec.alpha/fdef build-suggesters :args (clojure.spec.alpha/tuple :portkey.aws.cloudsearch.-2013-01-01/build-suggesters-request) :ret (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/build-suggesters-response))

(clojure.core/defn describe-index-fields "Gets information about the index fields configured for the search domain. Can be\nlimited to specific fields by name. By default, shows all fields and includes\nany pending changes to the configuration. Set the Deployed option to true to\nshow the active configuration and exclude pending changes. For more information,\nsee Getting Domain Information\n(http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-domain-info.html)\nin the Amazon CloudSearch Developer Guide." ([describe-index-fields-request] (clojure.core/let [req<-input__36755__auto__ (req<-describe-index-fields-request "DescribeIndexFields" describe-index-fields-request)] (portkey.aws/-query-call portkey.aws.cloudsearch.-2013-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.cloudsearch.-2013-01-01/describe-index-fields-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.cloudsearch.-2013-01-01/describe-index-fields-response {"BaseException" :portkey.aws.cloudsearch.-2013-01-01/base-exception, "InternalException" :portkey.aws.cloudsearch.-2013-01-01/internal-exception, "ResourceNotFoundException" :portkey.aws.cloudsearch.-2013-01-01/resource-not-found-exception}))))
(clojure.spec.alpha/fdef describe-index-fields :args (clojure.spec.alpha/tuple :portkey.aws.cloudsearch.-2013-01-01/describe-index-fields-request) :ret (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/describe-index-fields-response))

(clojure.core/defn create-domain "Creates a new search domain. For more information, see Creating a Search Domain\n(http://docs.aws.amazon.com/cloudsearch/latest/developerguide/creating-domains.html)\nin the Amazon CloudSearch Developer Guide." ([create-domain-request] (clojure.core/let [req<-input__36755__auto__ (req<-create-domain-request "CreateDomain" create-domain-request)] (portkey.aws/-query-call portkey.aws.cloudsearch.-2013-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.cloudsearch.-2013-01-01/create-domain-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.cloudsearch.-2013-01-01/create-domain-response {"BaseException" :portkey.aws.cloudsearch.-2013-01-01/base-exception, "InternalException" :portkey.aws.cloudsearch.-2013-01-01/internal-exception, "LimitExceededException" :portkey.aws.cloudsearch.-2013-01-01/limit-exceeded-exception}))))
(clojure.spec.alpha/fdef create-domain :args (clojure.spec.alpha/tuple :portkey.aws.cloudsearch.-2013-01-01/create-domain-request) :ret (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/create-domain-response))

(clojure.core/defn define-suggester "Configures a suggester for a domain. A suggester enables you to display possible\nmatches before users finish typing their queries. When you configure a\nsuggester, you must specify the name of the text field you want to search for\npossible matches and a unique name for the suggester. For more information, see\nGetting Search Suggestions\n(http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-suggestions.html)\nin the Amazon CloudSearch Developer Guide." ([define-suggester-request] (clojure.core/let [req<-input__36755__auto__ (req<-define-suggester-request "DefineSuggester" define-suggester-request)] (portkey.aws/-query-call portkey.aws.cloudsearch.-2013-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.cloudsearch.-2013-01-01/define-suggester-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.cloudsearch.-2013-01-01/define-suggester-response {"BaseException" :portkey.aws.cloudsearch.-2013-01-01/base-exception, "InternalException" :portkey.aws.cloudsearch.-2013-01-01/internal-exception, "LimitExceededException" :portkey.aws.cloudsearch.-2013-01-01/limit-exceeded-exception, "InvalidTypeException" :portkey.aws.cloudsearch.-2013-01-01/invalid-type-exception, "ResourceNotFoundException" :portkey.aws.cloudsearch.-2013-01-01/resource-not-found-exception}))))
(clojure.spec.alpha/fdef define-suggester :args (clojure.spec.alpha/tuple :portkey.aws.cloudsearch.-2013-01-01/define-suggester-request) :ret (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/define-suggester-response))

(clojure.core/defn delete-expression "Removes an Expression from the search domain. For more information, see\nConfiguring Expressions\n(http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-expressions.html)\nin the Amazon CloudSearch Developer Guide." ([delete-expression-request] (clojure.core/let [req<-input__36755__auto__ (req<-delete-expression-request "DeleteExpression" delete-expression-request)] (portkey.aws/-query-call portkey.aws.cloudsearch.-2013-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.cloudsearch.-2013-01-01/delete-expression-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.cloudsearch.-2013-01-01/delete-expression-response {"BaseException" :portkey.aws.cloudsearch.-2013-01-01/base-exception, "InternalException" :portkey.aws.cloudsearch.-2013-01-01/internal-exception, "InvalidTypeException" :portkey.aws.cloudsearch.-2013-01-01/invalid-type-exception, "ResourceNotFoundException" :portkey.aws.cloudsearch.-2013-01-01/resource-not-found-exception}))))
(clojure.spec.alpha/fdef delete-expression :args (clojure.spec.alpha/tuple :portkey.aws.cloudsearch.-2013-01-01/delete-expression-request) :ret (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/delete-expression-response))

(clojure.core/defn delete-analysis-scheme "Deletes an analysis scheme. For more information, see Configuring Analysis\nSchemes\n(http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-analysis-schemes.html)\nin the Amazon CloudSearch Developer Guide." ([delete-analysis-scheme-request] (clojure.core/let [req<-input__36755__auto__ (req<-delete-analysis-scheme-request "DeleteAnalysisScheme" delete-analysis-scheme-request)] (portkey.aws/-query-call portkey.aws.cloudsearch.-2013-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.cloudsearch.-2013-01-01/delete-analysis-scheme-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.cloudsearch.-2013-01-01/delete-analysis-scheme-response {"BaseException" :portkey.aws.cloudsearch.-2013-01-01/base-exception, "InternalException" :portkey.aws.cloudsearch.-2013-01-01/internal-exception, "InvalidTypeException" :portkey.aws.cloudsearch.-2013-01-01/invalid-type-exception, "ResourceNotFoundException" :portkey.aws.cloudsearch.-2013-01-01/resource-not-found-exception}))))
(clojure.spec.alpha/fdef delete-analysis-scheme :args (clojure.spec.alpha/tuple :portkey.aws.cloudsearch.-2013-01-01/delete-analysis-scheme-request) :ret (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/delete-analysis-scheme-response))

(clojure.core/defn describe-analysis-schemes "Gets the analysis schemes configured for a domain. An analysis scheme defines\nlanguage-specific text processing options for a text field. Can be limited to\nspecific analysis schemes by name. By default, shows all analysis schemes and\nincludes any pending changes to the configuration. Set the Deployed option to\ntrue to show the active configuration and exclude pending changes. For more\ninformation, see Configuring Analysis Schemes\n(http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-analysis-schemes.html)\nin the Amazon CloudSearch Developer Guide." ([describe-analysis-schemes-request] (clojure.core/let [req<-input__36755__auto__ (req<-describe-analysis-schemes-request "DescribeAnalysisSchemes" describe-analysis-schemes-request)] (portkey.aws/-query-call portkey.aws.cloudsearch.-2013-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.cloudsearch.-2013-01-01/describe-analysis-schemes-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.cloudsearch.-2013-01-01/describe-analysis-schemes-response {"BaseException" :portkey.aws.cloudsearch.-2013-01-01/base-exception, "InternalException" :portkey.aws.cloudsearch.-2013-01-01/internal-exception, "ResourceNotFoundException" :portkey.aws.cloudsearch.-2013-01-01/resource-not-found-exception}))))
(clojure.spec.alpha/fdef describe-analysis-schemes :args (clojure.spec.alpha/tuple :portkey.aws.cloudsearch.-2013-01-01/describe-analysis-schemes-request) :ret (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/describe-analysis-schemes-response))

(clojure.core/defn describe-domains "Gets information about the search domains owned by this account. Can be limited\nto specific domains. Shows all domains by default. To get the number of\nsearchable documents in a domain, use the console or submit a matchall request\nto your domain's search endpoint: q=matchall&amp;q.parser=structured&amp;size=0.\nFor more information, see Getting Information about a Search Domain\n(http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-domain-info.html)\nin the Amazon CloudSearch Developer Guide." ([] (describe-domains {})) ([describe-domains-request] (clojure.core/let [req<-input__36755__auto__ (req<-describe-domains-request "DescribeDomains" describe-domains-request)] (portkey.aws/-query-call portkey.aws.cloudsearch.-2013-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.cloudsearch.-2013-01-01/describe-domains-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.cloudsearch.-2013-01-01/describe-domains-response {"BaseException" :portkey.aws.cloudsearch.-2013-01-01/base-exception, "InternalException" :portkey.aws.cloudsearch.-2013-01-01/internal-exception}))))
(clojure.spec.alpha/fdef describe-domains :args (clojure.spec.alpha/? :portkey.aws.cloudsearch.-2013-01-01/describe-domains-request) :ret (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/describe-domains-response))

(clojure.core/defn update-availability-options "Configures the availability options for a domain. Enabling the Multi-AZ option\nexpands an Amazon CloudSearch domain to an additional Availability Zone in the\nsame Region to increase fault tolerance in the event of a service disruption.\nChanges to the Multi-AZ option can take about half an hour to become active. For\nmore information, see Configuring Availability Options\n(http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-availability-options.html)\nin the Amazon CloudSearch Developer Guide." ([update-availability-options-request] (clojure.core/let [req<-input__36755__auto__ (req<-update-availability-options-request "UpdateAvailabilityOptions" update-availability-options-request)] (portkey.aws/-query-call portkey.aws.cloudsearch.-2013-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.cloudsearch.-2013-01-01/update-availability-options-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.cloudsearch.-2013-01-01/update-availability-options-response {"BaseException" :portkey.aws.cloudsearch.-2013-01-01/base-exception, "InternalException" :portkey.aws.cloudsearch.-2013-01-01/internal-exception, "InvalidTypeException" :portkey.aws.cloudsearch.-2013-01-01/invalid-type-exception, "LimitExceededException" :portkey.aws.cloudsearch.-2013-01-01/limit-exceeded-exception, "ResourceNotFoundException" :portkey.aws.cloudsearch.-2013-01-01/resource-not-found-exception, "DisabledOperationException" :portkey.aws.cloudsearch.-2013-01-01/disabled-operation-exception}))))
(clojure.spec.alpha/fdef update-availability-options :args (clojure.spec.alpha/tuple :portkey.aws.cloudsearch.-2013-01-01/update-availability-options-request) :ret (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/update-availability-options-response))

(clojure.core/defn update-scaling-parameters "Configures scaling parameters for a domain. A domain's scaling parameters\nspecify the desired search instance type and replication count. Amazon\nCloudSearch will still automatically scale your domain based on the volume of\ndata and traffic, but not below the desired instance type and replication count.\nIf the Multi-AZ option is enabled, these values control the resources used per\nAvailability Zone. For more information, see Configuring Scaling Options\n(http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-scaling-options.html)\nin the Amazon CloudSearch Developer Guide." ([update-scaling-parameters-request] (clojure.core/let [req<-input__36755__auto__ (req<-update-scaling-parameters-request "UpdateScalingParameters" update-scaling-parameters-request)] (portkey.aws/-query-call portkey.aws.cloudsearch.-2013-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.cloudsearch.-2013-01-01/update-scaling-parameters-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.cloudsearch.-2013-01-01/update-scaling-parameters-response {"BaseException" :portkey.aws.cloudsearch.-2013-01-01/base-exception, "InternalException" :portkey.aws.cloudsearch.-2013-01-01/internal-exception, "LimitExceededException" :portkey.aws.cloudsearch.-2013-01-01/limit-exceeded-exception, "ResourceNotFoundException" :portkey.aws.cloudsearch.-2013-01-01/resource-not-found-exception, "InvalidTypeException" :portkey.aws.cloudsearch.-2013-01-01/invalid-type-exception}))))
(clojure.spec.alpha/fdef update-scaling-parameters :args (clojure.spec.alpha/tuple :portkey.aws.cloudsearch.-2013-01-01/update-scaling-parameters-request) :ret (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/update-scaling-parameters-response))

(clojure.core/defn describe-scaling-parameters "Gets the scaling parameters configured for a domain. A domain's scaling\nparameters specify the desired search instance type and replication count. For\nmore information, see Configuring Scaling Options\n(http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-scaling-options.html)\nin the Amazon CloudSearch Developer Guide." ([describe-scaling-parameters-request] (clojure.core/let [req<-input__36755__auto__ (req<-describe-scaling-parameters-request "DescribeScalingParameters" describe-scaling-parameters-request)] (portkey.aws/-query-call portkey.aws.cloudsearch.-2013-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.cloudsearch.-2013-01-01/describe-scaling-parameters-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.cloudsearch.-2013-01-01/describe-scaling-parameters-response {"BaseException" :portkey.aws.cloudsearch.-2013-01-01/base-exception, "InternalException" :portkey.aws.cloudsearch.-2013-01-01/internal-exception, "ResourceNotFoundException" :portkey.aws.cloudsearch.-2013-01-01/resource-not-found-exception}))))
(clojure.spec.alpha/fdef describe-scaling-parameters :args (clojure.spec.alpha/tuple :portkey.aws.cloudsearch.-2013-01-01/describe-scaling-parameters-request) :ret (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/describe-scaling-parameters-response))

(clojure.core/defn index-documents "Tells the search domain to start indexing its documents using the latest\nindexing options. This operation must be invoked to activate options whose\nOptionStatus is RequiresIndexDocuments." ([index-documents-request] (clojure.core/let [req<-input__36755__auto__ (req<-index-documents-request "IndexDocuments" index-documents-request)] (portkey.aws/-query-call portkey.aws.cloudsearch.-2013-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.cloudsearch.-2013-01-01/index-documents-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.cloudsearch.-2013-01-01/index-documents-response {"BaseException" :portkey.aws.cloudsearch.-2013-01-01/base-exception, "InternalException" :portkey.aws.cloudsearch.-2013-01-01/internal-exception, "ResourceNotFoundException" :portkey.aws.cloudsearch.-2013-01-01/resource-not-found-exception}))))
(clojure.spec.alpha/fdef index-documents :args (clojure.spec.alpha/tuple :portkey.aws.cloudsearch.-2013-01-01/index-documents-request) :ret (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/index-documents-response))

(clojure.core/defn delete-domain "Permanently deletes a search domain and all of its data. Once a domain has been\ndeleted, it cannot be recovered. For more information, see Deleting a Search\nDomain\n(http://docs.aws.amazon.com/cloudsearch/latest/developerguide/deleting-domains.html)\nin the Amazon CloudSearch Developer Guide." ([delete-domain-request] (clojure.core/let [req<-input__36755__auto__ (req<-delete-domain-request "DeleteDomain" delete-domain-request)] (portkey.aws/-query-call portkey.aws.cloudsearch.-2013-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.cloudsearch.-2013-01-01/delete-domain-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.cloudsearch.-2013-01-01/delete-domain-response {"BaseException" :portkey.aws.cloudsearch.-2013-01-01/base-exception, "InternalException" :portkey.aws.cloudsearch.-2013-01-01/internal-exception}))))
(clojure.spec.alpha/fdef delete-domain :args (clojure.spec.alpha/tuple :portkey.aws.cloudsearch.-2013-01-01/delete-domain-request) :ret (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/delete-domain-response))

(clojure.core/defn delete-suggester "Deletes a suggester. For more information, see Getting Search Suggestions\n(http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-suggestions.html)\nin the Amazon CloudSearch Developer Guide." ([delete-suggester-request] (clojure.core/let [req<-input__36755__auto__ (req<-delete-suggester-request "DeleteSuggester" delete-suggester-request)] (portkey.aws/-query-call portkey.aws.cloudsearch.-2013-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.cloudsearch.-2013-01-01/delete-suggester-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.cloudsearch.-2013-01-01/delete-suggester-response {"BaseException" :portkey.aws.cloudsearch.-2013-01-01/base-exception, "InternalException" :portkey.aws.cloudsearch.-2013-01-01/internal-exception, "InvalidTypeException" :portkey.aws.cloudsearch.-2013-01-01/invalid-type-exception, "ResourceNotFoundException" :portkey.aws.cloudsearch.-2013-01-01/resource-not-found-exception}))))
(clojure.spec.alpha/fdef delete-suggester :args (clojure.spec.alpha/tuple :portkey.aws.cloudsearch.-2013-01-01/delete-suggester-request) :ret (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/delete-suggester-response))

(clojure.core/defn describe-availability-options "Gets the availability options configured for a domain. By default, shows the\nconfiguration with any pending changes. Set the Deployed option to true to show\nthe active configuration and exclude pending changes. For more information, see\nConfiguring Availability Options\n(http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-availability-options.html)\nin the Amazon CloudSearch Developer Guide." ([describe-availability-options-request] (clojure.core/let [req<-input__36755__auto__ (req<-describe-availability-options-request "DescribeAvailabilityOptions" describe-availability-options-request)] (portkey.aws/-query-call portkey.aws.cloudsearch.-2013-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.cloudsearch.-2013-01-01/describe-availability-options-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.cloudsearch.-2013-01-01/describe-availability-options-response {"BaseException" :portkey.aws.cloudsearch.-2013-01-01/base-exception, "InternalException" :portkey.aws.cloudsearch.-2013-01-01/internal-exception, "InvalidTypeException" :portkey.aws.cloudsearch.-2013-01-01/invalid-type-exception, "LimitExceededException" :portkey.aws.cloudsearch.-2013-01-01/limit-exceeded-exception, "ResourceNotFoundException" :portkey.aws.cloudsearch.-2013-01-01/resource-not-found-exception, "DisabledOperationException" :portkey.aws.cloudsearch.-2013-01-01/disabled-operation-exception}))))
(clojure.spec.alpha/fdef describe-availability-options :args (clojure.spec.alpha/tuple :portkey.aws.cloudsearch.-2013-01-01/describe-availability-options-request) :ret (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/describe-availability-options-response))

(clojure.core/defn describe-expressions "Gets the expressions configured for the search domain. Can be limited to\nspecific expressions by name. By default, shows all expressions and includes any\npending changes to the configuration. Set the Deployed option to true to show\nthe active configuration and exclude pending changes. For more information, see\nConfiguring Expressions\n(http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-expressions.html)\nin the Amazon CloudSearch Developer Guide." ([describe-expressions-request] (clojure.core/let [req<-input__36755__auto__ (req<-describe-expressions-request "DescribeExpressions" describe-expressions-request)] (portkey.aws/-query-call portkey.aws.cloudsearch.-2013-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.cloudsearch.-2013-01-01/describe-expressions-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.cloudsearch.-2013-01-01/describe-expressions-response {"BaseException" :portkey.aws.cloudsearch.-2013-01-01/base-exception, "InternalException" :portkey.aws.cloudsearch.-2013-01-01/internal-exception, "ResourceNotFoundException" :portkey.aws.cloudsearch.-2013-01-01/resource-not-found-exception}))))
(clojure.spec.alpha/fdef describe-expressions :args (clojure.spec.alpha/tuple :portkey.aws.cloudsearch.-2013-01-01/describe-expressions-request) :ret (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/describe-expressions-response))

(clojure.core/defn describe-suggesters "Gets the suggesters configured for a domain. A suggester enables you to display\npossible matches before users finish typing their queries. Can be limited to\nspecific suggesters by name. By default, shows all suggesters and includes any\npending changes to the configuration. Set the Deployed option to true to show\nthe active configuration and exclude pending changes. For more information, see\nGetting Search Suggestions\n(http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-suggestions.html)\nin the Amazon CloudSearch Developer Guide." ([describe-suggesters-request] (clojure.core/let [req<-input__36755__auto__ (req<-describe-suggesters-request "DescribeSuggesters" describe-suggesters-request)] (portkey.aws/-query-call portkey.aws.cloudsearch.-2013-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.cloudsearch.-2013-01-01/describe-suggesters-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.cloudsearch.-2013-01-01/describe-suggesters-response {"BaseException" :portkey.aws.cloudsearch.-2013-01-01/base-exception, "InternalException" :portkey.aws.cloudsearch.-2013-01-01/internal-exception, "ResourceNotFoundException" :portkey.aws.cloudsearch.-2013-01-01/resource-not-found-exception}))))
(clojure.spec.alpha/fdef describe-suggesters :args (clojure.spec.alpha/tuple :portkey.aws.cloudsearch.-2013-01-01/describe-suggesters-request) :ret (clojure.spec.alpha/and :portkey.aws.cloudsearch.-2013-01-01/describe-suggesters-response))
