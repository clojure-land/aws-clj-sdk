(ns portkey.aws.autoscaling.-2011-01-01 (:require [portkey.aws]))

(def
 endpoints
 '{"ap-northeast-1"
   {:credential-scope
    {:service "autoscaling", :region "ap-northeast-1"},
    :ssl-common-name "autoscaling.ap-northeast-1.amazonaws.com",
    :endpoint "https://autoscaling.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "autoscaling", :region "eu-west-1"},
    :ssl-common-name "autoscaling.eu-west-1.amazonaws.com",
    :endpoint "https://autoscaling.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "autoscaling", :region "us-east-2"},
    :ssl-common-name "autoscaling.us-east-2.amazonaws.com",
    :endpoint "https://autoscaling.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope
    {:service "autoscaling", :region "ap-southeast-2"},
    :ssl-common-name "autoscaling.ap-southeast-2.amazonaws.com",
    :endpoint "https://autoscaling.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "cn-north-1"
   {:credential-scope {:service "autoscaling", :region "cn-north-1"},
    :ssl-common-name "autoscaling.cn-north-1.amazonaws.com.cn",
    :endpoint "https://autoscaling.cn-north-1.amazonaws.com.cn",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "autoscaling", :region "sa-east-1"},
    :ssl-common-name "autoscaling.sa-east-1.amazonaws.com",
    :endpoint "https://autoscaling.sa-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope
    {:service "autoscaling", :region "ap-southeast-1"},
    :ssl-common-name "autoscaling.ap-southeast-1.amazonaws.com",
    :endpoint "https://autoscaling.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "cn-northwest-1"
   {:credential-scope
    {:service "autoscaling", :region "cn-northwest-1"},
    :ssl-common-name "autoscaling.cn-northwest-1.amazonaws.com.cn",
    :endpoint "https://autoscaling.cn-northwest-1.amazonaws.com.cn",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope
    {:service "autoscaling", :region "ap-northeast-2"},
    :ssl-common-name "autoscaling.ap-northeast-2.amazonaws.com",
    :endpoint "https://autoscaling.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-west-3"
   {:credential-scope {:service "autoscaling", :region "eu-west-3"},
    :ssl-common-name "autoscaling.eu-west-3.amazonaws.com",
    :endpoint "https://autoscaling.eu-west-3.amazonaws.com",
    :signature-version :v4},
   "ca-central-1"
   {:credential-scope {:service "autoscaling", :region "ca-central-1"},
    :ssl-common-name "autoscaling.ca-central-1.amazonaws.com",
    :endpoint "https://autoscaling.ca-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "autoscaling", :region "eu-central-1"},
    :ssl-common-name "autoscaling.eu-central-1.amazonaws.com",
    :endpoint "https://autoscaling.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "autoscaling", :region "eu-west-2"},
    :ssl-common-name "autoscaling.eu-west-2.amazonaws.com",
    :endpoint "https://autoscaling.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-gov-west-1"
   {:credential-scope
    {:service "autoscaling", :region "us-gov-west-1"},
    :ssl-common-name "autoscaling.us-gov-west-1.amazonaws.com",
    :endpoint "https://autoscaling.us-gov-west-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "autoscaling", :region "us-west-2"},
    :ssl-common-name "autoscaling.us-west-2.amazonaws.com",
    :endpoint "https://autoscaling.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "autoscaling", :region "us-east-1"},
    :ssl-common-name "autoscaling.us-east-1.amazonaws.com",
    :endpoint "https://autoscaling.us-east-1.amazonaws.com",
    :signature-version :v4},
   "us-west-1"
   {:credential-scope {:service "autoscaling", :region "us-west-1"},
    :ssl-common-name "autoscaling.us-west-1.amazonaws.com",
    :endpoint "https://autoscaling.us-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-south-1"
   {:credential-scope {:service "autoscaling", :region "ap-south-1"},
    :ssl-common-name "autoscaling.ap-south-1.amazonaws.com",
    :endpoint "https://autoscaling.ap-south-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-lifecycle-action-result ser-ascii-string-max-len255 ser-lifecycle-hook-names ser-predefined-metric-specification ser-should-respect-grace-period ser-filter ser-associate-public-ip-address ser-load-balancer-names ser-instance-ids ser-notification-target-resource-name ser-instance-monitoring ser-launch-template-specification ser-min-adjustment-magnitude ser-security-groups ser-ebs-optimized ser-monitoring-enabled ser-should-decrement-desired-capacity ser-metric-dimension-value ser-propagate-at-launch ser-max-records ser-tag-key ser-tags ser-lifecycle-hook-specifications ser-no-device ser-policy-names ser-ebs ser-cooldown ser-block-device-ebs-iops ser-block-device-ebs-encrypted ser-auto-scaling-group-max-size ser-metric-unit ser-policy-types ser-estimated-instance-warmup ser-block-device-ebs-volume-size ser-step-adjustments ser-activity-ids ser-spot-price ser-launch-configuration-names ser-instance-protected ser-auto-scaling-group-names ser-xml-string-max-len19 ser-xml-string ser-metric-dimension-name ser-timestamp-type ser-tag-value ser-xml-string-max-len255 ser-xml-string-max-len1023 ser-scheduled-action-names ser-values ser-metric-dimension ser-xml-string-user-data ser-resource-name ser-xml-string-max-len1600 ser-lifecycle-transition ser-launch-template-name ser-target-tracking-configuration ser-filters ser-min-adjustment-step ser-heartbeat-timeout ser-classic-linkvpcsecurity-groups ser-honor-cooldown ser-auto-scaling-notification-types ser-target-grouparns ser-protected-from-scale-in ser-block-device-ebs-delete-on-termination ser-step-adjustment ser-block-device-mappings ser-metric-statistic ser-xml-string-max-len2047 ser-xml-string-max-len511 ser-disable-scale-in ser-block-device-mapping ser-tag ser-metric-scale ser-block-device-ebs-volume-type ser-metric-name ser-metric-dimensions ser-metric-namespace ser-policy-increment ser-xml-string-max-len64 ser-lifecycle-hook-specification ser-auto-scaling-group-desired-capacity ser-availability-zones ser-metric-type ser-termination-policies ser-process-names ser-auto-scaling-group-min-size ser-force-delete ser-lifecycle-action-token ser-customized-metric-specification ser-health-check-grace-period ser-metrics ser-xml-string-max-len32)

(clojure.core/defn- ser-lifecycle-action-result [shape-input] shape-input)
(clojure.core/defn- ser-ascii-string-max-len255 [shape-input] shape-input)
(clojure.core/defn- ser-lifecycle-hook-names [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-predefined-metric-specification [shape-input] (clojure.core/cond-> {} (:predefined-metric-type shape-input) (clojure.core/assoc "PredefinedMetricSpecification.PredefinedMetricType" (ser-metric-type (:predefined-metric-type shape-input))) (:resource-label shape-input) (clojure.core/assoc "PredefinedMetricSpecification.ResourceLabel" (ser-xml-string-max-len1023 (:resource-label shape-input)))))
(clojure.core/defn- ser-should-respect-grace-period [shape-input] shape-input)
(clojure.core/defn- ser-filter [shape-input] (clojure.core/cond-> {} (:name shape-input) (clojure.core/assoc "Filter.Name" (ser-xml-string (:name shape-input))) (:values shape-input) (clojure.core/assoc "Filter.Values" (ser-values (:values shape-input)))))
(clojure.core/defn- ser-associate-public-ip-address [shape-input] shape-input)
(clojure.core/defn- ser-load-balancer-names [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-instance-ids [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-notification-target-resource-name [shape-input] shape-input)
(clojure.core/defn- ser-instance-monitoring [shape-input] (clojure.core/cond-> {} (:enabled shape-input) (clojure.core/assoc "InstanceMonitoring.Enabled" (ser-monitoring-enabled (:enabled shape-input)))))
(clojure.core/defn- ser-launch-template-specification [shape-input] (clojure.core/cond-> {} (:launch-template-id shape-input) (clojure.core/assoc "LaunchTemplateSpecification.LaunchTemplateId" (ser-xml-string-max-len255 (:launch-template-id shape-input))) (:launch-template-name shape-input) (clojure.core/assoc "LaunchTemplateSpecification.LaunchTemplateName" (ser-launch-template-name (:launch-template-name shape-input))) (:version shape-input) (clojure.core/assoc "LaunchTemplateSpecification.Version" (ser-xml-string-max-len255 (:version shape-input)))))
(clojure.core/defn- ser-min-adjustment-magnitude [shape-input] shape-input)
(clojure.core/defn- ser-security-groups [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-ebs-optimized [shape-input] shape-input)
(clojure.core/defn- ser-monitoring-enabled [shape-input] shape-input)
(clojure.core/defn- ser-should-decrement-desired-capacity [shape-input] shape-input)
(clojure.core/defn- ser-metric-dimension-value [shape-input] shape-input)
(clojure.core/defn- ser-propagate-at-launch [shape-input] shape-input)
(clojure.core/defn- ser-max-records [shape-input] shape-input)
(clojure.core/defn- ser-tag-key [shape-input] shape-input)
(clojure.core/defn- ser-tags [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-lifecycle-hook-specifications [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-no-device [shape-input] shape-input)
(clojure.core/defn- ser-policy-names [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-ebs [shape-input] (clojure.core/cond-> {} (:snapshot-id shape-input) (clojure.core/assoc "Ebs.SnapshotId" (ser-xml-string-max-len255 (:snapshot-id shape-input))) (:volume-size shape-input) (clojure.core/assoc "Ebs.VolumeSize" (ser-block-device-ebs-volume-size (:volume-size shape-input))) (:volume-type shape-input) (clojure.core/assoc "Ebs.VolumeType" (ser-block-device-ebs-volume-type (:volume-type shape-input))) (:delete-on-termination shape-input) (clojure.core/assoc "Ebs.DeleteOnTermination" (ser-block-device-ebs-delete-on-termination (:delete-on-termination shape-input))) (:iops shape-input) (clojure.core/assoc "Ebs.Iops" (ser-block-device-ebs-iops (:iops shape-input))) (:encrypted shape-input) (clojure.core/assoc "Ebs.Encrypted" (ser-block-device-ebs-encrypted (:encrypted shape-input)))))
(clojure.core/defn- ser-cooldown [shape-input] shape-input)
(clojure.core/defn- ser-block-device-ebs-iops [shape-input] shape-input)
(clojure.core/defn- ser-block-device-ebs-encrypted [shape-input] shape-input)
(clojure.core/defn- ser-auto-scaling-group-max-size [shape-input] shape-input)
(clojure.core/defn- ser-metric-unit [shape-input] shape-input)
(clojure.core/defn- ser-policy-types [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-estimated-instance-warmup [shape-input] shape-input)
(clojure.core/defn- ser-block-device-ebs-volume-size [shape-input] shape-input)
(clojure.core/defn- ser-step-adjustments [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-activity-ids [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-spot-price [shape-input] shape-input)
(clojure.core/defn- ser-launch-configuration-names [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-instance-protected [shape-input] shape-input)
(clojure.core/defn- ser-auto-scaling-group-names [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-xml-string-max-len19 [shape-input] shape-input)
(clojure.core/defn- ser-xml-string [shape-input] shape-input)
(clojure.core/defn- ser-metric-dimension-name [shape-input] shape-input)
(clojure.core/defn- ser-timestamp-type [shape-input] shape-input)
(clojure.core/defn- ser-tag-value [shape-input] shape-input)
(clojure.core/defn- ser-xml-string-max-len255 [shape-input] shape-input)
(clojure.core/defn- ser-xml-string-max-len1023 [shape-input] shape-input)
(clojure.core/defn- ser-scheduled-action-names [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-values [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-metric-dimension [shape-input] (clojure.core/cond-> {} (:name shape-input) (clojure.core/assoc "MetricDimension.Name" (ser-metric-dimension-name (:name shape-input))) (:value shape-input) (clojure.core/assoc "MetricDimension.Value" (ser-metric-dimension-value (:value shape-input)))))
(clojure.core/defn- ser-xml-string-user-data [shape-input] shape-input)
(clojure.core/defn- ser-resource-name [shape-input] shape-input)
(clojure.core/defn- ser-xml-string-max-len1600 [shape-input] shape-input)
(clojure.core/defn- ser-lifecycle-transition [shape-input] shape-input)
(clojure.core/defn- ser-launch-template-name [shape-input] shape-input)
(clojure.core/defn- ser-target-tracking-configuration [shape-input] (clojure.core/cond-> {} (:predefined-metric-specification shape-input) (clojure.core/assoc "TargetTrackingConfiguration.PredefinedMetricSpecification" (ser-predefined-metric-specification (:predefined-metric-specification shape-input))) (:customized-metric-specification shape-input) (clojure.core/assoc "TargetTrackingConfiguration.CustomizedMetricSpecification" (ser-customized-metric-specification (:customized-metric-specification shape-input))) (:target-value shape-input) (clojure.core/assoc "TargetTrackingConfiguration.TargetValue" (ser-metric-scale (:target-value shape-input))) (:disable-scale-in shape-input) (clojure.core/assoc "TargetTrackingConfiguration.DisableScaleIn" (ser-disable-scale-in (:disable-scale-in shape-input)))))
(clojure.core/defn- ser-filters [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-min-adjustment-step [shape-input] shape-input)
(clojure.core/defn- ser-heartbeat-timeout [shape-input] shape-input)
(clojure.core/defn- ser-classic-linkvpcsecurity-groups [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-honor-cooldown [shape-input] shape-input)
(clojure.core/defn- ser-auto-scaling-notification-types [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-target-grouparns [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-protected-from-scale-in [shape-input] shape-input)
(clojure.core/defn- ser-block-device-ebs-delete-on-termination [shape-input] shape-input)
(clojure.core/defn- ser-step-adjustment [shape-input] (clojure.core/cond-> {} (:metric-interval-lower-bound shape-input) (clojure.core/assoc "StepAdjustment.MetricIntervalLowerBound" (ser-metric-scale (:metric-interval-lower-bound shape-input))) (:metric-interval-upper-bound shape-input) (clojure.core/assoc "StepAdjustment.MetricIntervalUpperBound" (ser-metric-scale (:metric-interval-upper-bound shape-input))) (:scaling-adjustment shape-input) (clojure.core/assoc "StepAdjustment.ScalingAdjustment" (ser-policy-increment (:scaling-adjustment shape-input)))))
(clojure.core/defn- ser-block-device-mappings [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-metric-statistic [shape-input] ({"Sum" "Sum", "Average" "Average", :maximum "Maximum", "SampleCount" "SampleCount", "Minimum" "Minimum", :sample-count "SampleCount", :minimum "Minimum", :average "Average", :sum "Sum", "Maximum" "Maximum"} shape-input))
(clojure.core/defn- ser-xml-string-max-len2047 [shape-input] shape-input)
(clojure.core/defn- ser-xml-string-max-len511 [shape-input] shape-input)
(clojure.core/defn- ser-disable-scale-in [shape-input] shape-input)
(clojure.core/defn- ser-block-device-mapping [shape-input] (clojure.core/cond-> {} (:virtual-name shape-input) (clojure.core/assoc "BlockDeviceMapping.VirtualName" (ser-xml-string-max-len255 (:virtual-name shape-input))) (:device-name shape-input) (clojure.core/assoc "BlockDeviceMapping.DeviceName" (ser-xml-string-max-len255 (:device-name shape-input))) (:ebs shape-input) (clojure.core/assoc "BlockDeviceMapping.Ebs" (ser-ebs (:ebs shape-input))) (:no-device shape-input) (clojure.core/assoc "BlockDeviceMapping.NoDevice" (ser-no-device (:no-device shape-input)))))
(clojure.core/defn- ser-tag [shape-input] (clojure.core/cond-> {} (:resource-id shape-input) (clojure.core/assoc "Tag.ResourceId" (ser-xml-string (:resource-id shape-input))) (:resource-type shape-input) (clojure.core/assoc "Tag.ResourceType" (ser-xml-string (:resource-type shape-input))) (:key shape-input) (clojure.core/assoc "Tag.Key" (ser-tag-key (:key shape-input))) (:value shape-input) (clojure.core/assoc "Tag.Value" (ser-tag-value (:value shape-input))) (:propagate-at-launch shape-input) (clojure.core/assoc "Tag.PropagateAtLaunch" (ser-propagate-at-launch (:propagate-at-launch shape-input)))))
(clojure.core/defn- ser-metric-scale [shape-input] shape-input)
(clojure.core/defn- ser-block-device-ebs-volume-type [shape-input] shape-input)
(clojure.core/defn- ser-metric-name [shape-input] shape-input)
(clojure.core/defn- ser-metric-dimensions [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-metric-namespace [shape-input] shape-input)
(clojure.core/defn- ser-policy-increment [shape-input] shape-input)
(clojure.core/defn- ser-xml-string-max-len64 [shape-input] shape-input)
(clojure.core/defn- ser-lifecycle-hook-specification [shape-input] (clojure.core/cond-> {} (:lifecycle-hook-name shape-input) (clojure.core/assoc "LifecycleHookSpecification.LifecycleHookName" (ser-ascii-string-max-len255 (:lifecycle-hook-name shape-input))) (:lifecycle-transition shape-input) (clojure.core/assoc "LifecycleHookSpecification.LifecycleTransition" (ser-lifecycle-transition (:lifecycle-transition shape-input))) (:notification-metadata shape-input) (clojure.core/assoc "LifecycleHookSpecification.NotificationMetadata" (ser-xml-string-max-len1023 (:notification-metadata shape-input))) (:heartbeat-timeout shape-input) (clojure.core/assoc "LifecycleHookSpecification.HeartbeatTimeout" (ser-heartbeat-timeout (:heartbeat-timeout shape-input))) (:default-result shape-input) (clojure.core/assoc "LifecycleHookSpecification.DefaultResult" (ser-lifecycle-action-result (:default-result shape-input))) (:notification-targetarn shape-input) (clojure.core/assoc "LifecycleHookSpecification.NotificationTargetARN" (ser-notification-target-resource-name (:notification-targetarn shape-input))) (:rolearn shape-input) (clojure.core/assoc "LifecycleHookSpecification.RoleARN" (ser-resource-name (:rolearn shape-input)))))
(clojure.core/defn- ser-auto-scaling-group-desired-capacity [shape-input] shape-input)
(clojure.core/defn- ser-availability-zones [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-metric-type [shape-input] ({"ASGAverageCPUUtilization" "ASGAverageCPUUtilization", :asgaveragecpuutilization "ASGAverageCPUUtilization", "ASGAverageNetworkIn" "ASGAverageNetworkIn", :asgaverage-network-in "ASGAverageNetworkIn", "ASGAverageNetworkOut" "ASGAverageNetworkOut", :asgaverage-network-out "ASGAverageNetworkOut", "ALBRequestCountPerTarget" "ALBRequestCountPerTarget", :albrequest-count-per-target "ALBRequestCountPerTarget"} shape-input))
(clojure.core/defn- ser-termination-policies [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-process-names [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-auto-scaling-group-min-size [shape-input] shape-input)
(clojure.core/defn- ser-force-delete [shape-input] shape-input)
(clojure.core/defn- ser-lifecycle-action-token [shape-input] shape-input)
(clojure.core/defn- ser-customized-metric-specification [shape-input] (clojure.core/cond-> {} (:metric-name shape-input) (clojure.core/assoc "CustomizedMetricSpecification.MetricName" (ser-metric-name (:metric-name shape-input))) (:namespace shape-input) (clojure.core/assoc "CustomizedMetricSpecification.Namespace" (ser-metric-namespace (:namespace shape-input))) (:dimensions shape-input) (clojure.core/assoc "CustomizedMetricSpecification.Dimensions" (ser-metric-dimensions (:dimensions shape-input))) (:statistic shape-input) (clojure.core/assoc "CustomizedMetricSpecification.Statistic" (ser-metric-statistic (:statistic shape-input))) (:unit shape-input) (clojure.core/assoc "CustomizedMetricSpecification.Unit" (ser-metric-unit (:unit shape-input)))))
(clojure.core/defn- ser-health-check-grace-period [shape-input] shape-input)
(clojure.core/defn- ser-metrics [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-xml-string-max-len32 [shape-input] shape-input)

(clojure.core/defn req<-update-auto-scaling-group-type [action-name38522 input38521] (clojure.core/let [input38523 {:body {"AutoScalingGroupName" (ser-resource-name (input38521 :auto-scaling-group-name)), "Version" "2011-01-01", "Action" action-name38522}}] (clojure.core/cond-> input38523 (clojure.core/contains? input38521 :new-instances-protected-from-scale-in) (clojure.core/assoc-in [:body "NewInstancesProtectedFromScaleIn"] (ser-instance-protected (input38521 :new-instances-protected-from-scale-in))) (clojure.core/contains? input38521 :vpczone-identifier) (clojure.core/assoc-in [:body "VPCZoneIdentifier"] (ser-xml-string-max-len2047 (input38521 :vpczone-identifier))) (clojure.core/contains? input38521 :launch-template) (clojure.core/assoc-in [:body "LaunchTemplate"] (ser-launch-template-specification (input38521 :launch-template))) (clojure.core/contains? input38521 :default-cooldown) (clojure.core/assoc-in [:body "DefaultCooldown"] (ser-cooldown (input38521 :default-cooldown))) (clojure.core/contains? input38521 :launch-configuration-name) (clojure.core/assoc-in [:body "LaunchConfigurationName"] (ser-resource-name (input38521 :launch-configuration-name))) (clojure.core/contains? input38521 :health-check-type) (clojure.core/assoc-in [:body "HealthCheckType"] (ser-xml-string-max-len32 (input38521 :health-check-type))) (clojure.core/contains? input38521 :min-size) (clojure.core/assoc-in [:body "MinSize"] (ser-auto-scaling-group-min-size (input38521 :min-size))) (clojure.core/contains? input38521 :availability-zones) (clojure.core/assoc-in [:body "AvailabilityZones"] (ser-availability-zones (input38521 :availability-zones))) (clojure.core/contains? input38521 :termination-policies) (clojure.core/assoc-in [:body "TerminationPolicies"] (ser-termination-policies (input38521 :termination-policies))) (clojure.core/contains? input38521 :max-size) (clojure.core/assoc-in [:body "MaxSize"] (ser-auto-scaling-group-max-size (input38521 :max-size))) (clojure.core/contains? input38521 :placement-group) (clojure.core/assoc-in [:body "PlacementGroup"] (ser-xml-string-max-len255 (input38521 :placement-group))) (clojure.core/contains? input38521 :desired-capacity) (clojure.core/assoc-in [:body "DesiredCapacity"] (ser-auto-scaling-group-desired-capacity (input38521 :desired-capacity))) (clojure.core/contains? input38521 :health-check-grace-period) (clojure.core/assoc-in [:body "HealthCheckGracePeriod"] (ser-health-check-grace-period (input38521 :health-check-grace-period))) (clojure.core/contains? input38521 :service-linked-rolearn) (clojure.core/assoc-in [:body "ServiceLinkedRoleARN"] (ser-resource-name (input38521 :service-linked-rolearn))))))
(clojure.core/defn req<-describe-scaling-activities-type [action-name38525 input38524] (clojure.core/cond-> {:body {"Version" "2011-01-01", "Action" action-name38525}} (clojure.core/contains? input38524 :activity-ids) (clojure.core/assoc-in [:body "ActivityIds"] (ser-activity-ids (input38524 :activity-ids))) (clojure.core/contains? input38524 :auto-scaling-group-name) (clojure.core/assoc-in [:body "AutoScalingGroupName"] (ser-resource-name (input38524 :auto-scaling-group-name))) (clojure.core/contains? input38524 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-max-records (input38524 :max-records))) (clojure.core/contains? input38524 :next-token) (clojure.core/assoc-in [:body "NextToken"] (ser-xml-string (input38524 :next-token)))))
(clojure.core/defn req<-auto-scaling-group-names-type [action-name38527 input38526] (clojure.core/cond-> {:body {"Version" "2011-01-01", "Action" action-name38527}} (clojure.core/contains? input38526 :auto-scaling-group-names) (clojure.core/assoc-in [:body "AutoScalingGroupNames"] (ser-auto-scaling-group-names (input38526 :auto-scaling-group-names))) (clojure.core/contains? input38526 :next-token) (clojure.core/assoc-in [:body "NextToken"] (ser-xml-string (input38526 :next-token))) (clojure.core/contains? input38526 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-max-records (input38526 :max-records)))))
(clojure.core/defn req<-attach-load-balancer-target-groups-type [action-name38529 input38528] {:body {"AutoScalingGroupName" (ser-resource-name (input38528 :auto-scaling-group-name)), "TargetGroupARNs" (ser-target-grouparns (input38528 :target-grouparns)), "Version" "2011-01-01", "Action" action-name38529}})
(clojure.core/defn req<-launch-configuration-names-type [action-name38531 input38530] (clojure.core/cond-> {:body {"Version" "2011-01-01", "Action" action-name38531}} (clojure.core/contains? input38530 :launch-configuration-names) (clojure.core/assoc-in [:body "LaunchConfigurationNames"] (ser-launch-configuration-names (input38530 :launch-configuration-names))) (clojure.core/contains? input38530 :next-token) (clojure.core/assoc-in [:body "NextToken"] (ser-xml-string (input38530 :next-token))) (clojure.core/contains? input38530 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-max-records (input38530 :max-records)))))
(clojure.core/defn req<-describe-policies-type [action-name38533 input38532] (clojure.core/cond-> {:body {"Version" "2011-01-01", "Action" action-name38533}} (clojure.core/contains? input38532 :auto-scaling-group-name) (clojure.core/assoc-in [:body "AutoScalingGroupName"] (ser-resource-name (input38532 :auto-scaling-group-name))) (clojure.core/contains? input38532 :policy-names) (clojure.core/assoc-in [:body "PolicyNames"] (ser-policy-names (input38532 :policy-names))) (clojure.core/contains? input38532 :policy-types) (clojure.core/assoc-in [:body "PolicyTypes"] (ser-policy-types (input38532 :policy-types))) (clojure.core/contains? input38532 :next-token) (clojure.core/assoc-in [:body "NextToken"] (ser-xml-string (input38532 :next-token))) (clojure.core/contains? input38532 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-max-records (input38532 :max-records)))))
(clojure.core/defn req<-set-instance-protection-query [action-name38535 input38534] {:body {"InstanceIds" (ser-instance-ids (input38534 :instance-ids)), "AutoScalingGroupName" (ser-resource-name (input38534 :auto-scaling-group-name)), "ProtectedFromScaleIn" (ser-protected-from-scale-in (input38534 :protected-from-scale-in)), "Version" "2011-01-01", "Action" action-name38535}})
(clojure.core/defn req<-scaling-process-query [action-name38537 input38536] (clojure.core/let [input38538 {:body {"AutoScalingGroupName" (ser-resource-name (input38536 :auto-scaling-group-name)), "Version" "2011-01-01", "Action" action-name38537}}] (clojure.core/cond-> input38538 (clojure.core/contains? input38536 :scaling-processes) (clojure.core/assoc-in [:body "ScalingProcesses"] (ser-process-names (input38536 :scaling-processes))))))
(clojure.core/defn req<-detach-instances-query [action-name38540 input38539] (clojure.core/let [input38541 {:body {"AutoScalingGroupName" (ser-resource-name (input38539 :auto-scaling-group-name)), "ShouldDecrementDesiredCapacity" (ser-should-decrement-desired-capacity (input38539 :should-decrement-desired-capacity)), "Version" "2011-01-01", "Action" action-name38540}}] (clojure.core/cond-> input38541 (clojure.core/contains? input38539 :instance-ids) (clojure.core/assoc-in [:body "InstanceIds"] (ser-instance-ids (input38539 :instance-ids))))))
(clojure.core/defn req<-attach-instances-query [action-name38543 input38542] (clojure.core/let [input38544 {:body {"AutoScalingGroupName" (ser-resource-name (input38542 :auto-scaling-group-name)), "Version" "2011-01-01", "Action" action-name38543}}] (clojure.core/cond-> input38544 (clojure.core/contains? input38542 :instance-ids) (clojure.core/assoc-in [:body "InstanceIds"] (ser-instance-ids (input38542 :instance-ids))))))
(clojure.core/defn req<-delete-tags-type [action-name38546 input38545] {:body {"Tags" (ser-tags (input38545 :tags)), "Version" "2011-01-01", "Action" action-name38546}})
(clojure.core/defn req<-record-lifecycle-action-heartbeat-type [action-name38548 input38547] (clojure.core/let [input38549 {:body {"LifecycleHookName" (ser-ascii-string-max-len255 (input38547 :lifecycle-hook-name)), "AutoScalingGroupName" (ser-resource-name (input38547 :auto-scaling-group-name)), "Version" "2011-01-01", "Action" action-name38548}}] (clojure.core/cond-> input38549 (clojure.core/contains? input38547 :lifecycle-action-token) (clojure.core/assoc-in [:body "LifecycleActionToken"] (ser-lifecycle-action-token (input38547 :lifecycle-action-token))) (clojure.core/contains? input38547 :instance-id) (clojure.core/assoc-in [:body "InstanceId"] (ser-xml-string-max-len19 (input38547 :instance-id))))))
(clojure.core/defn req<-create-auto-scaling-group-type [action-name38551 input38550] (clojure.core/let [input38552 {:body {"AutoScalingGroupName" (ser-xml-string-max-len255 (input38550 :auto-scaling-group-name)), "MinSize" (ser-auto-scaling-group-min-size (input38550 :min-size)), "MaxSize" (ser-auto-scaling-group-max-size (input38550 :max-size)), "Version" "2011-01-01", "Action" action-name38551}}] (clojure.core/cond-> input38552 (clojure.core/contains? input38550 :new-instances-protected-from-scale-in) (clojure.core/assoc-in [:body "NewInstancesProtectedFromScaleIn"] (ser-instance-protected (input38550 :new-instances-protected-from-scale-in))) (clojure.core/contains? input38550 :instance-id) (clojure.core/assoc-in [:body "InstanceId"] (ser-xml-string-max-len19 (input38550 :instance-id))) (clojure.core/contains? input38550 :load-balancer-names) (clojure.core/assoc-in [:body "LoadBalancerNames"] (ser-load-balancer-names (input38550 :load-balancer-names))) (clojure.core/contains? input38550 :vpczone-identifier) (clojure.core/assoc-in [:body "VPCZoneIdentifier"] (ser-xml-string-max-len2047 (input38550 :vpczone-identifier))) (clojure.core/contains? input38550 :launch-template) (clojure.core/assoc-in [:body "LaunchTemplate"] (ser-launch-template-specification (input38550 :launch-template))) (clojure.core/contains? input38550 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tags (input38550 :tags))) (clojure.core/contains? input38550 :lifecycle-hook-specification-list) (clojure.core/assoc-in [:body "LifecycleHookSpecificationList"] (ser-lifecycle-hook-specifications (input38550 :lifecycle-hook-specification-list))) (clojure.core/contains? input38550 :default-cooldown) (clojure.core/assoc-in [:body "DefaultCooldown"] (ser-cooldown (input38550 :default-cooldown))) (clojure.core/contains? input38550 :launch-configuration-name) (clojure.core/assoc-in [:body "LaunchConfigurationName"] (ser-resource-name (input38550 :launch-configuration-name))) (clojure.core/contains? input38550 :target-grouparns) (clojure.core/assoc-in [:body "TargetGroupARNs"] (ser-target-grouparns (input38550 :target-grouparns))) (clojure.core/contains? input38550 :health-check-type) (clojure.core/assoc-in [:body "HealthCheckType"] (ser-xml-string-max-len32 (input38550 :health-check-type))) (clojure.core/contains? input38550 :availability-zones) (clojure.core/assoc-in [:body "AvailabilityZones"] (ser-availability-zones (input38550 :availability-zones))) (clojure.core/contains? input38550 :termination-policies) (clojure.core/assoc-in [:body "TerminationPolicies"] (ser-termination-policies (input38550 :termination-policies))) (clojure.core/contains? input38550 :placement-group) (clojure.core/assoc-in [:body "PlacementGroup"] (ser-xml-string-max-len255 (input38550 :placement-group))) (clojure.core/contains? input38550 :desired-capacity) (clojure.core/assoc-in [:body "DesiredCapacity"] (ser-auto-scaling-group-desired-capacity (input38550 :desired-capacity))) (clojure.core/contains? input38550 :health-check-grace-period) (clojure.core/assoc-in [:body "HealthCheckGracePeriod"] (ser-health-check-grace-period (input38550 :health-check-grace-period))) (clojure.core/contains? input38550 :service-linked-rolearn) (clojure.core/assoc-in [:body "ServiceLinkedRoleARN"] (ser-resource-name (input38550 :service-linked-rolearn))))))
(clojure.core/defn req<-terminate-instance-in-auto-scaling-group-type [action-name38554 input38553] {:body {"InstanceId" (ser-xml-string-max-len19 (input38553 :instance-id)), "ShouldDecrementDesiredCapacity" (ser-should-decrement-desired-capacity (input38553 :should-decrement-desired-capacity)), "Version" "2011-01-01", "Action" action-name38554}})
(clojure.core/defn req<-describe-notification-configurations-type [action-name38556 input38555] (clojure.core/cond-> {:body {"Version" "2011-01-01", "Action" action-name38556}} (clojure.core/contains? input38555 :auto-scaling-group-names) (clojure.core/assoc-in [:body "AutoScalingGroupNames"] (ser-auto-scaling-group-names (input38555 :auto-scaling-group-names))) (clojure.core/contains? input38555 :next-token) (clojure.core/assoc-in [:body "NextToken"] (ser-xml-string (input38555 :next-token))) (clojure.core/contains? input38555 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-max-records (input38555 :max-records)))))
(clojure.core/defn req<-attach-load-balancers-type [action-name38558 input38557] {:body {"AutoScalingGroupName" (ser-resource-name (input38557 :auto-scaling-group-name)), "LoadBalancerNames" (ser-load-balancer-names (input38557 :load-balancer-names)), "Version" "2011-01-01", "Action" action-name38558}})
(clojure.core/defn req<-set-instance-health-query [action-name38560 input38559] (clojure.core/let [input38561 {:body {"InstanceId" (ser-xml-string-max-len19 (input38559 :instance-id)), "HealthStatus" (ser-xml-string-max-len32 (input38559 :health-status)), "Version" "2011-01-01", "Action" action-name38560}}] (clojure.core/cond-> input38561 (clojure.core/contains? input38559 :should-respect-grace-period) (clojure.core/assoc-in [:body "ShouldRespectGracePeriod"] (ser-should-respect-grace-period (input38559 :should-respect-grace-period))))))
(clojure.core/defn req<-create-or-update-tags-type [action-name38563 input38562] {:body {"Tags" (ser-tags (input38562 :tags)), "Version" "2011-01-01", "Action" action-name38563}})
(clojure.core/defn req<-execute-policy-type [action-name38565 input38564] (clojure.core/let [input38566 {:body {"PolicyName" (ser-resource-name (input38564 :policy-name)), "Version" "2011-01-01", "Action" action-name38565}}] (clojure.core/cond-> input38566 (clojure.core/contains? input38564 :auto-scaling-group-name) (clojure.core/assoc-in [:body "AutoScalingGroupName"] (ser-resource-name (input38564 :auto-scaling-group-name))) (clojure.core/contains? input38564 :honor-cooldown) (clojure.core/assoc-in [:body "HonorCooldown"] (ser-honor-cooldown (input38564 :honor-cooldown))) (clojure.core/contains? input38564 :metric-value) (clojure.core/assoc-in [:body "MetricValue"] (ser-metric-scale (input38564 :metric-value))) (clojure.core/contains? input38564 :breach-threshold) (clojure.core/assoc-in [:body "BreachThreshold"] (ser-metric-scale (input38564 :breach-threshold))))))
(clojure.core/defn req<-disable-metrics-collection-query [action-name38568 input38567] (clojure.core/let [input38569 {:body {"AutoScalingGroupName" (ser-resource-name (input38567 :auto-scaling-group-name)), "Version" "2011-01-01", "Action" action-name38568}}] (clojure.core/cond-> input38569 (clojure.core/contains? input38567 :metrics) (clojure.core/assoc-in [:body "Metrics"] (ser-metrics (input38567 :metrics))))))
(clojure.core/defn req<-delete-lifecycle-hook-type [action-name38571 input38570] {:body {"LifecycleHookName" (ser-ascii-string-max-len255 (input38570 :lifecycle-hook-name)), "AutoScalingGroupName" (ser-resource-name (input38570 :auto-scaling-group-name)), "Version" "2011-01-01", "Action" action-name38571}})
(clojure.core/defn req<-describe-tags-type [action-name38573 input38572] (clojure.core/cond-> {:body {"Version" "2011-01-01", "Action" action-name38573}} (clojure.core/contains? input38572 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filters (input38572 :filters))) (clojure.core/contains? input38572 :next-token) (clojure.core/assoc-in [:body "NextToken"] (ser-xml-string (input38572 :next-token))) (clojure.core/contains? input38572 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-max-records (input38572 :max-records)))))
(clojure.core/defn req<-describe-scheduled-actions-type [action-name38575 input38574] (clojure.core/cond-> {:body {"Version" "2011-01-01", "Action" action-name38575}} (clojure.core/contains? input38574 :auto-scaling-group-name) (clojure.core/assoc-in [:body "AutoScalingGroupName"] (ser-resource-name (input38574 :auto-scaling-group-name))) (clojure.core/contains? input38574 :scheduled-action-names) (clojure.core/assoc-in [:body "ScheduledActionNames"] (ser-scheduled-action-names (input38574 :scheduled-action-names))) (clojure.core/contains? input38574 :start-time) (clojure.core/assoc-in [:body "StartTime"] (ser-timestamp-type (input38574 :start-time))) (clojure.core/contains? input38574 :end-time) (clojure.core/assoc-in [:body "EndTime"] (ser-timestamp-type (input38574 :end-time))) (clojure.core/contains? input38574 :next-token) (clojure.core/assoc-in [:body "NextToken"] (ser-xml-string (input38574 :next-token))) (clojure.core/contains? input38574 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-max-records (input38574 :max-records)))))
(clojure.core/defn req<-set-desired-capacity-type [action-name38577 input38576] (clojure.core/let [input38578 {:body {"AutoScalingGroupName" (ser-resource-name (input38576 :auto-scaling-group-name)), "DesiredCapacity" (ser-auto-scaling-group-desired-capacity (input38576 :desired-capacity)), "Version" "2011-01-01", "Action" action-name38577}}] (clojure.core/cond-> input38578 (clojure.core/contains? input38576 :honor-cooldown) (clojure.core/assoc-in [:body "HonorCooldown"] (ser-honor-cooldown (input38576 :honor-cooldown))))))
(clojure.core/defn req<-enable-metrics-collection-query [action-name38580 input38579] (clojure.core/let [input38581 {:body {"AutoScalingGroupName" (ser-resource-name (input38579 :auto-scaling-group-name)), "Granularity" (ser-xml-string-max-len255 (input38579 :granularity)), "Version" "2011-01-01", "Action" action-name38580}}] (clojure.core/cond-> input38581 (clojure.core/contains? input38579 :metrics) (clojure.core/assoc-in [:body "Metrics"] (ser-metrics (input38579 :metrics))))))
(clojure.core/defn req<-scaling-process-query [action-name38583 input38582] (clojure.core/let [input38584 {:body {"AutoScalingGroupName" (ser-resource-name (input38582 :auto-scaling-group-name)), "Version" "2011-01-01", "Action" action-name38583}}] (clojure.core/cond-> input38584 (clojure.core/contains? input38582 :scaling-processes) (clojure.core/assoc-in [:body "ScalingProcesses"] (ser-process-names (input38582 :scaling-processes))))))
(clojure.core/defn req<-detach-load-balancer-target-groups-type [action-name38586 input38585] {:body {"AutoScalingGroupName" (ser-resource-name (input38585 :auto-scaling-group-name)), "TargetGroupARNs" (ser-target-grouparns (input38585 :target-grouparns)), "Version" "2011-01-01", "Action" action-name38586}})
(clojure.core/defn req<-detach-load-balancers-type [action-name38588 input38587] {:body {"AutoScalingGroupName" (ser-resource-name (input38587 :auto-scaling-group-name)), "LoadBalancerNames" (ser-load-balancer-names (input38587 :load-balancer-names)), "Version" "2011-01-01", "Action" action-name38588}})
(clojure.core/defn req<-describe-lifecycle-hooks-type [action-name38590 input38589] (clojure.core/let [input38591 {:body {"AutoScalingGroupName" (ser-resource-name (input38589 :auto-scaling-group-name)), "Version" "2011-01-01", "Action" action-name38590}}] (clojure.core/cond-> input38591 (clojure.core/contains? input38589 :lifecycle-hook-names) (clojure.core/assoc-in [:body "LifecycleHookNames"] (ser-lifecycle-hook-names (input38589 :lifecycle-hook-names))))))
(clojure.core/defn req<-enter-standby-query [action-name38593 input38592] (clojure.core/let [input38594 {:body {"AutoScalingGroupName" (ser-resource-name (input38592 :auto-scaling-group-name)), "ShouldDecrementDesiredCapacity" (ser-should-decrement-desired-capacity (input38592 :should-decrement-desired-capacity)), "Version" "2011-01-01", "Action" action-name38593}}] (clojure.core/cond-> input38594 (clojure.core/contains? input38592 :instance-ids) (clojure.core/assoc-in [:body "InstanceIds"] (ser-instance-ids (input38592 :instance-ids))))))
(clojure.core/defn req<-describe-load-balancer-target-groups-request [action-name38596 input38595] (clojure.core/let [input38597 {:body {"AutoScalingGroupName" (ser-resource-name (input38595 :auto-scaling-group-name)), "Version" "2011-01-01", "Action" action-name38596}}] (clojure.core/cond-> input38597 (clojure.core/contains? input38595 :next-token) (clojure.core/assoc-in [:body "NextToken"] (ser-xml-string (input38595 :next-token))) (clojure.core/contains? input38595 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-max-records (input38595 :max-records))))))
(clojure.core/defn req<-delete-notification-configuration-type [action-name38599 input38598] {:body {"AutoScalingGroupName" (ser-resource-name (input38598 :auto-scaling-group-name)), "TopicARN" (ser-resource-name (input38598 :topicarn)), "Version" "2011-01-01", "Action" action-name38599}})
(clojure.core/defn req<-exit-standby-query [action-name38601 input38600] (clojure.core/let [input38602 {:body {"AutoScalingGroupName" (ser-resource-name (input38600 :auto-scaling-group-name)), "Version" "2011-01-01", "Action" action-name38601}}] (clojure.core/cond-> input38602 (clojure.core/contains? input38600 :instance-ids) (clojure.core/assoc-in [:body "InstanceIds"] (ser-instance-ids (input38600 :instance-ids))))))
(clojure.core/defn req<-launch-configuration-name-type [action-name38604 input38603] {:body {"LaunchConfigurationName" (ser-resource-name (input38603 :launch-configuration-name)), "Version" "2011-01-01", "Action" action-name38604}})
(clojure.core/defn req<-create-launch-configuration-type [action-name38606 input38605] (clojure.core/let [input38607 {:body {"LaunchConfigurationName" (ser-xml-string-max-len255 (input38605 :launch-configuration-name)), "Version" "2011-01-01", "Action" action-name38606}}] (clojure.core/cond-> input38607 (clojure.core/contains? input38605 :placement-tenancy) (clojure.core/assoc-in [:body "PlacementTenancy"] (ser-xml-string-max-len64 (input38605 :placement-tenancy))) (clojure.core/contains? input38605 :kernel-id) (clojure.core/assoc-in [:body "KernelId"] (ser-xml-string-max-len255 (input38605 :kernel-id))) (clojure.core/contains? input38605 :instance-id) (clojure.core/assoc-in [:body "InstanceId"] (ser-xml-string-max-len19 (input38605 :instance-id))) (clojure.core/contains? input38605 :associate-public-ip-address) (clojure.core/assoc-in [:body "AssociatePublicIpAddress"] (ser-associate-public-ip-address (input38605 :associate-public-ip-address))) (clojure.core/contains? input38605 :instance-monitoring) (clojure.core/assoc-in [:body "InstanceMonitoring"] (ser-instance-monitoring (input38605 :instance-monitoring))) (clojure.core/contains? input38605 :image-id) (clojure.core/assoc-in [:body "ImageId"] (ser-xml-string-max-len255 (input38605 :image-id))) (clojure.core/contains? input38605 :security-groups) (clojure.core/assoc-in [:body "SecurityGroups"] (ser-security-groups (input38605 :security-groups))) (clojure.core/contains? input38605 :ebs-optimized) (clojure.core/assoc-in [:body "EbsOptimized"] (ser-ebs-optimized (input38605 :ebs-optimized))) (clojure.core/contains? input38605 :instance-type) (clojure.core/assoc-in [:body "InstanceType"] (ser-xml-string-max-len255 (input38605 :instance-type))) (clojure.core/contains? input38605 :classic-linkvpcid) (clojure.core/assoc-in [:body "ClassicLinkVPCId"] (ser-xml-string-max-len255 (input38605 :classic-linkvpcid))) (clojure.core/contains? input38605 :key-name) (clojure.core/assoc-in [:body "KeyName"] (ser-xml-string-max-len255 (input38605 :key-name))) (clojure.core/contains? input38605 :spot-price) (clojure.core/assoc-in [:body "SpotPrice"] (ser-spot-price (input38605 :spot-price))) (clojure.core/contains? input38605 :classic-linkvpcsecurity-groups) (clojure.core/assoc-in [:body "ClassicLinkVPCSecurityGroups"] (ser-classic-linkvpcsecurity-groups (input38605 :classic-linkvpcsecurity-groups))) (clojure.core/contains? input38605 :block-device-mappings) (clojure.core/assoc-in [:body "BlockDeviceMappings"] (ser-block-device-mappings (input38605 :block-device-mappings))) (clojure.core/contains? input38605 :ramdisk-id) (clojure.core/assoc-in [:body "RamdiskId"] (ser-xml-string-max-len255 (input38605 :ramdisk-id))) (clojure.core/contains? input38605 :user-data) (clojure.core/assoc-in [:body "UserData"] (ser-xml-string-user-data (input38605 :user-data))) (clojure.core/contains? input38605 :iam-instance-profile) (clojure.core/assoc-in [:body "IamInstanceProfile"] (ser-xml-string-max-len1600 (input38605 :iam-instance-profile))))))
(clojure.core/defn req<-delete-auto-scaling-group-type [action-name38609 input38608] (clojure.core/let [input38610 {:body {"AutoScalingGroupName" (ser-resource-name (input38608 :auto-scaling-group-name)), "Version" "2011-01-01", "Action" action-name38609}}] (clojure.core/cond-> input38610 (clojure.core/contains? input38608 :force-delete) (clojure.core/assoc-in [:body "ForceDelete"] (ser-force-delete (input38608 :force-delete))))))
(clojure.core/defn req<-describe-auto-scaling-instances-type [action-name38612 input38611] (clojure.core/cond-> {:body {"Version" "2011-01-01", "Action" action-name38612}} (clojure.core/contains? input38611 :instance-ids) (clojure.core/assoc-in [:body "InstanceIds"] (ser-instance-ids (input38611 :instance-ids))) (clojure.core/contains? input38611 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-max-records (input38611 :max-records))) (clojure.core/contains? input38611 :next-token) (clojure.core/assoc-in [:body "NextToken"] (ser-xml-string (input38611 :next-token)))))
(clojure.core/defn req<-put-notification-configuration-type [action-name38614 input38613] {:body {"AutoScalingGroupName" (ser-resource-name (input38613 :auto-scaling-group-name)), "TopicARN" (ser-resource-name (input38613 :topicarn)), "NotificationTypes" (ser-auto-scaling-notification-types (input38613 :notification-types)), "Version" "2011-01-01", "Action" action-name38614}})
(clojure.core/defn req<-delete-scheduled-action-type [action-name38616 input38615] {:body {"AutoScalingGroupName" (ser-resource-name (input38615 :auto-scaling-group-name)), "ScheduledActionName" (ser-resource-name (input38615 :scheduled-action-name)), "Version" "2011-01-01", "Action" action-name38616}})
(clojure.core/defn req<-complete-lifecycle-action-type [action-name38618 input38617] (clojure.core/let [input38619 {:body {"LifecycleHookName" (ser-ascii-string-max-len255 (input38617 :lifecycle-hook-name)), "AutoScalingGroupName" (ser-resource-name (input38617 :auto-scaling-group-name)), "LifecycleActionResult" (ser-lifecycle-action-result (input38617 :lifecycle-action-result)), "Version" "2011-01-01", "Action" action-name38618}}] (clojure.core/cond-> input38619 (clojure.core/contains? input38617 :lifecycle-action-token) (clojure.core/assoc-in [:body "LifecycleActionToken"] (ser-lifecycle-action-token (input38617 :lifecycle-action-token))) (clojure.core/contains? input38617 :instance-id) (clojure.core/assoc-in [:body "InstanceId"] (ser-xml-string-max-len19 (input38617 :instance-id))))))
(clojure.core/defn req<-put-scaling-policy-type [action-name38621 input38620] (clojure.core/let [input38622 {:body {"AutoScalingGroupName" (ser-resource-name (input38620 :auto-scaling-group-name)), "PolicyName" (ser-xml-string-max-len255 (input38620 :policy-name)), "Version" "2011-01-01", "Action" action-name38621}}] (clojure.core/cond-> input38622 (clojure.core/contains? input38620 :min-adjustment-magnitude) (clojure.core/assoc-in [:body "MinAdjustmentMagnitude"] (ser-min-adjustment-magnitude (input38620 :min-adjustment-magnitude))) (clojure.core/contains? input38620 :scaling-adjustment) (clojure.core/assoc-in [:body "ScalingAdjustment"] (ser-policy-increment (input38620 :scaling-adjustment))) (clojure.core/contains? input38620 :cooldown) (clojure.core/assoc-in [:body "Cooldown"] (ser-cooldown (input38620 :cooldown))) (clojure.core/contains? input38620 :estimated-instance-warmup) (clojure.core/assoc-in [:body "EstimatedInstanceWarmup"] (ser-estimated-instance-warmup (input38620 :estimated-instance-warmup))) (clojure.core/contains? input38620 :step-adjustments) (clojure.core/assoc-in [:body "StepAdjustments"] (ser-step-adjustments (input38620 :step-adjustments))) (clojure.core/contains? input38620 :adjustment-type) (clojure.core/assoc-in [:body "AdjustmentType"] (ser-xml-string-max-len255 (input38620 :adjustment-type))) (clojure.core/contains? input38620 :metric-aggregation-type) (clojure.core/assoc-in [:body "MetricAggregationType"] (ser-xml-string-max-len32 (input38620 :metric-aggregation-type))) (clojure.core/contains? input38620 :target-tracking-configuration) (clojure.core/assoc-in [:body "TargetTrackingConfiguration"] (ser-target-tracking-configuration (input38620 :target-tracking-configuration))) (clojure.core/contains? input38620 :min-adjustment-step) (clojure.core/assoc-in [:body "MinAdjustmentStep"] (ser-min-adjustment-step (input38620 :min-adjustment-step))) (clojure.core/contains? input38620 :policy-type) (clojure.core/assoc-in [:body "PolicyType"] (ser-xml-string-max-len64 (input38620 :policy-type))))))
(clojure.core/defn req<-delete-policy-type [action-name38624 input38623] (clojure.core/let [input38625 {:body {"PolicyName" (ser-resource-name (input38623 :policy-name)), "Version" "2011-01-01", "Action" action-name38624}}] (clojure.core/cond-> input38625 (clojure.core/contains? input38623 :auto-scaling-group-name) (clojure.core/assoc-in [:body "AutoScalingGroupName"] (ser-resource-name (input38623 :auto-scaling-group-name))))))
(clojure.core/defn req<-describe-load-balancers-request [action-name38627 input38626] (clojure.core/let [input38628 {:body {"AutoScalingGroupName" (ser-resource-name (input38626 :auto-scaling-group-name)), "Version" "2011-01-01", "Action" action-name38627}}] (clojure.core/cond-> input38628 (clojure.core/contains? input38626 :next-token) (clojure.core/assoc-in [:body "NextToken"] (ser-xml-string (input38626 :next-token))) (clojure.core/contains? input38626 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-max-records (input38626 :max-records))))))
(clojure.core/defn req<-put-scheduled-update-group-action-type [action-name38630 input38629] (clojure.core/let [input38631 {:body {"AutoScalingGroupName" (ser-resource-name (input38629 :auto-scaling-group-name)), "ScheduledActionName" (ser-xml-string-max-len255 (input38629 :scheduled-action-name)), "Version" "2011-01-01", "Action" action-name38630}}] (clojure.core/cond-> input38631 (clojure.core/contains? input38629 :end-time) (clojure.core/assoc-in [:body "EndTime"] (ser-timestamp-type (input38629 :end-time))) (clojure.core/contains? input38629 :start-time) (clojure.core/assoc-in [:body "StartTime"] (ser-timestamp-type (input38629 :start-time))) (clojure.core/contains? input38629 :recurrence) (clojure.core/assoc-in [:body "Recurrence"] (ser-xml-string-max-len255 (input38629 :recurrence))) (clojure.core/contains? input38629 :min-size) (clojure.core/assoc-in [:body "MinSize"] (ser-auto-scaling-group-min-size (input38629 :min-size))) (clojure.core/contains? input38629 :max-size) (clojure.core/assoc-in [:body "MaxSize"] (ser-auto-scaling-group-max-size (input38629 :max-size))) (clojure.core/contains? input38629 :time) (clojure.core/assoc-in [:body "Time"] (ser-timestamp-type (input38629 :time))) (clojure.core/contains? input38629 :desired-capacity) (clojure.core/assoc-in [:body "DesiredCapacity"] (ser-auto-scaling-group-desired-capacity (input38629 :desired-capacity))))))
(clojure.core/defn req<-put-lifecycle-hook-type [action-name38633 input38632] (clojure.core/let [input38634 {:body {"LifecycleHookName" (ser-ascii-string-max-len255 (input38632 :lifecycle-hook-name)), "AutoScalingGroupName" (ser-resource-name (input38632 :auto-scaling-group-name)), "Version" "2011-01-01", "Action" action-name38633}}] (clojure.core/cond-> input38634 (clojure.core/contains? input38632 :lifecycle-transition) (clojure.core/assoc-in [:body "LifecycleTransition"] (ser-lifecycle-transition (input38632 :lifecycle-transition))) (clojure.core/contains? input38632 :rolearn) (clojure.core/assoc-in [:body "RoleARN"] (ser-resource-name (input38632 :rolearn))) (clojure.core/contains? input38632 :notification-targetarn) (clojure.core/assoc-in [:body "NotificationTargetARN"] (ser-notification-target-resource-name (input38632 :notification-targetarn))) (clojure.core/contains? input38632 :notification-metadata) (clojure.core/assoc-in [:body "NotificationMetadata"] (ser-xml-string-max-len1023 (input38632 :notification-metadata))) (clojure.core/contains? input38632 :heartbeat-timeout) (clojure.core/assoc-in [:body "HeartbeatTimeout"] (ser-heartbeat-timeout (input38632 :heartbeat-timeout))) (clojure.core/contains? input38632 :default-result) (clojure.core/assoc-in [:body "DefaultResult"] (ser-lifecycle-action-result (input38632 :default-result))))))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/lifecycle-action-result (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/describe-adjustment-types-answer (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01/AdjustmentTypes] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/ascii-string-max-len255 (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36226__auto__] (clojure.core/<= 1 (clojure.core/count s__36226__auto__))) (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 255)) (clojure.core/fn [s__36228__auto__] (clojure.core/re-matches #"[A-Za-z0-9\-_\/]+" s__36228__auto__))))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/lifecycle-hook-names (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/ascii-string-max-len255 :max-count 50))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.predefined-metric-specification/predefined-metric-type (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/metric-type))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.predefined-metric-specification/resource-label (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len1023))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/predefined-metric-specification (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.predefined-metric-specification/PredefinedMetricType] :opt-un [:portkey.aws.autoscaling.-2011-01-01.predefined-metric-specification/ResourceLabel] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/should-respect-grace-period clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.resource-contention-fault/message (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.resource-contention-fault/message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/complete-lifecycle-action-answer (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.filter/name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/filter (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.filter/Name :portkey.aws.autoscaling.-2011-01-01/Values] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.enter-standby-query/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/enter-standby-query (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.enter-standby-query/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01/ShouldDecrementDesiredCapacity] :opt-un [:portkey.aws.autoscaling.-2011-01-01/InstanceIds] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-load-balancer-target-groups-request/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-load-balancer-target-groups-request/next-token (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/describe-load-balancer-target-groups-request (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.describe-load-balancer-target-groups-request/AutoScalingGroupName] :opt-un [:portkey.aws.autoscaling.-2011-01-01.describe-load-balancer-target-groups-request/NextToken :portkey.aws.autoscaling.-2011-01-01/MaxRecords] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.load-balancer-target-group-state/load-balancer-target-grouparn (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len511))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.load-balancer-target-group-state/state (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/load-balancer-target-group-state (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.load-balancer-target-group-state/LoadBalancerTargetGroupARN :portkey.aws.autoscaling.-2011-01-01.load-balancer-target-group-state/State] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/detach-load-balancer-target-groups-result-type (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/activities (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/activity))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.scheduled-update-group-action/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.scheduled-update-group-action/end-time (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.scheduled-update-group-action/start-time (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.scheduled-update-group-action/recurrence (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.scheduled-update-group-action/scheduled-action-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.scheduled-update-group-action/min-size (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group-min-size))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.scheduled-update-group-action/max-size (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group-max-size))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.scheduled-update-group-action/time (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.scheduled-update-group-action/desired-capacity (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group-desired-capacity))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.scheduled-update-group-action/scheduled-actionarn (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/scheduled-update-group-action (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.scheduled-update-group-action/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01.scheduled-update-group-action/EndTime :portkey.aws.autoscaling.-2011-01-01.scheduled-update-group-action/StartTime :portkey.aws.autoscaling.-2011-01-01.scheduled-update-group-action/Recurrence :portkey.aws.autoscaling.-2011-01-01.scheduled-update-group-action/ScheduledActionName :portkey.aws.autoscaling.-2011-01-01.scheduled-update-group-action/MinSize :portkey.aws.autoscaling.-2011-01-01.scheduled-update-group-action/MaxSize :portkey.aws.autoscaling.-2011-01-01.scheduled-update-group-action/Time :portkey.aws.autoscaling.-2011-01-01.scheduled-update-group-action/DesiredCapacity :portkey.aws.autoscaling.-2011-01-01.scheduled-update-group-action/ScheduledActionARN] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/associate-public-ip-address clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.delete-auto-scaling-group-type/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/delete-auto-scaling-group-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.delete-auto-scaling-group-type/AutoScalingGroupName] :opt-un [:portkey.aws.autoscaling.-2011-01-01/ForceDelete] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/load-balancer-names (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/global-timeout clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/enabled-metrics (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/enabled-metric))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/detach-instances-answer (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01/Activities] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.tags-type/tags (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/tag-description-list))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.tags-type/next-token (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/tags-type (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.tags-type/Tags :portkey.aws.autoscaling.-2011-01-01.tags-type/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/instance-ids (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len19))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/create-or-update-tags-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01/Tags] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/processes-type (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01/Processes] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-tags-type/next-token (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/describe-tags-type (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01/Filters :portkey.aws.autoscaling.-2011-01-01.describe-tags-type/NextToken :portkey.aws.autoscaling.-2011-01-01/MaxRecords] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.already-exists-fault/message (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.already-exists-fault/message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/notification-target-resource-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36226__auto__] (clojure.core/<= 0 (clojure.core/count s__36226__auto__))) (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 1600)) (clojure.core/fn [s__36228__auto__] (clojure.core/re-matches #"[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*" s__36228__auto__))))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.instance-monitoring/enabled (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/monitoring-enabled))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/instance-monitoring (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.instance-monitoring/Enabled] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/notification-configurations (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/notification-configuration))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/lifecycle-state {"Detaching" "Detaching", "Terminating:Wait" "Terminating:Wait", :standby "Standby", :pending:wait "Pending:Wait", :terminating:proceed "Terminating:Proceed", :pending "Pending", "InService" "InService", "Quarantined" "Quarantined", :detached "Detached", :quarantined "Quarantined", :terminating "Terminating", :terminating:wait "Terminating:Wait", :pending:proceed "Pending:Proceed", "Pending:Proceed" "Pending:Proceed", "Terminating" "Terminating", :terminated "Terminated", :in-service "InService", "EnteringStandby" "EnteringStandby", "Pending:Wait" "Pending:Wait", "Terminated" "Terminated", "Standby" "Standby", "Pending" "Pending", "Terminating:Proceed" "Terminating:Proceed", :detaching "Detaching", :entering-standby "EnteringStandby", "Detached" "Detached"})

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/new-instances-protected-from-scale-in (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/instance-protected))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/instance-id (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len19))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/vpczone-identifier (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len2047))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/launch-template (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/launch-template-specification))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/lifecycle-hook-specification-list (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/lifecycle-hook-specifications))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/default-cooldown (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/cooldown))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/launch-configuration-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/health-check-type (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len32))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/min-size (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group-min-size))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/max-size (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group-max-size))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/placement-group (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/desired-capacity (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group-desired-capacity))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/service-linked-rolearn (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/create-auto-scaling-group-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/MinSize :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/MaxSize] :opt-un [:portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/NewInstancesProtectedFromScaleIn :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/InstanceId :portkey.aws.autoscaling.-2011-01-01/LoadBalancerNames :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/VPCZoneIdentifier :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/LaunchTemplate :portkey.aws.autoscaling.-2011-01-01/Tags :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/LifecycleHookSpecificationList :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/DefaultCooldown :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/LaunchConfigurationName :portkey.aws.autoscaling.-2011-01-01/TargetGroupARNs :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/HealthCheckType :portkey.aws.autoscaling.-2011-01-01/AvailabilityZones :portkey.aws.autoscaling.-2011-01-01/TerminationPolicies :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/PlacementGroup :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/DesiredCapacity :portkey.aws.autoscaling.-2011-01-01/HealthCheckGracePeriod :portkey.aws.autoscaling.-2011-01-01.create-auto-scaling-group-type/ServiceLinkedRoleARN] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.launch-template-specification/launch-template-id (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.launch-template-specification/version (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/launch-template-specification (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.launch-template-specification/LaunchTemplateId :portkey.aws.autoscaling.-2011-01-01/LaunchTemplateName :portkey.aws.autoscaling.-2011-01-01.launch-template-specification/Version] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/min-adjustment-magnitude clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.metric-collection-type/metric (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/metric-collection-type (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.metric-collection-type/Metric] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/max-number-of-launch-configurations clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.delete-notification-configuration-type/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.delete-notification-configuration-type/topicarn (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/delete-notification-configuration-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.delete-notification-configuration-type/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01.delete-notification-configuration-type/TopicARN] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-lifecycle-hooks-type/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/describe-lifecycle-hooks-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.describe-lifecycle-hooks-type/AutoScalingGroupName] :opt-un [:portkey.aws.autoscaling.-2011-01-01/LifecycleHookNames] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/security-groups (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/xml-string))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.record-lifecycle-action-heartbeat-type/lifecycle-hook-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/ascii-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.record-lifecycle-action-heartbeat-type/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.record-lifecycle-action-heartbeat-type/instance-id (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len19))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/record-lifecycle-action-heartbeat-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.record-lifecycle-action-heartbeat-type/LifecycleHookName :portkey.aws.autoscaling.-2011-01-01.record-lifecycle-action-heartbeat-type/AutoScalingGroupName] :opt-un [:portkey.aws.autoscaling.-2011-01-01/LifecycleActionToken :portkey.aws.autoscaling.-2011-01-01.record-lifecycle-action-heartbeat-type/InstanceId] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/ebs-optimized clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.detach-load-balancer-target-groups-type/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/detach-load-balancer-target-groups-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.detach-load-balancer-target-groups-type/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01/TargetGroupARNs] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.launch-configuration-names-type/next-token (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/launch-configuration-names-type (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01/LaunchConfigurationNames :portkey.aws.autoscaling.-2011-01-01.launch-configuration-names-type/NextToken :portkey.aws.autoscaling.-2011-01-01/MaxRecords] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/monitoring-enabled clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.set-instance-protection-query/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/set-instance-protection-query (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01/InstanceIds :portkey.aws.autoscaling.-2011-01-01.set-instance-protection-query/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01/ProtectedFromScaleIn] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/should-decrement-desired-capacity clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.set-desired-capacity-type/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.set-desired-capacity-type/desired-capacity (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group-desired-capacity))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/set-desired-capacity-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.set-desired-capacity-type/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01.set-desired-capacity-type/DesiredCapacity] :opt-un [:portkey.aws.autoscaling.-2011-01-01/HonorCooldown] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/metric-dimension-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.process-type/process-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/process-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.process-type/ProcessName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/propagate-at-launch clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.update-auto-scaling-group-type/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.update-auto-scaling-group-type/new-instances-protected-from-scale-in (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/instance-protected))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.update-auto-scaling-group-type/vpczone-identifier (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len2047))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.update-auto-scaling-group-type/launch-template (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/launch-template-specification))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.update-auto-scaling-group-type/default-cooldown (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/cooldown))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.update-auto-scaling-group-type/launch-configuration-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.update-auto-scaling-group-type/health-check-type (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len32))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.update-auto-scaling-group-type/min-size (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group-min-size))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.update-auto-scaling-group-type/max-size (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group-max-size))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.update-auto-scaling-group-type/placement-group (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.update-auto-scaling-group-type/desired-capacity (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group-desired-capacity))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.update-auto-scaling-group-type/service-linked-rolearn (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/update-auto-scaling-group-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.update-auto-scaling-group-type/AutoScalingGroupName] :opt-un [:portkey.aws.autoscaling.-2011-01-01.update-auto-scaling-group-type/NewInstancesProtectedFromScaleIn :portkey.aws.autoscaling.-2011-01-01.update-auto-scaling-group-type/VPCZoneIdentifier :portkey.aws.autoscaling.-2011-01-01.update-auto-scaling-group-type/LaunchTemplate :portkey.aws.autoscaling.-2011-01-01.update-auto-scaling-group-type/DefaultCooldown :portkey.aws.autoscaling.-2011-01-01.update-auto-scaling-group-type/LaunchConfigurationName :portkey.aws.autoscaling.-2011-01-01.update-auto-scaling-group-type/HealthCheckType :portkey.aws.autoscaling.-2011-01-01.update-auto-scaling-group-type/MinSize :portkey.aws.autoscaling.-2011-01-01/AvailabilityZones :portkey.aws.autoscaling.-2011-01-01/TerminationPolicies :portkey.aws.autoscaling.-2011-01-01.update-auto-scaling-group-type/MaxSize :portkey.aws.autoscaling.-2011-01-01.update-auto-scaling-group-type/PlacementGroup :portkey.aws.autoscaling.-2011-01-01.update-auto-scaling-group-type/DesiredCapacity :portkey.aws.autoscaling.-2011-01-01/HealthCheckGracePeriod :portkey.aws.autoscaling.-2011-01-01.update-auto-scaling-group-type/ServiceLinkedRoleARN] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/max-records clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/tag-key (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36226__auto__] (clojure.core/<= 1 (clojure.core/count s__36226__auto__))) (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 128)) (clojure.core/fn [s__36228__auto__] (clojure.core/re-matches #"[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*" s__36228__auto__))))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.enable-metrics-collection-query/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.enable-metrics-collection-query/granularity (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/enable-metrics-collection-query (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.enable-metrics-collection-query/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01.enable-metrics-collection-query/Granularity] :opt-un [:portkey.aws.autoscaling.-2011-01-01/Metrics] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-termination-policy-types-answer/termination-policy-types (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/termination-policies))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/describe-termination-policy-types-answer (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.describe-termination-policy-types-answer/TerminationPolicyTypes] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/describe-lifecycle-hooks-answer (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01/LifecycleHooks] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/delete-tags-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01/Tags] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/tags (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/tag))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/lifecycle-hook-specifications (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/lifecycle-hook-specification))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.enabled-metric/metric (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.enabled-metric/granularity (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/enabled-metric (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.enabled-metric/Metric :portkey.aws.autoscaling.-2011-01-01.enabled-metric/Granularity] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-groups-type/next-token (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/auto-scaling-groups-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01/AutoScalingGroups] :opt-un [:portkey.aws.autoscaling.-2011-01-01.auto-scaling-groups-type/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/no-device clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.attach-instances-query/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/attach-instances-query (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.attach-instances-query/AutoScalingGroupName] :opt-un [:portkey.aws.autoscaling.-2011-01-01/InstanceIds] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/policy-names (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/resource-name))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.ebs/snapshot-id (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.ebs/volume-size (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/block-device-ebs-volume-size))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.ebs/volume-type (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/block-device-ebs-volume-type))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.ebs/delete-on-termination (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/block-device-ebs-delete-on-termination))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.ebs/iops (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/block-device-ebs-iops))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.ebs/encrypted (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/block-device-ebs-encrypted))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/ebs (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.ebs/SnapshotId :portkey.aws.autoscaling.-2011-01-01.ebs/VolumeSize :portkey.aws.autoscaling.-2011-01-01.ebs/VolumeType :portkey.aws.autoscaling.-2011-01-01.ebs/DeleteOnTermination :portkey.aws.autoscaling.-2011-01-01.ebs/Iops :portkey.aws.autoscaling.-2011-01-01.ebs/Encrypted] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.set-instance-health-query/instance-id (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len19))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.set-instance-health-query/health-status (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len32))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/set-instance-health-query (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.set-instance-health-query/InstanceId :portkey.aws.autoscaling.-2011-01-01.set-instance-health-query/HealthStatus] :opt-un [:portkey.aws.autoscaling.-2011-01-01/ShouldRespectGracePeriod] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.policies-type/next-token (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/policies-type (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01/ScalingPolicies :portkey.aws.autoscaling.-2011-01-01.policies-type/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.suspended-process/process-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.suspended-process/suspension-reason (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/suspended-process (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.suspended-process/ProcessName :portkey.aws.autoscaling.-2011-01-01.suspended-process/SuspensionReason] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.activity/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.activity/end-time (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.activity/cause (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len1023))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.activity/status-code (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/scaling-activity-status-code))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.activity/details (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.activity/start-time (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.activity/status-message (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.activity/activity-id (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.activity/description (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/activity (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.activity/ActivityId :portkey.aws.autoscaling.-2011-01-01.activity/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01.activity/Cause :portkey.aws.autoscaling.-2011-01-01.activity/StartTime :portkey.aws.autoscaling.-2011-01-01.activity/StatusCode] :opt-un [:portkey.aws.autoscaling.-2011-01-01.activity/EndTime :portkey.aws.autoscaling.-2011-01-01.activity/Details :portkey.aws.autoscaling.-2011-01-01.activity/StatusMessage :portkey.aws.autoscaling.-2011-01-01/Progress :portkey.aws.autoscaling.-2011-01-01.activity/Description] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/cooldown clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/exit-standby-answer (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01/Activities] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/block-device-ebs-iops (clojure.spec.alpha/int-in 100 20000))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/block-device-ebs-encrypted clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/max-number-of-auto-scaling-groups clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/delete-lifecycle-hook-answer (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group-max-size clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/launch-configurations (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/launch-configuration))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/metric-unit (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.launch-configurations-type/next-token (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/launch-configurations-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01/LaunchConfigurations] :opt-un [:portkey.aws.autoscaling.-2011-01-01.launch-configurations-type/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/load-balancer-target-group-states (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/load-balancer-target-group-state))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/policy-types (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len64))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-load-balancer-target-groups-response/load-balancer-target-groups (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/load-balancer-target-group-states))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-load-balancer-target-groups-response/next-token (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/describe-load-balancer-target-groups-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.describe-load-balancer-target-groups-response/LoadBalancerTargetGroups :portkey.aws.autoscaling.-2011-01-01.describe-load-balancer-target-groups-response/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/progress clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/number-of-launch-configurations clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.terminate-instance-in-auto-scaling-group-type/instance-id (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len19))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/terminate-instance-in-auto-scaling-group-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.terminate-instance-in-auto-scaling-group-type/InstanceId :portkey.aws.autoscaling.-2011-01-01/ShouldDecrementDesiredCapacity] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/estimated-instance-warmup clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/enter-standby-answer (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01/Activities] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.activities-type/next-token (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/activities-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01/Activities] :opt-un [:portkey.aws.autoscaling.-2011-01-01.activities-type/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/block-device-ebs-volume-size (clojure.spec.alpha/int-in 1 16384))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/step-adjustments (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/step-adjustment))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-load-balancers-response/load-balancers (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/load-balancer-states))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-load-balancers-response/next-token (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/describe-load-balancers-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.describe-load-balancers-response/LoadBalancers :portkey.aws.autoscaling.-2011-01-01.describe-load-balancers-response/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/activity-ids (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/xml-string))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/spot-price (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36226__auto__] (clojure.core/<= 1 (clojure.core/count s__36226__auto__))) (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 255))))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-lifecycle-hook-types-answer/lifecycle-hook-types (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/auto-scaling-notification-types))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/describe-lifecycle-hook-types-answer (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.describe-lifecycle-hook-types-answer/LifecycleHookTypes] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/launch-configuration-names (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/resource-name))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.tag-description/resource-id (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.tag-description/resource-type (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.tag-description/key (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/tag-key))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.tag-description/value (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/tag-value))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/tag-description (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.tag-description/ResourceId :portkey.aws.autoscaling.-2011-01-01.tag-description/ResourceType :portkey.aws.autoscaling.-2011-01-01.tag-description/Key :portkey.aws.autoscaling.-2011-01-01.tag-description/Value :portkey.aws.autoscaling.-2011-01-01/PropagateAtLaunch] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.delete-scheduled-action-type/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.delete-scheduled-action-type/scheduled-action-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/delete-scheduled-action-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.delete-scheduled-action-type/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01.delete-scheduled-action-type/ScheduledActionName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/instance-protected clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group-names (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/resource-name))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len19 (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36226__auto__] (clojure.core/<= 1 (clojure.core/count s__36226__auto__))) (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 19)) (clojure.core/fn [s__36228__auto__] (clojure.core/re-matches #"[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*" s__36228__auto__))))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.attach-load-balancers-type/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/attach-load-balancers-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.attach-load-balancers-type/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01/LoadBalancerNames] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/record-lifecycle-action-heartbeat-answer (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/xml-string (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36228__auto__] (clojure.core/re-matches #"[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*" s__36228__auto__))))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.delete-policy-type/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.delete-policy-type/policy-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/delete-policy-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.delete-policy-type/PolicyName] :opt-un [:portkey.aws.autoscaling.-2011-01-01.delete-policy-type/AutoScalingGroupName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/number-of-auto-scaling-groups clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.load-balancer-state/load-balancer-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.load-balancer-state/state (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/load-balancer-state (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.load-balancer-state/LoadBalancerName :portkey.aws.autoscaling.-2011-01-01.load-balancer-state/State] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-policies-type/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-policies-type/next-token (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/describe-policies-type (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.describe-policies-type/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01/PolicyNames :portkey.aws.autoscaling.-2011-01-01/PolicyTypes :portkey.aws.autoscaling.-2011-01-01.describe-policies-type/NextToken :portkey.aws.autoscaling.-2011-01-01/MaxRecords] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.resource-in-use-fault/message (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/resource-in-use-fault (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.resource-in-use-fault/message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.exit-standby-query/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/exit-standby-query (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.exit-standby-query/AutoScalingGroupName] :opt-un [:portkey.aws.autoscaling.-2011-01-01/InstanceIds] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/scaling-activity-status-code {:waiting-for-spot-instance-id "WaitingForSpotInstanceId", "Failed" "Failed", "Cancelled" "Cancelled", :in-progress "InProgress", "PendingSpotBidPlacement" "PendingSpotBidPlacement", "WaitingForSpotInstanceRequestId" "WaitingForSpotInstanceRequestId", "WaitingForELBConnectionDraining" "WaitingForELBConnectionDraining", :successful "Successful", :pre-in-service "PreInService", "WaitingForInstanceWarmup" "WaitingForInstanceWarmup", :waiting-forelbconnection-draining "WaitingForELBConnectionDraining", :cancelled "Cancelled", "PreInService" "PreInService", "InProgress" "InProgress", :pending-spot-bid-placement "PendingSpotBidPlacement", "Successful" "Successful", "WaitingForInstanceId" "WaitingForInstanceId", :mid-lifecycle-action "MidLifecycleAction", "WaitingForSpotInstanceId" "WaitingForSpotInstanceId", "MidLifecycleAction" "MidLifecycleAction", :waiting-for-instance-id "WaitingForInstanceId", :failed "Failed", :waiting-for-instance-warmup "WaitingForInstanceWarmup", :waiting-for-spot-instance-request-id "WaitingForSpotInstanceRequestId"})

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group-names-type/next-token (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group-names-type (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01/AutoScalingGroupNames :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group-names-type/NextToken :portkey.aws.autoscaling.-2011-01-01/MaxRecords] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/scheduled-update-group-actions (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/scheduled-update-group-action))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/auto-scaling-instances (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/auto-scaling-instance-details))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/metric-dimension-name (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/activity-type (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01/Activity] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/tag-description-list (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/tag-description))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.launch-configuration-name-type/launch-configuration-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/launch-configuration-name-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.launch-configuration-name-type/LaunchConfigurationName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.limit-exceeded-fault/message (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/limit-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.limit-exceeded-fault/message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/timestamp-type clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/describe-account-limits-answer (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01/MaxNumberOfAutoScalingGroups :portkey.aws.autoscaling.-2011-01-01/MaxNumberOfLaunchConfigurations :portkey.aws.autoscaling.-2011-01-01/NumberOfAutoScalingGroups :portkey.aws.autoscaling.-2011-01-01/NumberOfLaunchConfigurations] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/tag-value (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36226__auto__] (clojure.core/<= 0 (clojure.core/count s__36226__auto__))) (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 256)) (clojure.core/fn [s__36228__auto__] (clojure.core/re-matches #"[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*" s__36228__auto__))))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.service-linked-role-failure/message (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/service-linked-role-failure (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.service-linked-role-failure/message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.adjustment-type/adjustment-type (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/adjustment-type (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.adjustment-type/AdjustmentType] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.put-scheduled-update-group-action-type/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.put-scheduled-update-group-action-type/end-time (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.put-scheduled-update-group-action-type/start-time (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.put-scheduled-update-group-action-type/recurrence (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.put-scheduled-update-group-action-type/scheduled-action-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.put-scheduled-update-group-action-type/min-size (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group-min-size))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.put-scheduled-update-group-action-type/max-size (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group-max-size))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.put-scheduled-update-group-action-type/time (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.put-scheduled-update-group-action-type/desired-capacity (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group-desired-capacity))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/put-scheduled-update-group-action-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.put-scheduled-update-group-action-type/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01.put-scheduled-update-group-action-type/ScheduledActionName] :opt-un [:portkey.aws.autoscaling.-2011-01-01.put-scheduled-update-group-action-type/EndTime :portkey.aws.autoscaling.-2011-01-01.put-scheduled-update-group-action-type/StartTime :portkey.aws.autoscaling.-2011-01-01.put-scheduled-update-group-action-type/Recurrence :portkey.aws.autoscaling.-2011-01-01.put-scheduled-update-group-action-type/MinSize :portkey.aws.autoscaling.-2011-01-01.put-scheduled-update-group-action-type/MaxSize :portkey.aws.autoscaling.-2011-01-01.put-scheduled-update-group-action-type/Time :portkey.aws.autoscaling.-2011-01-01.put-scheduled-update-group-action-type/DesiredCapacity] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.disable-metrics-collection-query/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/disable-metrics-collection-query (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.disable-metrics-collection-query/AutoScalingGroupName] :opt-un [:portkey.aws.autoscaling.-2011-01-01/Metrics] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255 (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36226__auto__] (clojure.core/<= 1 (clojure.core/count s__36226__auto__))) (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 255)) (clojure.core/fn [s__36228__auto__] (clojure.core/re-matches #"[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*" s__36228__auto__))))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/set-instance-protection-answer (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len1023 (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36226__auto__] (clojure.core/<= 1 (clojure.core/count s__36226__auto__))) (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 1023)) (clojure.core/fn [s__36228__auto__] (clojure.core/re-matches #"[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*" s__36228__auto__))))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/scheduled-action-names (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/resource-name))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.put-scaling-policy-type/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.put-scaling-policy-type/policy-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.put-scaling-policy-type/scaling-adjustment (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/policy-increment))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.put-scaling-policy-type/adjustment-type (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.put-scaling-policy-type/metric-aggregation-type (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len32))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.put-scaling-policy-type/policy-type (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len64))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/put-scaling-policy-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.put-scaling-policy-type/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01.put-scaling-policy-type/PolicyName] :opt-un [:portkey.aws.autoscaling.-2011-01-01/MinAdjustmentMagnitude :portkey.aws.autoscaling.-2011-01-01.put-scaling-policy-type/ScalingAdjustment :portkey.aws.autoscaling.-2011-01-01/Cooldown :portkey.aws.autoscaling.-2011-01-01/EstimatedInstanceWarmup :portkey.aws.autoscaling.-2011-01-01/StepAdjustments :portkey.aws.autoscaling.-2011-01-01.put-scaling-policy-type/AdjustmentType :portkey.aws.autoscaling.-2011-01-01.put-scaling-policy-type/MetricAggregationType :portkey.aws.autoscaling.-2011-01-01/TargetTrackingConfiguration :portkey.aws.autoscaling.-2011-01-01/MinAdjustmentStep :portkey.aws.autoscaling.-2011-01-01.put-scaling-policy-type/PolicyType] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/new-instances-protected-from-scale-in (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/instance-protected))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/vpczone-identifier (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len2047))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/launch-template (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/launch-template-specification))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/tags (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/tag-description-list))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/auto-scaling-grouparn (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/status (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/created-time (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/default-cooldown (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/cooldown))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/launch-configuration-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/health-check-type (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len32))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/min-size (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group-min-size))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/max-size (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group-max-size))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/placement-group (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/desired-capacity (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group-desired-capacity))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/service-linked-rolearn (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/MinSize :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/MaxSize :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/DesiredCapacity :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/DefaultCooldown :portkey.aws.autoscaling.-2011-01-01/AvailabilityZones :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/HealthCheckType :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/CreatedTime] :opt-un [:portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/NewInstancesProtectedFromScaleIn :portkey.aws.autoscaling.-2011-01-01/LoadBalancerNames :portkey.aws.autoscaling.-2011-01-01/EnabledMetrics :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/VPCZoneIdentifier :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/LaunchTemplate :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/Tags :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/AutoScalingGroupARN :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/Status :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/LaunchConfigurationName :portkey.aws.autoscaling.-2011-01-01/TargetGroupARNs :portkey.aws.autoscaling.-2011-01-01/SuspendedProcesses :portkey.aws.autoscaling.-2011-01-01/TerminationPolicies :portkey.aws.autoscaling.-2011-01-01/Instances :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/PlacementGroup :portkey.aws.autoscaling.-2011-01-01/HealthCheckGracePeriod :portkey.aws.autoscaling.-2011-01-01.auto-scaling-group/ServiceLinkedRoleARN] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/values (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/xml-string))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-instance-details/instance-id (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len19))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-instance-details/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-instance-details/availability-zone (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-instance-details/lifecycle-state (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len32))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-instance-details/health-status (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len32))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-instance-details/launch-configuration-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-instance-details/launch-template (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/launch-template-specification))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-instance-details/protected-from-scale-in (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/instance-protected))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/auto-scaling-instance-details (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.auto-scaling-instance-details/InstanceId :portkey.aws.autoscaling.-2011-01-01.auto-scaling-instance-details/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01.auto-scaling-instance-details/AvailabilityZone :portkey.aws.autoscaling.-2011-01-01.auto-scaling-instance-details/LifecycleState :portkey.aws.autoscaling.-2011-01-01.auto-scaling-instance-details/HealthStatus :portkey.aws.autoscaling.-2011-01-01.auto-scaling-instance-details/ProtectedFromScaleIn] :opt-un [:portkey.aws.autoscaling.-2011-01-01.auto-scaling-instance-details/LaunchConfigurationName :portkey.aws.autoscaling.-2011-01-01.auto-scaling-instance-details/LaunchTemplate] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.metric-dimension/name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/metric-dimension-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.metric-dimension/value (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/metric-dimension-value))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/metric-dimension (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.metric-dimension/Name :portkey.aws.autoscaling.-2011-01-01.metric-dimension/Value] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/xml-string-user-data (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 21847)) (clojure.core/fn [s__36228__auto__] (clojure.core/re-matches #"[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*" s__36228__auto__))))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/resource-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36226__auto__] (clojure.core/<= 1 (clojure.core/count s__36226__auto__))) (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 1600)) (clojure.core/fn [s__36228__auto__] (clojure.core/re-matches #"[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*" s__36228__auto__))))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.detach-load-balancers-type/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/detach-load-balancers-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.detach-load-balancers-type/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01/LoadBalancerNames] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-metric-collection-types-answer/metrics (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/metric-collection-types))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-metric-collection-types-answer/granularities (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/metric-granularity-types))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/describe-metric-collection-types-answer (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.describe-metric-collection-types-answer/Metrics :portkey.aws.autoscaling.-2011-01-01.describe-metric-collection-types-answer/Granularities] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len1600 (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36226__auto__] (clojure.core/<= 1 (clojure.core/count s__36226__auto__))) (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 1600)) (clojure.core/fn [s__36228__auto__] (clojure.core/re-matches #"[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*" s__36228__auto__))))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/lifecycle-transition (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/auto-scaling-groups (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-notification-configurations-answer/next-token (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/describe-notification-configurations-answer (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01/NotificationConfigurations] :opt-un [:portkey.aws.autoscaling.-2011-01-01.describe-notification-configurations-answer/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.scheduled-actions-type/next-token (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/scheduled-actions-type (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01/ScheduledUpdateGroupActions :portkey.aws.autoscaling.-2011-01-01.scheduled-actions-type/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/launch-template-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36226__auto__] (clojure.core/<= 3 (clojure.core/count s__36226__auto__))) (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 128)) (clojure.core/fn [s__36228__auto__] (clojure.core/re-matches #"[a-zA-Z0-9\(\)\.-/_]+" s__36228__auto__))))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.target-tracking-configuration/target-value (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/metric-scale))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/target-tracking-configuration (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.target-tracking-configuration/TargetValue] :opt-un [:portkey.aws.autoscaling.-2011-01-01/PredefinedMetricSpecification :portkey.aws.autoscaling.-2011-01-01/CustomizedMetricSpecification :portkey.aws.autoscaling.-2011-01-01/DisableScaleIn] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/filters (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/filter))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/min-adjustment-step clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-scheduled-actions-type/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-scheduled-actions-type/start-time (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-scheduled-actions-type/end-time (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-scheduled-actions-type/next-token (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/describe-scheduled-actions-type (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.describe-scheduled-actions-type/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01/ScheduledActionNames :portkey.aws.autoscaling.-2011-01-01.describe-scheduled-actions-type/StartTime :portkey.aws.autoscaling.-2011-01-01.describe-scheduled-actions-type/EndTime :portkey.aws.autoscaling.-2011-01-01.describe-scheduled-actions-type/NextToken :portkey.aws.autoscaling.-2011-01-01/MaxRecords] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/heartbeat-timeout clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/classic-linkvpcsecurity-groups (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/load-balancer-states (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/load-balancer-state))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/honor-cooldown clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/auto-scaling-notification-types (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/target-grouparns (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len511))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/lifecycle-hooks (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/lifecycle-hook))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/protected-from-scale-in clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/block-device-ebs-delete-on-termination clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.scaling-process-query/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.scaling-process-query/scaling-processes (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/process-names))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/scaling-process-query (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.scaling-process-query/AutoScalingGroupName] :opt-un [:portkey.aws.autoscaling.-2011-01-01.scaling-process-query/ScalingProcesses] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.step-adjustment/metric-interval-lower-bound (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/metric-scale))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.step-adjustment/metric-interval-upper-bound (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/metric-scale))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.step-adjustment/scaling-adjustment (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/policy-increment))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/step-adjustment (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.step-adjustment/ScalingAdjustment] :opt-un [:portkey.aws.autoscaling.-2011-01-01.step-adjustment/MetricIntervalLowerBound :portkey.aws.autoscaling.-2011-01-01.step-adjustment/MetricIntervalUpperBound] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/block-device-mappings (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/block-device-mapping))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/alarms (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/alarm))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/metric-statistic {"Sum" "Sum", "Average" "Average", :maximum "Maximum", "SampleCount" "SampleCount", "Minimum" "Minimum", :sample-count "SampleCount", :minimum "Minimum", :average "Average", :sum "Sum", "Maximum" "Maximum"})

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.execute-policy-type/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.execute-policy-type/policy-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.execute-policy-type/metric-value (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/metric-scale))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.execute-policy-type/breach-threshold (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/metric-scale))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/execute-policy-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.execute-policy-type/PolicyName] :opt-un [:portkey.aws.autoscaling.-2011-01-01.execute-policy-type/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01/HonorCooldown :portkey.aws.autoscaling.-2011-01-01.execute-policy-type/MetricValue :portkey.aws.autoscaling.-2011-01-01.execute-policy-type/BreachThreshold] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.put-lifecycle-hook-type/lifecycle-hook-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/ascii-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.put-lifecycle-hook-type/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.put-lifecycle-hook-type/rolearn (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.put-lifecycle-hook-type/notification-targetarn (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/notification-target-resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.put-lifecycle-hook-type/notification-metadata (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len1023))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.put-lifecycle-hook-type/default-result (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/lifecycle-action-result))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/put-lifecycle-hook-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.put-lifecycle-hook-type/LifecycleHookName :portkey.aws.autoscaling.-2011-01-01.put-lifecycle-hook-type/AutoScalingGroupName] :opt-un [:portkey.aws.autoscaling.-2011-01-01/LifecycleTransition :portkey.aws.autoscaling.-2011-01-01.put-lifecycle-hook-type/RoleARN :portkey.aws.autoscaling.-2011-01-01.put-lifecycle-hook-type/NotificationTargetARN :portkey.aws.autoscaling.-2011-01-01.put-lifecycle-hook-type/NotificationMetadata :portkey.aws.autoscaling.-2011-01-01/HeartbeatTimeout :portkey.aws.autoscaling.-2011-01-01.put-lifecycle-hook-type/DefaultResult] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len2047 (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36226__auto__] (clojure.core/<= 1 (clojure.core/count s__36226__auto__))) (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 2047)) (clojure.core/fn [s__36228__auto__] (clojure.core/re-matches #"[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*" s__36228__auto__))))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.scaling-policy/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.scaling-policy/policyarn (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.scaling-policy/policy-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.scaling-policy/scaling-adjustment (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/policy-increment))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.scaling-policy/adjustment-type (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.scaling-policy/metric-aggregation-type (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len32))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.scaling-policy/policy-type (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len64))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/scaling-policy (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.scaling-policy/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01.scaling-policy/PolicyARN :portkey.aws.autoscaling.-2011-01-01/MinAdjustmentMagnitude :portkey.aws.autoscaling.-2011-01-01.scaling-policy/PolicyName :portkey.aws.autoscaling.-2011-01-01.scaling-policy/ScalingAdjustment :portkey.aws.autoscaling.-2011-01-01/Cooldown :portkey.aws.autoscaling.-2011-01-01/EstimatedInstanceWarmup :portkey.aws.autoscaling.-2011-01-01/StepAdjustments :portkey.aws.autoscaling.-2011-01-01.scaling-policy/AdjustmentType :portkey.aws.autoscaling.-2011-01-01.scaling-policy/MetricAggregationType :portkey.aws.autoscaling.-2011-01-01/TargetTrackingConfiguration :portkey.aws.autoscaling.-2011-01-01/MinAdjustmentStep :portkey.aws.autoscaling.-2011-01-01/Alarms :portkey.aws.autoscaling.-2011-01-01.scaling-policy/PolicyType] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.launch-configuration/launch-configurationarn (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.launch-configuration/placement-tenancy (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len64))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.launch-configuration/kernel-id (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.launch-configuration/image-id (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.launch-configuration/instance-type (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.launch-configuration/classic-linkvpcid (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.launch-configuration/key-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.launch-configuration/created-time (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.launch-configuration/launch-configuration-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.launch-configuration/ramdisk-id (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.launch-configuration/user-data (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-user-data))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.launch-configuration/iam-instance-profile (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len1600))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/launch-configuration (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.launch-configuration/LaunchConfigurationName :portkey.aws.autoscaling.-2011-01-01.launch-configuration/ImageId :portkey.aws.autoscaling.-2011-01-01.launch-configuration/InstanceType :portkey.aws.autoscaling.-2011-01-01.launch-configuration/CreatedTime] :opt-un [:portkey.aws.autoscaling.-2011-01-01.launch-configuration/LaunchConfigurationARN :portkey.aws.autoscaling.-2011-01-01.launch-configuration/PlacementTenancy :portkey.aws.autoscaling.-2011-01-01.launch-configuration/KernelId :portkey.aws.autoscaling.-2011-01-01/AssociatePublicIpAddress :portkey.aws.autoscaling.-2011-01-01/InstanceMonitoring :portkey.aws.autoscaling.-2011-01-01/SecurityGroups :portkey.aws.autoscaling.-2011-01-01/EbsOptimized :portkey.aws.autoscaling.-2011-01-01.launch-configuration/ClassicLinkVPCId :portkey.aws.autoscaling.-2011-01-01.launch-configuration/KeyName :portkey.aws.autoscaling.-2011-01-01/SpotPrice :portkey.aws.autoscaling.-2011-01-01/ClassicLinkVPCSecurityGroups :portkey.aws.autoscaling.-2011-01-01/BlockDeviceMappings :portkey.aws.autoscaling.-2011-01-01.launch-configuration/RamdiskId :portkey.aws.autoscaling.-2011-01-01.launch-configuration/UserData :portkey.aws.autoscaling.-2011-01-01.launch-configuration/IamInstanceProfile] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.lifecycle-hook/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.lifecycle-hook/notification-targetarn (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.lifecycle-hook/notification-metadata (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len1023))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.lifecycle-hook/rolearn (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.lifecycle-hook/lifecycle-hook-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/ascii-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.lifecycle-hook/default-result (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/lifecycle-action-result))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/lifecycle-hook (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.lifecycle-hook/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01/GlobalTimeout :portkey.aws.autoscaling.-2011-01-01.lifecycle-hook/NotificationTargetARN :portkey.aws.autoscaling.-2011-01-01.lifecycle-hook/NotificationMetadata :portkey.aws.autoscaling.-2011-01-01.lifecycle-hook/RoleARN :portkey.aws.autoscaling.-2011-01-01.lifecycle-hook/LifecycleHookName :portkey.aws.autoscaling.-2011-01-01.lifecycle-hook/DefaultResult :portkey.aws.autoscaling.-2011-01-01/LifecycleTransition :portkey.aws.autoscaling.-2011-01-01/HeartbeatTimeout] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.policyarntype/policyarn (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/policyarntype (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.policyarntype/PolicyARN :portkey.aws.autoscaling.-2011-01-01/Alarms] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len511 (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36226__auto__] (clojure.core/<= 1 (clojure.core/count s__36226__auto__))) (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 511)) (clojure.core/fn [s__36228__auto__] (clojure.core/re-matches #"[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*" s__36228__auto__))))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.scaling-activity-in-progress-fault/message (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/scaling-activity-in-progress-fault (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.scaling-activity-in-progress-fault/message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/disable-scale-in clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/metric-granularity-types (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/metric-granularity-type))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.block-device-mapping/virtual-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.block-device-mapping/device-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/block-device-mapping (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.block-device-mapping/DeviceName] :opt-un [:portkey.aws.autoscaling.-2011-01-01.block-device-mapping/VirtualName :portkey.aws.autoscaling.-2011-01-01/Ebs :portkey.aws.autoscaling.-2011-01-01/NoDevice] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.tag/resource-id (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.tag/resource-type (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.tag/key (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/tag-key))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.tag/value (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/tag-value))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/tag (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.tag/Key] :opt-un [:portkey.aws.autoscaling.-2011-01-01.tag/ResourceId :portkey.aws.autoscaling.-2011-01-01.tag/ResourceType :portkey.aws.autoscaling.-2011-01-01.tag/Value :portkey.aws.autoscaling.-2011-01-01/PropagateAtLaunch] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.alarm/alarm-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.alarm/alarmarn (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/alarm (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.alarm/AlarmName :portkey.aws.autoscaling.-2011-01-01.alarm/AlarmARN] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/metric-scale clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/block-device-ebs-volume-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36226__auto__] (clojure.core/<= 1 (clojure.core/count s__36226__auto__))) (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 255))))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/metric-name (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.auto-scaling-instances-type/next-token (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/auto-scaling-instances-type (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01/AutoScalingInstances :portkey.aws.autoscaling.-2011-01-01.auto-scaling-instances-type/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/metric-dimensions (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/metric-dimension))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.instance/instance-id (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len19))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.instance/availability-zone (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.instance/health-status (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len32))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.instance/launch-configuration-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.instance/launch-template (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/launch-template-specification))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.instance/protected-from-scale-in (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/instance-protected))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/instance (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.instance/InstanceId :portkey.aws.autoscaling.-2011-01-01.instance/AvailabilityZone :portkey.aws.autoscaling.-2011-01-01/LifecycleState :portkey.aws.autoscaling.-2011-01-01.instance/HealthStatus :portkey.aws.autoscaling.-2011-01-01.instance/ProtectedFromScaleIn] :opt-un [:portkey.aws.autoscaling.-2011-01-01.instance/LaunchConfigurationName :portkey.aws.autoscaling.-2011-01-01.instance/LaunchTemplate] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/metric-namespace (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/policy-increment clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/adjustment-types (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/adjustment-type))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/attach-load-balancer-target-groups-result-type (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-auto-scaling-instances-type/next-token (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/describe-auto-scaling-instances-type (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01/InstanceIds :portkey.aws.autoscaling.-2011-01-01/MaxRecords :portkey.aws.autoscaling.-2011-01-01.describe-auto-scaling-instances-type/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.notification-configuration/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.notification-configuration/topicarn (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.notification-configuration/notification-type (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/notification-configuration (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.notification-configuration/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01.notification-configuration/TopicARN :portkey.aws.autoscaling.-2011-01-01.notification-configuration/NotificationType] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len64 (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36226__auto__] (clojure.core/<= 1 (clojure.core/count s__36226__auto__))) (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 64)) (clojure.core/fn [s__36228__auto__] (clojure.core/re-matches #"[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*" s__36228__auto__))))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/suspended-processes (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/suspended-process))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/attach-load-balancers-result-type (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.attach-load-balancer-target-groups-type/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/attach-load-balancer-target-groups-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.attach-load-balancer-target-groups-type/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01/TargetGroupARNs] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.lifecycle-hook-specification/lifecycle-hook-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/ascii-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.lifecycle-hook-specification/notification-metadata (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len1023))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.lifecycle-hook-specification/default-result (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/lifecycle-action-result))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.lifecycle-hook-specification/notification-targetarn (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/notification-target-resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.lifecycle-hook-specification/rolearn (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/lifecycle-hook-specification (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.lifecycle-hook-specification/LifecycleHookName :portkey.aws.autoscaling.-2011-01-01/LifecycleTransition] :opt-un [:portkey.aws.autoscaling.-2011-01-01.lifecycle-hook-specification/NotificationMetadata :portkey.aws.autoscaling.-2011-01-01/HeartbeatTimeout :portkey.aws.autoscaling.-2011-01-01.lifecycle-hook-specification/DefaultResult :portkey.aws.autoscaling.-2011-01-01.lifecycle-hook-specification/NotificationTargetARN :portkey.aws.autoscaling.-2011-01-01.lifecycle-hook-specification/RoleARN] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-load-balancers-request/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-load-balancers-request/next-token (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/describe-load-balancers-request (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.describe-load-balancers-request/AutoScalingGroupName] :opt-un [:portkey.aws.autoscaling.-2011-01-01.describe-load-balancers-request/NextToken :portkey.aws.autoscaling.-2011-01-01/MaxRecords] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.detach-instances-query/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/detach-instances-query (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.detach-instances-query/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01/ShouldDecrementDesiredCapacity] :opt-un [:portkey.aws.autoscaling.-2011-01-01/InstanceIds] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-launch-configuration-type/placement-tenancy (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len64))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-launch-configuration-type/kernel-id (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-launch-configuration-type/instance-id (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len19))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-launch-configuration-type/image-id (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-launch-configuration-type/instance-type (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-launch-configuration-type/classic-linkvpcid (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-launch-configuration-type/key-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-launch-configuration-type/launch-configuration-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-launch-configuration-type/ramdisk-id (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-launch-configuration-type/user-data (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-user-data))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.create-launch-configuration-type/iam-instance-profile (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len1600))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/create-launch-configuration-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.create-launch-configuration-type/LaunchConfigurationName] :opt-un [:portkey.aws.autoscaling.-2011-01-01.create-launch-configuration-type/PlacementTenancy :portkey.aws.autoscaling.-2011-01-01.create-launch-configuration-type/KernelId :portkey.aws.autoscaling.-2011-01-01.create-launch-configuration-type/InstanceId :portkey.aws.autoscaling.-2011-01-01/AssociatePublicIpAddress :portkey.aws.autoscaling.-2011-01-01/InstanceMonitoring :portkey.aws.autoscaling.-2011-01-01.create-launch-configuration-type/ImageId :portkey.aws.autoscaling.-2011-01-01/SecurityGroups :portkey.aws.autoscaling.-2011-01-01/EbsOptimized :portkey.aws.autoscaling.-2011-01-01.create-launch-configuration-type/InstanceType :portkey.aws.autoscaling.-2011-01-01.create-launch-configuration-type/ClassicLinkVPCId :portkey.aws.autoscaling.-2011-01-01.create-launch-configuration-type/KeyName :portkey.aws.autoscaling.-2011-01-01/SpotPrice :portkey.aws.autoscaling.-2011-01-01/ClassicLinkVPCSecurityGroups :portkey.aws.autoscaling.-2011-01-01/BlockDeviceMappings :portkey.aws.autoscaling.-2011-01-01.create-launch-configuration-type/RamdiskId :portkey.aws.autoscaling.-2011-01-01.create-launch-configuration-type/UserData :portkey.aws.autoscaling.-2011-01-01.create-launch-configuration-type/IamInstanceProfile] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group-desired-capacity clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/availability-zones (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255 :min-count 1))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/metric-type {"ASGAverageCPUUtilization" "ASGAverageCPUUtilization", :asgaveragecpuutilization "ASGAverageCPUUtilization", "ASGAverageNetworkIn" "ASGAverageNetworkIn", :asgaverage-network-in "ASGAverageNetworkIn", "ASGAverageNetworkOut" "ASGAverageNetworkOut", :asgaverage-network-out "ASGAverageNetworkOut", "ALBRequestCountPerTarget" "ALBRequestCountPerTarget", :albrequest-count-per-target "ALBRequestCountPerTarget"})

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-scaling-activities-type/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-scaling-activities-type/next-token (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/describe-scaling-activities-type (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01/ActivityIds :portkey.aws.autoscaling.-2011-01-01.describe-scaling-activities-type/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01/MaxRecords :portkey.aws.autoscaling.-2011-01-01.describe-scaling-activities-type/NextToken] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/termination-policies (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len1600))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.describe-notification-configurations-type/next-token (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/describe-notification-configurations-type (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01/AutoScalingGroupNames :portkey.aws.autoscaling.-2011-01-01.describe-notification-configurations-type/NextToken :portkey.aws.autoscaling.-2011-01-01/MaxRecords] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/detach-load-balancers-result-type (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/processes (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/process-type))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/process-names (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/put-lifecycle-hook-answer (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/metric-collection-types (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/metric-collection-type))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group-min-size clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/instances (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/instance))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/force-delete clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.metric-granularity-type/granularity (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/metric-granularity-type (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.metric-granularity-type/Granularity] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/lifecycle-action-token (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36226__auto__] (clojure.core/<= 36 (clojure.core/count s__36226__auto__))) (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 36))))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/scaling-policies (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/scaling-policy))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.invalid-next-token/message (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/invalid-next-token (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01.invalid-next-token/message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.delete-lifecycle-hook-type/lifecycle-hook-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/ascii-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.delete-lifecycle-hook-type/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/delete-lifecycle-hook-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.delete-lifecycle-hook-type/LifecycleHookName :portkey.aws.autoscaling.-2011-01-01.delete-lifecycle-hook-type/AutoScalingGroupName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.customized-metric-specification/namespace (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/metric-namespace))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.customized-metric-specification/dimensions (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/metric-dimensions))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.customized-metric-specification/statistic (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/metric-statistic))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.customized-metric-specification/unit (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/metric-unit))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/customized-metric-specification (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01/MetricName :portkey.aws.autoscaling.-2011-01-01.customized-metric-specification/Namespace :portkey.aws.autoscaling.-2011-01-01.customized-metric-specification/Statistic] :opt-un [:portkey.aws.autoscaling.-2011-01-01.customized-metric-specification/Dimensions :portkey.aws.autoscaling.-2011-01-01.customized-metric-specification/Unit] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/health-check-grace-period clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.put-notification-configuration-type/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.put-notification-configuration-type/topicarn (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.put-notification-configuration-type/notification-types (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/auto-scaling-notification-types))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/put-notification-configuration-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.put-notification-configuration-type/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01.put-notification-configuration-type/TopicARN :portkey.aws.autoscaling.-2011-01-01.put-notification-configuration-type/NotificationTypes] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.complete-lifecycle-action-type/lifecycle-hook-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/ascii-string-max-len255))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.complete-lifecycle-action-type/auto-scaling-group-name (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/resource-name))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01.complete-lifecycle-action-type/instance-id (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len19))
(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/complete-lifecycle-action-type (portkey.aws/json-keys :req-un [:portkey.aws.autoscaling.-2011-01-01.complete-lifecycle-action-type/LifecycleHookName :portkey.aws.autoscaling.-2011-01-01.complete-lifecycle-action-type/AutoScalingGroupName :portkey.aws.autoscaling.-2011-01-01/LifecycleActionResult] :opt-un [:portkey.aws.autoscaling.-2011-01-01/LifecycleActionToken :portkey.aws.autoscaling.-2011-01-01.complete-lifecycle-action-type/InstanceId] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/describe-auto-scaling-notification-types-answer (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.autoscaling.-2011-01-01/AutoScalingNotificationTypes] :locations {}))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/metrics (clojure.spec.alpha/coll-of :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len255))

(clojure.spec.alpha/def :portkey.aws.autoscaling.-2011-01-01/xml-string-max-len32 (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36226__auto__] (clojure.core/<= 1 (clojure.core/count s__36226__auto__))) (clojure.core/fn [s__36227__auto__] (clojure.core/< (clojure.core/count s__36227__auto__) 32)) (clojure.core/fn [s__36228__auto__] (clojure.core/re-matches #"[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*" s__36228__auto__))))

(clojure.core/defn update-auto-scaling-group "Updates the configuration for the specified Auto Scaling group.\n The new settings take effect on any scaling activities after this call returns.\nScaling activities that are currently in progress aren't affected.\n To update an Auto Scaling group with a launch configuration with\nInstanceMonitoring set to false, you must first disable the collection of group\nmetrics. Otherwise, you will get an error. If you have previously enabled the\ncollection of group metrics, you can disable it using DisableMetricsCollection.\n Note the following:\n * If you specify a new value for MinSize without specifying a value for\nDesiredCapacity, and the new MinSize is larger than the current size of the\ngroup, we implicitly call SetDesiredCapacity to set the size of the group to the\nnew value of MinSize.\n * If you specify a new value for MaxSize without specifying a value for\nDesiredCapacity, and the new MaxSize is smaller than the current size of the\ngroup, we implicitly call SetDesiredCapacity to set the size of the group to the\nnew value of MaxSize.\n * All other optional parameters are left unchanged if not specified." ([update-auto-scaling-group-type] (clojure.core/let [req<-input__36755__auto__ (req<-update-auto-scaling-group-type "UpdateAutoScalingGroup" update-auto-scaling-group-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/update-auto-scaling-group-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"ScalingActivityInProgressFault" :portkey.aws.autoscaling.-2011-01-01/scaling-activity-in-progress-fault, "ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault, "ServiceLinkedRoleFailure" :portkey.aws.autoscaling.-2011-01-01/service-linked-role-failure}))))
(clojure.spec.alpha/fdef update-auto-scaling-group :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/update-auto-scaling-group-type) :ret clojure.core/true?)

(clojure.core/defn describe-scaling-activities "Describes one or more scaling activities for the specified Auto Scaling group." ([] (describe-scaling-activities {})) ([describe-scaling-activities-type] (clojure.core/let [req<-input__36755__auto__ (req<-describe-scaling-activities-type "DescribeScalingActivities" describe-scaling-activities-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/describe-scaling-activities-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/activities-type {"InvalidNextToken" :portkey.aws.autoscaling.-2011-01-01/invalid-next-token, "ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef describe-scaling-activities :args (clojure.spec.alpha/? :portkey.aws.autoscaling.-2011-01-01/describe-scaling-activities-type) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/activities-type))

nil

nil

(clojure.core/defn describe-auto-scaling-groups "Describes one or more Auto Scaling groups." ([] (describe-auto-scaling-groups {})) ([auto-scaling-group-names-type] (clojure.core/let [req<-input__36755__auto__ (req<-auto-scaling-group-names-type "DescribeAutoScalingGroups" auto-scaling-group-names-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group-names-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/auto-scaling-groups-type {"InvalidNextToken" :portkey.aws.autoscaling.-2011-01-01/invalid-next-token, "ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef describe-auto-scaling-groups :args (clojure.spec.alpha/? :portkey.aws.autoscaling.-2011-01-01/auto-scaling-group-names-type) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/auto-scaling-groups-type))

(clojure.core/defn attach-load-balancer-target-groups "Attaches one or more target groups to the specified Auto Scaling group.\n To describe the target groups for an Auto Scaling group, use\nDescribeLoadBalancerTargetGroups. To detach the target group from the Auto\nScaling group, use DetachLoadBalancerTargetGroups.\n For more information, see Attach a Load Balancer to Your Auto Scaling Group\n(http://docs.aws.amazon.com/autoscaling/latest/userguide/attach-load-balancer-asg.html)\nin the Auto Scaling User Guide." ([attach-load-balancer-target-groups-type] (clojure.core/let [req<-input__36755__auto__ (req<-attach-load-balancer-target-groups-type "AttachLoadBalancerTargetGroups" attach-load-balancer-target-groups-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/attach-load-balancer-target-groups-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/attach-load-balancer-target-groups-result-type {"ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault, "ServiceLinkedRoleFailure" :portkey.aws.autoscaling.-2011-01-01/service-linked-role-failure}))))
(clojure.spec.alpha/fdef attach-load-balancer-target-groups :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/attach-load-balancer-target-groups-type) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/attach-load-balancer-target-groups-result-type))

(clojure.core/defn describe-launch-configurations "Describes one or more launch configurations." ([] (describe-launch-configurations {})) ([launch-configuration-names-type] (clojure.core/let [req<-input__36755__auto__ (req<-launch-configuration-names-type "DescribeLaunchConfigurations" launch-configuration-names-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/launch-configuration-names-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/launch-configurations-type {"InvalidNextToken" :portkey.aws.autoscaling.-2011-01-01/invalid-next-token, "ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef describe-launch-configurations :args (clojure.spec.alpha/? :portkey.aws.autoscaling.-2011-01-01/launch-configuration-names-type) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/launch-configurations-type))

nil

nil

(clojure.core/defn describe-policies "Describes the policies for the specified Auto Scaling group." ([] (describe-policies {})) ([describe-policies-type] (clojure.core/let [req<-input__36755__auto__ (req<-describe-policies-type "DescribePolicies" describe-policies-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/describe-policies-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/policies-type {"InvalidNextToken" :portkey.aws.autoscaling.-2011-01-01/invalid-next-token, "ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault, "ServiceLinkedRoleFailure" :portkey.aws.autoscaling.-2011-01-01/service-linked-role-failure}))))
(clojure.spec.alpha/fdef describe-policies :args (clojure.spec.alpha/? :portkey.aws.autoscaling.-2011-01-01/describe-policies-type) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/policies-type))

(clojure.core/defn set-instance-protection "Updates the instance protection settings of the specified instances.\n For more information, see Instance Protection\n(http://docs.aws.amazon.com/autoscaling/latest/userguide/as-instance-termination.html#instance-protection)\nin the Auto Scaling User Guide." ([set-instance-protection-query] (clojure.core/let [req<-input__36755__auto__ (req<-set-instance-protection-query "SetInstanceProtection" set-instance-protection-query)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/set-instance-protection-query {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/set-instance-protection-answer {"LimitExceededFault" :portkey.aws.autoscaling.-2011-01-01/limit-exceeded-fault, "ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef set-instance-protection :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/set-instance-protection-query) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/set-instance-protection-answer))

(clojure.core/defn resume-processes "Resumes the specified suspended Auto Scaling processes, or all suspended\nprocess, for the specified Auto Scaling group.\n For more information, see Suspending and Resuming Auto Scaling Processes\n(http://docs.aws.amazon.com/autoscaling/latest/userguide/as-suspend-resume-processes.html)\nin the Auto Scaling User Guide." ([scaling-process-query] (clojure.core/let [req<-input__36755__auto__ (req<-scaling-process-query "ResumeProcesses" scaling-process-query)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/scaling-process-query {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"ResourceInUseFault" :portkey.aws.autoscaling.-2011-01-01/resource-in-use-fault, "ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef resume-processes :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/scaling-process-query) :ret clojure.core/true?)

(clojure.core/defn detach-instances "Removes one or more instances from the specified Auto Scaling group.\n After the instances are detached, you can manage them independent of the Auto\nScaling group.\n If you do not specify the option to decrement the desired capacity, Auto\nScaling launches instances to replace the ones that are detached.\n If there is a Classic Load Balancer attached to the Auto Scaling group, the\ninstances are deregistered from the load balancer. If there are target groups\nattached to the Auto Scaling group, the instances are deregistered from the\ntarget groups.\n For more information, see Detach EC2 Instances from Your Auto Scaling Group\n(http://docs.aws.amazon.com/autoscaling/latest/userguide/detach-instance-asg.html)\nin the Auto Scaling User Guide." ([detach-instances-query] (clojure.core/let [req<-input__36755__auto__ (req<-detach-instances-query "DetachInstances" detach-instances-query)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/detach-instances-query {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/detach-instances-answer {"ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef detach-instances :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/detach-instances-query) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/detach-instances-answer))

(clojure.core/defn attach-instances "Attaches one or more EC2 instances to the specified Auto Scaling group.\n When you attach instances, Auto Scaling increases the desired capacity of the\ngroup by the number of instances being attached. If the number of instances\nbeing attached plus the desired capacity of the group exceeds the maximum size\nof the group, the operation fails.\n If there is a Classic Load Balancer attached to your Auto Scaling group, the\ninstances are also registered with the load balancer. If there are target groups\nattached to your Auto Scaling group, the instances are also registered with the\ntarget groups.\n For more information, see Attach EC2 Instances to Your Auto Scaling Group\n(http://docs.aws.amazon.com/autoscaling/latest/userguide/attach-instance-asg.html)\nin the Auto Scaling User Guide." ([attach-instances-query] (clojure.core/let [req<-input__36755__auto__ (req<-attach-instances-query "AttachInstances" attach-instances-query)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/attach-instances-query {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault, "ServiceLinkedRoleFailure" :portkey.aws.autoscaling.-2011-01-01/service-linked-role-failure}))))
(clojure.spec.alpha/fdef attach-instances :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/attach-instances-query) :ret clojure.core/true?)

(clojure.core/defn delete-tags "Deletes the specified tags." ([delete-tags-type] (clojure.core/let [req<-input__36755__auto__ (req<-delete-tags-type "DeleteTags" delete-tags-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/delete-tags-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault, "ResourceInUseFault" :portkey.aws.autoscaling.-2011-01-01/resource-in-use-fault}))))
(clojure.spec.alpha/fdef delete-tags :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/delete-tags-type) :ret clojure.core/true?)

(clojure.core/defn record-lifecycle-action-heartbeat "Records a heartbeat for the lifecycle action associated with the specified token\nor instance. This extends the timeout by the length of time defined using\nPutLifecycleHook.\n This step is a part of the procedure for adding a lifecycle hook to an Auto\nScaling group:\n * (Optional) Create a Lambda function and a rule that allows CloudWatch Events\nto invoke your Lambda function when Auto Scaling launches or terminates\ninstances.\n * (Optional) Create a notification target and an IAM role. The target can be\neither an Amazon SQS queue or an Amazon SNS topic. The role allows Auto Scaling\nto publish lifecycle notifications to the target.\n * Create the lifecycle hook. Specify whether the hook is used when the\ninstances launch or terminate.\n * If you need more time, record the lifecycle action heartbeat to keep the\ninstance in a pending state.\n * If you finish before the timeout period ends, complete the lifecycle action.\n For more information, see Auto Scaling Lifecycle\n(http://docs.aws.amazon.com/autoscaling/latest/userguide/AutoScalingGroupLifecycle.html)\nin the Auto Scaling User Guide." ([record-lifecycle-action-heartbeat-type] (clojure.core/let [req<-input__36755__auto__ (req<-record-lifecycle-action-heartbeat-type "RecordLifecycleActionHeartbeat" record-lifecycle-action-heartbeat-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/record-lifecycle-action-heartbeat-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/record-lifecycle-action-heartbeat-answer {"ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef record-lifecycle-action-heartbeat :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/record-lifecycle-action-heartbeat-type) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/record-lifecycle-action-heartbeat-answer))

(clojure.core/defn create-auto-scaling-group "Creates an Auto Scaling group with the specified name and attributes.\n If you exceed your maximum limit of Auto Scaling groups, the call fails. For\ninformation about viewing this limit, see DescribeAccountLimits. For information\nabout updating this limit, see Auto Scaling Limits\n(http://docs.aws.amazon.com/autoscaling/latest/userguide/as-account-limits.html)\nin the Auto Scaling User Guide.\n For more information, see Auto Scaling Groups\n(http://docs.aws.amazon.com/autoscaling/latest/userguide/AutoScalingGroup.html)\nin the Auto Scaling User Guide." ([create-auto-scaling-group-type] (clojure.core/let [req<-input__36755__auto__ (req<-create-auto-scaling-group-type "CreateAutoScalingGroup" create-auto-scaling-group-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/create-auto-scaling-group-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"AlreadyExistsFault" :portkey.aws.autoscaling.-2011-01-01/already-exists-fault, "LimitExceededFault" :portkey.aws.autoscaling.-2011-01-01/limit-exceeded-fault, "ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault, "ServiceLinkedRoleFailure" :portkey.aws.autoscaling.-2011-01-01/service-linked-role-failure}))))
(clojure.spec.alpha/fdef create-auto-scaling-group :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/create-auto-scaling-group-type) :ret clojure.core/true?)

(clojure.core/defn terminate-instance-in-auto-scaling-group "Terminates the specified instance and optionally adjusts the desired group size.\n This call simply makes a termination request. The instance is not terminated\nimmediately." ([terminate-instance-in-auto-scaling-group-type] (clojure.core/let [req<-input__36755__auto__ (req<-terminate-instance-in-auto-scaling-group-type "TerminateInstanceInAutoScalingGroup" terminate-instance-in-auto-scaling-group-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/terminate-instance-in-auto-scaling-group-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/activity-type {"ScalingActivityInProgressFault" :portkey.aws.autoscaling.-2011-01-01/scaling-activity-in-progress-fault, "ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef terminate-instance-in-auto-scaling-group :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/terminate-instance-in-auto-scaling-group-type) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/activity-type))

(clojure.core/defn describe-notification-configurations "Describes the notification actions associated with the specified Auto Scaling\ngroup." ([] (describe-notification-configurations {})) ([describe-notification-configurations-type] (clojure.core/let [req<-input__36755__auto__ (req<-describe-notification-configurations-type "DescribeNotificationConfigurations" describe-notification-configurations-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/describe-notification-configurations-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/describe-notification-configurations-answer {"InvalidNextToken" :portkey.aws.autoscaling.-2011-01-01/invalid-next-token, "ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef describe-notification-configurations :args (clojure.spec.alpha/? :portkey.aws.autoscaling.-2011-01-01/describe-notification-configurations-type) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/describe-notification-configurations-answer))

(clojure.core/defn attach-load-balancers "Attaches one or more Classic Load Balancers to the specified Auto Scaling group.\n To attach an Application Load Balancer instead, see\nAttachLoadBalancerTargetGroups.\n To describe the load balancers for an Auto Scaling group, use\nDescribeLoadBalancers. To detach the load balancer from the Auto Scaling group,\nuse DetachLoadBalancers.\n For more information, see Attach a Load Balancer to Your Auto Scaling Group\n(http://docs.aws.amazon.com/autoscaling/latest/userguide/attach-load-balancer-asg.html)\nin the Auto Scaling User Guide." ([attach-load-balancers-type] (clojure.core/let [req<-input__36755__auto__ (req<-attach-load-balancers-type "AttachLoadBalancers" attach-load-balancers-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/attach-load-balancers-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/attach-load-balancers-result-type {"ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault, "ServiceLinkedRoleFailure" :portkey.aws.autoscaling.-2011-01-01/service-linked-role-failure}))))
(clojure.spec.alpha/fdef attach-load-balancers :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/attach-load-balancers-type) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/attach-load-balancers-result-type))

(clojure.core/defn set-instance-health "Sets the health status of the specified instance.\n For more information, see Health Checks\n(http://docs.aws.amazon.com/autoscaling/latest/userguide/healthcheck.html) in\nthe Auto Scaling User Guide." ([set-instance-health-query] (clojure.core/let [req<-input__36755__auto__ (req<-set-instance-health-query "SetInstanceHealth" set-instance-health-query)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/set-instance-health-query {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef set-instance-health :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/set-instance-health-query) :ret clojure.core/true?)

(clojure.core/defn create-or-update-tags "Creates or updates tags for the specified Auto Scaling group.\n When you specify a tag with a key that already exists, the operation overwrites\nthe previous tag definition, and you do not get an error message.\n For more information, see Tagging Auto Scaling Groups and Instances\n(http://docs.aws.amazon.com/autoscaling/latest/userguide/autoscaling-tagging.html)\nin the Auto Scaling User Guide." ([create-or-update-tags-type] (clojure.core/let [req<-input__36755__auto__ (req<-create-or-update-tags-type "CreateOrUpdateTags" create-or-update-tags-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/create-or-update-tags-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"LimitExceededFault" :portkey.aws.autoscaling.-2011-01-01/limit-exceeded-fault, "AlreadyExistsFault" :portkey.aws.autoscaling.-2011-01-01/already-exists-fault, "ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault, "ResourceInUseFault" :portkey.aws.autoscaling.-2011-01-01/resource-in-use-fault}))))
(clojure.spec.alpha/fdef create-or-update-tags :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/create-or-update-tags-type) :ret clojure.core/true?)

(clojure.core/defn execute-policy "Executes the specified policy." ([execute-policy-type] (clojure.core/let [req<-input__36755__auto__ (req<-execute-policy-type "ExecutePolicy" execute-policy-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/execute-policy-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"ScalingActivityInProgressFault" :portkey.aws.autoscaling.-2011-01-01/scaling-activity-in-progress-fault, "ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef execute-policy :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/execute-policy-type) :ret clojure.core/true?)

(clojure.core/defn disable-metrics-collection "Disables group metrics for the specified Auto Scaling group." ([disable-metrics-collection-query] (clojure.core/let [req<-input__36755__auto__ (req<-disable-metrics-collection-query "DisableMetricsCollection" disable-metrics-collection-query)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/disable-metrics-collection-query {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef disable-metrics-collection :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/disable-metrics-collection-query) :ret clojure.core/true?)

nil

(clojure.core/defn delete-lifecycle-hook "Deletes the specified lifecycle hook.\n If there are any outstanding lifecycle actions, they are completed first\n(ABANDON for launching instances, CONTINUE for terminating instances)." ([delete-lifecycle-hook-type] (clojure.core/let [req<-input__36755__auto__ (req<-delete-lifecycle-hook-type "DeleteLifecycleHook" delete-lifecycle-hook-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/delete-lifecycle-hook-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/delete-lifecycle-hook-answer {"ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef delete-lifecycle-hook :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/delete-lifecycle-hook-type) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/delete-lifecycle-hook-answer))

(clojure.core/defn describe-tags "Describes the specified tags.\n You can use filters to limit the results. For example, you can query for the\ntags for a specific Auto Scaling group. You can specify multiple values for a\nfilter. A tag must match at least one of the specified values for it to be\nincluded in the results.\n You can also specify multiple filters. The result includes information for a\nparticular tag only if it matches all the filters. If there's no match, no\nspecial message is returned." ([] (describe-tags {})) ([describe-tags-type] (clojure.core/let [req<-input__36755__auto__ (req<-describe-tags-type "DescribeTags" describe-tags-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/describe-tags-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/tags-type {"InvalidNextToken" :portkey.aws.autoscaling.-2011-01-01/invalid-next-token, "ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef describe-tags :args (clojure.spec.alpha/? :portkey.aws.autoscaling.-2011-01-01/describe-tags-type) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/tags-type))

(clojure.core/defn describe-scheduled-actions "Describes the actions scheduled for your Auto Scaling group that haven't run. To\ndescribe the actions that have already run, use DescribeScalingActivities." ([] (describe-scheduled-actions {})) ([describe-scheduled-actions-type] (clojure.core/let [req<-input__36755__auto__ (req<-describe-scheduled-actions-type "DescribeScheduledActions" describe-scheduled-actions-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/describe-scheduled-actions-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/scheduled-actions-type {"InvalidNextToken" :portkey.aws.autoscaling.-2011-01-01/invalid-next-token, "ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef describe-scheduled-actions :args (clojure.spec.alpha/? :portkey.aws.autoscaling.-2011-01-01/describe-scheduled-actions-type) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/scheduled-actions-type))

(clojure.core/defn set-desired-capacity "Sets the size of the specified Auto Scaling group.\n For more information about desired capacity, see What Is Auto Scaling?\n(http://docs.aws.amazon.com/autoscaling/latest/userguide/WhatIsAutoScaling.html)\nin the Auto Scaling User Guide." ([set-desired-capacity-type] (clojure.core/let [req<-input__36755__auto__ (req<-set-desired-capacity-type "SetDesiredCapacity" set-desired-capacity-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/set-desired-capacity-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"ScalingActivityInProgressFault" :portkey.aws.autoscaling.-2011-01-01/scaling-activity-in-progress-fault, "ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef set-desired-capacity :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/set-desired-capacity-type) :ret clojure.core/true?)

(clojure.core/defn enable-metrics-collection "Enables group metrics for the specified Auto Scaling group. For more\ninformation, see Monitoring Your Auto Scaling Groups and Instances\n(http://docs.aws.amazon.com/autoscaling/latest/userguide/as-instance-monitoring.html)\nin the Auto Scaling User Guide." ([enable-metrics-collection-query] (clojure.core/let [req<-input__36755__auto__ (req<-enable-metrics-collection-query "EnableMetricsCollection" enable-metrics-collection-query)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/enable-metrics-collection-query {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef enable-metrics-collection :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/enable-metrics-collection-query) :ret clojure.core/true?)

(clojure.core/defn suspend-processes "Suspends the specified Auto Scaling processes, or all processes, for the\nspecified Auto Scaling group.\n Note that if you suspend either the Launch or Terminate process types, it can\nprevent other process types from functioning properly.\n To resume processes that have been suspended, use ResumeProcesses.\n For more information, see Suspending and Resuming Auto Scaling Processes\n(http://docs.aws.amazon.com/autoscaling/latest/userguide/as-suspend-resume-processes.html)\nin the Auto Scaling User Guide." ([scaling-process-query] (clojure.core/let [req<-input__36755__auto__ (req<-scaling-process-query "SuspendProcesses" scaling-process-query)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/scaling-process-query {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"ResourceInUseFault" :portkey.aws.autoscaling.-2011-01-01/resource-in-use-fault, "ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef suspend-processes :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/scaling-process-query) :ret clojure.core/true?)

(clojure.core/defn detach-load-balancer-target-groups "Detaches one or more target groups from the specified Auto Scaling group." ([detach-load-balancer-target-groups-type] (clojure.core/let [req<-input__36755__auto__ (req<-detach-load-balancer-target-groups-type "DetachLoadBalancerTargetGroups" detach-load-balancer-target-groups-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/detach-load-balancer-target-groups-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/detach-load-balancer-target-groups-result-type {"ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef detach-load-balancer-target-groups :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/detach-load-balancer-target-groups-type) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/detach-load-balancer-target-groups-result-type))

(clojure.core/defn detach-load-balancers "Detaches one or more Classic Load Balancers from the specified Auto Scaling\ngroup.\n Note that this operation detaches only Classic Load Balancers. If you have\nApplication Load Balancers, use DetachLoadBalancerTargetGroups instead.\n When you detach a load balancer, it enters the Removing state while\nderegistering the instances in the group. When all instances are deregistered,\nthen you can no longer describe the load balancer using DescribeLoadBalancers.\nNote that the instances remain running." ([detach-load-balancers-type] (clojure.core/let [req<-input__36755__auto__ (req<-detach-load-balancers-type "DetachLoadBalancers" detach-load-balancers-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/detach-load-balancers-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/detach-load-balancers-result-type {"ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef detach-load-balancers :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/detach-load-balancers-type) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/detach-load-balancers-result-type))

(clojure.core/defn describe-lifecycle-hooks "Describes the lifecycle hooks for the specified Auto Scaling group." ([describe-lifecycle-hooks-type] (clojure.core/let [req<-input__36755__auto__ (req<-describe-lifecycle-hooks-type "DescribeLifecycleHooks" describe-lifecycle-hooks-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/describe-lifecycle-hooks-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/describe-lifecycle-hooks-answer {"ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef describe-lifecycle-hooks :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/describe-lifecycle-hooks-type) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/describe-lifecycle-hooks-answer))

(clojure.core/defn enter-standby "Moves the specified instances into the standby state.\n For more information, see Temporarily Removing Instances from Your Auto Scaling\nGroup\n(http://docs.aws.amazon.com/autoscaling/latest/userguide/as-enter-exit-standby.html)\nin the Auto Scaling User Guide." ([enter-standby-query] (clojure.core/let [req<-input__36755__auto__ (req<-enter-standby-query "EnterStandby" enter-standby-query)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/enter-standby-query {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/enter-standby-answer {"ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef enter-standby :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/enter-standby-query) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/enter-standby-answer))

(clojure.core/defn describe-load-balancer-target-groups "Describes the target groups for the specified Auto Scaling group." ([describe-load-balancer-target-groups-request] (clojure.core/let [req<-input__36755__auto__ (req<-describe-load-balancer-target-groups-request "DescribeLoadBalancerTargetGroups" describe-load-balancer-target-groups-request)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/describe-load-balancer-target-groups-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/describe-load-balancer-target-groups-response {"ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef describe-load-balancer-target-groups :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/describe-load-balancer-target-groups-request) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/describe-load-balancer-target-groups-response))

nil

(clojure.core/defn delete-notification-configuration "Deletes the specified notification." ([delete-notification-configuration-type] (clojure.core/let [req<-input__36755__auto__ (req<-delete-notification-configuration-type "DeleteNotificationConfiguration" delete-notification-configuration-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/delete-notification-configuration-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef delete-notification-configuration :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/delete-notification-configuration-type) :ret clojure.core/true?)

(clojure.core/defn exit-standby "Moves the specified instances out of the standby state.\n For more information, see Temporarily Removing Instances from Your Auto Scaling\nGroup\n(http://docs.aws.amazon.com/autoscaling/latest/userguide/as-enter-exit-standby.html)\nin the Auto Scaling User Guide." ([exit-standby-query] (clojure.core/let [req<-input__36755__auto__ (req<-exit-standby-query "ExitStandby" exit-standby-query)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/exit-standby-query {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/exit-standby-answer {"ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef exit-standby :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/exit-standby-query) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/exit-standby-answer))

(clojure.core/defn delete-launch-configuration "Deletes the specified launch configuration.\n The launch configuration must not be attached to an Auto Scaling group. When\nthis call completes, the launch configuration is no longer available for use." ([launch-configuration-name-type] (clojure.core/let [req<-input__36755__auto__ (req<-launch-configuration-name-type "DeleteLaunchConfiguration" launch-configuration-name-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/launch-configuration-name-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"ResourceInUseFault" :portkey.aws.autoscaling.-2011-01-01/resource-in-use-fault, "ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef delete-launch-configuration :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/launch-configuration-name-type) :ret clojure.core/true?)

(clojure.core/defn create-launch-configuration "Creates a launch configuration.\n If you exceed your maximum limit of launch configurations, the call fails. For\ninformation about viewing this limit, see DescribeAccountLimits. For information\nabout updating this limit, see Auto Scaling Limits\n(http://docs.aws.amazon.com/autoscaling/latest/userguide/as-account-limits.html)\nin the Auto Scaling User Guide.\n For more information, see Launch Configurations\n(http://docs.aws.amazon.com/autoscaling/latest/userguide/LaunchConfiguration.html)\nin the Auto Scaling User Guide." ([create-launch-configuration-type] (clojure.core/let [req<-input__36755__auto__ (req<-create-launch-configuration-type "CreateLaunchConfiguration" create-launch-configuration-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/create-launch-configuration-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"AlreadyExistsFault" :portkey.aws.autoscaling.-2011-01-01/already-exists-fault, "LimitExceededFault" :portkey.aws.autoscaling.-2011-01-01/limit-exceeded-fault, "ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef create-launch-configuration :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/create-launch-configuration-type) :ret clojure.core/true?)

(clojure.core/defn delete-auto-scaling-group "Deletes the specified Auto Scaling group.\n If the group has instances or scaling activities in progress, you must specify\nthe option to force the deletion in order for it to succeed.\n If the group has policies, deleting the group deletes the policies, the\nunderlying alarm actions, and any alarm that no longer has an associated action.\n To remove instances from the Auto Scaling group before deleting it, call\nDetachInstances with the list of instances and the option to decrement the\ndesired capacity so that Auto Scaling does not launch replacement instances.\n To terminate all instances before deleting the Auto Scaling group, call\nUpdateAutoScalingGroup and set the minimum size and desired capacity of the Auto\nScaling group to zero." ([delete-auto-scaling-group-type] (clojure.core/let [req<-input__36755__auto__ (req<-delete-auto-scaling-group-type "DeleteAutoScalingGroup" delete-auto-scaling-group-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/delete-auto-scaling-group-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"ScalingActivityInProgressFault" :portkey.aws.autoscaling.-2011-01-01/scaling-activity-in-progress-fault, "ResourceInUseFault" :portkey.aws.autoscaling.-2011-01-01/resource-in-use-fault, "ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef delete-auto-scaling-group :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/delete-auto-scaling-group-type) :ret clojure.core/true?)

nil

(clojure.core/defn describe-auto-scaling-instances "Describes one or more Auto Scaling instances." ([] (describe-auto-scaling-instances {})) ([describe-auto-scaling-instances-type] (clojure.core/let [req<-input__36755__auto__ (req<-describe-auto-scaling-instances-type "DescribeAutoScalingInstances" describe-auto-scaling-instances-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/describe-auto-scaling-instances-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/auto-scaling-instances-type {"InvalidNextToken" :portkey.aws.autoscaling.-2011-01-01/invalid-next-token, "ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef describe-auto-scaling-instances :args (clojure.spec.alpha/? :portkey.aws.autoscaling.-2011-01-01/describe-auto-scaling-instances-type) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/auto-scaling-instances-type))

(clojure.core/defn put-notification-configuration "Configures an Auto Scaling group to send notifications when specified events\ntake place. Subscribers to the specified topic can have messages delivered to an\nendpoint such as a web server or an email address.\n This configuration overwrites any existing configuration.\n For more information see Getting SNS Notifications When Your Auto Scaling Group\nScales\n(http://docs.aws.amazon.com/autoscaling/latest/userguide/ASGettingNotifications.html)\nin the Auto Scaling User Guide." ([put-notification-configuration-type] (clojure.core/let [req<-input__36755__auto__ (req<-put-notification-configuration-type "PutNotificationConfiguration" put-notification-configuration-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/put-notification-configuration-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"LimitExceededFault" :portkey.aws.autoscaling.-2011-01-01/limit-exceeded-fault, "ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault, "ServiceLinkedRoleFailure" :portkey.aws.autoscaling.-2011-01-01/service-linked-role-failure}))))
(clojure.spec.alpha/fdef put-notification-configuration :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/put-notification-configuration-type) :ret clojure.core/true?)

(clojure.core/defn delete-scheduled-action "Deletes the specified scheduled action." ([delete-scheduled-action-type] (clojure.core/let [req<-input__36755__auto__ (req<-delete-scheduled-action-type "DeleteScheduledAction" delete-scheduled-action-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/delete-scheduled-action-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef delete-scheduled-action :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/delete-scheduled-action-type) :ret clojure.core/true?)

(clojure.core/defn complete-lifecycle-action "Completes the lifecycle action for the specified token or instance with the\nspecified result.\n This step is a part of the procedure for adding a lifecycle hook to an Auto\nScaling group:\n * (Optional) Create a Lambda function and a rule that allows CloudWatch Events\nto invoke your Lambda function when Auto Scaling launches or terminates\ninstances.\n * (Optional) Create a notification target and an IAM role. The target can be\neither an Amazon SQS queue or an Amazon SNS topic. The role allows Auto Scaling\nto publish lifecycle notifications to the target.\n * Create the lifecycle hook. Specify whether the hook is used when the\ninstances launch or terminate.\n * If you need more time, record the lifecycle action heartbeat to keep the\ninstance in a pending state.\n * If you finish before the timeout period ends, complete the lifecycle action.\n For more information, see Auto Scaling Lifecycle\n(http://docs.aws.amazon.com/autoscaling/latest/userguide/AutoScalingGroupLifecycle.html)\nin the Auto Scaling User Guide." ([complete-lifecycle-action-type] (clojure.core/let [req<-input__36755__auto__ (req<-complete-lifecycle-action-type "CompleteLifecycleAction" complete-lifecycle-action-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/complete-lifecycle-action-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/complete-lifecycle-action-answer {"ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef complete-lifecycle-action :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/complete-lifecycle-action-type) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/complete-lifecycle-action-answer))

(clojure.core/defn put-scaling-policy "Creates or updates a policy for an Auto Scaling group. To update an existing\npolicy, use the existing policy name and set the parameters you want to change.\nAny existing parameter not changed in an update to an existing policy is not\nchanged in this update request.\n If you exceed your maximum limit of step adjustments, which by default is 20\nper region, the call fails. For information about updating this limit, see AWS\nService Limits\n(http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html) in the\nAmazon Web Services General Reference." ([put-scaling-policy-type] (clojure.core/let [req<-input__36755__auto__ (req<-put-scaling-policy-type "PutScalingPolicy" put-scaling-policy-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/put-scaling-policy-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/policyarntype {"LimitExceededFault" :portkey.aws.autoscaling.-2011-01-01/limit-exceeded-fault, "ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault, "ServiceLinkedRoleFailure" :portkey.aws.autoscaling.-2011-01-01/service-linked-role-failure}))))
(clojure.spec.alpha/fdef put-scaling-policy :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/put-scaling-policy-type) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/policyarntype))

(clojure.core/defn delete-policy "Deletes the specified Auto Scaling policy.\n Deleting a policy deletes the underlying alarm action, but does not delete the\nalarm, even if it no longer has an associated action." ([delete-policy-type] (clojure.core/let [req<-input__36755__auto__ (req<-delete-policy-type "DeletePolicy" delete-policy-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/delete-policy-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault, "ServiceLinkedRoleFailure" :portkey.aws.autoscaling.-2011-01-01/service-linked-role-failure}))))
(clojure.spec.alpha/fdef delete-policy :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/delete-policy-type) :ret clojure.core/true?)

(clojure.core/defn describe-load-balancers "Describes the load balancers for the specified Auto Scaling group.\n Note that this operation describes only Classic Load Balancers. If you have\nApplication Load Balancers, use DescribeLoadBalancerTargetGroups instead." ([describe-load-balancers-request] (clojure.core/let [req<-input__36755__auto__ (req<-describe-load-balancers-request "DescribeLoadBalancers" describe-load-balancers-request)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/describe-load-balancers-request {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/describe-load-balancers-response {"ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef describe-load-balancers :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/describe-load-balancers-request) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/describe-load-balancers-response))

(clojure.core/defn put-scheduled-update-group-action "Creates or updates a scheduled scaling action for an Auto Scaling group. When\nupdating a scheduled scaling action, if you leave a parameter unspecified, the\ncorresponding value remains unchanged.\n For more information, see Scheduled Scaling\n(http://docs.aws.amazon.com/autoscaling/latest/userguide/schedule_time.html) in\nthe Auto Scaling User Guide." ([put-scheduled-update-group-action-type] (clojure.core/let [req<-input__36755__auto__ (req<-put-scheduled-update-group-action-type "PutScheduledUpdateGroupAction" put-scheduled-update-group-action-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/put-scheduled-update-group-action-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"AlreadyExistsFault" :portkey.aws.autoscaling.-2011-01-01/already-exists-fault, "LimitExceededFault" :portkey.aws.autoscaling.-2011-01-01/limit-exceeded-fault, "ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef put-scheduled-update-group-action :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/put-scheduled-update-group-action-type) :ret clojure.core/true?)

(clojure.core/defn put-lifecycle-hook "Creates or updates a lifecycle hook for the specified Auto Scaling Group.\n A lifecycle hook tells Auto Scaling that you want to perform an action on an\ninstance that is not actively in service; for example, either when the instance\nlaunches or before the instance terminates.\n This step is a part of the procedure for adding a lifecycle hook to an Auto\nScaling group:\n * (Optional) Create a Lambda function and a rule that allows CloudWatch Events\nto invoke your Lambda function when Auto Scaling launches or terminates\ninstances.\n * (Optional) Create a notification target and an IAM role. The target can be\neither an Amazon SQS queue or an Amazon SNS topic. The role allows Auto Scaling\nto publish lifecycle notifications to the target.\n * Create the lifecycle hook. Specify whether the hook is used when the\ninstances launch or terminate.\n * If you need more time, record the lifecycle action heartbeat to keep the\ninstance in a pending state.\n * If you finish before the timeout period ends, complete the lifecycle action.\n For more information, see Auto Scaling Lifecycle Hooks\n(http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)\nin the Auto Scaling User Guide.\n If you exceed your maximum limit of lifecycle hooks, which by default is 50 per\nAuto Scaling group, the call fails. For information about updating this limit,\nsee AWS Service Limits\n(http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html) in the\nAmazon Web Services General Reference." ([put-lifecycle-hook-type] (clojure.core/let [req<-input__36755__auto__ (req<-put-lifecycle-hook-type "PutLifecycleHook" put-lifecycle-hook-type)] (portkey.aws/-query-call portkey.aws.autoscaling.-2011-01-01/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.autoscaling.-2011-01-01/put-lifecycle-hook-type {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.autoscaling.-2011-01-01/put-lifecycle-hook-answer {"LimitExceededFault" :portkey.aws.autoscaling.-2011-01-01/limit-exceeded-fault, "ResourceContentionFault" :portkey.aws.autoscaling.-2011-01-01/resource-contention-fault}))))
(clojure.spec.alpha/fdef put-lifecycle-hook :args (clojure.spec.alpha/tuple :portkey.aws.autoscaling.-2011-01-01/put-lifecycle-hook-type) :ret (clojure.spec.alpha/and :portkey.aws.autoscaling.-2011-01-01/put-lifecycle-hook-answer))
