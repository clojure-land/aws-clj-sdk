(ns portkey.aws.apigatewayv2 (:require [portkey.aws]))

(def
 endpoints
 '{"us-gov-east-1"
   {:credential-scope {:service "apigateway", :region "us-gov-east-1"},
    :ssl-common-name "apigateway.us-gov-east-1.amazonaws.com",
    :endpoint "https://apigateway.us-gov-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-northeast-1"
   {:credential-scope
    {:service "apigateway", :region "ap-northeast-1"},
    :ssl-common-name "apigateway.ap-northeast-1.amazonaws.com",
    :endpoint "https://apigateway.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "apigateway", :region "eu-west-1"},
    :ssl-common-name "apigateway.eu-west-1.amazonaws.com",
    :endpoint "https://apigateway.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "apigateway", :region "us-east-2"},
    :ssl-common-name "apigateway.us-east-2.amazonaws.com",
    :endpoint "https://apigateway.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope
    {:service "apigateway", :region "ap-southeast-2"},
    :ssl-common-name "apigateway.ap-southeast-2.amazonaws.com",
    :endpoint "https://apigateway.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "cn-north-1"
   {:credential-scope {:service "apigateway", :region "cn-north-1"},
    :ssl-common-name "apigateway.cn-north-1.amazonaws.com.cn",
    :endpoint "https://apigateway.cn-north-1.amazonaws.com.cn",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "apigateway", :region "sa-east-1"},
    :ssl-common-name "apigateway.sa-east-1.amazonaws.com",
    :endpoint "https://apigateway.sa-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope
    {:service "apigateway", :region "ap-southeast-1"},
    :ssl-common-name "apigateway.ap-southeast-1.amazonaws.com",
    :endpoint "https://apigateway.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "cn-northwest-1"
   {:credential-scope
    {:service "apigateway", :region "cn-northwest-1"},
    :ssl-common-name "apigateway.cn-northwest-1.amazonaws.com.cn",
    :endpoint "https://apigateway.cn-northwest-1.amazonaws.com.cn",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope
    {:service "apigateway", :region "ap-northeast-2"},
    :ssl-common-name "apigateway.ap-northeast-2.amazonaws.com",
    :endpoint "https://apigateway.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-west-3"
   {:credential-scope {:service "apigateway", :region "eu-west-3"},
    :ssl-common-name "apigateway.eu-west-3.amazonaws.com",
    :endpoint "https://apigateway.eu-west-3.amazonaws.com",
    :signature-version :v4},
   "ca-central-1"
   {:credential-scope {:service "apigateway", :region "ca-central-1"},
    :ssl-common-name "apigateway.ca-central-1.amazonaws.com",
    :endpoint "https://apigateway.ca-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "apigateway", :region "eu-central-1"},
    :ssl-common-name "apigateway.eu-central-1.amazonaws.com",
    :endpoint "https://apigateway.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "apigateway", :region "eu-west-2"},
    :ssl-common-name "apigateway.eu-west-2.amazonaws.com",
    :endpoint "https://apigateway.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-gov-west-1"
   {:credential-scope {:service "apigateway", :region "us-gov-west-1"},
    :ssl-common-name "apigateway.us-gov-west-1.amazonaws.com",
    :endpoint "https://apigateway.us-gov-west-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "apigateway", :region "us-west-2"},
    :ssl-common-name "apigateway.us-west-2.amazonaws.com",
    :endpoint "https://apigateway.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "apigateway", :region "us-east-1"},
    :ssl-common-name "apigateway.us-east-1.amazonaws.com",
    :endpoint "https://apigateway.us-east-1.amazonaws.com",
    :signature-version :v4},
   "us-west-1"
   {:credential-scope {:service "apigateway", :region "us-west-1"},
    :ssl-common-name "apigateway.us-west-1.amazonaws.com",
    :endpoint "https://apigateway.us-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-south-1"
   {:credential-scope {:service "apigateway", :region "ap-south-1"},
    :ssl-common-name "apigateway.ap-south-1.amazonaws.com",
    :endpoint "https://apigateway.ap-south-1.amazonaws.com",
    :signature-version :v4},
   "eu-north-1"
   {:credential-scope {:service "apigateway", :region "eu-north-1"},
    :ssl-common-name "apigateway.eu-north-1.amazonaws.com",
    :endpoint "https://apigateway.eu-north-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-string-with-length-between-1-and-512)

(clojure.core/declare ser-route-settings-map)

(clojure.core/declare ser-domain-name-configuration)

(clojure.core/declare ser-string-with-length-between-0-and-32-k)

(clojure.core/declare ser-uri-with-length-between-1-and-2048)

(clojure.core/declare ser-endpoint-type)

(clojure.core/declare ser-string)

(clojure.core/declare ser-passthrough-behavior)

(clojure.core/declare ser-route-settings)

(clojure.core/declare ser-integer-with-length-between-50-and-29000)

(clojure.core/declare ser-protocol-type)

(clojure.core/declare ser-identity-source-list)

(clojure.core/declare ser-stage-variables-map)

(clojure.core/declare ser-selection-expression)

(clojure.core/declare ser-provider-arn-list)

(clojure.core/declare ser-integration-type)

(clojure.core/declare ser-authorizer-type)

(clojure.core/declare ser-boolean)

(clojure.core/declare ser-string-with-length-between-1-and-256)

(clojure.core/declare ser-integer-with-length-between-0-and-3600)

(clojure.core/declare ser-access-log-settings)

(clojure.core/declare ser-authorization-type)

(clojure.core/declare ser-template-map)

(clojure.core/declare ser-domain-name-configurations)

(clojure.core/declare ser-route-models)

(clojure.core/declare ser-route-parameters)

(clojure.core/declare ser-connection-type)

(clojure.core/declare ser-authorization-scopes)

(clojure.core/declare ser-selection-key)

(clojure.core/declare ser-arn)

(clojure.core/declare ser-integration-parameters)

(clojure.core/declare ser-timestamp-iso-8601)

(clojure.core/declare ser-double)

(clojure.core/declare ser-integer)

(clojure.core/declare ser-string-with-length-between-1-and-1024)

(clojure.core/declare ser-logging-level)

(clojure.core/declare ser-string-with-length-between-0-and-1024)

(clojure.core/declare ser-string-with-length-between-0-and-2048)

(clojure.core/declare ser-string-with-length-between-1-and-64)

(clojure.core/declare ser-id)

(clojure.core/declare ser-content-handling-strategy)

(clojure.core/declare ser-parameter-constraints)

(clojure.core/declare ser-string-with-length-between-1-and-128)

(clojure.core/defn- ser-string-with-length-between-1-and-512 [input] #:http.request.field{:value input, :shape "StringWithLengthBetween1And512"})

(clojure.core/defn- ser-route-settings-map [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [[k v]] [(clojure.core/into (ser-string k) #:http.request.field{:map-info "key", :shape "__string"}) (clojure.core/into (ser-route-settings v) #:http.request.field{:map-info "value", :shape "RouteSettings"})])) input), :shape "RouteSettingsMap", :type "map"})

(clojure.core/defn- ser-domain-name-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "DomainNameConfiguration", :type "structure"} (clojure.core/contains? input :api-gateway-domain-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :api-gateway-domain-name)) #:http.request.field{:name "ApiGatewayDomainName", :shape "__string", :location-name "apiGatewayDomainName"})) (clojure.core/contains? input :certificate-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-arn (input :certificate-arn)) #:http.request.field{:name "CertificateArn", :shape "Arn", :location-name "certificateArn"})) (clojure.core/contains? input :certificate-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-1-and-128 (input :certificate-name)) #:http.request.field{:name "CertificateName", :shape "StringWithLengthBetween1And128", :location-name "certificateName"})) (clojure.core/contains? input :certificate-upload-date) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-timestamp-iso-8601 (input :certificate-upload-date)) #:http.request.field{:name "CertificateUploadDate", :shape "__timestampIso8601", :location-name "certificateUploadDate"})) (clojure.core/contains? input :endpoint-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-endpoint-type (input :endpoint-type)) #:http.request.field{:name "EndpointType", :shape "EndpointType", :location-name "endpointType"})) (clojure.core/contains? input :hosted-zone-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :hosted-zone-id)) #:http.request.field{:name "HostedZoneId", :shape "__string", :location-name "hostedZoneId"}))))

(clojure.core/defn- ser-string-with-length-between-0-and-32-k [input] #:http.request.field{:value input, :shape "StringWithLengthBetween0And32K"})

(clojure.core/defn- ser-uri-with-length-between-1-and-2048 [input] #:http.request.field{:value input, :shape "UriWithLengthBetween1And2048"})

(clojure.core/defn- ser-endpoint-type [input] #:http.request.field{:value (clojure.core/get {"REGIONAL" "REGIONAL", :regional "REGIONAL", "EDGE" "EDGE", :edge "EDGE"} input), :shape "EndpointType"})

(clojure.core/defn- ser-string [input] #:http.request.field{:value input, :shape "__string"})

(clojure.core/defn- ser-passthrough-behavior [input] #:http.request.field{:value (clojure.core/get {"WHEN_NO_MATCH" "WHEN_NO_MATCH", :when-no-match "WHEN_NO_MATCH", "NEVER" "NEVER", :never "NEVER", "WHEN_NO_TEMPLATES" "WHEN_NO_TEMPLATES", :when-no-templates "WHEN_NO_TEMPLATES"} input), :shape "PassthroughBehavior"})

(clojure.core/defn- ser-route-settings [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "RouteSettings", :type "structure"} (clojure.core/contains? input :data-trace-enabled) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :data-trace-enabled)) #:http.request.field{:name "DataTraceEnabled", :shape "__boolean", :location-name "dataTraceEnabled"})) (clojure.core/contains? input :detailed-metrics-enabled) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :detailed-metrics-enabled)) #:http.request.field{:name "DetailedMetricsEnabled", :shape "__boolean", :location-name "detailedMetricsEnabled"})) (clojure.core/contains? input :logging-level) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-logging-level (input :logging-level)) #:http.request.field{:name "LoggingLevel", :shape "LoggingLevel", :location-name "loggingLevel"})) (clojure.core/contains? input :throttling-burst-limit) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :throttling-burst-limit)) #:http.request.field{:name "ThrottlingBurstLimit", :shape "__integer", :location-name "throttlingBurstLimit"})) (clojure.core/contains? input :throttling-rate-limit) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-double (input :throttling-rate-limit)) #:http.request.field{:name "ThrottlingRateLimit", :shape "__double", :location-name "throttlingRateLimit"}))))

(clojure.core/defn- ser-integer-with-length-between-50-and-29000 [input] #:http.request.field{:value input, :shape "IntegerWithLengthBetween50And29000"})

(clojure.core/defn- ser-protocol-type [input] #:http.request.field{:value (clojure.core/get {"WEBSOCKET" "WEBSOCKET", :websocket "WEBSOCKET"} input), :shape "ProtocolType"})

(clojure.core/defn- ser-identity-source-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "__string"}))) input), :shape "IdentitySourceList", :type "list"})

(clojure.core/defn- ser-stage-variables-map [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [[k v]] [(clojure.core/into (ser-string k) #:http.request.field{:map-info "key", :shape "__string"}) (clojure.core/into (ser-string-with-length-between-0-and-2048 v) #:http.request.field{:map-info "value", :shape "StringWithLengthBetween0And2048"})])) input), :shape "StageVariablesMap", :type "map"})

(clojure.core/defn- ser-selection-expression [input] #:http.request.field{:value input, :shape "SelectionExpression"})

(clojure.core/defn- ser-provider-arn-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-arn coll) #:http.request.field{:shape "Arn"}))) input), :shape "ProviderArnList", :type "list"})

(clojure.core/defn- ser-integration-type [input] #:http.request.field{:value (clojure.core/get {:aws "AWS", "AWS" "AWS", :aws-proxy "AWS_PROXY", "MOCK" "MOCK", "AWS_PROXY" "AWS_PROXY", "HTTP_PROXY" "HTTP_PROXY", :http "HTTP", :http-proxy "HTTP_PROXY", "HTTP" "HTTP", :mock "MOCK"} input), :shape "IntegrationType"})

(clojure.core/defn- ser-authorizer-type [input] #:http.request.field{:value (clojure.core/get {"REQUEST" "REQUEST", :request "REQUEST"} input), :shape "AuthorizerType"})

(clojure.core/defn- ser-boolean [input] #:http.request.field{:value input, :shape "__boolean"})

(clojure.core/defn- ser-string-with-length-between-1-and-256 [input] #:http.request.field{:value input, :shape "StringWithLengthBetween1And256"})

(clojure.core/defn- ser-integer-with-length-between-0-and-3600 [input] #:http.request.field{:value input, :shape "IntegerWithLengthBetween0And3600"})

(clojure.core/defn- ser-access-log-settings [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "AccessLogSettings", :type "structure"} (clojure.core/contains? input :destination-arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-arn (input :destination-arn)) #:http.request.field{:name "DestinationArn", :shape "Arn", :location-name "destinationArn"})) (clojure.core/contains? input :format) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-1-and-1024 (input :format)) #:http.request.field{:name "Format", :shape "StringWithLengthBetween1And1024", :location-name "format"}))))

(clojure.core/defn- ser-authorization-type [input] #:http.request.field{:value (clojure.core/get {"NONE" "NONE", :none "NONE", "AWS_IAM" "AWS_IAM", :aws-iam "AWS_IAM", "CUSTOM" "CUSTOM", :custom "CUSTOM"} input), :shape "AuthorizationType"})

(clojure.core/defn- ser-template-map [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [[k v]] [(clojure.core/into (ser-string k) #:http.request.field{:map-info "key", :shape "__string"}) (clojure.core/into (ser-string-with-length-between-0-and-32-k v) #:http.request.field{:map-info "value", :shape "StringWithLengthBetween0And32K"})])) input), :shape "TemplateMap", :type "map"})

(clojure.core/defn- ser-domain-name-configurations [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-domain-name-configuration coll) #:http.request.field{:shape "DomainNameConfiguration"}))) input), :shape "DomainNameConfigurations", :type "list"})

(clojure.core/defn- ser-route-models [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [[k v]] [(clojure.core/into (ser-string k) #:http.request.field{:map-info "key", :shape "__string"}) (clojure.core/into (ser-string-with-length-between-1-and-128 v) #:http.request.field{:map-info "value", :shape "StringWithLengthBetween1And128"})])) input), :shape "RouteModels", :type "map"})

(clojure.core/defn- ser-route-parameters [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [[k v]] [(clojure.core/into (ser-string k) #:http.request.field{:map-info "key", :shape "__string"}) (clojure.core/into (ser-parameter-constraints v) #:http.request.field{:map-info "value", :shape "ParameterConstraints"})])) input), :shape "RouteParameters", :type "map"})

(clojure.core/defn- ser-connection-type [input] #:http.request.field{:value (clojure.core/get {"INTERNET" "INTERNET", :internet "INTERNET", "VPC_LINK" "VPC_LINK", :vpc-link "VPC_LINK"} input), :shape "ConnectionType"})

(clojure.core/defn- ser-authorization-scopes [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string-with-length-between-1-and-64 coll) #:http.request.field{:shape "StringWithLengthBetween1And64"}))) input), :shape "AuthorizationScopes", :type "list"})

(clojure.core/defn- ser-selection-key [input] #:http.request.field{:value input, :shape "SelectionKey"})

(clojure.core/defn- ser-arn [input] #:http.request.field{:value input, :shape "Arn"})

(clojure.core/defn- ser-integration-parameters [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [[k v]] [(clojure.core/into (ser-string k) #:http.request.field{:map-info "key", :shape "__string"}) (clojure.core/into (ser-string-with-length-between-1-and-512 v) #:http.request.field{:map-info "value", :shape "StringWithLengthBetween1And512"})])) input), :shape "IntegrationParameters", :type "map"})

(clojure.core/defn- ser-timestamp-iso-8601 [input] #:http.request.field{:value input, :shape "__timestampIso8601"})

(clojure.core/defn- ser-double [input] #:http.request.field{:value input, :shape "__double"})

(clojure.core/defn- ser-integer [input] #:http.request.field{:value input, :shape "__integer"})

(clojure.core/defn- ser-string-with-length-between-1-and-1024 [input] #:http.request.field{:value input, :shape "StringWithLengthBetween1And1024"})

(clojure.core/defn- ser-logging-level [input] #:http.request.field{:value (clojure.core/get {"ERROR" "ERROR", :error "ERROR", "INFO" "INFO", :info "INFO", "false" "false", :false "false"} input), :shape "LoggingLevel"})

(clojure.core/defn- ser-string-with-length-between-0-and-1024 [input] #:http.request.field{:value input, :shape "StringWithLengthBetween0And1024"})

(clojure.core/defn- ser-string-with-length-between-0-and-2048 [input] #:http.request.field{:value input, :shape "StringWithLengthBetween0And2048"})

(clojure.core/defn- ser-string-with-length-between-1-and-64 [input] #:http.request.field{:value input, :shape "StringWithLengthBetween1And64"})

(clojure.core/defn- ser-id [input] #:http.request.field{:value input, :shape "Id"})

(clojure.core/defn- ser-content-handling-strategy [input] #:http.request.field{:value (clojure.core/get {"CONVERT_TO_BINARY" "CONVERT_TO_BINARY", :convert-to-binary "CONVERT_TO_BINARY", "CONVERT_TO_TEXT" "CONVERT_TO_TEXT", :convert-to-text "CONVERT_TO_TEXT"} input), :shape "ContentHandlingStrategy"})

(clojure.core/defn- ser-parameter-constraints [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ParameterConstraints", :type "structure"} (clojure.core/contains? input :required) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :required)) #:http.request.field{:name "Required", :shape "__boolean", :location-name "required"}))))

(clojure.core/defn- ser-string-with-length-between-1-and-128 [input] #:http.request.field{:value input, :shape "StringWithLengthBetween1And128"})

(clojure.core/defn- req-get-route-response-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :route-response-id)) #:http.request.field{:name "RouteResponseId", :shape "__string", :location "uri", :location-name "routeResponseId"}) (clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"}) (clojure.core/into (ser-string (input :route-id)) #:http.request.field{:name "RouteId", :shape "__string", :location "uri", :location-name "routeId"})]}))

(clojure.core/defn- req-delete-api-mapping-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-mapping-id)) #:http.request.field{:name "ApiMappingId", :shape "__string", :location "uri", :location-name "apiMappingId"}) (clojure.core/into (ser-string (input :domain-name)) #:http.request.field{:name "DomainName", :shape "__string", :location "uri", :location-name "domainName"})]}))

(clojure.core/defn- req-get-route-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"}) (clojure.core/into (ser-string (input :route-id)) #:http.request.field{:name "RouteId", :shape "__string", :location "uri", :location-name "routeId"})]}))

(clojure.core/defn- req-get-stages-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "nextToken"}))))

(clojure.core/defn- req-delete-domain-name-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :domain-name)) #:http.request.field{:name "DomainName", :shape "__string", :location "uri", :location-name "domainName"})]}))

(clojure.core/defn- req-delete-api-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})]}))

(clojure.core/defn- req-create-api-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-selection-expression (input :route-selection-expression)) #:http.request.field{:name "RouteSelectionExpression", :shape "SelectionExpression", :location-name "routeSelectionExpression"}) (clojure.core/into (ser-protocol-type (input :protocol-type)) #:http.request.field{:name "ProtocolType", :shape "ProtocolType", :location-name "protocolType"}) (clojure.core/into (ser-string-with-length-between-1-and-128 (input :name)) #:http.request.field{:name "Name", :shape "StringWithLengthBetween1And128", :location-name "name"})]} (clojure.core/contains? input :api-key-selection-expression) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-selection-expression (input :api-key-selection-expression)) #:http.request.field{:name "ApiKeySelectionExpression", :shape "SelectionExpression", :location-name "apiKeySelectionExpression"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-0-and-1024 (input :description)) #:http.request.field{:name "Description", :shape "StringWithLengthBetween0And1024", :location-name "description"})) (clojure.core/contains? input :disable-schema-validation) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :disable-schema-validation)) #:http.request.field{:name "DisableSchemaValidation", :shape "__boolean", :location-name "disableSchemaValidation"})) (clojure.core/contains? input :version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-1-and-64 (input :version)) #:http.request.field{:name "Version", :shape "StringWithLengthBetween1And64", :location-name "version"}))))

(clojure.core/defn- req-update-stage-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :stage-name)) #:http.request.field{:name "StageName", :shape "__string", :location "uri", :location-name "stageName"}) (clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})]} (clojure.core/contains? input :client-certificate-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-id (input :client-certificate-id)) #:http.request.field{:name "ClientCertificateId", :shape "Id", :location-name "clientCertificateId"})) (clojure.core/contains? input :route-settings) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-route-settings-map (input :route-settings)) #:http.request.field{:name "RouteSettings", :shape "RouteSettingsMap", :location-name "routeSettings"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-0-and-1024 (input :description)) #:http.request.field{:name "Description", :shape "StringWithLengthBetween0And1024", :location-name "description"})) (clojure.core/contains? input :deployment-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-id (input :deployment-id)) #:http.request.field{:name "DeploymentId", :shape "Id", :location-name "deploymentId"})) (clojure.core/contains? input :access-log-settings) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-access-log-settings (input :access-log-settings)) #:http.request.field{:name "AccessLogSettings", :shape "AccessLogSettings", :location-name "accessLogSettings"})) (clojure.core/contains? input :default-route-settings) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-route-settings (input :default-route-settings)) #:http.request.field{:name "DefaultRouteSettings", :shape "RouteSettings", :location-name "defaultRouteSettings"})) (clojure.core/contains? input :stage-variables) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-stage-variables-map (input :stage-variables)) #:http.request.field{:name "StageVariables", :shape "StageVariablesMap", :location-name "stageVariables"}))))

(clojure.core/defn- req-delete-stage-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :stage-name)) #:http.request.field{:name "StageName", :shape "__string", :location "uri", :location-name "stageName"}) (clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})]}))

(clojure.core/defn- req-create-route-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})], :body [(clojure.core/into (ser-selection-key (input :route-key)) #:http.request.field{:name "RouteKey", :shape "SelectionKey", :location-name "routeKey"})]} (clojure.core/contains? input :api-key-required) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :api-key-required)) #:http.request.field{:name "ApiKeyRequired", :shape "__boolean", :location-name "apiKeyRequired"})) (clojure.core/contains? input :operation-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-1-and-64 (input :operation-name)) #:http.request.field{:name "OperationName", :shape "StringWithLengthBetween1And64", :location-name "operationName"})) (clojure.core/contains? input :request-models) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-route-models (input :request-models)) #:http.request.field{:name "RequestModels", :shape "RouteModels", :location-name "requestModels"})) (clojure.core/contains? input :request-parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-route-parameters (input :request-parameters)) #:http.request.field{:name "RequestParameters", :shape "RouteParameters", :location-name "requestParameters"})) (clojure.core/contains? input :authorizer-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-id (input :authorizer-id)) #:http.request.field{:name "AuthorizerId", :shape "Id", :location-name "authorizerId"})) (clojure.core/contains? input :model-selection-expression) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-selection-expression (input :model-selection-expression)) #:http.request.field{:name "ModelSelectionExpression", :shape "SelectionExpression", :location-name "modelSelectionExpression"})) (clojure.core/contains? input :authorization-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-authorization-type (input :authorization-type)) #:http.request.field{:name "AuthorizationType", :shape "AuthorizationType", :location-name "authorizationType"})) (clojure.core/contains? input :authorization-scopes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-authorization-scopes (input :authorization-scopes)) #:http.request.field{:name "AuthorizationScopes", :shape "AuthorizationScopes", :location-name "authorizationScopes"})) (clojure.core/contains? input :route-response-selection-expression) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-selection-expression (input :route-response-selection-expression)) #:http.request.field{:name "RouteResponseSelectionExpression", :shape "SelectionExpression", :location-name "routeResponseSelectionExpression"})) (clojure.core/contains? input :target) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-1-and-128 (input :target)) #:http.request.field{:name "Target", :shape "StringWithLengthBetween1And128", :location-name "target"}))))

(clojure.core/defn- req-create-integration-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})], :body [(clojure.core/into (ser-integration-type (input :integration-type)) #:http.request.field{:name "IntegrationType", :shape "IntegrationType", :location-name "integrationType"})]} (clojure.core/contains? input :timeout-in-millis) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-with-length-between-50-and-29000 (input :timeout-in-millis)) #:http.request.field{:name "TimeoutInMillis", :shape "IntegerWithLengthBetween50And29000", :location-name "timeoutInMillis"})) (clojure.core/contains? input :request-templates) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-template-map (input :request-templates)) #:http.request.field{:name "RequestTemplates", :shape "TemplateMap", :location-name "requestTemplates"})) (clojure.core/contains? input :connection-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-1-and-1024 (input :connection-id)) #:http.request.field{:name "ConnectionId", :shape "StringWithLengthBetween1And1024", :location-name "connectionId"})) (clojure.core/contains? input :request-parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integration-parameters (input :request-parameters)) #:http.request.field{:name "RequestParameters", :shape "IntegrationParameters", :location-name "requestParameters"})) (clojure.core/contains? input :integration-method) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-1-and-64 (input :integration-method)) #:http.request.field{:name "IntegrationMethod", :shape "StringWithLengthBetween1And64", :location-name "integrationMethod"})) (clojure.core/contains? input :passthrough-behavior) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-passthrough-behavior (input :passthrough-behavior)) #:http.request.field{:name "PassthroughBehavior", :shape "PassthroughBehavior", :location-name "passthroughBehavior"})) (clojure.core/contains? input :credentials-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-arn (input :credentials-arn)) #:http.request.field{:name "CredentialsArn", :shape "Arn", :location-name "credentialsArn"})) (clojure.core/contains? input :integration-uri) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-uri-with-length-between-1-and-2048 (input :integration-uri)) #:http.request.field{:name "IntegrationUri", :shape "UriWithLengthBetween1And2048", :location-name "integrationUri"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-0-and-1024 (input :description)) #:http.request.field{:name "Description", :shape "StringWithLengthBetween0And1024", :location-name "description"})) (clojure.core/contains? input :connection-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-connection-type (input :connection-type)) #:http.request.field{:name "ConnectionType", :shape "ConnectionType", :location-name "connectionType"})) (clojure.core/contains? input :template-selection-expression) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-selection-expression (input :template-selection-expression)) #:http.request.field{:name "TemplateSelectionExpression", :shape "SelectionExpression", :location-name "templateSelectionExpression"})) (clojure.core/contains? input :content-handling-strategy) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-content-handling-strategy (input :content-handling-strategy)) #:http.request.field{:name "ContentHandlingStrategy", :shape "ContentHandlingStrategy", :location-name "contentHandlingStrategy"}))))

(clojure.core/defn- req-get-api-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})]}))

(clojure.core/defn- req-get-integration-response-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"}) (clojure.core/into (ser-string (input :integration-response-id)) #:http.request.field{:name "IntegrationResponseId", :shape "__string", :location "uri", :location-name "integrationResponseId"}) (clojure.core/into (ser-string (input :integration-id)) #:http.request.field{:name "IntegrationId", :shape "__string", :location "uri", :location-name "integrationId"})]}))

(clojure.core/defn- req-get-integration-responses-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :integration-id)) #:http.request.field{:name "IntegrationId", :shape "__string", :location "uri", :location-name "integrationId"}) (clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "nextToken"}))))

(clojure.core/defn- req-get-apis-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "nextToken"}))))

(clojure.core/defn- req-get-api-mappings-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :domain-name)) #:http.request.field{:name "DomainName", :shape "__string", :location "uri", :location-name "domainName"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "nextToken"}))))

(clojure.core/defn- req-update-deployment-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"}) (clojure.core/into (ser-string (input :deployment-id)) #:http.request.field{:name "DeploymentId", :shape "__string", :location "uri", :location-name "deploymentId"})]} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-0-and-1024 (input :description)) #:http.request.field{:name "Description", :shape "StringWithLengthBetween0And1024", :location-name "description"}))))

(clojure.core/defn- req-update-route-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"}) (clojure.core/into (ser-string (input :route-id)) #:http.request.field{:name "RouteId", :shape "__string", :location "uri", :location-name "routeId"})]} (clojure.core/contains? input :api-key-required) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :api-key-required)) #:http.request.field{:name "ApiKeyRequired", :shape "__boolean", :location-name "apiKeyRequired"})) (clojure.core/contains? input :operation-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-1-and-64 (input :operation-name)) #:http.request.field{:name "OperationName", :shape "StringWithLengthBetween1And64", :location-name "operationName"})) (clojure.core/contains? input :request-models) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-route-models (input :request-models)) #:http.request.field{:name "RequestModels", :shape "RouteModels", :location-name "requestModels"})) (clojure.core/contains? input :request-parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-route-parameters (input :request-parameters)) #:http.request.field{:name "RequestParameters", :shape "RouteParameters", :location-name "requestParameters"})) (clojure.core/contains? input :authorizer-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-id (input :authorizer-id)) #:http.request.field{:name "AuthorizerId", :shape "Id", :location-name "authorizerId"})) (clojure.core/contains? input :route-key) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-selection-key (input :route-key)) #:http.request.field{:name "RouteKey", :shape "SelectionKey", :location-name "routeKey"})) (clojure.core/contains? input :model-selection-expression) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-selection-expression (input :model-selection-expression)) #:http.request.field{:name "ModelSelectionExpression", :shape "SelectionExpression", :location-name "modelSelectionExpression"})) (clojure.core/contains? input :authorization-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-authorization-type (input :authorization-type)) #:http.request.field{:name "AuthorizationType", :shape "AuthorizationType", :location-name "authorizationType"})) (clojure.core/contains? input :authorization-scopes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-authorization-scopes (input :authorization-scopes)) #:http.request.field{:name "AuthorizationScopes", :shape "AuthorizationScopes", :location-name "authorizationScopes"})) (clojure.core/contains? input :route-response-selection-expression) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-selection-expression (input :route-response-selection-expression)) #:http.request.field{:name "RouteResponseSelectionExpression", :shape "SelectionExpression", :location-name "routeResponseSelectionExpression"})) (clojure.core/contains? input :target) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-1-and-128 (input :target)) #:http.request.field{:name "Target", :shape "StringWithLengthBetween1And128", :location-name "target"}))))

(clojure.core/defn- req-get-authorizer-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :authorizer-id)) #:http.request.field{:name "AuthorizerId", :shape "__string", :location "uri", :location-name "authorizerId"}) (clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})]}))

(clojure.core/defn- req-get-model-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :model-id)) #:http.request.field{:name "ModelId", :shape "__string", :location "uri", :location-name "modelId"}) (clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})]}))

(clojure.core/defn- req-update-api-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})]} (clojure.core/contains? input :api-key-selection-expression) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-selection-expression (input :api-key-selection-expression)) #:http.request.field{:name "ApiKeySelectionExpression", :shape "SelectionExpression", :location-name "apiKeySelectionExpression"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-0-and-1024 (input :description)) #:http.request.field{:name "Description", :shape "StringWithLengthBetween0And1024", :location-name "description"})) (clojure.core/contains? input :disable-schema-validation) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :disable-schema-validation)) #:http.request.field{:name "DisableSchemaValidation", :shape "__boolean", :location-name "disableSchemaValidation"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-1-and-128 (input :name)) #:http.request.field{:name "Name", :shape "StringWithLengthBetween1And128", :location-name "name"})) (clojure.core/contains? input :route-selection-expression) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-selection-expression (input :route-selection-expression)) #:http.request.field{:name "RouteSelectionExpression", :shape "SelectionExpression", :location-name "routeSelectionExpression"})) (clojure.core/contains? input :version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-1-and-64 (input :version)) #:http.request.field{:name "Version", :shape "StringWithLengthBetween1And64", :location-name "version"}))))

(clojure.core/defn- req-update-api-mapping-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-mapping-id)) #:http.request.field{:name "ApiMappingId", :shape "__string", :location "uri", :location-name "apiMappingId"}) (clojure.core/into (ser-string (input :domain-name)) #:http.request.field{:name "DomainName", :shape "__string", :location "uri", :location-name "domainName"})], :body [(clojure.core/into (ser-id (input :api-id)) #:http.request.field{:name "ApiId", :shape "Id", :location-name "apiId"})]} (clojure.core/contains? input :api-mapping-key) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-selection-key (input :api-mapping-key)) #:http.request.field{:name "ApiMappingKey", :shape "SelectionKey", :location-name "apiMappingKey"})) (clojure.core/contains? input :stage) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-1-and-128 (input :stage)) #:http.request.field{:name "Stage", :shape "StringWithLengthBetween1And128", :location-name "stage"}))))

(clojure.core/defn- req-create-model-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})], :body [(clojure.core/into (ser-string-with-length-between-0-and-32-k (input :schema)) #:http.request.field{:name "Schema", :shape "StringWithLengthBetween0And32K", :location-name "schema"}) (clojure.core/into (ser-string-with-length-between-1-and-128 (input :name)) #:http.request.field{:name "Name", :shape "StringWithLengthBetween1And128", :location-name "name"})]} (clojure.core/contains? input :content-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-1-and-256 (input :content-type)) #:http.request.field{:name "ContentType", :shape "StringWithLengthBetween1And256", :location-name "contentType"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-0-and-1024 (input :description)) #:http.request.field{:name "Description", :shape "StringWithLengthBetween0And1024", :location-name "description"}))))

(clojure.core/defn- req-delete-model-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :model-id)) #:http.request.field{:name "ModelId", :shape "__string", :location "uri", :location-name "modelId"}) (clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})]}))

(clojure.core/defn- req-get-model-template-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :model-id)) #:http.request.field{:name "ModelId", :shape "__string", :location "uri", :location-name "modelId"}) (clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})]}))

(clojure.core/defn- req-delete-integration-response-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"}) (clojure.core/into (ser-string (input :integration-response-id)) #:http.request.field{:name "IntegrationResponseId", :shape "__string", :location "uri", :location-name "integrationResponseId"}) (clojure.core/into (ser-string (input :integration-id)) #:http.request.field{:name "IntegrationId", :shape "__string", :location "uri", :location-name "integrationId"})]}))

(clojure.core/defn- req-get-authorizers-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "nextToken"}))))

(clojure.core/defn- req-update-domain-name-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :domain-name)) #:http.request.field{:name "DomainName", :shape "__string", :location "uri", :location-name "domainName"})]} (clojure.core/contains? input :domain-name-configurations) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-domain-name-configurations (input :domain-name-configurations)) #:http.request.field{:name "DomainNameConfigurations", :shape "DomainNameConfigurations", :location-name "domainNameConfigurations"}))))

(clojure.core/defn- req-update-integration-response-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"}) (clojure.core/into (ser-string (input :integration-response-id)) #:http.request.field{:name "IntegrationResponseId", :shape "__string", :location "uri", :location-name "integrationResponseId"}) (clojure.core/into (ser-string (input :integration-id)) #:http.request.field{:name "IntegrationId", :shape "__string", :location "uri", :location-name "integrationId"})]} (clojure.core/contains? input :content-handling-strategy) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-content-handling-strategy (input :content-handling-strategy)) #:http.request.field{:name "ContentHandlingStrategy", :shape "ContentHandlingStrategy", :location-name "contentHandlingStrategy"})) (clojure.core/contains? input :integration-response-key) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-selection-key (input :integration-response-key)) #:http.request.field{:name "IntegrationResponseKey", :shape "SelectionKey", :location-name "integrationResponseKey"})) (clojure.core/contains? input :response-parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integration-parameters (input :response-parameters)) #:http.request.field{:name "ResponseParameters", :shape "IntegrationParameters", :location-name "responseParameters"})) (clojure.core/contains? input :response-templates) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-template-map (input :response-templates)) #:http.request.field{:name "ResponseTemplates", :shape "TemplateMap", :location-name "responseTemplates"})) (clojure.core/contains? input :template-selection-expression) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-selection-expression (input :template-selection-expression)) #:http.request.field{:name "TemplateSelectionExpression", :shape "SelectionExpression", :location-name "templateSelectionExpression"}))))

(clojure.core/defn- req-get-domain-name-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :domain-name)) #:http.request.field{:name "DomainName", :shape "__string", :location "uri", :location-name "domainName"})]}))

(clojure.core/defn- req-create-deployment-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})]} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-0-and-1024 (input :description)) #:http.request.field{:name "Description", :shape "StringWithLengthBetween0And1024", :location-name "description"})) (clojure.core/contains? input :stage-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-1-and-128 (input :stage-name)) #:http.request.field{:name "StageName", :shape "StringWithLengthBetween1And128", :location-name "stageName"}))))

(clojure.core/defn- req-get-integrations-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "nextToken"}))))

(clojure.core/defn- req-get-deployment-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"}) (clojure.core/into (ser-string (input :deployment-id)) #:http.request.field{:name "DeploymentId", :shape "__string", :location "uri", :location-name "deploymentId"})]}))

(clojure.core/defn- req-delete-route-response-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :route-response-id)) #:http.request.field{:name "RouteResponseId", :shape "__string", :location "uri", :location-name "routeResponseId"}) (clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"}) (clojure.core/into (ser-string (input :route-id)) #:http.request.field{:name "RouteId", :shape "__string", :location "uri", :location-name "routeId"})]}))

(clojure.core/defn- req-delete-route-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"}) (clojure.core/into (ser-string (input :route-id)) #:http.request.field{:name "RouteId", :shape "__string", :location "uri", :location-name "routeId"})]}))

(clojure.core/defn- req-update-model-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :model-id)) #:http.request.field{:name "ModelId", :shape "__string", :location "uri", :location-name "modelId"}) (clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})]} (clojure.core/contains? input :content-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-1-and-256 (input :content-type)) #:http.request.field{:name "ContentType", :shape "StringWithLengthBetween1And256", :location-name "contentType"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-0-and-1024 (input :description)) #:http.request.field{:name "Description", :shape "StringWithLengthBetween0And1024", :location-name "description"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-1-and-128 (input :name)) #:http.request.field{:name "Name", :shape "StringWithLengthBetween1And128", :location-name "name"})) (clojure.core/contains? input :schema) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-0-and-32-k (input :schema)) #:http.request.field{:name "Schema", :shape "StringWithLengthBetween0And32K", :location-name "schema"}))))

(clojure.core/defn- req-get-stage-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :stage-name)) #:http.request.field{:name "StageName", :shape "__string", :location "uri", :location-name "stageName"}) (clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})]}))

(clojure.core/defn- req-update-route-response-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :route-response-id)) #:http.request.field{:name "RouteResponseId", :shape "__string", :location "uri", :location-name "routeResponseId"}) (clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"}) (clojure.core/into (ser-string (input :route-id)) #:http.request.field{:name "RouteId", :shape "__string", :location "uri", :location-name "routeId"})]} (clojure.core/contains? input :model-selection-expression) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-selection-expression (input :model-selection-expression)) #:http.request.field{:name "ModelSelectionExpression", :shape "SelectionExpression", :location-name "modelSelectionExpression"})) (clojure.core/contains? input :response-models) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-route-models (input :response-models)) #:http.request.field{:name "ResponseModels", :shape "RouteModels", :location-name "responseModels"})) (clojure.core/contains? input :response-parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-route-parameters (input :response-parameters)) #:http.request.field{:name "ResponseParameters", :shape "RouteParameters", :location-name "responseParameters"})) (clojure.core/contains? input :route-response-key) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-selection-key (input :route-response-key)) #:http.request.field{:name "RouteResponseKey", :shape "SelectionKey", :location-name "routeResponseKey"}))))

(clojure.core/defn- req-create-authorizer-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})], :body [(clojure.core/into (ser-uri-with-length-between-1-and-2048 (input :authorizer-uri)) #:http.request.field{:name "AuthorizerUri", :shape "UriWithLengthBetween1And2048", :location-name "authorizerUri"}) (clojure.core/into (ser-authorizer-type (input :authorizer-type)) #:http.request.field{:name "AuthorizerType", :shape "AuthorizerType", :location-name "authorizerType"}) (clojure.core/into (ser-identity-source-list (input :identity-source)) #:http.request.field{:name "IdentitySource", :shape "IdentitySourceList", :location-name "identitySource"}) (clojure.core/into (ser-string-with-length-between-1-and-128 (input :name)) #:http.request.field{:name "Name", :shape "StringWithLengthBetween1And128", :location-name "name"})]} (clojure.core/contains? input :authorizer-credentials-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-arn (input :authorizer-credentials-arn)) #:http.request.field{:name "AuthorizerCredentialsArn", :shape "Arn", :location-name "authorizerCredentialsArn"})) (clojure.core/contains? input :identity-validation-expression) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-0-and-1024 (input :identity-validation-expression)) #:http.request.field{:name "IdentityValidationExpression", :shape "StringWithLengthBetween0And1024", :location-name "identityValidationExpression"})) (clojure.core/contains? input :provider-arns) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-provider-arn-list (input :provider-arns)) #:http.request.field{:name "ProviderArns", :shape "ProviderArnList", :location-name "providerArns"})) (clojure.core/contains? input :authorizer-result-ttl-in-seconds) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-with-length-between-0-and-3600 (input :authorizer-result-ttl-in-seconds)) #:http.request.field{:name "AuthorizerResultTtlInSeconds", :shape "IntegerWithLengthBetween0And3600", :location-name "authorizerResultTtlInSeconds"}))))

(clojure.core/defn- req-get-domain-names-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "nextToken"}))))

(clojure.core/defn- req-create-stage-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})], :body [(clojure.core/into (ser-string-with-length-between-1-and-128 (input :stage-name)) #:http.request.field{:name "StageName", :shape "StringWithLengthBetween1And128", :location-name "stageName"})]} (clojure.core/contains? input :client-certificate-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-id (input :client-certificate-id)) #:http.request.field{:name "ClientCertificateId", :shape "Id", :location-name "clientCertificateId"})) (clojure.core/contains? input :route-settings) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-route-settings-map (input :route-settings)) #:http.request.field{:name "RouteSettings", :shape "RouteSettingsMap", :location-name "routeSettings"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-0-and-1024 (input :description)) #:http.request.field{:name "Description", :shape "StringWithLengthBetween0And1024", :location-name "description"})) (clojure.core/contains? input :deployment-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-id (input :deployment-id)) #:http.request.field{:name "DeploymentId", :shape "Id", :location-name "deploymentId"})) (clojure.core/contains? input :access-log-settings) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-access-log-settings (input :access-log-settings)) #:http.request.field{:name "AccessLogSettings", :shape "AccessLogSettings", :location-name "accessLogSettings"})) (clojure.core/contains? input :default-route-settings) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-route-settings (input :default-route-settings)) #:http.request.field{:name "DefaultRouteSettings", :shape "RouteSettings", :location-name "defaultRouteSettings"})) (clojure.core/contains? input :stage-variables) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-stage-variables-map (input :stage-variables)) #:http.request.field{:name "StageVariables", :shape "StageVariablesMap", :location-name "stageVariables"}))))

(clojure.core/defn- req-get-models-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "nextToken"}))))

(clojure.core/defn- req-get-deployments-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "nextToken"}))))

(clojure.core/defn- req-delete-integration-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"}) (clojure.core/into (ser-string (input :integration-id)) #:http.request.field{:name "IntegrationId", :shape "__string", :location "uri", :location-name "integrationId"})]}))

(clojure.core/defn- req-get-integration-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"}) (clojure.core/into (ser-string (input :integration-id)) #:http.request.field{:name "IntegrationId", :shape "__string", :location "uri", :location-name "integrationId"})]}))

(clojure.core/defn- req-get-route-responses-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :route-id)) #:http.request.field{:name "RouteId", :shape "__string", :location "uri", :location-name "routeId"}) (clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "nextToken"}))))

(clojure.core/defn- req-create-domain-name-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string-with-length-between-1-and-512 (input :domain-name)) #:http.request.field{:name "DomainName", :shape "StringWithLengthBetween1And512", :location-name "domainName"})]} (clojure.core/contains? input :domain-name-configurations) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-domain-name-configurations (input :domain-name-configurations)) #:http.request.field{:name "DomainNameConfigurations", :shape "DomainNameConfigurations", :location-name "domainNameConfigurations"}))))

(clojure.core/defn- req-get-routes-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-results)) #:http.request.field{:name "MaxResults", :shape "__string", :location "querystring", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "__string", :location "querystring", :location-name "nextToken"}))))

(clojure.core/defn- req-delete-deployment-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"}) (clojure.core/into (ser-string (input :deployment-id)) #:http.request.field{:name "DeploymentId", :shape "__string", :location "uri", :location-name "deploymentId"})]}))

(clojure.core/defn- req-create-integration-response-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"}) (clojure.core/into (ser-string (input :integration-id)) #:http.request.field{:name "IntegrationId", :shape "__string", :location "uri", :location-name "integrationId"})], :body [(clojure.core/into (ser-selection-key (input :integration-response-key)) #:http.request.field{:name "IntegrationResponseKey", :shape "SelectionKey", :location-name "integrationResponseKey"})]} (clojure.core/contains? input :content-handling-strategy) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-content-handling-strategy (input :content-handling-strategy)) #:http.request.field{:name "ContentHandlingStrategy", :shape "ContentHandlingStrategy", :location-name "contentHandlingStrategy"})) (clojure.core/contains? input :response-parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integration-parameters (input :response-parameters)) #:http.request.field{:name "ResponseParameters", :shape "IntegrationParameters", :location-name "responseParameters"})) (clojure.core/contains? input :response-templates) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-template-map (input :response-templates)) #:http.request.field{:name "ResponseTemplates", :shape "TemplateMap", :location-name "responseTemplates"})) (clojure.core/contains? input :template-selection-expression) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-selection-expression (input :template-selection-expression)) #:http.request.field{:name "TemplateSelectionExpression", :shape "SelectionExpression", :location-name "templateSelectionExpression"}))))

(clojure.core/defn- req-get-api-mapping-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-mapping-id)) #:http.request.field{:name "ApiMappingId", :shape "__string", :location "uri", :location-name "apiMappingId"}) (clojure.core/into (ser-string (input :domain-name)) #:http.request.field{:name "DomainName", :shape "__string", :location "uri", :location-name "domainName"})]}))

(clojure.core/defn- req-update-integration-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"}) (clojure.core/into (ser-string (input :integration-id)) #:http.request.field{:name "IntegrationId", :shape "__string", :location "uri", :location-name "integrationId"})]} (clojure.core/contains? input :timeout-in-millis) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-with-length-between-50-and-29000 (input :timeout-in-millis)) #:http.request.field{:name "TimeoutInMillis", :shape "IntegerWithLengthBetween50And29000", :location-name "timeoutInMillis"})) (clojure.core/contains? input :request-templates) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-template-map (input :request-templates)) #:http.request.field{:name "RequestTemplates", :shape "TemplateMap", :location-name "requestTemplates"})) (clojure.core/contains? input :connection-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-1-and-1024 (input :connection-id)) #:http.request.field{:name "ConnectionId", :shape "StringWithLengthBetween1And1024", :location-name "connectionId"})) (clojure.core/contains? input :request-parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integration-parameters (input :request-parameters)) #:http.request.field{:name "RequestParameters", :shape "IntegrationParameters", :location-name "requestParameters"})) (clojure.core/contains? input :integration-method) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-1-and-64 (input :integration-method)) #:http.request.field{:name "IntegrationMethod", :shape "StringWithLengthBetween1And64", :location-name "integrationMethod"})) (clojure.core/contains? input :passthrough-behavior) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-passthrough-behavior (input :passthrough-behavior)) #:http.request.field{:name "PassthroughBehavior", :shape "PassthroughBehavior", :location-name "passthroughBehavior"})) (clojure.core/contains? input :credentials-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-arn (input :credentials-arn)) #:http.request.field{:name "CredentialsArn", :shape "Arn", :location-name "credentialsArn"})) (clojure.core/contains? input :integration-uri) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-uri-with-length-between-1-and-2048 (input :integration-uri)) #:http.request.field{:name "IntegrationUri", :shape "UriWithLengthBetween1And2048", :location-name "integrationUri"})) (clojure.core/contains? input :integration-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integration-type (input :integration-type)) #:http.request.field{:name "IntegrationType", :shape "IntegrationType", :location-name "integrationType"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-0-and-1024 (input :description)) #:http.request.field{:name "Description", :shape "StringWithLengthBetween0And1024", :location-name "description"})) (clojure.core/contains? input :connection-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-connection-type (input :connection-type)) #:http.request.field{:name "ConnectionType", :shape "ConnectionType", :location-name "connectionType"})) (clojure.core/contains? input :template-selection-expression) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-selection-expression (input :template-selection-expression)) #:http.request.field{:name "TemplateSelectionExpression", :shape "SelectionExpression", :location-name "templateSelectionExpression"})) (clojure.core/contains? input :content-handling-strategy) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-content-handling-strategy (input :content-handling-strategy)) #:http.request.field{:name "ContentHandlingStrategy", :shape "ContentHandlingStrategy", :location-name "contentHandlingStrategy"}))))

(clojure.core/defn- req-create-route-response-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"}) (clojure.core/into (ser-string (input :route-id)) #:http.request.field{:name "RouteId", :shape "__string", :location "uri", :location-name "routeId"})], :body [(clojure.core/into (ser-selection-key (input :route-response-key)) #:http.request.field{:name "RouteResponseKey", :shape "SelectionKey", :location-name "routeResponseKey"})]} (clojure.core/contains? input :model-selection-expression) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-selection-expression (input :model-selection-expression)) #:http.request.field{:name "ModelSelectionExpression", :shape "SelectionExpression", :location-name "modelSelectionExpression"})) (clojure.core/contains? input :response-models) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-route-models (input :response-models)) #:http.request.field{:name "ResponseModels", :shape "RouteModels", :location-name "responseModels"})) (clojure.core/contains? input :response-parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-route-parameters (input :response-parameters)) #:http.request.field{:name "ResponseParameters", :shape "RouteParameters", :location-name "responseParameters"}))))

(clojure.core/defn- req-delete-authorizer-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :authorizer-id)) #:http.request.field{:name "AuthorizerId", :shape "__string", :location "uri", :location-name "authorizerId"}) (clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})]}))

(clojure.core/defn- req-update-authorizer-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :authorizer-id)) #:http.request.field{:name "AuthorizerId", :shape "__string", :location "uri", :location-name "authorizerId"}) (clojure.core/into (ser-string (input :api-id)) #:http.request.field{:name "ApiId", :shape "__string", :location "uri", :location-name "apiId"})]} (clojure.core/contains? input :authorizer-credentials-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-arn (input :authorizer-credentials-arn)) #:http.request.field{:name "AuthorizerCredentialsArn", :shape "Arn", :location-name "authorizerCredentialsArn"})) (clojure.core/contains? input :identity-validation-expression) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-0-and-1024 (input :identity-validation-expression)) #:http.request.field{:name "IdentityValidationExpression", :shape "StringWithLengthBetween0And1024", :location-name "identityValidationExpression"})) (clojure.core/contains? input :identity-source) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-identity-source-list (input :identity-source)) #:http.request.field{:name "IdentitySource", :shape "IdentitySourceList", :location-name "identitySource"})) (clojure.core/contains? input :authorizer-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-authorizer-type (input :authorizer-type)) #:http.request.field{:name "AuthorizerType", :shape "AuthorizerType", :location-name "authorizerType"})) (clojure.core/contains? input :provider-arns) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-provider-arn-list (input :provider-arns)) #:http.request.field{:name "ProviderArns", :shape "ProviderArnList", :location-name "providerArns"})) (clojure.core/contains? input :authorizer-result-ttl-in-seconds) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-with-length-between-0-and-3600 (input :authorizer-result-ttl-in-seconds)) #:http.request.field{:name "AuthorizerResultTtlInSeconds", :shape "IntegerWithLengthBetween0And3600", :location-name "authorizerResultTtlInSeconds"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-with-length-between-1-and-128 (input :name)) #:http.request.field{:name "Name", :shape "StringWithLengthBetween1And128", :location-name "name"})) (clojure.core/contains? input :authorizer-uri) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-uri-with-length-between-1-and-2048 (input :authorizer-uri)) #:http.request.field{:name "AuthorizerUri", :shape "UriWithLengthBetween1And2048", :location-name "authorizerUri"}))))

(clojure.core/defn- req-create-api-mapping-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :domain-name)) #:http.request.field{:name "DomainName", :shape "__string", :location "uri", :location-name "domainName"})], :body [(clojure.core/into (ser-string-with-length-between-1-and-128 (input :stage)) #:http.request.field{:name "Stage", :shape "StringWithLengthBetween1And128", :location-name "stage"}) (clojure.core/into (ser-id (input :api-id)) #:http.request.field{:name "ApiId", :shape "Id", :location-name "apiId"})]} (clojure.core/contains? input :api-mapping-key) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-selection-key (input :api-mapping-key)) #:http.request.field{:name "ApiMappingKey", :shape "SelectionKey", :location-name "apiMappingKey"}))))

(clojure.core/declare deser-string-with-length-between-1-and-512)

(clojure.core/declare deser-route)

(clojure.core/declare deser-api)

(clojure.core/declare deser-route-settings-map)

(clojure.core/declare deser-deployment)

(clojure.core/declare deser-domain-name-configuration)

(clojure.core/declare deser-list-of-integration-response)

(clojure.core/declare deser-string-with-length-between-0-and-32-k)

(clojure.core/declare deser-list-of-deployment)

(clojure.core/declare deser-uri-with-length-between-1-and-2048)

(clojure.core/declare deser-endpoint-type)

(clojure.core/declare deser-api-mapping)

(clojure.core/declare deser-string)

(clojure.core/declare deser-passthrough-behavior)

(clojure.core/declare deser-route-settings)

(clojure.core/declare deser-integer-with-length-between-50-and-29000)

(clojure.core/declare deser-protocol-type)

(clojure.core/declare deser-identity-source-list)

(clojure.core/declare deser-stage-variables-map)

(clojure.core/declare deser-next-token)

(clojure.core/declare deser-selection-expression)

(clojure.core/declare deser-provider-arn-list)

(clojure.core/declare deser-list-of-api)

(clojure.core/declare deser-integration-type)

(clojure.core/declare deser-model)

(clojure.core/declare deser-authorizer-type)

(clojure.core/declare deser-list-of-stage)

(clojure.core/declare deser-list-of-string)

(clojure.core/declare deser-boolean)

(clojure.core/declare deser-string-with-length-between-1-and-256)

(clojure.core/declare deser-integer-with-length-between-0-and-3600)

(clojure.core/declare deser-access-log-settings)

(clojure.core/declare deser-authorization-type)

(clojure.core/declare deser-template-map)

(clojure.core/declare deser-domain-name-configurations)

(clojure.core/declare deser-route-models)

(clojure.core/declare deser-route-parameters)

(clojure.core/declare deser-connection-type)

(clojure.core/declare deser-authorization-scopes)

(clojure.core/declare deser-selection-key)

(clojure.core/declare deser-arn)

(clojure.core/declare deser-integration-parameters)

(clojure.core/declare deser-list-of-model)

(clojure.core/declare deser-list-of-route-response)

(clojure.core/declare deser-timestamp-iso-8601)

(clojure.core/declare deser-double)

(clojure.core/declare deser-list-of-route)

(clojure.core/declare deser-deployment-status)

(clojure.core/declare deser-list-of-integration)

(clojure.core/declare deser-integer)

(clojure.core/declare deser-domain-name)

(clojure.core/declare deser-string-with-length-between-1-and-1024)

(clojure.core/declare deser-list-of-authorizer)

(clojure.core/declare deser-logging-level)

(clojure.core/declare deser-integration)

(clojure.core/declare deser-string-with-length-between-0-and-1024)

(clojure.core/declare deser-integration-response)

(clojure.core/declare deser-string-with-length-between-0-and-2048)

(clojure.core/declare deser-string-with-length-between-1-and-64)

(clojure.core/declare deser-list-of-api-mapping)

(clojure.core/declare deser-stage)

(clojure.core/declare deser-id)

(clojure.core/declare deser-list-of-domain-name)

(clojure.core/declare deser-content-handling-strategy)

(clojure.core/declare deser-parameter-constraints)

(clojure.core/declare deser-route-response)

(clojure.core/declare deser-authorizer)

(clojure.core/declare deser-string-with-length-between-1-and-128)

(clojure.core/defn- deser-string-with-length-between-1-and-512 [input] input)

(clojure.core/defn- deser-route [input] (clojure.core/cond-> {:route-key (deser-selection-key (input "routeKey"))} (clojure.core/contains? input "apiKeyRequired") (clojure.core/assoc :api-key-required (deser-boolean (input "apiKeyRequired"))) (clojure.core/contains? input "operationName") (clojure.core/assoc :operation-name (deser-string-with-length-between-1-and-64 (input "operationName"))) (clojure.core/contains? input "requestModels") (clojure.core/assoc :request-models (deser-route-models (input "requestModels"))) (clojure.core/contains? input "requestParameters") (clojure.core/assoc :request-parameters (deser-route-parameters (input "requestParameters"))) (clojure.core/contains? input "authorizerId") (clojure.core/assoc :authorizer-id (deser-id (input "authorizerId"))) (clojure.core/contains? input "modelSelectionExpression") (clojure.core/assoc :model-selection-expression (deser-selection-expression (input "modelSelectionExpression"))) (clojure.core/contains? input "authorizationType") (clojure.core/assoc :authorization-type (deser-authorization-type (input "authorizationType"))) (clojure.core/contains? input "authorizationScopes") (clojure.core/assoc :authorization-scopes (deser-authorization-scopes (input "authorizationScopes"))) (clojure.core/contains? input "routeResponseSelectionExpression") (clojure.core/assoc :route-response-selection-expression (deser-selection-expression (input "routeResponseSelectionExpression"))) (clojure.core/contains? input "target") (clojure.core/assoc :target (deser-string-with-length-between-1-and-128 (input "target"))) (clojure.core/contains? input "routeId") (clojure.core/assoc :route-id (deser-id (input "routeId")))))

(clojure.core/defn- deser-api [input] (clojure.core/cond-> {:route-selection-expression (deser-selection-expression (input "routeSelectionExpression")), :protocol-type (deser-protocol-type (input "protocolType")), :name (deser-string-with-length-between-1-and-128 (input "name"))} (clojure.core/contains? input "warnings") (clojure.core/assoc :warnings (deser-list-of-string (input "warnings"))) (clojure.core/contains? input "disableSchemaValidation") (clojure.core/assoc :disable-schema-validation (deser-boolean (input "disableSchemaValidation"))) (clojure.core/contains? input "description") (clojure.core/assoc :description (deser-string-with-length-between-0-and-1024 (input "description"))) (clojure.core/contains? input "createdDate") (clojure.core/assoc :created-date (deser-timestamp-iso-8601 (input "createdDate"))) (clojure.core/contains? input "apiEndpoint") (clojure.core/assoc :api-endpoint (deser-string (input "apiEndpoint"))) (clojure.core/contains? input "version") (clojure.core/assoc :version (deser-string-with-length-between-1-and-64 (input "version"))) (clojure.core/contains? input "apiId") (clojure.core/assoc :api-id (deser-id (input "apiId"))) (clojure.core/contains? input "apiKeySelectionExpression") (clojure.core/assoc :api-key-selection-expression (deser-selection-expression (input "apiKeySelectionExpression")))))

(clojure.core/defn- deser-route-settings-map [input] (clojure.core/into {} (clojure.core/map (clojure.core/fn [[k v]] [(deser-string k) (deser-route-settings v)])) input))

(clojure.core/defn- deser-deployment [input] (clojure.core/cond-> {} (clojure.core/contains? input "createdDate") (clojure.core/assoc :created-date (deser-timestamp-iso-8601 (input "createdDate"))) (clojure.core/contains? input "deploymentId") (clojure.core/assoc :deployment-id (deser-id (input "deploymentId"))) (clojure.core/contains? input "deploymentStatus") (clojure.core/assoc :deployment-status (deser-deployment-status (input "deploymentStatus"))) (clojure.core/contains? input "deploymentStatusMessage") (clojure.core/assoc :deployment-status-message (deser-string (input "deploymentStatusMessage"))) (clojure.core/contains? input "description") (clojure.core/assoc :description (deser-string-with-length-between-0-and-1024 (input "description")))))

(clojure.core/defn- deser-domain-name-configuration [input] (clojure.core/cond-> {} (clojure.core/contains? input "apiGatewayDomainName") (clojure.core/assoc :api-gateway-domain-name (deser-string (input "apiGatewayDomainName"))) (clojure.core/contains? input "certificateArn") (clojure.core/assoc :certificate-arn (deser-arn (input "certificateArn"))) (clojure.core/contains? input "certificateName") (clojure.core/assoc :certificate-name (deser-string-with-length-between-1-and-128 (input "certificateName"))) (clojure.core/contains? input "certificateUploadDate") (clojure.core/assoc :certificate-upload-date (deser-timestamp-iso-8601 (input "certificateUploadDate"))) (clojure.core/contains? input "endpointType") (clojure.core/assoc :endpoint-type (deser-endpoint-type (input "endpointType"))) (clojure.core/contains? input "hostedZoneId") (clojure.core/assoc :hosted-zone-id (deser-string (input "hostedZoneId")))))

(clojure.core/defn- deser-list-of-integration-response [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-integration-response coll))) input))

(clojure.core/defn- deser-string-with-length-between-0-and-32-k [input] input)

(clojure.core/defn- deser-list-of-deployment [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-deployment coll))) input))

(clojure.core/defn- deser-uri-with-length-between-1-and-2048 [input] input)

(clojure.core/defn- deser-endpoint-type [input] (clojure.core/get {"REGIONAL" :regional, "EDGE" :edge} input))

(clojure.core/defn- deser-api-mapping [input] (clojure.core/cond-> {:stage (deser-string-with-length-between-1-and-128 (input "stage")), :api-id (deser-id (input "apiId"))} (clojure.core/contains? input "apiMappingId") (clojure.core/assoc :api-mapping-id (deser-id (input "apiMappingId"))) (clojure.core/contains? input "apiMappingKey") (clojure.core/assoc :api-mapping-key (deser-selection-key (input "apiMappingKey")))))

(clojure.core/defn- deser-string [input] input)

(clojure.core/defn- deser-passthrough-behavior [input] (clojure.core/get {"WHEN_NO_MATCH" :when-no-match, "NEVER" :never, "WHEN_NO_TEMPLATES" :when-no-templates} input))

(clojure.core/defn- deser-route-settings [input] (clojure.core/cond-> {} (clojure.core/contains? input "dataTraceEnabled") (clojure.core/assoc :data-trace-enabled (deser-boolean (input "dataTraceEnabled"))) (clojure.core/contains? input "detailedMetricsEnabled") (clojure.core/assoc :detailed-metrics-enabled (deser-boolean (input "detailedMetricsEnabled"))) (clojure.core/contains? input "loggingLevel") (clojure.core/assoc :logging-level (deser-logging-level (input "loggingLevel"))) (clojure.core/contains? input "throttlingBurstLimit") (clojure.core/assoc :throttling-burst-limit (deser-integer (input "throttlingBurstLimit"))) (clojure.core/contains? input "throttlingRateLimit") (clojure.core/assoc :throttling-rate-limit (deser-double (input "throttlingRateLimit")))))

(clojure.core/defn- deser-integer-with-length-between-50-and-29000 [input] input)

(clojure.core/defn- deser-protocol-type [input] (clojure.core/get {"WEBSOCKET" :websocket} input))

(clojure.core/defn- deser-identity-source-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-stage-variables-map [input] (clojure.core/into {} (clojure.core/map (clojure.core/fn [[k v]] [(deser-string k) (deser-string-with-length-between-0-and-2048 v)])) input))

(clojure.core/defn- deser-next-token [input] input)

(clojure.core/defn- deser-selection-expression [input] input)

(clojure.core/defn- deser-provider-arn-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-arn coll))) input))

(clojure.core/defn- deser-list-of-api [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-api coll))) input))

(clojure.core/defn- deser-integration-type [input] (clojure.core/get {"AWS" :aws, "HTTP" :http, "MOCK" :mock, "HTTP_PROXY" :http-proxy, "AWS_PROXY" :aws-proxy} input))

(clojure.core/defn- deser-model [input] (clojure.core/cond-> {:name (deser-string-with-length-between-1-and-128 (input "name"))} (clojure.core/contains? input "contentType") (clojure.core/assoc :content-type (deser-string-with-length-between-1-and-256 (input "contentType"))) (clojure.core/contains? input "description") (clojure.core/assoc :description (deser-string-with-length-between-0-and-1024 (input "description"))) (clojure.core/contains? input "modelId") (clojure.core/assoc :model-id (deser-id (input "modelId"))) (clojure.core/contains? input "schema") (clojure.core/assoc :schema (deser-string-with-length-between-0-and-32-k (input "schema")))))

(clojure.core/defn- deser-authorizer-type [input] (clojure.core/get {"REQUEST" :request} input))

(clojure.core/defn- deser-list-of-stage [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-stage coll))) input))

(clojure.core/defn- deser-list-of-string [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-boolean [input] input)

(clojure.core/defn- deser-string-with-length-between-1-and-256 [input] input)

(clojure.core/defn- deser-integer-with-length-between-0-and-3600 [input] input)

(clojure.core/defn- deser-access-log-settings [input] (clojure.core/cond-> {} (clojure.core/contains? input "destinationArn") (clojure.core/assoc :destination-arn (deser-arn (input "destinationArn"))) (clojure.core/contains? input "format") (clojure.core/assoc :format (deser-string-with-length-between-1-and-1024 (input "format")))))

(clojure.core/defn- deser-authorization-type [input] (clojure.core/get {"NONE" :none, "AWS_IAM" :aws-iam, "CUSTOM" :custom} input))

(clojure.core/defn- deser-template-map [input] (clojure.core/into {} (clojure.core/map (clojure.core/fn [[k v]] [(deser-string k) (deser-string-with-length-between-0-and-32-k v)])) input))

(clojure.core/defn- deser-domain-name-configurations [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-domain-name-configuration coll))) input))

(clojure.core/defn- deser-route-models [input] (clojure.core/into {} (clojure.core/map (clojure.core/fn [[k v]] [(deser-string k) (deser-string-with-length-between-1-and-128 v)])) input))

(clojure.core/defn- deser-route-parameters [input] (clojure.core/into {} (clojure.core/map (clojure.core/fn [[k v]] [(deser-string k) (deser-parameter-constraints v)])) input))

(clojure.core/defn- deser-connection-type [input] (clojure.core/get {"INTERNET" :internet, "VPC_LINK" :vpc-link} input))

(clojure.core/defn- deser-authorization-scopes [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string-with-length-between-1-and-64 coll))) input))

(clojure.core/defn- deser-selection-key [input] input)

(clojure.core/defn- deser-arn [input] input)

(clojure.core/defn- deser-integration-parameters [input] (clojure.core/into {} (clojure.core/map (clojure.core/fn [[k v]] [(deser-string k) (deser-string-with-length-between-1-and-512 v)])) input))

(clojure.core/defn- deser-list-of-model [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-model coll))) input))

(clojure.core/defn- deser-list-of-route-response [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-route-response coll))) input))

(clojure.core/defn- deser-timestamp-iso-8601 [input] input)

(clojure.core/defn- deser-double [input] input)

(clojure.core/defn- deser-list-of-route [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-route coll))) input))

(clojure.core/defn- deser-deployment-status [input] (clojure.core/get {"PENDING" :pending, "FAILED" :failed, "DEPLOYED" :deployed} input))

(clojure.core/defn- deser-list-of-integration [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-integration coll))) input))

(clojure.core/defn- deser-integer [input] input)

(clojure.core/defn- deser-domain-name [input] (clojure.core/cond-> {:domain-name (deser-string-with-length-between-1-and-512 (input "domainName"))} (clojure.core/contains? input "apiMappingSelectionExpression") (clojure.core/assoc :api-mapping-selection-expression (deser-selection-expression (input "apiMappingSelectionExpression"))) (clojure.core/contains? input "domainNameConfigurations") (clojure.core/assoc :domain-name-configurations (deser-domain-name-configurations (input "domainNameConfigurations")))))

(clojure.core/defn- deser-string-with-length-between-1-and-1024 [input] input)

(clojure.core/defn- deser-list-of-authorizer [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-authorizer coll))) input))

(clojure.core/defn- deser-logging-level [input] (clojure.core/get {"ERROR" :error, "INFO" :info, "false" :false} input))

(clojure.core/defn- deser-integration [input] (clojure.core/cond-> {} (clojure.core/contains? input "timeoutInMillis") (clojure.core/assoc :timeout-in-millis (deser-integer-with-length-between-50-and-29000 (input "timeoutInMillis"))) (clojure.core/contains? input "requestTemplates") (clojure.core/assoc :request-templates (deser-template-map (input "requestTemplates"))) (clojure.core/contains? input "connectionId") (clojure.core/assoc :connection-id (deser-string-with-length-between-1-and-1024 (input "connectionId"))) (clojure.core/contains? input "requestParameters") (clojure.core/assoc :request-parameters (deser-integration-parameters (input "requestParameters"))) (clojure.core/contains? input "integrationMethod") (clojure.core/assoc :integration-method (deser-string-with-length-between-1-and-64 (input "integrationMethod"))) (clojure.core/contains? input "integrationResponseSelectionExpression") (clojure.core/assoc :integration-response-selection-expression (deser-selection-expression (input "integrationResponseSelectionExpression"))) (clojure.core/contains? input "passthroughBehavior") (clojure.core/assoc :passthrough-behavior (deser-passthrough-behavior (input "passthroughBehavior"))) (clojure.core/contains? input "credentialsArn") (clojure.core/assoc :credentials-arn (deser-arn (input "credentialsArn"))) (clojure.core/contains? input "integrationId") (clojure.core/assoc :integration-id (deser-id (input "integrationId"))) (clojure.core/contains? input "integrationUri") (clojure.core/assoc :integration-uri (deser-uri-with-length-between-1-and-2048 (input "integrationUri"))) (clojure.core/contains? input "integrationType") (clojure.core/assoc :integration-type (deser-integration-type (input "integrationType"))) (clojure.core/contains? input "description") (clojure.core/assoc :description (deser-string-with-length-between-0-and-1024 (input "description"))) (clojure.core/contains? input "connectionType") (clojure.core/assoc :connection-type (deser-connection-type (input "connectionType"))) (clojure.core/contains? input "templateSelectionExpression") (clojure.core/assoc :template-selection-expression (deser-selection-expression (input "templateSelectionExpression"))) (clojure.core/contains? input "contentHandlingStrategy") (clojure.core/assoc :content-handling-strategy (deser-content-handling-strategy (input "contentHandlingStrategy")))))

(clojure.core/defn- deser-string-with-length-between-0-and-1024 [input] input)

(clojure.core/defn- deser-integration-response [input] (clojure.core/cond-> {:integration-response-key (deser-selection-key (input "integrationResponseKey"))} (clojure.core/contains? input "contentHandlingStrategy") (clojure.core/assoc :content-handling-strategy (deser-content-handling-strategy (input "contentHandlingStrategy"))) (clojure.core/contains? input "integrationResponseId") (clojure.core/assoc :integration-response-id (deser-id (input "integrationResponseId"))) (clojure.core/contains? input "responseParameters") (clojure.core/assoc :response-parameters (deser-integration-parameters (input "responseParameters"))) (clojure.core/contains? input "responseTemplates") (clojure.core/assoc :response-templates (deser-template-map (input "responseTemplates"))) (clojure.core/contains? input "templateSelectionExpression") (clojure.core/assoc :template-selection-expression (deser-selection-expression (input "templateSelectionExpression")))))

(clojure.core/defn- deser-string-with-length-between-0-and-2048 [input] input)

(clojure.core/defn- deser-string-with-length-between-1-and-64 [input] input)

(clojure.core/defn- deser-list-of-api-mapping [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-api-mapping coll))) input))

(clojure.core/defn- deser-stage [input] (clojure.core/cond-> {:stage-name (deser-string-with-length-between-1-and-128 (input "stageName"))} (clojure.core/contains? input "clientCertificateId") (clojure.core/assoc :client-certificate-id (deser-id (input "clientCertificateId"))) (clojure.core/contains? input "routeSettings") (clojure.core/assoc :route-settings (deser-route-settings-map (input "routeSettings"))) (clojure.core/contains? input "lastUpdatedDate") (clojure.core/assoc :last-updated-date (deser-timestamp-iso-8601 (input "lastUpdatedDate"))) (clojure.core/contains? input "description") (clojure.core/assoc :description (deser-string-with-length-between-0-and-1024 (input "description"))) (clojure.core/contains? input "deploymentId") (clojure.core/assoc :deployment-id (deser-id (input "deploymentId"))) (clojure.core/contains? input "createdDate") (clojure.core/assoc :created-date (deser-timestamp-iso-8601 (input "createdDate"))) (clojure.core/contains? input "accessLogSettings") (clojure.core/assoc :access-log-settings (deser-access-log-settings (input "accessLogSettings"))) (clojure.core/contains? input "defaultRouteSettings") (clojure.core/assoc :default-route-settings (deser-route-settings (input "defaultRouteSettings"))) (clojure.core/contains? input "stageVariables") (clojure.core/assoc :stage-variables (deser-stage-variables-map (input "stageVariables")))))

(clojure.core/defn- deser-id [input] input)

(clojure.core/defn- deser-list-of-domain-name [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-domain-name coll))) input))

(clojure.core/defn- deser-content-handling-strategy [input] (clojure.core/get {"CONVERT_TO_BINARY" :convert-to-binary, "CONVERT_TO_TEXT" :convert-to-text} input))

(clojure.core/defn- deser-parameter-constraints [input] (clojure.core/cond-> {} (clojure.core/contains? input "required") (clojure.core/assoc :required (deser-boolean (input "required")))))

(clojure.core/defn- deser-route-response [input] (clojure.core/cond-> {:route-response-key (deser-selection-key (input "routeResponseKey"))} (clojure.core/contains? input "modelSelectionExpression") (clojure.core/assoc :model-selection-expression (deser-selection-expression (input "modelSelectionExpression"))) (clojure.core/contains? input "responseModels") (clojure.core/assoc :response-models (deser-route-models (input "responseModels"))) (clojure.core/contains? input "responseParameters") (clojure.core/assoc :response-parameters (deser-route-parameters (input "responseParameters"))) (clojure.core/contains? input "routeResponseId") (clojure.core/assoc :route-response-id (deser-id (input "routeResponseId")))))

(clojure.core/defn- deser-authorizer [input] (clojure.core/cond-> {:name (deser-string-with-length-between-1-and-128 (input "name"))} (clojure.core/contains? input "authorizerCredentialsArn") (clojure.core/assoc :authorizer-credentials-arn (deser-arn (input "authorizerCredentialsArn"))) (clojure.core/contains? input "identityValidationExpression") (clojure.core/assoc :identity-validation-expression (deser-string-with-length-between-0-and-1024 (input "identityValidationExpression"))) (clojure.core/contains? input "authorizerId") (clojure.core/assoc :authorizer-id (deser-id (input "authorizerId"))) (clojure.core/contains? input "identitySource") (clojure.core/assoc :identity-source (deser-identity-source-list (input "identitySource"))) (clojure.core/contains? input "authorizerType") (clojure.core/assoc :authorizer-type (deser-authorizer-type (input "authorizerType"))) (clojure.core/contains? input "providerArns") (clojure.core/assoc :provider-arns (deser-provider-arn-list (input "providerArns"))) (clojure.core/contains? input "authorizerResultTtlInSeconds") (clojure.core/assoc :authorizer-result-ttl-in-seconds (deser-integer-with-length-between-0-and-3600 (input "authorizerResultTtlInSeconds"))) (clojure.core/contains? input "authorizerUri") (clojure.core/assoc :authorizer-uri (deser-uri-with-length-between-1-and-2048 (input "authorizerUri")))))

(clojure.core/defn- deser-string-with-length-between-1-and-128 [input] input)

(clojure.core/defn- response-update-route-result ([input] (response-update-route-result nil input)) ([resultWrapper73368 input] (clojure.core/let [rawinput73367 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73369 {"authorizerId" (rawinput73367 "authorizerId"), "routeKey" (rawinput73367 "routeKey"), "routeResponseSelectionExpression" (rawinput73367 "routeResponseSelectionExpression"), "authorizationType" (rawinput73367 "authorizationType"), "operationName" (rawinput73367 "operationName"), "requestParameters" (rawinput73367 "requestParameters"), "routeId" (rawinput73367 "routeId"), "authorizationScopes" (rawinput73367 "authorizationScopes"), "apiKeyRequired" (rawinput73367 "apiKeyRequired"), "target" (rawinput73367 "target"), "requestModels" (rawinput73367 "requestModels"), "modelSelectionExpression" (rawinput73367 "modelSelectionExpression")}] (clojure.core/cond-> {} (letvar73369 "apiKeyRequired") (clojure.core/assoc :api-key-required (deser-boolean (clojure.core/get-in letvar73369 ["apiKeyRequired"]))) (letvar73369 "operationName") (clojure.core/assoc :operation-name (deser-string-with-length-between-1-and-64 (clojure.core/get-in letvar73369 ["operationName"]))) (letvar73369 "requestModels") (clojure.core/assoc :request-models (deser-route-models (clojure.core/get-in letvar73369 ["requestModels"]))) (letvar73369 "requestParameters") (clojure.core/assoc :request-parameters (deser-route-parameters (clojure.core/get-in letvar73369 ["requestParameters"]))) (letvar73369 "authorizerId") (clojure.core/assoc :authorizer-id (deser-id (clojure.core/get-in letvar73369 ["authorizerId"]))) (letvar73369 "routeKey") (clojure.core/assoc :route-key (deser-selection-key (clojure.core/get-in letvar73369 ["routeKey"]))) (letvar73369 "modelSelectionExpression") (clojure.core/assoc :model-selection-expression (deser-selection-expression (clojure.core/get-in letvar73369 ["modelSelectionExpression"]))) (letvar73369 "authorizationType") (clojure.core/assoc :authorization-type (deser-authorization-type (clojure.core/get-in letvar73369 ["authorizationType"]))) (letvar73369 "authorizationScopes") (clojure.core/assoc :authorization-scopes (deser-authorization-scopes (clojure.core/get-in letvar73369 ["authorizationScopes"]))) (letvar73369 "routeResponseSelectionExpression") (clojure.core/assoc :route-response-selection-expression (deser-selection-expression (clojure.core/get-in letvar73369 ["routeResponseSelectionExpression"]))) (letvar73369 "target") (clojure.core/assoc :target (deser-string-with-length-between-1-and-128 (clojure.core/get-in letvar73369 ["target"]))) (letvar73369 "routeId") (clojure.core/assoc :route-id (deser-id (clojure.core/get-in letvar73369 ["routeId"])))))))

(clojure.core/defn- response-get-route-response-response ([input] (response-get-route-response-response nil input)) ([resultWrapper73371 input] (clojure.core/let [rawinput73370 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73372 {"modelSelectionExpression" (rawinput73370 "modelSelectionExpression"), "responseModels" (rawinput73370 "responseModels"), "responseParameters" (rawinput73370 "responseParameters"), "routeResponseId" (rawinput73370 "routeResponseId"), "routeResponseKey" (rawinput73370 "routeResponseKey")}] (clojure.core/cond-> {} (letvar73372 "modelSelectionExpression") (clojure.core/assoc :model-selection-expression (deser-selection-expression (clojure.core/get-in letvar73372 ["modelSelectionExpression"]))) (letvar73372 "responseModels") (clojure.core/assoc :response-models (deser-route-models (clojure.core/get-in letvar73372 ["responseModels"]))) (letvar73372 "responseParameters") (clojure.core/assoc :response-parameters (deser-route-parameters (clojure.core/get-in letvar73372 ["responseParameters"]))) (letvar73372 "routeResponseId") (clojure.core/assoc :route-response-id (deser-id (clojure.core/get-in letvar73372 ["routeResponseId"]))) (letvar73372 "routeResponseKey") (clojure.core/assoc :route-response-key (deser-selection-key (clojure.core/get-in letvar73372 ["routeResponseKey"])))))))

(clojure.core/defn- response-update-api-response ([input] (response-update-api-response nil input)) ([resultWrapper73374 input] (clojure.core/let [rawinput73373 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73375 {"protocolType" (rawinput73373 "protocolType"), "disableSchemaValidation" (rawinput73373 "disableSchemaValidation"), "createdDate" (rawinput73373 "createdDate"), "apiEndpoint" (rawinput73373 "apiEndpoint"), "name" (rawinput73373 "name"), "apiId" (rawinput73373 "apiId"), "apiKeySelectionExpression" (rawinput73373 "apiKeySelectionExpression"), "routeSelectionExpression" (rawinput73373 "routeSelectionExpression"), "version" (rawinput73373 "version"), "warnings" (rawinput73373 "warnings"), "description" (rawinput73373 "description")}] (clojure.core/cond-> {} (letvar73375 "warnings") (clojure.core/assoc :warnings (deser-list-of-string (clojure.core/get-in letvar73375 ["warnings"]))) (letvar73375 "routeSelectionExpression") (clojure.core/assoc :route-selection-expression (deser-selection-expression (clojure.core/get-in letvar73375 ["routeSelectionExpression"]))) (letvar73375 "protocolType") (clojure.core/assoc :protocol-type (deser-protocol-type (clojure.core/get-in letvar73375 ["protocolType"]))) (letvar73375 "disableSchemaValidation") (clojure.core/assoc :disable-schema-validation (deser-boolean (clojure.core/get-in letvar73375 ["disableSchemaValidation"]))) (letvar73375 "description") (clojure.core/assoc :description (deser-string-with-length-between-0-and-1024 (clojure.core/get-in letvar73375 ["description"]))) (letvar73375 "createdDate") (clojure.core/assoc :created-date (deser-timestamp-iso-8601 (clojure.core/get-in letvar73375 ["createdDate"]))) (letvar73375 "apiEndpoint") (clojure.core/assoc :api-endpoint (deser-string (clojure.core/get-in letvar73375 ["apiEndpoint"]))) (letvar73375 "version") (clojure.core/assoc :version (deser-string-with-length-between-1-and-64 (clojure.core/get-in letvar73375 ["version"]))) (letvar73375 "name") (clojure.core/assoc :name (deser-string-with-length-between-1-and-128 (clojure.core/get-in letvar73375 ["name"]))) (letvar73375 "apiId") (clojure.core/assoc :api-id (deser-id (clojure.core/get-in letvar73375 ["apiId"]))) (letvar73375 "apiKeySelectionExpression") (clojure.core/assoc :api-key-selection-expression (deser-selection-expression (clojure.core/get-in letvar73375 ["apiKeySelectionExpression"])))))))

(clojure.core/defn- response-get-route-result ([input] (response-get-route-result nil input)) ([resultWrapper73377 input] (clojure.core/let [rawinput73376 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73378 {"authorizerId" (rawinput73376 "authorizerId"), "routeKey" (rawinput73376 "routeKey"), "routeResponseSelectionExpression" (rawinput73376 "routeResponseSelectionExpression"), "authorizationType" (rawinput73376 "authorizationType"), "operationName" (rawinput73376 "operationName"), "requestParameters" (rawinput73376 "requestParameters"), "routeId" (rawinput73376 "routeId"), "authorizationScopes" (rawinput73376 "authorizationScopes"), "apiKeyRequired" (rawinput73376 "apiKeyRequired"), "target" (rawinput73376 "target"), "requestModels" (rawinput73376 "requestModels"), "modelSelectionExpression" (rawinput73376 "modelSelectionExpression")}] (clojure.core/cond-> {} (letvar73378 "apiKeyRequired") (clojure.core/assoc :api-key-required (deser-boolean (clojure.core/get-in letvar73378 ["apiKeyRequired"]))) (letvar73378 "operationName") (clojure.core/assoc :operation-name (deser-string-with-length-between-1-and-64 (clojure.core/get-in letvar73378 ["operationName"]))) (letvar73378 "requestModels") (clojure.core/assoc :request-models (deser-route-models (clojure.core/get-in letvar73378 ["requestModels"]))) (letvar73378 "requestParameters") (clojure.core/assoc :request-parameters (deser-route-parameters (clojure.core/get-in letvar73378 ["requestParameters"]))) (letvar73378 "authorizerId") (clojure.core/assoc :authorizer-id (deser-id (clojure.core/get-in letvar73378 ["authorizerId"]))) (letvar73378 "routeKey") (clojure.core/assoc :route-key (deser-selection-key (clojure.core/get-in letvar73378 ["routeKey"]))) (letvar73378 "modelSelectionExpression") (clojure.core/assoc :model-selection-expression (deser-selection-expression (clojure.core/get-in letvar73378 ["modelSelectionExpression"]))) (letvar73378 "authorizationType") (clojure.core/assoc :authorization-type (deser-authorization-type (clojure.core/get-in letvar73378 ["authorizationType"]))) (letvar73378 "authorizationScopes") (clojure.core/assoc :authorization-scopes (deser-authorization-scopes (clojure.core/get-in letvar73378 ["authorizationScopes"]))) (letvar73378 "routeResponseSelectionExpression") (clojure.core/assoc :route-response-selection-expression (deser-selection-expression (clojure.core/get-in letvar73378 ["routeResponseSelectionExpression"]))) (letvar73378 "target") (clojure.core/assoc :target (deser-string-with-length-between-1-and-128 (clojure.core/get-in letvar73378 ["target"]))) (letvar73378 "routeId") (clojure.core/assoc :route-id (deser-id (clojure.core/get-in letvar73378 ["routeId"])))))))

(clojure.core/defn- response-create-stage-response ([input] (response-create-stage-response nil input)) ([resultWrapper73380 input] (clojure.core/let [rawinput73379 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73381 {"createdDate" (rawinput73379 "createdDate"), "defaultRouteSettings" (rawinput73379 "defaultRouteSettings"), "accessLogSettings" (rawinput73379 "accessLogSettings"), "routeSettings" (rawinput73379 "routeSettings"), "deploymentId" (rawinput73379 "deploymentId"), "clientCertificateId" (rawinput73379 "clientCertificateId"), "lastUpdatedDate" (rawinput73379 "lastUpdatedDate"), "stageVariables" (rawinput73379 "stageVariables"), "stageName" (rawinput73379 "stageName"), "description" (rawinput73379 "description")}] (clojure.core/cond-> {} (letvar73381 "clientCertificateId") (clojure.core/assoc :client-certificate-id (deser-id (clojure.core/get-in letvar73381 ["clientCertificateId"]))) (letvar73381 "routeSettings") (clojure.core/assoc :route-settings (deser-route-settings-map (clojure.core/get-in letvar73381 ["routeSettings"]))) (letvar73381 "lastUpdatedDate") (clojure.core/assoc :last-updated-date (deser-timestamp-iso-8601 (clojure.core/get-in letvar73381 ["lastUpdatedDate"]))) (letvar73381 "description") (clojure.core/assoc :description (deser-string-with-length-between-0-and-1024 (clojure.core/get-in letvar73381 ["description"]))) (letvar73381 "deploymentId") (clojure.core/assoc :deployment-id (deser-id (clojure.core/get-in letvar73381 ["deploymentId"]))) (letvar73381 "createdDate") (clojure.core/assoc :created-date (deser-timestamp-iso-8601 (clojure.core/get-in letvar73381 ["createdDate"]))) (letvar73381 "accessLogSettings") (clojure.core/assoc :access-log-settings (deser-access-log-settings (clojure.core/get-in letvar73381 ["accessLogSettings"]))) (letvar73381 "defaultRouteSettings") (clojure.core/assoc :default-route-settings (deser-route-settings (clojure.core/get-in letvar73381 ["defaultRouteSettings"]))) (letvar73381 "stageVariables") (clojure.core/assoc :stage-variables (deser-stage-variables-map (clojure.core/get-in letvar73381 ["stageVariables"]))) (letvar73381 "stageName") (clojure.core/assoc :stage-name (deser-string-with-length-between-1-and-128 (clojure.core/get-in letvar73381 ["stageName"])))))))

(clojure.core/defn- response-get-deployments-response ([input] (response-get-deployments-response nil input)) ([resultWrapper73383 input] (clojure.core/let [rawinput73382 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73384 {"items" (rawinput73382 "items"), "nextToken" (rawinput73382 "nextToken")}] (clojure.core/cond-> {} (letvar73384 "items") (clojure.core/assoc :items (deser-list-of-deployment (clojure.core/get-in letvar73384 ["items"]))) (letvar73384 "nextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar73384 ["nextToken"])))))))

(clojure.core/defn- response-get-integrations-response ([input] (response-get-integrations-response nil input)) ([resultWrapper73386 input] (clojure.core/let [rawinput73385 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73387 {"items" (rawinput73385 "items"), "nextToken" (rawinput73385 "nextToken")}] (clojure.core/cond-> {} (letvar73387 "items") (clojure.core/assoc :items (deser-list-of-integration (clojure.core/get-in letvar73387 ["items"]))) (letvar73387 "nextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar73387 ["nextToken"])))))))

(clojure.core/defn- response-bad-request-exception ([input] (response-bad-request-exception nil input)) ([resultWrapper73389 input] (clojure.core/let [rawinput73388 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73390 {"message" (rawinput73388 "message")}] (clojure.core/cond-> {} (letvar73390 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar73390 ["message"])))))))

(clojure.core/defn- response-get-stage-response ([input] (response-get-stage-response nil input)) ([resultWrapper73392 input] (clojure.core/let [rawinput73391 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73393 {"createdDate" (rawinput73391 "createdDate"), "defaultRouteSettings" (rawinput73391 "defaultRouteSettings"), "accessLogSettings" (rawinput73391 "accessLogSettings"), "routeSettings" (rawinput73391 "routeSettings"), "deploymentId" (rawinput73391 "deploymentId"), "clientCertificateId" (rawinput73391 "clientCertificateId"), "lastUpdatedDate" (rawinput73391 "lastUpdatedDate"), "stageVariables" (rawinput73391 "stageVariables"), "stageName" (rawinput73391 "stageName"), "description" (rawinput73391 "description")}] (clojure.core/cond-> {} (letvar73393 "clientCertificateId") (clojure.core/assoc :client-certificate-id (deser-id (clojure.core/get-in letvar73393 ["clientCertificateId"]))) (letvar73393 "routeSettings") (clojure.core/assoc :route-settings (deser-route-settings-map (clojure.core/get-in letvar73393 ["routeSettings"]))) (letvar73393 "lastUpdatedDate") (clojure.core/assoc :last-updated-date (deser-timestamp-iso-8601 (clojure.core/get-in letvar73393 ["lastUpdatedDate"]))) (letvar73393 "description") (clojure.core/assoc :description (deser-string-with-length-between-0-and-1024 (clojure.core/get-in letvar73393 ["description"]))) (letvar73393 "deploymentId") (clojure.core/assoc :deployment-id (deser-id (clojure.core/get-in letvar73393 ["deploymentId"]))) (letvar73393 "createdDate") (clojure.core/assoc :created-date (deser-timestamp-iso-8601 (clojure.core/get-in letvar73393 ["createdDate"]))) (letvar73393 "accessLogSettings") (clojure.core/assoc :access-log-settings (deser-access-log-settings (clojure.core/get-in letvar73393 ["accessLogSettings"]))) (letvar73393 "defaultRouteSettings") (clojure.core/assoc :default-route-settings (deser-route-settings (clojure.core/get-in letvar73393 ["defaultRouteSettings"]))) (letvar73393 "stageVariables") (clojure.core/assoc :stage-variables (deser-stage-variables-map (clojure.core/get-in letvar73393 ["stageVariables"]))) (letvar73393 "stageName") (clojure.core/assoc :stage-name (deser-string-with-length-between-1-and-128 (clojure.core/get-in letvar73393 ["stageName"])))))))

(clojure.core/defn- response-create-model-response ([input] (response-create-model-response nil input)) ([resultWrapper73395 input] (clojure.core/let [rawinput73394 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73396 {"contentType" (rawinput73394 "contentType"), "description" (rawinput73394 "description"), "modelId" (rawinput73394 "modelId"), "name" (rawinput73394 "name"), "schema" (rawinput73394 "schema")}] (clojure.core/cond-> {} (letvar73396 "contentType") (clojure.core/assoc :content-type (deser-string-with-length-between-1-and-256 (clojure.core/get-in letvar73396 ["contentType"]))) (letvar73396 "description") (clojure.core/assoc :description (deser-string-with-length-between-0-and-1024 (clojure.core/get-in letvar73396 ["description"]))) (letvar73396 "modelId") (clojure.core/assoc :model-id (deser-id (clojure.core/get-in letvar73396 ["modelId"]))) (letvar73396 "name") (clojure.core/assoc :name (deser-string-with-length-between-1-and-128 (clojure.core/get-in letvar73396 ["name"]))) (letvar73396 "schema") (clojure.core/assoc :schema (deser-string-with-length-between-0-and-32-k (clojure.core/get-in letvar73396 ["schema"])))))))

(clojure.core/defn- response-create-route-result ([input] (response-create-route-result nil input)) ([resultWrapper73398 input] (clojure.core/let [rawinput73397 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73399 {"authorizerId" (rawinput73397 "authorizerId"), "routeKey" (rawinput73397 "routeKey"), "routeResponseSelectionExpression" (rawinput73397 "routeResponseSelectionExpression"), "authorizationType" (rawinput73397 "authorizationType"), "operationName" (rawinput73397 "operationName"), "requestParameters" (rawinput73397 "requestParameters"), "routeId" (rawinput73397 "routeId"), "authorizationScopes" (rawinput73397 "authorizationScopes"), "apiKeyRequired" (rawinput73397 "apiKeyRequired"), "target" (rawinput73397 "target"), "requestModels" (rawinput73397 "requestModels"), "modelSelectionExpression" (rawinput73397 "modelSelectionExpression")}] (clojure.core/cond-> {} (letvar73399 "apiKeyRequired") (clojure.core/assoc :api-key-required (deser-boolean (clojure.core/get-in letvar73399 ["apiKeyRequired"]))) (letvar73399 "operationName") (clojure.core/assoc :operation-name (deser-string-with-length-between-1-and-64 (clojure.core/get-in letvar73399 ["operationName"]))) (letvar73399 "requestModels") (clojure.core/assoc :request-models (deser-route-models (clojure.core/get-in letvar73399 ["requestModels"]))) (letvar73399 "requestParameters") (clojure.core/assoc :request-parameters (deser-route-parameters (clojure.core/get-in letvar73399 ["requestParameters"]))) (letvar73399 "authorizerId") (clojure.core/assoc :authorizer-id (deser-id (clojure.core/get-in letvar73399 ["authorizerId"]))) (letvar73399 "routeKey") (clojure.core/assoc :route-key (deser-selection-key (clojure.core/get-in letvar73399 ["routeKey"]))) (letvar73399 "modelSelectionExpression") (clojure.core/assoc :model-selection-expression (deser-selection-expression (clojure.core/get-in letvar73399 ["modelSelectionExpression"]))) (letvar73399 "authorizationType") (clojure.core/assoc :authorization-type (deser-authorization-type (clojure.core/get-in letvar73399 ["authorizationType"]))) (letvar73399 "authorizationScopes") (clojure.core/assoc :authorization-scopes (deser-authorization-scopes (clojure.core/get-in letvar73399 ["authorizationScopes"]))) (letvar73399 "routeResponseSelectionExpression") (clojure.core/assoc :route-response-selection-expression (deser-selection-expression (clojure.core/get-in letvar73399 ["routeResponseSelectionExpression"]))) (letvar73399 "target") (clojure.core/assoc :target (deser-string-with-length-between-1-and-128 (clojure.core/get-in letvar73399 ["target"]))) (letvar73399 "routeId") (clojure.core/assoc :route-id (deser-id (clojure.core/get-in letvar73399 ["routeId"])))))))

(clojure.core/defn- response-get-domain-names-response ([input] (response-get-domain-names-response nil input)) ([resultWrapper73401 input] (clojure.core/let [rawinput73400 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73402 {"items" (rawinput73400 "items"), "nextToken" (rawinput73400 "nextToken")}] (clojure.core/cond-> {} (letvar73402 "items") (clojure.core/assoc :items (deser-list-of-domain-name (clojure.core/get-in letvar73402 ["items"]))) (letvar73402 "nextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar73402 ["nextToken"])))))))

(clojure.core/defn- response-get-stages-response ([input] (response-get-stages-response nil input)) ([resultWrapper73404 input] (clojure.core/let [rawinput73403 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73405 {"items" (rawinput73403 "items"), "nextToken" (rawinput73403 "nextToken")}] (clojure.core/cond-> {} (letvar73405 "items") (clojure.core/assoc :items (deser-list-of-stage (clojure.core/get-in letvar73405 ["items"]))) (letvar73405 "nextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar73405 ["nextToken"])))))))

(clojure.core/defn- response-get-integration-response-response ([input] (response-get-integration-response-response nil input)) ([resultWrapper73407 input] (clojure.core/let [rawinput73406 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73408 {"contentHandlingStrategy" (rawinput73406 "contentHandlingStrategy"), "integrationResponseId" (rawinput73406 "integrationResponseId"), "integrationResponseKey" (rawinput73406 "integrationResponseKey"), "responseParameters" (rawinput73406 "responseParameters"), "responseTemplates" (rawinput73406 "responseTemplates"), "templateSelectionExpression" (rawinput73406 "templateSelectionExpression")}] (clojure.core/cond-> {} (letvar73408 "contentHandlingStrategy") (clojure.core/assoc :content-handling-strategy (deser-content-handling-strategy (clojure.core/get-in letvar73408 ["contentHandlingStrategy"]))) (letvar73408 "integrationResponseId") (clojure.core/assoc :integration-response-id (deser-id (clojure.core/get-in letvar73408 ["integrationResponseId"]))) (letvar73408 "integrationResponseKey") (clojure.core/assoc :integration-response-key (deser-selection-key (clojure.core/get-in letvar73408 ["integrationResponseKey"]))) (letvar73408 "responseParameters") (clojure.core/assoc :response-parameters (deser-integration-parameters (clojure.core/get-in letvar73408 ["responseParameters"]))) (letvar73408 "responseTemplates") (clojure.core/assoc :response-templates (deser-template-map (clojure.core/get-in letvar73408 ["responseTemplates"]))) (letvar73408 "templateSelectionExpression") (clojure.core/assoc :template-selection-expression (deser-selection-expression (clojure.core/get-in letvar73408 ["templateSelectionExpression"])))))))

(clojure.core/defn- response-too-many-requests-exception ([input] (response-too-many-requests-exception nil input)) ([resultWrapper73410 input] (clojure.core/let [rawinput73409 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73411 {"limitType" (rawinput73409 "limitType"), "message" (rawinput73409 "message")}] (clojure.core/cond-> {} (letvar73411 "limitType") (clojure.core/assoc :limit-type (deser-string (clojure.core/get-in letvar73411 ["limitType"]))) (letvar73411 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar73411 ["message"])))))))

(clojure.core/defn- response-update-domain-name-response ([input] (response-update-domain-name-response nil input)) ([resultWrapper73413 input] (clojure.core/let [rawinput73412 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73414 {"apiMappingSelectionExpression" (rawinput73412 "apiMappingSelectionExpression"), "domainName" (rawinput73412 "domainName"), "domainNameConfigurations" (rawinput73412 "domainNameConfigurations")}] (clojure.core/cond-> {} (letvar73414 "apiMappingSelectionExpression") (clojure.core/assoc :api-mapping-selection-expression (deser-selection-expression (clojure.core/get-in letvar73414 ["apiMappingSelectionExpression"]))) (letvar73414 "domainName") (clojure.core/assoc :domain-name (deser-string-with-length-between-1-and-512 (clojure.core/get-in letvar73414 ["domainName"]))) (letvar73414 "domainNameConfigurations") (clojure.core/assoc :domain-name-configurations (deser-domain-name-configurations (clojure.core/get-in letvar73414 ["domainNameConfigurations"])))))))

(clojure.core/defn- response-update-deployment-response ([input] (response-update-deployment-response nil input)) ([resultWrapper73416 input] (clojure.core/let [rawinput73415 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73417 {"createdDate" (rawinput73415 "createdDate"), "deploymentId" (rawinput73415 "deploymentId"), "deploymentStatus" (rawinput73415 "deploymentStatus"), "deploymentStatusMessage" (rawinput73415 "deploymentStatusMessage"), "description" (rawinput73415 "description")}] (clojure.core/cond-> {} (letvar73417 "createdDate") (clojure.core/assoc :created-date (deser-timestamp-iso-8601 (clojure.core/get-in letvar73417 ["createdDate"]))) (letvar73417 "deploymentId") (clojure.core/assoc :deployment-id (deser-id (clojure.core/get-in letvar73417 ["deploymentId"]))) (letvar73417 "deploymentStatus") (clojure.core/assoc :deployment-status (deser-deployment-status (clojure.core/get-in letvar73417 ["deploymentStatus"]))) (letvar73417 "deploymentStatusMessage") (clojure.core/assoc :deployment-status-message (deser-string (clojure.core/get-in letvar73417 ["deploymentStatusMessage"]))) (letvar73417 "description") (clojure.core/assoc :description (deser-string-with-length-between-0-and-1024 (clojure.core/get-in letvar73417 ["description"])))))))

(clojure.core/defn- response-get-integration-result ([input] (response-get-integration-result nil input)) ([resultWrapper73419 input] (clojure.core/let [rawinput73418 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73420 {"integrationUri" (rawinput73418 "integrationUri"), "connectionId" (rawinput73418 "connectionId"), "integrationMethod" (rawinput73418 "integrationMethod"), "credentialsArn" (rawinput73418 "credentialsArn"), "integrationResponseSelectionExpression" (rawinput73418 "integrationResponseSelectionExpression"), "integrationId" (rawinput73418 "integrationId"), "connectionType" (rawinput73418 "connectionType"), "requestTemplates" (rawinput73418 "requestTemplates"), "templateSelectionExpression" (rawinput73418 "templateSelectionExpression"), "requestParameters" (rawinput73418 "requestParameters"), "passthroughBehavior" (rawinput73418 "passthroughBehavior"), "contentHandlingStrategy" (rawinput73418 "contentHandlingStrategy"), "integrationType" (rawinput73418 "integrationType"), "description" (rawinput73418 "description"), "timeoutInMillis" (rawinput73418 "timeoutInMillis")}] (clojure.core/cond-> {} (letvar73420 "timeoutInMillis") (clojure.core/assoc :timeout-in-millis (deser-integer-with-length-between-50-and-29000 (clojure.core/get-in letvar73420 ["timeoutInMillis"]))) (letvar73420 "requestTemplates") (clojure.core/assoc :request-templates (deser-template-map (clojure.core/get-in letvar73420 ["requestTemplates"]))) (letvar73420 "connectionId") (clojure.core/assoc :connection-id (deser-string-with-length-between-1-and-1024 (clojure.core/get-in letvar73420 ["connectionId"]))) (letvar73420 "requestParameters") (clojure.core/assoc :request-parameters (deser-integration-parameters (clojure.core/get-in letvar73420 ["requestParameters"]))) (letvar73420 "integrationMethod") (clojure.core/assoc :integration-method (deser-string-with-length-between-1-and-64 (clojure.core/get-in letvar73420 ["integrationMethod"]))) (letvar73420 "integrationResponseSelectionExpression") (clojure.core/assoc :integration-response-selection-expression (deser-selection-expression (clojure.core/get-in letvar73420 ["integrationResponseSelectionExpression"]))) (letvar73420 "passthroughBehavior") (clojure.core/assoc :passthrough-behavior (deser-passthrough-behavior (clojure.core/get-in letvar73420 ["passthroughBehavior"]))) (letvar73420 "credentialsArn") (clojure.core/assoc :credentials-arn (deser-arn (clojure.core/get-in letvar73420 ["credentialsArn"]))) (letvar73420 "integrationId") (clojure.core/assoc :integration-id (deser-id (clojure.core/get-in letvar73420 ["integrationId"]))) (letvar73420 "integrationUri") (clojure.core/assoc :integration-uri (deser-uri-with-length-between-1-and-2048 (clojure.core/get-in letvar73420 ["integrationUri"]))) (letvar73420 "integrationType") (clojure.core/assoc :integration-type (deser-integration-type (clojure.core/get-in letvar73420 ["integrationType"]))) (letvar73420 "description") (clojure.core/assoc :description (deser-string-with-length-between-0-and-1024 (clojure.core/get-in letvar73420 ["description"]))) (letvar73420 "connectionType") (clojure.core/assoc :connection-type (deser-connection-type (clojure.core/get-in letvar73420 ["connectionType"]))) (letvar73420 "templateSelectionExpression") (clojure.core/assoc :template-selection-expression (deser-selection-expression (clojure.core/get-in letvar73420 ["templateSelectionExpression"]))) (letvar73420 "contentHandlingStrategy") (clojure.core/assoc :content-handling-strategy (deser-content-handling-strategy (clojure.core/get-in letvar73420 ["contentHandlingStrategy"])))))))

(clojure.core/defn- response-conflict-exception ([input] (response-conflict-exception nil input)) ([resultWrapper73422 input] (clojure.core/let [rawinput73421 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73423 {"message" (rawinput73421 "message")}] (clojure.core/cond-> {} (letvar73423 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar73423 ["message"])))))))

(clojure.core/defn- response-update-integration-result ([input] (response-update-integration-result nil input)) ([resultWrapper73425 input] (clojure.core/let [rawinput73424 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73426 {"integrationUri" (rawinput73424 "integrationUri"), "connectionId" (rawinput73424 "connectionId"), "integrationMethod" (rawinput73424 "integrationMethod"), "credentialsArn" (rawinput73424 "credentialsArn"), "integrationResponseSelectionExpression" (rawinput73424 "integrationResponseSelectionExpression"), "integrationId" (rawinput73424 "integrationId"), "connectionType" (rawinput73424 "connectionType"), "requestTemplates" (rawinput73424 "requestTemplates"), "templateSelectionExpression" (rawinput73424 "templateSelectionExpression"), "requestParameters" (rawinput73424 "requestParameters"), "passthroughBehavior" (rawinput73424 "passthroughBehavior"), "contentHandlingStrategy" (rawinput73424 "contentHandlingStrategy"), "integrationType" (rawinput73424 "integrationType"), "description" (rawinput73424 "description"), "timeoutInMillis" (rawinput73424 "timeoutInMillis")}] (clojure.core/cond-> {} (letvar73426 "timeoutInMillis") (clojure.core/assoc :timeout-in-millis (deser-integer-with-length-between-50-and-29000 (clojure.core/get-in letvar73426 ["timeoutInMillis"]))) (letvar73426 "requestTemplates") (clojure.core/assoc :request-templates (deser-template-map (clojure.core/get-in letvar73426 ["requestTemplates"]))) (letvar73426 "connectionId") (clojure.core/assoc :connection-id (deser-string-with-length-between-1-and-1024 (clojure.core/get-in letvar73426 ["connectionId"]))) (letvar73426 "requestParameters") (clojure.core/assoc :request-parameters (deser-integration-parameters (clojure.core/get-in letvar73426 ["requestParameters"]))) (letvar73426 "integrationMethod") (clojure.core/assoc :integration-method (deser-string-with-length-between-1-and-64 (clojure.core/get-in letvar73426 ["integrationMethod"]))) (letvar73426 "integrationResponseSelectionExpression") (clojure.core/assoc :integration-response-selection-expression (deser-selection-expression (clojure.core/get-in letvar73426 ["integrationResponseSelectionExpression"]))) (letvar73426 "passthroughBehavior") (clojure.core/assoc :passthrough-behavior (deser-passthrough-behavior (clojure.core/get-in letvar73426 ["passthroughBehavior"]))) (letvar73426 "credentialsArn") (clojure.core/assoc :credentials-arn (deser-arn (clojure.core/get-in letvar73426 ["credentialsArn"]))) (letvar73426 "integrationId") (clojure.core/assoc :integration-id (deser-id (clojure.core/get-in letvar73426 ["integrationId"]))) (letvar73426 "integrationUri") (clojure.core/assoc :integration-uri (deser-uri-with-length-between-1-and-2048 (clojure.core/get-in letvar73426 ["integrationUri"]))) (letvar73426 "integrationType") (clojure.core/assoc :integration-type (deser-integration-type (clojure.core/get-in letvar73426 ["integrationType"]))) (letvar73426 "description") (clojure.core/assoc :description (deser-string-with-length-between-0-and-1024 (clojure.core/get-in letvar73426 ["description"]))) (letvar73426 "connectionType") (clojure.core/assoc :connection-type (deser-connection-type (clojure.core/get-in letvar73426 ["connectionType"]))) (letvar73426 "templateSelectionExpression") (clojure.core/assoc :template-selection-expression (deser-selection-expression (clojure.core/get-in letvar73426 ["templateSelectionExpression"]))) (letvar73426 "contentHandlingStrategy") (clojure.core/assoc :content-handling-strategy (deser-content-handling-strategy (clojure.core/get-in letvar73426 ["contentHandlingStrategy"])))))))

(clojure.core/defn- response-get-integration-responses-response ([input] (response-get-integration-responses-response nil input)) ([resultWrapper73428 input] (clojure.core/let [rawinput73427 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73429 {"items" (rawinput73427 "items"), "nextToken" (rawinput73427 "nextToken")}] (clojure.core/cond-> {} (letvar73429 "items") (clojure.core/assoc :items (deser-list-of-integration-response (clojure.core/get-in letvar73429 ["items"]))) (letvar73429 "nextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar73429 ["nextToken"])))))))

(clojure.core/defn- response-update-integration-response-response ([input] (response-update-integration-response-response nil input)) ([resultWrapper73431 input] (clojure.core/let [rawinput73430 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73432 {"contentHandlingStrategy" (rawinput73430 "contentHandlingStrategy"), "integrationResponseId" (rawinput73430 "integrationResponseId"), "integrationResponseKey" (rawinput73430 "integrationResponseKey"), "responseParameters" (rawinput73430 "responseParameters"), "responseTemplates" (rawinput73430 "responseTemplates"), "templateSelectionExpression" (rawinput73430 "templateSelectionExpression")}] (clojure.core/cond-> {} (letvar73432 "contentHandlingStrategy") (clojure.core/assoc :content-handling-strategy (deser-content-handling-strategy (clojure.core/get-in letvar73432 ["contentHandlingStrategy"]))) (letvar73432 "integrationResponseId") (clojure.core/assoc :integration-response-id (deser-id (clojure.core/get-in letvar73432 ["integrationResponseId"]))) (letvar73432 "integrationResponseKey") (clojure.core/assoc :integration-response-key (deser-selection-key (clojure.core/get-in letvar73432 ["integrationResponseKey"]))) (letvar73432 "responseParameters") (clojure.core/assoc :response-parameters (deser-integration-parameters (clojure.core/get-in letvar73432 ["responseParameters"]))) (letvar73432 "responseTemplates") (clojure.core/assoc :response-templates (deser-template-map (clojure.core/get-in letvar73432 ["responseTemplates"]))) (letvar73432 "templateSelectionExpression") (clojure.core/assoc :template-selection-expression (deser-selection-expression (clojure.core/get-in letvar73432 ["templateSelectionExpression"])))))))

(clojure.core/defn- response-update-authorizer-response ([input] (response-update-authorizer-response nil input)) ([resultWrapper73434 input] (clojure.core/let [rawinput73433 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73435 {"authorizerId" (rawinput73433 "authorizerId"), "identityValidationExpression" (rawinput73433 "identityValidationExpression"), "name" (rawinput73433 "name"), "providerArns" (rawinput73433 "providerArns"), "authorizerResultTtlInSeconds" (rawinput73433 "authorizerResultTtlInSeconds"), "authorizerUri" (rawinput73433 "authorizerUri"), "authorizerCredentialsArn" (rawinput73433 "authorizerCredentialsArn"), "authorizerType" (rawinput73433 "authorizerType"), "identitySource" (rawinput73433 "identitySource")}] (clojure.core/cond-> {} (letvar73435 "authorizerCredentialsArn") (clojure.core/assoc :authorizer-credentials-arn (deser-arn (clojure.core/get-in letvar73435 ["authorizerCredentialsArn"]))) (letvar73435 "identityValidationExpression") (clojure.core/assoc :identity-validation-expression (deser-string-with-length-between-0-and-1024 (clojure.core/get-in letvar73435 ["identityValidationExpression"]))) (letvar73435 "authorizerId") (clojure.core/assoc :authorizer-id (deser-id (clojure.core/get-in letvar73435 ["authorizerId"]))) (letvar73435 "identitySource") (clojure.core/assoc :identity-source (deser-identity-source-list (clojure.core/get-in letvar73435 ["identitySource"]))) (letvar73435 "authorizerType") (clojure.core/assoc :authorizer-type (deser-authorizer-type (clojure.core/get-in letvar73435 ["authorizerType"]))) (letvar73435 "providerArns") (clojure.core/assoc :provider-arns (deser-provider-arn-list (clojure.core/get-in letvar73435 ["providerArns"]))) (letvar73435 "authorizerResultTtlInSeconds") (clojure.core/assoc :authorizer-result-ttl-in-seconds (deser-integer-with-length-between-0-and-3600 (clojure.core/get-in letvar73435 ["authorizerResultTtlInSeconds"]))) (letvar73435 "name") (clojure.core/assoc :name (deser-string-with-length-between-1-and-128 (clojure.core/get-in letvar73435 ["name"]))) (letvar73435 "authorizerUri") (clojure.core/assoc :authorizer-uri (deser-uri-with-length-between-1-and-2048 (clojure.core/get-in letvar73435 ["authorizerUri"])))))))

(clojure.core/defn- response-not-found-exception ([input] (response-not-found-exception nil input)) ([resultWrapper73437 input] (clojure.core/let [rawinput73436 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73438 {"message" (rawinput73436 "message"), "resourceType" (rawinput73436 "resourceType")}] (clojure.core/cond-> {} (letvar73438 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar73438 ["message"]))) (letvar73438 "resourceType") (clojure.core/assoc :resource-type (deser-string (clojure.core/get-in letvar73438 ["resourceType"])))))))

(clojure.core/defn- response-update-api-mapping-response ([input] (response-update-api-mapping-response nil input)) ([resultWrapper73440 input] (clojure.core/let [rawinput73439 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73441 {"apiId" (rawinput73439 "apiId"), "apiMappingId" (rawinput73439 "apiMappingId"), "apiMappingKey" (rawinput73439 "apiMappingKey"), "stage" (rawinput73439 "stage")}] (clojure.core/cond-> {} (letvar73441 "apiId") (clojure.core/assoc :api-id (deser-id (clojure.core/get-in letvar73441 ["apiId"]))) (letvar73441 "apiMappingId") (clojure.core/assoc :api-mapping-id (deser-id (clojure.core/get-in letvar73441 ["apiMappingId"]))) (letvar73441 "apiMappingKey") (clojure.core/assoc :api-mapping-key (deser-selection-key (clojure.core/get-in letvar73441 ["apiMappingKey"]))) (letvar73441 "stage") (clojure.core/assoc :stage (deser-string-with-length-between-1-and-128 (clojure.core/get-in letvar73441 ["stage"])))))))

(clojure.core/defn- response-create-domain-name-response ([input] (response-create-domain-name-response nil input)) ([resultWrapper73443 input] (clojure.core/let [rawinput73442 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73444 {"apiMappingSelectionExpression" (rawinput73442 "apiMappingSelectionExpression"), "domainName" (rawinput73442 "domainName"), "domainNameConfigurations" (rawinput73442 "domainNameConfigurations")}] (clojure.core/cond-> {} (letvar73444 "apiMappingSelectionExpression") (clojure.core/assoc :api-mapping-selection-expression (deser-selection-expression (clojure.core/get-in letvar73444 ["apiMappingSelectionExpression"]))) (letvar73444 "domainName") (clojure.core/assoc :domain-name (deser-string-with-length-between-1-and-512 (clojure.core/get-in letvar73444 ["domainName"]))) (letvar73444 "domainNameConfigurations") (clojure.core/assoc :domain-name-configurations (deser-domain-name-configurations (clojure.core/get-in letvar73444 ["domainNameConfigurations"])))))))

(clojure.core/defn- response-update-stage-response ([input] (response-update-stage-response nil input)) ([resultWrapper73446 input] (clojure.core/let [rawinput73445 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73447 {"createdDate" (rawinput73445 "createdDate"), "defaultRouteSettings" (rawinput73445 "defaultRouteSettings"), "accessLogSettings" (rawinput73445 "accessLogSettings"), "routeSettings" (rawinput73445 "routeSettings"), "deploymentId" (rawinput73445 "deploymentId"), "clientCertificateId" (rawinput73445 "clientCertificateId"), "lastUpdatedDate" (rawinput73445 "lastUpdatedDate"), "stageVariables" (rawinput73445 "stageVariables"), "stageName" (rawinput73445 "stageName"), "description" (rawinput73445 "description")}] (clojure.core/cond-> {} (letvar73447 "clientCertificateId") (clojure.core/assoc :client-certificate-id (deser-id (clojure.core/get-in letvar73447 ["clientCertificateId"]))) (letvar73447 "routeSettings") (clojure.core/assoc :route-settings (deser-route-settings-map (clojure.core/get-in letvar73447 ["routeSettings"]))) (letvar73447 "lastUpdatedDate") (clojure.core/assoc :last-updated-date (deser-timestamp-iso-8601 (clojure.core/get-in letvar73447 ["lastUpdatedDate"]))) (letvar73447 "description") (clojure.core/assoc :description (deser-string-with-length-between-0-and-1024 (clojure.core/get-in letvar73447 ["description"]))) (letvar73447 "deploymentId") (clojure.core/assoc :deployment-id (deser-id (clojure.core/get-in letvar73447 ["deploymentId"]))) (letvar73447 "createdDate") (clojure.core/assoc :created-date (deser-timestamp-iso-8601 (clojure.core/get-in letvar73447 ["createdDate"]))) (letvar73447 "accessLogSettings") (clojure.core/assoc :access-log-settings (deser-access-log-settings (clojure.core/get-in letvar73447 ["accessLogSettings"]))) (letvar73447 "defaultRouteSettings") (clojure.core/assoc :default-route-settings (deser-route-settings (clojure.core/get-in letvar73447 ["defaultRouteSettings"]))) (letvar73447 "stageVariables") (clojure.core/assoc :stage-variables (deser-stage-variables-map (clojure.core/get-in letvar73447 ["stageVariables"]))) (letvar73447 "stageName") (clojure.core/assoc :stage-name (deser-string-with-length-between-1-and-128 (clojure.core/get-in letvar73447 ["stageName"])))))))

(clojure.core/defn- response-update-route-response-response ([input] (response-update-route-response-response nil input)) ([resultWrapper73449 input] (clojure.core/let [rawinput73448 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73450 {"modelSelectionExpression" (rawinput73448 "modelSelectionExpression"), "responseModels" (rawinput73448 "responseModels"), "responseParameters" (rawinput73448 "responseParameters"), "routeResponseId" (rawinput73448 "routeResponseId"), "routeResponseKey" (rawinput73448 "routeResponseKey")}] (clojure.core/cond-> {} (letvar73450 "modelSelectionExpression") (clojure.core/assoc :model-selection-expression (deser-selection-expression (clojure.core/get-in letvar73450 ["modelSelectionExpression"]))) (letvar73450 "responseModels") (clojure.core/assoc :response-models (deser-route-models (clojure.core/get-in letvar73450 ["responseModels"]))) (letvar73450 "responseParameters") (clojure.core/assoc :response-parameters (deser-route-parameters (clojure.core/get-in letvar73450 ["responseParameters"]))) (letvar73450 "routeResponseId") (clojure.core/assoc :route-response-id (deser-id (clojure.core/get-in letvar73450 ["routeResponseId"]))) (letvar73450 "routeResponseKey") (clojure.core/assoc :route-response-key (deser-selection-key (clojure.core/get-in letvar73450 ["routeResponseKey"])))))))

(clojure.core/defn- response-create-api-response ([input] (response-create-api-response nil input)) ([resultWrapper73452 input] (clojure.core/let [rawinput73451 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73453 {"protocolType" (rawinput73451 "protocolType"), "disableSchemaValidation" (rawinput73451 "disableSchemaValidation"), "createdDate" (rawinput73451 "createdDate"), "apiEndpoint" (rawinput73451 "apiEndpoint"), "name" (rawinput73451 "name"), "apiId" (rawinput73451 "apiId"), "apiKeySelectionExpression" (rawinput73451 "apiKeySelectionExpression"), "routeSelectionExpression" (rawinput73451 "routeSelectionExpression"), "version" (rawinput73451 "version"), "warnings" (rawinput73451 "warnings"), "description" (rawinput73451 "description")}] (clojure.core/cond-> {} (letvar73453 "warnings") (clojure.core/assoc :warnings (deser-list-of-string (clojure.core/get-in letvar73453 ["warnings"]))) (letvar73453 "routeSelectionExpression") (clojure.core/assoc :route-selection-expression (deser-selection-expression (clojure.core/get-in letvar73453 ["routeSelectionExpression"]))) (letvar73453 "protocolType") (clojure.core/assoc :protocol-type (deser-protocol-type (clojure.core/get-in letvar73453 ["protocolType"]))) (letvar73453 "disableSchemaValidation") (clojure.core/assoc :disable-schema-validation (deser-boolean (clojure.core/get-in letvar73453 ["disableSchemaValidation"]))) (letvar73453 "description") (clojure.core/assoc :description (deser-string-with-length-between-0-and-1024 (clojure.core/get-in letvar73453 ["description"]))) (letvar73453 "createdDate") (clojure.core/assoc :created-date (deser-timestamp-iso-8601 (clojure.core/get-in letvar73453 ["createdDate"]))) (letvar73453 "apiEndpoint") (clojure.core/assoc :api-endpoint (deser-string (clojure.core/get-in letvar73453 ["apiEndpoint"]))) (letvar73453 "version") (clojure.core/assoc :version (deser-string-with-length-between-1-and-64 (clojure.core/get-in letvar73453 ["version"]))) (letvar73453 "name") (clojure.core/assoc :name (deser-string-with-length-between-1-and-128 (clojure.core/get-in letvar73453 ["name"]))) (letvar73453 "apiId") (clojure.core/assoc :api-id (deser-id (clojure.core/get-in letvar73453 ["apiId"]))) (letvar73453 "apiKeySelectionExpression") (clojure.core/assoc :api-key-selection-expression (deser-selection-expression (clojure.core/get-in letvar73453 ["apiKeySelectionExpression"])))))))

(clojure.core/defn- response-get-apis-response ([input] (response-get-apis-response nil input)) ([resultWrapper73455 input] (clojure.core/let [rawinput73454 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73456 {"items" (rawinput73454 "items"), "nextToken" (rawinput73454 "nextToken")}] (clojure.core/cond-> {} (letvar73456 "items") (clojure.core/assoc :items (deser-list-of-api (clojure.core/get-in letvar73456 ["items"]))) (letvar73456 "nextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar73456 ["nextToken"])))))))

(clojure.core/defn- response-get-model-template-response ([input] (response-get-model-template-response nil input)) ([resultWrapper73458 input] (clojure.core/let [rawinput73457 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73459 {"value" (rawinput73457 "value")}] (clojure.core/cond-> {} (letvar73459 "value") (clojure.core/assoc :value (deser-string (clojure.core/get-in letvar73459 ["value"])))))))

(clojure.core/defn- response-get-routes-response ([input] (response-get-routes-response nil input)) ([resultWrapper73461 input] (clojure.core/let [rawinput73460 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73462 {"items" (rawinput73460 "items"), "nextToken" (rawinput73460 "nextToken")}] (clojure.core/cond-> {} (letvar73462 "items") (clojure.core/assoc :items (deser-list-of-route (clojure.core/get-in letvar73462 ["items"]))) (letvar73462 "nextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar73462 ["nextToken"])))))))

(clojure.core/defn- response-get-domain-name-response ([input] (response-get-domain-name-response nil input)) ([resultWrapper73464 input] (clojure.core/let [rawinput73463 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73465 {"apiMappingSelectionExpression" (rawinput73463 "apiMappingSelectionExpression"), "domainName" (rawinput73463 "domainName"), "domainNameConfigurations" (rawinput73463 "domainNameConfigurations")}] (clojure.core/cond-> {} (letvar73465 "apiMappingSelectionExpression") (clojure.core/assoc :api-mapping-selection-expression (deser-selection-expression (clojure.core/get-in letvar73465 ["apiMappingSelectionExpression"]))) (letvar73465 "domainName") (clojure.core/assoc :domain-name (deser-string-with-length-between-1-and-512 (clojure.core/get-in letvar73465 ["domainName"]))) (letvar73465 "domainNameConfigurations") (clojure.core/assoc :domain-name-configurations (deser-domain-name-configurations (clojure.core/get-in letvar73465 ["domainNameConfigurations"])))))))

(clojure.core/defn- response-create-authorizer-response ([input] (response-create-authorizer-response nil input)) ([resultWrapper73467 input] (clojure.core/let [rawinput73466 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73468 {"authorizerId" (rawinput73466 "authorizerId"), "identityValidationExpression" (rawinput73466 "identityValidationExpression"), "name" (rawinput73466 "name"), "providerArns" (rawinput73466 "providerArns"), "authorizerResultTtlInSeconds" (rawinput73466 "authorizerResultTtlInSeconds"), "authorizerUri" (rawinput73466 "authorizerUri"), "authorizerCredentialsArn" (rawinput73466 "authorizerCredentialsArn"), "authorizerType" (rawinput73466 "authorizerType"), "identitySource" (rawinput73466 "identitySource")}] (clojure.core/cond-> {} (letvar73468 "authorizerCredentialsArn") (clojure.core/assoc :authorizer-credentials-arn (deser-arn (clojure.core/get-in letvar73468 ["authorizerCredentialsArn"]))) (letvar73468 "identityValidationExpression") (clojure.core/assoc :identity-validation-expression (deser-string-with-length-between-0-and-1024 (clojure.core/get-in letvar73468 ["identityValidationExpression"]))) (letvar73468 "authorizerId") (clojure.core/assoc :authorizer-id (deser-id (clojure.core/get-in letvar73468 ["authorizerId"]))) (letvar73468 "identitySource") (clojure.core/assoc :identity-source (deser-identity-source-list (clojure.core/get-in letvar73468 ["identitySource"]))) (letvar73468 "authorizerType") (clojure.core/assoc :authorizer-type (deser-authorizer-type (clojure.core/get-in letvar73468 ["authorizerType"]))) (letvar73468 "providerArns") (clojure.core/assoc :provider-arns (deser-provider-arn-list (clojure.core/get-in letvar73468 ["providerArns"]))) (letvar73468 "authorizerResultTtlInSeconds") (clojure.core/assoc :authorizer-result-ttl-in-seconds (deser-integer-with-length-between-0-and-3600 (clojure.core/get-in letvar73468 ["authorizerResultTtlInSeconds"]))) (letvar73468 "name") (clojure.core/assoc :name (deser-string-with-length-between-1-and-128 (clojure.core/get-in letvar73468 ["name"]))) (letvar73468 "authorizerUri") (clojure.core/assoc :authorizer-uri (deser-uri-with-length-between-1-and-2048 (clojure.core/get-in letvar73468 ["authorizerUri"])))))))

(clojure.core/defn- response-get-authorizers-response ([input] (response-get-authorizers-response nil input)) ([resultWrapper73470 input] (clojure.core/let [rawinput73469 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73471 {"items" (rawinput73469 "items"), "nextToken" (rawinput73469 "nextToken")}] (clojure.core/cond-> {} (letvar73471 "items") (clojure.core/assoc :items (deser-list-of-authorizer (clojure.core/get-in letvar73471 ["items"]))) (letvar73471 "nextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar73471 ["nextToken"])))))))

(clojure.core/defn- response-create-deployment-response ([input] (response-create-deployment-response nil input)) ([resultWrapper73473 input] (clojure.core/let [rawinput73472 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73474 {"createdDate" (rawinput73472 "createdDate"), "deploymentId" (rawinput73472 "deploymentId"), "deploymentStatus" (rawinput73472 "deploymentStatus"), "deploymentStatusMessage" (rawinput73472 "deploymentStatusMessage"), "description" (rawinput73472 "description")}] (clojure.core/cond-> {} (letvar73474 "createdDate") (clojure.core/assoc :created-date (deser-timestamp-iso-8601 (clojure.core/get-in letvar73474 ["createdDate"]))) (letvar73474 "deploymentId") (clojure.core/assoc :deployment-id (deser-id (clojure.core/get-in letvar73474 ["deploymentId"]))) (letvar73474 "deploymentStatus") (clojure.core/assoc :deployment-status (deser-deployment-status (clojure.core/get-in letvar73474 ["deploymentStatus"]))) (letvar73474 "deploymentStatusMessage") (clojure.core/assoc :deployment-status-message (deser-string (clojure.core/get-in letvar73474 ["deploymentStatusMessage"]))) (letvar73474 "description") (clojure.core/assoc :description (deser-string-with-length-between-0-and-1024 (clojure.core/get-in letvar73474 ["description"])))))))

(clojure.core/defn- response-get-route-responses-response ([input] (response-get-route-responses-response nil input)) ([resultWrapper73476 input] (clojure.core/let [rawinput73475 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73477 {"items" (rawinput73475 "items"), "nextToken" (rawinput73475 "nextToken")}] (clojure.core/cond-> {} (letvar73477 "items") (clojure.core/assoc :items (deser-list-of-route-response (clojure.core/get-in letvar73477 ["items"]))) (letvar73477 "nextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar73477 ["nextToken"])))))))

(clojure.core/defn- response-create-route-response-response ([input] (response-create-route-response-response nil input)) ([resultWrapper73479 input] (clojure.core/let [rawinput73478 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73480 {"modelSelectionExpression" (rawinput73478 "modelSelectionExpression"), "responseModels" (rawinput73478 "responseModels"), "responseParameters" (rawinput73478 "responseParameters"), "routeResponseId" (rawinput73478 "routeResponseId"), "routeResponseKey" (rawinput73478 "routeResponseKey")}] (clojure.core/cond-> {} (letvar73480 "modelSelectionExpression") (clojure.core/assoc :model-selection-expression (deser-selection-expression (clojure.core/get-in letvar73480 ["modelSelectionExpression"]))) (letvar73480 "responseModels") (clojure.core/assoc :response-models (deser-route-models (clojure.core/get-in letvar73480 ["responseModels"]))) (letvar73480 "responseParameters") (clojure.core/assoc :response-parameters (deser-route-parameters (clojure.core/get-in letvar73480 ["responseParameters"]))) (letvar73480 "routeResponseId") (clojure.core/assoc :route-response-id (deser-id (clojure.core/get-in letvar73480 ["routeResponseId"]))) (letvar73480 "routeResponseKey") (clojure.core/assoc :route-response-key (deser-selection-key (clojure.core/get-in letvar73480 ["routeResponseKey"])))))))

(clojure.core/defn- response-get-models-response ([input] (response-get-models-response nil input)) ([resultWrapper73482 input] (clojure.core/let [rawinput73481 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73483 {"items" (rawinput73481 "items"), "nextToken" (rawinput73481 "nextToken")}] (clojure.core/cond-> {} (letvar73483 "items") (clojure.core/assoc :items (deser-list-of-model (clojure.core/get-in letvar73483 ["items"]))) (letvar73483 "nextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar73483 ["nextToken"])))))))

(clojure.core/defn- response-get-deployment-response ([input] (response-get-deployment-response nil input)) ([resultWrapper73485 input] (clojure.core/let [rawinput73484 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73486 {"createdDate" (rawinput73484 "createdDate"), "deploymentId" (rawinput73484 "deploymentId"), "deploymentStatus" (rawinput73484 "deploymentStatus"), "deploymentStatusMessage" (rawinput73484 "deploymentStatusMessage"), "description" (rawinput73484 "description")}] (clojure.core/cond-> {} (letvar73486 "createdDate") (clojure.core/assoc :created-date (deser-timestamp-iso-8601 (clojure.core/get-in letvar73486 ["createdDate"]))) (letvar73486 "deploymentId") (clojure.core/assoc :deployment-id (deser-id (clojure.core/get-in letvar73486 ["deploymentId"]))) (letvar73486 "deploymentStatus") (clojure.core/assoc :deployment-status (deser-deployment-status (clojure.core/get-in letvar73486 ["deploymentStatus"]))) (letvar73486 "deploymentStatusMessage") (clojure.core/assoc :deployment-status-message (deser-string (clojure.core/get-in letvar73486 ["deploymentStatusMessage"]))) (letvar73486 "description") (clojure.core/assoc :description (deser-string-with-length-between-0-and-1024 (clojure.core/get-in letvar73486 ["description"])))))))

(clojure.core/defn- response-get-api-mappings-response ([input] (response-get-api-mappings-response nil input)) ([resultWrapper73488 input] (clojure.core/let [rawinput73487 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73489 {"items" (rawinput73487 "items"), "nextToken" (rawinput73487 "nextToken")}] (clojure.core/cond-> {} (letvar73489 "items") (clojure.core/assoc :items (deser-list-of-api-mapping (clojure.core/get-in letvar73489 ["items"]))) (letvar73489 "nextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar73489 ["nextToken"])))))))

(clojure.core/defn- response-get-api-response ([input] (response-get-api-response nil input)) ([resultWrapper73491 input] (clojure.core/let [rawinput73490 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73492 {"protocolType" (rawinput73490 "protocolType"), "disableSchemaValidation" (rawinput73490 "disableSchemaValidation"), "createdDate" (rawinput73490 "createdDate"), "apiEndpoint" (rawinput73490 "apiEndpoint"), "name" (rawinput73490 "name"), "apiId" (rawinput73490 "apiId"), "apiKeySelectionExpression" (rawinput73490 "apiKeySelectionExpression"), "routeSelectionExpression" (rawinput73490 "routeSelectionExpression"), "version" (rawinput73490 "version"), "warnings" (rawinput73490 "warnings"), "description" (rawinput73490 "description")}] (clojure.core/cond-> {} (letvar73492 "warnings") (clojure.core/assoc :warnings (deser-list-of-string (clojure.core/get-in letvar73492 ["warnings"]))) (letvar73492 "routeSelectionExpression") (clojure.core/assoc :route-selection-expression (deser-selection-expression (clojure.core/get-in letvar73492 ["routeSelectionExpression"]))) (letvar73492 "protocolType") (clojure.core/assoc :protocol-type (deser-protocol-type (clojure.core/get-in letvar73492 ["protocolType"]))) (letvar73492 "disableSchemaValidation") (clojure.core/assoc :disable-schema-validation (deser-boolean (clojure.core/get-in letvar73492 ["disableSchemaValidation"]))) (letvar73492 "description") (clojure.core/assoc :description (deser-string-with-length-between-0-and-1024 (clojure.core/get-in letvar73492 ["description"]))) (letvar73492 "createdDate") (clojure.core/assoc :created-date (deser-timestamp-iso-8601 (clojure.core/get-in letvar73492 ["createdDate"]))) (letvar73492 "apiEndpoint") (clojure.core/assoc :api-endpoint (deser-string (clojure.core/get-in letvar73492 ["apiEndpoint"]))) (letvar73492 "version") (clojure.core/assoc :version (deser-string-with-length-between-1-and-64 (clojure.core/get-in letvar73492 ["version"]))) (letvar73492 "name") (clojure.core/assoc :name (deser-string-with-length-between-1-and-128 (clojure.core/get-in letvar73492 ["name"]))) (letvar73492 "apiId") (clojure.core/assoc :api-id (deser-id (clojure.core/get-in letvar73492 ["apiId"]))) (letvar73492 "apiKeySelectionExpression") (clojure.core/assoc :api-key-selection-expression (deser-selection-expression (clojure.core/get-in letvar73492 ["apiKeySelectionExpression"])))))))

(clojure.core/defn- response-create-integration-response-response ([input] (response-create-integration-response-response nil input)) ([resultWrapper73494 input] (clojure.core/let [rawinput73493 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73495 {"contentHandlingStrategy" (rawinput73493 "contentHandlingStrategy"), "integrationResponseId" (rawinput73493 "integrationResponseId"), "integrationResponseKey" (rawinput73493 "integrationResponseKey"), "responseParameters" (rawinput73493 "responseParameters"), "responseTemplates" (rawinput73493 "responseTemplates"), "templateSelectionExpression" (rawinput73493 "templateSelectionExpression")}] (clojure.core/cond-> {} (letvar73495 "contentHandlingStrategy") (clojure.core/assoc :content-handling-strategy (deser-content-handling-strategy (clojure.core/get-in letvar73495 ["contentHandlingStrategy"]))) (letvar73495 "integrationResponseId") (clojure.core/assoc :integration-response-id (deser-id (clojure.core/get-in letvar73495 ["integrationResponseId"]))) (letvar73495 "integrationResponseKey") (clojure.core/assoc :integration-response-key (deser-selection-key (clojure.core/get-in letvar73495 ["integrationResponseKey"]))) (letvar73495 "responseParameters") (clojure.core/assoc :response-parameters (deser-integration-parameters (clojure.core/get-in letvar73495 ["responseParameters"]))) (letvar73495 "responseTemplates") (clojure.core/assoc :response-templates (deser-template-map (clojure.core/get-in letvar73495 ["responseTemplates"]))) (letvar73495 "templateSelectionExpression") (clojure.core/assoc :template-selection-expression (deser-selection-expression (clojure.core/get-in letvar73495 ["templateSelectionExpression"])))))))

(clojure.core/defn- response-get-api-mapping-response ([input] (response-get-api-mapping-response nil input)) ([resultWrapper73497 input] (clojure.core/let [rawinput73496 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73498 {"apiId" (rawinput73496 "apiId"), "apiMappingId" (rawinput73496 "apiMappingId"), "apiMappingKey" (rawinput73496 "apiMappingKey"), "stage" (rawinput73496 "stage")}] (clojure.core/cond-> {} (letvar73498 "apiId") (clojure.core/assoc :api-id (deser-id (clojure.core/get-in letvar73498 ["apiId"]))) (letvar73498 "apiMappingId") (clojure.core/assoc :api-mapping-id (deser-id (clojure.core/get-in letvar73498 ["apiMappingId"]))) (letvar73498 "apiMappingKey") (clojure.core/assoc :api-mapping-key (deser-selection-key (clojure.core/get-in letvar73498 ["apiMappingKey"]))) (letvar73498 "stage") (clojure.core/assoc :stage (deser-string-with-length-between-1-and-128 (clojure.core/get-in letvar73498 ["stage"])))))))

(clojure.core/defn- response-create-api-mapping-response ([input] (response-create-api-mapping-response nil input)) ([resultWrapper73500 input] (clojure.core/let [rawinput73499 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73501 {"apiId" (rawinput73499 "apiId"), "apiMappingId" (rawinput73499 "apiMappingId"), "apiMappingKey" (rawinput73499 "apiMappingKey"), "stage" (rawinput73499 "stage")}] (clojure.core/cond-> {} (letvar73501 "apiId") (clojure.core/assoc :api-id (deser-id (clojure.core/get-in letvar73501 ["apiId"]))) (letvar73501 "apiMappingId") (clojure.core/assoc :api-mapping-id (deser-id (clojure.core/get-in letvar73501 ["apiMappingId"]))) (letvar73501 "apiMappingKey") (clojure.core/assoc :api-mapping-key (deser-selection-key (clojure.core/get-in letvar73501 ["apiMappingKey"]))) (letvar73501 "stage") (clojure.core/assoc :stage (deser-string-with-length-between-1-and-128 (clojure.core/get-in letvar73501 ["stage"])))))))

(clojure.core/defn- response-create-integration-result ([input] (response-create-integration-result nil input)) ([resultWrapper73503 input] (clojure.core/let [rawinput73502 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73504 {"integrationUri" (rawinput73502 "integrationUri"), "connectionId" (rawinput73502 "connectionId"), "integrationMethod" (rawinput73502 "integrationMethod"), "credentialsArn" (rawinput73502 "credentialsArn"), "integrationResponseSelectionExpression" (rawinput73502 "integrationResponseSelectionExpression"), "integrationId" (rawinput73502 "integrationId"), "connectionType" (rawinput73502 "connectionType"), "requestTemplates" (rawinput73502 "requestTemplates"), "templateSelectionExpression" (rawinput73502 "templateSelectionExpression"), "requestParameters" (rawinput73502 "requestParameters"), "passthroughBehavior" (rawinput73502 "passthroughBehavior"), "contentHandlingStrategy" (rawinput73502 "contentHandlingStrategy"), "integrationType" (rawinput73502 "integrationType"), "description" (rawinput73502 "description"), "timeoutInMillis" (rawinput73502 "timeoutInMillis")}] (clojure.core/cond-> {} (letvar73504 "timeoutInMillis") (clojure.core/assoc :timeout-in-millis (deser-integer-with-length-between-50-and-29000 (clojure.core/get-in letvar73504 ["timeoutInMillis"]))) (letvar73504 "requestTemplates") (clojure.core/assoc :request-templates (deser-template-map (clojure.core/get-in letvar73504 ["requestTemplates"]))) (letvar73504 "connectionId") (clojure.core/assoc :connection-id (deser-string-with-length-between-1-and-1024 (clojure.core/get-in letvar73504 ["connectionId"]))) (letvar73504 "requestParameters") (clojure.core/assoc :request-parameters (deser-integration-parameters (clojure.core/get-in letvar73504 ["requestParameters"]))) (letvar73504 "integrationMethod") (clojure.core/assoc :integration-method (deser-string-with-length-between-1-and-64 (clojure.core/get-in letvar73504 ["integrationMethod"]))) (letvar73504 "integrationResponseSelectionExpression") (clojure.core/assoc :integration-response-selection-expression (deser-selection-expression (clojure.core/get-in letvar73504 ["integrationResponseSelectionExpression"]))) (letvar73504 "passthroughBehavior") (clojure.core/assoc :passthrough-behavior (deser-passthrough-behavior (clojure.core/get-in letvar73504 ["passthroughBehavior"]))) (letvar73504 "credentialsArn") (clojure.core/assoc :credentials-arn (deser-arn (clojure.core/get-in letvar73504 ["credentialsArn"]))) (letvar73504 "integrationId") (clojure.core/assoc :integration-id (deser-id (clojure.core/get-in letvar73504 ["integrationId"]))) (letvar73504 "integrationUri") (clojure.core/assoc :integration-uri (deser-uri-with-length-between-1-and-2048 (clojure.core/get-in letvar73504 ["integrationUri"]))) (letvar73504 "integrationType") (clojure.core/assoc :integration-type (deser-integration-type (clojure.core/get-in letvar73504 ["integrationType"]))) (letvar73504 "description") (clojure.core/assoc :description (deser-string-with-length-between-0-and-1024 (clojure.core/get-in letvar73504 ["description"]))) (letvar73504 "connectionType") (clojure.core/assoc :connection-type (deser-connection-type (clojure.core/get-in letvar73504 ["connectionType"]))) (letvar73504 "templateSelectionExpression") (clojure.core/assoc :template-selection-expression (deser-selection-expression (clojure.core/get-in letvar73504 ["templateSelectionExpression"]))) (letvar73504 "contentHandlingStrategy") (clojure.core/assoc :content-handling-strategy (deser-content-handling-strategy (clojure.core/get-in letvar73504 ["contentHandlingStrategy"])))))))

(clojure.core/defn- response-update-model-response ([input] (response-update-model-response nil input)) ([resultWrapper73506 input] (clojure.core/let [rawinput73505 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73507 {"contentType" (rawinput73505 "contentType"), "description" (rawinput73505 "description"), "modelId" (rawinput73505 "modelId"), "name" (rawinput73505 "name"), "schema" (rawinput73505 "schema")}] (clojure.core/cond-> {} (letvar73507 "contentType") (clojure.core/assoc :content-type (deser-string-with-length-between-1-and-256 (clojure.core/get-in letvar73507 ["contentType"]))) (letvar73507 "description") (clojure.core/assoc :description (deser-string-with-length-between-0-and-1024 (clojure.core/get-in letvar73507 ["description"]))) (letvar73507 "modelId") (clojure.core/assoc :model-id (deser-id (clojure.core/get-in letvar73507 ["modelId"]))) (letvar73507 "name") (clojure.core/assoc :name (deser-string-with-length-between-1-and-128 (clojure.core/get-in letvar73507 ["name"]))) (letvar73507 "schema") (clojure.core/assoc :schema (deser-string-with-length-between-0-and-32-k (clojure.core/get-in letvar73507 ["schema"])))))))

(clojure.core/defn- response-get-authorizer-response ([input] (response-get-authorizer-response nil input)) ([resultWrapper73509 input] (clojure.core/let [rawinput73508 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73510 {"authorizerId" (rawinput73508 "authorizerId"), "identityValidationExpression" (rawinput73508 "identityValidationExpression"), "name" (rawinput73508 "name"), "providerArns" (rawinput73508 "providerArns"), "authorizerResultTtlInSeconds" (rawinput73508 "authorizerResultTtlInSeconds"), "authorizerUri" (rawinput73508 "authorizerUri"), "authorizerCredentialsArn" (rawinput73508 "authorizerCredentialsArn"), "authorizerType" (rawinput73508 "authorizerType"), "identitySource" (rawinput73508 "identitySource")}] (clojure.core/cond-> {} (letvar73510 "authorizerCredentialsArn") (clojure.core/assoc :authorizer-credentials-arn (deser-arn (clojure.core/get-in letvar73510 ["authorizerCredentialsArn"]))) (letvar73510 "identityValidationExpression") (clojure.core/assoc :identity-validation-expression (deser-string-with-length-between-0-and-1024 (clojure.core/get-in letvar73510 ["identityValidationExpression"]))) (letvar73510 "authorizerId") (clojure.core/assoc :authorizer-id (deser-id (clojure.core/get-in letvar73510 ["authorizerId"]))) (letvar73510 "identitySource") (clojure.core/assoc :identity-source (deser-identity-source-list (clojure.core/get-in letvar73510 ["identitySource"]))) (letvar73510 "authorizerType") (clojure.core/assoc :authorizer-type (deser-authorizer-type (clojure.core/get-in letvar73510 ["authorizerType"]))) (letvar73510 "providerArns") (clojure.core/assoc :provider-arns (deser-provider-arn-list (clojure.core/get-in letvar73510 ["providerArns"]))) (letvar73510 "authorizerResultTtlInSeconds") (clojure.core/assoc :authorizer-result-ttl-in-seconds (deser-integer-with-length-between-0-and-3600 (clojure.core/get-in letvar73510 ["authorizerResultTtlInSeconds"]))) (letvar73510 "name") (clojure.core/assoc :name (deser-string-with-length-between-1-and-128 (clojure.core/get-in letvar73510 ["name"]))) (letvar73510 "authorizerUri") (clojure.core/assoc :authorizer-uri (deser-uri-with-length-between-1-and-2048 (clojure.core/get-in letvar73510 ["authorizerUri"])))))))

(clojure.core/defn- response-get-model-response ([input] (response-get-model-response nil input)) ([resultWrapper73512 input] (clojure.core/let [rawinput73511 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar73513 {"contentType" (rawinput73511 "contentType"), "description" (rawinput73511 "description"), "modelId" (rawinput73511 "modelId"), "name" (rawinput73511 "name"), "schema" (rawinput73511 "schema")}] (clojure.core/cond-> {} (letvar73513 "contentType") (clojure.core/assoc :content-type (deser-string-with-length-between-1-and-256 (clojure.core/get-in letvar73513 ["contentType"]))) (letvar73513 "description") (clojure.core/assoc :description (deser-string-with-length-between-0-and-1024 (clojure.core/get-in letvar73513 ["description"]))) (letvar73513 "modelId") (clojure.core/assoc :model-id (deser-id (clojure.core/get-in letvar73513 ["modelId"]))) (letvar73513 "name") (clojure.core/assoc :name (deser-string-with-length-between-1-and-128 (clojure.core/get-in letvar73513 ["name"]))) (letvar73513 "schema") (clojure.core/assoc :schema (deser-string-with-length-between-0-and-32-k (clojure.core/get-in letvar73513 ["schema"])))))))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-response-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-response-request/route-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-response-request/route-response-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-route-response-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.get-route-response-request/route-response-id :portkey.aws.apigatewayv2.get-route-response-request/api-id :portkey.aws.apigatewayv2.get-route-response-request/route-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.delete-api-mapping-request/api-mapping-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.delete-api-mapping-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/delete-api-mapping-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.delete-api-mapping-request/api-mapping-id :portkey.aws.apigatewayv2.delete-api-mapping-request/domain-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-request/route-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-route-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.get-route-request/api-id :portkey.aws.apigatewayv2.get-route-request/route-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-deployment-input/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-deployment-input/stage-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-deployment-input (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.create-deployment-input/description :portkey.aws.apigatewayv2.create-deployment-input/stage-name]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/string-with-length-between-1-and-512 (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-input/timeout-in-millis (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integer-with-length-between-50-and-29000))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-input/request-templates (clojure.spec.alpha/and :portkey.aws.apigatewayv2/template-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-input/connection-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-input/request-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integration-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-input/integration-method (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-input/credentials-arn (clojure.spec.alpha/and :portkey.aws.apigatewayv2/arn))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-input/integration-uri (clojure.spec.alpha/and :portkey.aws.apigatewayv2/uri-with-length-between-1-and-2048))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-input/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-input/template-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-integration-input (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.update-integration-input/timeout-in-millis :portkey.aws.apigatewayv2.update-integration-input/request-templates :portkey.aws.apigatewayv2.update-integration-input/connection-id :portkey.aws.apigatewayv2.update-integration-input/request-parameters :portkey.aws.apigatewayv2.update-integration-input/integration-method :portkey.aws.apigatewayv2/passthrough-behavior :portkey.aws.apigatewayv2.update-integration-input/credentials-arn :portkey.aws.apigatewayv2.update-integration-input/integration-uri :portkey.aws.apigatewayv2/integration-type :portkey.aws.apigatewayv2.update-integration-input/description :portkey.aws.apigatewayv2/connection-type :portkey.aws.apigatewayv2.update-integration-input/template-selection-expression :portkey.aws.apigatewayv2/content-handling-strategy]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-stages-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-stages-request/max-results (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-stages-request/next-token (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-stages-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.get-stages-request/api-id] :opt-un [:portkey.aws.apigatewayv2.get-stages-request/max-results :portkey.aws.apigatewayv2.get-stages-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.delete-domain-name-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/delete-domain-name-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.delete-domain-name-request/domain-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.route/api-key-required (clojure.spec.alpha/and :portkey.aws.apigatewayv2/boolean))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.route/operation-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.route/request-models (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-models))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.route/request-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.route/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.route/route-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.route/model-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.route/route-response-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.route/target (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.route/route-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/route (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.route/route-key] :opt-un [:portkey.aws.apigatewayv2.route/api-key-required :portkey.aws.apigatewayv2.route/operation-name :portkey.aws.apigatewayv2.route/request-models :portkey.aws.apigatewayv2.route/request-parameters :portkey.aws.apigatewayv2.route/authorizer-id :portkey.aws.apigatewayv2.route/model-selection-expression :portkey.aws.apigatewayv2/authorization-type :portkey.aws.apigatewayv2/authorization-scopes :portkey.aws.apigatewayv2.route/route-response-selection-expression :portkey.aws.apigatewayv2.route/target :portkey.aws.apigatewayv2.route/route-id]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.delete-api-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/delete-api-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.delete-api-request/api-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-result/api-key-required (clojure.spec.alpha/and :portkey.aws.apigatewayv2/boolean))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-result/operation-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-result/request-models (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-models))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-result/request-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-result/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-result/route-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-result/model-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-result/route-response-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-result/target (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-result/route-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-route-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.update-route-result/api-key-required :portkey.aws.apigatewayv2.update-route-result/operation-name :portkey.aws.apigatewayv2.update-route-result/request-models :portkey.aws.apigatewayv2.update-route-result/request-parameters :portkey.aws.apigatewayv2.update-route-result/authorizer-id :portkey.aws.apigatewayv2.update-route-result/route-key :portkey.aws.apigatewayv2.update-route-result/model-selection-expression :portkey.aws.apigatewayv2/authorization-type :portkey.aws.apigatewayv2/authorization-scopes :portkey.aws.apigatewayv2.update-route-result/route-response-selection-expression :portkey.aws.apigatewayv2.update-route-result/target :portkey.aws.apigatewayv2.update-route-result/route-id]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-response-response/model-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-response-response/response-models (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-models))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-response-response/response-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-response-response/route-response-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-response-response/route-response-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-route-response-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.get-route-response-response/model-selection-expression :portkey.aws.apigatewayv2.get-route-response-response/response-models :portkey.aws.apigatewayv2.get-route-response-response/response-parameters :portkey.aws.apigatewayv2.get-route-response-response/route-response-id :portkey.aws.apigatewayv2.get-route-response-response/route-response-key]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-response-input/model-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-response-input/response-models (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-models))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-response-input/response-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-response-input/route-response-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-route-response-input (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.create-route-response-input/route-response-key] :opt-un [:portkey.aws.apigatewayv2.create-route-response-input/model-selection-expression :portkey.aws.apigatewayv2.create-route-response-input/response-models :portkey.aws.apigatewayv2.create-route-response-input/response-parameters]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-response/warnings (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-response/route-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-response/disable-schema-validation (clojure.spec.alpha/and :portkey.aws.apigatewayv2/boolean))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-response/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-response/created-date (clojure.spec.alpha/and :portkey.aws.apigatewayv2/timestamp-iso-8601))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-response/api-endpoint (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-response/version (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-response/name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-response/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-response/api-key-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-api-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.update-api-response/warnings :portkey.aws.apigatewayv2.update-api-response/route-selection-expression :portkey.aws.apigatewayv2/protocol-type :portkey.aws.apigatewayv2.update-api-response/disable-schema-validation :portkey.aws.apigatewayv2.update-api-response/description :portkey.aws.apigatewayv2.update-api-response/created-date :portkey.aws.apigatewayv2.update-api-response/api-endpoint :portkey.aws.apigatewayv2.update-api-response/version :portkey.aws.apigatewayv2.update-api-response/name :portkey.aws.apigatewayv2.update-api-response/api-id :portkey.aws.apigatewayv2.update-api-response/api-key-selection-expression]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.api/warnings (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.api/route-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.api/disable-schema-validation (clojure.spec.alpha/and :portkey.aws.apigatewayv2/boolean))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.api/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.api/created-date (clojure.spec.alpha/and :portkey.aws.apigatewayv2/timestamp-iso-8601))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.api/api-endpoint (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.api/version (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.api/name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.api/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.api/api-key-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/api (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.api/route-selection-expression :portkey.aws.apigatewayv2/protocol-type :portkey.aws.apigatewayv2.api/name] :opt-un [:portkey.aws.apigatewayv2.api/warnings :portkey.aws.apigatewayv2.api/disable-schema-validation :portkey.aws.apigatewayv2.api/description :portkey.aws.apigatewayv2.api/created-date :portkey.aws.apigatewayv2.api/api-endpoint :portkey.aws.apigatewayv2.api/version :portkey.aws.apigatewayv2.api/api-id :portkey.aws.apigatewayv2.api/api-key-selection-expression]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/route-settings-map (clojure.spec.alpha/map-of :portkey.aws.apigatewayv2/string :portkey.aws.apigatewayv2/route-settings))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-result/api-key-required (clojure.spec.alpha/and :portkey.aws.apigatewayv2/boolean))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-result/operation-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-result/request-models (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-models))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-result/request-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-result/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-result/route-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-result/model-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-result/route-response-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-result/target (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-result/route-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-route-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.get-route-result/api-key-required :portkey.aws.apigatewayv2.get-route-result/operation-name :portkey.aws.apigatewayv2.get-route-result/request-models :portkey.aws.apigatewayv2.get-route-result/request-parameters :portkey.aws.apigatewayv2.get-route-result/authorizer-id :portkey.aws.apigatewayv2.get-route-result/route-key :portkey.aws.apigatewayv2.get-route-result/model-selection-expression :portkey.aws.apigatewayv2/authorization-type :portkey.aws.apigatewayv2/authorization-scopes :portkey.aws.apigatewayv2.get-route-result/route-response-selection-expression :portkey.aws.apigatewayv2.get-route-result/target :portkey.aws.apigatewayv2.get-route-result/route-id]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-stage-response/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-stage-response/route-settings (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-settings-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-stage-response/last-updated-date (clojure.spec.alpha/and :portkey.aws.apigatewayv2/timestamp-iso-8601))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-stage-response/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-stage-response/deployment-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-stage-response/created-date (clojure.spec.alpha/and :portkey.aws.apigatewayv2/timestamp-iso-8601))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-stage-response/default-route-settings (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-settings))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-stage-response/stage-variables (clojure.spec.alpha/and :portkey.aws.apigatewayv2/stage-variables-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-stage-response/stage-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-stage-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.create-stage-response/client-certificate-id :portkey.aws.apigatewayv2.create-stage-response/route-settings :portkey.aws.apigatewayv2.create-stage-response/last-updated-date :portkey.aws.apigatewayv2.create-stage-response/description :portkey.aws.apigatewayv2.create-stage-response/deployment-id :portkey.aws.apigatewayv2.create-stage-response/created-date :portkey.aws.apigatewayv2/access-log-settings :portkey.aws.apigatewayv2.create-stage-response/default-route-settings :portkey.aws.apigatewayv2.create-stage-response/stage-variables :portkey.aws.apigatewayv2.create-stage-response/stage-name]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-deployments-response/items (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-deployment))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-deployments-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.get-deployments-response/items :portkey.aws.apigatewayv2/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.deployment/created-date (clojure.spec.alpha/and :portkey.aws.apigatewayv2/timestamp-iso-8601))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.deployment/deployment-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.deployment/deployment-status-message (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.deployment/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/deployment (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.deployment/created-date :portkey.aws.apigatewayv2.deployment/deployment-id :portkey.aws.apigatewayv2/deployment-status :portkey.aws.apigatewayv2.deployment/deployment-status-message :portkey.aws.apigatewayv2.deployment/description]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-request/api-key-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-request/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-request/disable-schema-validation (clojure.spec.alpha/and :portkey.aws.apigatewayv2/boolean))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-request/name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-request/route-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-request/version (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-api-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.create-api-request/route-selection-expression :portkey.aws.apigatewayv2/protocol-type :portkey.aws.apigatewayv2.create-api-request/name] :opt-un [:portkey.aws.apigatewayv2.create-api-request/api-key-selection-expression :portkey.aws.apigatewayv2.create-api-request/description :portkey.aws.apigatewayv2.create-api-request/disable-schema-validation :portkey.aws.apigatewayv2.create-api-request/version]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integrations-response/items (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-integration))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-integrations-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.get-integrations-response/items :portkey.aws.apigatewayv2/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-authorizer-input/authorizer-credentials-arn (clojure.spec.alpha/and :portkey.aws.apigatewayv2/arn))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-authorizer-input/authorizer-result-ttl-in-seconds (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integer-with-length-between-0-and-3600))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-authorizer-input/authorizer-uri (clojure.spec.alpha/and :portkey.aws.apigatewayv2/uri-with-length-between-1-and-2048))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-authorizer-input/identity-source (clojure.spec.alpha/and :portkey.aws.apigatewayv2/identity-source-list))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-authorizer-input/identity-validation-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-authorizer-input/name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-authorizer-input/provider-arns (clojure.spec.alpha/and :portkey.aws.apigatewayv2/provider-arn-list))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-authorizer-input (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.create-authorizer-input/authorizer-uri :portkey.aws.apigatewayv2/authorizer-type :portkey.aws.apigatewayv2.create-authorizer-input/identity-source :portkey.aws.apigatewayv2.create-authorizer-input/name] :opt-un [:portkey.aws.apigatewayv2.create-authorizer-input/authorizer-credentials-arn :portkey.aws.apigatewayv2.create-authorizer-input/authorizer-result-ttl-in-seconds :portkey.aws.apigatewayv2.create-authorizer-input/identity-validation-expression :portkey.aws.apigatewayv2.create-authorizer-input/provider-arns]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.bad-request-exception/message (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/bad-request-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.bad-request-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-stage-request/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-stage-request/route-settings (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-settings-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-stage-request/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-stage-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-stage-request/default-route-settings (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-settings))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-stage-request/stage-variables (clojure.spec.alpha/and :portkey.aws.apigatewayv2/stage-variables-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-stage-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-stage-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-stage-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.update-stage-request/stage-name :portkey.aws.apigatewayv2.update-stage-request/api-id] :opt-un [:portkey.aws.apigatewayv2.update-stage-request/client-certificate-id :portkey.aws.apigatewayv2.update-stage-request/route-settings :portkey.aws.apigatewayv2.update-stage-request/description :portkey.aws.apigatewayv2.update-stage-request/deployment-id :portkey.aws.apigatewayv2/access-log-settings :portkey.aws.apigatewayv2.update-stage-request/default-route-settings :portkey.aws.apigatewayv2.update-stage-request/stage-variables]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-stage-response/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-stage-response/route-settings (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-settings-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-stage-response/last-updated-date (clojure.spec.alpha/and :portkey.aws.apigatewayv2/timestamp-iso-8601))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-stage-response/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-stage-response/deployment-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-stage-response/created-date (clojure.spec.alpha/and :portkey.aws.apigatewayv2/timestamp-iso-8601))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-stage-response/default-route-settings (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-settings))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-stage-response/stage-variables (clojure.spec.alpha/and :portkey.aws.apigatewayv2/stage-variables-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-stage-response/stage-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-stage-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.get-stage-response/client-certificate-id :portkey.aws.apigatewayv2.get-stage-response/route-settings :portkey.aws.apigatewayv2.get-stage-response/last-updated-date :portkey.aws.apigatewayv2.get-stage-response/description :portkey.aws.apigatewayv2.get-stage-response/deployment-id :portkey.aws.apigatewayv2.get-stage-response/created-date :portkey.aws.apigatewayv2/access-log-settings :portkey.aws.apigatewayv2.get-stage-response/default-route-settings :portkey.aws.apigatewayv2.get-stage-response/stage-variables :portkey.aws.apigatewayv2.get-stage-response/stage-name]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-stage-input/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-stage-input/default-route-settings (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-settings))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-stage-input/deployment-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-stage-input/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-stage-input/route-settings (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-settings-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-stage-input/stage-variables (clojure.spec.alpha/and :portkey.aws.apigatewayv2/stage-variables-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-stage-input (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2/access-log-settings :portkey.aws.apigatewayv2.update-stage-input/client-certificate-id :portkey.aws.apigatewayv2.update-stage-input/default-route-settings :portkey.aws.apigatewayv2.update-stage-input/deployment-id :portkey.aws.apigatewayv2.update-stage-input/description :portkey.aws.apigatewayv2.update-stage-input/route-settings :portkey.aws.apigatewayv2.update-stage-input/stage-variables]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-mapping-input/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-mapping-input/api-mapping-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-mapping-input/stage (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-api-mapping-input (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.update-api-mapping-input/api-id :portkey.aws.apigatewayv2.update-api-mapping-input/api-mapping-key :portkey.aws.apigatewayv2.update-api-mapping-input/stage]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.delete-stage-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.delete-stage-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/delete-stage-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.delete-stage-request/stage-name :portkey.aws.apigatewayv2.delete-stage-request/api-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-request/api-key-required (clojure.spec.alpha/and :portkey.aws.apigatewayv2/boolean))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-request/operation-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-request/request-models (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-models))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-request/request-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-request/route-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-request/model-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-request/route-response-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-request/target (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-route-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.create-route-request/api-id :portkey.aws.apigatewayv2.create-route-request/route-key] :opt-un [:portkey.aws.apigatewayv2.create-route-request/api-key-required :portkey.aws.apigatewayv2.create-route-request/operation-name :portkey.aws.apigatewayv2.create-route-request/request-models :portkey.aws.apigatewayv2.create-route-request/request-parameters :portkey.aws.apigatewayv2.create-route-request/authorizer-id :portkey.aws.apigatewayv2.create-route-request/model-selection-expression :portkey.aws.apigatewayv2/authorization-type :portkey.aws.apigatewayv2/authorization-scopes :portkey.aws.apigatewayv2.create-route-request/route-response-selection-expression :portkey.aws.apigatewayv2.create-route-request/target]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-request/timeout-in-millis (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integer-with-length-between-50-and-29000))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-request/request-templates (clojure.spec.alpha/and :portkey.aws.apigatewayv2/template-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-request/connection-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-request/request-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integration-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-request/integration-method (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-request/credentials-arn (clojure.spec.alpha/and :portkey.aws.apigatewayv2/arn))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-request/integration-uri (clojure.spec.alpha/and :portkey.aws.apigatewayv2/uri-with-length-between-1-and-2048))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-request/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-request/template-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-integration-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.create-integration-request/api-id :portkey.aws.apigatewayv2/integration-type] :opt-un [:portkey.aws.apigatewayv2.create-integration-request/timeout-in-millis :portkey.aws.apigatewayv2.create-integration-request/request-templates :portkey.aws.apigatewayv2.create-integration-request/connection-id :portkey.aws.apigatewayv2.create-integration-request/request-parameters :portkey.aws.apigatewayv2.create-integration-request/integration-method :portkey.aws.apigatewayv2/passthrough-behavior :portkey.aws.apigatewayv2.create-integration-request/credentials-arn :portkey.aws.apigatewayv2.create-integration-request/integration-uri :portkey.aws.apigatewayv2.create-integration-request/description :portkey.aws.apigatewayv2/connection-type :portkey.aws.apigatewayv2.create-integration-request/template-selection-expression :portkey.aws.apigatewayv2/content-handling-strategy]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-api-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-api-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.get-api-request/api-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-response-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-response-request/integration-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-response-request/integration-response-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-integration-response-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.get-integration-response-request/api-id :portkey.aws.apigatewayv2.get-integration-response-request/integration-response-id :portkey.aws.apigatewayv2.get-integration-response-request/integration-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-responses-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-responses-request/integration-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-responses-request/max-results (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-responses-request/next-token (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-integration-responses-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.get-integration-responses-request/integration-id :portkey.aws.apigatewayv2.get-integration-responses-request/api-id] :opt-un [:portkey.aws.apigatewayv2.get-integration-responses-request/max-results :portkey.aws.apigatewayv2.get-integration-responses-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.domain-name-configuration/api-gateway-domain-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.domain-name-configuration/certificate-arn (clojure.spec.alpha/and :portkey.aws.apigatewayv2/arn))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.domain-name-configuration/certificate-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.domain-name-configuration/certificate-upload-date (clojure.spec.alpha/and :portkey.aws.apigatewayv2/timestamp-iso-8601))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.domain-name-configuration/hosted-zone-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/domain-name-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.domain-name-configuration/api-gateway-domain-name :portkey.aws.apigatewayv2.domain-name-configuration/certificate-arn :portkey.aws.apigatewayv2.domain-name-configuration/certificate-name :portkey.aws.apigatewayv2.domain-name-configuration/certificate-upload-date :portkey.aws.apigatewayv2/endpoint-type :portkey.aws.apigatewayv2.domain-name-configuration/hosted-zone-id]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-input/api-key-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-input/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-input/disable-schema-validation (clojure.spec.alpha/and :portkey.aws.apigatewayv2/boolean))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-input/name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-input/route-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-input/version (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-api-input (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.create-api-input/route-selection-expression :portkey.aws.apigatewayv2/protocol-type :portkey.aws.apigatewayv2.create-api-input/name] :opt-un [:portkey.aws.apigatewayv2.create-api-input/api-key-selection-expression :portkey.aws.apigatewayv2.create-api-input/description :portkey.aws.apigatewayv2.create-api-input/disable-schema-validation :portkey.aws.apigatewayv2.create-api-input/version]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/list-of-integration-response (clojure.spec.alpha/coll-of :portkey.aws.apigatewayv2/integration-response))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/string-with-length-between-0-and-32-k (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/list-of-deployment (clojure.spec.alpha/coll-of :portkey.aws.apigatewayv2/deployment))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-apis-request/max-results (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-apis-request/next-token (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-apis-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.get-apis-request/max-results :portkey.aws.apigatewayv2.get-apis-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/uri-with-length-between-1-and-2048 (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/endpoint-type #{:edge "REGIONAL" :regional "EDGE"})

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.api-mapping/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.api-mapping/api-mapping-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.api-mapping/api-mapping-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.api-mapping/stage (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/api-mapping (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.api-mapping/stage :portkey.aws.apigatewayv2.api-mapping/api-id] :opt-un [:portkey.aws.apigatewayv2.api-mapping/api-mapping-id :portkey.aws.apigatewayv2.api-mapping/api-mapping-key]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-api-mappings-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-api-mappings-request/max-results (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-api-mappings-request/next-token (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-api-mappings-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.get-api-mappings-request/domain-name] :opt-un [:portkey.aws.apigatewayv2.get-api-mappings-request/max-results :portkey.aws.apigatewayv2.get-api-mappings-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-deployment-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-deployment-request/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-deployment-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.update-deployment-request/api-id :portkey.aws.apigatewayv2.update-deployment-request/deployment-id] :opt-un [:portkey.aws.apigatewayv2.update-deployment-request/description]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-authorizer-input/authorizer-credentials-arn (clojure.spec.alpha/and :portkey.aws.apigatewayv2/arn))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-authorizer-input/authorizer-result-ttl-in-seconds (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integer-with-length-between-0-and-3600))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-authorizer-input/authorizer-uri (clojure.spec.alpha/and :portkey.aws.apigatewayv2/uri-with-length-between-1-and-2048))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-authorizer-input/identity-source (clojure.spec.alpha/and :portkey.aws.apigatewayv2/identity-source-list))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-authorizer-input/identity-validation-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-authorizer-input/name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-authorizer-input/provider-arns (clojure.spec.alpha/and :portkey.aws.apigatewayv2/provider-arn-list))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-authorizer-input (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.update-authorizer-input/authorizer-credentials-arn :portkey.aws.apigatewayv2.update-authorizer-input/authorizer-result-ttl-in-seconds :portkey.aws.apigatewayv2/authorizer-type :portkey.aws.apigatewayv2.update-authorizer-input/authorizer-uri :portkey.aws.apigatewayv2.update-authorizer-input/identity-source :portkey.aws.apigatewayv2.update-authorizer-input/identity-validation-expression :portkey.aws.apigatewayv2.update-authorizer-input/name :portkey.aws.apigatewayv2.update-authorizer-input/provider-arns]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/passthrough-behavior #{"WHEN_NO_TEMPLATES" :when-no-templates "WHEN_NO_MATCH" :never "NEVER" :when-no-match})

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-model-response/content-type (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-256))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-model-response/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-model-response/model-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-model-response/name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-model-response/schema (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-32-k))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-model-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.create-model-response/content-type :portkey.aws.apigatewayv2.create-model-response/description :portkey.aws.apigatewayv2.create-model-response/model-id :portkey.aws.apigatewayv2.create-model-response/name :portkey.aws.apigatewayv2.create-model-response/schema]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.route-settings/data-trace-enabled (clojure.spec.alpha/and :portkey.aws.apigatewayv2/boolean))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.route-settings/detailed-metrics-enabled (clojure.spec.alpha/and :portkey.aws.apigatewayv2/boolean))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.route-settings/throttling-burst-limit (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integer))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.route-settings/throttling-rate-limit (clojure.spec.alpha/and :portkey.aws.apigatewayv2/double))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/route-settings (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.route-settings/data-trace-enabled :portkey.aws.apigatewayv2.route-settings/detailed-metrics-enabled :portkey.aws.apigatewayv2/logging-level :portkey.aws.apigatewayv2.route-settings/throttling-burst-limit :portkey.aws.apigatewayv2.route-settings/throttling-rate-limit]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-request/api-key-required (clojure.spec.alpha/and :portkey.aws.apigatewayv2/boolean))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-request/operation-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-request/request-models (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-models))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-request/request-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-request/route-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-request/model-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-request/route-response-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-request/target (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-request/route-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-route-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.update-route-request/api-id :portkey.aws.apigatewayv2.update-route-request/route-id] :opt-un [:portkey.aws.apigatewayv2.update-route-request/api-key-required :portkey.aws.apigatewayv2.update-route-request/operation-name :portkey.aws.apigatewayv2.update-route-request/request-models :portkey.aws.apigatewayv2.update-route-request/request-parameters :portkey.aws.apigatewayv2.update-route-request/authorizer-id :portkey.aws.apigatewayv2.update-route-request/route-key :portkey.aws.apigatewayv2.update-route-request/model-selection-expression :portkey.aws.apigatewayv2/authorization-type :portkey.aws.apigatewayv2/authorization-scopes :portkey.aws.apigatewayv2.update-route-request/route-response-selection-expression :portkey.aws.apigatewayv2.update-route-request/target]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/integer-with-length-between-50-and-29000 (clojure.spec.alpha/int-in 50 29000))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-input/api-key-required (clojure.spec.alpha/and :portkey.aws.apigatewayv2/boolean))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-input/operation-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-input/request-models (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-models))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-input/request-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-input/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-input/route-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-input/model-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-input/route-response-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-input/target (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-route-input (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.create-route-input/route-key] :opt-un [:portkey.aws.apigatewayv2.create-route-input/api-key-required :portkey.aws.apigatewayv2.create-route-input/operation-name :portkey.aws.apigatewayv2.create-route-input/request-models :portkey.aws.apigatewayv2.create-route-input/request-parameters :portkey.aws.apigatewayv2.create-route-input/authorizer-id :portkey.aws.apigatewayv2.create-route-input/model-selection-expression :portkey.aws.apigatewayv2/authorization-type :portkey.aws.apigatewayv2/authorization-scopes :portkey.aws.apigatewayv2.create-route-input/route-response-selection-expression :portkey.aws.apigatewayv2.create-route-input/target]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.stages/items (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-stage))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/stages (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.stages/items :portkey.aws.apigatewayv2/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-authorizer-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-authorizer-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-authorizer-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.get-authorizer-request/authorizer-id :portkey.aws.apigatewayv2.get-authorizer-request/api-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.template/value (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/template (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.template/value]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.routes/items (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-route))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/routes (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.routes/items :portkey.aws.apigatewayv2/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.limit-exceeded-exception/limit-type (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/limit-exceeded-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.limit-exceeded-exception/limit-type :portkey.aws.apigatewayv2.limit-exceeded-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.integration-responses/items (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-integration-response))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/integration-responses (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.integration-responses/items :portkey.aws.apigatewayv2/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-model-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-model-request/model-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-model-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.get-model-request/model-id :portkey.aws.apigatewayv2.get-model-request/api-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-result/api-key-required (clojure.spec.alpha/and :portkey.aws.apigatewayv2/boolean))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-result/operation-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-result/request-models (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-models))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-result/request-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-result/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-result/route-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-result/model-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-result/route-response-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-result/target (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-result/route-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-route-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.create-route-result/api-key-required :portkey.aws.apigatewayv2.create-route-result/operation-name :portkey.aws.apigatewayv2.create-route-result/request-models :portkey.aws.apigatewayv2.create-route-result/request-parameters :portkey.aws.apigatewayv2.create-route-result/authorizer-id :portkey.aws.apigatewayv2.create-route-result/route-key :portkey.aws.apigatewayv2.create-route-result/model-selection-expression :portkey.aws.apigatewayv2/authorization-type :portkey.aws.apigatewayv2/authorization-scopes :portkey.aws.apigatewayv2.create-route-result/route-response-selection-expression :portkey.aws.apigatewayv2.create-route-result/target :portkey.aws.apigatewayv2.create-route-result/route-id]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-domain-names-response/items (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-domain-name))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-domain-names-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.get-domain-names-response/items :portkey.aws.apigatewayv2/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/protocol-type #{:websocket "WEBSOCKET"})

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/identity-source-list (clojure.spec.alpha/coll-of :portkey.aws.apigatewayv2/string))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-request/api-key-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-request/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-request/disable-schema-validation (clojure.spec.alpha/and :portkey.aws.apigatewayv2/boolean))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-request/name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-request/route-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-request/version (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-api-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.update-api-request/api-id] :opt-un [:portkey.aws.apigatewayv2.update-api-request/api-key-selection-expression :portkey.aws.apigatewayv2.update-api-request/description :portkey.aws.apigatewayv2.update-api-request/disable-schema-validation :portkey.aws.apigatewayv2.update-api-request/name :portkey.aws.apigatewayv2.update-api-request/route-selection-expression :portkey.aws.apigatewayv2.update-api-request/version]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/stage-variables-map (clojure.spec.alpha/map-of :portkey.aws.apigatewayv2/string :portkey.aws.apigatewayv2/string-with-length-between-0-and-2048))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/next-token (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/selection-expression (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/provider-arn-list (clojure.spec.alpha/coll-of :portkey.aws.apigatewayv2/arn))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.api-mappings/items (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-api-mapping))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/api-mappings (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.api-mappings/items :portkey.aws.apigatewayv2/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-stages-response/items (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-stage))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-stages-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.get-stages-response/items :portkey.aws.apigatewayv2/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-mapping-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-mapping-request/api-mapping-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-mapping-request/api-mapping-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-mapping-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-mapping-request/stage (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-api-mapping-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.update-api-mapping-request/api-mapping-id :portkey.aws.apigatewayv2.update-api-mapping-request/api-id :portkey.aws.apigatewayv2.update-api-mapping-request/domain-name] :opt-un [:portkey.aws.apigatewayv2.update-api-mapping-request/api-mapping-key :portkey.aws.apigatewayv2.update-api-mapping-request/stage]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-response-response/integration-response-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-response-response/integration-response-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-response-response/response-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integration-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-response-response/response-templates (clojure.spec.alpha/and :portkey.aws.apigatewayv2/template-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-response-response/template-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-integration-response-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2/content-handling-strategy :portkey.aws.apigatewayv2.get-integration-response-response/integration-response-id :portkey.aws.apigatewayv2.get-integration-response-response/integration-response-key :portkey.aws.apigatewayv2.get-integration-response-response/response-parameters :portkey.aws.apigatewayv2.get-integration-response-response/response-templates :portkey.aws.apigatewayv2.get-integration-response-response/template-selection-expression]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-model-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-model-request/content-type (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-256))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-model-request/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-model-request/name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-model-request/schema (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-32-k))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-model-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.create-model-request/api-id :portkey.aws.apigatewayv2.create-model-request/schema :portkey.aws.apigatewayv2.create-model-request/name] :opt-un [:portkey.aws.apigatewayv2.create-model-request/content-type :portkey.aws.apigatewayv2.create-model-request/description]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.too-many-requests-exception/limit-type (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.too-many-requests-exception/message (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/too-many-requests-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.too-many-requests-exception/limit-type :portkey.aws.apigatewayv2.too-many-requests-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/list-of-api (clojure.spec.alpha/coll-of :portkey.aws.apigatewayv2/api))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-domain-name-response/api-mapping-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-domain-name-response/domain-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-512))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-domain-name-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.update-domain-name-response/api-mapping-selection-expression :portkey.aws.apigatewayv2.update-domain-name-response/domain-name :portkey.aws.apigatewayv2/domain-name-configurations]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.delete-model-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.delete-model-request/model-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/delete-model-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.delete-model-request/model-id :portkey.aws.apigatewayv2.delete-model-request/api-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.apis/items (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-api))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/apis (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.apis/items :portkey.aws.apigatewayv2/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-deployment-response/created-date (clojure.spec.alpha/and :portkey.aws.apigatewayv2/timestamp-iso-8601))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-deployment-response/deployment-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-deployment-response/deployment-status-message (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-deployment-response/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-deployment-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.update-deployment-response/created-date :portkey.aws.apigatewayv2.update-deployment-response/deployment-id :portkey.aws.apigatewayv2/deployment-status :portkey.aws.apigatewayv2.update-deployment-response/deployment-status-message :portkey.aws.apigatewayv2.update-deployment-response/description]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-model-template-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-model-template-request/model-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-model-template-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.get-model-template-request/model-id :portkey.aws.apigatewayv2.get-model-template-request/api-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.delete-integration-response-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.delete-integration-response-request/integration-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.delete-integration-response-request/integration-response-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/delete-integration-response-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.delete-integration-response-request/api-id :portkey.aws.apigatewayv2.delete-integration-response-request/integration-response-id :portkey.aws.apigatewayv2.delete-integration-response-request/integration-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/integration-type #{:aws "AWS" :aws-proxy "MOCK" "AWS_PROXY" "HTTP_PROXY" :http :http-proxy "HTTP" :mock})

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-result/timeout-in-millis (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integer-with-length-between-50-and-29000))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-result/request-templates (clojure.spec.alpha/and :portkey.aws.apigatewayv2/template-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-result/connection-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-result/request-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integration-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-result/integration-method (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-result/integration-response-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-result/credentials-arn (clojure.spec.alpha/and :portkey.aws.apigatewayv2/arn))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-result/integration-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-result/integration-uri (clojure.spec.alpha/and :portkey.aws.apigatewayv2/uri-with-length-between-1-and-2048))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-result/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-result/template-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-integration-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.get-integration-result/timeout-in-millis :portkey.aws.apigatewayv2.get-integration-result/request-templates :portkey.aws.apigatewayv2.get-integration-result/connection-id :portkey.aws.apigatewayv2.get-integration-result/request-parameters :portkey.aws.apigatewayv2.get-integration-result/integration-method :portkey.aws.apigatewayv2.get-integration-result/integration-response-selection-expression :portkey.aws.apigatewayv2/passthrough-behavior :portkey.aws.apigatewayv2.get-integration-result/credentials-arn :portkey.aws.apigatewayv2.get-integration-result/integration-id :portkey.aws.apigatewayv2.get-integration-result/integration-uri :portkey.aws.apigatewayv2/integration-type :portkey.aws.apigatewayv2.get-integration-result/description :portkey.aws.apigatewayv2/connection-type :portkey.aws.apigatewayv2.get-integration-result/template-selection-expression :portkey.aws.apigatewayv2/content-handling-strategy]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-authorizers-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-authorizers-request/max-results (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-authorizers-request/next-token (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-authorizers-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.get-authorizers-request/api-id] :opt-un [:portkey.aws.apigatewayv2.get-authorizers-request/max-results :portkey.aws.apigatewayv2.get-authorizers-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.model/content-type (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-256))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.model/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.model/model-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.model/name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.model/schema (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-32-k))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/model (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.model/name] :opt-un [:portkey.aws.apigatewayv2.model/content-type :portkey.aws.apigatewayv2.model/description :portkey.aws.apigatewayv2.model/model-id :portkey.aws.apigatewayv2.model/schema]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-model-input/content-type (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-256))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-model-input/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-model-input/name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-model-input/schema (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-32-k))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-model-input (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.create-model-input/schema :portkey.aws.apigatewayv2.create-model-input/name] :opt-un [:portkey.aws.apigatewayv2.create-model-input/content-type :portkey.aws.apigatewayv2.create-model-input/description]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-domain-name-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-domain-name-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.update-domain-name-request/domain-name] :opt-un [:portkey.aws.apigatewayv2/domain-name-configurations]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/authorizer-type #{:request "REQUEST"})

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-response-input/model-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-response-input/response-models (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-models))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-response-input/response-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-response-input/route-response-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-route-response-input (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.update-route-response-input/model-selection-expression :portkey.aws.apigatewayv2.update-route-response-input/response-models :portkey.aws.apigatewayv2.update-route-response-input/response-parameters :portkey.aws.apigatewayv2.update-route-response-input/route-response-key]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/list-of-stage (clojure.spec.alpha/coll-of :portkey.aws.apigatewayv2/stage))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.domain-names/items (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-domain-name))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/domain-names (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.domain-names/items :portkey.aws.apigatewayv2/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/list-of-string (clojure.spec.alpha/coll-of :portkey.aws.apigatewayv2/string))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-response-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-response-request/integration-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-response-request/integration-response-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-response-request/integration-response-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-response-request/response-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integration-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-response-request/response-templates (clojure.spec.alpha/and :portkey.aws.apigatewayv2/template-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-response-request/template-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-integration-response-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.update-integration-response-request/api-id :portkey.aws.apigatewayv2.update-integration-response-request/integration-response-id :portkey.aws.apigatewayv2.update-integration-response-request/integration-id] :opt-un [:portkey.aws.apigatewayv2/content-handling-strategy :portkey.aws.apigatewayv2.update-integration-response-request/integration-response-key :portkey.aws.apigatewayv2.update-integration-response-request/response-parameters :portkey.aws.apigatewayv2.update-integration-response-request/response-templates :portkey.aws.apigatewayv2.update-integration-response-request/template-selection-expression]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/string-with-length-between-1-and-256 (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.conflict-exception/message (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/conflict-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.conflict-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-domain-name-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-domain-name-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.get-domain-name-request/domain-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-result/timeout-in-millis (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integer-with-length-between-50-and-29000))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-result/request-templates (clojure.spec.alpha/and :portkey.aws.apigatewayv2/template-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-result/connection-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-result/request-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integration-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-result/integration-method (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-result/integration-response-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-result/credentials-arn (clojure.spec.alpha/and :portkey.aws.apigatewayv2/arn))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-result/integration-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-result/integration-uri (clojure.spec.alpha/and :portkey.aws.apigatewayv2/uri-with-length-between-1-and-2048))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-result/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-result/template-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-integration-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.update-integration-result/timeout-in-millis :portkey.aws.apigatewayv2.update-integration-result/request-templates :portkey.aws.apigatewayv2.update-integration-result/connection-id :portkey.aws.apigatewayv2.update-integration-result/request-parameters :portkey.aws.apigatewayv2.update-integration-result/integration-method :portkey.aws.apigatewayv2.update-integration-result/integration-response-selection-expression :portkey.aws.apigatewayv2/passthrough-behavior :portkey.aws.apigatewayv2.update-integration-result/credentials-arn :portkey.aws.apigatewayv2.update-integration-result/integration-id :portkey.aws.apigatewayv2.update-integration-result/integration-uri :portkey.aws.apigatewayv2/integration-type :portkey.aws.apigatewayv2.update-integration-result/description :portkey.aws.apigatewayv2/connection-type :portkey.aws.apigatewayv2.update-integration-result/template-selection-expression :portkey.aws.apigatewayv2/content-handling-strategy]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/integer-with-length-between-0-and-3600 (clojure.spec.alpha/int-in 0 3600))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-responses-response/items (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-integration-response))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-integration-responses-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.get-integration-responses-response/items :portkey.aws.apigatewayv2/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-deployment-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-deployment-request/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-deployment-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-deployment-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.create-deployment-request/api-id] :opt-un [:portkey.aws.apigatewayv2.create-deployment-request/description :portkey.aws.apigatewayv2.create-deployment-request/stage-name]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-response-input/integration-response-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-response-input/response-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integration-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-response-input/response-templates (clojure.spec.alpha/and :portkey.aws.apigatewayv2/template-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-response-input/template-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-integration-response-input (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2/content-handling-strategy :portkey.aws.apigatewayv2.update-integration-response-input/integration-response-key :portkey.aws.apigatewayv2.update-integration-response-input/response-parameters :portkey.aws.apigatewayv2.update-integration-response-input/response-templates :portkey.aws.apigatewayv2.update-integration-response-input/template-selection-expression]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-response-response/integration-response-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-response-response/integration-response-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-response-response/response-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integration-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-response-response/response-templates (clojure.spec.alpha/and :portkey.aws.apigatewayv2/template-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-response-response/template-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-integration-response-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2/content-handling-strategy :portkey.aws.apigatewayv2.update-integration-response-response/integration-response-id :portkey.aws.apigatewayv2.update-integration-response-response/integration-response-key :portkey.aws.apigatewayv2.update-integration-response-response/response-parameters :portkey.aws.apigatewayv2.update-integration-response-response/response-templates :portkey.aws.apigatewayv2.update-integration-response-response/template-selection-expression]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-input/api-key-required (clojure.spec.alpha/and :portkey.aws.apigatewayv2/boolean))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-input/operation-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-input/request-models (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-models))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-input/request-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-input/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-input/route-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-input/model-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-input/route-response-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-input/target (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-route-input (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.update-route-input/api-key-required :portkey.aws.apigatewayv2.update-route-input/operation-name :portkey.aws.apigatewayv2.update-route-input/request-models :portkey.aws.apigatewayv2.update-route-input/request-parameters :portkey.aws.apigatewayv2.update-route-input/authorizer-id :portkey.aws.apigatewayv2.update-route-input/route-key :portkey.aws.apigatewayv2.update-route-input/model-selection-expression :portkey.aws.apigatewayv2/authorization-type :portkey.aws.apigatewayv2/authorization-scopes :portkey.aws.apigatewayv2.update-route-input/route-response-selection-expression :portkey.aws.apigatewayv2.update-route-input/target]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-authorizer-response/authorizer-credentials-arn (clojure.spec.alpha/and :portkey.aws.apigatewayv2/arn))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-authorizer-response/identity-validation-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-authorizer-response/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-authorizer-response/identity-source (clojure.spec.alpha/and :portkey.aws.apigatewayv2/identity-source-list))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-authorizer-response/provider-arns (clojure.spec.alpha/and :portkey.aws.apigatewayv2/provider-arn-list))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-authorizer-response/authorizer-result-ttl-in-seconds (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integer-with-length-between-0-and-3600))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-authorizer-response/name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-authorizer-response/authorizer-uri (clojure.spec.alpha/and :portkey.aws.apigatewayv2/uri-with-length-between-1-and-2048))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-authorizer-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.update-authorizer-response/authorizer-credentials-arn :portkey.aws.apigatewayv2.update-authorizer-response/identity-validation-expression :portkey.aws.apigatewayv2.update-authorizer-response/authorizer-id :portkey.aws.apigatewayv2.update-authorizer-response/identity-source :portkey.aws.apigatewayv2/authorizer-type :portkey.aws.apigatewayv2.update-authorizer-response/provider-arns :portkey.aws.apigatewayv2.update-authorizer-response/authorizer-result-ttl-in-seconds :portkey.aws.apigatewayv2.update-authorizer-response/name :portkey.aws.apigatewayv2.update-authorizer-response/authorizer-uri]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integrations-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integrations-request/max-results (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integrations-request/next-token (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-integrations-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.get-integrations-request/api-id] :opt-un [:portkey.aws.apigatewayv2.get-integrations-request/max-results :portkey.aws.apigatewayv2.get-integrations-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-mapping-input/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-mapping-input/api-mapping-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-mapping-input/stage (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-api-mapping-input (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.create-api-mapping-input/stage :portkey.aws.apigatewayv2.create-api-mapping-input/api-id] :opt-un [:portkey.aws.apigatewayv2.create-api-mapping-input/api-mapping-key]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.not-found-exception/message (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.not-found-exception/resource-type (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/not-found-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.not-found-exception/message :portkey.aws.apigatewayv2.not-found-exception/resource-type]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-deployment-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-deployment-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.get-deployment-request/api-id :portkey.aws.apigatewayv2.get-deployment-request/deployment-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.delete-route-response-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.delete-route-response-request/route-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.delete-route-response-request/route-response-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/delete-route-response-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.delete-route-response-request/route-response-id :portkey.aws.apigatewayv2.delete-route-response-request/api-id :portkey.aws.apigatewayv2.delete-route-response-request/route-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.delete-route-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.delete-route-request/route-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/delete-route-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.delete-route-request/api-id :portkey.aws.apigatewayv2.delete-route-request/route-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.access-log-settings/destination-arn (clojure.spec.alpha/and :portkey.aws.apigatewayv2/arn))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.access-log-settings/format (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/access-log-settings (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.access-log-settings/destination-arn :portkey.aws.apigatewayv2.access-log-settings/format]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/authorization-type #{"CUSTOM" :aws-iam "AWS_IAM" :custom "NONE" :none})

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/template-map (clojure.spec.alpha/map-of :portkey.aws.apigatewayv2/string :portkey.aws.apigatewayv2/string-with-length-between-0-and-32-k))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-model-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-model-request/content-type (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-256))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-model-request/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-model-request/model-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-model-request/name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-model-request/schema (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-32-k))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-model-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.update-model-request/model-id :portkey.aws.apigatewayv2.update-model-request/api-id] :opt-un [:portkey.aws.apigatewayv2.update-model-request/content-type :portkey.aws.apigatewayv2.update-model-request/description :portkey.aws.apigatewayv2.update-model-request/name :portkey.aws.apigatewayv2.update-model-request/schema]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/domain-name-configurations (clojure.spec.alpha/coll-of :portkey.aws.apigatewayv2/domain-name-configuration))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.integrations/items (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-integration))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/integrations (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.integrations/items :portkey.aws.apigatewayv2/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-mapping-response/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-mapping-response/api-mapping-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-mapping-response/api-mapping-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-mapping-response/stage (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-api-mapping-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.update-api-mapping-response/api-id :portkey.aws.apigatewayv2.update-api-mapping-response/api-mapping-id :portkey.aws.apigatewayv2.update-api-mapping-response/api-mapping-key :portkey.aws.apigatewayv2.update-api-mapping-response/stage]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-stage-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-stage-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-stage-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.get-stage-request/stage-name :portkey.aws.apigatewayv2.get-stage-request/api-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-domain-name-response/api-mapping-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-domain-name-response/domain-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-512))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-domain-name-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.create-domain-name-response/api-mapping-selection-expression :portkey.aws.apigatewayv2.create-domain-name-response/domain-name :portkey.aws.apigatewayv2/domain-name-configurations]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-stage-response/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-stage-response/route-settings (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-settings-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-stage-response/last-updated-date (clojure.spec.alpha/and :portkey.aws.apigatewayv2/timestamp-iso-8601))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-stage-response/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-stage-response/deployment-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-stage-response/created-date (clojure.spec.alpha/and :portkey.aws.apigatewayv2/timestamp-iso-8601))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-stage-response/default-route-settings (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-settings))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-stage-response/stage-variables (clojure.spec.alpha/and :portkey.aws.apigatewayv2/stage-variables-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-stage-response/stage-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-stage-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.update-stage-response/client-certificate-id :portkey.aws.apigatewayv2.update-stage-response/route-settings :portkey.aws.apigatewayv2.update-stage-response/last-updated-date :portkey.aws.apigatewayv2.update-stage-response/description :portkey.aws.apigatewayv2.update-stage-response/deployment-id :portkey.aws.apigatewayv2.update-stage-response/created-date :portkey.aws.apigatewayv2/access-log-settings :portkey.aws.apigatewayv2.update-stage-response/default-route-settings :portkey.aws.apigatewayv2.update-stage-response/stage-variables :portkey.aws.apigatewayv2.update-stage-response/stage-name]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/route-models (clojure.spec.alpha/map-of :portkey.aws.apigatewayv2/string :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-response-response/model-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-response-response/response-models (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-models))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-response-response/response-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-response-response/route-response-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-response-response/route-response-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-route-response-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.update-route-response-response/model-selection-expression :portkey.aws.apigatewayv2.update-route-response-response/response-models :portkey.aws.apigatewayv2.update-route-response-response/response-parameters :portkey.aws.apigatewayv2.update-route-response-response/route-response-id :portkey.aws.apigatewayv2.update-route-response-response/route-response-key]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-response-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-response-request/model-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-response-request/response-models (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-models))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-response-request/response-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-response-request/route-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-response-request/route-response-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-route-response-request/route-response-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-route-response-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.update-route-response-request/route-response-id :portkey.aws.apigatewayv2.update-route-response-request/api-id :portkey.aws.apigatewayv2.update-route-response-request/route-id] :opt-un [:portkey.aws.apigatewayv2.update-route-response-request/model-selection-expression :portkey.aws.apigatewayv2.update-route-response-request/response-models :portkey.aws.apigatewayv2.update-route-response-request/response-parameters :portkey.aws.apigatewayv2.update-route-response-request/route-response-key]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/route-parameters (clojure.spec.alpha/map-of :portkey.aws.apigatewayv2/string :portkey.aws.apigatewayv2/parameter-constraints))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/connection-type #{:vpc-link "INTERNET" :internet "VPC_LINK"})

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/authorization-scopes (clojure.spec.alpha/coll-of :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-authorizer-request/authorizer-credentials-arn (clojure.spec.alpha/and :portkey.aws.apigatewayv2/arn))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-authorizer-request/identity-validation-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-authorizer-request/identity-source (clojure.spec.alpha/and :portkey.aws.apigatewayv2/identity-source-list))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-authorizer-request/provider-arns (clojure.spec.alpha/and :portkey.aws.apigatewayv2/provider-arn-list))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-authorizer-request/authorizer-result-ttl-in-seconds (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integer-with-length-between-0-and-3600))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-authorizer-request/name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-authorizer-request/authorizer-uri (clojure.spec.alpha/and :portkey.aws.apigatewayv2/uri-with-length-between-1-and-2048))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-authorizer-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-authorizer-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.create-authorizer-request/api-id :portkey.aws.apigatewayv2.create-authorizer-request/authorizer-uri :portkey.aws.apigatewayv2/authorizer-type :portkey.aws.apigatewayv2.create-authorizer-request/identity-source :portkey.aws.apigatewayv2.create-authorizer-request/name] :opt-un [:portkey.aws.apigatewayv2.create-authorizer-request/authorizer-credentials-arn :portkey.aws.apigatewayv2.create-authorizer-request/identity-validation-expression :portkey.aws.apigatewayv2.create-authorizer-request/provider-arns :portkey.aws.apigatewayv2.create-authorizer-request/authorizer-result-ttl-in-seconds]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/selection-key (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/integration-parameters (clojure.spec.alpha/map-of :portkey.aws.apigatewayv2/string :portkey.aws.apigatewayv2/string-with-length-between-1-and-512))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/list-of-model (clojure.spec.alpha/coll-of :portkey.aws.apigatewayv2/model))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-domain-names-request/max-results (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-domain-names-request/next-token (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-domain-names-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.get-domain-names-request/max-results :portkey.aws.apigatewayv2.get-domain-names-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-response/warnings (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-response/route-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-response/disable-schema-validation (clojure.spec.alpha/and :portkey.aws.apigatewayv2/boolean))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-response/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-response/created-date (clojure.spec.alpha/and :portkey.aws.apigatewayv2/timestamp-iso-8601))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-response/api-endpoint (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-response/version (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-response/name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-response/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-response/api-key-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-api-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.create-api-response/warnings :portkey.aws.apigatewayv2.create-api-response/route-selection-expression :portkey.aws.apigatewayv2/protocol-type :portkey.aws.apigatewayv2.create-api-response/disable-schema-validation :portkey.aws.apigatewayv2.create-api-response/description :portkey.aws.apigatewayv2.create-api-response/created-date :portkey.aws.apigatewayv2.create-api-response/api-endpoint :portkey.aws.apigatewayv2.create-api-response/version :portkey.aws.apigatewayv2.create-api-response/name :portkey.aws.apigatewayv2.create-api-response/api-id :portkey.aws.apigatewayv2.create-api-response/api-key-selection-expression]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/list-of-route-response (clojure.spec.alpha/coll-of :portkey.aws.apigatewayv2/route-response))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-apis-response/items (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-api))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-apis-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.get-apis-response/items :portkey.aws.apigatewayv2/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/timestamp-iso-8601 clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-model-template-response/value (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-model-template-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.get-model-template-response/value]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-stage-request/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-stage-request/route-settings (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-settings-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-stage-request/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-stage-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-stage-request/default-route-settings (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-settings))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-stage-request/stage-variables (clojure.spec.alpha/and :portkey.aws.apigatewayv2/stage-variables-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-stage-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-stage-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-stage-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.create-stage-request/api-id :portkey.aws.apigatewayv2.create-stage-request/stage-name] :opt-un [:portkey.aws.apigatewayv2.create-stage-request/client-certificate-id :portkey.aws.apigatewayv2.create-stage-request/route-settings :portkey.aws.apigatewayv2.create-stage-request/description :portkey.aws.apigatewayv2.create-stage-request/deployment-id :portkey.aws.apigatewayv2/access-log-settings :portkey.aws.apigatewayv2.create-stage-request/default-route-settings :portkey.aws.apigatewayv2.create-stage-request/stage-variables]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-response-input/integration-response-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-response-input/response-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integration-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-response-input/response-templates (clojure.spec.alpha/and :portkey.aws.apigatewayv2/template-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-response-input/template-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-integration-response-input (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.create-integration-response-input/integration-response-key] :opt-un [:portkey.aws.apigatewayv2/content-handling-strategy :portkey.aws.apigatewayv2.create-integration-response-input/response-parameters :portkey.aws.apigatewayv2.create-integration-response-input/response-templates :portkey.aws.apigatewayv2.create-integration-response-input/template-selection-expression]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.authorizers/items (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-authorizer))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/authorizers (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.authorizers/items :portkey.aws.apigatewayv2/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-routes-response/items (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-route))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-routes-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.get-routes-response/items :portkey.aws.apigatewayv2/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-models-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-models-request/max-results (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-models-request/next-token (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-models-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.get-models-request/api-id] :opt-un [:portkey.aws.apigatewayv2.get-models-request/max-results :portkey.aws.apigatewayv2.get-models-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-domain-name-response/api-mapping-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-domain-name-response/domain-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-512))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-domain-name-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.get-domain-name-response/api-mapping-selection-expression :portkey.aws.apigatewayv2.get-domain-name-response/domain-name :portkey.aws.apigatewayv2/domain-name-configurations]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/list-of-route (clojure.spec.alpha/coll-of :portkey.aws.apigatewayv2/route))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-deployment-input/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-deployment-input (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.update-deployment-input/description]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-authorizer-response/authorizer-credentials-arn (clojure.spec.alpha/and :portkey.aws.apigatewayv2/arn))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-authorizer-response/identity-validation-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-authorizer-response/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-authorizer-response/identity-source (clojure.spec.alpha/and :portkey.aws.apigatewayv2/identity-source-list))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-authorizer-response/provider-arns (clojure.spec.alpha/and :portkey.aws.apigatewayv2/provider-arn-list))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-authorizer-response/authorizer-result-ttl-in-seconds (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integer-with-length-between-0-and-3600))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-authorizer-response/name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-authorizer-response/authorizer-uri (clojure.spec.alpha/and :portkey.aws.apigatewayv2/uri-with-length-between-1-and-2048))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-authorizer-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.create-authorizer-response/authorizer-credentials-arn :portkey.aws.apigatewayv2.create-authorizer-response/identity-validation-expression :portkey.aws.apigatewayv2.create-authorizer-response/authorizer-id :portkey.aws.apigatewayv2.create-authorizer-response/identity-source :portkey.aws.apigatewayv2/authorizer-type :portkey.aws.apigatewayv2.create-authorizer-response/provider-arns :portkey.aws.apigatewayv2.create-authorizer-response/authorizer-result-ttl-in-seconds :portkey.aws.apigatewayv2.create-authorizer-response/name :portkey.aws.apigatewayv2.create-authorizer-response/authorizer-uri]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/deployment-status #{:pending "PENDING" :deployed "FAILED" "DEPLOYED" :failed})

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-deployments-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-deployments-request/max-results (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-deployments-request/next-token (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-deployments-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.get-deployments-request/api-id] :opt-un [:portkey.aws.apigatewayv2.get-deployments-request/max-results :portkey.aws.apigatewayv2.get-deployments-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/list-of-integration (clojure.spec.alpha/coll-of :portkey.aws.apigatewayv2/integration))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.delete-integration-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.delete-integration-request/integration-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/delete-integration-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.delete-integration-request/api-id :portkey.aws.apigatewayv2.delete-integration-request/integration-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/integer clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-authorizers-response/items (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-authorizer))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-authorizers-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.get-authorizers-response/items :portkey.aws.apigatewayv2/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.domain-name/api-mapping-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.domain-name/domain-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-512))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/domain-name (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.domain-name/domain-name] :opt-un [:portkey.aws.apigatewayv2.domain-name/api-mapping-selection-expression :portkey.aws.apigatewayv2/domain-name-configurations]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.route-responses/items (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-route-response))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/route-responses (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.route-responses/items :portkey.aws.apigatewayv2/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/string-with-length-between-1-and-1024 (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/timestamp-unix clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-deployment-response/created-date (clojure.spec.alpha/and :portkey.aws.apigatewayv2/timestamp-iso-8601))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-deployment-response/deployment-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-deployment-response/deployment-status-message (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-deployment-response/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-deployment-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.create-deployment-response/created-date :portkey.aws.apigatewayv2.create-deployment-response/deployment-id :portkey.aws.apigatewayv2/deployment-status :portkey.aws.apigatewayv2.create-deployment-response/deployment-status-message :portkey.aws.apigatewayv2.create-deployment-response/description]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-integration-request/integration-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-integration-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.get-integration-request/api-id :portkey.aws.apigatewayv2.get-integration-request/integration-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-responses-response/items (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-route-response))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-route-responses-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.get-route-responses-response/items :portkey.aws.apigatewayv2/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/list-of-authorizer (clojure.spec.alpha/coll-of :portkey.aws.apigatewayv2/authorizer))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-response-response/model-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-response-response/response-models (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-models))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-response-response/response-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-response-response/route-response-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-response-response/route-response-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-route-response-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.create-route-response-response/model-selection-expression :portkey.aws.apigatewayv2.create-route-response-response/response-models :portkey.aws.apigatewayv2.create-route-response-response/response-parameters :portkey.aws.apigatewayv2.create-route-response-response/route-response-id :portkey.aws.apigatewayv2.create-route-response-response/route-response-key]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-stage-input/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-stage-input/default-route-settings (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-settings))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-stage-input/deployment-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-stage-input/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-stage-input/route-settings (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-settings-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-stage-input/stage-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-stage-input/stage-variables (clojure.spec.alpha/and :portkey.aws.apigatewayv2/stage-variables-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-stage-input (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.create-stage-input/stage-name] :opt-un [:portkey.aws.apigatewayv2/access-log-settings :portkey.aws.apigatewayv2.create-stage-input/client-certificate-id :portkey.aws.apigatewayv2.create-stage-input/default-route-settings :portkey.aws.apigatewayv2.create-stage-input/deployment-id :portkey.aws.apigatewayv2.create-stage-input/description :portkey.aws.apigatewayv2.create-stage-input/route-settings :portkey.aws.apigatewayv2.create-stage-input/stage-variables]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-models-response/items (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-model))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-models-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.get-models-response/items :portkey.aws.apigatewayv2/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/logging-level #{:false "ERROR" "false" :info :error "INFO"})

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-deployment-response/created-date (clojure.spec.alpha/and :portkey.aws.apigatewayv2/timestamp-iso-8601))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-deployment-response/deployment-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-deployment-response/deployment-status-message (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-deployment-response/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-deployment-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.get-deployment-response/created-date :portkey.aws.apigatewayv2.get-deployment-response/deployment-id :portkey.aws.apigatewayv2/deployment-status :portkey.aws.apigatewayv2.get-deployment-response/deployment-status-message :portkey.aws.apigatewayv2.get-deployment-response/description]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-responses-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-responses-request/max-results (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-responses-request/next-token (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-route-responses-request/route-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-route-responses-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.get-route-responses-request/route-id :portkey.aws.apigatewayv2.get-route-responses-request/api-id] :opt-un [:portkey.aws.apigatewayv2.get-route-responses-request/max-results :portkey.aws.apigatewayv2.get-route-responses-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-domain-name-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-512))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-domain-name-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.create-domain-name-request/domain-name] :opt-un [:portkey.aws.apigatewayv2/domain-name-configurations]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-input/api-key-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-input/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-input/disable-schema-validation (clojure.spec.alpha/and :portkey.aws.apigatewayv2/boolean))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-input/name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-input/route-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-api-input/version (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-api-input (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.update-api-input/api-key-selection-expression :portkey.aws.apigatewayv2.update-api-input/description :portkey.aws.apigatewayv2.update-api-input/disable-schema-validation :portkey.aws.apigatewayv2.update-api-input/name :portkey.aws.apigatewayv2.update-api-input/route-selection-expression :portkey.aws.apigatewayv2.update-api-input/version]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.integration/timeout-in-millis (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integer-with-length-between-50-and-29000))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.integration/request-templates (clojure.spec.alpha/and :portkey.aws.apigatewayv2/template-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.integration/connection-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.integration/request-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integration-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.integration/integration-method (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.integration/integration-response-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.integration/credentials-arn (clojure.spec.alpha/and :portkey.aws.apigatewayv2/arn))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.integration/integration-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.integration/integration-uri (clojure.spec.alpha/and :portkey.aws.apigatewayv2/uri-with-length-between-1-and-2048))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.integration/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.integration/template-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/integration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.integration/timeout-in-millis :portkey.aws.apigatewayv2.integration/request-templates :portkey.aws.apigatewayv2.integration/connection-id :portkey.aws.apigatewayv2.integration/request-parameters :portkey.aws.apigatewayv2.integration/integration-method :portkey.aws.apigatewayv2.integration/integration-response-selection-expression :portkey.aws.apigatewayv2/passthrough-behavior :portkey.aws.apigatewayv2.integration/credentials-arn :portkey.aws.apigatewayv2.integration/integration-id :portkey.aws.apigatewayv2.integration/integration-uri :portkey.aws.apigatewayv2/integration-type :portkey.aws.apigatewayv2.integration/description :portkey.aws.apigatewayv2/connection-type :portkey.aws.apigatewayv2.integration/template-selection-expression :portkey.aws.apigatewayv2/content-handling-strategy]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-api-mappings-response/items (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-api-mapping))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-api-mappings-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.get-api-mappings-response/items :portkey.aws.apigatewayv2/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-routes-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-routes-request/max-results (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-routes-request/next-token (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-routes-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.get-routes-request/api-id] :opt-un [:portkey.aws.apigatewayv2.get-routes-request/max-results :portkey.aws.apigatewayv2.get-routes-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024 (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.delete-deployment-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.delete-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/delete-deployment-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.delete-deployment-request/api-id :portkey.aws.apigatewayv2.delete-deployment-request/deployment-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-domain-name-input (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2/domain-name-configurations]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-response-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-response-request/integration-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-response-request/integration-response-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-response-request/response-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integration-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-response-request/response-templates (clojure.spec.alpha/and :portkey.aws.apigatewayv2/template-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-response-request/template-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-integration-response-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.create-integration-response-request/api-id :portkey.aws.apigatewayv2.create-integration-response-request/integration-id :portkey.aws.apigatewayv2.create-integration-response-request/integration-response-key] :opt-un [:portkey.aws.apigatewayv2/content-handling-strategy :portkey.aws.apigatewayv2.create-integration-response-request/response-parameters :portkey.aws.apigatewayv2.create-integration-response-request/response-templates :portkey.aws.apigatewayv2.create-integration-response-request/template-selection-expression]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-api-mapping-request/api-mapping-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-api-mapping-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-api-mapping-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.get-api-mapping-request/api-mapping-id :portkey.aws.apigatewayv2.get-api-mapping-request/domain-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.integration-response/integration-response-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.integration-response/integration-response-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.integration-response/response-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integration-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.integration-response/response-templates (clojure.spec.alpha/and :portkey.aws.apigatewayv2/template-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.integration-response/template-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/integration-response (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.integration-response/integration-response-key] :opt-un [:portkey.aws.apigatewayv2/content-handling-strategy :portkey.aws.apigatewayv2.integration-response/integration-response-id :portkey.aws.apigatewayv2.integration-response/response-parameters :portkey.aws.apigatewayv2.integration-response/response-templates :portkey.aws.apigatewayv2.integration-response/template-selection-expression]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-api-response/warnings (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-api-response/route-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-api-response/disable-schema-validation (clojure.spec.alpha/and :portkey.aws.apigatewayv2/boolean))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-api-response/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-api-response/created-date (clojure.spec.alpha/and :portkey.aws.apigatewayv2/timestamp-iso-8601))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-api-response/api-endpoint (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-api-response/version (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-api-response/name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-api-response/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-api-response/api-key-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-api-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.get-api-response/warnings :portkey.aws.apigatewayv2.get-api-response/route-selection-expression :portkey.aws.apigatewayv2/protocol-type :portkey.aws.apigatewayv2.get-api-response/disable-schema-validation :portkey.aws.apigatewayv2.get-api-response/description :portkey.aws.apigatewayv2.get-api-response/created-date :portkey.aws.apigatewayv2.get-api-response/api-endpoint :portkey.aws.apigatewayv2.get-api-response/version :portkey.aws.apigatewayv2.get-api-response/name :portkey.aws.apigatewayv2.get-api-response/api-id :portkey.aws.apigatewayv2.get-api-response/api-key-selection-expression]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/string-with-length-between-0-and-2048 (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/string-with-length-between-1-and-64 (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/list-of-api-mapping (clojure.spec.alpha/coll-of :portkey.aws.apigatewayv2/api-mapping))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-domain-name-input/domain-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-512))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-domain-name-input (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.create-domain-name-input/domain-name] :opt-un [:portkey.aws.apigatewayv2/domain-name-configurations]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-response-response/integration-response-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-response-response/integration-response-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-response-response/response-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integration-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-response-response/response-templates (clojure.spec.alpha/and :portkey.aws.apigatewayv2/template-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-response-response/template-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-integration-response-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2/content-handling-strategy :portkey.aws.apigatewayv2.create-integration-response-response/integration-response-id :portkey.aws.apigatewayv2.create-integration-response-response/integration-response-key :portkey.aws.apigatewayv2.create-integration-response-response/response-parameters :portkey.aws.apigatewayv2.create-integration-response-response/response-templates :portkey.aws.apigatewayv2.create-integration-response-response/template-selection-expression]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-input/timeout-in-millis (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integer-with-length-between-50-and-29000))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-input/request-templates (clojure.spec.alpha/and :portkey.aws.apigatewayv2/template-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-input/connection-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-input/request-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integration-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-input/integration-method (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-input/credentials-arn (clojure.spec.alpha/and :portkey.aws.apigatewayv2/arn))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-input/integration-uri (clojure.spec.alpha/and :portkey.aws.apigatewayv2/uri-with-length-between-1-and-2048))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-input/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-input/template-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-integration-input (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2/integration-type] :opt-un [:portkey.aws.apigatewayv2.create-integration-input/timeout-in-millis :portkey.aws.apigatewayv2.create-integration-input/request-templates :portkey.aws.apigatewayv2.create-integration-input/connection-id :portkey.aws.apigatewayv2.create-integration-input/request-parameters :portkey.aws.apigatewayv2.create-integration-input/integration-method :portkey.aws.apigatewayv2/passthrough-behavior :portkey.aws.apigatewayv2.create-integration-input/credentials-arn :portkey.aws.apigatewayv2.create-integration-input/integration-uri :portkey.aws.apigatewayv2.create-integration-input/description :portkey.aws.apigatewayv2/connection-type :portkey.aws.apigatewayv2.create-integration-input/template-selection-expression :portkey.aws.apigatewayv2/content-handling-strategy]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-request/timeout-in-millis (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integer-with-length-between-50-and-29000))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-request/request-templates (clojure.spec.alpha/and :portkey.aws.apigatewayv2/template-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-request/connection-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-request/request-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integration-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-request/integration-method (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-request/credentials-arn (clojure.spec.alpha/and :portkey.aws.apigatewayv2/arn))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-request/integration-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-request/integration-uri (clojure.spec.alpha/and :portkey.aws.apigatewayv2/uri-with-length-between-1-and-2048))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-request/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-request/template-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-integration-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-integration-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.update-integration-request/api-id :portkey.aws.apigatewayv2.update-integration-request/integration-id] :opt-un [:portkey.aws.apigatewayv2.update-integration-request/timeout-in-millis :portkey.aws.apigatewayv2.update-integration-request/request-templates :portkey.aws.apigatewayv2.update-integration-request/connection-id :portkey.aws.apigatewayv2.update-integration-request/request-parameters :portkey.aws.apigatewayv2.update-integration-request/integration-method :portkey.aws.apigatewayv2/passthrough-behavior :portkey.aws.apigatewayv2.update-integration-request/credentials-arn :portkey.aws.apigatewayv2.update-integration-request/integration-uri :portkey.aws.apigatewayv2/integration-type :portkey.aws.apigatewayv2.update-integration-request/description :portkey.aws.apigatewayv2/connection-type :portkey.aws.apigatewayv2.update-integration-request/template-selection-expression :portkey.aws.apigatewayv2/content-handling-strategy]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-response-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-response-request/model-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-response-request/response-models (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-models))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-response-request/response-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-response-request/route-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-route-response-request/route-response-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-route-response-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.create-route-response-request/api-id :portkey.aws.apigatewayv2.create-route-response-request/route-id :portkey.aws.apigatewayv2.create-route-response-request/route-response-key] :opt-un [:portkey.aws.apigatewayv2.create-route-response-request/model-selection-expression :portkey.aws.apigatewayv2.create-route-response-request/response-models :portkey.aws.apigatewayv2.create-route-response-request/response-parameters]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-api-mapping-response/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-api-mapping-response/api-mapping-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-api-mapping-response/api-mapping-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-api-mapping-response/stage (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-api-mapping-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.get-api-mapping-response/api-id :portkey.aws.apigatewayv2.get-api-mapping-response/api-mapping-id :portkey.aws.apigatewayv2.get-api-mapping-response/api-mapping-key :portkey.aws.apigatewayv2.get-api-mapping-response/stage]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-mapping-response/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-mapping-response/api-mapping-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-mapping-response/api-mapping-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-mapping-response/stage (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-api-mapping-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.create-api-mapping-response/api-id :portkey.aws.apigatewayv2.create-api-mapping-response/api-mapping-id :portkey.aws.apigatewayv2.create-api-mapping-response/api-mapping-key :portkey.aws.apigatewayv2.create-api-mapping-response/stage]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.models/items (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-model))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/models (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.models/items :portkey.aws.apigatewayv2/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.delete-authorizer-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.delete-authorizer-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/delete-authorizer-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.delete-authorizer-request/authorizer-id :portkey.aws.apigatewayv2.delete-authorizer-request/api-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.stage/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.stage/route-settings (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-settings-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.stage/last-updated-date (clojure.spec.alpha/and :portkey.aws.apigatewayv2/timestamp-iso-8601))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.stage/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.stage/deployment-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.stage/created-date (clojure.spec.alpha/and :portkey.aws.apigatewayv2/timestamp-iso-8601))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.stage/default-route-settings (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-settings))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.stage/stage-variables (clojure.spec.alpha/and :portkey.aws.apigatewayv2/stage-variables-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.stage/stage-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/stage (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.stage/stage-name] :opt-un [:portkey.aws.apigatewayv2.stage/client-certificate-id :portkey.aws.apigatewayv2.stage/route-settings :portkey.aws.apigatewayv2.stage/last-updated-date :portkey.aws.apigatewayv2.stage/description :portkey.aws.apigatewayv2.stage/deployment-id :portkey.aws.apigatewayv2.stage/created-date :portkey.aws.apigatewayv2/access-log-settings :portkey.aws.apigatewayv2.stage/default-route-settings :portkey.aws.apigatewayv2.stage/stage-variables]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-authorizer-request/authorizer-credentials-arn (clojure.spec.alpha/and :portkey.aws.apigatewayv2/arn))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-authorizer-request/identity-validation-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-authorizer-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-authorizer-request/identity-source (clojure.spec.alpha/and :portkey.aws.apigatewayv2/identity-source-list))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-authorizer-request/provider-arns (clojure.spec.alpha/and :portkey.aws.apigatewayv2/provider-arn-list))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-authorizer-request/authorizer-result-ttl-in-seconds (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integer-with-length-between-0-and-3600))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-authorizer-request/name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-authorizer-request/authorizer-uri (clojure.spec.alpha/and :portkey.aws.apigatewayv2/uri-with-length-between-1-and-2048))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-authorizer-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-authorizer-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.update-authorizer-request/authorizer-id :portkey.aws.apigatewayv2.update-authorizer-request/api-id] :opt-un [:portkey.aws.apigatewayv2.update-authorizer-request/authorizer-credentials-arn :portkey.aws.apigatewayv2.update-authorizer-request/identity-validation-expression :portkey.aws.apigatewayv2.update-authorizer-request/identity-source :portkey.aws.apigatewayv2/authorizer-type :portkey.aws.apigatewayv2.update-authorizer-request/provider-arns :portkey.aws.apigatewayv2.update-authorizer-request/authorizer-result-ttl-in-seconds :portkey.aws.apigatewayv2.update-authorizer-request/name :portkey.aws.apigatewayv2.update-authorizer-request/authorizer-uri]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/id (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/list-of-domain-name (clojure.spec.alpha/coll-of :portkey.aws.apigatewayv2/domain-name))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/content-handling-strategy #{"CONVERT_TO_BINARY" :convert-to-text :convert-to-binary "CONVERT_TO_TEXT"})

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.parameter-constraints/required (clojure.spec.alpha/and :portkey.aws.apigatewayv2/boolean))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/parameter-constraints (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.parameter-constraints/required]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.route-response/model-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.route-response/response-models (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-models))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.route-response/response-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/route-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.route-response/route-response-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.route-response/route-response-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/route-response (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.route-response/route-response-key] :opt-un [:portkey.aws.apigatewayv2.route-response/model-selection-expression :portkey.aws.apigatewayv2.route-response/response-models :portkey.aws.apigatewayv2.route-response/response-parameters :portkey.aws.apigatewayv2.route-response/route-response-id]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-result/timeout-in-millis (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integer-with-length-between-50-and-29000))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-result/request-templates (clojure.spec.alpha/and :portkey.aws.apigatewayv2/template-map))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-result/connection-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-result/request-parameters (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integration-parameters))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-result/integration-method (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-64))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-result/integration-response-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-result/credentials-arn (clojure.spec.alpha/and :portkey.aws.apigatewayv2/arn))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-result/integration-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-result/integration-uri (clojure.spec.alpha/and :portkey.aws.apigatewayv2/uri-with-length-between-1-and-2048))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-result/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-integration-result/template-selection-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-expression))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-integration-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.create-integration-result/timeout-in-millis :portkey.aws.apigatewayv2.create-integration-result/request-templates :portkey.aws.apigatewayv2.create-integration-result/connection-id :portkey.aws.apigatewayv2.create-integration-result/request-parameters :portkey.aws.apigatewayv2.create-integration-result/integration-method :portkey.aws.apigatewayv2.create-integration-result/integration-response-selection-expression :portkey.aws.apigatewayv2/passthrough-behavior :portkey.aws.apigatewayv2.create-integration-result/credentials-arn :portkey.aws.apigatewayv2.create-integration-result/integration-id :portkey.aws.apigatewayv2.create-integration-result/integration-uri :portkey.aws.apigatewayv2/integration-type :portkey.aws.apigatewayv2.create-integration-result/description :portkey.aws.apigatewayv2/connection-type :portkey.aws.apigatewayv2.create-integration-result/template-selection-expression :portkey.aws.apigatewayv2/content-handling-strategy]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.authorizer/authorizer-credentials-arn (clojure.spec.alpha/and :portkey.aws.apigatewayv2/arn))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.authorizer/identity-validation-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.authorizer/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.authorizer/identity-source (clojure.spec.alpha/and :portkey.aws.apigatewayv2/identity-source-list))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.authorizer/provider-arns (clojure.spec.alpha/and :portkey.aws.apigatewayv2/provider-arn-list))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.authorizer/authorizer-result-ttl-in-seconds (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integer-with-length-between-0-and-3600))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.authorizer/name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.authorizer/authorizer-uri (clojure.spec.alpha/and :portkey.aws.apigatewayv2/uri-with-length-between-1-and-2048))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/authorizer (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.authorizer/name] :opt-un [:portkey.aws.apigatewayv2.authorizer/authorizer-credentials-arn :portkey.aws.apigatewayv2.authorizer/identity-validation-expression :portkey.aws.apigatewayv2.authorizer/authorizer-id :portkey.aws.apigatewayv2.authorizer/identity-source :portkey.aws.apigatewayv2/authorizer-type :portkey.aws.apigatewayv2.authorizer/provider-arns :portkey.aws.apigatewayv2.authorizer/authorizer-result-ttl-in-seconds :portkey.aws.apigatewayv2.authorizer/authorizer-uri]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-model-response/content-type (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-256))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-model-response/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-model-response/model-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-model-response/name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-model-response/schema (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-32-k))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-model-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.update-model-response/content-type :portkey.aws.apigatewayv2.update-model-response/description :portkey.aws.apigatewayv2.update-model-response/model-id :portkey.aws.apigatewayv2.update-model-response/name :portkey.aws.apigatewayv2.update-model-response/schema]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-model-input/content-type (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-256))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-model-input/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-model-input/name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.update-model-input/schema (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-32-k))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/update-model-input (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.update-model-input/content-type :portkey.aws.apigatewayv2.update-model-input/description :portkey.aws.apigatewayv2.update-model-input/name :portkey.aws.apigatewayv2.update-model-input/schema]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-mapping-request/api-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-mapping-request/api-mapping-key (clojure.spec.alpha/and :portkey.aws.apigatewayv2/selection-key))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-mapping-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.create-api-mapping-request/stage (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/create-api-mapping-request (clojure.spec.alpha/keys :req-un [:portkey.aws.apigatewayv2.create-api-mapping-request/domain-name :portkey.aws.apigatewayv2.create-api-mapping-request/stage :portkey.aws.apigatewayv2.create-api-mapping-request/api-id] :opt-un [:portkey.aws.apigatewayv2.create-api-mapping-request/api-mapping-key]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-authorizer-response/authorizer-credentials-arn (clojure.spec.alpha/and :portkey.aws.apigatewayv2/arn))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-authorizer-response/identity-validation-expression (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-authorizer-response/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-authorizer-response/identity-source (clojure.spec.alpha/and :portkey.aws.apigatewayv2/identity-source-list))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-authorizer-response/provider-arns (clojure.spec.alpha/and :portkey.aws.apigatewayv2/provider-arn-list))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-authorizer-response/authorizer-result-ttl-in-seconds (clojure.spec.alpha/and :portkey.aws.apigatewayv2/integer-with-length-between-0-and-3600))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-authorizer-response/name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-authorizer-response/authorizer-uri (clojure.spec.alpha/and :portkey.aws.apigatewayv2/uri-with-length-between-1-and-2048))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-authorizer-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.get-authorizer-response/authorizer-credentials-arn :portkey.aws.apigatewayv2.get-authorizer-response/identity-validation-expression :portkey.aws.apigatewayv2.get-authorizer-response/authorizer-id :portkey.aws.apigatewayv2.get-authorizer-response/identity-source :portkey.aws.apigatewayv2/authorizer-type :portkey.aws.apigatewayv2.get-authorizer-response/provider-arns :portkey.aws.apigatewayv2.get-authorizer-response/authorizer-result-ttl-in-seconds :portkey.aws.apigatewayv2.get-authorizer-response/name :portkey.aws.apigatewayv2.get-authorizer-response/authorizer-uri]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.deployments/items (clojure.spec.alpha/and :portkey.aws.apigatewayv2/list-of-deployment))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/deployments (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.deployments/items :portkey.aws.apigatewayv2/next-token]))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2/string-with-length-between-1-and-128 (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-model-response/content-type (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-256))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-model-response/description (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-1024))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-model-response/model-id (clojure.spec.alpha/and :portkey.aws.apigatewayv2/id))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-model-response/name (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-1-and-128))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2.get-model-response/schema (clojure.spec.alpha/and :portkey.aws.apigatewayv2/string-with-length-between-0-and-32-k))
(clojure.spec.alpha/def :portkey.aws.apigatewayv2/get-model-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.apigatewayv2.get-model-response/content-type :portkey.aws.apigatewayv2.get-model-response/description :portkey.aws.apigatewayv2.get-model-response/model-id :portkey.aws.apigatewayv2.get-model-response/name :portkey.aws.apigatewayv2.get-model-response/schema]))

(clojure.core/defn create-integration-response "Creates an IntegrationResponses." ([create-integration-response-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-integration-response-request create-integration-response-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/create-integration-response-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/create-integration-response-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 201, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateIntegrationResponse", :http.request.configuration/output-deser-fn response-create-integration-response-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception, "ConflictException" :portkey.aws.apigatewayv2/conflict-exception}})))))
(clojure.spec.alpha/fdef create-integration-response :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/create-integration-response-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/create-integration-response-response))

(clojure.core/defn get-apis "Gets a collection of Api resources." ([] (get-apis {})) ([get-apis-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-apis-request get-apis-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/get-apis-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/get-apis-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetApis", :http.request.configuration/output-deser-fn response-get-apis-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-apis :args (clojure.spec.alpha/? :portkey.aws.apigatewayv2/get-apis-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/get-apis-response))

(clojure.core/defn update-authorizer "Updates an Authorizer." ([update-authorizer-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-authorizer-request update-authorizer-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/update-authorizer-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/authorizers/{authorizerId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/update-authorizer-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :patch, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateAuthorizer", :http.request.configuration/output-deser-fn response-update-authorizer-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception, "ConflictException" :portkey.aws.apigatewayv2/conflict-exception}})))))
(clojure.spec.alpha/fdef update-authorizer :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/update-authorizer-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/update-authorizer-response))

(clojure.core/defn create-integration "Creates an Integration." ([create-integration-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-integration-request create-integration-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/create-integration-result, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/integrations", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/create-integration-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 201, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateIntegration", :http.request.configuration/output-deser-fn response-create-integration-result, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception, "ConflictException" :portkey.aws.apigatewayv2/conflict-exception}})))))
(clojure.spec.alpha/fdef create-integration :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/create-integration-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/create-integration-result))

(clojure.core/defn update-domain-name "Updates a domain name." ([update-domain-name-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-domain-name-request update-domain-name-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/update-domain-name-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/domainnames/{domainName}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/update-domain-name-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :patch, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateDomainName", :http.request.configuration/output-deser-fn response-update-domain-name-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception, "ConflictException" :portkey.aws.apigatewayv2/conflict-exception}})))))
(clojure.spec.alpha/fdef update-domain-name :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/update-domain-name-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/update-domain-name-response))

(clojure.core/defn get-deployment "Gets a Deployment." ([get-deployment-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-deployment-request get-deployment-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/get-deployment-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/deployments/{deploymentId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/get-deployment-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetDeployment", :http.request.configuration/output-deser-fn response-get-deployment-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef get-deployment :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/get-deployment-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/get-deployment-response))

(clojure.core/defn get-route "Gets a Route." ([get-route-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-route-request get-route-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/get-route-result, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/routes/{routeId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/get-route-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetRoute", :http.request.configuration/output-deser-fn response-get-route-result, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef get-route :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/get-route-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/get-route-result))

(clojure.core/defn get-stages "Gets the Stages for an API." ([get-stages-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-stages-request get-stages-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/get-stages-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/stages", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/get-stages-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetStages", :http.request.configuration/output-deser-fn response-get-stages-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-stages :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/get-stages-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/get-stages-response))

(clojure.core/defn create-route "Creates a Route for an API." ([create-route-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-route-request create-route-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/create-route-result, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/routes", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/create-route-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 201, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateRoute", :http.request.configuration/output-deser-fn response-create-route-result, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception, "ConflictException" :portkey.aws.apigatewayv2/conflict-exception}})))))
(clojure.spec.alpha/fdef create-route :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/create-route-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/create-route-result))

(clojure.core/defn create-authorizer "Creates an Authorizer for an API." ([create-authorizer-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-authorizer-request create-authorizer-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/create-authorizer-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/authorizers", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/create-authorizer-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 201, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateAuthorizer", :http.request.configuration/output-deser-fn response-create-authorizer-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception, "ConflictException" :portkey.aws.apigatewayv2/conflict-exception}})))))
(clojure.spec.alpha/fdef create-authorizer :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/create-authorizer-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/create-authorizer-response))

(clojure.core/defn create-route-response "Creates a RouteResponse for a Route." ([create-route-response-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-route-response-request create-route-response-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/create-route-response-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/routes/{routeId}/routeresponses", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/create-route-response-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 201, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateRouteResponse", :http.request.configuration/output-deser-fn response-create-route-response-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception, "ConflictException" :portkey.aws.apigatewayv2/conflict-exception}})))))
(clojure.spec.alpha/fdef create-route-response :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/create-route-response-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/create-route-response-response))

(clojure.core/defn get-api-mapping "The API mapping." ([get-api-mapping-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-api-mapping-request get-api-mapping-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/get-api-mapping-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/domainnames/{domainName}/apimappings/{apiMappingId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/get-api-mapping-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetApiMapping", :http.request.configuration/output-deser-fn response-get-api-mapping-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-api-mapping :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/get-api-mapping-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/get-api-mapping-response))

(clojure.core/defn get-deployments "Gets the Deployments for an API." ([get-deployments-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-deployments-request get-deployments-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/get-deployments-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/deployments", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/get-deployments-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetDeployments", :http.request.configuration/output-deser-fn response-get-deployments-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-deployments :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/get-deployments-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/get-deployments-response))

(clojure.core/defn get-authorizers "Gets the Authorizers for an API." ([get-authorizers-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-authorizers-request get-authorizers-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/get-authorizers-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/authorizers", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/get-authorizers-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetAuthorizers", :http.request.configuration/output-deser-fn response-get-authorizers-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-authorizers :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/get-authorizers-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/get-authorizers-response))

(clojure.core/defn delete-integration "Deletes an Integration." ([delete-integration-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-integration-request delete-integration-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/integrations/{integrationId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/delete-integration-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 204, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteIntegration", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef delete-integration :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/delete-integration-request) :ret clojure.core/true?)

(clojure.core/defn create-domain-name "Creates a domain name." ([create-domain-name-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-domain-name-request create-domain-name-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/create-domain-name-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/domainnames", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/create-domain-name-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 201, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateDomainName", :http.request.configuration/output-deser-fn response-create-domain-name-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception, "ConflictException" :portkey.aws.apigatewayv2/conflict-exception}})))))
(clojure.spec.alpha/fdef create-domain-name :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/create-domain-name-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/create-domain-name-response))

(clojure.core/defn get-integration "Gets an Integration." ([get-integration-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-integration-request get-integration-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/get-integration-result, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/integrations/{integrationId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/get-integration-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetIntegration", :http.request.configuration/output-deser-fn response-get-integration-result, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef get-integration :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/get-integration-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/get-integration-result))

(clojure.core/defn create-api "Creates an Api resource." ([create-api-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-api-request create-api-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/create-api-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/create-api-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 201, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateApi", :http.request.configuration/output-deser-fn response-create-api-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception, "ConflictException" :portkey.aws.apigatewayv2/conflict-exception}})))))
(clojure.spec.alpha/fdef create-api :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/create-api-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/create-api-response))

(clojure.core/defn delete-stage "Deletes a Stage." ([delete-stage-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-stage-request delete-stage-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/stages/{stageName}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/delete-stage-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 204, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteStage", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef delete-stage :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/delete-stage-request) :ret clojure.core/true?)

(clojure.core/defn get-model "Gets a Model." ([get-model-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-model-request get-model-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/get-model-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/models/{modelId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/get-model-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetModel", :http.request.configuration/output-deser-fn response-get-model-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef get-model :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/get-model-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/get-model-response))

(clojure.core/defn create-model "Creates a Model for an API." ([create-model-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-model-request create-model-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/create-model-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/models", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/create-model-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 201, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateModel", :http.request.configuration/output-deser-fn response-create-model-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception, "ConflictException" :portkey.aws.apigatewayv2/conflict-exception}})))))
(clojure.spec.alpha/fdef create-model :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/create-model-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/create-model-response))

(clojure.core/defn get-integrations "Gets the Integrations for an API." ([get-integrations-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-integrations-request get-integrations-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/get-integrations-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/integrations", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/get-integrations-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetIntegrations", :http.request.configuration/output-deser-fn response-get-integrations-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-integrations :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/get-integrations-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/get-integrations-response))

(clojure.core/defn create-deployment "Creates a Deployment for an API." ([create-deployment-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-deployment-request create-deployment-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/create-deployment-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/deployments", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/create-deployment-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 201, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateDeployment", :http.request.configuration/output-deser-fn response-create-deployment-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception, "ConflictException" :portkey.aws.apigatewayv2/conflict-exception}})))))
(clojure.spec.alpha/fdef create-deployment :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/create-deployment-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/create-deployment-response))

(clojure.core/defn get-route-responses "Gets the RouteResponses for a Route." ([get-route-responses-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-route-responses-request get-route-responses-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/get-route-responses-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/routes/{routeId}/routeresponses", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/get-route-responses-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetRouteResponses", :http.request.configuration/output-deser-fn response-get-route-responses-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-route-responses :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/get-route-responses-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/get-route-responses-response))

(clojure.core/defn update-api "Updates an Api resource." ([update-api-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-api-request update-api-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/update-api-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/update-api-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :patch, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateApi", :http.request.configuration/output-deser-fn response-update-api-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception, "ConflictException" :portkey.aws.apigatewayv2/conflict-exception}})))))
(clojure.spec.alpha/fdef update-api :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/update-api-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/update-api-response))

(clojure.core/defn update-stage "Updates a Stage." ([update-stage-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-stage-request update-stage-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/update-stage-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/stages/{stageName}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/update-stage-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :patch, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateStage", :http.request.configuration/output-deser-fn response-update-stage-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception, "ConflictException" :portkey.aws.apigatewayv2/conflict-exception}})))))
(clojure.spec.alpha/fdef update-stage :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/update-stage-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/update-stage-response))

(clojure.core/defn update-model "Updates a Model." ([update-model-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-model-request update-model-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/update-model-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/models/{modelId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/update-model-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :patch, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateModel", :http.request.configuration/output-deser-fn response-update-model-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception, "ConflictException" :portkey.aws.apigatewayv2/conflict-exception}})))))
(clojure.spec.alpha/fdef update-model :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/update-model-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/update-model-response))

(clojure.core/defn delete-api-mapping "Deletes an API mapping." ([delete-api-mapping-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-api-mapping-request delete-api-mapping-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/domainnames/{domainName}/apimappings/{apiMappingId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/delete-api-mapping-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 204, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteApiMapping", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception}})))))
(clojure.spec.alpha/fdef delete-api-mapping :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/delete-api-mapping-request) :ret clojure.core/true?)

(clojure.core/defn update-api-mapping "The API mapping." ([update-api-mapping-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-api-mapping-request update-api-mapping-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/update-api-mapping-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/domainnames/{domainName}/apimappings/{apiMappingId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/update-api-mapping-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :patch, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateApiMapping", :http.request.configuration/output-deser-fn response-update-api-mapping-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception, "ConflictException" :portkey.aws.apigatewayv2/conflict-exception}})))))
(clojure.spec.alpha/fdef update-api-mapping :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/update-api-mapping-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/update-api-mapping-response))

(clojure.core/defn delete-api "Deletes an Api resource." ([delete-api-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-api-request delete-api-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/delete-api-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 204, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteApi", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef delete-api :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/delete-api-request) :ret clojure.core/true?)

(clojure.core/defn get-stage "Gets a Stage." ([get-stage-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-stage-request get-stage-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/get-stage-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/stages/{stageName}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/get-stage-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetStage", :http.request.configuration/output-deser-fn response-get-stage-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef get-stage :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/get-stage-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/get-stage-response))

(clojure.core/defn delete-route "Deletes a Route." ([delete-route-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-route-request delete-route-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/routes/{routeId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/delete-route-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 204, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteRoute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef delete-route :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/delete-route-request) :ret clojure.core/true?)

(clojure.core/defn delete-model "Deletes a Model." ([delete-model-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-model-request delete-model-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/models/{modelId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/delete-model-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 204, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteModel", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef delete-model :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/delete-model-request) :ret clojure.core/true?)

(clojure.core/defn update-deployment "Updates a Deployment." ([update-deployment-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-deployment-request update-deployment-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/update-deployment-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/deployments/{deploymentId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/update-deployment-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :patch, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateDeployment", :http.request.configuration/output-deser-fn response-update-deployment-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception, "ConflictException" :portkey.aws.apigatewayv2/conflict-exception}})))))
(clojure.spec.alpha/fdef update-deployment :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/update-deployment-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/update-deployment-response))

(clojure.core/defn delete-domain-name "Deletes a domain name." ([delete-domain-name-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-domain-name-request delete-domain-name-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/domainnames/{domainName}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/delete-domain-name-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 204, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteDomainName", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef delete-domain-name :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/delete-domain-name-request) :ret clojure.core/true?)

(clojure.core/defn delete-authorizer "Deletes an Authorizer." ([delete-authorizer-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-authorizer-request delete-authorizer-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/authorizers/{authorizerId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/delete-authorizer-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 204, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteAuthorizer", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef delete-authorizer :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/delete-authorizer-request) :ret clojure.core/true?)

(clojure.core/defn get-route-response "Gets a RouteResponse." ([get-route-response-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-route-response-request get-route-response-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/get-route-response-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/routes/{routeId}/routeresponses/{routeResponseId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/get-route-response-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetRouteResponse", :http.request.configuration/output-deser-fn response-get-route-response-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef get-route-response :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/get-route-response-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/get-route-response-response))

(clojure.core/defn delete-route-response "Deletes a RouteResponse." ([delete-route-response-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-route-response-request delete-route-response-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/routes/{routeId}/routeresponses/{routeResponseId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/delete-route-response-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 204, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteRouteResponse", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef delete-route-response :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/delete-route-response-request) :ret clojure.core/true?)

(clojure.core/defn get-authorizer "Gets an Authorizer." ([get-authorizer-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-authorizer-request get-authorizer-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/get-authorizer-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/authorizers/{authorizerId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/get-authorizer-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetAuthorizer", :http.request.configuration/output-deser-fn response-get-authorizer-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef get-authorizer :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/get-authorizer-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/get-authorizer-response))

(clojure.core/defn get-integration-response "Gets an IntegrationResponses." ([get-integration-response-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-integration-response-request get-integration-response-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/get-integration-response-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses/{integrationResponseId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/get-integration-response-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetIntegrationResponse", :http.request.configuration/output-deser-fn response-get-integration-response-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef get-integration-response :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/get-integration-response-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/get-integration-response-response))

(clojure.core/defn get-model-template "Gets a model template." ([get-model-template-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-model-template-request get-model-template-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/get-model-template-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/models/{modelId}/template", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/get-model-template-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetModelTemplate", :http.request.configuration/output-deser-fn response-get-model-template-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef get-model-template :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/get-model-template-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/get-model-template-response))

(clojure.core/defn delete-integration-response "Deletes an IntegrationResponses." ([delete-integration-response-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-integration-response-request delete-integration-response-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses/{integrationResponseId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/delete-integration-response-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 204, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteIntegrationResponse", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef delete-integration-response :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/delete-integration-response-request) :ret clojure.core/true?)

(clojure.core/defn get-integration-responses "Gets the IntegrationResponses for an Integration." ([get-integration-responses-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-integration-responses-request get-integration-responses-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/get-integration-responses-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/get-integration-responses-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetIntegrationResponses", :http.request.configuration/output-deser-fn response-get-integration-responses-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-integration-responses :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/get-integration-responses-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/get-integration-responses-response))

(clojure.core/defn get-models "Gets the Models for an API." ([get-models-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-models-request get-models-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/get-models-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/models", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/get-models-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetModels", :http.request.configuration/output-deser-fn response-get-models-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-models :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/get-models-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/get-models-response))

(clojure.core/defn get-api "Gets an Api resource." ([get-api-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-api-request get-api-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/get-api-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/get-api-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetApi", :http.request.configuration/output-deser-fn response-get-api-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef get-api :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/get-api-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/get-api-response))

(clojure.core/defn get-api-mappings "The API mappings." ([get-api-mappings-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-api-mappings-request get-api-mappings-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/get-api-mappings-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/domainnames/{domainName}/apimappings", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/get-api-mappings-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetApiMappings", :http.request.configuration/output-deser-fn response-get-api-mappings-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-api-mappings :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/get-api-mappings-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/get-api-mappings-response))

(clojure.core/defn create-stage "Creates a Stage for an API." ([create-stage-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-stage-request create-stage-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/create-stage-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/stages", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/create-stage-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 201, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateStage", :http.request.configuration/output-deser-fn response-create-stage-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception, "ConflictException" :portkey.aws.apigatewayv2/conflict-exception}})))))
(clojure.spec.alpha/fdef create-stage :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/create-stage-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/create-stage-response))

(clojure.core/defn create-api-mapping "Creates an API mapping." ([create-api-mapping-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-api-mapping-request create-api-mapping-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/create-api-mapping-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/domainnames/{domainName}/apimappings", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/create-api-mapping-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 201, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateApiMapping", :http.request.configuration/output-deser-fn response-create-api-mapping-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception, "ConflictException" :portkey.aws.apigatewayv2/conflict-exception}})))))
(clojure.spec.alpha/fdef create-api-mapping :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/create-api-mapping-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/create-api-mapping-response))

(clojure.core/defn update-integration "Updates an Integration." ([update-integration-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-integration-request update-integration-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/update-integration-result, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/integrations/{integrationId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/update-integration-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :patch, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateIntegration", :http.request.configuration/output-deser-fn response-update-integration-result, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception, "ConflictException" :portkey.aws.apigatewayv2/conflict-exception}})))))
(clojure.spec.alpha/fdef update-integration :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/update-integration-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/update-integration-result))

(clojure.core/defn get-routes "Gets the Routes for an API." ([get-routes-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-routes-request get-routes-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/get-routes-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/routes", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/get-routes-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetRoutes", :http.request.configuration/output-deser-fn response-get-routes-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-routes :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/get-routes-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/get-routes-response))

(clojure.core/defn get-domain-name "Gets a domain name." ([get-domain-name-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-domain-name-request get-domain-name-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/get-domain-name-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/domainnames/{domainName}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/get-domain-name-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetDomainName", :http.request.configuration/output-deser-fn response-get-domain-name-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef get-domain-name :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/get-domain-name-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/get-domain-name-response))

(clojure.core/defn update-route-response "Updates a RouteResponse." ([update-route-response-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-route-response-request update-route-response-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/update-route-response-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/routes/{routeId}/routeresponses/{routeResponseId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/update-route-response-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :patch, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateRouteResponse", :http.request.configuration/output-deser-fn response-update-route-response-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception, "ConflictException" :portkey.aws.apigatewayv2/conflict-exception}})))))
(clojure.spec.alpha/fdef update-route-response :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/update-route-response-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/update-route-response-response))

(clojure.core/defn update-route "Updates a Route." ([update-route-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-route-request update-route-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/update-route-result, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/routes/{routeId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/update-route-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :patch, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateRoute", :http.request.configuration/output-deser-fn response-update-route-result, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception, "ConflictException" :portkey.aws.apigatewayv2/conflict-exception}})))))
(clojure.spec.alpha/fdef update-route :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/update-route-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/update-route-result))

(clojure.core/defn update-integration-response "Updates an IntegrationResponses." ([update-integration-response-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-integration-response-request update-integration-response-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/update-integration-response-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses/{integrationResponseId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/update-integration-response-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :patch, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateIntegrationResponse", :http.request.configuration/output-deser-fn response-update-integration-response-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception, "ConflictException" :portkey.aws.apigatewayv2/conflict-exception}})))))
(clojure.spec.alpha/fdef update-integration-response :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/update-integration-response-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/update-integration-response-response))

(clojure.core/defn get-domain-names "Gets the domain names for an AWS account." ([] (get-domain-names {})) ([get-domain-names-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-domain-names-request get-domain-names-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.apigatewayv2/get-domain-names-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/domainnames", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/get-domain-names-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetDomainNames", :http.request.configuration/output-deser-fn response-get-domain-names-response, :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception, "BadRequestException" :portkey.aws.apigatewayv2/bad-request-exception}})))))
(clojure.spec.alpha/fdef get-domain-names :args (clojure.spec.alpha/? :portkey.aws.apigatewayv2/get-domain-names-request) :ret (clojure.spec.alpha/and :portkey.aws.apigatewayv2/get-domain-names-response))

(clojure.core/defn delete-deployment "Deletes a Deployment." ([delete-deployment-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-deployment-request delete-deployment-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.apigatewayv2/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/v2/apis/{apiId}/deployments/{deploymentId}", :http.request.configuration/version "2018-11-29", :http.request.configuration/service-id "ApiGatewayV2", :http.request.spec/input-spec :portkey.aws.apigatewayv2/delete-deployment-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 204, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteDeployment", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NotFoundException" :portkey.aws.apigatewayv2/not-found-exception, "TooManyRequestsException" :portkey.aws.apigatewayv2/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef delete-deployment :args (clojure.spec.alpha/tuple :portkey.aws.apigatewayv2/delete-deployment-request) :ret clojure.core/true?)
