(ns portkey.aws.opsworks.-2013-02-18 (:require [portkey.aws]))

(def
 endpoints
 '{"ap-northeast-1"
   {:credential-scope {:service "opsworks", :region "ap-northeast-1"},
    :ssl-common-name "opsworks.ap-northeast-1.amazonaws.com",
    :endpoint "https://opsworks.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "opsworks", :region "eu-west-1"},
    :ssl-common-name "opsworks.eu-west-1.amazonaws.com",
    :endpoint "https://opsworks.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "opsworks", :region "us-east-2"},
    :ssl-common-name "opsworks.us-east-2.amazonaws.com",
    :endpoint "https://opsworks.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope {:service "opsworks", :region "ap-southeast-2"},
    :ssl-common-name "opsworks.ap-southeast-2.amazonaws.com",
    :endpoint "https://opsworks.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "opsworks", :region "sa-east-1"},
    :ssl-common-name "opsworks.sa-east-1.amazonaws.com",
    :endpoint "https://opsworks.sa-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope {:service "opsworks", :region "ap-southeast-1"},
    :ssl-common-name "opsworks.ap-southeast-1.amazonaws.com",
    :endpoint "https://opsworks.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope {:service "opsworks", :region "ap-northeast-2"},
    :ssl-common-name "opsworks.ap-northeast-2.amazonaws.com",
    :endpoint "https://opsworks.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-west-3"
   {:credential-scope {:service "opsworks", :region "eu-west-3"},
    :ssl-common-name "opsworks.eu-west-3.amazonaws.com",
    :endpoint "https://opsworks.eu-west-3.amazonaws.com",
    :signature-version :v4},
   "ca-central-1"
   {:credential-scope {:service "opsworks", :region "ca-central-1"},
    :ssl-common-name "opsworks.ca-central-1.amazonaws.com",
    :endpoint "https://opsworks.ca-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "opsworks", :region "eu-central-1"},
    :ssl-common-name "opsworks.eu-central-1.amazonaws.com",
    :endpoint "https://opsworks.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "opsworks", :region "eu-west-2"},
    :ssl-common-name "opsworks.eu-west-2.amazonaws.com",
    :endpoint "https://opsworks.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "opsworks", :region "us-west-2"},
    :ssl-common-name "opsworks.us-west-2.amazonaws.com",
    :endpoint "https://opsworks.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "opsworks", :region "us-east-1"},
    :ssl-common-name "opsworks.us-east-1.amazonaws.com",
    :endpoint "https://opsworks.us-east-1.amazonaws.com",
    :signature-version :v4},
   "us-west-1"
   {:credential-scope {:service "opsworks", :region "us-west-1"},
    :ssl-common-name "opsworks.us-west-1.amazonaws.com",
    :endpoint "https://opsworks.us-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-south-1"
   {:credential-scope {:service "opsworks", :region "ap-south-1"},
    :ssl-common-name "opsworks.ap-south-1.amazonaws.com",
    :endpoint "https://opsworks.ap-south-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-tag-keys)

(clojure.core/declare ser-app-type)

(clojure.core/declare ser-switch)

(clojure.core/declare ser-recipes)

(clojure.core/declare ser-double)

(clojure.core/declare ser-ebs-block-device)

(clojure.core/declare ser-source)

(clojure.core/declare ser-shutdown-event-configuration)

(clojure.core/declare ser-root-device-type)

(clojure.core/declare ser-environment-variables)

(clojure.core/declare ser-chef-configuration)

(clojure.core/declare ser-tag-key)

(clojure.core/declare ser-tags)

(clojure.core/declare ser-source-type)

(clojure.core/declare ser-valid-for-in-minutes)

(clojure.core/declare ser-strings)

(clojure.core/declare ser-lifecycle-event-configuration)

(clojure.core/declare ser-next-token)

(clojure.core/declare ser-minute)

(clojure.core/declare ser-deployment-command-args)

(clojure.core/declare ser-cloud-watch-logs-configuration)

(clojure.core/declare ser-daily-auto-scaling-schedule)

(clojure.core/declare ser-data-sources)

(clojure.core/declare ser-hour)

(clojure.core/declare ser-tag-value)

(clojure.core/declare ser-environment-variable)

(clojure.core/declare ser-ssl-configuration)

(clojure.core/declare ser-cloud-watch-logs-encoding)

(clojure.core/declare ser-stack-attributes)

(clojure.core/declare ser-cloud-watch-logs-log-streams)

(clojure.core/declare ser-stack-attributes-keys)

(clojure.core/declare ser-layer-attributes-keys)

(clojure.core/declare ser-integer)

(clojure.core/declare ser-string)

(clojure.core/declare ser-data-source)

(clojure.core/declare ser-instance-identity)

(clojure.core/declare ser-volume-type)

(clojure.core/declare ser-cloud-watch-logs-initial-position)

(clojure.core/declare ser-app-attributes)

(clojure.core/declare ser-block-device-mappings)

(clojure.core/declare ser-architecture)

(clojure.core/declare ser-stack-configuration-manager)

(clojure.core/declare ser-auto-scaling-thresholds)

(clojure.core/declare ser-layer-type)

(clojure.core/declare ser-resource-arn)

(clojure.core/declare ser-block-device-mapping)

(clojure.core/declare ser-max-results)

(clojure.core/declare ser-weekly-auto-scaling-schedule)

(clojure.core/declare ser-volume-configuration)

(clojure.core/declare ser-volume-configurations)

(clojure.core/declare ser-auto-scaling-type)

(clojure.core/declare ser-deployment-command)

(clojure.core/declare ser-cloud-watch-logs-time-zone)

(clojure.core/declare ser-layer-attributes)

(clojure.core/declare ser-app-attributes-keys)

(clojure.core/declare ser-deployment-command-name)

(clojure.core/declare ser-cloud-watch-logs-log-stream)

(clojure.core/declare ser-boolean)

(clojure.core/defn- ser-tag-keys [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-tag-key coll) #:http.request.field{:shape "TagKey"}))) input), :shape "TagKeys", :type "list"})

(clojure.core/defn- ser-app-type [input] #:http.request.field{:value (clojure.core/get {"static" "static", :other "other", :static "static", "java" "java", :nodejs "nodejs", "php" "php", :java "java", "other" "other", "aws-flow-ruby" "aws-flow-ruby", :php "php", :rails "rails", :awsflowruby "aws-flow-ruby", "rails" "rails", "nodejs" "nodejs"} input), :shape "AppType"})

(clojure.core/defn- ser-switch [input] #:http.request.field{:value input, :shape "Switch"})

(clojure.core/defn- ser-recipes [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Recipes", :type "structure"} (clojure.core/contains? input :setup) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :setup)) #:http.request.field{:name "Setup", :shape "Strings"})) (clojure.core/contains? input :configure) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :configure)) #:http.request.field{:name "Configure", :shape "Strings"})) (clojure.core/contains? input :deploy) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :deploy)) #:http.request.field{:name "Deploy", :shape "Strings"})) (clojure.core/contains? input :undeploy) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :undeploy)) #:http.request.field{:name "Undeploy", :shape "Strings"})) (clojure.core/contains? input :shutdown) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :shutdown)) #:http.request.field{:name "Shutdown", :shape "Strings"}))))

(clojure.core/defn- ser-double [input] #:http.request.field{:value input, :shape "Double"})

(clojure.core/defn- ser-ebs-block-device [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "EbsBlockDevice", :type "structure"} (clojure.core/contains? input :snapshot-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :iops)) #:http.request.field{:name "Iops", :shape "Integer"})) (clojure.core/contains? input :volume-size) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :volume-size)) #:http.request.field{:name "VolumeSize", :shape "Integer"})) (clojure.core/contains? input :volume-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-volume-type (input :volume-type)) #:http.request.field{:name "VolumeType", :shape "VolumeType"})) (clojure.core/contains? input :delete-on-termination) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :delete-on-termination)) #:http.request.field{:name "DeleteOnTermination", :shape "Boolean"}))))

(clojure.core/defn- ser-source [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Source", :type "structure"} (clojure.core/contains? input :type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-source-type (input :type)) #:http.request.field{:name "Type", :shape "SourceType"})) (clojure.core/contains? input :url) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :url)) #:http.request.field{:name "Url", :shape "String"})) (clojure.core/contains? input :username) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :username)) #:http.request.field{:name "Username", :shape "String"})) (clojure.core/contains? input :password) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :password)) #:http.request.field{:name "Password", :shape "String"})) (clojure.core/contains? input :ssh-key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ssh-key)) #:http.request.field{:name "SshKey", :shape "String"})) (clojure.core/contains? input :revision) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :revision)) #:http.request.field{:name "Revision", :shape "String"}))))

(clojure.core/defn- ser-shutdown-event-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ShutdownEventConfiguration", :type "structure"} (clojure.core/contains? input :execution-timeout) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :execution-timeout)) #:http.request.field{:name "ExecutionTimeout", :shape "Integer"})) (clojure.core/contains? input :delay-until-elb-connections-drained) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :delay-until-elb-connections-drained)) #:http.request.field{:name "DelayUntilElbConnectionsDrained", :shape "Boolean"}))))

(clojure.core/defn- ser-root-device-type [input] #:http.request.field{:value (clojure.core/get {"ebs" "ebs", :ebs "ebs", "instance-store" "instance-store", :instancestore "instance-store"} input), :shape "RootDeviceType"})

(clojure.core/defn- ser-environment-variables [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-environment-variable coll) #:http.request.field{:shape "EnvironmentVariable"}))) input), :shape "EnvironmentVariables", :type "list"})

(clojure.core/defn- ser-chef-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ChefConfiguration", :type "structure"} (clojure.core/contains? input :manage-berkshelf) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :manage-berkshelf)) #:http.request.field{:name "ManageBerkshelf", :shape "Boolean"})) (clojure.core/contains? input :berkshelf-version) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :berkshelf-version)) #:http.request.field{:name "BerkshelfVersion", :shape "String"}))))

(clojure.core/defn- ser-tag-key [input] #:http.request.field{:value input, :shape "TagKey"})

(clojure.core/defn- ser-tags [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [[k v]] [(clojure.core/into (ser-tag-key k) #:http.request.field{:map-info "key", :shape "TagKey"}) (clojure.core/into (ser-tag-value v) #:http.request.field{:map-info "value", :shape "TagValue"})])) input), :shape "Tags", :type "map"})

(clojure.core/defn- ser-source-type [input] #:http.request.field{:value (clojure.core/get {"git" "git", :git "git", "svn" "svn", :svn "svn", "archive" "archive", :archive "archive", "s3" "s3", :s-3 "s3"} input), :shape "SourceType"})

(clojure.core/defn- ser-valid-for-in-minutes [input] #:http.request.field{:value input, :shape "ValidForInMinutes"})

(clojure.core/defn- ser-strings [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "Strings", :type "list"})

(clojure.core/defn- ser-lifecycle-event-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LifecycleEventConfiguration", :type "structure"} (clojure.core/contains? input :shutdown) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-shutdown-event-configuration (input :shutdown)) #:http.request.field{:name "Shutdown", :shape "ShutdownEventConfiguration"}))))

(clojure.core/defn- ser-next-token [input] #:http.request.field{:value input, :shape "NextToken"})

(clojure.core/defn- ser-minute [input] #:http.request.field{:value input, :shape "Minute"})

(clojure.core/defn- ser-deployment-command-args [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [[k v]] [(clojure.core/into (ser-string k) #:http.request.field{:map-info "key", :shape "String"}) (clojure.core/into (ser-strings v) #:http.request.field{:map-info "value", :shape "Strings"})])) input), :shape "DeploymentCommandArgs", :type "map"})

(clojure.core/defn- ser-cloud-watch-logs-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "CloudWatchLogsConfiguration", :type "structure"} (clojure.core/contains? input :enabled) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :enabled)) #:http.request.field{:name "Enabled", :shape "Boolean"})) (clojure.core/contains? input :log-streams) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cloud-watch-logs-log-streams (input :log-streams)) #:http.request.field{:name "LogStreams", :shape "CloudWatchLogsLogStreams"}))))

(clojure.core/defn- ser-daily-auto-scaling-schedule [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [[k v]] [(clojure.core/into (ser-hour k) #:http.request.field{:map-info "key", :shape "Hour"}) (clojure.core/into (ser-switch v) #:http.request.field{:map-info "value", :shape "Switch"})])) input), :shape "DailyAutoScalingSchedule", :type "map"})

(clojure.core/defn- ser-data-sources [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-data-source coll) #:http.request.field{:shape "DataSource"}))) input), :shape "DataSources", :type "list"})

(clojure.core/defn- ser-hour [input] #:http.request.field{:value input, :shape "Hour"})

(clojure.core/defn- ser-tag-value [input] #:http.request.field{:value input, :shape "TagValue"})

(clojure.core/defn- ser-environment-variable [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:key input)) #:http.request.field{:name "Key", :shape "String"}) (clojure.core/into (ser-string (:value input)) #:http.request.field{:name "Value", :shape "String"})], :shape "EnvironmentVariable", :type "structure"} (clojure.core/contains? input :secure) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :secure)) #:http.request.field{:name "Secure", :shape "Boolean"}))))

(clojure.core/defn- ser-ssl-configuration [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:certificate input)) #:http.request.field{:name "Certificate", :shape "String"}) (clojure.core/into (ser-string (:private-key input)) #:http.request.field{:name "PrivateKey", :shape "String"})], :shape "SslConfiguration", :type "structure"} (clojure.core/contains? input :chain) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :chain)) #:http.request.field{:name "Chain", :shape "String"}))))

(clojure.core/defn- ser-cloud-watch-logs-encoding [input] #:http.request.field{:value (clojure.core/get {:euc-kr "euc_kr", "johab" "johab", :cp-1251 "cp1251", "cp863" "cp863", :cp-866 "cp866", :cp-1258 "cp1258", "utf_16" "utf_16", :ascii "ascii", :iso-8859-14 "iso8859_14", "gb18030" "gb18030", :cp-1026 "cp1026", :cp-1255 "cp1255", "mac_latin2" "mac_latin2", "cp737" "cp737", :iso-8859-13 "iso8859_13", "ascii" "ascii", :koi-8-r "koi8_r", :cp-720 "cp720", :gb-2312 "gb2312", :iso-8859-15 "iso8859_15", :cp-424 "cp424", "utf_16_be" "utf_16_be", "iso8859_3" "iso8859_3", :cp-860 "cp860", "shift_jisx0213" "shift_jisx0213", "cp864" "cp864", "cp1255" "cp1255", :iso-8859-2 "iso8859_2", :cp-862 "cp862", "cp865" "cp865", :cp-1006 "cp1006", :iso-8859-3 "iso8859_3", "euc_jp" "euc_jp", "cp856" "cp856", "iso8859_15" "iso8859_15", "big5hkscs" "big5hkscs", "cp932" "cp932", :mac-iceland "mac_iceland", "cp850" "cp850", "shift_jis_2004" "shift_jis_2004", "cp424" "cp424", :utf-32 "utf_32", :cp-875 "cp875", :utf-16 "utf_16", :mac-greek "mac_greek", "iso8859_6" "iso8859_6", :euc-jisx-0213 "euc_jisx0213", :iso-8859-9 "iso8859_9", :iso-2022-jp-2004 "iso2022_jp_2004", "euc_jisx0213" "euc_jisx0213", :cp-932 "cp932", "cp720" "cp720", "mac_roman" "mac_roman", "cp1026" "cp1026", :iso-2022-jp-3 "iso2022_jp_3", "cp1250" "cp1250", :cp-1256 "cp1256", "cp874" "cp874", :shift-jis "shift_jis", :euc-jp "euc_jp", :iso-2022-jp "iso2022_jp", :cp-857 "cp857", :iso-8859-6 "iso8859_6", "cp1006" "cp1006", :mac-roman "mac_roman", :hz "hz", "iso8859_7" "iso8859_7", "cp869" "cp869", :iso-8859-7 "iso8859_7", :utf-7 "utf_7", :iso-8859-8 "iso8859_8", "iso8859_14" "iso8859_14", "iso2022_jp_2004" "iso2022_jp_2004", :cp-775 "cp775", "iso2022_kr" "iso2022_kr", "iso2022_jp_1" "iso2022_jp_1", "cp950" "cp950", :cp-864 "cp864", :big-5 "big5", :cp-874 "cp874", "cp500" "cp500", :cp-1250 "cp1250", "cp1254" "cp1254", "iso2022_jp_2" "iso2022_jp_2", "cp037" "cp037", "hz" "hz", :koi-8-u "koi8_u", :gbk "gbk", "iso2022_jp_3" "iso2022_jp_3", "iso2022_jp_ext" "iso2022_jp_ext", :cp-950 "cp950", "utf_32_le" "utf_32_le", :mac-latin-2 "mac_latin2", "iso8859_13" "iso8859_13", :cp-1140 "cp1140", "iso8859_5" "iso8859_5", :cp-850 "cp850", :shift-jisx-0213 "shift_jisx0213", :big-5hkscs "big5hkscs", :mac-cyrillic "mac_cyrillic", "cp852" "cp852", :utf-8 "utf_8", "cp1140" "cp1140", "mac_cyrillic" "mac_cyrillic", "cp861" "cp861", "big5" "big5", "cp949" "cp949", "mac_iceland" "mac_iceland", "euc_kr" "euc_kr", :cp-855 "cp855", "iso8859_10" "iso8859_10", :cp-437 "cp437", "iso8859_2" "iso8859_2", :iso-8859-10 "iso8859_10", "cp857" "cp857", "ptcp154" "ptcp154", "gb2312" "gb2312", :iso-2022-jp-1 "iso2022_jp_1", "cp862" "cp862", :latin-1 "latin_1", "utf_32_be" "utf_32_be", "iso8859_9" "iso8859_9", "cp437" "cp437", "iso8859_8" "iso8859_8", :cp-858 "cp858", :cp-1253 "cp1253", :cp-1257 "cp1257", "cp1251" "cp1251", "koi8_u" "koi8_u", :cp-861 "cp861", "iso8859_4" "iso8859_4", "utf_32" "utf_32", :gb-18030 "gb18030", :cp-737 "cp737", :cp-856 "cp856", :iso-2022-jp-ext "iso2022_jp_ext", :utf-8-sig "utf_8_sig", "shift_jis" "shift_jis", "cp1257" "cp1257", "cp1252" "cp1252", "iso8859_16" "iso8859_16", :cp-865 "cp865", "utf_16_le" "utf_16_le", :cp-037 "cp037", "latin_1" "latin_1", "utf_8" "utf_8", :iso-8859-5 "iso8859_5", "cp1256" "cp1256", "cp855" "cp855", :johab "johab", :utf-32-be "utf_32_be", "mac_turkish" "mac_turkish", :cp-949 "cp949", "euc_jis_2004" "euc_jis_2004", "cp1253" "cp1253", :ptcp-154 "ptcp154", "cp858" "cp858", :iso-8859-4 "iso8859_4", :euc-jis-2004 "euc_jis_2004", "mac_greek" "mac_greek", :iso-2022-jp-2 "iso2022_jp_2", "utf_7" "utf_7", :shift-jis-2004 "shift_jis_2004", :utf-16-be "utf_16_be", :cp-500 "cp500", :utf-16-le "utf_16_le", "cp866" "cp866", "cp860" "cp860", :mac-turkish "mac_turkish", "cp1258" "cp1258", :cp-852 "cp852", "cp875" "cp875", :cp-869 "cp869", :iso-2022-kr "iso2022_kr", "cp775" "cp775", :iso-8859-16 "iso8859_16", :utf-32-le "utf_32_le", :cp-1252 "cp1252", "koi8_r" "koi8_r", :cp-863 "cp863", "iso2022_jp" "iso2022_jp", :cp-1254 "cp1254", "gbk" "gbk", "utf_8_sig" "utf_8_sig"} input), :shape "CloudWatchLogsEncoding"})

(clojure.core/defn- ser-stack-attributes [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [[k v]] [(clojure.core/into (ser-stack-attributes-keys k) #:http.request.field{:map-info "key", :shape "StackAttributesKeys"}) (clojure.core/into (ser-string v) #:http.request.field{:map-info "value", :shape "String"})])) input), :shape "StackAttributes", :type "map"})

(clojure.core/defn- ser-cloud-watch-logs-log-streams [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-cloud-watch-logs-log-stream coll) #:http.request.field{:shape "CloudWatchLogsLogStream"}))) input), :shape "CloudWatchLogsLogStreams", :type "list"})

(clojure.core/defn- ser-stack-attributes-keys [input] #:http.request.field{:value (clojure.core/get {"Color" "Color", :color "Color"} input), :shape "StackAttributesKeys"})

(clojure.core/defn- ser-layer-attributes-keys [input] #:http.request.field{:value (clojure.core/get {:passenger-version "PassengerVersion", "JvmVersion" "JvmVersion", :enable-haproxy-stats "EnableHaproxyStats", "JavaAppServerVersion" "JavaAppServerVersion", "MysqlRootPassword" "MysqlRootPassword", "HaproxyHealthCheckUrl" "HaproxyHealthCheckUrl", :rails-stack "RailsStack", :ganglia-url "GangliaUrl", "MemcachedMemory" "MemcachedMemory", :haproxy-health-check-url "HaproxyHealthCheckUrl", :rubygems-version "RubygemsVersion", :jvm-version "JvmVersion", "HaproxyHealthCheckMethod" "HaproxyHealthCheckMethod", "RubyVersion" "RubyVersion", :haproxy-health-check-method "HaproxyHealthCheckMethod", :memcached-memory "MemcachedMemory", "GangliaUrl" "GangliaUrl", "HaproxyStatsPassword" "HaproxyStatsPassword", "BundlerVersion" "BundlerVersion", :java-app-server "JavaAppServer", "GangliaPassword" "GangliaPassword", "Jvm" "Jvm", :jvm-options "JvmOptions", "EnableHaproxyStats" "EnableHaproxyStats", "RailsStack" "RailsStack", "NodejsVersion" "NodejsVersion", :ganglia-password "GangliaPassword", "PassengerVersion" "PassengerVersion", :mysql-root-password "MysqlRootPassword", :jvm "Jvm", :manage-bundler "ManageBundler", :ruby-version "RubyVersion", "RubygemsVersion" "RubygemsVersion", "GangliaUser" "GangliaUser", :haproxy-stats-password "HaproxyStatsPassword", :bundler-version "BundlerVersion", :java-app-server-version "JavaAppServerVersion", :haproxy-stats-url "HaproxyStatsUrl", "EcsClusterArn" "EcsClusterArn", "HaproxyStatsUser" "HaproxyStatsUser", :ecs-cluster-arn "EcsClusterArn", :ganglia-user "GangliaUser", :mysql-root-password-ubiquitous "MysqlRootPasswordUbiquitous", :haproxy-stats-user "HaproxyStatsUser", "HaproxyStatsUrl" "HaproxyStatsUrl", "ManageBundler" "ManageBundler", "MysqlRootPasswordUbiquitous" "MysqlRootPasswordUbiquitous", "JvmOptions" "JvmOptions", "JavaAppServer" "JavaAppServer", :nodejs-version "NodejsVersion"} input), :shape "LayerAttributesKeys"})

(clojure.core/defn- ser-integer [input] #:http.request.field{:value input, :shape "Integer"})

(clojure.core/defn- ser-string [input] #:http.request.field{:value input, :shape "String"})

(clojure.core/defn- ser-data-source [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "DataSource", :type "structure"} (clojure.core/contains? input :type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :type)) #:http.request.field{:name "Type", :shape "String"})) (clojure.core/contains? input :arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :arn)) #:http.request.field{:name "Arn", :shape "String"})) (clojure.core/contains? input :database-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :database-name)) #:http.request.field{:name "DatabaseName", :shape "String"}))))

(clojure.core/defn- ser-instance-identity [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "InstanceIdentity", :type "structure"} (clojure.core/contains? input :document) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :document)) #:http.request.field{:name "Document", :shape "String"})) (clojure.core/contains? input :signature) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :signature)) #:http.request.field{:name "Signature", :shape "String"}))))

(clojure.core/defn- ser-volume-type [input] #:http.request.field{:value (clojure.core/get {"gp2" "gp2", :gp-2 "gp2", "io1" "io1", :io-1 "io1", "standard" "standard", :standard "standard"} input), :shape "VolumeType"})

(clojure.core/defn- ser-cloud-watch-logs-initial-position [input] #:http.request.field{:value (clojure.core/get {"start_of_file" "start_of_file", :start-of-file "start_of_file", "end_of_file" "end_of_file", :end-of-file "end_of_file"} input), :shape "CloudWatchLogsInitialPosition"})

(clojure.core/defn- ser-app-attributes [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [[k v]] [(clojure.core/into (ser-app-attributes-keys k) #:http.request.field{:map-info "key", :shape "AppAttributesKeys"}) (clojure.core/into (ser-string v) #:http.request.field{:map-info "value", :shape "String"})])) input), :shape "AppAttributes", :type "map"})

(clojure.core/defn- ser-block-device-mappings [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-block-device-mapping coll) #:http.request.field{:shape "BlockDeviceMapping"}))) input), :shape "BlockDeviceMappings", :type "list"})

(clojure.core/defn- ser-architecture [input] #:http.request.field{:value (clojure.core/get {"x86_64" "x86_64", :x-86-64 "x86_64", "i386" "i386", :i-386 "i386"} input), :shape "Architecture"})

(clojure.core/defn- ser-stack-configuration-manager [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "StackConfigurationManager", :type "structure"} (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"})) (clojure.core/contains? input :version) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :version)) #:http.request.field{:name "Version", :shape "String"}))))

(clojure.core/defn- ser-auto-scaling-thresholds [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "AutoScalingThresholds", :type "structure"} (clojure.core/contains? input :instance-count) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :instance-count)) #:http.request.field{:name "InstanceCount", :shape "Integer"})) (clojure.core/contains? input :thresholds-wait-time) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-minute (input :thresholds-wait-time)) #:http.request.field{:name "ThresholdsWaitTime", :shape "Minute"})) (clojure.core/contains? input :ignore-metrics-time) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-minute (input :ignore-metrics-time)) #:http.request.field{:name "IgnoreMetricsTime", :shape "Minute"})) (clojure.core/contains? input :cpu-threshold) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-double (input :cpu-threshold)) #:http.request.field{:name "CpuThreshold", :shape "Double"})) (clojure.core/contains? input :memory-threshold) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-double (input :memory-threshold)) #:http.request.field{:name "MemoryThreshold", :shape "Double"})) (clojure.core/contains? input :load-threshold) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-double (input :load-threshold)) #:http.request.field{:name "LoadThreshold", :shape "Double"})) (clojure.core/contains? input :alarms) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :alarms)) #:http.request.field{:name "Alarms", :shape "Strings"}))))

(clojure.core/defn- ser-layer-type [input] #:http.request.field{:value (clojure.core/get {:memcached "memcached", "memcached" "memcached", "monitoring-master" "monitoring-master", "custom" "custom", "web" "web", :phpapp "php-app", "db-master" "db-master", :monitoringmaster "monitoring-master", :dbmaster "db-master", :custom "custom", "rails-app" "rails-app", "php-app" "php-app", :javaapp "java-app", :nodejsapp "nodejs-app", :lb "lb", :railsapp "rails-app", "nodejs-app" "nodejs-app", "lb" "lb", "ecs-cluster" "ecs-cluster", "aws-flow-ruby" "aws-flow-ruby", "java-app" "java-app", :awsflowruby "aws-flow-ruby", :ecscluster "ecs-cluster", :web "web"} input), :shape "LayerType"})

(clojure.core/defn- ser-resource-arn [input] #:http.request.field{:value input, :shape "ResourceArn"})

(clojure.core/defn- ser-block-device-mapping [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "BlockDeviceMapping", :type "structure"} (clojure.core/contains? input :device-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :device-name)) #:http.request.field{:name "DeviceName", :shape "String"})) (clojure.core/contains? input :no-device) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :no-device)) #:http.request.field{:name "NoDevice", :shape "String"})) (clojure.core/contains? input :virtual-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :virtual-name)) #:http.request.field{:name "VirtualName", :shape "String"})) (clojure.core/contains? input :ebs) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ebs-block-device (input :ebs)) #:http.request.field{:name "Ebs", :shape "EbsBlockDevice"}))))

(clojure.core/defn- ser-max-results [input] #:http.request.field{:value input, :shape "MaxResults"})

(clojure.core/defn- ser-weekly-auto-scaling-schedule [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "WeeklyAutoScalingSchedule", :type "structure"} (clojure.core/contains? input :monday) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-daily-auto-scaling-schedule (input :monday)) #:http.request.field{:name "Monday", :shape "DailyAutoScalingSchedule"})) (clojure.core/contains? input :tuesday) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-daily-auto-scaling-schedule (input :tuesday)) #:http.request.field{:name "Tuesday", :shape "DailyAutoScalingSchedule"})) (clojure.core/contains? input :wednesday) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-daily-auto-scaling-schedule (input :wednesday)) #:http.request.field{:name "Wednesday", :shape "DailyAutoScalingSchedule"})) (clojure.core/contains? input :thursday) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-daily-auto-scaling-schedule (input :thursday)) #:http.request.field{:name "Thursday", :shape "DailyAutoScalingSchedule"})) (clojure.core/contains? input :friday) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-daily-auto-scaling-schedule (input :friday)) #:http.request.field{:name "Friday", :shape "DailyAutoScalingSchedule"})) (clojure.core/contains? input :saturday) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-daily-auto-scaling-schedule (input :saturday)) #:http.request.field{:name "Saturday", :shape "DailyAutoScalingSchedule"})) (clojure.core/contains? input :sunday) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-daily-auto-scaling-schedule (input :sunday)) #:http.request.field{:name "Sunday", :shape "DailyAutoScalingSchedule"}))))

(clojure.core/defn- ser-volume-configuration [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:mount-point input)) #:http.request.field{:name "MountPoint", :shape "String"}) (clojure.core/into (ser-integer (:number-of-disks input)) #:http.request.field{:name "NumberOfDisks", :shape "Integer"}) (clojure.core/into (ser-integer (:size input)) #:http.request.field{:name "Size", :shape "Integer"})], :shape "VolumeConfiguration", :type "structure"} (clojure.core/contains? input :raid-level) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :raid-level)) #:http.request.field{:name "RaidLevel", :shape "Integer"})) (clojure.core/contains? input :volume-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :volume-type)) #:http.request.field{:name "VolumeType", :shape "String"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :iops)) #:http.request.field{:name "Iops", :shape "Integer"})) (clojure.core/contains? input :encrypted) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :encrypted)) #:http.request.field{:name "Encrypted", :shape "Boolean"}))))

(clojure.core/defn- ser-volume-configurations [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-volume-configuration coll) #:http.request.field{:shape "VolumeConfiguration"}))) input), :shape "VolumeConfigurations", :type "list"})

(clojure.core/defn- ser-auto-scaling-type [input] #:http.request.field{:value (clojure.core/get {"load" "load", :load "load", "timer" "timer", :timer "timer"} input), :shape "AutoScalingType"})

(clojure.core/defn- ser-deployment-command [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-deployment-command-name (:name input)) #:http.request.field{:name "Name", :shape "DeploymentCommandName"})], :shape "DeploymentCommand", :type "structure"} (clojure.core/contains? input :args) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-deployment-command-args (input :args)) #:http.request.field{:name "Args", :shape "DeploymentCommandArgs"}))))

(clojure.core/defn- ser-cloud-watch-logs-time-zone [input] #:http.request.field{:value (clojure.core/get {"LOCAL" "LOCAL", :local "LOCAL", "UTC" "UTC", :utc "UTC"} input), :shape "CloudWatchLogsTimeZone"})

(clojure.core/defn- ser-layer-attributes [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [[k v]] [(clojure.core/into (ser-layer-attributes-keys k) #:http.request.field{:map-info "key", :shape "LayerAttributesKeys"}) (clojure.core/into (ser-string v) #:http.request.field{:map-info "value", :shape "String"})])) input), :shape "LayerAttributes", :type "map"})

(clojure.core/defn- ser-app-attributes-keys [input] #:http.request.field{:value (clojure.core/get {"DocumentRoot" "DocumentRoot", :document-root "DocumentRoot", "RailsEnv" "RailsEnv", :rails-env "RailsEnv", "AutoBundleOnDeploy" "AutoBundleOnDeploy", :auto-bundle-on-deploy "AutoBundleOnDeploy", "AwsFlowRubySettings" "AwsFlowRubySettings", :aws-flow-ruby-settings "AwsFlowRubySettings"} input), :shape "AppAttributesKeys"})

(clojure.core/defn- ser-deployment-command-name [input] #:http.request.field{:value (clojure.core/get {:rollback "rollback", "stop" "stop", :undeploy "undeploy", "deploy" "deploy", "undeploy" "undeploy", :restart "restart", "update_custom_cookbooks" "update_custom_cookbooks", :execute-recipes "execute_recipes", :update-custom-cookbooks "update_custom_cookbooks", :update-dependencies "update_dependencies", "configure" "configure", :start "start", :setup "setup", "install_dependencies" "install_dependencies", :configure "configure", "start" "start", :stop "stop", "setup" "setup", "execute_recipes" "execute_recipes", "restart" "restart", :install-dependencies "install_dependencies", "rollback" "rollback", :deploy "deploy", "update_dependencies" "update_dependencies"} input), :shape "DeploymentCommandName"})

(clojure.core/defn- ser-cloud-watch-logs-log-stream [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "CloudWatchLogsLogStream", :type "structure"} (clojure.core/contains? input :batch-size) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :batch-size)) #:http.request.field{:name "BatchSize", :shape "Integer"})) (clojure.core/contains? input :encoding) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cloud-watch-logs-encoding (input :encoding)) #:http.request.field{:name "Encoding", :shape "CloudWatchLogsEncoding"})) (clojure.core/contains? input :initial-position) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cloud-watch-logs-initial-position (input :initial-position)) #:http.request.field{:name "InitialPosition", :shape "CloudWatchLogsInitialPosition"})) (clojure.core/contains? input :file) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :file)) #:http.request.field{:name "File", :shape "String"})) (clojure.core/contains? input :batch-count) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :batch-count)) #:http.request.field{:name "BatchCount", :shape "Integer"})) (clojure.core/contains? input :time-zone) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cloud-watch-logs-time-zone (input :time-zone)) #:http.request.field{:name "TimeZone", :shape "CloudWatchLogsTimeZone"})) (clojure.core/contains? input :multi-line-start-pattern) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :multi-line-start-pattern)) #:http.request.field{:name "MultiLineStartPattern", :shape "String"})) (clojure.core/contains? input :file-fingerprint-lines) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :file-fingerprint-lines)) #:http.request.field{:name "FileFingerprintLines", :shape "String"})) (clojure.core/contains? input :log-group-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :log-group-name)) #:http.request.field{:name "LogGroupName", :shape "String"})) (clojure.core/contains? input :buffer-duration) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :buffer-duration)) #:http.request.field{:name "BufferDuration", :shape "Integer"})) (clojure.core/contains? input :datetime-format) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :datetime-format)) #:http.request.field{:name "DatetimeFormat", :shape "String"}))))

(clojure.core/defn- ser-boolean [input] #:http.request.field{:value input, :shape "Boolean"})

(clojure.core/defn- req-describe-elastic-ips-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})) (clojure.core/contains? input :stack-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"})) (clojure.core/contains? input :ips) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :ips)) #:http.request.field{:name "Ips", :shape "Strings"}))))

(clojure.core/defn- req-register-instance-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"})]} (clojure.core/contains? input :hostname) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :hostname)) #:http.request.field{:name "Hostname", :shape "String"})) (clojure.core/contains? input :public-ip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :public-ip)) #:http.request.field{:name "PublicIp", :shape "String"})) (clojure.core/contains? input :private-ip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :private-ip)) #:http.request.field{:name "PrivateIp", :shape "String"})) (clojure.core/contains? input :rsa-public-key) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :rsa-public-key)) #:http.request.field{:name "RsaPublicKey", :shape "String"})) (clojure.core/contains? input :rsa-public-key-fingerprint) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :rsa-public-key-fingerprint)) #:http.request.field{:name "RsaPublicKeyFingerprint", :shape "String"})) (clojure.core/contains? input :instance-identity) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-identity (input :instance-identity)) #:http.request.field{:name "InstanceIdentity", :shape "InstanceIdentity"}))))

(clojure.core/defn- req-set-load-based-auto-scaling-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :layer-id)) #:http.request.field{:name "LayerId", :shape "String"})]} (clojure.core/contains? input :enable) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :enable)) #:http.request.field{:name "Enable", :shape "Boolean"})) (clojure.core/contains? input :up-scaling) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-auto-scaling-thresholds (input :up-scaling)) #:http.request.field{:name "UpScaling", :shape "AutoScalingThresholds"})) (clojure.core/contains? input :down-scaling) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-auto-scaling-thresholds (input :down-scaling)) #:http.request.field{:name "DownScaling", :shape "AutoScalingThresholds"}))))

(clojure.core/defn- req-associate-elastic-ip-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :elastic-ip)) #:http.request.field{:name "ElasticIp", :shape "String"})]} (clojure.core/contains? input :instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"}))))

(clojure.core/defn- req-get-hostname-suggestion-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :layer-id)) #:http.request.field{:name "LayerId", :shape "String"})]}))

(clojure.core/defn- req-create-app-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"}) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"}) (clojure.core/into (ser-app-type (input :type)) #:http.request.field{:name "Type", :shape "AppType"})]} (clojure.core/contains? input :shortname) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :shortname)) #:http.request.field{:name "Shortname", :shape "String"})) (clojure.core/contains? input :enable-ssl) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :enable-ssl)) #:http.request.field{:name "EnableSsl", :shape "Boolean"})) (clojure.core/contains? input :domains) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :domains)) #:http.request.field{:name "Domains", :shape "Strings"})) (clojure.core/contains? input :app-source) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-source (input :app-source)) #:http.request.field{:name "AppSource", :shape "Source"})) (clojure.core/contains? input :attributes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-app-attributes (input :attributes)) #:http.request.field{:name "Attributes", :shape "AppAttributes"})) (clojure.core/contains? input :data-sources) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-data-sources (input :data-sources)) #:http.request.field{:name "DataSources", :shape "DataSources"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :ssl-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ssl-configuration (input :ssl-configuration)) #:http.request.field{:name "SslConfiguration", :shape "SslConfiguration"})) (clojure.core/contains? input :environment) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-environment-variables (input :environment)) #:http.request.field{:name "Environment", :shape "EnvironmentVariables"}))))

(clojure.core/defn- req-describe-load-based-auto-scaling-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-strings (input :layer-ids)) #:http.request.field{:name "LayerIds", :shape "Strings"})]}))

(clojure.core/defn- req-set-permission-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"}) (clojure.core/into (ser-string (input :iam-user-arn)) #:http.request.field{:name "IamUserArn", :shape "String"})]} (clojure.core/contains? input :allow-ssh) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :allow-ssh)) #:http.request.field{:name "AllowSsh", :shape "Boolean"})) (clojure.core/contains? input :allow-sudo) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :allow-sudo)) #:http.request.field{:name "AllowSudo", :shape "Boolean"})) (clojure.core/contains? input :level) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :level)) #:http.request.field{:name "Level", :shape "String"}))))

(clojure.core/defn- req-update-app-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :app-id)) #:http.request.field{:name "AppId", :shape "String"})]} (clojure.core/contains? input :type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-app-type (input :type)) #:http.request.field{:name "Type", :shape "AppType"})) (clojure.core/contains? input :enable-ssl) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :enable-ssl)) #:http.request.field{:name "EnableSsl", :shape "Boolean"})) (clojure.core/contains? input :domains) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :domains)) #:http.request.field{:name "Domains", :shape "Strings"})) (clojure.core/contains? input :app-source) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-source (input :app-source)) #:http.request.field{:name "AppSource", :shape "Source"})) (clojure.core/contains? input :attributes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-app-attributes (input :attributes)) #:http.request.field{:name "Attributes", :shape "AppAttributes"})) (clojure.core/contains? input :data-sources) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-data-sources (input :data-sources)) #:http.request.field{:name "DataSources", :shape "DataSources"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :ssl-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ssl-configuration (input :ssl-configuration)) #:http.request.field{:name "SslConfiguration", :shape "SslConfiguration"})) (clojure.core/contains? input :environment) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-environment-variables (input :environment)) #:http.request.field{:name "Environment", :shape "EnvironmentVariables"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"}))))

(clojure.core/defn- req-register-ecs-cluster-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :ecs-cluster-arn)) #:http.request.field{:name "EcsClusterArn", :shape "String"}) (clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"})]}))

(clojure.core/defn- req-register-elastic-ip-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :elastic-ip)) #:http.request.field{:name "ElasticIp", :shape "String"}) (clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"})]}))

(clojure.core/defn- req-delete-stack-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"})]}))

(clojure.core/defn- req-set-time-based-auto-scaling-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})]} (clojure.core/contains? input :auto-scaling-schedule) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-weekly-auto-scaling-schedule (input :auto-scaling-schedule)) #:http.request.field{:name "AutoScalingSchedule", :shape "WeeklyAutoScalingSchedule"}))))

(clojure.core/defn- req-describe-agent-versions-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :stack-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"})) (clojure.core/contains? input :configuration-manager) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-stack-configuration-manager (input :configuration-manager)) #:http.request.field{:name "ConfigurationManager", :shape "StackConfigurationManager"}))))

(clojure.core/defn- req-create-stack-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"}) (clojure.core/into (ser-string (input :region)) #:http.request.field{:name "Region", :shape "String"}) (clojure.core/into (ser-string (input :service-role-arn)) #:http.request.field{:name "ServiceRoleArn", :shape "String"}) (clojure.core/into (ser-string (input :default-instance-profile-arn)) #:http.request.field{:name "DefaultInstanceProfileArn", :shape "String"})]} (clojure.core/contains? input :custom-cookbooks-source) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-source (input :custom-cookbooks-source)) #:http.request.field{:name "CustomCookbooksSource", :shape "Source"})) (clojure.core/contains? input :hostname-theme) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :hostname-theme)) #:http.request.field{:name "HostnameTheme", :shape "String"})) (clojure.core/contains? input :default-ssh-key-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :default-ssh-key-name)) #:http.request.field{:name "DefaultSshKeyName", :shape "String"})) (clojure.core/contains? input :default-availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :default-availability-zone)) #:http.request.field{:name "DefaultAvailabilityZone", :shape "String"})) (clojure.core/contains? input :chef-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-chef-configuration (input :chef-configuration)) #:http.request.field{:name "ChefConfiguration", :shape "ChefConfiguration"})) (clojure.core/contains? input :configuration-manager) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-stack-configuration-manager (input :configuration-manager)) #:http.request.field{:name "ConfigurationManager", :shape "StackConfigurationManager"})) (clojure.core/contains? input :agent-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :agent-version)) #:http.request.field{:name "AgentVersion", :shape "String"})) (clojure.core/contains? input :use-opsworks-security-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :use-opsworks-security-groups)) #:http.request.field{:name "UseOpsworksSecurityGroups", :shape "Boolean"})) (clojure.core/contains? input :attributes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-stack-attributes (input :attributes)) #:http.request.field{:name "Attributes", :shape "StackAttributes"})) (clojure.core/contains? input :default-root-device-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-root-device-type (input :default-root-device-type)) #:http.request.field{:name "DefaultRootDeviceType", :shape "RootDeviceType"})) (clojure.core/contains? input :vpc-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"})) (clojure.core/contains? input :use-custom-cookbooks) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :use-custom-cookbooks)) #:http.request.field{:name "UseCustomCookbooks", :shape "Boolean"})) (clojure.core/contains? input :custom-json) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :custom-json)) #:http.request.field{:name "CustomJson", :shape "String"})) (clojure.core/contains? input :default-subnet-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :default-subnet-id)) #:http.request.field{:name "DefaultSubnetId", :shape "String"})) (clojure.core/contains? input :default-os) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :default-os)) #:http.request.field{:name "DefaultOs", :shape "String"}))))

(clojure.core/defn- req-clone-stack-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-stack-id)) #:http.request.field{:name "SourceStackId", :shape "String"}) (clojure.core/into (ser-string (input :service-role-arn)) #:http.request.field{:name "ServiceRoleArn", :shape "String"})]} (clojure.core/contains? input :custom-cookbooks-source) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-source (input :custom-cookbooks-source)) #:http.request.field{:name "CustomCookbooksSource", :shape "Source"})) (clojure.core/contains? input :hostname-theme) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :hostname-theme)) #:http.request.field{:name "HostnameTheme", :shape "String"})) (clojure.core/contains? input :default-ssh-key-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :default-ssh-key-name)) #:http.request.field{:name "DefaultSshKeyName", :shape "String"})) (clojure.core/contains? input :default-availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :default-availability-zone)) #:http.request.field{:name "DefaultAvailabilityZone", :shape "String"})) (clojure.core/contains? input :chef-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-chef-configuration (input :chef-configuration)) #:http.request.field{:name "ChefConfiguration", :shape "ChefConfiguration"})) (clojure.core/contains? input :configuration-manager) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-stack-configuration-manager (input :configuration-manager)) #:http.request.field{:name "ConfigurationManager", :shape "StackConfigurationManager"})) (clojure.core/contains? input :agent-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :agent-version)) #:http.request.field{:name "AgentVersion", :shape "String"})) (clojure.core/contains? input :use-opsworks-security-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :use-opsworks-security-groups)) #:http.request.field{:name "UseOpsworksSecurityGroups", :shape "Boolean"})) (clojure.core/contains? input :attributes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-stack-attributes (input :attributes)) #:http.request.field{:name "Attributes", :shape "StackAttributes"})) (clojure.core/contains? input :default-root-device-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-root-device-type (input :default-root-device-type)) #:http.request.field{:name "DefaultRootDeviceType", :shape "RootDeviceType"})) (clojure.core/contains? input :vpc-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"})) (clojure.core/contains? input :use-custom-cookbooks) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :use-custom-cookbooks)) #:http.request.field{:name "UseCustomCookbooks", :shape "Boolean"})) (clojure.core/contains? input :default-instance-profile-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :default-instance-profile-arn)) #:http.request.field{:name "DefaultInstanceProfileArn", :shape "String"})) (clojure.core/contains? input :custom-json) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :custom-json)) #:http.request.field{:name "CustomJson", :shape "String"})) (clojure.core/contains? input :default-subnet-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :default-subnet-id)) #:http.request.field{:name "DefaultSubnetId", :shape "String"})) (clojure.core/contains? input :clone-app-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :clone-app-ids)) #:http.request.field{:name "CloneAppIds", :shape "Strings"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"})) (clojure.core/contains? input :region) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :region)) #:http.request.field{:name "Region", :shape "String"})) (clojure.core/contains? input :default-os) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :default-os)) #:http.request.field{:name "DefaultOs", :shape "String"})) (clojure.core/contains? input :clone-permissions) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :clone-permissions)) #:http.request.field{:name "ClonePermissions", :shape "Boolean"}))))

(clojure.core/defn- req-deregister-instance-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})]}))

(clojure.core/defn- req-update-layer-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :layer-id)) #:http.request.field{:name "LayerId", :shape "String"})]} (clojure.core/contains? input :custom-recipes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-recipes (input :custom-recipes)) #:http.request.field{:name "CustomRecipes", :shape "Recipes"})) (clojure.core/contains? input :shortname) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :shortname)) #:http.request.field{:name "Shortname", :shape "String"})) (clojure.core/contains? input :custom-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :custom-security-group-ids)) #:http.request.field{:name "CustomSecurityGroupIds", :shape "Strings"})) (clojure.core/contains? input :enable-auto-healing) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :enable-auto-healing)) #:http.request.field{:name "EnableAutoHealing", :shape "Boolean"})) (clojure.core/contains? input :use-ebs-optimized-instances) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :use-ebs-optimized-instances)) #:http.request.field{:name "UseEbsOptimizedInstances", :shape "Boolean"})) (clojure.core/contains? input :lifecycle-event-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-lifecycle-event-configuration (input :lifecycle-event-configuration)) #:http.request.field{:name "LifecycleEventConfiguration", :shape "LifecycleEventConfiguration"})) (clojure.core/contains? input :auto-assign-public-ips) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :auto-assign-public-ips)) #:http.request.field{:name "AutoAssignPublicIps", :shape "Boolean"})) (clojure.core/contains? input :cloud-watch-logs-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cloud-watch-logs-configuration (input :cloud-watch-logs-configuration)) #:http.request.field{:name "CloudWatchLogsConfiguration", :shape "CloudWatchLogsConfiguration"})) (clojure.core/contains? input :attributes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-layer-attributes (input :attributes)) #:http.request.field{:name "Attributes", :shape "LayerAttributes"})) (clojure.core/contains? input :auto-assign-elastic-ips) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :auto-assign-elastic-ips)) #:http.request.field{:name "AutoAssignElasticIps", :shape "Boolean"})) (clojure.core/contains? input :packages) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :packages)) #:http.request.field{:name "Packages", :shape "Strings"})) (clojure.core/contains? input :custom-json) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :custom-json)) #:http.request.field{:name "CustomJson", :shape "String"})) (clojure.core/contains? input :install-updates-on-boot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :install-updates-on-boot)) #:http.request.field{:name "InstallUpdatesOnBoot", :shape "Boolean"})) (clojure.core/contains? input :volume-configurations) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-volume-configurations (input :volume-configurations)) #:http.request.field{:name "VolumeConfigurations", :shape "VolumeConfigurations"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"})) (clojure.core/contains? input :custom-instance-profile-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :custom-instance-profile-arn)) #:http.request.field{:name "CustomInstanceProfileArn", :shape "String"}))))

(clojure.core/defn- req-assign-instance-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"}) (clojure.core/into (ser-strings (input :layer-ids)) #:http.request.field{:name "LayerIds", :shape "Strings"})]}))

(clojure.core/defn- req-describe-raid-arrays-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})) (clojure.core/contains? input :stack-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"})) (clojure.core/contains? input :raid-array-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :raid-array-ids)) #:http.request.field{:name "RaidArrayIds", :shape "Strings"}))))

(clojure.core/defn- req-describe-commands-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :deployment-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :deployment-id)) #:http.request.field{:name "DeploymentId", :shape "String"})) (clojure.core/contains? input :instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})) (clojure.core/contains? input :command-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :command-ids)) #:http.request.field{:name "CommandIds", :shape "Strings"}))))

(clojure.core/defn- req-delete-instance-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})]} (clojure.core/contains? input :delete-elastic-ip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :delete-elastic-ip)) #:http.request.field{:name "DeleteElasticIp", :shape "Boolean"})) (clojure.core/contains? input :delete-volumes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :delete-volumes)) #:http.request.field{:name "DeleteVolumes", :shape "Boolean"}))))

(clojure.core/defn- req-deregister-elastic-ip-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :elastic-ip)) #:http.request.field{:name "ElasticIp", :shape "String"})]}))

(clojure.core/defn- req-update-my-user-profile-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :ssh-public-key) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ssh-public-key)) #:http.request.field{:name "SshPublicKey", :shape "String"}))))

(clojure.core/defn- req-describe-instances-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :stack-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"})) (clojure.core/contains? input :layer-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :layer-id)) #:http.request.field{:name "LayerId", :shape "String"})) (clojure.core/contains? input :instance-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "Strings"}))))

(clojure.core/defn- req-update-stack-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"})]} (clojure.core/contains? input :custom-cookbooks-source) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-source (input :custom-cookbooks-source)) #:http.request.field{:name "CustomCookbooksSource", :shape "Source"})) (clojure.core/contains? input :service-role-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :service-role-arn)) #:http.request.field{:name "ServiceRoleArn", :shape "String"})) (clojure.core/contains? input :hostname-theme) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :hostname-theme)) #:http.request.field{:name "HostnameTheme", :shape "String"})) (clojure.core/contains? input :default-ssh-key-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :default-ssh-key-name)) #:http.request.field{:name "DefaultSshKeyName", :shape "String"})) (clojure.core/contains? input :default-availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :default-availability-zone)) #:http.request.field{:name "DefaultAvailabilityZone", :shape "String"})) (clojure.core/contains? input :chef-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-chef-configuration (input :chef-configuration)) #:http.request.field{:name "ChefConfiguration", :shape "ChefConfiguration"})) (clojure.core/contains? input :configuration-manager) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-stack-configuration-manager (input :configuration-manager)) #:http.request.field{:name "ConfigurationManager", :shape "StackConfigurationManager"})) (clojure.core/contains? input :agent-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :agent-version)) #:http.request.field{:name "AgentVersion", :shape "String"})) (clojure.core/contains? input :use-opsworks-security-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :use-opsworks-security-groups)) #:http.request.field{:name "UseOpsworksSecurityGroups", :shape "Boolean"})) (clojure.core/contains? input :attributes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-stack-attributes (input :attributes)) #:http.request.field{:name "Attributes", :shape "StackAttributes"})) (clojure.core/contains? input :default-root-device-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-root-device-type (input :default-root-device-type)) #:http.request.field{:name "DefaultRootDeviceType", :shape "RootDeviceType"})) (clojure.core/contains? input :use-custom-cookbooks) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :use-custom-cookbooks)) #:http.request.field{:name "UseCustomCookbooks", :shape "Boolean"})) (clojure.core/contains? input :default-instance-profile-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :default-instance-profile-arn)) #:http.request.field{:name "DefaultInstanceProfileArn", :shape "String"})) (clojure.core/contains? input :custom-json) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :custom-json)) #:http.request.field{:name "CustomJson", :shape "String"})) (clojure.core/contains? input :default-subnet-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :default-subnet-id)) #:http.request.field{:name "DefaultSubnetId", :shape "String"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"})) (clojure.core/contains? input :default-os) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :default-os)) #:http.request.field{:name "DefaultOs", :shape "String"}))))

(clojure.core/defn- req-stop-instance-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})]} (clojure.core/contains? input :force) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :force)) #:http.request.field{:name "Force", :shape "Boolean"}))))

(clojure.core/defn- req-unassign-instance-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})]}))

(clojure.core/defn- req-describe-stack-provisioning-parameters-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"})]}))

(clojure.core/defn- req-describe-layers-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :stack-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"})) (clojure.core/contains? input :layer-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :layer-ids)) #:http.request.field{:name "LayerIds", :shape "Strings"}))))

(clojure.core/defn- req-unassign-volume-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String"})]}))

(clojure.core/defn- req-tag-resource-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-resource-arn (input :resource-arn)) #:http.request.field{:name "ResourceArn", :shape "ResourceArn"}) (clojure.core/into (ser-tags (input :tags)) #:http.request.field{:name "Tags", :shape "Tags"})]}))

(clojure.core/defn- req-update-volume-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String"})]} (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"})) (clojure.core/contains? input :mount-point) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :mount-point)) #:http.request.field{:name "MountPoint", :shape "String"}))))

(clojure.core/defn- req-update-instance-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})]} (clojure.core/contains? input :ebs-optimized) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :ebs-optimized)) #:http.request.field{:name "EbsOptimized", :shape "Boolean"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "String"})) (clojure.core/contains? input :agent-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :agent-version)) #:http.request.field{:name "AgentVersion", :shape "String"})) (clojure.core/contains? input :os) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :os)) #:http.request.field{:name "Os", :shape "String"})) (clojure.core/contains? input :layer-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :layer-ids)) #:http.request.field{:name "LayerIds", :shape "Strings"})) (clojure.core/contains? input :hostname) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :hostname)) #:http.request.field{:name "Hostname", :shape "String"})) (clojure.core/contains? input :ami-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ami-id)) #:http.request.field{:name "AmiId", :shape "String"})) (clojure.core/contains? input :architecture) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-architecture (input :architecture)) #:http.request.field{:name "Architecture", :shape "Architecture"})) (clojure.core/contains? input :install-updates-on-boot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :install-updates-on-boot)) #:http.request.field{:name "InstallUpdatesOnBoot", :shape "Boolean"})) (clojure.core/contains? input :auto-scaling-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-auto-scaling-type (input :auto-scaling-type)) #:http.request.field{:name "AutoScalingType", :shape "AutoScalingType"})) (clojure.core/contains? input :ssh-key-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ssh-key-name)) #:http.request.field{:name "SshKeyName", :shape "String"}))))

(clojure.core/defn- req-detach-elastic-load-balancer-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :elastic-load-balancer-name)) #:http.request.field{:name "ElasticLoadBalancerName", :shape "String"}) (clojure.core/into (ser-string (input :layer-id)) #:http.request.field{:name "LayerId", :shape "String"})]}))

(clojure.core/defn- req-grant-access-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})]} (clojure.core/contains? input :valid-for-in-minutes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-valid-for-in-minutes (input :valid-for-in-minutes)) #:http.request.field{:name "ValidForInMinutes", :shape "ValidForInMinutes"}))))

(clojure.core/defn- req-start-stack-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"})]}))

(clojure.core/defn- req-delete-user-profile-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :iam-user-arn)) #:http.request.field{:name "IamUserArn", :shape "String"})]}))

(clojure.core/defn- req-update-user-profile-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :iam-user-arn)) #:http.request.field{:name "IamUserArn", :shape "String"})]} (clojure.core/contains? input :ssh-username) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ssh-username)) #:http.request.field{:name "SshUsername", :shape "String"})) (clojure.core/contains? input :ssh-public-key) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ssh-public-key)) #:http.request.field{:name "SshPublicKey", :shape "String"})) (clojure.core/contains? input :allow-self-management) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :allow-self-management)) #:http.request.field{:name "AllowSelfManagement", :shape "Boolean"}))))

(clojure.core/defn- req-describe-permissions-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :iam-user-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :iam-user-arn)) #:http.request.field{:name "IamUserArn", :shape "String"})) (clojure.core/contains? input :stack-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"}))))

(clojure.core/defn- req-describe-user-profiles-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :iam-user-arns) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :iam-user-arns)) #:http.request.field{:name "IamUserArns", :shape "Strings"}))))

(clojure.core/defn- req-create-layer-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"}) (clojure.core/into (ser-layer-type (input :type)) #:http.request.field{:name "Type", :shape "LayerType"}) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"}) (clojure.core/into (ser-string (input :shortname)) #:http.request.field{:name "Shortname", :shape "String"})]} (clojure.core/contains? input :custom-recipes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-recipes (input :custom-recipes)) #:http.request.field{:name "CustomRecipes", :shape "Recipes"})) (clojure.core/contains? input :custom-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :custom-security-group-ids)) #:http.request.field{:name "CustomSecurityGroupIds", :shape "Strings"})) (clojure.core/contains? input :enable-auto-healing) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :enable-auto-healing)) #:http.request.field{:name "EnableAutoHealing", :shape "Boolean"})) (clojure.core/contains? input :use-ebs-optimized-instances) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :use-ebs-optimized-instances)) #:http.request.field{:name "UseEbsOptimizedInstances", :shape "Boolean"})) (clojure.core/contains? input :lifecycle-event-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-lifecycle-event-configuration (input :lifecycle-event-configuration)) #:http.request.field{:name "LifecycleEventConfiguration", :shape "LifecycleEventConfiguration"})) (clojure.core/contains? input :auto-assign-public-ips) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :auto-assign-public-ips)) #:http.request.field{:name "AutoAssignPublicIps", :shape "Boolean"})) (clojure.core/contains? input :cloud-watch-logs-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cloud-watch-logs-configuration (input :cloud-watch-logs-configuration)) #:http.request.field{:name "CloudWatchLogsConfiguration", :shape "CloudWatchLogsConfiguration"})) (clojure.core/contains? input :attributes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-layer-attributes (input :attributes)) #:http.request.field{:name "Attributes", :shape "LayerAttributes"})) (clojure.core/contains? input :auto-assign-elastic-ips) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :auto-assign-elastic-ips)) #:http.request.field{:name "AutoAssignElasticIps", :shape "Boolean"})) (clojure.core/contains? input :packages) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :packages)) #:http.request.field{:name "Packages", :shape "Strings"})) (clojure.core/contains? input :custom-json) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :custom-json)) #:http.request.field{:name "CustomJson", :shape "String"})) (clojure.core/contains? input :install-updates-on-boot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :install-updates-on-boot)) #:http.request.field{:name "InstallUpdatesOnBoot", :shape "Boolean"})) (clojure.core/contains? input :volume-configurations) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-volume-configurations (input :volume-configurations)) #:http.request.field{:name "VolumeConfigurations", :shape "VolumeConfigurations"})) (clojure.core/contains? input :custom-instance-profile-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :custom-instance-profile-arn)) #:http.request.field{:name "CustomInstanceProfileArn", :shape "String"}))))

(clojure.core/defn- req-create-deployment-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"}) (clojure.core/into (ser-deployment-command (input :command)) #:http.request.field{:name "Command", :shape "DeploymentCommand"})]} (clojure.core/contains? input :app-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :app-id)) #:http.request.field{:name "AppId", :shape "String"})) (clojure.core/contains? input :instance-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "Strings"})) (clojure.core/contains? input :layer-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :layer-ids)) #:http.request.field{:name "LayerIds", :shape "Strings"})) (clojure.core/contains? input :comment) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :comment)) #:http.request.field{:name "Comment", :shape "String"})) (clojure.core/contains? input :custom-json) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :custom-json)) #:http.request.field{:name "CustomJson", :shape "String"}))))

(clojure.core/defn- req-describe-service-errors-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :stack-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"})) (clojure.core/contains? input :instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})) (clojure.core/contains? input :service-error-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :service-error-ids)) #:http.request.field{:name "ServiceErrorIds", :shape "Strings"}))))

(clojure.core/defn- req-delete-app-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :app-id)) #:http.request.field{:name "AppId", :shape "String"})]}))

(clojure.core/defn- req-describe-volumes-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})) (clojure.core/contains? input :stack-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"})) (clojure.core/contains? input :raid-array-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :raid-array-id)) #:http.request.field{:name "RaidArrayId", :shape "String"})) (clojure.core/contains? input :volume-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :volume-ids)) #:http.request.field{:name "VolumeIds", :shape "Strings"}))))

(clojure.core/defn- req-deregister-ecs-cluster-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :ecs-cluster-arn)) #:http.request.field{:name "EcsClusterArn", :shape "String"})]}))

(clojure.core/defn- req-describe-elastic-load-balancers-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :stack-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"})) (clojure.core/contains? input :layer-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :layer-ids)) #:http.request.field{:name "LayerIds", :shape "Strings"}))))

(clojure.core/defn- req-attach-elastic-load-balancer-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :elastic-load-balancer-name)) #:http.request.field{:name "ElasticLoadBalancerName", :shape "String"}) (clojure.core/into (ser-string (input :layer-id)) #:http.request.field{:name "LayerId", :shape "String"})]}))

(clojure.core/defn- req-register-volume-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"})]} (clojure.core/contains? input :ec-2-volume-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-volume-id)) #:http.request.field{:name "Ec2VolumeId", :shape "String"}))))

(clojure.core/defn- req-reboot-instance-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})]}))

(clojure.core/defn- req-describe-ecs-clusters-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :ecs-cluster-arns) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :ecs-cluster-arns)) #:http.request.field{:name "EcsClusterArns", :shape "Strings"})) (clojure.core/contains? input :stack-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"}))))

(clojure.core/defn- req-register-rds-db-instance-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"}) (clojure.core/into (ser-string (input :rds-db-instance-arn)) #:http.request.field{:name "RdsDbInstanceArn", :shape "String"}) (clojure.core/into (ser-string (input :db-user)) #:http.request.field{:name "DbUser", :shape "String"}) (clojure.core/into (ser-string (input :db-password)) #:http.request.field{:name "DbPassword", :shape "String"})]}))

(clojure.core/defn- req-assign-volume-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String"})]} (clojure.core/contains? input :instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"}))))

(clojure.core/defn- req-describe-stack-summary-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"})]}))

(clojure.core/defn- req-create-instance-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"}) (clojure.core/into (ser-strings (input :layer-ids)) #:http.request.field{:name "LayerIds", :shape "Strings"}) (clojure.core/into (ser-string (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "String"})]} (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String"})) (clojure.core/contains? input :tenancy) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tenancy)) #:http.request.field{:name "Tenancy", :shape "String"})) (clojure.core/contains? input :root-device-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-root-device-type (input :root-device-type)) #:http.request.field{:name "RootDeviceType", :shape "RootDeviceType"})) (clojure.core/contains? input :ebs-optimized) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :ebs-optimized)) #:http.request.field{:name "EbsOptimized", :shape "Boolean"})) (clojure.core/contains? input :agent-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :agent-version)) #:http.request.field{:name "AgentVersion", :shape "String"})) (clojure.core/contains? input :os) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :os)) #:http.request.field{:name "Os", :shape "String"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :hostname) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :hostname)) #:http.request.field{:name "Hostname", :shape "String"})) (clojure.core/contains? input :ami-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ami-id)) #:http.request.field{:name "AmiId", :shape "String"})) (clojure.core/contains? input :block-device-mappings) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-block-device-mappings (input :block-device-mappings)) #:http.request.field{:name "BlockDeviceMappings", :shape "BlockDeviceMappings"})) (clojure.core/contains? input :architecture) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-architecture (input :architecture)) #:http.request.field{:name "Architecture", :shape "Architecture"})) (clojure.core/contains? input :install-updates-on-boot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :install-updates-on-boot)) #:http.request.field{:name "InstallUpdatesOnBoot", :shape "Boolean"})) (clojure.core/contains? input :virtualization-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :virtualization-type)) #:http.request.field{:name "VirtualizationType", :shape "String"})) (clojure.core/contains? input :auto-scaling-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-auto-scaling-type (input :auto-scaling-type)) #:http.request.field{:name "AutoScalingType", :shape "AutoScalingType"})) (clojure.core/contains? input :ssh-key-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ssh-key-name)) #:http.request.field{:name "SshKeyName", :shape "String"}))))

(clojure.core/defn- req-start-instance-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})]}))

(clojure.core/defn- req-stop-stack-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"})]}))

(clojure.core/defn- req-describe-stacks-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :stack-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :stack-ids)) #:http.request.field{:name "StackIds", :shape "Strings"}))))

(clojure.core/defn- req-describe-rds-db-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"})]} (clojure.core/contains? input :rds-db-instance-arns) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :rds-db-instance-arns)) #:http.request.field{:name "RdsDbInstanceArns", :shape "Strings"}))))

(clojure.core/defn- req-delete-layer-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :layer-id)) #:http.request.field{:name "LayerId", :shape "String"})]}))

(clojure.core/defn- req-describe-apps-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :stack-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"})) (clojure.core/contains? input :app-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :app-ids)) #:http.request.field{:name "AppIds", :shape "Strings"}))))

(clojure.core/defn- req-deregister-rds-db-instance-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :rds-db-instance-arn)) #:http.request.field{:name "RdsDbInstanceArn", :shape "String"})]}))

(clojure.core/defn- req-update-elastic-ip-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :elastic-ip)) #:http.request.field{:name "ElasticIp", :shape "String"})]} (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"}))))

(clojure.core/defn- req-describe-time-based-auto-scaling-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-strings (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "Strings"})]}))

(clojure.core/defn- req-update-rds-db-instance-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :rds-db-instance-arn)) #:http.request.field{:name "RdsDbInstanceArn", :shape "String"})]} (clojure.core/contains? input :db-user) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-user)) #:http.request.field{:name "DbUser", :shape "String"})) (clojure.core/contains? input :db-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-password)) #:http.request.field{:name "DbPassword", :shape "String"}))))

(clojure.core/defn- req-create-user-profile-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :iam-user-arn)) #:http.request.field{:name "IamUserArn", :shape "String"})]} (clojure.core/contains? input :ssh-username) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ssh-username)) #:http.request.field{:name "SshUsername", :shape "String"})) (clojure.core/contains? input :ssh-public-key) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ssh-public-key)) #:http.request.field{:name "SshPublicKey", :shape "String"})) (clojure.core/contains? input :allow-self-management) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :allow-self-management)) #:http.request.field{:name "AllowSelfManagement", :shape "Boolean"}))))

(clojure.core/defn- req-untag-resource-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-resource-arn (input :resource-arn)) #:http.request.field{:name "ResourceArn", :shape "ResourceArn"}) (clojure.core/into (ser-tag-keys (input :tag-keys)) #:http.request.field{:name "TagKeys", :shape "TagKeys"})]}))

(clojure.core/defn- req-disassociate-elastic-ip-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :elastic-ip)) #:http.request.field{:name "ElasticIp", :shape "String"})]}))

(clojure.core/defn- req-deregister-volume-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String"})]}))

(clojure.core/defn- req-describe-deployments-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :stack-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :stack-id)) #:http.request.field{:name "StackId", :shape "String"})) (clojure.core/contains? input :app-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :app-id)) #:http.request.field{:name "AppId", :shape "String"})) (clojure.core/contains? input :deployment-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-strings (input :deployment-ids)) #:http.request.field{:name "DeploymentIds", :shape "Strings"}))))

(clojure.core/defn- req-list-tags-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-resource-arn (input :resource-arn)) #:http.request.field{:name "ResourceArn", :shape "ResourceArn"})]} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-max-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"}))))

(clojure.core/declare deser-app-type)

(clojure.core/declare deser-switch)

(clojure.core/declare deser-recipes)

(clojure.core/declare deser-time-based-auto-scaling-configurations)

(clojure.core/declare deser-double)

(clojure.core/declare deser-permissions)

(clojure.core/declare deser-ecs-clusters)

(clojure.core/declare deser-user-profile)

(clojure.core/declare deser-self-user-profile)

(clojure.core/declare deser-deployment)

(clojure.core/declare deser-raid-array)

(clojure.core/declare deser-volume)

(clojure.core/declare deser-permission)

(clojure.core/declare deser-ebs-block-device)

(clojure.core/declare deser-app)

(clojure.core/declare deser-operating-system-configuration-manager)

(clojure.core/declare deser-layers)

(clojure.core/declare deser-source)

(clojure.core/declare deser-shutdown-event-configuration)

(clojure.core/declare deser-root-device-type)

(clojure.core/declare deser-environment-variables)

(clojure.core/declare deser-ecs-cluster)

(clojure.core/declare deser-user-profiles)

(clojure.core/declare deser-chef-configuration)

(clojure.core/declare deser-parameters)

(clojure.core/declare deser-load-based-auto-scaling-configurations)

(clojure.core/declare deser-tag-key)

(clojure.core/declare deser-tags)

(clojure.core/declare deser-elastic-load-balancer)

(clojure.core/declare deser-agent-version)

(clojure.core/declare deser-source-type)

(clojure.core/declare deser-strings)

(clojure.core/declare deser-lifecycle-event-configuration)

(clojure.core/declare deser-rds-db-instance)

(clojure.core/declare deser-next-token)

(clojure.core/declare deser-commands)

(clojure.core/declare deser-minute)

(clojure.core/declare deser-deployment-command-args)

(clojure.core/declare deser-cloud-watch-logs-configuration)

(clojure.core/declare deser-daily-auto-scaling-schedule)

(clojure.core/declare deser-rds-db-instances)

(clojure.core/declare deser-elastic-ip)

(clojure.core/declare deser-data-sources)

(clojure.core/declare deser-load-based-auto-scaling-configuration)

(clojure.core/declare deser-layer)

(clojure.core/declare deser-temporary-credential)

(clojure.core/declare deser-hour)

(clojure.core/declare deser-apps)

(clojure.core/declare deser-tag-value)

(clojure.core/declare deser-environment-variable)

(clojure.core/declare deser-ssl-configuration)

(clojure.core/declare deser-cloud-watch-logs-encoding)

(clojure.core/declare deser-stack-attributes)

(clojure.core/declare deser-cloud-watch-logs-log-streams)

(clojure.core/declare deser-stack-attributes-keys)

(clojure.core/declare deser-elastic-ips)

(clojure.core/declare deser-stacks)

(clojure.core/declare deser-layer-attributes-keys)

(clojure.core/declare deser-reported-os)

(clojure.core/declare deser-agent-versions)

(clojure.core/declare deser-integer)

(clojure.core/declare deser-string)

(clojure.core/declare deser-stack-summary)

(clojure.core/declare deser-data-source)

(clojure.core/declare deser-raid-arrays)

(clojure.core/declare deser-command)

(clojure.core/declare deser-instances-count)

(clojure.core/declare deser-operating-system-configuration-managers)

(clojure.core/declare deser-time-based-auto-scaling-configuration)

(clojure.core/declare deser-volume-type)

(clojure.core/declare deser-cloud-watch-logs-initial-position)

(clojure.core/declare deser-app-attributes)

(clojure.core/declare deser-block-device-mappings)

(clojure.core/declare deser-architecture)

(clojure.core/declare deser-stack-configuration-manager)

(clojure.core/declare deser-auto-scaling-thresholds)

(clojure.core/declare deser-layer-type)

(clojure.core/declare deser-virtualization-type)

(clojure.core/declare deser-block-device-mapping)

(clojure.core/declare deser-weekly-auto-scaling-schedule)

(clojure.core/declare deser-service-errors)

(clojure.core/declare deser-volume-configuration)

(clojure.core/declare deser-instance)

(clojure.core/declare deser-volume-configurations)

(clojure.core/declare deser-auto-scaling-type)

(clojure.core/declare deser-deployment-command)

(clojure.core/declare deser-cloud-watch-logs-time-zone)

(clojure.core/declare deser-layer-attributes)

(clojure.core/declare deser-volumes)

(clojure.core/declare deser-app-attributes-keys)

(clojure.core/declare deser-stack)

(clojure.core/declare deser-operating-systems)

(clojure.core/declare deser-instances)

(clojure.core/declare deser-deployment-command-name)

(clojure.core/declare deser-service-error)

(clojure.core/declare deser-operating-system)

(clojure.core/declare deser-cloud-watch-logs-log-stream)

(clojure.core/declare deser-elastic-load-balancers)

(clojure.core/declare deser-date-time)

(clojure.core/declare deser-deployments)

(clojure.core/declare deser-boolean)

(clojure.core/defn- deser-app-type [input] (clojure.core/get {"aws-flow-ruby" :awsflowruby, "java" :java, "rails" :rails, "php" :php, "nodejs" :nodejs, "static" :static, "other" :other} input))

(clojure.core/defn- deser-switch [input] input)

(clojure.core/defn- deser-recipes [input] (clojure.core/cond-> {} (clojure.core/contains? input "Setup") (clojure.core/assoc :setup (deser-strings (input "Setup"))) (clojure.core/contains? input "Configure") (clojure.core/assoc :configure (deser-strings (input "Configure"))) (clojure.core/contains? input "Deploy") (clojure.core/assoc :deploy (deser-strings (input "Deploy"))) (clojure.core/contains? input "Undeploy") (clojure.core/assoc :undeploy (deser-strings (input "Undeploy"))) (clojure.core/contains? input "Shutdown") (clojure.core/assoc :shutdown (deser-strings (input "Shutdown")))))

(clojure.core/defn- deser-time-based-auto-scaling-configurations [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-time-based-auto-scaling-configuration coll))) input))

(clojure.core/defn- deser-double [input] input)

(clojure.core/defn- deser-permissions [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-permission coll))) input))

(clojure.core/defn- deser-ecs-clusters [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-ecs-cluster coll))) input))

(clojure.core/defn- deser-user-profile [input] (clojure.core/cond-> {} (clojure.core/contains? input "IamUserArn") (clojure.core/assoc :iam-user-arn (deser-string (input "IamUserArn"))) (clojure.core/contains? input "Name") (clojure.core/assoc :name (deser-string (input "Name"))) (clojure.core/contains? input "SshUsername") (clojure.core/assoc :ssh-username (deser-string (input "SshUsername"))) (clojure.core/contains? input "SshPublicKey") (clojure.core/assoc :ssh-public-key (deser-string (input "SshPublicKey"))) (clojure.core/contains? input "AllowSelfManagement") (clojure.core/assoc :allow-self-management (deser-boolean (input "AllowSelfManagement")))))

(clojure.core/defn- deser-self-user-profile [input] (clojure.core/cond-> {} (clojure.core/contains? input "IamUserArn") (clojure.core/assoc :iam-user-arn (deser-string (input "IamUserArn"))) (clojure.core/contains? input "Name") (clojure.core/assoc :name (deser-string (input "Name"))) (clojure.core/contains? input "SshUsername") (clojure.core/assoc :ssh-username (deser-string (input "SshUsername"))) (clojure.core/contains? input "SshPublicKey") (clojure.core/assoc :ssh-public-key (deser-string (input "SshPublicKey")))))

(clojure.core/defn- deser-deployment [input] (clojure.core/cond-> {} (clojure.core/contains? input "InstanceIds") (clojure.core/assoc :instance-ids (deser-strings (input "InstanceIds"))) (clojure.core/contains? input "CompletedAt") (clojure.core/assoc :completed-at (deser-date-time (input "CompletedAt"))) (clojure.core/contains? input "Comment") (clojure.core/assoc :comment (deser-string (input "Comment"))) (clojure.core/contains? input "Status") (clojure.core/assoc :status (deser-string (input "Status"))) (clojure.core/contains? input "DeploymentId") (clojure.core/assoc :deployment-id (deser-string (input "DeploymentId"))) (clojure.core/contains? input "Duration") (clojure.core/assoc :duration (deser-integer (input "Duration"))) (clojure.core/contains? input "StackId") (clojure.core/assoc :stack-id (deser-string (input "StackId"))) (clojure.core/contains? input "Command") (clojure.core/assoc :command (deser-deployment-command (input "Command"))) (clojure.core/contains? input "AppId") (clojure.core/assoc :app-id (deser-string (input "AppId"))) (clojure.core/contains? input "CreatedAt") (clojure.core/assoc :created-at (deser-date-time (input "CreatedAt"))) (clojure.core/contains? input "CustomJson") (clojure.core/assoc :custom-json (deser-string (input "CustomJson"))) (clojure.core/contains? input "IamUserArn") (clojure.core/assoc :iam-user-arn (deser-string (input "IamUserArn")))))

(clojure.core/defn- deser-raid-array [input] (clojure.core/cond-> {} (clojure.core/contains? input "InstanceId") (clojure.core/assoc :instance-id (deser-string (input "InstanceId"))) (clojure.core/contains? input "MountPoint") (clojure.core/assoc :mount-point (deser-string (input "MountPoint"))) (clojure.core/contains? input "AvailabilityZone") (clojure.core/assoc :availability-zone (deser-string (input "AvailabilityZone"))) (clojure.core/contains? input "RaidArrayId") (clojure.core/assoc :raid-array-id (deser-string (input "RaidArrayId"))) (clojure.core/contains? input "NumberOfDisks") (clojure.core/assoc :number-of-disks (deser-integer (input "NumberOfDisks"))) (clojure.core/contains? input "Size") (clojure.core/assoc :size (deser-integer (input "Size"))) (clojure.core/contains? input "StackId") (clojure.core/assoc :stack-id (deser-string (input "StackId"))) (clojure.core/contains? input "Iops") (clojure.core/assoc :iops (deser-integer (input "Iops"))) (clojure.core/contains? input "RaidLevel") (clojure.core/assoc :raid-level (deser-integer (input "RaidLevel"))) (clojure.core/contains? input "VolumeType") (clojure.core/assoc :volume-type (deser-string (input "VolumeType"))) (clojure.core/contains? input "CreatedAt") (clojure.core/assoc :created-at (deser-date-time (input "CreatedAt"))) (clojure.core/contains? input "Name") (clojure.core/assoc :name (deser-string (input "Name"))) (clojure.core/contains? input "Device") (clojure.core/assoc :device (deser-string (input "Device")))))

(clojure.core/defn- deser-volume [input] (clojure.core/cond-> {} (clojure.core/contains? input "InstanceId") (clojure.core/assoc :instance-id (deser-string (input "InstanceId"))) (clojure.core/contains? input "MountPoint") (clojure.core/assoc :mount-point (deser-string (input "MountPoint"))) (clojure.core/contains? input "Encrypted") (clojure.core/assoc :encrypted (deser-boolean (input "Encrypted"))) (clojure.core/contains? input "Ec2VolumeId") (clojure.core/assoc :ec-2-volume-id (deser-string (input "Ec2VolumeId"))) (clojure.core/contains? input "AvailabilityZone") (clojure.core/assoc :availability-zone (deser-string (input "AvailabilityZone"))) (clojure.core/contains? input "Status") (clojure.core/assoc :status (deser-string (input "Status"))) (clojure.core/contains? input "RaidArrayId") (clojure.core/assoc :raid-array-id (deser-string (input "RaidArrayId"))) (clojure.core/contains? input "Size") (clojure.core/assoc :size (deser-integer (input "Size"))) (clojure.core/contains? input "Iops") (clojure.core/assoc :iops (deser-integer (input "Iops"))) (clojure.core/contains? input "VolumeType") (clojure.core/assoc :volume-type (deser-string (input "VolumeType"))) (clojure.core/contains? input "VolumeId") (clojure.core/assoc :volume-id (deser-string (input "VolumeId"))) (clojure.core/contains? input "Name") (clojure.core/assoc :name (deser-string (input "Name"))) (clojure.core/contains? input "Device") (clojure.core/assoc :device (deser-string (input "Device"))) (clojure.core/contains? input "Region") (clojure.core/assoc :region (deser-string (input "Region")))))

(clojure.core/defn- deser-permission [input] (clojure.core/cond-> {} (clojure.core/contains? input "StackId") (clojure.core/assoc :stack-id (deser-string (input "StackId"))) (clojure.core/contains? input "IamUserArn") (clojure.core/assoc :iam-user-arn (deser-string (input "IamUserArn"))) (clojure.core/contains? input "AllowSsh") (clojure.core/assoc :allow-ssh (deser-boolean (input "AllowSsh"))) (clojure.core/contains? input "AllowSudo") (clojure.core/assoc :allow-sudo (deser-boolean (input "AllowSudo"))) (clojure.core/contains? input "Level") (clojure.core/assoc :level (deser-string (input "Level")))))

(clojure.core/defn- deser-ebs-block-device [input] (clojure.core/cond-> {} (clojure.core/contains? input "SnapshotId") (clojure.core/assoc :snapshot-id (deser-string (input "SnapshotId"))) (clojure.core/contains? input "Iops") (clojure.core/assoc :iops (deser-integer (input "Iops"))) (clojure.core/contains? input "VolumeSize") (clojure.core/assoc :volume-size (deser-integer (input "VolumeSize"))) (clojure.core/contains? input "VolumeType") (clojure.core/assoc :volume-type (deser-volume-type (input "VolumeType"))) (clojure.core/contains? input "DeleteOnTermination") (clojure.core/assoc :delete-on-termination (deser-boolean (input "DeleteOnTermination")))))

(clojure.core/defn- deser-app [input] (clojure.core/cond-> {} (clojure.core/contains? input "Shortname") (clojure.core/assoc :shortname (deser-string (input "Shortname"))) (clojure.core/contains? input "Type") (clojure.core/assoc :type (deser-app-type (input "Type"))) (clojure.core/contains? input "EnableSsl") (clojure.core/assoc :enable-ssl (deser-boolean (input "EnableSsl"))) (clojure.core/contains? input "Domains") (clojure.core/assoc :domains (deser-strings (input "Domains"))) (clojure.core/contains? input "AppSource") (clojure.core/assoc :app-source (deser-source (input "AppSource"))) (clojure.core/contains? input "Attributes") (clojure.core/assoc :attributes (deser-app-attributes (input "Attributes"))) (clojure.core/contains? input "DataSources") (clojure.core/assoc :data-sources (deser-data-sources (input "DataSources"))) (clojure.core/contains? input "Description") (clojure.core/assoc :description (deser-string (input "Description"))) (clojure.core/contains? input "SslConfiguration") (clojure.core/assoc :ssl-configuration (deser-ssl-configuration (input "SslConfiguration"))) (clojure.core/contains? input "StackId") (clojure.core/assoc :stack-id (deser-string (input "StackId"))) (clojure.core/contains? input "Environment") (clojure.core/assoc :environment (deser-environment-variables (input "Environment"))) (clojure.core/contains? input "AppId") (clojure.core/assoc :app-id (deser-string (input "AppId"))) (clojure.core/contains? input "CreatedAt") (clojure.core/assoc :created-at (deser-string (input "CreatedAt"))) (clojure.core/contains? input "Name") (clojure.core/assoc :name (deser-string (input "Name")))))

(clojure.core/defn- deser-operating-system-configuration-manager [input] (clojure.core/cond-> {} (clojure.core/contains? input "Name") (clojure.core/assoc :name (deser-string (input "Name"))) (clojure.core/contains? input "Version") (clojure.core/assoc :version (deser-string (input "Version")))))

(clojure.core/defn- deser-layers [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-layer coll))) input))

(clojure.core/defn- deser-source [input] (clojure.core/cond-> {} (clojure.core/contains? input "Type") (clojure.core/assoc :type (deser-source-type (input "Type"))) (clojure.core/contains? input "Url") (clojure.core/assoc :url (deser-string (input "Url"))) (clojure.core/contains? input "Username") (clojure.core/assoc :username (deser-string (input "Username"))) (clojure.core/contains? input "Password") (clojure.core/assoc :password (deser-string (input "Password"))) (clojure.core/contains? input "SshKey") (clojure.core/assoc :ssh-key (deser-string (input "SshKey"))) (clojure.core/contains? input "Revision") (clojure.core/assoc :revision (deser-string (input "Revision")))))

(clojure.core/defn- deser-shutdown-event-configuration [input] (clojure.core/cond-> {} (clojure.core/contains? input "ExecutionTimeout") (clojure.core/assoc :execution-timeout (deser-integer (input "ExecutionTimeout"))) (clojure.core/contains? input "DelayUntilElbConnectionsDrained") (clojure.core/assoc :delay-until-elb-connections-drained (deser-boolean (input "DelayUntilElbConnectionsDrained")))))

(clojure.core/defn- deser-root-device-type [input] (clojure.core/get {"ebs" :ebs, "instance-store" :instancestore} input))

(clojure.core/defn- deser-environment-variables [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-environment-variable coll))) input))

(clojure.core/defn- deser-ecs-cluster [input] (clojure.core/cond-> {} (clojure.core/contains? input "EcsClusterArn") (clojure.core/assoc :ecs-cluster-arn (deser-string (input "EcsClusterArn"))) (clojure.core/contains? input "EcsClusterName") (clojure.core/assoc :ecs-cluster-name (deser-string (input "EcsClusterName"))) (clojure.core/contains? input "StackId") (clojure.core/assoc :stack-id (deser-string (input "StackId"))) (clojure.core/contains? input "RegisteredAt") (clojure.core/assoc :registered-at (deser-date-time (input "RegisteredAt")))))

(clojure.core/defn- deser-user-profiles [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-user-profile coll))) input))

(clojure.core/defn- deser-chef-configuration [input] (clojure.core/cond-> {} (clojure.core/contains? input "ManageBerkshelf") (clojure.core/assoc :manage-berkshelf (deser-boolean (input "ManageBerkshelf"))) (clojure.core/contains? input "BerkshelfVersion") (clojure.core/assoc :berkshelf-version (deser-string (input "BerkshelfVersion")))))

(clojure.core/defn- deser-parameters [input] (clojure.core/into {} (clojure.core/map (clojure.core/fn [[k v]] [(deser-string k) (deser-string v)])) input))

(clojure.core/defn- deser-load-based-auto-scaling-configurations [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-load-based-auto-scaling-configuration coll))) input))

(clojure.core/defn- deser-tag-key [input] input)

(clojure.core/defn- deser-tags [input] (clojure.core/into {} (clojure.core/map (clojure.core/fn [[k v]] [(deser-tag-key k) (deser-tag-value v)])) input))

(clojure.core/defn- deser-elastic-load-balancer [input] (clojure.core/cond-> {} (clojure.core/contains? input "DnsName") (clojure.core/assoc :dns-name (deser-string (input "DnsName"))) (clojure.core/contains? input "ElasticLoadBalancerName") (clojure.core/assoc :elastic-load-balancer-name (deser-string (input "ElasticLoadBalancerName"))) (clojure.core/contains? input "SubnetIds") (clojure.core/assoc :subnet-ids (deser-strings (input "SubnetIds"))) (clojure.core/contains? input "LayerId") (clojure.core/assoc :layer-id (deser-string (input "LayerId"))) (clojure.core/contains? input "VpcId") (clojure.core/assoc :vpc-id (deser-string (input "VpcId"))) (clojure.core/contains? input "StackId") (clojure.core/assoc :stack-id (deser-string (input "StackId"))) (clojure.core/contains? input "Ec2InstanceIds") (clojure.core/assoc :ec-2-instance-ids (deser-strings (input "Ec2InstanceIds"))) (clojure.core/contains? input "AvailabilityZones") (clojure.core/assoc :availability-zones (deser-strings (input "AvailabilityZones"))) (clojure.core/contains? input "Region") (clojure.core/assoc :region (deser-string (input "Region")))))

(clojure.core/defn- deser-agent-version [input] (clojure.core/cond-> {} (clojure.core/contains? input "Version") (clojure.core/assoc :version (deser-string (input "Version"))) (clojure.core/contains? input "ConfigurationManager") (clojure.core/assoc :configuration-manager (deser-stack-configuration-manager (input "ConfigurationManager")))))

(clojure.core/defn- deser-source-type [input] (clojure.core/get {"git" :git, "svn" :svn, "archive" :archive, "s3" :s-3} input))

(clojure.core/defn- deser-strings [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-lifecycle-event-configuration [input] (clojure.core/cond-> {} (clojure.core/contains? input "Shutdown") (clojure.core/assoc :shutdown (deser-shutdown-event-configuration (input "Shutdown")))))

(clojure.core/defn- deser-rds-db-instance [input] (clojure.core/cond-> {} (clojure.core/contains? input "Address") (clojure.core/assoc :address (deser-string (input "Address"))) (clojure.core/contains? input "DbUser") (clojure.core/assoc :db-user (deser-string (input "DbUser"))) (clojure.core/contains? input "DbInstanceIdentifier") (clojure.core/assoc :db-instance-identifier (deser-string (input "DbInstanceIdentifier"))) (clojure.core/contains? input "DbPassword") (clojure.core/assoc :db-password (deser-string (input "DbPassword"))) (clojure.core/contains? input "MissingOnRds") (clojure.core/assoc :missing-on-rds (deser-boolean (input "MissingOnRds"))) (clojure.core/contains? input "StackId") (clojure.core/assoc :stack-id (deser-string (input "StackId"))) (clojure.core/contains? input "Engine") (clojure.core/assoc :engine (deser-string (input "Engine"))) (clojure.core/contains? input "Region") (clojure.core/assoc :region (deser-string (input "Region"))) (clojure.core/contains? input "RdsDbInstanceArn") (clojure.core/assoc :rds-db-instance-arn (deser-string (input "RdsDbInstanceArn")))))

(clojure.core/defn- deser-next-token [input] input)

(clojure.core/defn- deser-commands [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-command coll))) input))

(clojure.core/defn- deser-minute [input] input)

(clojure.core/defn- deser-deployment-command-args [input] (clojure.core/into {} (clojure.core/map (clojure.core/fn [[k v]] [(deser-string k) (deser-strings v)])) input))

(clojure.core/defn- deser-cloud-watch-logs-configuration [input] (clojure.core/cond-> {} (clojure.core/contains? input "Enabled") (clojure.core/assoc :enabled (deser-boolean (input "Enabled"))) (clojure.core/contains? input "LogStreams") (clojure.core/assoc :log-streams (deser-cloud-watch-logs-log-streams (input "LogStreams")))))

(clojure.core/defn- deser-daily-auto-scaling-schedule [input] (clojure.core/into {} (clojure.core/map (clojure.core/fn [[k v]] [(deser-hour k) (deser-switch v)])) input))

(clojure.core/defn- deser-rds-db-instances [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-rds-db-instance coll))) input))

(clojure.core/defn- deser-elastic-ip [input] (clojure.core/cond-> {} (clojure.core/contains? input "Ip") (clojure.core/assoc :ip (deser-string (input "Ip"))) (clojure.core/contains? input "Name") (clojure.core/assoc :name (deser-string (input "Name"))) (clojure.core/contains? input "Domain") (clojure.core/assoc :domain (deser-string (input "Domain"))) (clojure.core/contains? input "Region") (clojure.core/assoc :region (deser-string (input "Region"))) (clojure.core/contains? input "InstanceId") (clojure.core/assoc :instance-id (deser-string (input "InstanceId")))))

(clojure.core/defn- deser-data-sources [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-data-source coll))) input))

(clojure.core/defn- deser-load-based-auto-scaling-configuration [input] (clojure.core/cond-> {} (clojure.core/contains? input "LayerId") (clojure.core/assoc :layer-id (deser-string (input "LayerId"))) (clojure.core/contains? input "Enable") (clojure.core/assoc :enable (deser-boolean (input "Enable"))) (clojure.core/contains? input "UpScaling") (clojure.core/assoc :up-scaling (deser-auto-scaling-thresholds (input "UpScaling"))) (clojure.core/contains? input "DownScaling") (clojure.core/assoc :down-scaling (deser-auto-scaling-thresholds (input "DownScaling")))))

(clojure.core/defn- deser-layer [input] (clojure.core/cond-> {} (clojure.core/contains? input "CustomRecipes") (clojure.core/assoc :custom-recipes (deser-recipes (input "CustomRecipes"))) (clojure.core/contains? input "Shortname") (clojure.core/assoc :shortname (deser-string (input "Shortname"))) (clojure.core/contains? input "LayerId") (clojure.core/assoc :layer-id (deser-string (input "LayerId"))) (clojure.core/contains? input "Type") (clojure.core/assoc :type (deser-layer-type (input "Type"))) (clojure.core/contains? input "DefaultSecurityGroupNames") (clojure.core/assoc :default-security-group-names (deser-strings (input "DefaultSecurityGroupNames"))) (clojure.core/contains? input "CustomSecurityGroupIds") (clojure.core/assoc :custom-security-group-ids (deser-strings (input "CustomSecurityGroupIds"))) (clojure.core/contains? input "EnableAutoHealing") (clojure.core/assoc :enable-auto-healing (deser-boolean (input "EnableAutoHealing"))) (clojure.core/contains? input "UseEbsOptimizedInstances") (clojure.core/assoc :use-ebs-optimized-instances (deser-boolean (input "UseEbsOptimizedInstances"))) (clojure.core/contains? input "LifecycleEventConfiguration") (clojure.core/assoc :lifecycle-event-configuration (deser-lifecycle-event-configuration (input "LifecycleEventConfiguration"))) (clojure.core/contains? input "AutoAssignPublicIps") (clojure.core/assoc :auto-assign-public-ips (deser-boolean (input "AutoAssignPublicIps"))) (clojure.core/contains? input "CloudWatchLogsConfiguration") (clojure.core/assoc :cloud-watch-logs-configuration (deser-cloud-watch-logs-configuration (input "CloudWatchLogsConfiguration"))) (clojure.core/contains? input "Attributes") (clojure.core/assoc :attributes (deser-layer-attributes (input "Attributes"))) (clojure.core/contains? input "StackId") (clojure.core/assoc :stack-id (deser-string (input "StackId"))) (clojure.core/contains? input "DefaultRecipes") (clojure.core/assoc :default-recipes (deser-recipes (input "DefaultRecipes"))) (clojure.core/contains? input "AutoAssignElasticIps") (clojure.core/assoc :auto-assign-elastic-ips (deser-boolean (input "AutoAssignElasticIps"))) (clojure.core/contains? input "Arn") (clojure.core/assoc :arn (deser-string (input "Arn"))) (clojure.core/contains? input "Packages") (clojure.core/assoc :packages (deser-strings (input "Packages"))) (clojure.core/contains? input "CreatedAt") (clojure.core/assoc :created-at (deser-date-time (input "CreatedAt"))) (clojure.core/contains? input "CustomJson") (clojure.core/assoc :custom-json (deser-string (input "CustomJson"))) (clojure.core/contains? input "InstallUpdatesOnBoot") (clojure.core/assoc :install-updates-on-boot (deser-boolean (input "InstallUpdatesOnBoot"))) (clojure.core/contains? input "VolumeConfigurations") (clojure.core/assoc :volume-configurations (deser-volume-configurations (input "VolumeConfigurations"))) (clojure.core/contains? input "Name") (clojure.core/assoc :name (deser-string (input "Name"))) (clojure.core/contains? input "CustomInstanceProfileArn") (clojure.core/assoc :custom-instance-profile-arn (deser-string (input "CustomInstanceProfileArn")))))

(clojure.core/defn- deser-temporary-credential [input] (clojure.core/cond-> {} (clojure.core/contains? input "Username") (clojure.core/assoc :username (deser-string (input "Username"))) (clojure.core/contains? input "Password") (clojure.core/assoc :password (deser-string (input "Password"))) (clojure.core/contains? input "ValidForInMinutes") (clojure.core/assoc :valid-for-in-minutes (deser-integer (input "ValidForInMinutes"))) (clojure.core/contains? input "InstanceId") (clojure.core/assoc :instance-id (deser-string (input "InstanceId")))))

(clojure.core/defn- deser-hour [input] input)

(clojure.core/defn- deser-apps [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-app coll))) input))

(clojure.core/defn- deser-tag-value [input] input)

(clojure.core/defn- deser-environment-variable [input] (clojure.core/cond-> {:key (deser-string (input "Key")), :value (deser-string (input "Value"))} (clojure.core/contains? input "Secure") (clojure.core/assoc :secure (deser-boolean (input "Secure")))))

(clojure.core/defn- deser-ssl-configuration [input] (clojure.core/cond-> {:certificate (deser-string (input "Certificate")), :private-key (deser-string (input "PrivateKey"))} (clojure.core/contains? input "Chain") (clojure.core/assoc :chain (deser-string (input "Chain")))))

(clojure.core/defn- deser-cloud-watch-logs-encoding [input] (clojure.core/get {"johab" :johab, "cp863" :cp-863, "utf_16" :utf-16, "gb18030" :gb-18030, "mac_latin2" :mac-latin-2, "cp737" :cp-737, "ascii" :ascii, "utf_16_be" :utf-16-be, "iso8859_3" :iso-8859-3, "shift_jisx0213" :shift-jisx-0213, "cp864" :cp-864, "cp1255" :cp-1255, "cp865" :cp-865, "euc_jp" :euc-jp, "cp856" :cp-856, "iso8859_15" :iso-8859-15, "big5hkscs" :big-5hkscs, "cp932" :cp-932, "cp850" :cp-850, "shift_jis_2004" :shift-jis-2004, "cp424" :cp-424, "iso8859_6" :iso-8859-6, "euc_jisx0213" :euc-jisx-0213, "cp720" :cp-720, "mac_roman" :mac-roman, "cp1026" :cp-1026, "cp1250" :cp-1250, "cp874" :cp-874, "cp1006" :cp-1006, "iso8859_7" :iso-8859-7, "cp869" :cp-869, "iso8859_14" :iso-8859-14, "iso2022_jp_2004" :iso-2022-jp-2004, "iso2022_kr" :iso-2022-kr, "iso2022_jp_1" :iso-2022-jp-1, "cp950" :cp-950, "cp500" :cp-500, "cp1254" :cp-1254, "iso2022_jp_2" :iso-2022-jp-2, "cp037" :cp-037, "hz" :hz, "iso2022_jp_3" :iso-2022-jp-3, "iso2022_jp_ext" :iso-2022-jp-ext, "utf_32_le" :utf-32-le, "iso8859_13" :iso-8859-13, "iso8859_5" :iso-8859-5, "cp852" :cp-852, "cp1140" :cp-1140, "mac_cyrillic" :mac-cyrillic, "cp861" :cp-861, "big5" :big-5, "cp949" :cp-949, "mac_iceland" :mac-iceland, "euc_kr" :euc-kr, "iso8859_10" :iso-8859-10, "iso8859_2" :iso-8859-2, "cp857" :cp-857, "ptcp154" :ptcp-154, "gb2312" :gb-2312, "cp862" :cp-862, "utf_32_be" :utf-32-be, "iso8859_9" :iso-8859-9, "cp437" :cp-437, "iso8859_8" :iso-8859-8, "cp1251" :cp-1251, "koi8_u" :koi-8-u, "iso8859_4" :iso-8859-4, "utf_32" :utf-32, "shift_jis" :shift-jis, "cp1257" :cp-1257, "cp1252" :cp-1252, "iso8859_16" :iso-8859-16, "utf_16_le" :utf-16-le, "latin_1" :latin-1, "utf_8" :utf-8, "cp1256" :cp-1256, "cp855" :cp-855, "mac_turkish" :mac-turkish, "euc_jis_2004" :euc-jis-2004, "cp1253" :cp-1253, "cp858" :cp-858, "mac_greek" :mac-greek, "utf_7" :utf-7, "cp866" :cp-866, "cp860" :cp-860, "cp1258" :cp-1258, "cp875" :cp-875, "cp775" :cp-775, "koi8_r" :koi-8-r, "iso2022_jp" :iso-2022-jp, "gbk" :gbk, "utf_8_sig" :utf-8-sig} input))

(clojure.core/defn- deser-stack-attributes [input] (clojure.core/into {} (clojure.core/map (clojure.core/fn [[k v]] [(deser-stack-attributes-keys k) (deser-string v)])) input))

(clojure.core/defn- deser-cloud-watch-logs-log-streams [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cloud-watch-logs-log-stream coll))) input))

(clojure.core/defn- deser-stack-attributes-keys [input] (clojure.core/get {"Color" :color} input))

(clojure.core/defn- deser-elastic-ips [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-elastic-ip coll))) input))

(clojure.core/defn- deser-stacks [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-stack coll))) input))

(clojure.core/defn- deser-layer-attributes-keys [input] (clojure.core/get {"JvmVersion" :jvm-version, "JavaAppServerVersion" :java-app-server-version, "MysqlRootPassword" :mysql-root-password, "HaproxyHealthCheckUrl" :haproxy-health-check-url, "MemcachedMemory" :memcached-memory, "HaproxyHealthCheckMethod" :haproxy-health-check-method, "RubyVersion" :ruby-version, "GangliaUrl" :ganglia-url, "HaproxyStatsPassword" :haproxy-stats-password, "BundlerVersion" :bundler-version, "GangliaPassword" :ganglia-password, "Jvm" :jvm, "EnableHaproxyStats" :enable-haproxy-stats, "RailsStack" :rails-stack, "NodejsVersion" :nodejs-version, "PassengerVersion" :passenger-version, "RubygemsVersion" :rubygems-version, "GangliaUser" :ganglia-user, "EcsClusterArn" :ecs-cluster-arn, "HaproxyStatsUser" :haproxy-stats-user, "HaproxyStatsUrl" :haproxy-stats-url, "ManageBundler" :manage-bundler, "MysqlRootPasswordUbiquitous" :mysql-root-password-ubiquitous, "JvmOptions" :jvm-options, "JavaAppServer" :java-app-server} input))

(clojure.core/defn- deser-reported-os [input] (clojure.core/cond-> {} (clojure.core/contains? input "Family") (clojure.core/assoc :family (deser-string (input "Family"))) (clojure.core/contains? input "Name") (clojure.core/assoc :name (deser-string (input "Name"))) (clojure.core/contains? input "Version") (clojure.core/assoc :version (deser-string (input "Version")))))

(clojure.core/defn- deser-agent-versions [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-agent-version coll))) input))

(clojure.core/defn- deser-integer [input] input)

(clojure.core/defn- deser-string [input] input)

(clojure.core/defn- deser-stack-summary [input] (clojure.core/cond-> {} (clojure.core/contains? input "StackId") (clojure.core/assoc :stack-id (deser-string (input "StackId"))) (clojure.core/contains? input "Name") (clojure.core/assoc :name (deser-string (input "Name"))) (clojure.core/contains? input "Arn") (clojure.core/assoc :arn (deser-string (input "Arn"))) (clojure.core/contains? input "LayersCount") (clojure.core/assoc :layers-count (deser-integer (input "LayersCount"))) (clojure.core/contains? input "AppsCount") (clojure.core/assoc :apps-count (deser-integer (input "AppsCount"))) (clojure.core/contains? input "InstancesCount") (clojure.core/assoc :instances-count (deser-instances-count (input "InstancesCount")))))

(clojure.core/defn- deser-data-source [input] (clojure.core/cond-> {} (clojure.core/contains? input "Type") (clojure.core/assoc :type (deser-string (input "Type"))) (clojure.core/contains? input "Arn") (clojure.core/assoc :arn (deser-string (input "Arn"))) (clojure.core/contains? input "DatabaseName") (clojure.core/assoc :database-name (deser-string (input "DatabaseName")))))

(clojure.core/defn- deser-raid-arrays [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-raid-array coll))) input))

(clojure.core/defn- deser-command [input] (clojure.core/cond-> {} (clojure.core/contains? input "InstanceId") (clojure.core/assoc :instance-id (deser-string (input "InstanceId"))) (clojure.core/contains? input "CompletedAt") (clojure.core/assoc :completed-at (deser-date-time (input "CompletedAt"))) (clojure.core/contains? input "Type") (clojure.core/assoc :type (deser-string (input "Type"))) (clojure.core/contains? input "LogUrl") (clojure.core/assoc :log-url (deser-string (input "LogUrl"))) (clojure.core/contains? input "ExitCode") (clojure.core/assoc :exit-code (deser-integer (input "ExitCode"))) (clojure.core/contains? input "Status") (clojure.core/assoc :status (deser-string (input "Status"))) (clojure.core/contains? input "DeploymentId") (clojure.core/assoc :deployment-id (deser-string (input "DeploymentId"))) (clojure.core/contains? input "AcknowledgedAt") (clojure.core/assoc :acknowledged-at (deser-date-time (input "AcknowledgedAt"))) (clojure.core/contains? input "CreatedAt") (clojure.core/assoc :created-at (deser-date-time (input "CreatedAt"))) (clojure.core/contains? input "CommandId") (clojure.core/assoc :command-id (deser-string (input "CommandId")))))

(clojure.core/defn- deser-instances-count [input] (clojure.core/cond-> {} (clojure.core/contains? input "SetupFailed") (clojure.core/assoc :setup-failed (deser-integer (input "SetupFailed"))) (clojure.core/contains? input "StopFailed") (clojure.core/assoc :stop-failed (deser-integer (input "StopFailed"))) (clojure.core/contains? input "Registered") (clojure.core/assoc :registered (deser-integer (input "Registered"))) (clojure.core/contains? input "ConnectionLost") (clojure.core/assoc :connection-lost (deser-integer (input "ConnectionLost"))) (clojure.core/contains? input "RunningSetup") (clojure.core/assoc :running-setup (deser-integer (input "RunningSetup"))) (clojure.core/contains? input "Rebooting") (clojure.core/assoc :rebooting (deser-integer (input "Rebooting"))) (clojure.core/contains? input "Booting") (clojure.core/assoc :booting (deser-integer (input "Booting"))) (clojure.core/contains? input "Deregistering") (clojure.core/assoc :deregistering (deser-integer (input "Deregistering"))) (clojure.core/contains? input "Terminating") (clojure.core/assoc :terminating (deser-integer (input "Terminating"))) (clojure.core/contains? input "Stopping") (clojure.core/assoc :stopping (deser-integer (input "Stopping"))) (clojure.core/contains? input "Registering") (clojure.core/assoc :registering (deser-integer (input "Registering"))) (clojure.core/contains? input "Terminated") (clojure.core/assoc :terminated (deser-integer (input "Terminated"))) (clojure.core/contains? input "Stopped") (clojure.core/assoc :stopped (deser-integer (input "Stopped"))) (clojure.core/contains? input "Pending") (clojure.core/assoc :pending (deser-integer (input "Pending"))) (clojure.core/contains? input "Requested") (clojure.core/assoc :requested (deser-integer (input "Requested"))) (clojure.core/contains? input "Assigning") (clojure.core/assoc :assigning (deser-integer (input "Assigning"))) (clojure.core/contains? input "StartFailed") (clojure.core/assoc :start-failed (deser-integer (input "StartFailed"))) (clojure.core/contains? input "Unassigning") (clojure.core/assoc :unassigning (deser-integer (input "Unassigning"))) (clojure.core/contains? input "Online") (clojure.core/assoc :online (deser-integer (input "Online"))) (clojure.core/contains? input "ShuttingDown") (clojure.core/assoc :shutting-down (deser-integer (input "ShuttingDown")))))

(clojure.core/defn- deser-operating-system-configuration-managers [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-operating-system-configuration-manager coll))) input))

(clojure.core/defn- deser-time-based-auto-scaling-configuration [input] (clojure.core/cond-> {} (clojure.core/contains? input "InstanceId") (clojure.core/assoc :instance-id (deser-string (input "InstanceId"))) (clojure.core/contains? input "AutoScalingSchedule") (clojure.core/assoc :auto-scaling-schedule (deser-weekly-auto-scaling-schedule (input "AutoScalingSchedule")))))

(clojure.core/defn- deser-volume-type [input] (clojure.core/get {"gp2" :gp-2, "io1" :io-1, "standard" :standard} input))

(clojure.core/defn- deser-cloud-watch-logs-initial-position [input] (clojure.core/get {"start_of_file" :start-of-file, "end_of_file" :end-of-file} input))

(clojure.core/defn- deser-app-attributes [input] (clojure.core/into {} (clojure.core/map (clojure.core/fn [[k v]] [(deser-app-attributes-keys k) (deser-string v)])) input))

(clojure.core/defn- deser-block-device-mappings [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-block-device-mapping coll))) input))

(clojure.core/defn- deser-architecture [input] (clojure.core/get {"x86_64" :x-86-64, "i386" :i-386} input))

(clojure.core/defn- deser-stack-configuration-manager [input] (clojure.core/cond-> {} (clojure.core/contains? input "Name") (clojure.core/assoc :name (deser-string (input "Name"))) (clojure.core/contains? input "Version") (clojure.core/assoc :version (deser-string (input "Version")))))

(clojure.core/defn- deser-auto-scaling-thresholds [input] (clojure.core/cond-> {} (clojure.core/contains? input "InstanceCount") (clojure.core/assoc :instance-count (deser-integer (input "InstanceCount"))) (clojure.core/contains? input "ThresholdsWaitTime") (clojure.core/assoc :thresholds-wait-time (deser-minute (input "ThresholdsWaitTime"))) (clojure.core/contains? input "IgnoreMetricsTime") (clojure.core/assoc :ignore-metrics-time (deser-minute (input "IgnoreMetricsTime"))) (clojure.core/contains? input "CpuThreshold") (clojure.core/assoc :cpu-threshold (deser-double (input "CpuThreshold"))) (clojure.core/contains? input "MemoryThreshold") (clojure.core/assoc :memory-threshold (deser-double (input "MemoryThreshold"))) (clojure.core/contains? input "LoadThreshold") (clojure.core/assoc :load-threshold (deser-double (input "LoadThreshold"))) (clojure.core/contains? input "Alarms") (clojure.core/assoc :alarms (deser-strings (input "Alarms")))))

(clojure.core/defn- deser-layer-type [input] (clojure.core/get {"memcached" :memcached, "monitoring-master" :monitoringmaster, "custom" :custom, "web" :web, "db-master" :dbmaster, "rails-app" :railsapp, "php-app" :phpapp, "nodejs-app" :nodejsapp, "lb" :lb, "ecs-cluster" :ecscluster, "aws-flow-ruby" :awsflowruby, "java-app" :javaapp} input))

(clojure.core/defn- deser-virtualization-type [input] (clojure.core/get {"paravirtual" :paravirtual, "hvm" :hvm} input))

(clojure.core/defn- deser-block-device-mapping [input] (clojure.core/cond-> {} (clojure.core/contains? input "DeviceName") (clojure.core/assoc :device-name (deser-string (input "DeviceName"))) (clojure.core/contains? input "NoDevice") (clojure.core/assoc :no-device (deser-string (input "NoDevice"))) (clojure.core/contains? input "VirtualName") (clojure.core/assoc :virtual-name (deser-string (input "VirtualName"))) (clojure.core/contains? input "Ebs") (clojure.core/assoc :ebs (deser-ebs-block-device (input "Ebs")))))

(clojure.core/defn- deser-weekly-auto-scaling-schedule [input] (clojure.core/cond-> {} (clojure.core/contains? input "Monday") (clojure.core/assoc :monday (deser-daily-auto-scaling-schedule (input "Monday"))) (clojure.core/contains? input "Tuesday") (clojure.core/assoc :tuesday (deser-daily-auto-scaling-schedule (input "Tuesday"))) (clojure.core/contains? input "Wednesday") (clojure.core/assoc :wednesday (deser-daily-auto-scaling-schedule (input "Wednesday"))) (clojure.core/contains? input "Thursday") (clojure.core/assoc :thursday (deser-daily-auto-scaling-schedule (input "Thursday"))) (clojure.core/contains? input "Friday") (clojure.core/assoc :friday (deser-daily-auto-scaling-schedule (input "Friday"))) (clojure.core/contains? input "Saturday") (clojure.core/assoc :saturday (deser-daily-auto-scaling-schedule (input "Saturday"))) (clojure.core/contains? input "Sunday") (clojure.core/assoc :sunday (deser-daily-auto-scaling-schedule (input "Sunday")))))

(clojure.core/defn- deser-service-errors [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-service-error coll))) input))

(clojure.core/defn- deser-volume-configuration [input] (clojure.core/cond-> {:mount-point (deser-string (input "MountPoint")), :number-of-disks (deser-integer (input "NumberOfDisks")), :size (deser-integer (input "Size"))} (clojure.core/contains? input "RaidLevel") (clojure.core/assoc :raid-level (deser-integer (input "RaidLevel"))) (clojure.core/contains? input "VolumeType") (clojure.core/assoc :volume-type (deser-string (input "VolumeType"))) (clojure.core/contains? input "Iops") (clojure.core/assoc :iops (deser-integer (input "Iops"))) (clojure.core/contains? input "Encrypted") (clojure.core/assoc :encrypted (deser-boolean (input "Encrypted")))))

(clojure.core/defn- deser-instance [input] (clojure.core/cond-> {} (clojure.core/contains? input "PublicIp") (clojure.core/assoc :public-ip (deser-string (input "PublicIp"))) (clojure.core/contains? input "InstanceId") (clojure.core/assoc :instance-id (deser-string (input "InstanceId"))) (clojure.core/contains? input "EcsContainerInstanceArn") (clojure.core/assoc :ecs-container-instance-arn (deser-string (input "EcsContainerInstanceArn"))) (clojure.core/contains? input "Platform") (clojure.core/assoc :platform (deser-string (input "Platform"))) (clojure.core/contains? input "SecurityGroupIds") (clojure.core/assoc :security-group-ids (deser-strings (input "SecurityGroupIds"))) (clojure.core/contains? input "RegisteredBy") (clojure.core/assoc :registered-by (deser-string (input "RegisteredBy"))) (clojure.core/contains? input "SubnetId") (clojure.core/assoc :subnet-id (deser-string (input "SubnetId"))) (clojure.core/contains? input "Tenancy") (clojure.core/assoc :tenancy (deser-string (input "Tenancy"))) (clojure.core/contains? input "RootDeviceType") (clojure.core/assoc :root-device-type (deser-root-device-type (input "RootDeviceType"))) (clojure.core/contains? input "InfrastructureClass") (clojure.core/assoc :infrastructure-class (deser-string (input "InfrastructureClass"))) (clojure.core/contains? input "EbsOptimized") (clojure.core/assoc :ebs-optimized (deser-boolean (input "EbsOptimized"))) (clojure.core/contains? input "InstanceType") (clojure.core/assoc :instance-type (deser-string (input "InstanceType"))) (clojure.core/contains? input "InstanceProfileArn") (clojure.core/assoc :instance-profile-arn (deser-string (input "InstanceProfileArn"))) (clojure.core/contains? input "PublicDns") (clojure.core/assoc :public-dns (deser-string (input "PublicDns"))) (clojure.core/contains? input "AgentVersion") (clojure.core/assoc :agent-version (deser-string (input "AgentVersion"))) (clojure.core/contains? input "Os") (clojure.core/assoc :os (deser-string (input "Os"))) (clojure.core/contains? input "LayerIds") (clojure.core/assoc :layer-ids (deser-strings (input "LayerIds"))) (clojure.core/contains? input "RootDeviceVolumeId") (clojure.core/assoc :root-device-volume-id (deser-string (input "RootDeviceVolumeId"))) (clojure.core/contains? input "AvailabilityZone") (clojure.core/assoc :availability-zone (deser-string (input "AvailabilityZone"))) (clojure.core/contains? input "Status") (clojure.core/assoc :status (deser-string (input "Status"))) (clojure.core/contains? input "Hostname") (clojure.core/assoc :hostname (deser-string (input "Hostname"))) (clojure.core/contains? input "LastServiceErrorId") (clojure.core/assoc :last-service-error-id (deser-string (input "LastServiceErrorId"))) (clojure.core/contains? input "ReportedAgentVersion") (clojure.core/assoc :reported-agent-version (deser-string (input "ReportedAgentVersion"))) (clojure.core/contains? input "ElasticIp") (clojure.core/assoc :elastic-ip (deser-string (input "ElasticIp"))) (clojure.core/contains? input "AmiId") (clojure.core/assoc :ami-id (deser-string (input "AmiId"))) (clojure.core/contains? input "PrivateDns") (clojure.core/assoc :private-dns (deser-string (input "PrivateDns"))) (clojure.core/contains? input "ReportedOs") (clojure.core/assoc :reported-os (deser-reported-os (input "ReportedOs"))) (clojure.core/contains? input "StackId") (clojure.core/assoc :stack-id (deser-string (input "StackId"))) (clojure.core/contains? input "Arn") (clojure.core/assoc :arn (deser-string (input "Arn"))) (clojure.core/contains? input "CreatedAt") (clojure.core/assoc :created-at (deser-date-time (input "CreatedAt"))) (clojure.core/contains? input "BlockDeviceMappings") (clojure.core/assoc :block-device-mappings (deser-block-device-mappings (input "BlockDeviceMappings"))) (clojure.core/contains? input "Architecture") (clojure.core/assoc :architecture (deser-architecture (input "Architecture"))) (clojure.core/contains? input "EcsClusterArn") (clojure.core/assoc :ecs-cluster-arn (deser-string (input "EcsClusterArn"))) (clojure.core/contains? input "InstallUpdatesOnBoot") (clojure.core/assoc :install-updates-on-boot (deser-boolean (input "InstallUpdatesOnBoot"))) (clojure.core/contains? input "VirtualizationType") (clojure.core/assoc :virtualization-type (deser-virtualization-type (input "VirtualizationType"))) (clojure.core/contains? input "Ec2InstanceId") (clojure.core/assoc :ec-2-instance-id (deser-string (input "Ec2InstanceId"))) (clojure.core/contains? input "SshHostDsaKeyFingerprint") (clojure.core/assoc :ssh-host-dsa-key-fingerprint (deser-string (input "SshHostDsaKeyFingerprint"))) (clojure.core/contains? input "AutoScalingType") (clojure.core/assoc :auto-scaling-type (deser-auto-scaling-type (input "AutoScalingType"))) (clojure.core/contains? input "SshHostRsaKeyFingerprint") (clojure.core/assoc :ssh-host-rsa-key-fingerprint (deser-string (input "SshHostRsaKeyFingerprint"))) (clojure.core/contains? input "SshKeyName") (clojure.core/assoc :ssh-key-name (deser-string (input "SshKeyName"))) (clojure.core/contains? input "PrivateIp") (clojure.core/assoc :private-ip (deser-string (input "PrivateIp")))))

(clojure.core/defn- deser-volume-configurations [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-volume-configuration coll))) input))

(clojure.core/defn- deser-auto-scaling-type [input] (clojure.core/get {"load" :load, "timer" :timer} input))

(clojure.core/defn- deser-deployment-command [input] (clojure.core/cond-> {:name (deser-deployment-command-name (input "Name"))} (clojure.core/contains? input "Args") (clojure.core/assoc :args (deser-deployment-command-args (input "Args")))))

(clojure.core/defn- deser-cloud-watch-logs-time-zone [input] (clojure.core/get {"LOCAL" :local, "UTC" :utc} input))

(clojure.core/defn- deser-layer-attributes [input] (clojure.core/into {} (clojure.core/map (clojure.core/fn [[k v]] [(deser-layer-attributes-keys k) (deser-string v)])) input))

(clojure.core/defn- deser-volumes [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-volume coll))) input))

(clojure.core/defn- deser-app-attributes-keys [input] (clojure.core/get {"DocumentRoot" :document-root, "RailsEnv" :rails-env, "AutoBundleOnDeploy" :auto-bundle-on-deploy, "AwsFlowRubySettings" :aws-flow-ruby-settings} input))

(clojure.core/defn- deser-stack [input] (clojure.core/cond-> {} (clojure.core/contains? input "CustomCookbooksSource") (clojure.core/assoc :custom-cookbooks-source (deser-source (input "CustomCookbooksSource"))) (clojure.core/contains? input "ServiceRoleArn") (clojure.core/assoc :service-role-arn (deser-string (input "ServiceRoleArn"))) (clojure.core/contains? input "HostnameTheme") (clojure.core/assoc :hostname-theme (deser-string (input "HostnameTheme"))) (clojure.core/contains? input "DefaultSshKeyName") (clojure.core/assoc :default-ssh-key-name (deser-string (input "DefaultSshKeyName"))) (clojure.core/contains? input "DefaultAvailabilityZone") (clojure.core/assoc :default-availability-zone (deser-string (input "DefaultAvailabilityZone"))) (clojure.core/contains? input "ChefConfiguration") (clojure.core/assoc :chef-configuration (deser-chef-configuration (input "ChefConfiguration"))) (clojure.core/contains? input "ConfigurationManager") (clojure.core/assoc :configuration-manager (deser-stack-configuration-manager (input "ConfigurationManager"))) (clojure.core/contains? input "AgentVersion") (clojure.core/assoc :agent-version (deser-string (input "AgentVersion"))) (clojure.core/contains? input "UseOpsworksSecurityGroups") (clojure.core/assoc :use-opsworks-security-groups (deser-boolean (input "UseOpsworksSecurityGroups"))) (clojure.core/contains? input "Attributes") (clojure.core/assoc :attributes (deser-stack-attributes (input "Attributes"))) (clojure.core/contains? input "DefaultRootDeviceType") (clojure.core/assoc :default-root-device-type (deser-root-device-type (input "DefaultRootDeviceType"))) (clojure.core/contains? input "VpcId") (clojure.core/assoc :vpc-id (deser-string (input "VpcId"))) (clojure.core/contains? input "UseCustomCookbooks") (clojure.core/assoc :use-custom-cookbooks (deser-boolean (input "UseCustomCookbooks"))) (clojure.core/contains? input "StackId") (clojure.core/assoc :stack-id (deser-string (input "StackId"))) (clojure.core/contains? input "DefaultInstanceProfileArn") (clojure.core/assoc :default-instance-profile-arn (deser-string (input "DefaultInstanceProfileArn"))) (clojure.core/contains? input "Arn") (clojure.core/assoc :arn (deser-string (input "Arn"))) (clojure.core/contains? input "CreatedAt") (clojure.core/assoc :created-at (deser-date-time (input "CreatedAt"))) (clojure.core/contains? input "CustomJson") (clojure.core/assoc :custom-json (deser-string (input "CustomJson"))) (clojure.core/contains? input "DefaultSubnetId") (clojure.core/assoc :default-subnet-id (deser-string (input "DefaultSubnetId"))) (clojure.core/contains? input "Name") (clojure.core/assoc :name (deser-string (input "Name"))) (clojure.core/contains? input "Region") (clojure.core/assoc :region (deser-string (input "Region"))) (clojure.core/contains? input "DefaultOs") (clojure.core/assoc :default-os (deser-string (input "DefaultOs")))))

(clojure.core/defn- deser-operating-systems [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-operating-system coll))) input))

(clojure.core/defn- deser-instances [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance coll))) input))

(clojure.core/defn- deser-deployment-command-name [input] (clojure.core/get {"stop" :stop, "deploy" :deploy, "undeploy" :undeploy, "update_custom_cookbooks" :update-custom-cookbooks, "configure" :configure, "install_dependencies" :install-dependencies, "start" :start, "setup" :setup, "execute_recipes" :execute-recipes, "restart" :restart, "rollback" :rollback, "update_dependencies" :update-dependencies} input))

(clojure.core/defn- deser-service-error [input] (clojure.core/cond-> {} (clojure.core/contains? input "ServiceErrorId") (clojure.core/assoc :service-error-id (deser-string (input "ServiceErrorId"))) (clojure.core/contains? input "StackId") (clojure.core/assoc :stack-id (deser-string (input "StackId"))) (clojure.core/contains? input "InstanceId") (clojure.core/assoc :instance-id (deser-string (input "InstanceId"))) (clojure.core/contains? input "Type") (clojure.core/assoc :type (deser-string (input "Type"))) (clojure.core/contains? input "Message") (clojure.core/assoc :message (deser-string (input "Message"))) (clojure.core/contains? input "CreatedAt") (clojure.core/assoc :created-at (deser-date-time (input "CreatedAt")))))

(clojure.core/defn- deser-operating-system [input] (clojure.core/cond-> {} (clojure.core/contains? input "Name") (clojure.core/assoc :name (deser-string (input "Name"))) (clojure.core/contains? input "Id") (clojure.core/assoc :id (deser-string (input "Id"))) (clojure.core/contains? input "Type") (clojure.core/assoc :type (deser-string (input "Type"))) (clojure.core/contains? input "ConfigurationManagers") (clojure.core/assoc :configuration-managers (deser-operating-system-configuration-managers (input "ConfigurationManagers"))) (clojure.core/contains? input "ReportedName") (clojure.core/assoc :reported-name (deser-string (input "ReportedName"))) (clojure.core/contains? input "ReportedVersion") (clojure.core/assoc :reported-version (deser-string (input "ReportedVersion"))) (clojure.core/contains? input "Supported") (clojure.core/assoc :supported (deser-boolean (input "Supported")))))

(clojure.core/defn- deser-cloud-watch-logs-log-stream [input] (clojure.core/cond-> {} (clojure.core/contains? input "BatchSize") (clojure.core/assoc :batch-size (deser-integer (input "BatchSize"))) (clojure.core/contains? input "Encoding") (clojure.core/assoc :encoding (deser-cloud-watch-logs-encoding (input "Encoding"))) (clojure.core/contains? input "InitialPosition") (clojure.core/assoc :initial-position (deser-cloud-watch-logs-initial-position (input "InitialPosition"))) (clojure.core/contains? input "File") (clojure.core/assoc :file (deser-string (input "File"))) (clojure.core/contains? input "BatchCount") (clojure.core/assoc :batch-count (deser-integer (input "BatchCount"))) (clojure.core/contains? input "TimeZone") (clojure.core/assoc :time-zone (deser-cloud-watch-logs-time-zone (input "TimeZone"))) (clojure.core/contains? input "MultiLineStartPattern") (clojure.core/assoc :multi-line-start-pattern (deser-string (input "MultiLineStartPattern"))) (clojure.core/contains? input "FileFingerprintLines") (clojure.core/assoc :file-fingerprint-lines (deser-string (input "FileFingerprintLines"))) (clojure.core/contains? input "LogGroupName") (clojure.core/assoc :log-group-name (deser-string (input "LogGroupName"))) (clojure.core/contains? input "BufferDuration") (clojure.core/assoc :buffer-duration (deser-integer (input "BufferDuration"))) (clojure.core/contains? input "DatetimeFormat") (clojure.core/assoc :datetime-format (deser-string (input "DatetimeFormat")))))

(clojure.core/defn- deser-elastic-load-balancers [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-elastic-load-balancer coll))) input))

(clojure.core/defn- deser-date-time [input] input)

(clojure.core/defn- deser-deployments [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-deployment coll))) input))

(clojure.core/defn- deser-boolean [input] input)

(clojure.core/defn- response-describe-my-user-profile-result ([input] (response-describe-my-user-profile-result nil input)) ([resultWrapper1937374 input] (clojure.core/let [rawinput1937373 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937375 {"UserProfile" (rawinput1937373 "UserProfile")}] (clojure.core/cond-> {} (letvar1937375 "UserProfile") (clojure.core/assoc :user-profile (deser-self-user-profile (clojure.core/get-in letvar1937375 ["UserProfile"])))))))

(clojure.core/defn- response-describe-deployments-result ([input] (response-describe-deployments-result nil input)) ([resultWrapper1937377 input] (clojure.core/let [rawinput1937376 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937378 {"Deployments" (rawinput1937376 "Deployments")}] (clojure.core/cond-> {} (letvar1937378 "Deployments") (clojure.core/assoc :deployments (deser-deployments (clojure.core/get-in letvar1937378 ["Deployments"])))))))

(clojure.core/defn- response-describe-permissions-result ([input] (response-describe-permissions-result nil input)) ([resultWrapper1937380 input] (clojure.core/let [rawinput1937379 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937381 {"Permissions" (rawinput1937379 "Permissions")}] (clojure.core/cond-> {} (letvar1937381 "Permissions") (clojure.core/assoc :permissions (deser-permissions (clojure.core/get-in letvar1937381 ["Permissions"])))))))

(clojure.core/defn- response-validation-exception ([input] (response-validation-exception nil input)) ([resultWrapper1937383 input] (clojure.core/let [rawinput1937382 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937384 {"message" (rawinput1937382 "message")}] (clojure.core/cond-> {} (letvar1937384 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar1937384 ["message"])))))))

(clojure.core/defn- response-register-volume-result ([input] (response-register-volume-result nil input)) ([resultWrapper1937386 input] (clojure.core/let [rawinput1937385 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937387 {"VolumeId" (rawinput1937385 "VolumeId")}] (clojure.core/cond-> {} (letvar1937387 "VolumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar1937387 ["VolumeId"])))))))

(clojure.core/defn- response-create-layer-result ([input] (response-create-layer-result nil input)) ([resultWrapper1937389 input] (clojure.core/let [rawinput1937388 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937390 {"LayerId" (rawinput1937388 "LayerId")}] (clojure.core/cond-> {} (letvar1937390 "LayerId") (clojure.core/assoc :layer-id (deser-string (clojure.core/get-in letvar1937390 ["LayerId"])))))))

(clojure.core/defn- response-describe-volumes-result ([input] (response-describe-volumes-result nil input)) ([resultWrapper1937392 input] (clojure.core/let [rawinput1937391 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937393 {"Volumes" (rawinput1937391 "Volumes")}] (clojure.core/cond-> {} (letvar1937393 "Volumes") (clojure.core/assoc :volumes (deser-volumes (clojure.core/get-in letvar1937393 ["Volumes"])))))))

(clojure.core/defn- response-describe-user-profiles-result ([input] (response-describe-user-profiles-result nil input)) ([resultWrapper1937395 input] (clojure.core/let [rawinput1937394 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937396 {"UserProfiles" (rawinput1937394 "UserProfiles")}] (clojure.core/cond-> {} (letvar1937396 "UserProfiles") (clojure.core/assoc :user-profiles (deser-user-profiles (clojure.core/get-in letvar1937396 ["UserProfiles"])))))))

(clojure.core/defn- response-describe-raid-arrays-result ([input] (response-describe-raid-arrays-result nil input)) ([resultWrapper1937398 input] (clojure.core/let [rawinput1937397 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937399 {"RaidArrays" (rawinput1937397 "RaidArrays")}] (clojure.core/cond-> {} (letvar1937399 "RaidArrays") (clojure.core/assoc :raid-arrays (deser-raid-arrays (clojure.core/get-in letvar1937399 ["RaidArrays"])))))))

(clojure.core/defn- response-describe-operating-systems-response ([input] (response-describe-operating-systems-response nil input)) ([resultWrapper1937401 input] (clojure.core/let [rawinput1937400 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937402 {"OperatingSystems" (rawinput1937400 "OperatingSystems")}] (clojure.core/cond-> {} (letvar1937402 "OperatingSystems") (clojure.core/assoc :operating-systems (deser-operating-systems (clojure.core/get-in letvar1937402 ["OperatingSystems"])))))))

(clojure.core/defn- response-describe-stack-provisioning-parameters-result ([input] (response-describe-stack-provisioning-parameters-result nil input)) ([resultWrapper1937404 input] (clojure.core/let [rawinput1937403 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937405 {"AgentInstallerUrl" (rawinput1937403 "AgentInstallerUrl"), "Parameters" (rawinput1937403 "Parameters")}] (clojure.core/cond-> {} (letvar1937405 "AgentInstallerUrl") (clojure.core/assoc :agent-installer-url (deser-string (clojure.core/get-in letvar1937405 ["AgentInstallerUrl"]))) (letvar1937405 "Parameters") (clojure.core/assoc :parameters (deser-parameters (clojure.core/get-in letvar1937405 ["Parameters"])))))))

(clojure.core/defn- response-describe-agent-versions-result ([input] (response-describe-agent-versions-result nil input)) ([resultWrapper1937407 input] (clojure.core/let [rawinput1937406 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937408 {"AgentVersions" (rawinput1937406 "AgentVersions")}] (clojure.core/cond-> {} (letvar1937408 "AgentVersions") (clojure.core/assoc :agent-versions (deser-agent-versions (clojure.core/get-in letvar1937408 ["AgentVersions"])))))))

(clojure.core/defn- response-create-stack-result ([input] (response-create-stack-result nil input)) ([resultWrapper1937410 input] (clojure.core/let [rawinput1937409 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937411 {"StackId" (rawinput1937409 "StackId")}] (clojure.core/cond-> {} (letvar1937411 "StackId") (clojure.core/assoc :stack-id (deser-string (clojure.core/get-in letvar1937411 ["StackId"])))))))

(clojure.core/defn- response-grant-access-result ([input] (response-grant-access-result nil input)) ([resultWrapper1937413 input] (clojure.core/let [rawinput1937412 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937414 {"TemporaryCredential" (rawinput1937412 "TemporaryCredential")}] (clojure.core/cond-> {} (letvar1937414 "TemporaryCredential") (clojure.core/assoc :temporary-credential (deser-temporary-credential (clojure.core/get-in letvar1937414 ["TemporaryCredential"])))))))

(clojure.core/defn- response-describe-elastic-ips-result ([input] (response-describe-elastic-ips-result nil input)) ([resultWrapper1937416 input] (clojure.core/let [rawinput1937415 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937417 {"ElasticIps" (rawinput1937415 "ElasticIps")}] (clojure.core/cond-> {} (letvar1937417 "ElasticIps") (clojure.core/assoc :elastic-ips (deser-elastic-ips (clojure.core/get-in letvar1937417 ["ElasticIps"])))))))

(clojure.core/defn- response-register-instance-result ([input] (response-register-instance-result nil input)) ([resultWrapper1937419 input] (clojure.core/let [rawinput1937418 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937420 {"InstanceId" (rawinput1937418 "InstanceId")}] (clojure.core/cond-> {} (letvar1937420 "InstanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar1937420 ["InstanceId"])))))))

(clojure.core/defn- response-describe-load-based-auto-scaling-result ([input] (response-describe-load-based-auto-scaling-result nil input)) ([resultWrapper1937422 input] (clojure.core/let [rawinput1937421 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937423 {"LoadBasedAutoScalingConfigurations" (rawinput1937421 "LoadBasedAutoScalingConfigurations")}] (clojure.core/cond-> {} (letvar1937423 "LoadBasedAutoScalingConfigurations") (clojure.core/assoc :load-based-auto-scaling-configurations (deser-load-based-auto-scaling-configurations (clojure.core/get-in letvar1937423 ["LoadBasedAutoScalingConfigurations"])))))))

(clojure.core/defn- response-create-instance-result ([input] (response-create-instance-result nil input)) ([resultWrapper1937425 input] (clojure.core/let [rawinput1937424 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937426 {"InstanceId" (rawinput1937424 "InstanceId")}] (clojure.core/cond-> {} (letvar1937426 "InstanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar1937426 ["InstanceId"])))))))

(clojure.core/defn- response-resource-not-found-exception ([input] (response-resource-not-found-exception nil input)) ([resultWrapper1937428 input] (clojure.core/let [rawinput1937427 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937429 {"message" (rawinput1937427 "message")}] (clojure.core/cond-> {} (letvar1937429 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar1937429 ["message"])))))))

(clojure.core/defn- response-create-app-result ([input] (response-create-app-result nil input)) ([resultWrapper1937431 input] (clojure.core/let [rawinput1937430 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937432 {"AppId" (rawinput1937430 "AppId")}] (clojure.core/cond-> {} (letvar1937432 "AppId") (clojure.core/assoc :app-id (deser-string (clojure.core/get-in letvar1937432 ["AppId"])))))))

(clojure.core/defn- response-describe-ecs-clusters-result ([input] (response-describe-ecs-clusters-result nil input)) ([resultWrapper1937434 input] (clojure.core/let [rawinput1937433 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937435 {"EcsClusters" (rawinput1937433 "EcsClusters"), "NextToken" (rawinput1937433 "NextToken")}] (clojure.core/cond-> {} (letvar1937435 "EcsClusters") (clojure.core/assoc :ecs-clusters (deser-ecs-clusters (clojure.core/get-in letvar1937435 ["EcsClusters"]))) (letvar1937435 "NextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar1937435 ["NextToken"])))))))

(clojure.core/defn- response-describe-stack-summary-result ([input] (response-describe-stack-summary-result nil input)) ([resultWrapper1937437 input] (clojure.core/let [rawinput1937436 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937438 {"StackSummary" (rawinput1937436 "StackSummary")}] (clojure.core/cond-> {} (letvar1937438 "StackSummary") (clojure.core/assoc :stack-summary (deser-stack-summary (clojure.core/get-in letvar1937438 ["StackSummary"])))))))

(clojure.core/defn- response-get-hostname-suggestion-result ([input] (response-get-hostname-suggestion-result nil input)) ([resultWrapper1937440 input] (clojure.core/let [rawinput1937439 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937441 {"LayerId" (rawinput1937439 "LayerId"), "Hostname" (rawinput1937439 "Hostname")}] (clojure.core/cond-> {} (letvar1937441 "LayerId") (clojure.core/assoc :layer-id (deser-string (clojure.core/get-in letvar1937441 ["LayerId"]))) (letvar1937441 "Hostname") (clojure.core/assoc :hostname (deser-string (clojure.core/get-in letvar1937441 ["Hostname"])))))))

(clojure.core/defn- response-describe-instances-result ([input] (response-describe-instances-result nil input)) ([resultWrapper1937443 input] (clojure.core/let [rawinput1937442 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937444 {"Instances" (rawinput1937442 "Instances")}] (clojure.core/cond-> {} (letvar1937444 "Instances") (clojure.core/assoc :instances (deser-instances (clojure.core/get-in letvar1937444 ["Instances"])))))))

(clojure.core/defn- response-create-user-profile-result ([input] (response-create-user-profile-result nil input)) ([resultWrapper1937446 input] (clojure.core/let [rawinput1937445 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937447 {"IamUserArn" (rawinput1937445 "IamUserArn")}] (clojure.core/cond-> {} (letvar1937447 "IamUserArn") (clojure.core/assoc :iam-user-arn (deser-string (clojure.core/get-in letvar1937447 ["IamUserArn"])))))))

(clojure.core/defn- response-clone-stack-result ([input] (response-clone-stack-result nil input)) ([resultWrapper1937449 input] (clojure.core/let [rawinput1937448 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937450 {"StackId" (rawinput1937448 "StackId")}] (clojure.core/cond-> {} (letvar1937450 "StackId") (clojure.core/assoc :stack-id (deser-string (clojure.core/get-in letvar1937450 ["StackId"])))))))

(clojure.core/defn- response-create-deployment-result ([input] (response-create-deployment-result nil input)) ([resultWrapper1937452 input] (clojure.core/let [rawinput1937451 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937453 {"DeploymentId" (rawinput1937451 "DeploymentId")}] (clojure.core/cond-> {} (letvar1937453 "DeploymentId") (clojure.core/assoc :deployment-id (deser-string (clojure.core/get-in letvar1937453 ["DeploymentId"])))))))

(clojure.core/defn- response-describe-time-based-auto-scaling-result ([input] (response-describe-time-based-auto-scaling-result nil input)) ([resultWrapper1937455 input] (clojure.core/let [rawinput1937454 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937456 {"TimeBasedAutoScalingConfigurations" (rawinput1937454 "TimeBasedAutoScalingConfigurations")}] (clojure.core/cond-> {} (letvar1937456 "TimeBasedAutoScalingConfigurations") (clojure.core/assoc :time-based-auto-scaling-configurations (deser-time-based-auto-scaling-configurations (clojure.core/get-in letvar1937456 ["TimeBasedAutoScalingConfigurations"])))))))

(clojure.core/defn- response-list-tags-result ([input] (response-list-tags-result nil input)) ([resultWrapper1937458 input] (clojure.core/let [rawinput1937457 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937459 {"Tags" (rawinput1937457 "Tags"), "NextToken" (rawinput1937457 "NextToken")}] (clojure.core/cond-> {} (letvar1937459 "Tags") (clojure.core/assoc :tags (deser-tags (clojure.core/get-in letvar1937459 ["Tags"]))) (letvar1937459 "NextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar1937459 ["NextToken"])))))))

(clojure.core/defn- response-describe-service-errors-result ([input] (response-describe-service-errors-result nil input)) ([resultWrapper1937461 input] (clojure.core/let [rawinput1937460 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937462 {"ServiceErrors" (rawinput1937460 "ServiceErrors")}] (clojure.core/cond-> {} (letvar1937462 "ServiceErrors") (clojure.core/assoc :service-errors (deser-service-errors (clojure.core/get-in letvar1937462 ["ServiceErrors"])))))))

(clojure.core/defn- response-describe-stacks-result ([input] (response-describe-stacks-result nil input)) ([resultWrapper1937464 input] (clojure.core/let [rawinput1937463 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937465 {"Stacks" (rawinput1937463 "Stacks")}] (clojure.core/cond-> {} (letvar1937465 "Stacks") (clojure.core/assoc :stacks (deser-stacks (clojure.core/get-in letvar1937465 ["Stacks"])))))))

(clojure.core/defn- response-register-ecs-cluster-result ([input] (response-register-ecs-cluster-result nil input)) ([resultWrapper1937467 input] (clojure.core/let [rawinput1937466 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937468 {"EcsClusterArn" (rawinput1937466 "EcsClusterArn")}] (clojure.core/cond-> {} (letvar1937468 "EcsClusterArn") (clojure.core/assoc :ecs-cluster-arn (deser-string (clojure.core/get-in letvar1937468 ["EcsClusterArn"])))))))

(clojure.core/defn- response-describe-rds-db-instances-result ([input] (response-describe-rds-db-instances-result nil input)) ([resultWrapper1937470 input] (clojure.core/let [rawinput1937469 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937471 {"RdsDbInstances" (rawinput1937469 "RdsDbInstances")}] (clojure.core/cond-> {} (letvar1937471 "RdsDbInstances") (clojure.core/assoc :rds-db-instances (deser-rds-db-instances (clojure.core/get-in letvar1937471 ["RdsDbInstances"])))))))

(clojure.core/defn- response-describe-commands-result ([input] (response-describe-commands-result nil input)) ([resultWrapper1937473 input] (clojure.core/let [rawinput1937472 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937474 {"Commands" (rawinput1937472 "Commands")}] (clojure.core/cond-> {} (letvar1937474 "Commands") (clojure.core/assoc :commands (deser-commands (clojure.core/get-in letvar1937474 ["Commands"])))))))

(clojure.core/defn- response-describe-layers-result ([input] (response-describe-layers-result nil input)) ([resultWrapper1937476 input] (clojure.core/let [rawinput1937475 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937477 {"Layers" (rawinput1937475 "Layers")}] (clojure.core/cond-> {} (letvar1937477 "Layers") (clojure.core/assoc :layers (deser-layers (clojure.core/get-in letvar1937477 ["Layers"])))))))

(clojure.core/defn- response-describe-apps-result ([input] (response-describe-apps-result nil input)) ([resultWrapper1937479 input] (clojure.core/let [rawinput1937478 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937480 {"Apps" (rawinput1937478 "Apps")}] (clojure.core/cond-> {} (letvar1937480 "Apps") (clojure.core/assoc :apps (deser-apps (clojure.core/get-in letvar1937480 ["Apps"])))))))

(clojure.core/defn- response-describe-elastic-load-balancers-result ([input] (response-describe-elastic-load-balancers-result nil input)) ([resultWrapper1937482 input] (clojure.core/let [rawinput1937481 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937483 {"ElasticLoadBalancers" (rawinput1937481 "ElasticLoadBalancers")}] (clojure.core/cond-> {} (letvar1937483 "ElasticLoadBalancers") (clojure.core/assoc :elastic-load-balancers (deser-elastic-load-balancers (clojure.core/get-in letvar1937483 ["ElasticLoadBalancers"])))))))

(clojure.core/defn- response-register-elastic-ip-result ([input] (response-register-elastic-ip-result nil input)) ([resultWrapper1937485 input] (clojure.core/let [rawinput1937484 (clojure.core/some-> input :body portkey.aws/parse-json-body) letvar1937486 {"ElasticIp" (rawinput1937484 "ElasticIp")}] (clojure.core/cond-> {} (letvar1937486 "ElasticIp") (clojure.core/assoc :elastic-ip (deser-string (clojure.core/get-in letvar1937486 ["ElasticIp"])))))))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/tag-keys (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/tag-key))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/app-type #{"static" :other :static "java" :nodejs "php" :java "other" "aws-flow-ruby" :php :rails :awsflowruby "rails" "nodejs"})

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-elastic-ips-request/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-elastic-ips-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-elastic-ips-request/ips (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-elastic-ips-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.describe-elastic-ips-request/instance-id :portkey.aws.opsworks.-2013-02-18.describe-elastic-ips-request/stack-id :portkey.aws.opsworks.-2013-02-18.describe-elastic-ips-request/ips]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/switch (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.register-instance-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.register-instance-request/hostname (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.register-instance-request/public-ip (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.register-instance-request/private-ip (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.register-instance-request/rsa-public-key (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.register-instance-request/rsa-public-key-fingerprint (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/register-instance-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.register-instance-request/stack-id] :opt-un [:portkey.aws.opsworks.-2013-02-18.register-instance-request/hostname :portkey.aws.opsworks.-2013-02-18.register-instance-request/public-ip :portkey.aws.opsworks.-2013-02-18.register-instance-request/private-ip :portkey.aws.opsworks.-2013-02-18.register-instance-request/rsa-public-key :portkey.aws.opsworks.-2013-02-18.register-instance-request/rsa-public-key-fingerprint :portkey.aws.opsworks.-2013-02-18/instance-identity]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-my-user-profile-result/user-profile (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/self-user-profile))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-my-user-profile-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.describe-my-user-profile-result/user-profile]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.recipes/setup (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.recipes/configure (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.recipes/deploy (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.recipes/undeploy (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.recipes/shutdown (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/recipes (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.recipes/setup :portkey.aws.opsworks.-2013-02-18.recipes/configure :portkey.aws.opsworks.-2013-02-18.recipes/deploy :portkey.aws.opsworks.-2013-02-18.recipes/undeploy :portkey.aws.opsworks.-2013-02-18.recipes/shutdown]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/time-based-auto-scaling-configurations (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/time-based-auto-scaling-configuration))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.set-load-based-auto-scaling-request/layer-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.set-load-based-auto-scaling-request/enable (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.set-load-based-auto-scaling-request/up-scaling (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/auto-scaling-thresholds))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.set-load-based-auto-scaling-request/down-scaling (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/auto-scaling-thresholds))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/set-load-based-auto-scaling-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.set-load-based-auto-scaling-request/layer-id] :opt-un [:portkey.aws.opsworks.-2013-02-18.set-load-based-auto-scaling-request/enable :portkey.aws.opsworks.-2013-02-18.set-load-based-auto-scaling-request/up-scaling :portkey.aws.opsworks.-2013-02-18.set-load-based-auto-scaling-request/down-scaling]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/permissions (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/permission))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-deployments-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18/deployments]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-permissions-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18/permissions]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/ecs-clusters (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/ecs-cluster))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.associate-elastic-ip-request/elastic-ip (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.associate-elastic-ip-request/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/associate-elastic-ip-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.associate-elastic-ip-request/elastic-ip] :opt-un [:portkey.aws.opsworks.-2013-02-18.associate-elastic-ip-request/instance-id]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.user-profile/iam-user-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.user-profile/name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.user-profile/ssh-username (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.user-profile/ssh-public-key (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.user-profile/allow-self-management (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/user-profile (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.user-profile/iam-user-arn :portkey.aws.opsworks.-2013-02-18.user-profile/name :portkey.aws.opsworks.-2013-02-18.user-profile/ssh-username :portkey.aws.opsworks.-2013-02-18.user-profile/ssh-public-key :portkey.aws.opsworks.-2013-02-18.user-profile/allow-self-management]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.self-user-profile/iam-user-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.self-user-profile/name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.self-user-profile/ssh-username (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.self-user-profile/ssh-public-key (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/self-user-profile (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.self-user-profile/iam-user-arn :portkey.aws.opsworks.-2013-02-18.self-user-profile/name :portkey.aws.opsworks.-2013-02-18.self-user-profile/ssh-username :portkey.aws.opsworks.-2013-02-18.self-user-profile/ssh-public-key]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.get-hostname-suggestion-request/layer-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/get-hostname-suggestion-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.get-hostname-suggestion-request/layer-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.validation-exception/message (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/validation-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.validation-exception/message]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.deployment/instance-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.deployment/completed-at (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/date-time))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.deployment/comment (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.deployment/status (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.deployment/deployment-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.deployment/duration (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.deployment/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.deployment/command (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/deployment-command))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.deployment/app-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.deployment/created-at (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/date-time))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.deployment/custom-json (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.deployment/iam-user-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/deployment (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.deployment/instance-ids :portkey.aws.opsworks.-2013-02-18.deployment/completed-at :portkey.aws.opsworks.-2013-02-18.deployment/comment :portkey.aws.opsworks.-2013-02-18.deployment/status :portkey.aws.opsworks.-2013-02-18.deployment/deployment-id :portkey.aws.opsworks.-2013-02-18.deployment/duration :portkey.aws.opsworks.-2013-02-18.deployment/stack-id :portkey.aws.opsworks.-2013-02-18.deployment/command :portkey.aws.opsworks.-2013-02-18.deployment/app-id :portkey.aws.opsworks.-2013-02-18.deployment/created-at :portkey.aws.opsworks.-2013-02-18.deployment/custom-json :portkey.aws.opsworks.-2013-02-18.deployment/iam-user-arn]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.register-volume-result/volume-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/register-volume-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.register-volume-result/volume-id]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.raid-array/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.raid-array/mount-point (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.raid-array/availability-zone (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.raid-array/raid-array-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.raid-array/number-of-disks (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.raid-array/size (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.raid-array/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.raid-array/iops (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.raid-array/raid-level (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.raid-array/volume-type (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.raid-array/created-at (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/date-time))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.raid-array/name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.raid-array/device (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/raid-array (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.raid-array/instance-id :portkey.aws.opsworks.-2013-02-18.raid-array/mount-point :portkey.aws.opsworks.-2013-02-18.raid-array/availability-zone :portkey.aws.opsworks.-2013-02-18.raid-array/raid-array-id :portkey.aws.opsworks.-2013-02-18.raid-array/number-of-disks :portkey.aws.opsworks.-2013-02-18.raid-array/size :portkey.aws.opsworks.-2013-02-18.raid-array/stack-id :portkey.aws.opsworks.-2013-02-18.raid-array/iops :portkey.aws.opsworks.-2013-02-18.raid-array/raid-level :portkey.aws.opsworks.-2013-02-18.raid-array/volume-type :portkey.aws.opsworks.-2013-02-18.raid-array/created-at :portkey.aws.opsworks.-2013-02-18.raid-array/name :portkey.aws.opsworks.-2013-02-18.raid-array/device]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-app-request/shortname (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-app-request/type (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/app-type))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-app-request/enable-ssl (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-app-request/domains (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-app-request/app-source (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/source))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-app-request/attributes (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/app-attributes))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-app-request/description (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-app-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-app-request/environment (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/environment-variables))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-app-request/name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/create-app-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.create-app-request/stack-id :portkey.aws.opsworks.-2013-02-18.create-app-request/name :portkey.aws.opsworks.-2013-02-18.create-app-request/type] :opt-un [:portkey.aws.opsworks.-2013-02-18.create-app-request/shortname :portkey.aws.opsworks.-2013-02-18.create-app-request/enable-ssl :portkey.aws.opsworks.-2013-02-18.create-app-request/domains :portkey.aws.opsworks.-2013-02-18.create-app-request/app-source :portkey.aws.opsworks.-2013-02-18.create-app-request/attributes :portkey.aws.opsworks.-2013-02-18/data-sources :portkey.aws.opsworks.-2013-02-18.create-app-request/description :portkey.aws.opsworks.-2013-02-18/ssl-configuration :portkey.aws.opsworks.-2013-02-18.create-app-request/environment]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-load-based-auto-scaling-request/layer-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-load-based-auto-scaling-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.describe-load-based-auto-scaling-request/layer-ids] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-layer-result/layer-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/create-layer-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.create-layer-result/layer-id]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.volume/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.volume/mount-point (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.volume/encrypted (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.volume/ec-2-volume-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.volume/availability-zone (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.volume/status (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.volume/raid-array-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.volume/size (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.volume/iops (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.volume/volume-type (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.volume/volume-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.volume/name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.volume/device (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.volume/region (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/volume (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.volume/instance-id :portkey.aws.opsworks.-2013-02-18.volume/mount-point :portkey.aws.opsworks.-2013-02-18.volume/encrypted :portkey.aws.opsworks.-2013-02-18.volume/ec-2-volume-id :portkey.aws.opsworks.-2013-02-18.volume/availability-zone :portkey.aws.opsworks.-2013-02-18.volume/status :portkey.aws.opsworks.-2013-02-18.volume/raid-array-id :portkey.aws.opsworks.-2013-02-18.volume/size :portkey.aws.opsworks.-2013-02-18.volume/iops :portkey.aws.opsworks.-2013-02-18.volume/volume-type :portkey.aws.opsworks.-2013-02-18.volume/volume-id :portkey.aws.opsworks.-2013-02-18.volume/name :portkey.aws.opsworks.-2013-02-18.volume/device :portkey.aws.opsworks.-2013-02-18.volume/region]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.permission/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.permission/iam-user-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.permission/allow-ssh (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.permission/allow-sudo (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.permission/level (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/permission (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.permission/stack-id :portkey.aws.opsworks.-2013-02-18.permission/iam-user-arn :portkey.aws.opsworks.-2013-02-18.permission/allow-ssh :portkey.aws.opsworks.-2013-02-18.permission/allow-sudo :portkey.aws.opsworks.-2013-02-18.permission/level]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.ebs-block-device/snapshot-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.ebs-block-device/iops (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.ebs-block-device/volume-size (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.ebs-block-device/delete-on-termination (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/ebs-block-device (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.ebs-block-device/snapshot-id :portkey.aws.opsworks.-2013-02-18.ebs-block-device/iops :portkey.aws.opsworks.-2013-02-18.ebs-block-device/volume-size :portkey.aws.opsworks.-2013-02-18/volume-type :portkey.aws.opsworks.-2013-02-18.ebs-block-device/delete-on-termination]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.app/shortname (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.app/type (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/app-type))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.app/enable-ssl (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.app/domains (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.app/app-source (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/source))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.app/attributes (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/app-attributes))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.app/description (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.app/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.app/environment (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/environment-variables))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.app/app-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.app/created-at (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.app/name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/app (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.app/shortname :portkey.aws.opsworks.-2013-02-18.app/type :portkey.aws.opsworks.-2013-02-18.app/enable-ssl :portkey.aws.opsworks.-2013-02-18.app/domains :portkey.aws.opsworks.-2013-02-18.app/app-source :portkey.aws.opsworks.-2013-02-18.app/attributes :portkey.aws.opsworks.-2013-02-18/data-sources :portkey.aws.opsworks.-2013-02-18.app/description :portkey.aws.opsworks.-2013-02-18/ssl-configuration :portkey.aws.opsworks.-2013-02-18.app/stack-id :portkey.aws.opsworks.-2013-02-18.app/environment :portkey.aws.opsworks.-2013-02-18.app/app-id :portkey.aws.opsworks.-2013-02-18.app/created-at :portkey.aws.opsworks.-2013-02-18.app/name]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.operating-system-configuration-manager/name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.operating-system-configuration-manager/version (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/operating-system-configuration-manager (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.operating-system-configuration-manager/name :portkey.aws.opsworks.-2013-02-18.operating-system-configuration-manager/version]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.set-permission-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.set-permission-request/iam-user-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.set-permission-request/allow-ssh (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.set-permission-request/allow-sudo (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.set-permission-request/level (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/set-permission-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.set-permission-request/stack-id :portkey.aws.opsworks.-2013-02-18.set-permission-request/iam-user-arn] :opt-un [:portkey.aws.opsworks.-2013-02-18.set-permission-request/allow-ssh :portkey.aws.opsworks.-2013-02-18.set-permission-request/allow-sudo :portkey.aws.opsworks.-2013-02-18.set-permission-request/level]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/layers (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/layer))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.source/type (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/source-type))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.source/url (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.source/username (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.source/password (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.source/ssh-key (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.source/revision (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/source (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.source/type :portkey.aws.opsworks.-2013-02-18.source/url :portkey.aws.opsworks.-2013-02-18.source/username :portkey.aws.opsworks.-2013-02-18.source/password :portkey.aws.opsworks.-2013-02-18.source/ssh-key :portkey.aws.opsworks.-2013-02-18.source/revision]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-volumes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18/volumes]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-user-profiles-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18/user-profiles]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-app-request/type (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/app-type))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-app-request/enable-ssl (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-app-request/domains (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-app-request/app-source (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/source))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-app-request/attributes (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/app-attributes))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-app-request/description (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-app-request/environment (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/environment-variables))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-app-request/app-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-app-request/name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/update-app-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.update-app-request/app-id] :opt-un [:portkey.aws.opsworks.-2013-02-18.update-app-request/type :portkey.aws.opsworks.-2013-02-18.update-app-request/enable-ssl :portkey.aws.opsworks.-2013-02-18.update-app-request/domains :portkey.aws.opsworks.-2013-02-18.update-app-request/app-source :portkey.aws.opsworks.-2013-02-18.update-app-request/attributes :portkey.aws.opsworks.-2013-02-18/data-sources :portkey.aws.opsworks.-2013-02-18.update-app-request/description :portkey.aws.opsworks.-2013-02-18/ssl-configuration :portkey.aws.opsworks.-2013-02-18.update-app-request/environment :portkey.aws.opsworks.-2013-02-18.update-app-request/name]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.shutdown-event-configuration/execution-timeout (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.shutdown-event-configuration/delay-until-elb-connections-drained (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/shutdown-event-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.shutdown-event-configuration/execution-timeout :portkey.aws.opsworks.-2013-02-18.shutdown-event-configuration/delay-until-elb-connections-drained]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.register-ecs-cluster-request/ecs-cluster-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.register-ecs-cluster-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/register-ecs-cluster-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.register-ecs-cluster-request/ecs-cluster-arn :portkey.aws.opsworks.-2013-02-18.register-ecs-cluster-request/stack-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.register-elastic-ip-request/elastic-ip (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.register-elastic-ip-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/register-elastic-ip-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.register-elastic-ip-request/elastic-ip :portkey.aws.opsworks.-2013-02-18.register-elastic-ip-request/stack-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.delete-stack-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/delete-stack-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.delete-stack-request/stack-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/root-device-type #{:ebs "ebs" "instance-store" :instancestore})

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.set-time-based-auto-scaling-request/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.set-time-based-auto-scaling-request/auto-scaling-schedule (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/weekly-auto-scaling-schedule))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/set-time-based-auto-scaling-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.set-time-based-auto-scaling-request/instance-id] :opt-un [:portkey.aws.opsworks.-2013-02-18.set-time-based-auto-scaling-request/auto-scaling-schedule]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/environment-variables (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/environment-variable))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-agent-versions-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-agent-versions-request/configuration-manager (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/stack-configuration-manager))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-agent-versions-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.describe-agent-versions-request/stack-id :portkey.aws.opsworks.-2013-02-18.describe-agent-versions-request/configuration-manager]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-stack-request/custom-cookbooks-source (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/source))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-stack-request/service-role-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-stack-request/hostname-theme (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-stack-request/default-ssh-key-name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-stack-request/default-availability-zone (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-stack-request/configuration-manager (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/stack-configuration-manager))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-stack-request/agent-version (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-stack-request/use-opsworks-security-groups (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-stack-request/attributes (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/stack-attributes))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-stack-request/default-root-device-type (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/root-device-type))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-stack-request/vpc-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-stack-request/use-custom-cookbooks (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-stack-request/default-instance-profile-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-stack-request/custom-json (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-stack-request/default-subnet-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-stack-request/name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-stack-request/region (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-stack-request/default-os (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/create-stack-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.create-stack-request/name :portkey.aws.opsworks.-2013-02-18.create-stack-request/region :portkey.aws.opsworks.-2013-02-18.create-stack-request/service-role-arn :portkey.aws.opsworks.-2013-02-18.create-stack-request/default-instance-profile-arn] :opt-un [:portkey.aws.opsworks.-2013-02-18.create-stack-request/custom-cookbooks-source :portkey.aws.opsworks.-2013-02-18.create-stack-request/hostname-theme :portkey.aws.opsworks.-2013-02-18.create-stack-request/default-ssh-key-name :portkey.aws.opsworks.-2013-02-18.create-stack-request/default-availability-zone :portkey.aws.opsworks.-2013-02-18/chef-configuration :portkey.aws.opsworks.-2013-02-18.create-stack-request/configuration-manager :portkey.aws.opsworks.-2013-02-18.create-stack-request/agent-version :portkey.aws.opsworks.-2013-02-18.create-stack-request/use-opsworks-security-groups :portkey.aws.opsworks.-2013-02-18.create-stack-request/attributes :portkey.aws.opsworks.-2013-02-18.create-stack-request/default-root-device-type :portkey.aws.opsworks.-2013-02-18.create-stack-request/vpc-id :portkey.aws.opsworks.-2013-02-18.create-stack-request/use-custom-cookbooks :portkey.aws.opsworks.-2013-02-18.create-stack-request/custom-json :portkey.aws.opsworks.-2013-02-18.create-stack-request/default-subnet-id :portkey.aws.opsworks.-2013-02-18.create-stack-request/default-os]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-raid-arrays-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18/raid-arrays]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.ecs-cluster/ecs-cluster-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.ecs-cluster/ecs-cluster-name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.ecs-cluster/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.ecs-cluster/registered-at (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/date-time))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/ecs-cluster (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.ecs-cluster/ecs-cluster-arn :portkey.aws.opsworks.-2013-02-18.ecs-cluster/ecs-cluster-name :portkey.aws.opsworks.-2013-02-18.ecs-cluster/stack-id :portkey.aws.opsworks.-2013-02-18.ecs-cluster/registered-at]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/user-profiles (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/user-profile))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.chef-configuration/manage-berkshelf (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.chef-configuration/berkshelf-version (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/chef-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.chef-configuration/manage-berkshelf :portkey.aws.opsworks.-2013-02-18.chef-configuration/berkshelf-version]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/parameters (clojure.spec.alpha/map-of :portkey.aws.opsworks.-2013-02-18/string :portkey.aws.opsworks.-2013-02-18/string))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-operating-systems-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18/operating-systems]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.clone-stack-request/custom-cookbooks-source (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/source))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.clone-stack-request/service-role-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.clone-stack-request/hostname-theme (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.clone-stack-request/default-ssh-key-name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.clone-stack-request/default-availability-zone (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.clone-stack-request/configuration-manager (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/stack-configuration-manager))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.clone-stack-request/agent-version (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.clone-stack-request/use-opsworks-security-groups (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.clone-stack-request/attributes (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/stack-attributes))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.clone-stack-request/source-stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.clone-stack-request/default-root-device-type (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/root-device-type))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.clone-stack-request/vpc-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.clone-stack-request/use-custom-cookbooks (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.clone-stack-request/default-instance-profile-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.clone-stack-request/custom-json (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.clone-stack-request/default-subnet-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.clone-stack-request/clone-app-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.clone-stack-request/name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.clone-stack-request/region (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.clone-stack-request/default-os (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.clone-stack-request/clone-permissions (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/clone-stack-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.clone-stack-request/source-stack-id :portkey.aws.opsworks.-2013-02-18.clone-stack-request/service-role-arn] :opt-un [:portkey.aws.opsworks.-2013-02-18.clone-stack-request/custom-cookbooks-source :portkey.aws.opsworks.-2013-02-18.clone-stack-request/hostname-theme :portkey.aws.opsworks.-2013-02-18.clone-stack-request/default-ssh-key-name :portkey.aws.opsworks.-2013-02-18.clone-stack-request/default-availability-zone :portkey.aws.opsworks.-2013-02-18/chef-configuration :portkey.aws.opsworks.-2013-02-18.clone-stack-request/configuration-manager :portkey.aws.opsworks.-2013-02-18.clone-stack-request/agent-version :portkey.aws.opsworks.-2013-02-18.clone-stack-request/use-opsworks-security-groups :portkey.aws.opsworks.-2013-02-18.clone-stack-request/attributes :portkey.aws.opsworks.-2013-02-18.clone-stack-request/default-root-device-type :portkey.aws.opsworks.-2013-02-18.clone-stack-request/vpc-id :portkey.aws.opsworks.-2013-02-18.clone-stack-request/use-custom-cookbooks :portkey.aws.opsworks.-2013-02-18.clone-stack-request/default-instance-profile-arn :portkey.aws.opsworks.-2013-02-18.clone-stack-request/custom-json :portkey.aws.opsworks.-2013-02-18.clone-stack-request/default-subnet-id :portkey.aws.opsworks.-2013-02-18.clone-stack-request/clone-app-ids :portkey.aws.opsworks.-2013-02-18.clone-stack-request/name :portkey.aws.opsworks.-2013-02-18.clone-stack-request/region :portkey.aws.opsworks.-2013-02-18.clone-stack-request/default-os :portkey.aws.opsworks.-2013-02-18.clone-stack-request/clone-permissions]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.deregister-instance-request/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/deregister-instance-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.deregister-instance-request/instance-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-stack-provisioning-parameters-result/agent-installer-url (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-stack-provisioning-parameters-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.describe-stack-provisioning-parameters-result/agent-installer-url :portkey.aws.opsworks.-2013-02-18/parameters]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-layer-request/custom-recipes (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/recipes))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-layer-request/shortname (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-layer-request/layer-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-layer-request/custom-security-group-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-layer-request/enable-auto-healing (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-layer-request/use-ebs-optimized-instances (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-layer-request/auto-assign-public-ips (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-layer-request/attributes (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/layer-attributes))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-layer-request/auto-assign-elastic-ips (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-layer-request/packages (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-layer-request/custom-json (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-layer-request/install-updates-on-boot (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-layer-request/name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-layer-request/custom-instance-profile-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/update-layer-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.update-layer-request/layer-id] :opt-un [:portkey.aws.opsworks.-2013-02-18.update-layer-request/custom-recipes :portkey.aws.opsworks.-2013-02-18.update-layer-request/shortname :portkey.aws.opsworks.-2013-02-18.update-layer-request/custom-security-group-ids :portkey.aws.opsworks.-2013-02-18.update-layer-request/enable-auto-healing :portkey.aws.opsworks.-2013-02-18.update-layer-request/use-ebs-optimized-instances :portkey.aws.opsworks.-2013-02-18/lifecycle-event-configuration :portkey.aws.opsworks.-2013-02-18.update-layer-request/auto-assign-public-ips :portkey.aws.opsworks.-2013-02-18/cloud-watch-logs-configuration :portkey.aws.opsworks.-2013-02-18.update-layer-request/attributes :portkey.aws.opsworks.-2013-02-18.update-layer-request/auto-assign-elastic-ips :portkey.aws.opsworks.-2013-02-18.update-layer-request/packages :portkey.aws.opsworks.-2013-02-18.update-layer-request/custom-json :portkey.aws.opsworks.-2013-02-18.update-layer-request/install-updates-on-boot :portkey.aws.opsworks.-2013-02-18/volume-configurations :portkey.aws.opsworks.-2013-02-18.update-layer-request/name :portkey.aws.opsworks.-2013-02-18.update-layer-request/custom-instance-profile-arn]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/load-based-auto-scaling-configurations (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/load-based-auto-scaling-configuration))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.assign-instance-request/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.assign-instance-request/layer-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/assign-instance-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.assign-instance-request/instance-id :portkey.aws.opsworks.-2013-02-18.assign-instance-request/layer-ids] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/tag-key (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/tags (clojure.spec.alpha/map-of :portkey.aws.opsworks.-2013-02-18/tag-key :portkey.aws.opsworks.-2013-02-18/tag-value))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-raid-arrays-request/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-raid-arrays-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-raid-arrays-request/raid-array-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-raid-arrays-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.describe-raid-arrays-request/instance-id :portkey.aws.opsworks.-2013-02-18.describe-raid-arrays-request/stack-id :portkey.aws.opsworks.-2013-02-18.describe-raid-arrays-request/raid-array-ids]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.elastic-load-balancer/dns-name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.elastic-load-balancer/elastic-load-balancer-name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.elastic-load-balancer/subnet-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.elastic-load-balancer/layer-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.elastic-load-balancer/vpc-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.elastic-load-balancer/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.elastic-load-balancer/ec-2-instance-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.elastic-load-balancer/availability-zones (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.elastic-load-balancer/region (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/elastic-load-balancer (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.elastic-load-balancer/dns-name :portkey.aws.opsworks.-2013-02-18.elastic-load-balancer/elastic-load-balancer-name :portkey.aws.opsworks.-2013-02-18.elastic-load-balancer/subnet-ids :portkey.aws.opsworks.-2013-02-18.elastic-load-balancer/layer-id :portkey.aws.opsworks.-2013-02-18.elastic-load-balancer/vpc-id :portkey.aws.opsworks.-2013-02-18.elastic-load-balancer/stack-id :portkey.aws.opsworks.-2013-02-18.elastic-load-balancer/ec-2-instance-ids :portkey.aws.opsworks.-2013-02-18.elastic-load-balancer/availability-zones :portkey.aws.opsworks.-2013-02-18.elastic-load-balancer/region]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-commands-request/deployment-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-commands-request/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-commands-request/command-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-commands-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.describe-commands-request/deployment-id :portkey.aws.opsworks.-2013-02-18.describe-commands-request/instance-id :portkey.aws.opsworks.-2013-02-18.describe-commands-request/command-ids]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-agent-versions-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18/agent-versions]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.delete-instance-request/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.delete-instance-request/delete-elastic-ip (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.delete-instance-request/delete-volumes (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/delete-instance-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.delete-instance-request/instance-id] :opt-un [:portkey.aws.opsworks.-2013-02-18.delete-instance-request/delete-elastic-ip :portkey.aws.opsworks.-2013-02-18.delete-instance-request/delete-volumes]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.agent-version/version (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.agent-version/configuration-manager (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/stack-configuration-manager))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/agent-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.agent-version/version :portkey.aws.opsworks.-2013-02-18.agent-version/configuration-manager]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.deregister-elastic-ip-request/elastic-ip (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/deregister-elastic-ip-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.deregister-elastic-ip-request/elastic-ip] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-my-user-profile-request/ssh-public-key (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/update-my-user-profile-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.update-my-user-profile-request/ssh-public-key]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/source-type #{:s-3 "svn" :git "archive" :svn "s3" "git" :archive})

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-instances-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-instances-request/layer-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-instances-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.describe-instances-request/stack-id :portkey.aws.opsworks.-2013-02-18.describe-instances-request/layer-id :portkey.aws.opsworks.-2013-02-18.describe-instances-request/instance-ids]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/valid-for-in-minutes (clojure.spec.alpha/int-in 60 1440))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-stack-request/custom-cookbooks-source (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/source))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-stack-request/service-role-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-stack-request/hostname-theme (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-stack-request/default-ssh-key-name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-stack-request/default-availability-zone (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-stack-request/configuration-manager (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/stack-configuration-manager))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-stack-request/agent-version (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-stack-request/use-opsworks-security-groups (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-stack-request/attributes (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/stack-attributes))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-stack-request/default-root-device-type (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/root-device-type))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-stack-request/use-custom-cookbooks (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-stack-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-stack-request/default-instance-profile-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-stack-request/custom-json (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-stack-request/default-subnet-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-stack-request/name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-stack-request/default-os (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/update-stack-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.update-stack-request/stack-id] :opt-un [:portkey.aws.opsworks.-2013-02-18.update-stack-request/custom-cookbooks-source :portkey.aws.opsworks.-2013-02-18.update-stack-request/service-role-arn :portkey.aws.opsworks.-2013-02-18.update-stack-request/hostname-theme :portkey.aws.opsworks.-2013-02-18.update-stack-request/default-ssh-key-name :portkey.aws.opsworks.-2013-02-18.update-stack-request/default-availability-zone :portkey.aws.opsworks.-2013-02-18/chef-configuration :portkey.aws.opsworks.-2013-02-18.update-stack-request/configuration-manager :portkey.aws.opsworks.-2013-02-18.update-stack-request/agent-version :portkey.aws.opsworks.-2013-02-18.update-stack-request/use-opsworks-security-groups :portkey.aws.opsworks.-2013-02-18.update-stack-request/attributes :portkey.aws.opsworks.-2013-02-18.update-stack-request/default-root-device-type :portkey.aws.opsworks.-2013-02-18.update-stack-request/use-custom-cookbooks :portkey.aws.opsworks.-2013-02-18.update-stack-request/default-instance-profile-arn :portkey.aws.opsworks.-2013-02-18.update-stack-request/custom-json :portkey.aws.opsworks.-2013-02-18.update-stack-request/default-subnet-id :portkey.aws.opsworks.-2013-02-18.update-stack-request/name :portkey.aws.opsworks.-2013-02-18.update-stack-request/default-os]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/strings (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/string))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.lifecycle-event-configuration/shutdown (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/shutdown-event-configuration))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/lifecycle-event-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.lifecycle-event-configuration/shutdown]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.rds-db-instance/address (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.rds-db-instance/db-user (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.rds-db-instance/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.rds-db-instance/db-password (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.rds-db-instance/missing-on-rds (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.rds-db-instance/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.rds-db-instance/engine (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.rds-db-instance/region (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.rds-db-instance/rds-db-instance-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/rds-db-instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.rds-db-instance/address :portkey.aws.opsworks.-2013-02-18.rds-db-instance/db-user :portkey.aws.opsworks.-2013-02-18.rds-db-instance/db-instance-identifier :portkey.aws.opsworks.-2013-02-18.rds-db-instance/db-password :portkey.aws.opsworks.-2013-02-18.rds-db-instance/missing-on-rds :portkey.aws.opsworks.-2013-02-18.rds-db-instance/stack-id :portkey.aws.opsworks.-2013-02-18.rds-db-instance/engine :portkey.aws.opsworks.-2013-02-18.rds-db-instance/region :portkey.aws.opsworks.-2013-02-18.rds-db-instance/rds-db-instance-arn]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/next-token (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stop-instance-request/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stop-instance-request/force (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/stop-instance-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.stop-instance-request/instance-id] :opt-un [:portkey.aws.opsworks.-2013-02-18.stop-instance-request/force]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.unassign-instance-request/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/unassign-instance-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.unassign-instance-request/instance-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-stack-provisioning-parameters-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-stack-provisioning-parameters-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.describe-stack-provisioning-parameters-request/stack-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/commands (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/command))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-stack-result/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/create-stack-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.create-stack-result/stack-id]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/minute (clojure.spec.alpha/int-in 1 100))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-layers-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-layers-request/layer-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-layers-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.describe-layers-request/stack-id :portkey.aws.opsworks.-2013-02-18.describe-layers-request/layer-ids]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/deployment-command-args (clojure.spec.alpha/map-of :portkey.aws.opsworks.-2013-02-18/string :portkey.aws.opsworks.-2013-02-18/strings))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-configuration/enabled (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-configuration/log-streams (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/cloud-watch-logs-log-streams))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/cloud-watch-logs-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-configuration/enabled :portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-configuration/log-streams]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.unassign-volume-request/volume-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/unassign-volume-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.unassign-volume-request/volume-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/daily-auto-scaling-schedule (clojure.spec.alpha/map-of :portkey.aws.opsworks.-2013-02-18/hour :portkey.aws.opsworks.-2013-02-18/switch))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/rds-db-instances (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/rds-db-instance))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/grant-access-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18/temporary-credential]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/tag-resource-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18/resource-arn :portkey.aws.opsworks.-2013-02-18/tags] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.elastic-ip/ip (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.elastic-ip/name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.elastic-ip/domain (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.elastic-ip/region (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.elastic-ip/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/elastic-ip (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.elastic-ip/ip :portkey.aws.opsworks.-2013-02-18.elastic-ip/name :portkey.aws.opsworks.-2013-02-18.elastic-ip/domain :portkey.aws.opsworks.-2013-02-18.elastic-ip/region :portkey.aws.opsworks.-2013-02-18.elastic-ip/instance-id]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-volume-request/volume-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-volume-request/name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-volume-request/mount-point (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/update-volume-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.update-volume-request/volume-id] :opt-un [:portkey.aws.opsworks.-2013-02-18.update-volume-request/name :portkey.aws.opsworks.-2013-02-18.update-volume-request/mount-point]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-elastic-ips-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18/elastic-ips]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/data-sources (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/data-source))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-instance-request/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-instance-request/ebs-optimized (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-instance-request/instance-type (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-instance-request/agent-version (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-instance-request/os (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-instance-request/layer-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-instance-request/hostname (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-instance-request/ami-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-instance-request/install-updates-on-boot (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-instance-request/ssh-key-name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/update-instance-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.update-instance-request/instance-id] :opt-un [:portkey.aws.opsworks.-2013-02-18.update-instance-request/ebs-optimized :portkey.aws.opsworks.-2013-02-18.update-instance-request/instance-type :portkey.aws.opsworks.-2013-02-18.update-instance-request/agent-version :portkey.aws.opsworks.-2013-02-18.update-instance-request/os :portkey.aws.opsworks.-2013-02-18.update-instance-request/layer-ids :portkey.aws.opsworks.-2013-02-18.update-instance-request/hostname :portkey.aws.opsworks.-2013-02-18.update-instance-request/ami-id :portkey.aws.opsworks.-2013-02-18/architecture :portkey.aws.opsworks.-2013-02-18.update-instance-request/install-updates-on-boot :portkey.aws.opsworks.-2013-02-18/auto-scaling-type :portkey.aws.opsworks.-2013-02-18.update-instance-request/ssh-key-name]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.load-based-auto-scaling-configuration/layer-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.load-based-auto-scaling-configuration/enable (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.load-based-auto-scaling-configuration/up-scaling (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/auto-scaling-thresholds))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.load-based-auto-scaling-configuration/down-scaling (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/auto-scaling-thresholds))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/load-based-auto-scaling-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.load-based-auto-scaling-configuration/layer-id :portkey.aws.opsworks.-2013-02-18.load-based-auto-scaling-configuration/enable :portkey.aws.opsworks.-2013-02-18.load-based-auto-scaling-configuration/up-scaling :portkey.aws.opsworks.-2013-02-18.load-based-auto-scaling-configuration/down-scaling]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.layer/custom-recipes (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/recipes))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.layer/shortname (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.layer/layer-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.layer/type (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/layer-type))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.layer/default-security-group-names (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.layer/custom-security-group-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.layer/enable-auto-healing (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.layer/use-ebs-optimized-instances (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.layer/auto-assign-public-ips (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.layer/attributes (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/layer-attributes))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.layer/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.layer/default-recipes (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/recipes))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.layer/auto-assign-elastic-ips (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.layer/arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.layer/packages (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.layer/created-at (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/date-time))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.layer/custom-json (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.layer/install-updates-on-boot (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.layer/name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.layer/custom-instance-profile-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/layer (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.layer/custom-recipes :portkey.aws.opsworks.-2013-02-18.layer/shortname :portkey.aws.opsworks.-2013-02-18.layer/layer-id :portkey.aws.opsworks.-2013-02-18.layer/type :portkey.aws.opsworks.-2013-02-18.layer/default-security-group-names :portkey.aws.opsworks.-2013-02-18.layer/custom-security-group-ids :portkey.aws.opsworks.-2013-02-18.layer/enable-auto-healing :portkey.aws.opsworks.-2013-02-18.layer/use-ebs-optimized-instances :portkey.aws.opsworks.-2013-02-18/lifecycle-event-configuration :portkey.aws.opsworks.-2013-02-18.layer/auto-assign-public-ips :portkey.aws.opsworks.-2013-02-18/cloud-watch-logs-configuration :portkey.aws.opsworks.-2013-02-18.layer/attributes :portkey.aws.opsworks.-2013-02-18.layer/stack-id :portkey.aws.opsworks.-2013-02-18.layer/default-recipes :portkey.aws.opsworks.-2013-02-18.layer/auto-assign-elastic-ips :portkey.aws.opsworks.-2013-02-18.layer/arn :portkey.aws.opsworks.-2013-02-18.layer/packages :portkey.aws.opsworks.-2013-02-18.layer/created-at :portkey.aws.opsworks.-2013-02-18.layer/custom-json :portkey.aws.opsworks.-2013-02-18.layer/install-updates-on-boot :portkey.aws.opsworks.-2013-02-18/volume-configurations :portkey.aws.opsworks.-2013-02-18.layer/name :portkey.aws.opsworks.-2013-02-18.layer/custom-instance-profile-arn]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.detach-elastic-load-balancer-request/elastic-load-balancer-name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.detach-elastic-load-balancer-request/layer-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/detach-elastic-load-balancer-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.detach-elastic-load-balancer-request/elastic-load-balancer-name :portkey.aws.opsworks.-2013-02-18.detach-elastic-load-balancer-request/layer-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.grant-access-request/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/grant-access-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.grant-access-request/instance-id] :opt-un [:portkey.aws.opsworks.-2013-02-18/valid-for-in-minutes]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.start-stack-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/start-stack-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.start-stack-request/stack-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.register-instance-result/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/register-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.register-instance-result/instance-id]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-load-based-auto-scaling-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18/load-based-auto-scaling-configurations]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.temporary-credential/username (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.temporary-credential/password (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.temporary-credential/valid-for-in-minutes (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.temporary-credential/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/temporary-credential (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.temporary-credential/username :portkey.aws.opsworks.-2013-02-18.temporary-credential/password :portkey.aws.opsworks.-2013-02-18.temporary-credential/valid-for-in-minutes :portkey.aws.opsworks.-2013-02-18.temporary-credential/instance-id]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-instance-result/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/create-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.create-instance-result/instance-id]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/hour (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.resource-not-found-exception/message (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.resource-not-found-exception/message]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.delete-user-profile-request/iam-user-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/delete-user-profile-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.delete-user-profile-request/iam-user-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-app-result/app-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/create-app-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.create-app-result/app-id]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/apps (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/app))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-user-profile-request/iam-user-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-user-profile-request/ssh-username (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-user-profile-request/ssh-public-key (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-user-profile-request/allow-self-management (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/update-user-profile-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.update-user-profile-request/iam-user-arn] :opt-un [:portkey.aws.opsworks.-2013-02-18.update-user-profile-request/ssh-username :portkey.aws.opsworks.-2013-02-18.update-user-profile-request/ssh-public-key :portkey.aws.opsworks.-2013-02-18.update-user-profile-request/allow-self-management]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-ecs-clusters-result/next-token (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-ecs-clusters-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18/ecs-clusters :portkey.aws.opsworks.-2013-02-18.describe-ecs-clusters-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-permissions-request/iam-user-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-permissions-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-permissions-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.describe-permissions-request/iam-user-arn :portkey.aws.opsworks.-2013-02-18.describe-permissions-request/stack-id]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/tag-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-user-profiles-request/iam-user-arns (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-user-profiles-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.describe-user-profiles-request/iam-user-arns]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.environment-variable/key (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.environment-variable/value (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.environment-variable/secure (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/environment-variable (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.environment-variable/key :portkey.aws.opsworks.-2013-02-18.environment-variable/value] :opt-un [:portkey.aws.opsworks.-2013-02-18.environment-variable/secure]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-layer-request/custom-recipes (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/recipes))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-layer-request/shortname (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-layer-request/type (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/layer-type))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-layer-request/custom-security-group-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-layer-request/enable-auto-healing (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-layer-request/use-ebs-optimized-instances (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-layer-request/auto-assign-public-ips (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-layer-request/attributes (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/layer-attributes))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-layer-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-layer-request/auto-assign-elastic-ips (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-layer-request/packages (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-layer-request/custom-json (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-layer-request/install-updates-on-boot (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-layer-request/name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-layer-request/custom-instance-profile-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/create-layer-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.create-layer-request/stack-id :portkey.aws.opsworks.-2013-02-18.create-layer-request/type :portkey.aws.opsworks.-2013-02-18.create-layer-request/name :portkey.aws.opsworks.-2013-02-18.create-layer-request/shortname] :opt-un [:portkey.aws.opsworks.-2013-02-18.create-layer-request/custom-recipes :portkey.aws.opsworks.-2013-02-18.create-layer-request/custom-security-group-ids :portkey.aws.opsworks.-2013-02-18.create-layer-request/enable-auto-healing :portkey.aws.opsworks.-2013-02-18.create-layer-request/use-ebs-optimized-instances :portkey.aws.opsworks.-2013-02-18/lifecycle-event-configuration :portkey.aws.opsworks.-2013-02-18.create-layer-request/auto-assign-public-ips :portkey.aws.opsworks.-2013-02-18/cloud-watch-logs-configuration :portkey.aws.opsworks.-2013-02-18.create-layer-request/attributes :portkey.aws.opsworks.-2013-02-18.create-layer-request/auto-assign-elastic-ips :portkey.aws.opsworks.-2013-02-18.create-layer-request/packages :portkey.aws.opsworks.-2013-02-18.create-layer-request/custom-json :portkey.aws.opsworks.-2013-02-18.create-layer-request/install-updates-on-boot :portkey.aws.opsworks.-2013-02-18/volume-configurations :portkey.aws.opsworks.-2013-02-18.create-layer-request/custom-instance-profile-arn]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-deployment-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-deployment-request/app-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-deployment-request/instance-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-deployment-request/layer-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-deployment-request/command (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/deployment-command))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-deployment-request/comment (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-deployment-request/custom-json (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/create-deployment-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.create-deployment-request/stack-id :portkey.aws.opsworks.-2013-02-18.create-deployment-request/command] :opt-un [:portkey.aws.opsworks.-2013-02-18.create-deployment-request/app-id :portkey.aws.opsworks.-2013-02-18.create-deployment-request/instance-ids :portkey.aws.opsworks.-2013-02-18.create-deployment-request/layer-ids :portkey.aws.opsworks.-2013-02-18.create-deployment-request/comment :portkey.aws.opsworks.-2013-02-18.create-deployment-request/custom-json]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.ssl-configuration/certificate (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.ssl-configuration/private-key (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.ssl-configuration/chain (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/ssl-configuration (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.ssl-configuration/certificate :portkey.aws.opsworks.-2013-02-18.ssl-configuration/private-key] :opt-un [:portkey.aws.opsworks.-2013-02-18.ssl-configuration/chain]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/cloud-watch-logs-encoding #{:euc-kr "johab" :cp-1251 "cp863" :cp-866 :cp-1258 "utf_16" :ascii :iso-8859-14 "gb18030" :cp-1026 :cp-1255 "mac_latin2" "cp737" :iso-8859-13 "ascii" :koi-8-r :cp-720 :gb-2312 :iso-8859-15 :cp-424 "utf_16_be" "iso8859_3" :cp-860 "shift_jisx0213" "cp864" "cp1255" :iso-8859-2 :cp-862 "cp865" :cp-1006 :iso-8859-3 "euc_jp" "cp856" "iso8859_15" "big5hkscs" "cp932" :mac-iceland "cp850" "shift_jis_2004" "cp424" :utf-32 :cp-875 :utf-16 :mac-greek "iso8859_6" :euc-jisx-0213 :iso-8859-9 :iso-2022-jp-2004 "euc_jisx0213" :cp-932 "cp720" "mac_roman" "cp1026" :iso-2022-jp-3 "cp1250" :cp-1256 "cp874" :shift-jis :euc-jp :iso-2022-jp :cp-857 :iso-8859-6 "cp1006" :mac-roman :hz "iso8859_7" "cp869" :iso-8859-7 :utf-7 :iso-8859-8 "iso8859_14" "iso2022_jp_2004" :cp-775 "iso2022_kr" "iso2022_jp_1" "cp950" :cp-864 :big-5 :cp-874 "cp500" :cp-1250 "cp1254" "iso2022_jp_2" "cp037" "hz" :koi-8-u :gbk "iso2022_jp_3" "iso2022_jp_ext" :cp-950 "utf_32_le" :mac-latin-2 "iso8859_13" :cp-1140 "iso8859_5" :cp-850 :shift-jisx-0213 :big-5hkscs :mac-cyrillic "cp852" :utf-8 "cp1140" "mac_cyrillic" "cp861" "big5" "cp949" "mac_iceland" "euc_kr" :cp-855 "iso8859_10" :cp-437 "iso8859_2" :iso-8859-10 "cp857" "ptcp154" "gb2312" :iso-2022-jp-1 "cp862" :latin-1 "utf_32_be" "iso8859_9" "cp437" "iso8859_8" :cp-858 :cp-1253 :cp-1257 "cp1251" "koi8_u" :cp-861 "iso8859_4" "utf_32" :gb-18030 :cp-737 :cp-856 :iso-2022-jp-ext :utf-8-sig "shift_jis" "cp1257" "cp1252" "iso8859_16" :cp-865 "utf_16_le" :cp-037 "latin_1" "utf_8" :iso-8859-5 "cp1256" "cp855" :johab :utf-32-be "mac_turkish" :cp-949 "euc_jis_2004" "cp1253" :ptcp-154 "cp858" :iso-8859-4 :euc-jis-2004 "mac_greek" :iso-2022-jp-2 "utf_7" :shift-jis-2004 :utf-16-be :cp-500 :utf-16-le "cp866" "cp860" :mac-turkish "cp1258" :cp-852 "cp875" :cp-869 :iso-2022-kr "cp775" :iso-8859-16 :utf-32-le :cp-1252 "koi8_r" :cp-863 "iso2022_jp" :cp-1254 "gbk" "utf_8_sig"})

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/stack-attributes (clojure.spec.alpha/map-of :portkey.aws.opsworks.-2013-02-18/stack-attributes-keys :portkey.aws.opsworks.-2013-02-18/string))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/cloud-watch-logs-log-streams (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/cloud-watch-logs-log-stream))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/stack-attributes-keys #{:color "Color"})

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-service-errors-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-service-errors-request/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-service-errors-request/service-error-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-service-errors-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.describe-service-errors-request/stack-id :portkey.aws.opsworks.-2013-02-18.describe-service-errors-request/instance-id :portkey.aws.opsworks.-2013-02-18.describe-service-errors-request/service-error-ids]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/elastic-ips (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/elastic-ip))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/stacks (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/stack))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.delete-app-request/app-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/delete-app-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.delete-app-request/app-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/layer-attributes-keys #{:passenger-version "JvmVersion" :enable-haproxy-stats "JavaAppServerVersion" "MysqlRootPassword" "HaproxyHealthCheckUrl" :rails-stack :ganglia-url "MemcachedMemory" :haproxy-health-check-url :rubygems-version :jvm-version "HaproxyHealthCheckMethod" "RubyVersion" :haproxy-health-check-method :memcached-memory "GangliaUrl" "HaproxyStatsPassword" "BundlerVersion" :java-app-server "GangliaPassword" "Jvm" :jvm-options "EnableHaproxyStats" "RailsStack" "NodejsVersion" :ganglia-password "PassengerVersion" :mysql-root-password :jvm :manage-bundler :ruby-version "RubygemsVersion" "GangliaUser" :haproxy-stats-password :bundler-version :java-app-server-version :haproxy-stats-url "EcsClusterArn" "HaproxyStatsUser" :ecs-cluster-arn :ganglia-user :mysql-root-password-ubiquitous :haproxy-stats-user "HaproxyStatsUrl" "ManageBundler" "MysqlRootPasswordUbiquitous" "JvmOptions" "JavaAppServer" :nodejs-version})

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-stack-summary-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18/stack-summary]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.reported-os/family (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.reported-os/name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.reported-os/version (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/reported-os (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.reported-os/family :portkey.aws.opsworks.-2013-02-18.reported-os/name :portkey.aws.opsworks.-2013-02-18.reported-os/version]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/agent-versions (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/agent-version))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-volumes-request/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-volumes-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-volumes-request/raid-array-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-volumes-request/volume-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-volumes-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.describe-volumes-request/instance-id :portkey.aws.opsworks.-2013-02-18.describe-volumes-request/stack-id :portkey.aws.opsworks.-2013-02-18.describe-volumes-request/raid-array-id :portkey.aws.opsworks.-2013-02-18.describe-volumes-request/volume-ids]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/integer clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.deregister-ecs-cluster-request/ecs-cluster-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/deregister-ecs-cluster-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.deregister-ecs-cluster-request/ecs-cluster-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack-summary/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack-summary/name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack-summary/arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack-summary/layers-count (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack-summary/apps-count (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/stack-summary (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.stack-summary/stack-id :portkey.aws.opsworks.-2013-02-18.stack-summary/name :portkey.aws.opsworks.-2013-02-18.stack-summary/arn :portkey.aws.opsworks.-2013-02-18.stack-summary/layers-count :portkey.aws.opsworks.-2013-02-18.stack-summary/apps-count :portkey.aws.opsworks.-2013-02-18/instances-count]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.data-source/type (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.data-source/arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.data-source/database-name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/data-source (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.data-source/type :portkey.aws.opsworks.-2013-02-18.data-source/arn :portkey.aws.opsworks.-2013-02-18.data-source/database-name]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-elastic-load-balancers-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-elastic-load-balancers-request/layer-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-elastic-load-balancers-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.describe-elastic-load-balancers-request/stack-id :portkey.aws.opsworks.-2013-02-18.describe-elastic-load-balancers-request/layer-ids]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.attach-elastic-load-balancer-request/elastic-load-balancer-name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.attach-elastic-load-balancer-request/layer-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/attach-elastic-load-balancer-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.attach-elastic-load-balancer-request/elastic-load-balancer-name :portkey.aws.opsworks.-2013-02-18.attach-elastic-load-balancer-request/layer-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance-identity/document (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance-identity/signature (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/instance-identity (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.instance-identity/document :portkey.aws.opsworks.-2013-02-18.instance-identity/signature]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/raid-arrays (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/raid-array))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.get-hostname-suggestion-result/layer-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.get-hostname-suggestion-result/hostname (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/get-hostname-suggestion-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.get-hostname-suggestion-result/layer-id :portkey.aws.opsworks.-2013-02-18.get-hostname-suggestion-result/hostname]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.command/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.command/completed-at (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/date-time))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.command/type (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.command/log-url (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.command/exit-code (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.command/status (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.command/deployment-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.command/acknowledged-at (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/date-time))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.command/created-at (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/date-time))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.command/command-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/command (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.command/instance-id :portkey.aws.opsworks.-2013-02-18.command/completed-at :portkey.aws.opsworks.-2013-02-18.command/type :portkey.aws.opsworks.-2013-02-18.command/log-url :portkey.aws.opsworks.-2013-02-18.command/exit-code :portkey.aws.opsworks.-2013-02-18.command/status :portkey.aws.opsworks.-2013-02-18.command/deployment-id :portkey.aws.opsworks.-2013-02-18.command/acknowledged-at :portkey.aws.opsworks.-2013-02-18.command/created-at :portkey.aws.opsworks.-2013-02-18.command/command-id]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instances-count/setup-failed (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instances-count/stop-failed (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instances-count/registered (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instances-count/connection-lost (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instances-count/running-setup (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instances-count/rebooting (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instances-count/booting (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instances-count/deregistering (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instances-count/terminating (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instances-count/stopping (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instances-count/registering (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instances-count/terminated (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instances-count/stopped (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instances-count/pending (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instances-count/requested (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instances-count/assigning (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instances-count/start-failed (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instances-count/unassigning (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instances-count/online (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instances-count/shutting-down (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/instances-count (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.instances-count/setup-failed :portkey.aws.opsworks.-2013-02-18.instances-count/stop-failed :portkey.aws.opsworks.-2013-02-18.instances-count/registered :portkey.aws.opsworks.-2013-02-18.instances-count/connection-lost :portkey.aws.opsworks.-2013-02-18.instances-count/running-setup :portkey.aws.opsworks.-2013-02-18.instances-count/rebooting :portkey.aws.opsworks.-2013-02-18.instances-count/booting :portkey.aws.opsworks.-2013-02-18.instances-count/deregistering :portkey.aws.opsworks.-2013-02-18.instances-count/terminating :portkey.aws.opsworks.-2013-02-18.instances-count/stopping :portkey.aws.opsworks.-2013-02-18.instances-count/registering :portkey.aws.opsworks.-2013-02-18.instances-count/terminated :portkey.aws.opsworks.-2013-02-18.instances-count/stopped :portkey.aws.opsworks.-2013-02-18.instances-count/pending :portkey.aws.opsworks.-2013-02-18.instances-count/requested :portkey.aws.opsworks.-2013-02-18.instances-count/assigning :portkey.aws.opsworks.-2013-02-18.instances-count/start-failed :portkey.aws.opsworks.-2013-02-18.instances-count/unassigning :portkey.aws.opsworks.-2013-02-18.instances-count/online :portkey.aws.opsworks.-2013-02-18.instances-count/shutting-down]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18/instances]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.register-volume-request/ec-2-volume-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.register-volume-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/register-volume-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.register-volume-request/stack-id] :opt-un [:portkey.aws.opsworks.-2013-02-18.register-volume-request/ec-2-volume-id]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-user-profile-result/iam-user-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/create-user-profile-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.create-user-profile-result/iam-user-arn]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/operating-system-configuration-managers (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/operating-system-configuration-manager))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.reboot-instance-request/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/reboot-instance-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.reboot-instance-request/instance-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.time-based-auto-scaling-configuration/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.time-based-auto-scaling-configuration/auto-scaling-schedule (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/weekly-auto-scaling-schedule))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/time-based-auto-scaling-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.time-based-auto-scaling-configuration/instance-id :portkey.aws.opsworks.-2013-02-18.time-based-auto-scaling-configuration/auto-scaling-schedule]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/volume-type #{"standard" "io1" "gp2" :io-1 :standard :gp-2})

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/cloud-watch-logs-initial-position #{:end-of-file :start-of-file "start_of_file" "end_of_file"})

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-ecs-clusters-request/ecs-cluster-arns (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-ecs-clusters-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-ecs-clusters-request/next-token (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-ecs-clusters-request/max-results (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-ecs-clusters-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.describe-ecs-clusters-request/ecs-cluster-arns :portkey.aws.opsworks.-2013-02-18.describe-ecs-clusters-request/stack-id :portkey.aws.opsworks.-2013-02-18.describe-ecs-clusters-request/next-token :portkey.aws.opsworks.-2013-02-18.describe-ecs-clusters-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/app-attributes (clojure.spec.alpha/map-of :portkey.aws.opsworks.-2013-02-18/app-attributes-keys :portkey.aws.opsworks.-2013-02-18/string))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/block-device-mappings (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/block-device-mapping))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/architecture #{"x86_64" :i-386 :x-86-64 "i386"})

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.clone-stack-result/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/clone-stack-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.clone-stack-result/stack-id]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack-configuration-manager/name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack-configuration-manager/version (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/stack-configuration-manager (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.stack-configuration-manager/name :portkey.aws.opsworks.-2013-02-18.stack-configuration-manager/version]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.register-rds-db-instance-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.register-rds-db-instance-request/rds-db-instance-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.register-rds-db-instance-request/db-user (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.register-rds-db-instance-request/db-password (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/register-rds-db-instance-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.register-rds-db-instance-request/stack-id :portkey.aws.opsworks.-2013-02-18.register-rds-db-instance-request/rds-db-instance-arn :portkey.aws.opsworks.-2013-02-18.register-rds-db-instance-request/db-user :portkey.aws.opsworks.-2013-02-18.register-rds-db-instance-request/db-password] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.assign-volume-request/volume-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.assign-volume-request/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/assign-volume-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.assign-volume-request/volume-id] :opt-un [:portkey.aws.opsworks.-2013-02-18.assign-volume-request/instance-id]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.auto-scaling-thresholds/instance-count (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.auto-scaling-thresholds/thresholds-wait-time (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/minute))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.auto-scaling-thresholds/ignore-metrics-time (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/minute))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.auto-scaling-thresholds/cpu-threshold (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/double))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.auto-scaling-thresholds/memory-threshold (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/double))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.auto-scaling-thresholds/load-threshold (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/double))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.auto-scaling-thresholds/alarms (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/auto-scaling-thresholds (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.auto-scaling-thresholds/instance-count :portkey.aws.opsworks.-2013-02-18.auto-scaling-thresholds/thresholds-wait-time :portkey.aws.opsworks.-2013-02-18.auto-scaling-thresholds/ignore-metrics-time :portkey.aws.opsworks.-2013-02-18.auto-scaling-thresholds/cpu-threshold :portkey.aws.opsworks.-2013-02-18.auto-scaling-thresholds/memory-threshold :portkey.aws.opsworks.-2013-02-18.auto-scaling-thresholds/load-threshold :portkey.aws.opsworks.-2013-02-18.auto-scaling-thresholds/alarms]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/layer-type #{:memcached "memcached" "monitoring-master" "custom" "web" :phpapp "db-master" :monitoringmaster :dbmaster :custom "rails-app" "php-app" :javaapp :nodejsapp :lb :railsapp "nodejs-app" "lb" "ecs-cluster" "aws-flow-ruby" "java-app" :awsflowruby :ecscluster :web})

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-deployment-result/deployment-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/create-deployment-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.create-deployment-result/deployment-id]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/virtualization-type #{:hvm :paravirtual "paravirtual" "hvm"})

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-stack-summary-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-stack-summary-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.describe-stack-summary-request/stack-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/resource-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-time-based-auto-scaling-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18/time-based-auto-scaling-configurations]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-instance-request/subnet-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-instance-request/tenancy (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-instance-request/ebs-optimized (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-instance-request/instance-type (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-instance-request/agent-version (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-instance-request/os (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-instance-request/layer-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-instance-request/availability-zone (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-instance-request/hostname (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-instance-request/ami-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-instance-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-instance-request/install-updates-on-boot (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-instance-request/virtualization-type (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-instance-request/ssh-key-name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/create-instance-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.create-instance-request/stack-id :portkey.aws.opsworks.-2013-02-18.create-instance-request/layer-ids :portkey.aws.opsworks.-2013-02-18.create-instance-request/instance-type] :opt-un [:portkey.aws.opsworks.-2013-02-18.create-instance-request/subnet-id :portkey.aws.opsworks.-2013-02-18.create-instance-request/tenancy :portkey.aws.opsworks.-2013-02-18/root-device-type :portkey.aws.opsworks.-2013-02-18.create-instance-request/ebs-optimized :portkey.aws.opsworks.-2013-02-18.create-instance-request/agent-version :portkey.aws.opsworks.-2013-02-18.create-instance-request/os :portkey.aws.opsworks.-2013-02-18.create-instance-request/availability-zone :portkey.aws.opsworks.-2013-02-18.create-instance-request/hostname :portkey.aws.opsworks.-2013-02-18.create-instance-request/ami-id :portkey.aws.opsworks.-2013-02-18/block-device-mappings :portkey.aws.opsworks.-2013-02-18/architecture :portkey.aws.opsworks.-2013-02-18.create-instance-request/install-updates-on-boot :portkey.aws.opsworks.-2013-02-18.create-instance-request/virtualization-type :portkey.aws.opsworks.-2013-02-18/auto-scaling-type :portkey.aws.opsworks.-2013-02-18.create-instance-request/ssh-key-name]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.start-instance-request/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/start-instance-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.start-instance-request/instance-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stop-stack-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/stop-stack-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.stop-stack-request/stack-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-stacks-request/stack-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-stacks-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.describe-stacks-request/stack-ids]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-rds-db-instances-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-rds-db-instances-request/rds-db-instance-arns (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-rds-db-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.describe-rds-db-instances-request/stack-id] :opt-un [:portkey.aws.opsworks.-2013-02-18.describe-rds-db-instances-request/rds-db-instance-arns]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.block-device-mapping/device-name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.block-device-mapping/no-device (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.block-device-mapping/virtual-name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.block-device-mapping/ebs (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/ebs-block-device))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/block-device-mapping (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.block-device-mapping/device-name :portkey.aws.opsworks.-2013-02-18.block-device-mapping/no-device :portkey.aws.opsworks.-2013-02-18.block-device-mapping/virtual-name :portkey.aws.opsworks.-2013-02-18.block-device-mapping/ebs]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/max-results clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/list-tags-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18/tags :portkey.aws.opsworks.-2013-02-18/next-token]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.weekly-auto-scaling-schedule/monday (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/daily-auto-scaling-schedule))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.weekly-auto-scaling-schedule/tuesday (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/daily-auto-scaling-schedule))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.weekly-auto-scaling-schedule/wednesday (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/daily-auto-scaling-schedule))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.weekly-auto-scaling-schedule/thursday (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/daily-auto-scaling-schedule))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.weekly-auto-scaling-schedule/friday (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/daily-auto-scaling-schedule))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.weekly-auto-scaling-schedule/saturday (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/daily-auto-scaling-schedule))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.weekly-auto-scaling-schedule/sunday (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/daily-auto-scaling-schedule))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/weekly-auto-scaling-schedule (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.weekly-auto-scaling-schedule/monday :portkey.aws.opsworks.-2013-02-18.weekly-auto-scaling-schedule/tuesday :portkey.aws.opsworks.-2013-02-18.weekly-auto-scaling-schedule/wednesday :portkey.aws.opsworks.-2013-02-18.weekly-auto-scaling-schedule/thursday :portkey.aws.opsworks.-2013-02-18.weekly-auto-scaling-schedule/friday :portkey.aws.opsworks.-2013-02-18.weekly-auto-scaling-schedule/saturday :portkey.aws.opsworks.-2013-02-18.weekly-auto-scaling-schedule/sunday]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-service-errors-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18/service-errors]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/service-errors (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/service-error))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.delete-layer-request/layer-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/delete-layer-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.delete-layer-request/layer-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.volume-configuration/mount-point (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.volume-configuration/raid-level (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.volume-configuration/number-of-disks (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.volume-configuration/size (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.volume-configuration/volume-type (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.volume-configuration/iops (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.volume-configuration/encrypted (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/volume-configuration (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.volume-configuration/mount-point :portkey.aws.opsworks.-2013-02-18.volume-configuration/number-of-disks :portkey.aws.opsworks.-2013-02-18.volume-configuration/size] :opt-un [:portkey.aws.opsworks.-2013-02-18.volume-configuration/raid-level :portkey.aws.opsworks.-2013-02-18.volume-configuration/volume-type :portkey.aws.opsworks.-2013-02-18.volume-configuration/iops :portkey.aws.opsworks.-2013-02-18.volume-configuration/encrypted]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/public-ip (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/ecs-container-instance-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/platform (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/security-group-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/registered-by (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/subnet-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/tenancy (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/infrastructure-class (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/ebs-optimized (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/instance-type (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/instance-profile-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/public-dns (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/agent-version (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/os (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/layer-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/root-device-volume-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/availability-zone (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/status (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/hostname (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/last-service-error-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/reported-agent-version (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/elastic-ip (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/ami-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/private-dns (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/created-at (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/date-time))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/ecs-cluster-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/install-updates-on-boot (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/ec-2-instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/ssh-host-dsa-key-fingerprint (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/ssh-host-rsa-key-fingerprint (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/ssh-key-name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.instance/private-ip (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.instance/public-ip :portkey.aws.opsworks.-2013-02-18.instance/instance-id :portkey.aws.opsworks.-2013-02-18.instance/ecs-container-instance-arn :portkey.aws.opsworks.-2013-02-18.instance/platform :portkey.aws.opsworks.-2013-02-18.instance/security-group-ids :portkey.aws.opsworks.-2013-02-18.instance/registered-by :portkey.aws.opsworks.-2013-02-18.instance/subnet-id :portkey.aws.opsworks.-2013-02-18.instance/tenancy :portkey.aws.opsworks.-2013-02-18/root-device-type :portkey.aws.opsworks.-2013-02-18.instance/infrastructure-class :portkey.aws.opsworks.-2013-02-18.instance/ebs-optimized :portkey.aws.opsworks.-2013-02-18.instance/instance-type :portkey.aws.opsworks.-2013-02-18.instance/instance-profile-arn :portkey.aws.opsworks.-2013-02-18.instance/public-dns :portkey.aws.opsworks.-2013-02-18.instance/agent-version :portkey.aws.opsworks.-2013-02-18.instance/os :portkey.aws.opsworks.-2013-02-18.instance/layer-ids :portkey.aws.opsworks.-2013-02-18.instance/root-device-volume-id :portkey.aws.opsworks.-2013-02-18.instance/availability-zone :portkey.aws.opsworks.-2013-02-18.instance/status :portkey.aws.opsworks.-2013-02-18.instance/hostname :portkey.aws.opsworks.-2013-02-18.instance/last-service-error-id :portkey.aws.opsworks.-2013-02-18.instance/reported-agent-version :portkey.aws.opsworks.-2013-02-18.instance/elastic-ip :portkey.aws.opsworks.-2013-02-18.instance/ami-id :portkey.aws.opsworks.-2013-02-18.instance/private-dns :portkey.aws.opsworks.-2013-02-18/reported-os :portkey.aws.opsworks.-2013-02-18.instance/stack-id :portkey.aws.opsworks.-2013-02-18.instance/arn :portkey.aws.opsworks.-2013-02-18.instance/created-at :portkey.aws.opsworks.-2013-02-18/block-device-mappings :portkey.aws.opsworks.-2013-02-18/architecture :portkey.aws.opsworks.-2013-02-18.instance/ecs-cluster-arn :portkey.aws.opsworks.-2013-02-18.instance/install-updates-on-boot :portkey.aws.opsworks.-2013-02-18/virtualization-type :portkey.aws.opsworks.-2013-02-18.instance/ec-2-instance-id :portkey.aws.opsworks.-2013-02-18.instance/ssh-host-dsa-key-fingerprint :portkey.aws.opsworks.-2013-02-18/auto-scaling-type :portkey.aws.opsworks.-2013-02-18.instance/ssh-host-rsa-key-fingerprint :portkey.aws.opsworks.-2013-02-18.instance/ssh-key-name :portkey.aws.opsworks.-2013-02-18.instance/private-ip]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/volume-configurations (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/volume-configuration))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/auto-scaling-type #{:load :timer "load" "timer"})

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.deployment-command/name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/deployment-command-name))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.deployment-command/args (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/deployment-command-args))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/deployment-command (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.deployment-command/name] :opt-un [:portkey.aws.opsworks.-2013-02-18.deployment-command/args]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-stacks-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18/stacks]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.register-ecs-cluster-result/ecs-cluster-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/register-ecs-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.register-ecs-cluster-result/ecs-cluster-arn]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/cloud-watch-logs-time-zone #{:utc "LOCAL" "UTC" :local})

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-apps-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-apps-request/app-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-apps-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.describe-apps-request/stack-id :portkey.aws.opsworks.-2013-02-18.describe-apps-request/app-ids]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/layer-attributes (clojure.spec.alpha/map-of :portkey.aws.opsworks.-2013-02-18/layer-attributes-keys :portkey.aws.opsworks.-2013-02-18/string))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.deregister-rds-db-instance-request/rds-db-instance-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/deregister-rds-db-instance-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.deregister-rds-db-instance-request/rds-db-instance-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-elastic-ip-request/elastic-ip (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-elastic-ip-request/name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/update-elastic-ip-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.update-elastic-ip-request/elastic-ip] :opt-un [:portkey.aws.opsworks.-2013-02-18.update-elastic-ip-request/name]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-time-based-auto-scaling-request/instance-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-time-based-auto-scaling-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.describe-time-based-auto-scaling-request/instance-ids] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-rds-db-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18/rds-db-instances]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-commands-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18/commands]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-rds-db-instance-request/rds-db-instance-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-rds-db-instance-request/db-user (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.update-rds-db-instance-request/db-password (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/update-rds-db-instance-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.update-rds-db-instance-request/rds-db-instance-arn] :opt-un [:portkey.aws.opsworks.-2013-02-18.update-rds-db-instance-request/db-user :portkey.aws.opsworks.-2013-02-18.update-rds-db-instance-request/db-password]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/volumes (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/volume))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/app-attributes-keys #{:document-root :rails-env "DocumentRoot" "RailsEnv" "AutoBundleOnDeploy" "AwsFlowRubySettings" :auto-bundle-on-deploy :aws-flow-ruby-settings})

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-user-profile-request/iam-user-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-user-profile-request/ssh-username (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-user-profile-request/ssh-public-key (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.create-user-profile-request/allow-self-management (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/create-user-profile-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.create-user-profile-request/iam-user-arn] :opt-un [:portkey.aws.opsworks.-2013-02-18.create-user-profile-request/ssh-username :portkey.aws.opsworks.-2013-02-18.create-user-profile-request/ssh-public-key :portkey.aws.opsworks.-2013-02-18.create-user-profile-request/allow-self-management]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-layers-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18/layers]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack/custom-cookbooks-source (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/source))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack/service-role-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack/hostname-theme (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack/default-ssh-key-name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack/default-availability-zone (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack/configuration-manager (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/stack-configuration-manager))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack/agent-version (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack/use-opsworks-security-groups (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack/attributes (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/stack-attributes))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack/default-root-device-type (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/root-device-type))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack/vpc-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack/use-custom-cookbooks (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack/default-instance-profile-arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack/arn (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack/created-at (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/date-time))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack/custom-json (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack/default-subnet-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack/name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack/region (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.stack/default-os (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/stack (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.stack/custom-cookbooks-source :portkey.aws.opsworks.-2013-02-18.stack/service-role-arn :portkey.aws.opsworks.-2013-02-18.stack/hostname-theme :portkey.aws.opsworks.-2013-02-18.stack/default-ssh-key-name :portkey.aws.opsworks.-2013-02-18.stack/default-availability-zone :portkey.aws.opsworks.-2013-02-18/chef-configuration :portkey.aws.opsworks.-2013-02-18.stack/configuration-manager :portkey.aws.opsworks.-2013-02-18.stack/agent-version :portkey.aws.opsworks.-2013-02-18.stack/use-opsworks-security-groups :portkey.aws.opsworks.-2013-02-18.stack/attributes :portkey.aws.opsworks.-2013-02-18.stack/default-root-device-type :portkey.aws.opsworks.-2013-02-18.stack/vpc-id :portkey.aws.opsworks.-2013-02-18.stack/use-custom-cookbooks :portkey.aws.opsworks.-2013-02-18.stack/stack-id :portkey.aws.opsworks.-2013-02-18.stack/default-instance-profile-arn :portkey.aws.opsworks.-2013-02-18.stack/arn :portkey.aws.opsworks.-2013-02-18.stack/created-at :portkey.aws.opsworks.-2013-02-18.stack/custom-json :portkey.aws.opsworks.-2013-02-18.stack/default-subnet-id :portkey.aws.opsworks.-2013-02-18.stack/name :portkey.aws.opsworks.-2013-02-18.stack/region :portkey.aws.opsworks.-2013-02-18.stack/default-os]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/operating-systems (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/operating-system))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/instances (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/instance))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/deployment-command-name #{:rollback "stop" :undeploy "deploy" "undeploy" :restart "update_custom_cookbooks" :execute-recipes :update-custom-cookbooks :update-dependencies "configure" :start :setup "install_dependencies" :configure "start" :stop "setup" "execute_recipes" "restart" :install-dependencies "rollback" :deploy "update_dependencies"})

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/untag-resource-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18/resource-arn :portkey.aws.opsworks.-2013-02-18/tag-keys] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.disassociate-elastic-ip-request/elastic-ip (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/disassociate-elastic-ip-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.disassociate-elastic-ip-request/elastic-ip] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-apps-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18/apps]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.service-error/service-error-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.service-error/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.service-error/instance-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.service-error/type (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.service-error/message (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.service-error/created-at (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/date-time))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/service-error (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.service-error/service-error-id :portkey.aws.opsworks.-2013-02-18.service-error/stack-id :portkey.aws.opsworks.-2013-02-18.service-error/instance-id :portkey.aws.opsworks.-2013-02-18.service-error/type :portkey.aws.opsworks.-2013-02-18.service-error/message :portkey.aws.opsworks.-2013-02-18.service-error/created-at]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.operating-system/name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.operating-system/id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.operating-system/type (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.operating-system/configuration-managers (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/operating-system-configuration-managers))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.operating-system/reported-name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.operating-system/reported-version (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.operating-system/supported (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/boolean))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/operating-system (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.operating-system/name :portkey.aws.opsworks.-2013-02-18.operating-system/id :portkey.aws.opsworks.-2013-02-18.operating-system/type :portkey.aws.opsworks.-2013-02-18.operating-system/configuration-managers :portkey.aws.opsworks.-2013-02-18.operating-system/reported-name :portkey.aws.opsworks.-2013-02-18.operating-system/reported-version :portkey.aws.opsworks.-2013-02-18.operating-system/supported]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-log-stream/batch-size (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-log-stream/encoding (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/cloud-watch-logs-encoding))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-log-stream/initial-position (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/cloud-watch-logs-initial-position))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-log-stream/file (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-log-stream/batch-count (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-log-stream/time-zone (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/cloud-watch-logs-time-zone))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-log-stream/multi-line-start-pattern (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-log-stream/file-fingerprint-lines (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-log-stream/log-group-name (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-log-stream/buffer-duration (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/integer))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-log-stream/datetime-format (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/cloud-watch-logs-log-stream (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-log-stream/batch-size :portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-log-stream/encoding :portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-log-stream/initial-position :portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-log-stream/file :portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-log-stream/batch-count :portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-log-stream/time-zone :portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-log-stream/multi-line-start-pattern :portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-log-stream/file-fingerprint-lines :portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-log-stream/log-group-name :portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-log-stream/buffer-duration :portkey.aws.opsworks.-2013-02-18.cloud-watch-logs-log-stream/datetime-format]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.deregister-volume-request/volume-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/deregister-volume-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18.deregister-volume-request/volume-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-deployments-request/stack-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-deployments-request/app-id (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.describe-deployments-request/deployment-ids (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/strings))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-deployments-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.describe-deployments-request/stack-id :portkey.aws.opsworks.-2013-02-18.describe-deployments-request/app-id :portkey.aws.opsworks.-2013-02-18.describe-deployments-request/deployment-ids]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/elastic-load-balancers (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/elastic-load-balancer))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/date-time (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/deployments (clojure.spec.alpha/coll-of :portkey.aws.opsworks.-2013-02-18/deployment))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/describe-elastic-load-balancers-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18/elastic-load-balancers]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18.register-elastic-ip-result/elastic-ip (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/string))
(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/register-elastic-ip-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.opsworks.-2013-02-18.register-elastic-ip-result/elastic-ip]))

(clojure.spec.alpha/def :portkey.aws.opsworks.-2013-02-18/list-tags-request (clojure.spec.alpha/keys :req-un [:portkey.aws.opsworks.-2013-02-18/resource-arn] :opt-un [:portkey.aws.opsworks.-2013-02-18/max-results :portkey.aws.opsworks.-2013-02-18/next-token]))

(clojure.core/defn tag-resource ([tag-resource-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-tag-resource-request tag-resource-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/tag-resource-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "TagResource", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef tag-resource :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/tag-resource-request) :ret clojure.core/true?)

(clojure.core/defn describe-user-profiles ([] (describe-user-profiles {})) ([describe-user-profiles-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-describe-user-profiles-request describe-user-profiles-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/describe-user-profiles-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/describe-user-profiles-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeUserProfiles", :http.request.configuration/output-deser-fn response-describe-user-profiles-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef describe-user-profiles :args (clojure.spec.alpha/? :portkey.aws.opsworks.-2013-02-18/describe-user-profiles-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/describe-user-profiles-result))

(clojure.core/defn describe-stack-summary ([describe-stack-summary-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-describe-stack-summary-request describe-stack-summary-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/describe-stack-summary-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/describe-stack-summary-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeStackSummary", :http.request.configuration/output-deser-fn response-describe-stack-summary-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef describe-stack-summary :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/describe-stack-summary-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/describe-stack-summary-result))

(clojure.core/defn describe-volumes ([] (describe-volumes {})) ([describe-volumes-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-describe-volumes-request describe-volumes-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/describe-volumes-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/describe-volumes-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeVolumes", :http.request.configuration/output-deser-fn response-describe-volumes-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef describe-volumes :args (clojure.spec.alpha/? :portkey.aws.opsworks.-2013-02-18/describe-volumes-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/describe-volumes-result))

(clojure.core/defn update-instance ([update-instance-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-update-instance-request update-instance-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/update-instance-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateInstance", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef update-instance :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/update-instance-request) :ret clojure.core/true?)

(clojure.core/defn start-instance ([start-instance-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-start-instance-request start-instance-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/start-instance-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "StartInstance", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef start-instance :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/start-instance-request) :ret clojure.core/true?)

(clojure.core/defn create-layer ([create-layer-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-create-layer-request create-layer-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/create-layer-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/create-layer-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateLayer", :http.request.configuration/output-deser-fn response-create-layer-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef create-layer :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/create-layer-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/create-layer-result))

(clojure.core/defn describe-deployments ([] (describe-deployments {})) ([describe-deployments-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-describe-deployments-request describe-deployments-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/describe-deployments-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/describe-deployments-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeDeployments", :http.request.configuration/output-deser-fn response-describe-deployments-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef describe-deployments :args (clojure.spec.alpha/? :portkey.aws.opsworks.-2013-02-18/describe-deployments-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/describe-deployments-result))

(clojure.core/defn delete-stack ([delete-stack-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-delete-stack-request delete-stack-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/delete-stack-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteStack", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef delete-stack :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/delete-stack-request) :ret clojure.core/true?)

(clojure.core/defn update-user-profile ([update-user-profile-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-update-user-profile-request update-user-profile-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/update-user-profile-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateUserProfile", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef update-user-profile :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/update-user-profile-request) :ret clojure.core/true?)

(clojure.core/defn unassign-volume ([unassign-volume-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-unassign-volume-request unassign-volume-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/unassign-volume-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UnassignVolume", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef unassign-volume :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/unassign-volume-request) :ret clojure.core/true?)

(clojure.core/defn reboot-instance ([reboot-instance-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-reboot-instance-request reboot-instance-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/reboot-instance-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RebootInstance", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef reboot-instance :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/reboot-instance-request) :ret clojure.core/true?)

(clojure.core/defn describe-permissions ([] (describe-permissions {})) ([describe-permissions-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-describe-permissions-request describe-permissions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/describe-permissions-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/describe-permissions-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribePermissions", :http.request.configuration/output-deser-fn response-describe-permissions-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef describe-permissions :args (clojure.spec.alpha/? :portkey.aws.opsworks.-2013-02-18/describe-permissions-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/describe-permissions-result))

(clojure.core/defn unassign-instance ([unassign-instance-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-unassign-instance-request unassign-instance-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/unassign-instance-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UnassignInstance", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef unassign-instance :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/unassign-instance-request) :ret clojure.core/true?)

(clojure.core/defn disassociate-elastic-ip ([disassociate-elastic-ip-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-disassociate-elastic-ip-request disassociate-elastic-ip-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/disassociate-elastic-ip-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DisassociateElasticIp", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef disassociate-elastic-ip :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/disassociate-elastic-ip-request) :ret clojure.core/true?)

(clojure.core/defn set-time-based-auto-scaling ([set-time-based-auto-scaling-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-set-time-based-auto-scaling-request set-time-based-auto-scaling-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/set-time-based-auto-scaling-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "SetTimeBasedAutoScaling", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef set-time-based-auto-scaling :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/set-time-based-auto-scaling-request) :ret clojure.core/true?)

(clojure.core/defn describe-rds-db-instances ([describe-rds-db-instances-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-describe-rds-db-instances-request describe-rds-db-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/describe-rds-db-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/describe-rds-db-instances-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeRdsDbInstances", :http.request.configuration/output-deser-fn response-describe-rds-db-instances-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef describe-rds-db-instances :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/describe-rds-db-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/describe-rds-db-instances-result))

(clojure.core/defn register-rds-db-instance ([register-rds-db-instance-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-register-rds-db-instance-request register-rds-db-instance-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/register-rds-db-instance-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RegisterRdsDbInstance", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef register-rds-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/register-rds-db-instance-request) :ret clojure.core/true?)

(clojure.core/defn describe-operating-systems ([] (describe-operating-systems {})) ([_] (clojure.core/let [request-function-result__1468878__auto__ {}] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/describe-operating-systems-response, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec nil, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeOperatingSystems", :http.request.configuration/output-deser-fn response-describe-operating-systems-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-operating-systems :args clojure.core/empty? :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/describe-operating-systems-response))

(clojure.core/defn stop-instance ([stop-instance-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-stop-instance-request stop-instance-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/stop-instance-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "StopInstance", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef stop-instance :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/stop-instance-request) :ret clojure.core/true?)

(clojure.core/defn register-volume ([register-volume-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-register-volume-request register-volume-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/register-volume-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/register-volume-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RegisterVolume", :http.request.configuration/output-deser-fn response-register-volume-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef register-volume :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/register-volume-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/register-volume-result))

(clojure.core/defn describe-layers ([] (describe-layers {})) ([describe-layers-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-describe-layers-request describe-layers-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/describe-layers-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/describe-layers-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeLayers", :http.request.configuration/output-deser-fn response-describe-layers-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef describe-layers :args (clojure.spec.alpha/? :portkey.aws.opsworks.-2013-02-18/describe-layers-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/describe-layers-result))

(clojure.core/defn update-stack ([update-stack-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-update-stack-request update-stack-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/update-stack-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateStack", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef update-stack :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/update-stack-request) :ret clojure.core/true?)

(clojure.core/defn list-tags ([list-tags-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-list-tags-request list-tags-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/list-tags-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/list-tags-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ListTags", :http.request.configuration/output-deser-fn response-list-tags-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef list-tags :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/list-tags-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/list-tags-result))

(clojure.core/defn describe-apps ([] (describe-apps {})) ([describe-apps-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-describe-apps-request describe-apps-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/describe-apps-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/describe-apps-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeApps", :http.request.configuration/output-deser-fn response-describe-apps-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef describe-apps :args (clojure.spec.alpha/? :portkey.aws.opsworks.-2013-02-18/describe-apps-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/describe-apps-result))

(clojure.core/defn create-deployment ([create-deployment-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-create-deployment-request create-deployment-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/create-deployment-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/create-deployment-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateDeployment", :http.request.configuration/output-deser-fn response-create-deployment-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef create-deployment :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/create-deployment-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/create-deployment-result))

(clojure.core/defn associate-elastic-ip ([associate-elastic-ip-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-associate-elastic-ip-request associate-elastic-ip-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/associate-elastic-ip-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AssociateElasticIp", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef associate-elastic-ip :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/associate-elastic-ip-request) :ret clojure.core/true?)

(clojure.core/defn create-user-profile ([create-user-profile-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-create-user-profile-request create-user-profile-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/create-user-profile-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/create-user-profile-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateUserProfile", :http.request.configuration/output-deser-fn response-create-user-profile-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception}})))))
(clojure.spec.alpha/fdef create-user-profile :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/create-user-profile-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/create-user-profile-result))

(clojure.core/defn start-stack ([start-stack-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-start-stack-request start-stack-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/start-stack-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "StartStack", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef start-stack :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/start-stack-request) :ret clojure.core/true?)

(clojure.core/defn stop-stack ([stop-stack-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-stop-stack-request stop-stack-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/stop-stack-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "StopStack", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef stop-stack :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/stop-stack-request) :ret clojure.core/true?)

(clojure.core/defn deregister-volume ([deregister-volume-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-deregister-volume-request deregister-volume-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/deregister-volume-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeregisterVolume", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef deregister-volume :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/deregister-volume-request) :ret clojure.core/true?)

(clojure.core/defn describe-ecs-clusters ([] (describe-ecs-clusters {})) ([describe-ecs-clusters-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-describe-ecs-clusters-request describe-ecs-clusters-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/describe-ecs-clusters-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/describe-ecs-clusters-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeEcsClusters", :http.request.configuration/output-deser-fn response-describe-ecs-clusters-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef describe-ecs-clusters :args (clojure.spec.alpha/? :portkey.aws.opsworks.-2013-02-18/describe-ecs-clusters-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/describe-ecs-clusters-result))

(clojure.core/defn describe-time-based-auto-scaling ([describe-time-based-auto-scaling-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-describe-time-based-auto-scaling-request describe-time-based-auto-scaling-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/describe-time-based-auto-scaling-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/describe-time-based-auto-scaling-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeTimeBasedAutoScaling", :http.request.configuration/output-deser-fn response-describe-time-based-auto-scaling-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef describe-time-based-auto-scaling :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/describe-time-based-auto-scaling-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/describe-time-based-auto-scaling-result))

(clojure.core/defn delete-user-profile ([delete-user-profile-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-delete-user-profile-request delete-user-profile-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/delete-user-profile-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteUserProfile", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef delete-user-profile :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/delete-user-profile-request) :ret clojure.core/true?)

(clojure.core/defn deregister-instance ([deregister-instance-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-deregister-instance-request deregister-instance-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/deregister-instance-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeregisterInstance", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef deregister-instance :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/deregister-instance-request) :ret clojure.core/true?)

(clojure.core/defn describe-agent-versions ([] (describe-agent-versions {})) ([describe-agent-versions-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-describe-agent-versions-request describe-agent-versions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/describe-agent-versions-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/describe-agent-versions-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeAgentVersions", :http.request.configuration/output-deser-fn response-describe-agent-versions-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef describe-agent-versions :args (clojure.spec.alpha/? :portkey.aws.opsworks.-2013-02-18/describe-agent-versions-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/describe-agent-versions-result))

(clojure.core/defn update-my-user-profile ([] (update-my-user-profile {})) ([update-my-user-profile-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-update-my-user-profile-request update-my-user-profile-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/update-my-user-profile-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateMyUserProfile", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception}})))))
(clojure.spec.alpha/fdef update-my-user-profile :args (clojure.spec.alpha/? :portkey.aws.opsworks.-2013-02-18/update-my-user-profile-request) :ret clojure.core/true?)

(clojure.core/defn assign-volume ([assign-volume-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-assign-volume-request assign-volume-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/assign-volume-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AssignVolume", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef assign-volume :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/assign-volume-request) :ret clojure.core/true?)

(clojure.core/defn register-elastic-ip ([register-elastic-ip-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-register-elastic-ip-request register-elastic-ip-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/register-elastic-ip-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/register-elastic-ip-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RegisterElasticIp", :http.request.configuration/output-deser-fn response-register-elastic-ip-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef register-elastic-ip :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/register-elastic-ip-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/register-elastic-ip-result))

(clojure.core/defn describe-elastic-load-balancers ([] (describe-elastic-load-balancers {})) ([describe-elastic-load-balancers-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-describe-elastic-load-balancers-request describe-elastic-load-balancers-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/describe-elastic-load-balancers-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/describe-elastic-load-balancers-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeElasticLoadBalancers", :http.request.configuration/output-deser-fn response-describe-elastic-load-balancers-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef describe-elastic-load-balancers :args (clojure.spec.alpha/? :portkey.aws.opsworks.-2013-02-18/describe-elastic-load-balancers-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/describe-elastic-load-balancers-result))

(clojure.core/defn update-app ([update-app-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-update-app-request update-app-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/update-app-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateApp", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef update-app :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/update-app-request) :ret clojure.core/true?)

(clojure.core/defn delete-layer ([delete-layer-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-delete-layer-request delete-layer-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/delete-layer-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteLayer", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef delete-layer :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/delete-layer-request) :ret clojure.core/true?)

(clojure.core/defn grant-access ([grant-access-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-grant-access-request grant-access-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/grant-access-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/grant-access-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GrantAccess", :http.request.configuration/output-deser-fn response-grant-access-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef grant-access :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/grant-access-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/grant-access-result))

(clojure.core/defn describe-instances ([] (describe-instances {})) ([describe-instances-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-describe-instances-request describe-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/describe-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/describe-instances-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeInstances", :http.request.configuration/output-deser-fn response-describe-instances-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef describe-instances :args (clojure.spec.alpha/? :portkey.aws.opsworks.-2013-02-18/describe-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/describe-instances-result))

(clojure.core/defn describe-stack-provisioning-parameters ([describe-stack-provisioning-parameters-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-describe-stack-provisioning-parameters-request describe-stack-provisioning-parameters-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/describe-stack-provisioning-parameters-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/describe-stack-provisioning-parameters-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeStackProvisioningParameters", :http.request.configuration/output-deser-fn response-describe-stack-provisioning-parameters-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef describe-stack-provisioning-parameters :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/describe-stack-provisioning-parameters-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/describe-stack-provisioning-parameters-result))

(clojure.core/defn deregister-ecs-cluster ([deregister-ecs-cluster-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-deregister-ecs-cluster-request deregister-ecs-cluster-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/deregister-ecs-cluster-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeregisterEcsCluster", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef deregister-ecs-cluster :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/deregister-ecs-cluster-request) :ret clojure.core/true?)

(clojure.core/defn delete-app ([delete-app-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-delete-app-request delete-app-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/delete-app-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteApp", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef delete-app :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/delete-app-request) :ret clojure.core/true?)

(clojure.core/defn update-rds-db-instance ([update-rds-db-instance-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-update-rds-db-instance-request update-rds-db-instance-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/update-rds-db-instance-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateRdsDbInstance", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef update-rds-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/update-rds-db-instance-request) :ret clojure.core/true?)

(clojure.core/defn create-app ([create-app-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-create-app-request create-app-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/create-app-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/create-app-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateApp", :http.request.configuration/output-deser-fn response-create-app-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef create-app :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/create-app-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/create-app-result))

(clojure.core/defn describe-commands ([] (describe-commands {})) ([describe-commands-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-describe-commands-request describe-commands-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/describe-commands-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/describe-commands-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeCommands", :http.request.configuration/output-deser-fn response-describe-commands-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef describe-commands :args (clojure.spec.alpha/? :portkey.aws.opsworks.-2013-02-18/describe-commands-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/describe-commands-result))

(clojure.core/defn create-stack ([create-stack-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-create-stack-request create-stack-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/create-stack-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/create-stack-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateStack", :http.request.configuration/output-deser-fn response-create-stack-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception}})))))
(clojure.spec.alpha/fdef create-stack :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/create-stack-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/create-stack-result))

(clojure.core/defn update-volume ([update-volume-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-update-volume-request update-volume-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/update-volume-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateVolume", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef update-volume :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/update-volume-request) :ret clojure.core/true?)

(clojure.core/defn register-instance ([register-instance-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-register-instance-request register-instance-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/register-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/register-instance-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RegisterInstance", :http.request.configuration/output-deser-fn response-register-instance-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef register-instance :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/register-instance-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/register-instance-result))

(clojure.core/defn describe-my-user-profile ([] (describe-my-user-profile {})) ([_] (clojure.core/let [request-function-result__1468878__auto__ {}] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/describe-my-user-profile-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec nil, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeMyUserProfile", :http.request.configuration/output-deser-fn response-describe-my-user-profile-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-my-user-profile :args clojure.core/empty? :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/describe-my-user-profile-result))

(clojure.core/defn assign-instance ([assign-instance-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-assign-instance-request assign-instance-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/assign-instance-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AssignInstance", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef assign-instance :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/assign-instance-request) :ret clojure.core/true?)

(clojure.core/defn deregister-elastic-ip ([deregister-elastic-ip-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-deregister-elastic-ip-request deregister-elastic-ip-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/deregister-elastic-ip-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeregisterElasticIp", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef deregister-elastic-ip :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/deregister-elastic-ip-request) :ret clojure.core/true?)

(clojure.core/defn describe-load-based-auto-scaling ([describe-load-based-auto-scaling-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-describe-load-based-auto-scaling-request describe-load-based-auto-scaling-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/describe-load-based-auto-scaling-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/describe-load-based-auto-scaling-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeLoadBasedAutoScaling", :http.request.configuration/output-deser-fn response-describe-load-based-auto-scaling-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef describe-load-based-auto-scaling :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/describe-load-based-auto-scaling-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/describe-load-based-auto-scaling-result))

(clojure.core/defn describe-elastic-ips ([] (describe-elastic-ips {})) ([describe-elastic-ips-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-describe-elastic-ips-request describe-elastic-ips-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/describe-elastic-ips-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/describe-elastic-ips-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeElasticIps", :http.request.configuration/output-deser-fn response-describe-elastic-ips-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef describe-elastic-ips :args (clojure.spec.alpha/? :portkey.aws.opsworks.-2013-02-18/describe-elastic-ips-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/describe-elastic-ips-result))

(clojure.core/defn untag-resource ([untag-resource-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-untag-resource-request untag-resource-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/untag-resource-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UntagResource", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef untag-resource :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/untag-resource-request) :ret clojure.core/true?)

(clojure.core/defn describe-stacks ([] (describe-stacks {})) ([describe-stacks-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-describe-stacks-request describe-stacks-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/describe-stacks-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/describe-stacks-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeStacks", :http.request.configuration/output-deser-fn response-describe-stacks-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef describe-stacks :args (clojure.spec.alpha/? :portkey.aws.opsworks.-2013-02-18/describe-stacks-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/describe-stacks-result))

(clojure.core/defn set-load-based-auto-scaling ([set-load-based-auto-scaling-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-set-load-based-auto-scaling-request set-load-based-auto-scaling-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/set-load-based-auto-scaling-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "SetLoadBasedAutoScaling", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef set-load-based-auto-scaling :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/set-load-based-auto-scaling-request) :ret clojure.core/true?)

(clojure.core/defn set-permission ([set-permission-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-set-permission-request set-permission-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/set-permission-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "SetPermission", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef set-permission :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/set-permission-request) :ret clojure.core/true?)

(clojure.core/defn register-ecs-cluster ([register-ecs-cluster-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-register-ecs-cluster-request register-ecs-cluster-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/register-ecs-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/register-ecs-cluster-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RegisterEcsCluster", :http.request.configuration/output-deser-fn response-register-ecs-cluster-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef register-ecs-cluster :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/register-ecs-cluster-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/register-ecs-cluster-result))

(clojure.core/defn update-layer ([update-layer-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-update-layer-request update-layer-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/update-layer-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateLayer", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef update-layer :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/update-layer-request) :ret clojure.core/true?)

(clojure.core/defn describe-service-errors ([] (describe-service-errors {})) ([describe-service-errors-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-describe-service-errors-request describe-service-errors-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/describe-service-errors-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/describe-service-errors-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeServiceErrors", :http.request.configuration/output-deser-fn response-describe-service-errors-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef describe-service-errors :args (clojure.spec.alpha/? :portkey.aws.opsworks.-2013-02-18/describe-service-errors-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/describe-service-errors-result))

(clojure.core/defn clone-stack ([clone-stack-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-clone-stack-request clone-stack-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/clone-stack-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/clone-stack-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CloneStack", :http.request.configuration/output-deser-fn response-clone-stack-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef clone-stack :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/clone-stack-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/clone-stack-result))

(clojure.core/defn update-elastic-ip ([update-elastic-ip-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-update-elastic-ip-request update-elastic-ip-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/update-elastic-ip-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateElasticIp", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef update-elastic-ip :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/update-elastic-ip-request) :ret clojure.core/true?)

(clojure.core/defn delete-instance ([delete-instance-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-delete-instance-request delete-instance-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/delete-instance-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteInstance", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef delete-instance :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/delete-instance-request) :ret clojure.core/true?)

(clojure.core/defn get-hostname-suggestion ([get-hostname-suggestion-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-get-hostname-suggestion-request get-hostname-suggestion-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/get-hostname-suggestion-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/get-hostname-suggestion-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "GetHostnameSuggestion", :http.request.configuration/output-deser-fn response-get-hostname-suggestion-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef get-hostname-suggestion :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/get-hostname-suggestion-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/get-hostname-suggestion-result))

(clojure.core/defn detach-elastic-load-balancer ([detach-elastic-load-balancer-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-detach-elastic-load-balancer-request detach-elastic-load-balancer-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/detach-elastic-load-balancer-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DetachElasticLoadBalancer", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef detach-elastic-load-balancer :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/detach-elastic-load-balancer-request) :ret clojure.core/true?)

(clojure.core/defn describe-raid-arrays ([] (describe-raid-arrays {})) ([describe-raid-arrays-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-describe-raid-arrays-request describe-raid-arrays-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/describe-raid-arrays-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/describe-raid-arrays-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DescribeRaidArrays", :http.request.configuration/output-deser-fn response-describe-raid-arrays-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef describe-raid-arrays :args (clojure.spec.alpha/? :portkey.aws.opsworks.-2013-02-18/describe-raid-arrays-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/describe-raid-arrays-result))

(clojure.core/defn deregister-rds-db-instance ([deregister-rds-db-instance-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-deregister-rds-db-instance-request deregister-rds-db-instance-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/deregister-rds-db-instance-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeregisterRdsDbInstance", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef deregister-rds-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/deregister-rds-db-instance-request) :ret clojure.core/true?)

(clojure.core/defn attach-elastic-load-balancer ([attach-elastic-load-balancer-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-attach-elastic-load-balancer-request attach-elastic-load-balancer-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/attach-elastic-load-balancer-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AttachElasticLoadBalancer", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__1468877__auto__] {}), :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef attach-elastic-load-balancer :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/attach-elastic-load-balancer-request) :ret clojure.core/true?)

(clojure.core/defn create-instance ([create-instance-requestinput] (clojure.core/let [request-function-result__1468878__auto__ (req-create-instance-request create-instance-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__1468878__auto__ {:http.request.configuration/endpoints portkey.aws.opsworks.-2013-02-18/endpoints, :http.request.configuration/target-prefix "OpsWorks_20130218", :http.request.spec/output-spec :portkey.aws.opsworks.-2013-02-18/create-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-amz-json-1.1"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2013-02-18", :http.request.configuration/service-id "OpsWorks", :http.request.spec/input-spec :portkey.aws.opsworks.-2013-02-18/create-instance-request, :http.request.configuration/protocol "json", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateInstance", :http.request.configuration/output-deser-fn response-create-instance-result, :http.request.spec/error-spec {"ValidationException" :portkey.aws.opsworks.-2013-02-18/validation-exception, "ResourceNotFoundException" :portkey.aws.opsworks.-2013-02-18/resource-not-found-exception}})))))
(clojure.spec.alpha/fdef create-instance :args (clojure.spec.alpha/tuple :portkey.aws.opsworks.-2013-02-18/create-instance-request) :ret (clojure.spec.alpha/and :portkey.aws.opsworks.-2013-02-18/create-instance-result))
