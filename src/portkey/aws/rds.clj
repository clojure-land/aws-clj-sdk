(ns portkey.aws.rds (:require [portkey.aws]))

(def
 endpoints
 '{"ap-northeast-1"
   {:credential-scope {:service "rds", :region "ap-northeast-1"},
    :ssl-common-name "rds.ap-northeast-1.amazonaws.com",
    :endpoint "https://rds.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "rds", :region "eu-west-1"},
    :ssl-common-name "rds.eu-west-1.amazonaws.com",
    :endpoint "https://rds.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "rds", :region "us-east-2"},
    :ssl-common-name "rds.us-east-2.amazonaws.com",
    :endpoint "https://rds.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope {:service "rds", :region "ap-southeast-2"},
    :ssl-common-name "rds.ap-southeast-2.amazonaws.com",
    :endpoint "https://rds.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "cn-north-1"
   {:credential-scope {:service "rds", :region "cn-north-1"},
    :ssl-common-name "rds.cn-north-1.amazonaws.com.cn",
    :endpoint "https://rds.cn-north-1.amazonaws.com.cn",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "rds", :region "sa-east-1"},
    :ssl-common-name "rds.sa-east-1.amazonaws.com",
    :endpoint "https://rds.sa-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope {:service "rds", :region "ap-southeast-1"},
    :ssl-common-name "rds.ap-southeast-1.amazonaws.com",
    :endpoint "https://rds.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "cn-northwest-1"
   {:credential-scope {:service "rds", :region "cn-northwest-1"},
    :ssl-common-name "rds.cn-northwest-1.amazonaws.com.cn",
    :endpoint "https://rds.cn-northwest-1.amazonaws.com.cn",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope {:service "rds", :region "ap-northeast-2"},
    :ssl-common-name "rds.ap-northeast-2.amazonaws.com",
    :endpoint "https://rds.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-west-3"
   {:credential-scope {:service "rds", :region "eu-west-3"},
    :ssl-common-name "rds.eu-west-3.amazonaws.com",
    :endpoint "https://rds.eu-west-3.amazonaws.com",
    :signature-version :v4},
   "ca-central-1"
   {:credential-scope {:service "rds", :region "ca-central-1"},
    :ssl-common-name "rds.ca-central-1.amazonaws.com",
    :endpoint "https://rds.ca-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "rds", :region "eu-central-1"},
    :ssl-common-name "rds.eu-central-1.amazonaws.com",
    :endpoint "https://rds.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "rds", :region "eu-west-2"},
    :ssl-common-name "rds.eu-west-2.amazonaws.com",
    :endpoint "https://rds.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-gov-west-1"
   {:credential-scope {:service "rds", :region "us-gov-west-1"},
    :ssl-common-name "rds.us-gov-west-1.amazonaws.com",
    :endpoint "https://rds.us-gov-west-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "rds", :region "us-west-2"},
    :ssl-common-name "rds.us-west-2.amazonaws.com",
    :endpoint "https://rds.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "rds", :region "us-east-1"},
    :ssl-common-name "rds.amazonaws.com",
    :endpoint "https://rds.us-east-1.amazonaws.com",
    :signature-version :v4},
   "us-west-1"
   {:credential-scope {:service "rds", :region "us-west-1"},
    :ssl-common-name "rds.us-west-1.amazonaws.com",
    :endpoint "https://rds.us-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-south-1"
   {:credential-scope {:service "rds", :region "ap-south-1"},
    :ssl-common-name "rds.ap-south-1.amazonaws.com",
    :endpoint "https://rds.ap-south-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-subnet-identifier-list ser-filter-value-list ser-parameters-list ser-filter ser-source-ids-list ser-key-list ser-option-names-list ser-source-type ser-tag-list ser-integer ser-string ser-parameter ser-vpc-security-group-id-list ser-tstamp ser-event-categories-list ser-dbsecurity-group-name-list ser-apply-method ser-long ser-cloudwatch-logs-export-configuration ser-log-type-list ser-attribute-value-list ser-tag ser-boolean-optional ser-option-setting ser-option-configuration-list ser-availability-zones ser-option-configuration ser-integer-optional ser-option-settings-list ser-filter-list ser-boolean)

(clojure.core/defn- ser-subnet-identifier-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-filter-value-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-parameters-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-filter [shape-input] (clojure.core/cond-> {} (:name shape-input) (clojure.core/assoc "Filter.Name" (ser-string (:name shape-input))) (:values shape-input) (clojure.core/assoc "Filter.Values" (ser-filter-value-list (:values shape-input)))))
(clojure.core/defn- ser-source-ids-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-key-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-option-names-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-source-type [shape-input] ({:db-cluster-snapshot "db-cluster-snapshot", "db-security-group" "db-security-group", "db-cluster" "db-cluster", :db-snapshot "db-snapshot", :db-cluster "db-cluster", "db-instance" "db-instance", "db-cluster-snapshot" "db-cluster-snapshot", :db-parameter-group "db-parameter-group", "db-parameter-group" "db-parameter-group", "db-snapshot" "db-snapshot", :db-security-group "db-security-group", :db-instance "db-instance"} shape-input))
(clojure.core/defn- ser-tag-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-integer [shape-input] shape-input)
(clojure.core/defn- ser-string [shape-input] shape-input)
(clojure.core/defn- ser-parameter [shape-input] (clojure.core/cond-> {} (:data-type shape-input) (clojure.core/assoc "Parameter.DataType" (ser-string (:data-type shape-input))) (:parameter-name shape-input) (clojure.core/assoc "Parameter.ParameterName" (ser-string (:parameter-name shape-input))) (:source shape-input) (clojure.core/assoc "Parameter.Source" (ser-string (:source shape-input))) (:minimum-engine-version shape-input) (clojure.core/assoc "Parameter.MinimumEngineVersion" (ser-string (:minimum-engine-version shape-input))) (:allowed-values shape-input) (clojure.core/assoc "Parameter.AllowedValues" (ser-string (:allowed-values shape-input))) (:apply-type shape-input) (clojure.core/assoc "Parameter.ApplyType" (ser-string (:apply-type shape-input))) (:description shape-input) (clojure.core/assoc "Parameter.Description" (ser-string (:description shape-input))) (:apply-method shape-input) (clojure.core/assoc "Parameter.ApplyMethod" (ser-apply-method (:apply-method shape-input))) (:is-modifiable shape-input) (clojure.core/assoc "Parameter.IsModifiable" (ser-boolean (:is-modifiable shape-input))) (:parameter-value shape-input) (clojure.core/assoc "Parameter.ParameterValue" (ser-string (:parameter-value shape-input)))))
(clojure.core/defn- ser-vpc-security-group-id-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-tstamp [shape-input] shape-input)
(clojure.core/defn- ser-event-categories-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-dbsecurity-group-name-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-apply-method [shape-input] ({"immediate" "immediate", :immediate "immediate", "pending-reboot" "pending-reboot", :pending-reboot "pending-reboot"} shape-input))
(clojure.core/defn- ser-long [shape-input] shape-input)
(clojure.core/defn- ser-cloudwatch-logs-export-configuration [shape-input] (clojure.core/cond-> {} (:enable-log-types shape-input) (clojure.core/assoc "CloudwatchLogsExportConfiguration.EnableLogTypes" (ser-log-type-list (:enable-log-types shape-input))) (:disable-log-types shape-input) (clojure.core/assoc "CloudwatchLogsExportConfiguration.DisableLogTypes" (ser-log-type-list (:disable-log-types shape-input)))))
(clojure.core/defn- ser-log-type-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-attribute-value-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-tag [shape-input] (clojure.core/cond-> {} (:key shape-input) (clojure.core/assoc "Tag.Key" (ser-string (:key shape-input))) (:value shape-input) (clojure.core/assoc "Tag.Value" (ser-string (:value shape-input)))))
(clojure.core/defn- ser-boolean-optional [shape-input] shape-input)
(clojure.core/defn- ser-option-setting [shape-input] (clojure.core/cond-> {} (:data-type shape-input) (clojure.core/assoc "OptionSetting.DataType" (ser-string (:data-type shape-input))) (:allowed-values shape-input) (clojure.core/assoc "OptionSetting.AllowedValues" (ser-string (:allowed-values shape-input))) (:value shape-input) (clojure.core/assoc "OptionSetting.Value" (ser-string (:value shape-input))) (:apply-type shape-input) (clojure.core/assoc "OptionSetting.ApplyType" (ser-string (:apply-type shape-input))) (:description shape-input) (clojure.core/assoc "OptionSetting.Description" (ser-string (:description shape-input))) (:default-value shape-input) (clojure.core/assoc "OptionSetting.DefaultValue" (ser-string (:default-value shape-input))) (:is-modifiable shape-input) (clojure.core/assoc "OptionSetting.IsModifiable" (ser-boolean (:is-modifiable shape-input))) (:is-collection shape-input) (clojure.core/assoc "OptionSetting.IsCollection" (ser-boolean (:is-collection shape-input))) (:name shape-input) (clojure.core/assoc "OptionSetting.Name" (ser-string (:name shape-input)))))
(clojure.core/defn- ser-option-configuration-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-availability-zones [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-option-configuration [shape-input] (clojure.core/cond-> {} (:option-name shape-input) (clojure.core/assoc "OptionConfiguration.OptionName" (ser-string (:option-name shape-input))) (:port shape-input) (clojure.core/assoc "OptionConfiguration.Port" (ser-integer-optional (:port shape-input))) (:option-version shape-input) (clojure.core/assoc "OptionConfiguration.OptionVersion" (ser-string (:option-version shape-input))) (:dbsecurity-group-memberships shape-input) (clojure.core/assoc "OptionConfiguration.DBSecurityGroupMemberships" (ser-dbsecurity-group-name-list (:dbsecurity-group-memberships shape-input))) (:vpc-security-group-memberships shape-input) (clojure.core/assoc "OptionConfiguration.VpcSecurityGroupMemberships" (ser-vpc-security-group-id-list (:vpc-security-group-memberships shape-input))) (:option-settings shape-input) (clojure.core/assoc "OptionConfiguration.OptionSettings" (ser-option-settings-list (:option-settings shape-input)))))
(clojure.core/defn- ser-integer-optional [shape-input] shape-input)
(clojure.core/defn- ser-option-settings-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-filter-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-boolean [shape-input] shape-input)

(clojure.core/defn req<-add-source-identifier-to-subscription-message [action-name62603 input62602] {:body {"SubscriptionName" (ser-string (input62602 :subscription-name)), "SourceIdentifier" (ser-string (input62602 :source-identifier)), "Version" "2014-10-31", "Action" action-name62603}})
(clojure.core/defn req<-deletedbsnapshot-message [action-name62605 input62604] {:body {"DBSnapshotIdentifier" (ser-string (input62604 :dbsnapshot-identifier)), "Version" "2014-10-31", "Action" action-name62605}})
(clojure.core/defn req<-deletedbsubnet-group-message [action-name62607 input62606] {:body {"DBSubnetGroupName" (ser-string (input62606 :dbsubnet-group-name)), "Version" "2014-10-31", "Action" action-name62607}})
(clojure.core/defn req<-describe-orderabledbinstance-options-message [action-name62609 input62608] (clojure.core/let [input62610 {:body {"Engine" (ser-string (input62608 :engine)), "Version" "2014-10-31", "Action" action-name62609}}] (clojure.core/cond-> input62610 (clojure.core/contains? input62608 :engine-version) (clojure.core/assoc-in [:body "EngineVersion"] (ser-string (input62608 :engine-version))) (clojure.core/contains? input62608 :dbinstance-class) (clojure.core/assoc-in [:body "DBInstanceClass"] (ser-string (input62608 :dbinstance-class))) (clojure.core/contains? input62608 :license-model) (clojure.core/assoc-in [:body "LicenseModel"] (ser-string (input62608 :license-model))) (clojure.core/contains? input62608 :vpc) (clojure.core/assoc-in [:body "Vpc"] (ser-boolean-optional (input62608 :vpc))) (clojure.core/contains? input62608 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62608 :filters))) (clojure.core/contains? input62608 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input62608 :max-records))) (clojure.core/contains? input62608 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62608 :marker))))))
(clojure.core/defn req<-copydbcluster-parameter-group-message [action-name62612 input62611] (clojure.core/let [input62613 {:body {"SourceDBClusterParameterGroupIdentifier" (ser-string (input62611 :sourcedbcluster-parameter-group-identifier)), "TargetDBClusterParameterGroupIdentifier" (ser-string (input62611 :targetdbcluster-parameter-group-identifier)), "TargetDBClusterParameterGroupDescription" (ser-string (input62611 :targetdbcluster-parameter-group-description)), "Version" "2014-10-31", "Action" action-name62612}}] (clojure.core/cond-> input62613 (clojure.core/contains? input62611 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input62611 :tags))))))
(clojure.core/defn req<-revokedbsecurity-group-ingress-message [action-name62615 input62614] (clojure.core/let [input62616 {:body {"DBSecurityGroupName" (ser-string (input62614 :dbsecurity-group-name)), "Version" "2014-10-31", "Action" action-name62615}}] (clojure.core/cond-> input62616 (clojure.core/contains? input62614 :cidrip) (clojure.core/assoc-in [:body "CIDRIP"] (ser-string (input62614 :cidrip))) (clojure.core/contains? input62614 :ec2-security-group-name) (clojure.core/assoc-in [:body "EC2SecurityGroupName"] (ser-string (input62614 :ec2-security-group-name))) (clojure.core/contains? input62614 :ec2-security-group-id) (clojure.core/assoc-in [:body "EC2SecurityGroupId"] (ser-string (input62614 :ec2-security-group-id))) (clojure.core/contains? input62614 :ec2-security-group-owner-id) (clojure.core/assoc-in [:body "EC2SecurityGroupOwnerId"] (ser-string (input62614 :ec2-security-group-owner-id))))))
(clojure.core/defn req<-authorizedbsecurity-group-ingress-message [action-name62618 input62617] (clojure.core/let [input62619 {:body {"DBSecurityGroupName" (ser-string (input62617 :dbsecurity-group-name)), "Version" "2014-10-31", "Action" action-name62618}}] (clojure.core/cond-> input62619 (clojure.core/contains? input62617 :cidrip) (clojure.core/assoc-in [:body "CIDRIP"] (ser-string (input62617 :cidrip))) (clojure.core/contains? input62617 :ec2-security-group-name) (clojure.core/assoc-in [:body "EC2SecurityGroupName"] (ser-string (input62617 :ec2-security-group-name))) (clojure.core/contains? input62617 :ec2-security-group-id) (clojure.core/assoc-in [:body "EC2SecurityGroupId"] (ser-string (input62617 :ec2-security-group-id))) (clojure.core/contains? input62617 :ec2-security-group-owner-id) (clojure.core/assoc-in [:body "EC2SecurityGroupOwnerId"] (ser-string (input62617 :ec2-security-group-owner-id))))))
(clojure.core/defn req<-modifydbsubnet-group-message [action-name62621 input62620] (clojure.core/let [input62622 {:body {"DBSubnetGroupName" (ser-string (input62620 :dbsubnet-group-name)), "SubnetIds" (ser-subnet-identifier-list (input62620 :subnet-ids)), "Version" "2014-10-31", "Action" action-name62621}}] (clojure.core/cond-> input62622 (clojure.core/contains? input62620 :dbsubnet-group-description) (clojure.core/assoc-in [:body "DBSubnetGroupDescription"] (ser-string (input62620 :dbsubnet-group-description))))))
(clojure.core/defn req<-modifydbsnapshot-message [action-name62624 input62623] (clojure.core/let [input62625 {:body {"DBSnapshotIdentifier" (ser-string (input62623 :dbsnapshot-identifier)), "Version" "2014-10-31", "Action" action-name62624}}] (clojure.core/cond-> input62625 (clojure.core/contains? input62623 :engine-version) (clojure.core/assoc-in [:body "EngineVersion"] (ser-string (input62623 :engine-version))) (clojure.core/contains? input62623 :option-group-name) (clojure.core/assoc-in [:body "OptionGroupName"] (ser-string (input62623 :option-group-name))))))
(clojure.core/defn req<-restoredbinstance-to-point-in-time-message [action-name62627 input62626] (clojure.core/let [input62628 {:body {"SourceDBInstanceIdentifier" (ser-string (input62626 :sourcedbinstance-identifier)), "TargetDBInstanceIdentifier" (ser-string (input62626 :targetdbinstance-identifier)), "Version" "2014-10-31", "Action" action-name62627}}] (clojure.core/cond-> input62628 (clojure.core/contains? input62626 :option-group-name) (clojure.core/assoc-in [:body "OptionGroupName"] (ser-string (input62626 :option-group-name))) (clojure.core/contains? input62626 :enableiamdatabase-authentication) (clojure.core/assoc-in [:body "EnableIAMDatabaseAuthentication"] (ser-boolean-optional (input62626 :enableiamdatabase-authentication))) (clojure.core/contains? input62626 :publicly-accessible) (clojure.core/assoc-in [:body "PubliclyAccessible"] (ser-boolean-optional (input62626 :publicly-accessible))) (clojure.core/contains? input62626 :domainiamrole-name) (clojure.core/assoc-in [:body "DomainIAMRoleName"] (ser-string (input62626 :domainiamrole-name))) (clojure.core/contains? input62626 :copy-tags-to-snapshot) (clojure.core/assoc-in [:body "CopyTagsToSnapshot"] (ser-boolean-optional (input62626 :copy-tags-to-snapshot))) (clojure.core/contains? input62626 :enable-cloudwatch-logs-exports) (clojure.core/assoc-in [:body "EnableCloudwatchLogsExports"] (ser-log-type-list (input62626 :enable-cloudwatch-logs-exports))) (clojure.core/contains? input62626 :auto-minor-version-upgrade) (clojure.core/assoc-in [:body "AutoMinorVersionUpgrade"] (ser-boolean-optional (input62626 :auto-minor-version-upgrade))) (clojure.core/contains? input62626 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input62626 :tags))) (clojure.core/contains? input62626 :dbname) (clojure.core/assoc-in [:body "DBName"] (ser-string (input62626 :dbname))) (clojure.core/contains? input62626 :availability-zone) (clojure.core/assoc-in [:body "AvailabilityZone"] (ser-string (input62626 :availability-zone))) (clojure.core/contains? input62626 :restore-time) (clojure.core/assoc-in [:body "RestoreTime"] (ser-tstamp (input62626 :restore-time))) (clojure.core/contains? input62626 :license-model) (clojure.core/assoc-in [:body "LicenseModel"] (ser-string (input62626 :license-model))) (clojure.core/contains? input62626 :domain) (clojure.core/assoc-in [:body "Domain"] (ser-string (input62626 :domain))) (clojure.core/contains? input62626 :dbsubnet-group-name) (clojure.core/assoc-in [:body "DBSubnetGroupName"] (ser-string (input62626 :dbsubnet-group-name))) (clojure.core/contains? input62626 :port) (clojure.core/assoc-in [:body "Port"] (ser-integer-optional (input62626 :port))) (clojure.core/contains? input62626 :iops) (clojure.core/assoc-in [:body "Iops"] (ser-integer-optional (input62626 :iops))) (clojure.core/contains? input62626 :tde-credential-password) (clojure.core/assoc-in [:body "TdeCredentialPassword"] (ser-string (input62626 :tde-credential-password))) (clojure.core/contains? input62626 :storage-type) (clojure.core/assoc-in [:body "StorageType"] (ser-string (input62626 :storage-type))) (clojure.core/contains? input62626 :dbinstance-class) (clojure.core/assoc-in [:body "DBInstanceClass"] (ser-string (input62626 :dbinstance-class))) (clojure.core/contains? input62626 :engine) (clojure.core/assoc-in [:body "Engine"] (ser-string (input62626 :engine))) (clojure.core/contains? input62626 :tde-credential-arn) (clojure.core/assoc-in [:body "TdeCredentialArn"] (ser-string (input62626 :tde-credential-arn))) (clojure.core/contains? input62626 :multiaz) (clojure.core/assoc-in [:body "MultiAZ"] (ser-boolean-optional (input62626 :multiaz))) (clojure.core/contains? input62626 :use-latest-restorable-time) (clojure.core/assoc-in [:body "UseLatestRestorableTime"] (ser-boolean (input62626 :use-latest-restorable-time))))))
(clojure.core/defn req<-restoredbcluster-to-point-in-time-message [action-name62630 input62629] (clojure.core/let [input62631 {:body {"SourceDBClusterIdentifier" (ser-string (input62629 :sourcedbcluster-identifier)), "DBClusterIdentifier" (ser-string (input62629 :dbcluster-identifier)), "Version" "2014-10-31", "Action" action-name62630}}] (clojure.core/cond-> input62631 (clojure.core/contains? input62629 :option-group-name) (clojure.core/assoc-in [:body "OptionGroupName"] (ser-string (input62629 :option-group-name))) (clojure.core/contains? input62629 :enableiamdatabase-authentication) (clojure.core/assoc-in [:body "EnableIAMDatabaseAuthentication"] (ser-boolean-optional (input62629 :enableiamdatabase-authentication))) (clojure.core/contains? input62629 :restore-to-time) (clojure.core/assoc-in [:body "RestoreToTime"] (ser-tstamp (input62629 :restore-to-time))) (clojure.core/contains? input62629 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input62629 :tags))) (clojure.core/contains? input62629 :vpc-security-group-ids) (clojure.core/assoc-in [:body "VpcSecurityGroupIds"] (ser-vpc-security-group-id-list (input62629 :vpc-security-group-ids))) (clojure.core/contains? input62629 :dbsubnet-group-name) (clojure.core/assoc-in [:body "DBSubnetGroupName"] (ser-string (input62629 :dbsubnet-group-name))) (clojure.core/contains? input62629 :port) (clojure.core/assoc-in [:body "Port"] (ser-integer-optional (input62629 :port))) (clojure.core/contains? input62629 :kms-key-id) (clojure.core/assoc-in [:body "KmsKeyId"] (ser-string (input62629 :kms-key-id))) (clojure.core/contains? input62629 :restore-type) (clojure.core/assoc-in [:body "RestoreType"] (ser-string (input62629 :restore-type))) (clojure.core/contains? input62629 :use-latest-restorable-time) (clojure.core/assoc-in [:body "UseLatestRestorableTime"] (ser-boolean (input62629 :use-latest-restorable-time))))))
(clojure.core/defn req<-describe-events-message [action-name62633 input62632] (clojure.core/cond-> {:body {"Version" "2014-10-31", "Action" action-name62633}} (clojure.core/contains? input62632 :end-time) (clojure.core/assoc-in [:body "EndTime"] (ser-tstamp (input62632 :end-time))) (clojure.core/contains? input62632 :start-time) (clojure.core/assoc-in [:body "StartTime"] (ser-tstamp (input62632 :start-time))) (clojure.core/contains? input62632 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input62632 :max-records))) (clojure.core/contains? input62632 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62632 :marker))) (clojure.core/contains? input62632 :source-type) (clojure.core/assoc-in [:body "SourceType"] (ser-source-type (input62632 :source-type))) (clojure.core/contains? input62632 :duration) (clojure.core/assoc-in [:body "Duration"] (ser-integer-optional (input62632 :duration))) (clojure.core/contains? input62632 :event-categories) (clojure.core/assoc-in [:body "EventCategories"] (ser-event-categories-list (input62632 :event-categories))) (clojure.core/contains? input62632 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62632 :filters))) (clojure.core/contains? input62632 :source-identifier) (clojure.core/assoc-in [:body "SourceIdentifier"] (ser-string (input62632 :source-identifier)))))
(clojure.core/defn req<-resetdbparameter-group-message [action-name62635 input62634] (clojure.core/let [input62636 {:body {"DBParameterGroupName" (ser-string (input62634 :dbparameter-group-name)), "Version" "2014-10-31", "Action" action-name62635}}] (clojure.core/cond-> input62636 (clojure.core/contains? input62634 :reset-all-parameters) (clojure.core/assoc-in [:body "ResetAllParameters"] (ser-boolean (input62634 :reset-all-parameters))) (clojure.core/contains? input62634 :parameters) (clojure.core/assoc-in [:body "Parameters"] (ser-parameters-list (input62634 :parameters))))))
(clojure.core/defn req<-remove-role-fromdbcluster-message [action-name62638 input62637] {:body {"DBClusterIdentifier" (ser-string (input62637 :dbcluster-identifier)), "RoleArn" (ser-string (input62637 :role-arn)), "Version" "2014-10-31", "Action" action-name62638}})
(clojure.core/defn req<-describe-option-groups-message [action-name62640 input62639] (clojure.core/cond-> {:body {"Version" "2014-10-31", "Action" action-name62640}} (clojure.core/contains? input62639 :option-group-name) (clojure.core/assoc-in [:body "OptionGroupName"] (ser-string (input62639 :option-group-name))) (clojure.core/contains? input62639 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62639 :filters))) (clojure.core/contains? input62639 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62639 :marker))) (clojure.core/contains? input62639 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input62639 :max-records))) (clojure.core/contains? input62639 :engine-name) (clojure.core/assoc-in [:body "EngineName"] (ser-string (input62639 :engine-name))) (clojure.core/contains? input62639 :major-engine-version) (clojure.core/assoc-in [:body "MajorEngineVersion"] (ser-string (input62639 :major-engine-version)))))
(clojure.core/defn req<-deletedbcluster-snapshot-message [action-name62642 input62641] {:body {"DBClusterSnapshotIdentifier" (ser-string (input62641 :dbcluster-snapshot-identifier)), "Version" "2014-10-31", "Action" action-name62642}})
(clojure.core/defn req<-rebootdbinstance-message [action-name62644 input62643] (clojure.core/let [input62645 {:body {"DBInstanceIdentifier" (ser-string (input62643 :dbinstance-identifier)), "Version" "2014-10-31", "Action" action-name62644}}] (clojure.core/cond-> input62645 (clojure.core/contains? input62643 :force-failover) (clojure.core/assoc-in [:body "ForceFailover"] (ser-boolean-optional (input62643 :force-failover))))))
(clojure.core/defn req<-createdbcluster-parameter-group-message [action-name62647 input62646] (clojure.core/let [input62648 {:body {"DBClusterParameterGroupName" (ser-string (input62646 :dbcluster-parameter-group-name)), "DBParameterGroupFamily" (ser-string (input62646 :dbparameter-group-family)), "Description" (ser-string (input62646 :description)), "Version" "2014-10-31", "Action" action-name62647}}] (clojure.core/cond-> input62648 (clojure.core/contains? input62646 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input62646 :tags))))))
(clojure.core/defn req<-deletedbsecurity-group-message [action-name62650 input62649] {:body {"DBSecurityGroupName" (ser-string (input62649 :dbsecurity-group-name)), "Version" "2014-10-31", "Action" action-name62650}})
(clojure.core/defn req<-copydbparameter-group-message [action-name62652 input62651] (clojure.core/let [input62653 {:body {"SourceDBParameterGroupIdentifier" (ser-string (input62651 :sourcedbparameter-group-identifier)), "TargetDBParameterGroupIdentifier" (ser-string (input62651 :targetdbparameter-group-identifier)), "TargetDBParameterGroupDescription" (ser-string (input62651 :targetdbparameter-group-description)), "Version" "2014-10-31", "Action" action-name62652}}] (clojure.core/cond-> input62653 (clojure.core/contains? input62651 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input62651 :tags))))))
(clojure.core/defn req<-list-tags-for-resource-message [action-name62655 input62654] (clojure.core/let [input62656 {:body {"ResourceName" (ser-string (input62654 :resource-name)), "Version" "2014-10-31", "Action" action-name62655}}] (clojure.core/cond-> input62656 (clojure.core/contains? input62654 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62654 :filters))))))
(clojure.core/defn req<-describe-certificates-message [action-name62658 input62657] (clojure.core/cond-> {:body {"Version" "2014-10-31", "Action" action-name62658}} (clojure.core/contains? input62657 :certificate-identifier) (clojure.core/assoc-in [:body "CertificateIdentifier"] (ser-string (input62657 :certificate-identifier))) (clojure.core/contains? input62657 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62657 :filters))) (clojure.core/contains? input62657 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input62657 :max-records))) (clojure.core/contains? input62657 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62657 :marker)))))
(clojure.core/defn req<-stopdbinstance-message [action-name62660 input62659] (clojure.core/let [input62661 {:body {"DBInstanceIdentifier" (ser-string (input62659 :dbinstance-identifier)), "Version" "2014-10-31", "Action" action-name62660}}] (clojure.core/cond-> input62661 (clojure.core/contains? input62659 :dbsnapshot-identifier) (clojure.core/assoc-in [:body "DBSnapshotIdentifier"] (ser-string (input62659 :dbsnapshot-identifier))))))
(clojure.core/defn req<-describe-engine-default-parameters-message [action-name62663 input62662] (clojure.core/let [input62664 {:body {"DBParameterGroupFamily" (ser-string (input62662 :dbparameter-group-family)), "Version" "2014-10-31", "Action" action-name62663}}] (clojure.core/cond-> input62664 (clojure.core/contains? input62662 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62662 :filters))) (clojure.core/contains? input62662 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input62662 :max-records))) (clojure.core/contains? input62662 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62662 :marker))))))
(clojure.core/defn req<-deletedbinstance-message [action-name62666 input62665] (clojure.core/let [input62667 {:body {"DBInstanceIdentifier" (ser-string (input62665 :dbinstance-identifier)), "Version" "2014-10-31", "Action" action-name62666}}] (clojure.core/cond-> input62667 (clojure.core/contains? input62665 :skip-final-snapshot) (clojure.core/assoc-in [:body "SkipFinalSnapshot"] (ser-boolean (input62665 :skip-final-snapshot))) (clojure.core/contains? input62665 :finaldbsnapshot-identifier) (clojure.core/assoc-in [:body "FinalDBSnapshotIdentifier"] (ser-string (input62665 :finaldbsnapshot-identifier))))))
(clojure.core/defn req<-describedbsubnet-groups-message [action-name62669 input62668] (clojure.core/cond-> {:body {"Version" "2014-10-31", "Action" action-name62669}} (clojure.core/contains? input62668 :dbsubnet-group-name) (clojure.core/assoc-in [:body "DBSubnetGroupName"] (ser-string (input62668 :dbsubnet-group-name))) (clojure.core/contains? input62668 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62668 :filters))) (clojure.core/contains? input62668 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input62668 :max-records))) (clojure.core/contains? input62668 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62668 :marker)))))
(clojure.core/defn req<-describedbclusters-message [action-name62671 input62670] (clojure.core/cond-> {:body {"Version" "2014-10-31", "Action" action-name62671}} (clojure.core/contains? input62670 :dbcluster-identifier) (clojure.core/assoc-in [:body "DBClusterIdentifier"] (ser-string (input62670 :dbcluster-identifier))) (clojure.core/contains? input62670 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62670 :filters))) (clojure.core/contains? input62670 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input62670 :max-records))) (clojure.core/contains? input62670 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62670 :marker)))))
(clojure.core/defn req<-createdbcluster-message [action-name62673 input62672] (clojure.core/let [input62674 {:body {"Engine" (ser-string (input62672 :engine)), "DBClusterIdentifier" (ser-string (input62672 :dbcluster-identifier)), "Version" "2014-10-31", "Action" action-name62673}}] (clojure.core/cond-> input62674 (clojure.core/contains? input62672 :backup-retention-period) (clojure.core/assoc-in [:body "BackupRetentionPeriod"] (ser-integer-optional (input62672 :backup-retention-period))) (clojure.core/contains? input62672 :option-group-name) (clojure.core/assoc-in [:body "OptionGroupName"] (ser-string (input62672 :option-group-name))) (clojure.core/contains? input62672 :replication-source-identifier) (clojure.core/assoc-in [:body "ReplicationSourceIdentifier"] (ser-string (input62672 :replication-source-identifier))) (clojure.core/contains? input62672 :character-set-name) (clojure.core/assoc-in [:body "CharacterSetName"] (ser-string (input62672 :character-set-name))) (clojure.core/contains? input62672 :enableiamdatabase-authentication) (clojure.core/assoc-in [:body "EnableIAMDatabaseAuthentication"] (ser-boolean-optional (input62672 :enableiamdatabase-authentication))) (clojure.core/contains? input62672 :pre-signed-url) (clojure.core/assoc-in [:body "PreSignedUrl"] (ser-string (input62672 :pre-signed-url))) (clojure.core/contains? input62672 :database-name) (clojure.core/assoc-in [:body "DatabaseName"] (ser-string (input62672 :database-name))) (clojure.core/contains? input62672 :preferred-maintenance-window) (clojure.core/assoc-in [:body "PreferredMaintenanceWindow"] (ser-string (input62672 :preferred-maintenance-window))) (clojure.core/contains? input62672 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input62672 :tags))) (clojure.core/contains? input62672 :vpc-security-group-ids) (clojure.core/assoc-in [:body "VpcSecurityGroupIds"] (ser-vpc-security-group-id-list (input62672 :vpc-security-group-ids))) (clojure.core/contains? input62672 :dbcluster-parameter-group-name) (clojure.core/assoc-in [:body "DBClusterParameterGroupName"] (ser-string (input62672 :dbcluster-parameter-group-name))) (clojure.core/contains? input62672 :master-user-password) (clojure.core/assoc-in [:body "MasterUserPassword"] (ser-string (input62672 :master-user-password))) (clojure.core/contains? input62672 :master-username) (clojure.core/assoc-in [:body "MasterUsername"] (ser-string (input62672 :master-username))) (clojure.core/contains? input62672 :engine-version) (clojure.core/assoc-in [:body "EngineVersion"] (ser-string (input62672 :engine-version))) (clojure.core/contains? input62672 :storage-encrypted) (clojure.core/assoc-in [:body "StorageEncrypted"] (ser-boolean-optional (input62672 :storage-encrypted))) (clojure.core/contains? input62672 :dbsubnet-group-name) (clojure.core/assoc-in [:body "DBSubnetGroupName"] (ser-string (input62672 :dbsubnet-group-name))) (clojure.core/contains? input62672 :port) (clojure.core/assoc-in [:body "Port"] (ser-integer-optional (input62672 :port))) (clojure.core/contains? input62672 :kms-key-id) (clojure.core/assoc-in [:body "KmsKeyId"] (ser-string (input62672 :kms-key-id))) (clojure.core/contains? input62672 :availability-zones) (clojure.core/assoc-in [:body "AvailabilityZones"] (ser-availability-zones (input62672 :availability-zones))) (clojure.core/contains? input62672 :preferred-backup-window) (clojure.core/assoc-in [:body "PreferredBackupWindow"] (ser-string (input62672 :preferred-backup-window))))))
(clojure.core/defn req<-failoverdbcluster-message [action-name62676 input62675] (clojure.core/cond-> {:body {"Version" "2014-10-31", "Action" action-name62676}} (clojure.core/contains? input62675 :dbcluster-identifier) (clojure.core/assoc-in [:body "DBClusterIdentifier"] (ser-string (input62675 :dbcluster-identifier))) (clojure.core/contains? input62675 :targetdbinstance-identifier) (clojure.core/assoc-in [:body "TargetDBInstanceIdentifier"] (ser-string (input62675 :targetdbinstance-identifier)))))
(clojure.core/defn req<-resetdbcluster-parameter-group-message [action-name62678 input62677] (clojure.core/let [input62679 {:body {"DBClusterParameterGroupName" (ser-string (input62677 :dbcluster-parameter-group-name)), "Version" "2014-10-31", "Action" action-name62678}}] (clojure.core/cond-> input62679 (clojure.core/contains? input62677 :reset-all-parameters) (clojure.core/assoc-in [:body "ResetAllParameters"] (ser-boolean (input62677 :reset-all-parameters))) (clojure.core/contains? input62677 :parameters) (clojure.core/assoc-in [:body "Parameters"] (ser-parameters-list (input62677 :parameters))))))
(clojure.core/defn req<-createdbinstance-message [action-name62681 input62680] (clojure.core/let [input62682 {:body {"DBInstanceIdentifier" (ser-string (input62680 :dbinstance-identifier)), "DBInstanceClass" (ser-string (input62680 :dbinstance-class)), "Engine" (ser-string (input62680 :engine)), "Version" "2014-10-31", "Action" action-name62681}}] (clojure.core/cond-> input62682 (clojure.core/contains? input62680 :backup-retention-period) (clojure.core/assoc-in [:body "BackupRetentionPeriod"] (ser-integer-optional (input62680 :backup-retention-period))) (clojure.core/contains? input62680 :option-group-name) (clojure.core/assoc-in [:body "OptionGroupName"] (ser-string (input62680 :option-group-name))) (clojure.core/contains? input62680 :dbsecurity-groups) (clojure.core/assoc-in [:body "DBSecurityGroups"] (ser-dbsecurity-group-name-list (input62680 :dbsecurity-groups))) (clojure.core/contains? input62680 :promotion-tier) (clojure.core/assoc-in [:body "PromotionTier"] (ser-integer-optional (input62680 :promotion-tier))) (clojure.core/contains? input62680 :character-set-name) (clojure.core/assoc-in [:body "CharacterSetName"] (ser-string (input62680 :character-set-name))) (clojure.core/contains? input62680 :enableiamdatabase-authentication) (clojure.core/assoc-in [:body "EnableIAMDatabaseAuthentication"] (ser-boolean-optional (input62680 :enableiamdatabase-authentication))) (clojure.core/contains? input62680 :publicly-accessible) (clojure.core/assoc-in [:body "PubliclyAccessible"] (ser-boolean-optional (input62680 :publicly-accessible))) (clojure.core/contains? input62680 :domainiamrole-name) (clojure.core/assoc-in [:body "DomainIAMRoleName"] (ser-string (input62680 :domainiamrole-name))) (clojure.core/contains? input62680 :preferred-maintenance-window) (clojure.core/assoc-in [:body "PreferredMaintenanceWindow"] (ser-string (input62680 :preferred-maintenance-window))) (clojure.core/contains? input62680 :copy-tags-to-snapshot) (clojure.core/assoc-in [:body "CopyTagsToSnapshot"] (ser-boolean-optional (input62680 :copy-tags-to-snapshot))) (clojure.core/contains? input62680 :enable-cloudwatch-logs-exports) (clojure.core/assoc-in [:body "EnableCloudwatchLogsExports"] (ser-log-type-list (input62680 :enable-cloudwatch-logs-exports))) (clojure.core/contains? input62680 :auto-minor-version-upgrade) (clojure.core/assoc-in [:body "AutoMinorVersionUpgrade"] (ser-boolean-optional (input62680 :auto-minor-version-upgrade))) (clojure.core/contains? input62680 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input62680 :tags))) (clojure.core/contains? input62680 :dbname) (clojure.core/assoc-in [:body "DBName"] (ser-string (input62680 :dbname))) (clojure.core/contains? input62680 :vpc-security-group-ids) (clojure.core/assoc-in [:body "VpcSecurityGroupIds"] (ser-vpc-security-group-id-list (input62680 :vpc-security-group-ids))) (clojure.core/contains? input62680 :availability-zone) (clojure.core/assoc-in [:body "AvailabilityZone"] (ser-string (input62680 :availability-zone))) (clojure.core/contains? input62680 :master-user-password) (clojure.core/assoc-in [:body "MasterUserPassword"] (ser-string (input62680 :master-user-password))) (clojure.core/contains? input62680 :license-model) (clojure.core/assoc-in [:body "LicenseModel"] (ser-string (input62680 :license-model))) (clojure.core/contains? input62680 :domain) (clojure.core/assoc-in [:body "Domain"] (ser-string (input62680 :domain))) (clojure.core/contains? input62680 :allocated-storage) (clojure.core/assoc-in [:body "AllocatedStorage"] (ser-integer-optional (input62680 :allocated-storage))) (clojure.core/contains? input62680 :monitoring-interval) (clojure.core/assoc-in [:body "MonitoringInterval"] (ser-integer-optional (input62680 :monitoring-interval))) (clojure.core/contains? input62680 :timezone) (clojure.core/assoc-in [:body "Timezone"] (ser-string (input62680 :timezone))) (clojure.core/contains? input62680 :master-username) (clojure.core/assoc-in [:body "MasterUsername"] (ser-string (input62680 :master-username))) (clojure.core/contains? input62680 :engine-version) (clojure.core/assoc-in [:body "EngineVersion"] (ser-string (input62680 :engine-version))) (clojure.core/contains? input62680 :storage-encrypted) (clojure.core/assoc-in [:body "StorageEncrypted"] (ser-boolean-optional (input62680 :storage-encrypted))) (clojure.core/contains? input62680 :dbsubnet-group-name) (clojure.core/assoc-in [:body "DBSubnetGroupName"] (ser-string (input62680 :dbsubnet-group-name))) (clojure.core/contains? input62680 :port) (clojure.core/assoc-in [:body "Port"] (ser-integer-optional (input62680 :port))) (clojure.core/contains? input62680 :kms-key-id) (clojure.core/assoc-in [:body "KmsKeyId"] (ser-string (input62680 :kms-key-id))) (clojure.core/contains? input62680 :iops) (clojure.core/assoc-in [:body "Iops"] (ser-integer-optional (input62680 :iops))) (clojure.core/contains? input62680 :tde-credential-password) (clojure.core/assoc-in [:body "TdeCredentialPassword"] (ser-string (input62680 :tde-credential-password))) (clojure.core/contains? input62680 :storage-type) (clojure.core/assoc-in [:body "StorageType"] (ser-string (input62680 :storage-type))) (clojure.core/contains? input62680 :dbparameter-group-name) (clojure.core/assoc-in [:body "DBParameterGroupName"] (ser-string (input62680 :dbparameter-group-name))) (clojure.core/contains? input62680 :enable-performance-insights) (clojure.core/assoc-in [:body "EnablePerformanceInsights"] (ser-boolean-optional (input62680 :enable-performance-insights))) (clojure.core/contains? input62680 :monitoring-role-arn) (clojure.core/assoc-in [:body "MonitoringRoleArn"] (ser-string (input62680 :monitoring-role-arn))) (clojure.core/contains? input62680 :tde-credential-arn) (clojure.core/assoc-in [:body "TdeCredentialArn"] (ser-string (input62680 :tde-credential-arn))) (clojure.core/contains? input62680 :multiaz) (clojure.core/assoc-in [:body "MultiAZ"] (ser-boolean-optional (input62680 :multiaz))) (clojure.core/contains? input62680 :performance-insightskmskey-id) (clojure.core/assoc-in [:body "PerformanceInsightsKMSKeyId"] (ser-string (input62680 :performance-insightskmskey-id))) (clojure.core/contains? input62680 :dbcluster-identifier) (clojure.core/assoc-in [:body "DBClusterIdentifier"] (ser-string (input62680 :dbcluster-identifier))) (clojure.core/contains? input62680 :preferred-backup-window) (clojure.core/assoc-in [:body "PreferredBackupWindow"] (ser-string (input62680 :preferred-backup-window))))))
(clojure.core/defn req<-promote-read-replica-message [action-name62684 input62683] (clojure.core/let [input62685 {:body {"DBInstanceIdentifier" (ser-string (input62683 :dbinstance-identifier)), "Version" "2014-10-31", "Action" action-name62684}}] (clojure.core/cond-> input62685 (clojure.core/contains? input62683 :backup-retention-period) (clojure.core/assoc-in [:body "BackupRetentionPeriod"] (ser-integer-optional (input62683 :backup-retention-period))) (clojure.core/contains? input62683 :preferred-backup-window) (clojure.core/assoc-in [:body "PreferredBackupWindow"] (ser-string (input62683 :preferred-backup-window))))))
(clojure.core/defn req<-delete-event-subscription-message [action-name62687 input62686] {:body {"SubscriptionName" (ser-string (input62686 :subscription-name)), "Version" "2014-10-31", "Action" action-name62687}})
(clojure.core/defn req<-apply-pending-maintenance-action-message [action-name62689 input62688] {:body {"ResourceIdentifier" (ser-string (input62688 :resource-identifier)), "ApplyAction" (ser-string (input62688 :apply-action)), "OptInType" (ser-string (input62688 :opt-in-type)), "Version" "2014-10-31", "Action" action-name62689}})
(clojure.core/defn req<-deletedbcluster-message [action-name62691 input62690] (clojure.core/let [input62692 {:body {"DBClusterIdentifier" (ser-string (input62690 :dbcluster-identifier)), "Version" "2014-10-31", "Action" action-name62691}}] (clojure.core/cond-> input62692 (clojure.core/contains? input62690 :skip-final-snapshot) (clojure.core/assoc-in [:body "SkipFinalSnapshot"] (ser-boolean (input62690 :skip-final-snapshot))) (clojure.core/contains? input62690 :finaldbsnapshot-identifier) (clojure.core/assoc-in [:body "FinalDBSnapshotIdentifier"] (ser-string (input62690 :finaldbsnapshot-identifier))))))
(clojure.core/defn req<-restoredbinstance-froms3-message [action-name62694 input62693] (clojure.core/let [input62695 {:body {"S3IngestionRoleArn" (ser-string (input62693 :s3-ingestion-role-arn)), "DBInstanceIdentifier" (ser-string (input62693 :dbinstance-identifier)), "S3BucketName" (ser-string (input62693 :s3-bucket-name)), "SourceEngine" (ser-string (input62693 :source-engine)), "SourceEngineVersion" (ser-string (input62693 :source-engine-version)), "DBInstanceClass" (ser-string (input62693 :dbinstance-class)), "Engine" (ser-string (input62693 :engine)), "Version" "2014-10-31", "Action" action-name62694}}] (clojure.core/cond-> input62695 (clojure.core/contains? input62693 :backup-retention-period) (clojure.core/assoc-in [:body "BackupRetentionPeriod"] (ser-integer-optional (input62693 :backup-retention-period))) (clojure.core/contains? input62693 :option-group-name) (clojure.core/assoc-in [:body "OptionGroupName"] (ser-string (input62693 :option-group-name))) (clojure.core/contains? input62693 :dbsecurity-groups) (clojure.core/assoc-in [:body "DBSecurityGroups"] (ser-dbsecurity-group-name-list (input62693 :dbsecurity-groups))) (clojure.core/contains? input62693 :enableiamdatabase-authentication) (clojure.core/assoc-in [:body "EnableIAMDatabaseAuthentication"] (ser-boolean-optional (input62693 :enableiamdatabase-authentication))) (clojure.core/contains? input62693 :publicly-accessible) (clojure.core/assoc-in [:body "PubliclyAccessible"] (ser-boolean-optional (input62693 :publicly-accessible))) (clojure.core/contains? input62693 :preferred-maintenance-window) (clojure.core/assoc-in [:body "PreferredMaintenanceWindow"] (ser-string (input62693 :preferred-maintenance-window))) (clojure.core/contains? input62693 :copy-tags-to-snapshot) (clojure.core/assoc-in [:body "CopyTagsToSnapshot"] (ser-boolean-optional (input62693 :copy-tags-to-snapshot))) (clojure.core/contains? input62693 :enable-cloudwatch-logs-exports) (clojure.core/assoc-in [:body "EnableCloudwatchLogsExports"] (ser-log-type-list (input62693 :enable-cloudwatch-logs-exports))) (clojure.core/contains? input62693 :auto-minor-version-upgrade) (clojure.core/assoc-in [:body "AutoMinorVersionUpgrade"] (ser-boolean-optional (input62693 :auto-minor-version-upgrade))) (clojure.core/contains? input62693 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input62693 :tags))) (clojure.core/contains? input62693 :dbname) (clojure.core/assoc-in [:body "DBName"] (ser-string (input62693 :dbname))) (clojure.core/contains? input62693 :vpc-security-group-ids) (clojure.core/assoc-in [:body "VpcSecurityGroupIds"] (ser-vpc-security-group-id-list (input62693 :vpc-security-group-ids))) (clojure.core/contains? input62693 :availability-zone) (clojure.core/assoc-in [:body "AvailabilityZone"] (ser-string (input62693 :availability-zone))) (clojure.core/contains? input62693 :master-user-password) (clojure.core/assoc-in [:body "MasterUserPassword"] (ser-string (input62693 :master-user-password))) (clojure.core/contains? input62693 :license-model) (clojure.core/assoc-in [:body "LicenseModel"] (ser-string (input62693 :license-model))) (clojure.core/contains? input62693 :allocated-storage) (clojure.core/assoc-in [:body "AllocatedStorage"] (ser-integer-optional (input62693 :allocated-storage))) (clojure.core/contains? input62693 :monitoring-interval) (clojure.core/assoc-in [:body "MonitoringInterval"] (ser-integer-optional (input62693 :monitoring-interval))) (clojure.core/contains? input62693 :master-username) (clojure.core/assoc-in [:body "MasterUsername"] (ser-string (input62693 :master-username))) (clojure.core/contains? input62693 :engine-version) (clojure.core/assoc-in [:body "EngineVersion"] (ser-string (input62693 :engine-version))) (clojure.core/contains? input62693 :storage-encrypted) (clojure.core/assoc-in [:body "StorageEncrypted"] (ser-boolean-optional (input62693 :storage-encrypted))) (clojure.core/contains? input62693 :dbsubnet-group-name) (clojure.core/assoc-in [:body "DBSubnetGroupName"] (ser-string (input62693 :dbsubnet-group-name))) (clojure.core/contains? input62693 :port) (clojure.core/assoc-in [:body "Port"] (ser-integer-optional (input62693 :port))) (clojure.core/contains? input62693 :kms-key-id) (clojure.core/assoc-in [:body "KmsKeyId"] (ser-string (input62693 :kms-key-id))) (clojure.core/contains? input62693 :iops) (clojure.core/assoc-in [:body "Iops"] (ser-integer-optional (input62693 :iops))) (clojure.core/contains? input62693 :storage-type) (clojure.core/assoc-in [:body "StorageType"] (ser-string (input62693 :storage-type))) (clojure.core/contains? input62693 :s3-prefix) (clojure.core/assoc-in [:body "S3Prefix"] (ser-string (input62693 :s3-prefix))) (clojure.core/contains? input62693 :dbparameter-group-name) (clojure.core/assoc-in [:body "DBParameterGroupName"] (ser-string (input62693 :dbparameter-group-name))) (clojure.core/contains? input62693 :enable-performance-insights) (clojure.core/assoc-in [:body "EnablePerformanceInsights"] (ser-boolean-optional (input62693 :enable-performance-insights))) (clojure.core/contains? input62693 :monitoring-role-arn) (clojure.core/assoc-in [:body "MonitoringRoleArn"] (ser-string (input62693 :monitoring-role-arn))) (clojure.core/contains? input62693 :multiaz) (clojure.core/assoc-in [:body "MultiAZ"] (ser-boolean-optional (input62693 :multiaz))) (clojure.core/contains? input62693 :performance-insightskmskey-id) (clojure.core/assoc-in [:body "PerformanceInsightsKMSKeyId"] (ser-string (input62693 :performance-insightskmskey-id))) (clojure.core/contains? input62693 :preferred-backup-window) (clojure.core/assoc-in [:body "PreferredBackupWindow"] (ser-string (input62693 :preferred-backup-window))))))
(clojure.core/defn req<-describedblog-files-message [action-name62697 input62696] (clojure.core/let [input62698 {:body {"DBInstanceIdentifier" (ser-string (input62696 :dbinstance-identifier)), "Version" "2014-10-31", "Action" action-name62697}}] (clojure.core/cond-> input62698 (clojure.core/contains? input62696 :filename-contains) (clojure.core/assoc-in [:body "FilenameContains"] (ser-string (input62696 :filename-contains))) (clojure.core/contains? input62696 :file-last-written) (clojure.core/assoc-in [:body "FileLastWritten"] (ser-long (input62696 :file-last-written))) (clojure.core/contains? input62696 :file-size) (clojure.core/assoc-in [:body "FileSize"] (ser-long (input62696 :file-size))) (clojure.core/contains? input62696 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62696 :filters))) (clojure.core/contains? input62696 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input62696 :max-records))) (clojure.core/contains? input62696 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62696 :marker))))))
(clojure.core/defn req<-restoredbinstance-fromdbsnapshot-message [action-name62700 input62699] (clojure.core/let [input62701 {:body {"DBInstanceIdentifier" (ser-string (input62699 :dbinstance-identifier)), "DBSnapshotIdentifier" (ser-string (input62699 :dbsnapshot-identifier)), "Version" "2014-10-31", "Action" action-name62700}}] (clojure.core/cond-> input62701 (clojure.core/contains? input62699 :option-group-name) (clojure.core/assoc-in [:body "OptionGroupName"] (ser-string (input62699 :option-group-name))) (clojure.core/contains? input62699 :enableiamdatabase-authentication) (clojure.core/assoc-in [:body "EnableIAMDatabaseAuthentication"] (ser-boolean-optional (input62699 :enableiamdatabase-authentication))) (clojure.core/contains? input62699 :publicly-accessible) (clojure.core/assoc-in [:body "PubliclyAccessible"] (ser-boolean-optional (input62699 :publicly-accessible))) (clojure.core/contains? input62699 :domainiamrole-name) (clojure.core/assoc-in [:body "DomainIAMRoleName"] (ser-string (input62699 :domainiamrole-name))) (clojure.core/contains? input62699 :copy-tags-to-snapshot) (clojure.core/assoc-in [:body "CopyTagsToSnapshot"] (ser-boolean-optional (input62699 :copy-tags-to-snapshot))) (clojure.core/contains? input62699 :enable-cloudwatch-logs-exports) (clojure.core/assoc-in [:body "EnableCloudwatchLogsExports"] (ser-log-type-list (input62699 :enable-cloudwatch-logs-exports))) (clojure.core/contains? input62699 :auto-minor-version-upgrade) (clojure.core/assoc-in [:body "AutoMinorVersionUpgrade"] (ser-boolean-optional (input62699 :auto-minor-version-upgrade))) (clojure.core/contains? input62699 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input62699 :tags))) (clojure.core/contains? input62699 :dbname) (clojure.core/assoc-in [:body "DBName"] (ser-string (input62699 :dbname))) (clojure.core/contains? input62699 :availability-zone) (clojure.core/assoc-in [:body "AvailabilityZone"] (ser-string (input62699 :availability-zone))) (clojure.core/contains? input62699 :license-model) (clojure.core/assoc-in [:body "LicenseModel"] (ser-string (input62699 :license-model))) (clojure.core/contains? input62699 :domain) (clojure.core/assoc-in [:body "Domain"] (ser-string (input62699 :domain))) (clojure.core/contains? input62699 :dbsubnet-group-name) (clojure.core/assoc-in [:body "DBSubnetGroupName"] (ser-string (input62699 :dbsubnet-group-name))) (clojure.core/contains? input62699 :port) (clojure.core/assoc-in [:body "Port"] (ser-integer-optional (input62699 :port))) (clojure.core/contains? input62699 :iops) (clojure.core/assoc-in [:body "Iops"] (ser-integer-optional (input62699 :iops))) (clojure.core/contains? input62699 :tde-credential-password) (clojure.core/assoc-in [:body "TdeCredentialPassword"] (ser-string (input62699 :tde-credential-password))) (clojure.core/contains? input62699 :storage-type) (clojure.core/assoc-in [:body "StorageType"] (ser-string (input62699 :storage-type))) (clojure.core/contains? input62699 :dbinstance-class) (clojure.core/assoc-in [:body "DBInstanceClass"] (ser-string (input62699 :dbinstance-class))) (clojure.core/contains? input62699 :engine) (clojure.core/assoc-in [:body "Engine"] (ser-string (input62699 :engine))) (clojure.core/contains? input62699 :tde-credential-arn) (clojure.core/assoc-in [:body "TdeCredentialArn"] (ser-string (input62699 :tde-credential-arn))) (clojure.core/contains? input62699 :multiaz) (clojure.core/assoc-in [:body "MultiAZ"] (ser-boolean-optional (input62699 :multiaz))))))
(clojure.core/defn req<-describedbsnapshots-message [action-name62703 input62702] (clojure.core/cond-> {:body {"Version" "2014-10-31", "Action" action-name62703}} (clojure.core/contains? input62702 :dbinstance-identifier) (clojure.core/assoc-in [:body "DBInstanceIdentifier"] (ser-string (input62702 :dbinstance-identifier))) (clojure.core/contains? input62702 :dbsnapshot-identifier) (clojure.core/assoc-in [:body "DBSnapshotIdentifier"] (ser-string (input62702 :dbsnapshot-identifier))) (clojure.core/contains? input62702 :snapshot-type) (clojure.core/assoc-in [:body "SnapshotType"] (ser-string (input62702 :snapshot-type))) (clojure.core/contains? input62702 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62702 :filters))) (clojure.core/contains? input62702 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input62702 :max-records))) (clojure.core/contains? input62702 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62702 :marker))) (clojure.core/contains? input62702 :include-shared) (clojure.core/assoc-in [:body "IncludeShared"] (ser-boolean (input62702 :include-shared))) (clojure.core/contains? input62702 :include-public) (clojure.core/assoc-in [:body "IncludePublic"] (ser-boolean (input62702 :include-public)))))
(clojure.core/defn req<-createdbsubnet-group-message [action-name62705 input62704] (clojure.core/let [input62706 {:body {"DBSubnetGroupName" (ser-string (input62704 :dbsubnet-group-name)), "DBSubnetGroupDescription" (ser-string (input62704 :dbsubnet-group-description)), "SubnetIds" (ser-subnet-identifier-list (input62704 :subnet-ids)), "Version" "2014-10-31", "Action" action-name62705}}] (clojure.core/cond-> input62706 (clojure.core/contains? input62704 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input62704 :tags))))))
(clojure.core/defn req<-remove-source-identifier-from-subscription-message [action-name62708 input62707] {:body {"SubscriptionName" (ser-string (input62707 :subscription-name)), "SourceIdentifier" (ser-string (input62707 :source-identifier)), "Version" "2014-10-31", "Action" action-name62708}})
(clojure.core/defn req<-create-option-group-message [action-name62710 input62709] (clojure.core/let [input62711 {:body {"OptionGroupName" (ser-string (input62709 :option-group-name)), "EngineName" (ser-string (input62709 :engine-name)), "MajorEngineVersion" (ser-string (input62709 :major-engine-version)), "OptionGroupDescription" (ser-string (input62709 :option-group-description)), "Version" "2014-10-31", "Action" action-name62710}}] (clojure.core/cond-> input62711 (clojure.core/contains? input62709 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input62709 :tags))))))
(clojure.core/defn req<-describedbcluster-parameters-message [action-name62713 input62712] (clojure.core/let [input62714 {:body {"DBClusterParameterGroupName" (ser-string (input62712 :dbcluster-parameter-group-name)), "Version" "2014-10-31", "Action" action-name62713}}] (clojure.core/cond-> input62714 (clojure.core/contains? input62712 :source) (clojure.core/assoc-in [:body "Source"] (ser-string (input62712 :source))) (clojure.core/contains? input62712 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62712 :filters))) (clojure.core/contains? input62712 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input62712 :max-records))) (clojure.core/contains? input62712 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62712 :marker))))))
(clojure.core/defn req<-describe-event-categories-message [action-name62716 input62715] (clojure.core/cond-> {:body {"Version" "2014-10-31", "Action" action-name62716}} (clojure.core/contains? input62715 :source-type) (clojure.core/assoc-in [:body "SourceType"] (ser-string (input62715 :source-type))) (clojure.core/contains? input62715 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62715 :filters)))))
(clojure.core/defn req<-describe-account-attributes-message [action-name62718 input62717] nil)
(clojure.core/defn req<-describe-engine-default-cluster-parameters-message [action-name62720 input62719] (clojure.core/let [input62721 {:body {"DBParameterGroupFamily" (ser-string (input62719 :dbparameter-group-family)), "Version" "2014-10-31", "Action" action-name62720}}] (clojure.core/cond-> input62721 (clojure.core/contains? input62719 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62719 :filters))) (clojure.core/contains? input62719 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input62719 :max-records))) (clojure.core/contains? input62719 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62719 :marker))))))
(clojure.core/defn req<-modifydbcluster-message [action-name62723 input62722] (clojure.core/let [input62724 {:body {"DBClusterIdentifier" (ser-string (input62722 :dbcluster-identifier)), "Version" "2014-10-31", "Action" action-name62723}}] (clojure.core/cond-> input62724 (clojure.core/contains? input62722 :backup-retention-period) (clojure.core/assoc-in [:body "BackupRetentionPeriod"] (ser-integer-optional (input62722 :backup-retention-period))) (clojure.core/contains? input62722 :option-group-name) (clojure.core/assoc-in [:body "OptionGroupName"] (ser-string (input62722 :option-group-name))) (clojure.core/contains? input62722 :enableiamdatabase-authentication) (clojure.core/assoc-in [:body "EnableIAMDatabaseAuthentication"] (ser-boolean-optional (input62722 :enableiamdatabase-authentication))) (clojure.core/contains? input62722 :newdbcluster-identifier) (clojure.core/assoc-in [:body "NewDBClusterIdentifier"] (ser-string (input62722 :newdbcluster-identifier))) (clojure.core/contains? input62722 :preferred-maintenance-window) (clojure.core/assoc-in [:body "PreferredMaintenanceWindow"] (ser-string (input62722 :preferred-maintenance-window))) (clojure.core/contains? input62722 :vpc-security-group-ids) (clojure.core/assoc-in [:body "VpcSecurityGroupIds"] (ser-vpc-security-group-id-list (input62722 :vpc-security-group-ids))) (clojure.core/contains? input62722 :dbcluster-parameter-group-name) (clojure.core/assoc-in [:body "DBClusterParameterGroupName"] (ser-string (input62722 :dbcluster-parameter-group-name))) (clojure.core/contains? input62722 :master-user-password) (clojure.core/assoc-in [:body "MasterUserPassword"] (ser-string (input62722 :master-user-password))) (clojure.core/contains? input62722 :engine-version) (clojure.core/assoc-in [:body "EngineVersion"] (ser-string (input62722 :engine-version))) (clojure.core/contains? input62722 :port) (clojure.core/assoc-in [:body "Port"] (ser-integer-optional (input62722 :port))) (clojure.core/contains? input62722 :apply-immediately) (clojure.core/assoc-in [:body "ApplyImmediately"] (ser-boolean (input62722 :apply-immediately))) (clojure.core/contains? input62722 :preferred-backup-window) (clojure.core/assoc-in [:body "PreferredBackupWindow"] (ser-string (input62722 :preferred-backup-window))))))
(clojure.core/defn req<-restoredbcluster-froms3-message [action-name62726 input62725] (clojure.core/let [input62727 {:body {"S3IngestionRoleArn" (ser-string (input62725 :s3-ingestion-role-arn)), "S3BucketName" (ser-string (input62725 :s3-bucket-name)), "SourceEngine" (ser-string (input62725 :source-engine)), "MasterUserPassword" (ser-string (input62725 :master-user-password)), "MasterUsername" (ser-string (input62725 :master-username)), "SourceEngineVersion" (ser-string (input62725 :source-engine-version)), "Version" "2014-10-31", "Engine" (ser-string (input62725 :engine)), "Action" action-name62726, "DBClusterIdentifier" (ser-string (input62725 :dbcluster-identifier))}}] (clojure.core/cond-> input62727 (clojure.core/contains? input62725 :backup-retention-period) (clojure.core/assoc-in [:body "BackupRetentionPeriod"] (ser-integer-optional (input62725 :backup-retention-period))) (clojure.core/contains? input62725 :option-group-name) (clojure.core/assoc-in [:body "OptionGroupName"] (ser-string (input62725 :option-group-name))) (clojure.core/contains? input62725 :character-set-name) (clojure.core/assoc-in [:body "CharacterSetName"] (ser-string (input62725 :character-set-name))) (clojure.core/contains? input62725 :enableiamdatabase-authentication) (clojure.core/assoc-in [:body "EnableIAMDatabaseAuthentication"] (ser-boolean-optional (input62725 :enableiamdatabase-authentication))) (clojure.core/contains? input62725 :database-name) (clojure.core/assoc-in [:body "DatabaseName"] (ser-string (input62725 :database-name))) (clojure.core/contains? input62725 :preferred-maintenance-window) (clojure.core/assoc-in [:body "PreferredMaintenanceWindow"] (ser-string (input62725 :preferred-maintenance-window))) (clojure.core/contains? input62725 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input62725 :tags))) (clojure.core/contains? input62725 :vpc-security-group-ids) (clojure.core/assoc-in [:body "VpcSecurityGroupIds"] (ser-vpc-security-group-id-list (input62725 :vpc-security-group-ids))) (clojure.core/contains? input62725 :dbcluster-parameter-group-name) (clojure.core/assoc-in [:body "DBClusterParameterGroupName"] (ser-string (input62725 :dbcluster-parameter-group-name))) (clojure.core/contains? input62725 :engine-version) (clojure.core/assoc-in [:body "EngineVersion"] (ser-string (input62725 :engine-version))) (clojure.core/contains? input62725 :storage-encrypted) (clojure.core/assoc-in [:body "StorageEncrypted"] (ser-boolean-optional (input62725 :storage-encrypted))) (clojure.core/contains? input62725 :dbsubnet-group-name) (clojure.core/assoc-in [:body "DBSubnetGroupName"] (ser-string (input62725 :dbsubnet-group-name))) (clojure.core/contains? input62725 :port) (clojure.core/assoc-in [:body "Port"] (ser-integer-optional (input62725 :port))) (clojure.core/contains? input62725 :kms-key-id) (clojure.core/assoc-in [:body "KmsKeyId"] (ser-string (input62725 :kms-key-id))) (clojure.core/contains? input62725 :s3-prefix) (clojure.core/assoc-in [:body "S3Prefix"] (ser-string (input62725 :s3-prefix))) (clojure.core/contains? input62725 :availability-zones) (clojure.core/assoc-in [:body "AvailabilityZones"] (ser-availability-zones (input62725 :availability-zones))) (clojure.core/contains? input62725 :preferred-backup-window) (clojure.core/assoc-in [:body "PreferredBackupWindow"] (ser-string (input62725 :preferred-backup-window))))))
(clojure.core/defn req<-describe-reserveddbinstances-offerings-message [action-name62729 input62728] (clojure.core/cond-> {:body {"Version" "2014-10-31", "Action" action-name62729}} (clojure.core/contains? input62728 :reserveddbinstances-offering-id) (clojure.core/assoc-in [:body "ReservedDBInstancesOfferingId"] (ser-string (input62728 :reserveddbinstances-offering-id))) (clojure.core/contains? input62728 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input62728 :max-records))) (clojure.core/contains? input62728 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62728 :marker))) (clojure.core/contains? input62728 :duration) (clojure.core/assoc-in [:body "Duration"] (ser-string (input62728 :duration))) (clojure.core/contains? input62728 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62728 :filters))) (clojure.core/contains? input62728 :product-description) (clojure.core/assoc-in [:body "ProductDescription"] (ser-string (input62728 :product-description))) (clojure.core/contains? input62728 :dbinstance-class) (clojure.core/assoc-in [:body "DBInstanceClass"] (ser-string (input62728 :dbinstance-class))) (clojure.core/contains? input62728 :offering-type) (clojure.core/assoc-in [:body "OfferingType"] (ser-string (input62728 :offering-type))) (clojure.core/contains? input62728 :multiaz) (clojure.core/assoc-in [:body "MultiAZ"] (ser-boolean-optional (input62728 :multiaz)))))
(clojure.core/defn req<-describe-pending-maintenance-actions-message [action-name62731 input62730] (clojure.core/cond-> {:body {"Version" "2014-10-31", "Action" action-name62731}} (clojure.core/contains? input62730 :resource-identifier) (clojure.core/assoc-in [:body "ResourceIdentifier"] (ser-string (input62730 :resource-identifier))) (clojure.core/contains? input62730 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62730 :filters))) (clojure.core/contains? input62730 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62730 :marker))) (clojure.core/contains? input62730 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input62730 :max-records)))))
(clojure.core/defn req<-createdbsnapshot-message [action-name62733 input62732] (clojure.core/let [input62734 {:body {"DBSnapshotIdentifier" (ser-string (input62732 :dbsnapshot-identifier)), "DBInstanceIdentifier" (ser-string (input62732 :dbinstance-identifier)), "Version" "2014-10-31", "Action" action-name62733}}] (clojure.core/cond-> input62734 (clojure.core/contains? input62732 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input62732 :tags))))))
(clojure.core/defn req<-downloaddblog-file-portion-message [action-name62736 input62735] (clojure.core/let [input62737 {:body {"DBInstanceIdentifier" (ser-string (input62735 :dbinstance-identifier)), "LogFileName" (ser-string (input62735 :log-file-name)), "Version" "2014-10-31", "Action" action-name62736}}] (clojure.core/cond-> input62737 (clojure.core/contains? input62735 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62735 :marker))) (clojure.core/contains? input62735 :number-of-lines) (clojure.core/assoc-in [:body "NumberOfLines"] (ser-integer (input62735 :number-of-lines))))))
(clojure.core/defn req<-modifydbsnapshot-attribute-message [action-name62739 input62738] (clojure.core/let [input62740 {:body {"DBSnapshotIdentifier" (ser-string (input62738 :dbsnapshot-identifier)), "AttributeName" (ser-string (input62738 :attribute-name)), "Version" "2014-10-31", "Action" action-name62739}}] (clojure.core/cond-> input62740 (clojure.core/contains? input62738 :values-to-add) (clojure.core/assoc-in [:body "ValuesToAdd"] (ser-attribute-value-list (input62738 :values-to-add))) (clojure.core/contains? input62738 :values-to-remove) (clojure.core/assoc-in [:body "ValuesToRemove"] (ser-attribute-value-list (input62738 :values-to-remove))))))
(clojure.core/defn req<-describe-source-regions-message [action-name62742 input62741] (clojure.core/cond-> {:body {"Version" "2014-10-31", "Action" action-name62742}} (clojure.core/contains? input62741 :region-name) (clojure.core/assoc-in [:body "RegionName"] (ser-string (input62741 :region-name))) (clojure.core/contains? input62741 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input62741 :max-records))) (clojure.core/contains? input62741 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62741 :marker))) (clojure.core/contains? input62741 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62741 :filters)))))
(clojure.core/defn req<-startdbinstance-message [action-name62744 input62743] {:body {"DBInstanceIdentifier" (ser-string (input62743 :dbinstance-identifier)), "Version" "2014-10-31", "Action" action-name62744}})
(clojure.core/defn req<-describedbsnapshot-attributes-message [action-name62746 input62745] {:body {"DBSnapshotIdentifier" (ser-string (input62745 :dbsnapshot-identifier)), "Version" "2014-10-31", "Action" action-name62746}})
(clojure.core/defn req<-describedbinstances-message [action-name62748 input62747] (clojure.core/cond-> {:body {"Version" "2014-10-31", "Action" action-name62748}} (clojure.core/contains? input62747 :dbinstance-identifier) (clojure.core/assoc-in [:body "DBInstanceIdentifier"] (ser-string (input62747 :dbinstance-identifier))) (clojure.core/contains? input62747 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62747 :filters))) (clojure.core/contains? input62747 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input62747 :max-records))) (clojure.core/contains? input62747 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62747 :marker)))))
(clojure.core/defn req<-modify-event-subscription-message [action-name62750 input62749] (clojure.core/let [input62751 {:body {"SubscriptionName" (ser-string (input62749 :subscription-name)), "Version" "2014-10-31", "Action" action-name62750}}] (clojure.core/cond-> input62751 (clojure.core/contains? input62749 :sns-topic-arn) (clojure.core/assoc-in [:body "SnsTopicArn"] (ser-string (input62749 :sns-topic-arn))) (clojure.core/contains? input62749 :source-type) (clojure.core/assoc-in [:body "SourceType"] (ser-string (input62749 :source-type))) (clojure.core/contains? input62749 :event-categories) (clojure.core/assoc-in [:body "EventCategories"] (ser-event-categories-list (input62749 :event-categories))) (clojure.core/contains? input62749 :enabled) (clojure.core/assoc-in [:body "Enabled"] (ser-boolean-optional (input62749 :enabled))))))
(clojure.core/defn req<-describedbengine-versions-message [action-name62753 input62752] (clojure.core/cond-> {:body {"Version" "2014-10-31", "Action" action-name62753}} (clojure.core/contains? input62752 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input62752 :max-records))) (clojure.core/contains? input62752 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62752 :marker))) (clojure.core/contains? input62752 :list-supported-character-sets) (clojure.core/assoc-in [:body "ListSupportedCharacterSets"] (ser-boolean-optional (input62752 :list-supported-character-sets))) (clojure.core/contains? input62752 :default-only) (clojure.core/assoc-in [:body "DefaultOnly"] (ser-boolean (input62752 :default-only))) (clojure.core/contains? input62752 :engine-version) (clojure.core/assoc-in [:body "EngineVersion"] (ser-string (input62752 :engine-version))) (clojure.core/contains? input62752 :list-supported-timezones) (clojure.core/assoc-in [:body "ListSupportedTimezones"] (ser-boolean-optional (input62752 :list-supported-timezones))) (clojure.core/contains? input62752 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62752 :filters))) (clojure.core/contains? input62752 :engine) (clojure.core/assoc-in [:body "Engine"] (ser-string (input62752 :engine))) (clojure.core/contains? input62752 :dbparameter-group-family) (clojure.core/assoc-in [:body "DBParameterGroupFamily"] (ser-string (input62752 :dbparameter-group-family)))))
(clojure.core/defn req<-modifydbcluster-parameter-group-message [action-name62755 input62754] {:body {"DBClusterParameterGroupName" (ser-string (input62754 :dbcluster-parameter-group-name)), "Parameters" (ser-parameters-list (input62754 :parameters)), "Version" "2014-10-31", "Action" action-name62755}})
(clojure.core/defn req<-describe-option-group-options-message [action-name62757 input62756] (clojure.core/let [input62758 {:body {"EngineName" (ser-string (input62756 :engine-name)), "Version" "2014-10-31", "Action" action-name62757}}] (clojure.core/cond-> input62758 (clojure.core/contains? input62756 :major-engine-version) (clojure.core/assoc-in [:body "MajorEngineVersion"] (ser-string (input62756 :major-engine-version))) (clojure.core/contains? input62756 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62756 :filters))) (clojure.core/contains? input62756 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input62756 :max-records))) (clojure.core/contains? input62756 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62756 :marker))))))
(clojure.core/defn req<-createdbsecurity-group-message [action-name62760 input62759] (clojure.core/let [input62761 {:body {"DBSecurityGroupName" (ser-string (input62759 :dbsecurity-group-name)), "DBSecurityGroupDescription" (ser-string (input62759 :dbsecurity-group-description)), "Version" "2014-10-31", "Action" action-name62760}}] (clojure.core/cond-> input62761 (clojure.core/contains? input62759 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input62759 :tags))))))
(clojure.core/defn req<-delete-option-group-message [action-name62763 input62762] {:body {"OptionGroupName" (ser-string (input62762 :option-group-name)), "Version" "2014-10-31", "Action" action-name62763}})
(clojure.core/defn req<-create-event-subscription-message [action-name62765 input62764] (clojure.core/let [input62766 {:body {"SubscriptionName" (ser-string (input62764 :subscription-name)), "SnsTopicArn" (ser-string (input62764 :sns-topic-arn)), "Version" "2014-10-31", "Action" action-name62765}}] (clojure.core/cond-> input62766 (clojure.core/contains? input62764 :source-type) (clojure.core/assoc-in [:body "SourceType"] (ser-string (input62764 :source-type))) (clojure.core/contains? input62764 :event-categories) (clojure.core/assoc-in [:body "EventCategories"] (ser-event-categories-list (input62764 :event-categories))) (clojure.core/contains? input62764 :source-ids) (clojure.core/assoc-in [:body "SourceIds"] (ser-source-ids-list (input62764 :source-ids))) (clojure.core/contains? input62764 :enabled) (clojure.core/assoc-in [:body "Enabled"] (ser-boolean-optional (input62764 :enabled))) (clojure.core/contains? input62764 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input62764 :tags))))))
(clojure.core/defn req<-modifydbcluster-snapshot-attribute-message [action-name62768 input62767] (clojure.core/let [input62769 {:body {"DBClusterSnapshotIdentifier" (ser-string (input62767 :dbcluster-snapshot-identifier)), "AttributeName" (ser-string (input62767 :attribute-name)), "Version" "2014-10-31", "Action" action-name62768}}] (clojure.core/cond-> input62769 (clojure.core/contains? input62767 :values-to-add) (clojure.core/assoc-in [:body "ValuesToAdd"] (ser-attribute-value-list (input62767 :values-to-add))) (clojure.core/contains? input62767 :values-to-remove) (clojure.core/assoc-in [:body "ValuesToRemove"] (ser-attribute-value-list (input62767 :values-to-remove))))))
(clojure.core/defn req<-createdbparameter-group-message [action-name62771 input62770] (clojure.core/let [input62772 {:body {"DBParameterGroupName" (ser-string (input62770 :dbparameter-group-name)), "DBParameterGroupFamily" (ser-string (input62770 :dbparameter-group-family)), "Description" (ser-string (input62770 :description)), "Version" "2014-10-31", "Action" action-name62771}}] (clojure.core/cond-> input62772 (clojure.core/contains? input62770 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input62770 :tags))))))
(clojure.core/defn req<-describe-validdbinstance-modifications-message [action-name62774 input62773] {:body {"DBInstanceIdentifier" (ser-string (input62773 :dbinstance-identifier)), "Version" "2014-10-31", "Action" action-name62774}})
(clojure.core/defn req<-purchase-reserveddbinstances-offering-message [action-name62776 input62775] (clojure.core/let [input62777 {:body {"ReservedDBInstancesOfferingId" (ser-string (input62775 :reserveddbinstances-offering-id)), "Version" "2014-10-31", "Action" action-name62776}}] (clojure.core/cond-> input62777 (clojure.core/contains? input62775 :reserveddbinstance-id) (clojure.core/assoc-in [:body "ReservedDBInstanceId"] (ser-string (input62775 :reserveddbinstance-id))) (clojure.core/contains? input62775 :dbinstance-count) (clojure.core/assoc-in [:body "DBInstanceCount"] (ser-integer-optional (input62775 :dbinstance-count))) (clojure.core/contains? input62775 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input62775 :tags))))))
(clojure.core/defn req<-describedbcluster-snapshots-message [action-name62779 input62778] (clojure.core/cond-> {:body {"Version" "2014-10-31", "Action" action-name62779}} (clojure.core/contains? input62778 :dbcluster-identifier) (clojure.core/assoc-in [:body "DBClusterIdentifier"] (ser-string (input62778 :dbcluster-identifier))) (clojure.core/contains? input62778 :dbcluster-snapshot-identifier) (clojure.core/assoc-in [:body "DBClusterSnapshotIdentifier"] (ser-string (input62778 :dbcluster-snapshot-identifier))) (clojure.core/contains? input62778 :snapshot-type) (clojure.core/assoc-in [:body "SnapshotType"] (ser-string (input62778 :snapshot-type))) (clojure.core/contains? input62778 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62778 :filters))) (clojure.core/contains? input62778 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input62778 :max-records))) (clojure.core/contains? input62778 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62778 :marker))) (clojure.core/contains? input62778 :include-shared) (clojure.core/assoc-in [:body "IncludeShared"] (ser-boolean (input62778 :include-shared))) (clojure.core/contains? input62778 :include-public) (clojure.core/assoc-in [:body "IncludePublic"] (ser-boolean (input62778 :include-public)))))
(clojure.core/defn req<-deletedbparameter-group-message [action-name62781 input62780] {:body {"DBParameterGroupName" (ser-string (input62780 :dbparameter-group-name)), "Version" "2014-10-31", "Action" action-name62781}})
(clojure.core/defn req<-copydbsnapshot-message [action-name62783 input62782] (clojure.core/let [input62784 {:body {"SourceDBSnapshotIdentifier" (ser-string (input62782 :sourcedbsnapshot-identifier)), "TargetDBSnapshotIdentifier" (ser-string (input62782 :targetdbsnapshot-identifier)), "Version" "2014-10-31", "Action" action-name62783}}] (clojure.core/cond-> input62784 (clojure.core/contains? input62782 :kms-key-id) (clojure.core/assoc-in [:body "KmsKeyId"] (ser-string (input62782 :kms-key-id))) (clojure.core/contains? input62782 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input62782 :tags))) (clojure.core/contains? input62782 :copy-tags) (clojure.core/assoc-in [:body "CopyTags"] (ser-boolean-optional (input62782 :copy-tags))) (clojure.core/contains? input62782 :pre-signed-url) (clojure.core/assoc-in [:body "PreSignedUrl"] (ser-string (input62782 :pre-signed-url))) (clojure.core/contains? input62782 :option-group-name) (clojure.core/assoc-in [:body "OptionGroupName"] (ser-string (input62782 :option-group-name))))))
(clojure.core/defn req<-describe-reserveddbinstances-message [action-name62786 input62785] (clojure.core/cond-> {:body {"Version" "2014-10-31", "Action" action-name62786}} (clojure.core/contains? input62785 :reserveddbinstance-id) (clojure.core/assoc-in [:body "ReservedDBInstanceId"] (ser-string (input62785 :reserveddbinstance-id))) (clojure.core/contains? input62785 :reserveddbinstances-offering-id) (clojure.core/assoc-in [:body "ReservedDBInstancesOfferingId"] (ser-string (input62785 :reserveddbinstances-offering-id))) (clojure.core/contains? input62785 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input62785 :max-records))) (clojure.core/contains? input62785 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62785 :marker))) (clojure.core/contains? input62785 :duration) (clojure.core/assoc-in [:body "Duration"] (ser-string (input62785 :duration))) (clojure.core/contains? input62785 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62785 :filters))) (clojure.core/contains? input62785 :product-description) (clojure.core/assoc-in [:body "ProductDescription"] (ser-string (input62785 :product-description))) (clojure.core/contains? input62785 :dbinstance-class) (clojure.core/assoc-in [:body "DBInstanceClass"] (ser-string (input62785 :dbinstance-class))) (clojure.core/contains? input62785 :offering-type) (clojure.core/assoc-in [:body "OfferingType"] (ser-string (input62785 :offering-type))) (clojure.core/contains? input62785 :multiaz) (clojure.core/assoc-in [:body "MultiAZ"] (ser-boolean-optional (input62785 :multiaz)))))
(clojure.core/defn req<-describe-event-subscriptions-message [action-name62788 input62787] (clojure.core/cond-> {:body {"Version" "2014-10-31", "Action" action-name62788}} (clojure.core/contains? input62787 :subscription-name) (clojure.core/assoc-in [:body "SubscriptionName"] (ser-string (input62787 :subscription-name))) (clojure.core/contains? input62787 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62787 :filters))) (clojure.core/contains? input62787 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input62787 :max-records))) (clojure.core/contains? input62787 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62787 :marker)))))
(clojure.core/defn req<-modifydbinstance-message [action-name62790 input62789] (clojure.core/let [input62791 {:body {"DBInstanceIdentifier" (ser-string (input62789 :dbinstance-identifier)), "Version" "2014-10-31", "Action" action-name62790}}] (clojure.core/cond-> input62791 (clojure.core/contains? input62789 :backup-retention-period) (clojure.core/assoc-in [:body "BackupRetentionPeriod"] (ser-integer-optional (input62789 :backup-retention-period))) (clojure.core/contains? input62789 :option-group-name) (clojure.core/assoc-in [:body "OptionGroupName"] (ser-string (input62789 :option-group-name))) (clojure.core/contains? input62789 :dbsecurity-groups) (clojure.core/assoc-in [:body "DBSecurityGroups"] (ser-dbsecurity-group-name-list (input62789 :dbsecurity-groups))) (clojure.core/contains? input62789 :promotion-tier) (clojure.core/assoc-in [:body "PromotionTier"] (ser-integer-optional (input62789 :promotion-tier))) (clojure.core/contains? input62789 :enableiamdatabase-authentication) (clojure.core/assoc-in [:body "EnableIAMDatabaseAuthentication"] (ser-boolean-optional (input62789 :enableiamdatabase-authentication))) (clojure.core/contains? input62789 :publicly-accessible) (clojure.core/assoc-in [:body "PubliclyAccessible"] (ser-boolean-optional (input62789 :publicly-accessible))) (clojure.core/contains? input62789 :domainiamrole-name) (clojure.core/assoc-in [:body "DomainIAMRoleName"] (ser-string (input62789 :domainiamrole-name))) (clojure.core/contains? input62789 :preferred-maintenance-window) (clojure.core/assoc-in [:body "PreferredMaintenanceWindow"] (ser-string (input62789 :preferred-maintenance-window))) (clojure.core/contains? input62789 :copy-tags-to-snapshot) (clojure.core/assoc-in [:body "CopyTagsToSnapshot"] (ser-boolean-optional (input62789 :copy-tags-to-snapshot))) (clojure.core/contains? input62789 :auto-minor-version-upgrade) (clojure.core/assoc-in [:body "AutoMinorVersionUpgrade"] (ser-boolean-optional (input62789 :auto-minor-version-upgrade))) (clojure.core/contains? input62789 :newdbinstance-identifier) (clojure.core/assoc-in [:body "NewDBInstanceIdentifier"] (ser-string (input62789 :newdbinstance-identifier))) (clojure.core/contains? input62789 :vpc-security-group-ids) (clojure.core/assoc-in [:body "VpcSecurityGroupIds"] (ser-vpc-security-group-id-list (input62789 :vpc-security-group-ids))) (clojure.core/contains? input62789 :master-user-password) (clojure.core/assoc-in [:body "MasterUserPassword"] (ser-string (input62789 :master-user-password))) (clojure.core/contains? input62789 :license-model) (clojure.core/assoc-in [:body "LicenseModel"] (ser-string (input62789 :license-model))) (clojure.core/contains? input62789 :domain) (clojure.core/assoc-in [:body "Domain"] (ser-string (input62789 :domain))) (clojure.core/contains? input62789 :allow-major-version-upgrade) (clojure.core/assoc-in [:body "AllowMajorVersionUpgrade"] (ser-boolean (input62789 :allow-major-version-upgrade))) (clojure.core/contains? input62789 :allocated-storage) (clojure.core/assoc-in [:body "AllocatedStorage"] (ser-integer-optional (input62789 :allocated-storage))) (clojure.core/contains? input62789 :monitoring-interval) (clojure.core/assoc-in [:body "MonitoringInterval"] (ser-integer-optional (input62789 :monitoring-interval))) (clojure.core/contains? input62789 :engine-version) (clojure.core/assoc-in [:body "EngineVersion"] (ser-string (input62789 :engine-version))) (clojure.core/contains? input62789 :dbsubnet-group-name) (clojure.core/assoc-in [:body "DBSubnetGroupName"] (ser-string (input62789 :dbsubnet-group-name))) (clojure.core/contains? input62789 :dbport-number) (clojure.core/assoc-in [:body "DBPortNumber"] (ser-integer-optional (input62789 :dbport-number))) (clojure.core/contains? input62789 :iops) (clojure.core/assoc-in [:body "Iops"] (ser-integer-optional (input62789 :iops))) (clojure.core/contains? input62789 :tde-credential-password) (clojure.core/assoc-in [:body "TdeCredentialPassword"] (ser-string (input62789 :tde-credential-password))) (clojure.core/contains? input62789 :storage-type) (clojure.core/assoc-in [:body "StorageType"] (ser-string (input62789 :storage-type))) (clojure.core/contains? input62789 :apply-immediately) (clojure.core/assoc-in [:body "ApplyImmediately"] (ser-boolean (input62789 :apply-immediately))) (clojure.core/contains? input62789 :cacertificate-identifier) (clojure.core/assoc-in [:body "CACertificateIdentifier"] (ser-string (input62789 :cacertificate-identifier))) (clojure.core/contains? input62789 :cloudwatch-logs-export-configuration) (clojure.core/assoc-in [:body "CloudwatchLogsExportConfiguration"] (ser-cloudwatch-logs-export-configuration (input62789 :cloudwatch-logs-export-configuration))) (clojure.core/contains? input62789 :dbinstance-class) (clojure.core/assoc-in [:body "DBInstanceClass"] (ser-string (input62789 :dbinstance-class))) (clojure.core/contains? input62789 :dbparameter-group-name) (clojure.core/assoc-in [:body "DBParameterGroupName"] (ser-string (input62789 :dbparameter-group-name))) (clojure.core/contains? input62789 :enable-performance-insights) (clojure.core/assoc-in [:body "EnablePerformanceInsights"] (ser-boolean-optional (input62789 :enable-performance-insights))) (clojure.core/contains? input62789 :monitoring-role-arn) (clojure.core/assoc-in [:body "MonitoringRoleArn"] (ser-string (input62789 :monitoring-role-arn))) (clojure.core/contains? input62789 :tde-credential-arn) (clojure.core/assoc-in [:body "TdeCredentialArn"] (ser-string (input62789 :tde-credential-arn))) (clojure.core/contains? input62789 :multiaz) (clojure.core/assoc-in [:body "MultiAZ"] (ser-boolean-optional (input62789 :multiaz))) (clojure.core/contains? input62789 :performance-insightskmskey-id) (clojure.core/assoc-in [:body "PerformanceInsightsKMSKeyId"] (ser-string (input62789 :performance-insightskmskey-id))) (clojure.core/contains? input62789 :preferred-backup-window) (clojure.core/assoc-in [:body "PreferredBackupWindow"] (ser-string (input62789 :preferred-backup-window))))))
(clojure.core/defn req<-describedbcluster-parameter-groups-message [action-name62793 input62792] (clojure.core/cond-> {:body {"Version" "2014-10-31", "Action" action-name62793}} (clojure.core/contains? input62792 :dbcluster-parameter-group-name) (clojure.core/assoc-in [:body "DBClusterParameterGroupName"] (ser-string (input62792 :dbcluster-parameter-group-name))) (clojure.core/contains? input62792 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62792 :filters))) (clojure.core/contains? input62792 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input62792 :max-records))) (clojure.core/contains? input62792 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62792 :marker)))))
(clojure.core/defn req<-createdbcluster-snapshot-message [action-name62795 input62794] (clojure.core/let [input62796 {:body {"DBClusterSnapshotIdentifier" (ser-string (input62794 :dbcluster-snapshot-identifier)), "DBClusterIdentifier" (ser-string (input62794 :dbcluster-identifier)), "Version" "2014-10-31", "Action" action-name62795}}] (clojure.core/cond-> input62796 (clojure.core/contains? input62794 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input62794 :tags))))))
(clojure.core/defn req<-describedbparameters-message [action-name62798 input62797] (clojure.core/let [input62799 {:body {"DBParameterGroupName" (ser-string (input62797 :dbparameter-group-name)), "Version" "2014-10-31", "Action" action-name62798}}] (clojure.core/cond-> input62799 (clojure.core/contains? input62797 :source) (clojure.core/assoc-in [:body "Source"] (ser-string (input62797 :source))) (clojure.core/contains? input62797 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62797 :filters))) (clojure.core/contains? input62797 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input62797 :max-records))) (clojure.core/contains? input62797 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62797 :marker))))))
(clojure.core/defn req<-modify-option-group-message [action-name62801 input62800] (clojure.core/let [input62802 {:body {"OptionGroupName" (ser-string (input62800 :option-group-name)), "Version" "2014-10-31", "Action" action-name62801}}] (clojure.core/cond-> input62802 (clojure.core/contains? input62800 :options-to-include) (clojure.core/assoc-in [:body "OptionsToInclude"] (ser-option-configuration-list (input62800 :options-to-include))) (clojure.core/contains? input62800 :options-to-remove) (clojure.core/assoc-in [:body "OptionsToRemove"] (ser-option-names-list (input62800 :options-to-remove))) (clojure.core/contains? input62800 :apply-immediately) (clojure.core/assoc-in [:body "ApplyImmediately"] (ser-boolean (input62800 :apply-immediately))))))
(clojure.core/defn req<-describedbparameter-groups-message [action-name62804 input62803] (clojure.core/cond-> {:body {"Version" "2014-10-31", "Action" action-name62804}} (clojure.core/contains? input62803 :dbparameter-group-name) (clojure.core/assoc-in [:body "DBParameterGroupName"] (ser-string (input62803 :dbparameter-group-name))) (clojure.core/contains? input62803 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62803 :filters))) (clojure.core/contains? input62803 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input62803 :max-records))) (clojure.core/contains? input62803 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62803 :marker)))))
(clojure.core/defn req<-remove-tags-from-resource-message [action-name62806 input62805] {:body {"ResourceName" (ser-string (input62805 :resource-name)), "TagKeys" (ser-key-list (input62805 :tag-keys)), "Version" "2014-10-31", "Action" action-name62806}})
(clojure.core/defn req<-copydbcluster-snapshot-message [action-name62808 input62807] (clojure.core/let [input62809 {:body {"SourceDBClusterSnapshotIdentifier" (ser-string (input62807 :sourcedbcluster-snapshot-identifier)), "TargetDBClusterSnapshotIdentifier" (ser-string (input62807 :targetdbcluster-snapshot-identifier)), "Version" "2014-10-31", "Action" action-name62808}}] (clojure.core/cond-> input62809 (clojure.core/contains? input62807 :kms-key-id) (clojure.core/assoc-in [:body "KmsKeyId"] (ser-string (input62807 :kms-key-id))) (clojure.core/contains? input62807 :pre-signed-url) (clojure.core/assoc-in [:body "PreSignedUrl"] (ser-string (input62807 :pre-signed-url))) (clojure.core/contains? input62807 :copy-tags) (clojure.core/assoc-in [:body "CopyTags"] (ser-boolean-optional (input62807 :copy-tags))) (clojure.core/contains? input62807 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input62807 :tags))))))
(clojure.core/defn req<-deletedbcluster-parameter-group-message [action-name62811 input62810] {:body {"DBClusterParameterGroupName" (ser-string (input62810 :dbcluster-parameter-group-name)), "Version" "2014-10-31", "Action" action-name62811}})
(clojure.core/defn req<-add-role-todbcluster-message [action-name62813 input62812] {:body {"DBClusterIdentifier" (ser-string (input62812 :dbcluster-identifier)), "RoleArn" (ser-string (input62812 :role-arn)), "Version" "2014-10-31", "Action" action-name62813}})
(clojure.core/defn req<-copy-option-group-message [action-name62815 input62814] (clojure.core/let [input62816 {:body {"SourceOptionGroupIdentifier" (ser-string (input62814 :source-option-group-identifier)), "TargetOptionGroupIdentifier" (ser-string (input62814 :target-option-group-identifier)), "TargetOptionGroupDescription" (ser-string (input62814 :target-option-group-description)), "Version" "2014-10-31", "Action" action-name62815}}] (clojure.core/cond-> input62816 (clojure.core/contains? input62814 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input62814 :tags))))))
(clojure.core/defn req<-promote-read-replicadbcluster-message [action-name62818 input62817] {:body {"DBClusterIdentifier" (ser-string (input62817 :dbcluster-identifier)), "Version" "2014-10-31", "Action" action-name62818}})
(clojure.core/defn req<-add-tags-to-resource-message [action-name62820 input62819] {:body {"ResourceName" (ser-string (input62819 :resource-name)), "Tags" (ser-tag-list (input62819 :tags)), "Version" "2014-10-31", "Action" action-name62820}})
(clojure.core/defn req<-restoredbcluster-from-snapshot-message [action-name62822 input62821] (clojure.core/let [input62823 {:body {"SnapshotIdentifier" (ser-string (input62821 :snapshot-identifier)), "Engine" (ser-string (input62821 :engine)), "DBClusterIdentifier" (ser-string (input62821 :dbcluster-identifier)), "Version" "2014-10-31", "Action" action-name62822}}] (clojure.core/cond-> input62823 (clojure.core/contains? input62821 :option-group-name) (clojure.core/assoc-in [:body "OptionGroupName"] (ser-string (input62821 :option-group-name))) (clojure.core/contains? input62821 :enableiamdatabase-authentication) (clojure.core/assoc-in [:body "EnableIAMDatabaseAuthentication"] (ser-boolean-optional (input62821 :enableiamdatabase-authentication))) (clojure.core/contains? input62821 :database-name) (clojure.core/assoc-in [:body "DatabaseName"] (ser-string (input62821 :database-name))) (clojure.core/contains? input62821 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input62821 :tags))) (clojure.core/contains? input62821 :vpc-security-group-ids) (clojure.core/assoc-in [:body "VpcSecurityGroupIds"] (ser-vpc-security-group-id-list (input62821 :vpc-security-group-ids))) (clojure.core/contains? input62821 :engine-version) (clojure.core/assoc-in [:body "EngineVersion"] (ser-string (input62821 :engine-version))) (clojure.core/contains? input62821 :dbsubnet-group-name) (clojure.core/assoc-in [:body "DBSubnetGroupName"] (ser-string (input62821 :dbsubnet-group-name))) (clojure.core/contains? input62821 :port) (clojure.core/assoc-in [:body "Port"] (ser-integer-optional (input62821 :port))) (clojure.core/contains? input62821 :kms-key-id) (clojure.core/assoc-in [:body "KmsKeyId"] (ser-string (input62821 :kms-key-id))) (clojure.core/contains? input62821 :availability-zones) (clojure.core/assoc-in [:body "AvailabilityZones"] (ser-availability-zones (input62821 :availability-zones))))))
(clojure.core/defn req<-modifydbparameter-group-message [action-name62825 input62824] {:body {"DBParameterGroupName" (ser-string (input62824 :dbparameter-group-name)), "Parameters" (ser-parameters-list (input62824 :parameters)), "Version" "2014-10-31", "Action" action-name62825}})
(clojure.core/defn req<-describedbcluster-snapshot-attributes-message [action-name62827 input62826] {:body {"DBClusterSnapshotIdentifier" (ser-string (input62826 :dbcluster-snapshot-identifier)), "Version" "2014-10-31", "Action" action-name62827}})
(clojure.core/defn req<-describedbsecurity-groups-message [action-name62829 input62828] (clojure.core/cond-> {:body {"Version" "2014-10-31", "Action" action-name62829}} (clojure.core/contains? input62828 :dbsecurity-group-name) (clojure.core/assoc-in [:body "DBSecurityGroupName"] (ser-string (input62828 :dbsecurity-group-name))) (clojure.core/contains? input62828 :filters) (clojure.core/assoc-in [:body "Filters"] (ser-filter-list (input62828 :filters))) (clojure.core/contains? input62828 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input62828 :max-records))) (clojure.core/contains? input62828 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input62828 :marker)))))
(clojure.core/defn req<-createdbinstance-read-replica-message [action-name62831 input62830] (clojure.core/let [input62832 {:body {"DBInstanceIdentifier" (ser-string (input62830 :dbinstance-identifier)), "SourceDBInstanceIdentifier" (ser-string (input62830 :sourcedbinstance-identifier)), "Version" "2014-10-31", "Action" action-name62831}}] (clojure.core/cond-> input62832 (clojure.core/contains? input62830 :option-group-name) (clojure.core/assoc-in [:body "OptionGroupName"] (ser-string (input62830 :option-group-name))) (clojure.core/contains? input62830 :enableiamdatabase-authentication) (clojure.core/assoc-in [:body "EnableIAMDatabaseAuthentication"] (ser-boolean-optional (input62830 :enableiamdatabase-authentication))) (clojure.core/contains? input62830 :publicly-accessible) (clojure.core/assoc-in [:body "PubliclyAccessible"] (ser-boolean-optional (input62830 :publicly-accessible))) (clojure.core/contains? input62830 :pre-signed-url) (clojure.core/assoc-in [:body "PreSignedUrl"] (ser-string (input62830 :pre-signed-url))) (clojure.core/contains? input62830 :copy-tags-to-snapshot) (clojure.core/assoc-in [:body "CopyTagsToSnapshot"] (ser-boolean-optional (input62830 :copy-tags-to-snapshot))) (clojure.core/contains? input62830 :enable-cloudwatch-logs-exports) (clojure.core/assoc-in [:body "EnableCloudwatchLogsExports"] (ser-log-type-list (input62830 :enable-cloudwatch-logs-exports))) (clojure.core/contains? input62830 :auto-minor-version-upgrade) (clojure.core/assoc-in [:body "AutoMinorVersionUpgrade"] (ser-boolean-optional (input62830 :auto-minor-version-upgrade))) (clojure.core/contains? input62830 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input62830 :tags))) (clojure.core/contains? input62830 :availability-zone) (clojure.core/assoc-in [:body "AvailabilityZone"] (ser-string (input62830 :availability-zone))) (clojure.core/contains? input62830 :monitoring-interval) (clojure.core/assoc-in [:body "MonitoringInterval"] (ser-integer-optional (input62830 :monitoring-interval))) (clojure.core/contains? input62830 :dbsubnet-group-name) (clojure.core/assoc-in [:body "DBSubnetGroupName"] (ser-string (input62830 :dbsubnet-group-name))) (clojure.core/contains? input62830 :port) (clojure.core/assoc-in [:body "Port"] (ser-integer-optional (input62830 :port))) (clojure.core/contains? input62830 :kms-key-id) (clojure.core/assoc-in [:body "KmsKeyId"] (ser-string (input62830 :kms-key-id))) (clojure.core/contains? input62830 :iops) (clojure.core/assoc-in [:body "Iops"] (ser-integer-optional (input62830 :iops))) (clojure.core/contains? input62830 :storage-type) (clojure.core/assoc-in [:body "StorageType"] (ser-string (input62830 :storage-type))) (clojure.core/contains? input62830 :dbinstance-class) (clojure.core/assoc-in [:body "DBInstanceClass"] (ser-string (input62830 :dbinstance-class))) (clojure.core/contains? input62830 :enable-performance-insights) (clojure.core/assoc-in [:body "EnablePerformanceInsights"] (ser-boolean-optional (input62830 :enable-performance-insights))) (clojure.core/contains? input62830 :monitoring-role-arn) (clojure.core/assoc-in [:body "MonitoringRoleArn"] (ser-string (input62830 :monitoring-role-arn))) (clojure.core/contains? input62830 :multiaz) (clojure.core/assoc-in [:body "MultiAZ"] (ser-boolean-optional (input62830 :multiaz))) (clojure.core/contains? input62830 :performance-insightskmskey-id) (clojure.core/assoc-in [:body "PerformanceInsightsKMSKeyId"] (ser-string (input62830 :performance-insightskmskey-id))))))

(clojure.spec.alpha/def :portkey.aws.rds/source-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/vpc-security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.rds/vpc-security-group-membership))

(clojure.spec.alpha/def :portkey.aws.rds/certificate-list (clojure.spec.alpha/coll-of :portkey.aws.rds/certificate))

(clojure.spec.alpha/def :portkey.aws.rds/subnet-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds/restoredbcluster-to-point-in-time-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBCluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.pending-maintenance-action/action (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.pending-maintenance-action/auto-applied-after-date (clojure.spec.alpha/and :portkey.aws.rds/tstamp))
(clojure.spec.alpha/def :portkey.aws.rds.pending-maintenance-action/forced-apply-date (clojure.spec.alpha/and :portkey.aws.rds/tstamp))
(clojure.spec.alpha/def :portkey.aws.rds.pending-maintenance-action/opt-in-status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.pending-maintenance-action/current-apply-date (clojure.spec.alpha/and :portkey.aws.rds/tstamp))
(clojure.spec.alpha/def :portkey.aws.rds.pending-maintenance-action/description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/pending-maintenance-action (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.pending-maintenance-action/Action :portkey.aws.rds.pending-maintenance-action/AutoAppliedAfterDate :portkey.aws.rds.pending-maintenance-action/ForcedApplyDate :portkey.aws.rds.pending-maintenance-action/OptInStatus :portkey.aws.rds.pending-maintenance-action/CurrentApplyDate :portkey.aws.rds.pending-maintenance-action/Description] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbinstance-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/read-replica-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds/restoredbinstance-fromdbsnapshot-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBInstance] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/remove-source-identifier-from-subscription-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/EventSubscription] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.rds/deletedbsnapshot-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBSnapshot] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/snapshot-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/filter-value-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds/parameters-list (clojure.spec.alpha/coll-of :portkey.aws.rds/parameter))

(clojure.spec.alpha/def :portkey.aws.rds/domain-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/ec2-security-group-list (clojure.spec.alpha/coll-of :portkey.aws.rds/ec2-security-group))

(clojure.spec.alpha/def :portkey.aws.rds/copydbparameter-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBParameterGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.double-range/from (clojure.spec.alpha/and :portkey.aws.rds/double))
(clojure.spec.alpha/def :portkey.aws.rds.double-range/to (clojure.spec.alpha/and :portkey.aws.rds/double))
(clojure.spec.alpha/def :portkey.aws.rds/double-range (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.double-range/From :portkey.aws.rds.double-range/To] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbsnapshot-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.describedbcluster-snapshots-message/dbcluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describedbcluster-snapshots-message/dbcluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describedbcluster-snapshots-message/snapshot-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describedbcluster-snapshots-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describedbcluster-snapshots-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describedbcluster-snapshots-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describedbcluster-snapshots-message/include-shared (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.describedbcluster-snapshots-message/include-public (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds/describedbcluster-snapshots-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.describedbcluster-snapshots-message/DBClusterIdentifier :portkey.aws.rds.describedbcluster-snapshots-message/DBClusterSnapshotIdentifier :portkey.aws.rds.describedbcluster-snapshots-message/SnapshotType :portkey.aws.rds.describedbcluster-snapshots-message/Filters :portkey.aws.rds.describedbcluster-snapshots-message/MaxRecords :portkey.aws.rds.describedbcluster-snapshots-message/Marker :portkey.aws.rds.describedbcluster-snapshots-message/IncludeShared :portkey.aws.rds.describedbcluster-snapshots-message/IncludePublic] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-froms3-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-froms3-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-froms3-message/character-set-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-froms3-message/enableiamdatabase-authentication (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-froms3-message/database-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-froms3-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-froms3-message/s3-ingestion-role-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-froms3-message/s3-bucket-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-froms3-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-froms3-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-froms3-message/dbcluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-froms3-message/source-engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-froms3-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-froms3-message/master-username (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-froms3-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-froms3-message/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-froms3-message/dbsubnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-froms3-message/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-froms3-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-froms3-message/source-engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-froms3-message/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-froms3-message/s3-prefix (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-froms3-message/dbcluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-froms3-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/restoredbcluster-froms3-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.restoredbcluster-froms3-message/DBClusterIdentifier :portkey.aws.rds.restoredbcluster-froms3-message/Engine :portkey.aws.rds.restoredbcluster-froms3-message/MasterUsername :portkey.aws.rds.restoredbcluster-froms3-message/MasterUserPassword :portkey.aws.rds.restoredbcluster-froms3-message/SourceEngine :portkey.aws.rds.restoredbcluster-froms3-message/SourceEngineVersion :portkey.aws.rds.restoredbcluster-froms3-message/S3BucketName :portkey.aws.rds.restoredbcluster-froms3-message/S3IngestionRoleArn] :opt-un [:portkey.aws.rds.restoredbcluster-froms3-message/BackupRetentionPeriod :portkey.aws.rds.restoredbcluster-froms3-message/OptionGroupName :portkey.aws.rds.restoredbcluster-froms3-message/CharacterSetName :portkey.aws.rds.restoredbcluster-froms3-message/EnableIAMDatabaseAuthentication :portkey.aws.rds.restoredbcluster-froms3-message/DatabaseName :portkey.aws.rds.restoredbcluster-froms3-message/PreferredMaintenanceWindow :portkey.aws.rds.restoredbcluster-froms3-message/Tags :portkey.aws.rds.restoredbcluster-froms3-message/VpcSecurityGroupIds :portkey.aws.rds.restoredbcluster-froms3-message/DBClusterParameterGroupName :portkey.aws.rds.restoredbcluster-froms3-message/EngineVersion :portkey.aws.rds.restoredbcluster-froms3-message/StorageEncrypted :portkey.aws.rds.restoredbcluster-froms3-message/DBSubnetGroupName :portkey.aws.rds.restoredbcluster-froms3-message/Port :portkey.aws.rds.restoredbcluster-froms3-message/KmsKeyId :portkey.aws.rds.restoredbcluster-froms3-message/S3Prefix :portkey.aws.rds/AvailabilityZones :portkey.aws.rds.restoredbcluster-froms3-message/PreferredBackupWindow] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.copydbparameter-group-message/sourcedbparameter-group-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copydbparameter-group-message/targetdbparameter-group-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copydbparameter-group-message/targetdbparameter-group-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copydbparameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/copydbparameter-group-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.copydbparameter-group-message/SourceDBParameterGroupIdentifier :portkey.aws.rds.copydbparameter-group-message/TargetDBParameterGroupIdentifier :portkey.aws.rds.copydbparameter-group-message/TargetDBParameterGroupDescription] :opt-un [:portkey.aws.rds.copydbparameter-group-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-role/role-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-role/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-role (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbcluster-role/RoleArn :portkey.aws.rds.dbcluster-role/Status] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.filter/name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.filter/values (clojure.spec.alpha/and :portkey.aws.rds/filter-value-list))
(clojure.spec.alpha/def :portkey.aws.rds/filter (portkey.aws/json-keys :req-un [:portkey.aws.rds.filter/Name :portkey.aws.rds.filter/Values] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/pending-maintenance-action-details (clojure.spec.alpha/coll-of :portkey.aws.rds/pending-maintenance-action))

(clojure.spec.alpha/def :portkey.aws.rds.copydbcluster-snapshot-message/sourcedbcluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copydbcluster-snapshot-message/targetdbcluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copydbcluster-snapshot-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copydbcluster-snapshot-message/pre-signed-url (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copydbcluster-snapshot-message/copy-tags (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.copydbcluster-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/copydbcluster-snapshot-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.copydbcluster-snapshot-message/SourceDBClusterSnapshotIdentifier :portkey.aws.rds.copydbcluster-snapshot-message/TargetDBClusterSnapshotIdentifier] :opt-un [:portkey.aws.rds.copydbcluster-snapshot-message/KmsKeyId :portkey.aws.rds.copydbcluster-snapshot-message/PreSignedUrl :portkey.aws.rds.copydbcluster-snapshot-message/CopyTags :portkey.aws.rds.copydbcluster-snapshot-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/source-region-list (clojure.spec.alpha/coll-of :portkey.aws.rds/source-region))

(clojure.spec.alpha/def :portkey.aws.rds/promote-read-replicadbcluster-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBCluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.dbparameter-group-status/dbparameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbparameter-group-status/parameter-apply-status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/dbparameter-group-status (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbparameter-group-status/DBParameterGroupName :portkey.aws.rds.dbparameter-group-status/ParameterApplyStatus] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/valid-storage-options-list (clojure.spec.alpha/coll-of :portkey.aws.rds/valid-storage-options))

(clojure.spec.alpha/def :portkey.aws.rds/dbsecurity-groups (clojure.spec.alpha/coll-of :portkey.aws.rds/dbsecurity-group))

(clojure.spec.alpha/def :portkey.aws.rds.describedbinstances-message/dbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describedbinstances-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describedbinstances-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describedbinstances-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describedbinstances-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.describedbinstances-message/DBInstanceIdentifier :portkey.aws.rds.describedbinstances-message/Filters :portkey.aws.rds.describedbinstances-message/MaxRecords :portkey.aws.rds.describedbinstances-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/restoredbinstance-to-point-in-time-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBInstance] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.resetdbcluster-parameter-group-message/dbcluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.resetdbcluster-parameter-group-message/reset-all-parameters (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.resetdbcluster-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.rds/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds/resetdbcluster-parameter-group-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.resetdbcluster-parameter-group-message/DBClusterParameterGroupName] :opt-un [:portkey.aws.rds.resetdbcluster-parameter-group-message/ResetAllParameters :portkey.aws.rds.resetdbcluster-parameter-group-message/Parameters] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.copydbcluster-parameter-group-message/sourcedbcluster-parameter-group-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copydbcluster-parameter-group-message/targetdbcluster-parameter-group-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copydbcluster-parameter-group-message/targetdbcluster-parameter-group-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copydbcluster-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/copydbcluster-parameter-group-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.copydbcluster-parameter-group-message/SourceDBClusterParameterGroupIdentifier :portkey.aws.rds.copydbcluster-parameter-group-message/TargetDBClusterParameterGroupIdentifier :portkey.aws.rds.copydbcluster-parameter-group-message/TargetDBClusterParameterGroupDescription] :opt-un [:portkey.aws.rds.copydbcluster-parameter-group-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.deletedbsnapshot-message/dbsnapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/deletedbsnapshot-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.deletedbsnapshot-message/DBSnapshotIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.modifydbcluster-parameter-group-message/dbcluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbcluster-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.rds/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds/modifydbcluster-parameter-group-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.modifydbcluster-parameter-group-message/DBClusterParameterGroupName :portkey.aws.rds.modifydbcluster-parameter-group-message/Parameters] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.describedbsnapshots-message/dbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describedbsnapshots-message/dbsnapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describedbsnapshots-message/snapshot-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describedbsnapshots-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describedbsnapshots-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describedbsnapshots-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describedbsnapshots-message/include-shared (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.describedbsnapshots-message/include-public (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds/describedbsnapshots-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.describedbsnapshots-message/DBInstanceIdentifier :portkey.aws.rds.describedbsnapshots-message/DBSnapshotIdentifier :portkey.aws.rds.describedbsnapshots-message/SnapshotType :portkey.aws.rds.describedbsnapshots-message/Filters :portkey.aws.rds.describedbsnapshots-message/MaxRecords :portkey.aws.rds.describedbsnapshots-message/Marker :portkey.aws.rds.describedbsnapshots-message/IncludeShared :portkey.aws.rds.describedbsnapshots-message/IncludePublic] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.dbparameter-group-details/parameters (clojure.spec.alpha/and :portkey.aws.rds/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds.dbparameter-group-details/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/dbparameter-group-details (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbparameter-group-details/Parameters :portkey.aws.rds.dbparameter-group-details/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.option-version/version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-version/is-default (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds/option-version (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.option-version/Version :portkey.aws.rds.option-version/IsDefault] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.deletedbparameter-group-message/dbparameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/deletedbparameter-group-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.deletedbparameter-group-message/DBParameterGroupName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/double-optional clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.rds/source-ids-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds.source-region-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.source-region-message/source-regions (clojure.spec.alpha/and :portkey.aws.rds/source-region-list))
(clojure.spec.alpha/def :portkey.aws.rds/source-region-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.source-region-message/Marker :portkey.aws.rds.source-region-message/SourceRegions] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbsnapshot-attribute-list (clojure.spec.alpha/coll-of :portkey.aws.rds/dbsnapshot-attribute))

(clojure.spec.alpha/def :portkey.aws.rds.source-region/region-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.source-region/endpoint (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.source-region/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/source-region (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.source-region/RegionName :portkey.aws.rds.source-region/Endpoint :portkey.aws.rds.source-region/Status] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/options-list (clojure.spec.alpha/coll-of :portkey.aws.rds/option))

(clojure.spec.alpha/def :portkey.aws.rds.describe-engine-default-parameters-message/dbparameter-group-family (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-engine-default-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-engine-default-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-engine-default-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-engine-default-parameters-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.describe-engine-default-parameters-message/DBParameterGroupFamily] :opt-un [:portkey.aws.rds.describe-engine-default-parameters-message/Filters :portkey.aws.rds.describe-engine-default-parameters-message/MaxRecords :portkey.aws.rds.describe-engine-default-parameters-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/createdbcluster-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBCluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/invaliddbinstance-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/snsno-authorization-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/copy-option-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/OptionGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.option/vpc-security-group-memberships (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.option/option-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option/dbsecurity-group-memberships (clojure.spec.alpha/and :portkey.aws.rds/dbsecurity-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.option/option-settings (clojure.spec.alpha/and :portkey.aws.rds/option-setting-configuration-list))
(clojure.spec.alpha/def :portkey.aws.rds.option/permanent (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.option/persistent (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.option/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.option/option-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option/option-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/option (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.option/VpcSecurityGroupMemberships :portkey.aws.rds.option/OptionVersion :portkey.aws.rds.option/DBSecurityGroupMemberships :portkey.aws.rds.option/OptionSettings :portkey.aws.rds.option/Permanent :portkey.aws.rds.option/Persistent :portkey.aws.rds.option/Port :portkey.aws.rds.option/OptionDescription :portkey.aws.rds.option/OptionName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/option-group-options-list (clojure.spec.alpha/coll-of :portkey.aws.rds/option-group-option))

(clojure.spec.alpha/def :portkey.aws.rds.createdbsnapshot-message/dbsnapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbsnapshot-message/dbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbsnapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/createdbsnapshot-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.createdbsnapshot-message/DBSnapshotIdentifier :portkey.aws.rds.createdbsnapshot-message/DBInstanceIdentifier] :opt-un [:portkey.aws.rds.createdbsnapshot-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbparameter-group-list (clojure.spec.alpha/coll-of :portkey.aws.rds/dbparameter-group))

(clojure.spec.alpha/def :portkey.aws.rds/rebootdbinstance-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBInstance] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/instance-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbparameter-group-status-list (clojure.spec.alpha/coll-of :portkey.aws.rds/dbparameter-group-status))

(clojure.spec.alpha/def :portkey.aws.rds.dbparameter-group-name-message/dbparameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/dbparameter-group-name-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbparameter-group-name-message/DBParameterGroupName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/apply-pending-maintenance-action-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/ResourcePendingMaintenanceActions] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/double-range-list (clojure.spec.alpha/coll-of :portkey.aws.rds/double-range))

(clojure.spec.alpha/def :portkey.aws.rds.describedbengine-versions-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describedbengine-versions-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describedbengine-versions-message/list-supported-character-sets (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describedbengine-versions-message/default-only (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.describedbengine-versions-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describedbengine-versions-message/list-supported-timezones (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describedbengine-versions-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describedbengine-versions-message/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describedbengine-versions-message/dbparameter-group-family (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describedbengine-versions-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.describedbengine-versions-message/MaxRecords :portkey.aws.rds.describedbengine-versions-message/Marker :portkey.aws.rds.describedbengine-versions-message/ListSupportedCharacterSets :portkey.aws.rds.describedbengine-versions-message/DefaultOnly :portkey.aws.rds.describedbengine-versions-message/EngineVersion :portkey.aws.rds.describedbengine-versions-message/ListSupportedTimezones :portkey.aws.rds.describedbengine-versions-message/Filters :portkey.aws.rds.describedbengine-versions-message/Engine :portkey.aws.rds.describedbengine-versions-message/DBParameterGroupFamily] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.promote-read-replicadbcluster-message/dbcluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/promote-read-replicadbcluster-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.promote-read-replicadbcluster-message/DBClusterIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-parameter-group-name-message/dbcluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-parameter-group-name-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbcluster-parameter-group-name-message/DBClusterParameterGroupName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.describe-source-regions-message/region-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-source-regions-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-source-regions-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-source-regions-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds/describe-source-regions-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.describe-source-regions-message/RegionName :portkey.aws.rds.describe-source-regions-message/MaxRecords :portkey.aws.rds.describe-source-regions-message/Marker :portkey.aws.rds.describe-source-regions-message/Filters] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.describe-event-subscriptions-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-event-subscriptions-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-event-subscriptions-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-event-subscriptions-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-event-subscriptions-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.describe-event-subscriptions-message/SubscriptionName :portkey.aws.rds.describe-event-subscriptions-message/Filters :portkey.aws.rds.describe-event-subscriptions-message/MaxRecords :portkey.aws.rds.describe-event-subscriptions-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.describedbsubnet-groups-message/dbsubnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describedbsubnet-groups-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describedbsubnet-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describedbsubnet-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describedbsubnet-groups-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.describedbsubnet-groups-message/DBSubnetGroupName :portkey.aws.rds.describedbsubnet-groups-message/Filters :portkey.aws.rds.describedbsubnet-groups-message/MaxRecords :portkey.aws.rds.describedbsubnet-groups-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/pending-maintenance-actions (clojure.spec.alpha/coll-of :portkey.aws.rds/resource-pending-maintenance-actions))

(clojure.spec.alpha/def :portkey.aws.rds/restoredbcluster-from-snapshot-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBCluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/enableiamdatabase-authentication (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/domainiamrole-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/dbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/dbname (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/availability-zone (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/license-model (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/domain (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/dbsnapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/dbsubnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/iops (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/tde-credential-password (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/storage-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/dbinstance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/multiaz (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds/restoredbinstance-fromdbsnapshot-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/DBInstanceIdentifier :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/DBSnapshotIdentifier] :opt-un [:portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/OptionGroupName :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/EnableIAMDatabaseAuthentication :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/PubliclyAccessible :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/DomainIAMRoleName :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/CopyTagsToSnapshot :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/EnableCloudwatchLogsExports :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/AutoMinorVersionUpgrade :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/Tags :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/DBName :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/AvailabilityZone :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/LicenseModel :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/Domain :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/DBSubnetGroupName :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/Port :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/Iops :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/TdeCredentialPassword :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/StorageType :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/DBInstanceClass :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/Engine :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/TdeCredentialArn :portkey.aws.rds.restoredbinstance-fromdbsnapshot-message/MultiAZ] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.option-group-option-setting/setting-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option-setting/setting-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option-setting/default-value (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option-setting/apply-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option-setting/allowed-values (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option-setting/is-modifiable (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds/option-group-option-setting (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.option-group-option-setting/SettingName :portkey.aws.rds.option-group-option-setting/SettingDescription :portkey.aws.rds.option-group-option-setting/DefaultValue :portkey.aws.rds.option-group-option-setting/ApplyType :portkey.aws.rds.option-group-option-setting/AllowedValues :portkey.aws.rds.option-group-option-setting/IsModifiable] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.subnet/subnet-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.subnet/subnet-availability-zone (clojure.spec.alpha/and :portkey.aws.rds/availability-zone))
(clojure.spec.alpha/def :portkey.aws.rds.subnet/subnet-status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/subnet (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.subnet/SubnetIdentifier :portkey.aws.rds.subnet/SubnetAvailabilityZone :portkey.aws.rds.subnet/SubnetStatus] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/option-group-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.dbsubnet-group-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/dbsubnet-group-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbsubnet-group-message/Marker :portkey.aws.rds/DBSubnetGroups] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-to-point-in-time-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-to-point-in-time-message/enableiamdatabase-authentication (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-to-point-in-time-message/restore-to-time (clojure.spec.alpha/and :portkey.aws.rds/tstamp))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-to-point-in-time-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-to-point-in-time-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-to-point-in-time-message/sourcedbcluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-to-point-in-time-message/dbsubnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-to-point-in-time-message/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-to-point-in-time-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-to-point-in-time-message/restore-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-to-point-in-time-message/dbcluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-to-point-in-time-message/use-latest-restorable-time (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds/restoredbcluster-to-point-in-time-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.restoredbcluster-to-point-in-time-message/DBClusterIdentifier :portkey.aws.rds.restoredbcluster-to-point-in-time-message/SourceDBClusterIdentifier] :opt-un [:portkey.aws.rds.restoredbcluster-to-point-in-time-message/OptionGroupName :portkey.aws.rds.restoredbcluster-to-point-in-time-message/EnableIAMDatabaseAuthentication :portkey.aws.rds.restoredbcluster-to-point-in-time-message/RestoreToTime :portkey.aws.rds.restoredbcluster-to-point-in-time-message/Tags :portkey.aws.rds.restoredbcluster-to-point-in-time-message/VpcSecurityGroupIds :portkey.aws.rds.restoredbcluster-to-point-in-time-message/DBSubnetGroupName :portkey.aws.rds.restoredbcluster-to-point-in-time-message/Port :portkey.aws.rds.restoredbcluster-to-point-in-time-message/KmsKeyId :portkey.aws.rds.restoredbcluster-to-point-in-time-message/RestoreType :portkey.aws.rds.restoredbcluster-to-point-in-time-message/UseLatestRestorableTime] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-from-snapshot-message/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-from-snapshot-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-from-snapshot-message/enableiamdatabase-authentication (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-from-snapshot-message/database-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-from-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-from-snapshot-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-from-snapshot-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-from-snapshot-message/dbsubnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-from-snapshot-message/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-from-snapshot-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-from-snapshot-message/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbcluster-from-snapshot-message/dbcluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/restoredbcluster-from-snapshot-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.restoredbcluster-from-snapshot-message/DBClusterIdentifier :portkey.aws.rds.restoredbcluster-from-snapshot-message/SnapshotIdentifier :portkey.aws.rds.restoredbcluster-from-snapshot-message/Engine] :opt-un [:portkey.aws.rds.restoredbcluster-from-snapshot-message/OptionGroupName :portkey.aws.rds.restoredbcluster-from-snapshot-message/EnableIAMDatabaseAuthentication :portkey.aws.rds.restoredbcluster-from-snapshot-message/DatabaseName :portkey.aws.rds.restoredbcluster-from-snapshot-message/Tags :portkey.aws.rds.restoredbcluster-from-snapshot-message/VpcSecurityGroupIds :portkey.aws.rds.restoredbcluster-from-snapshot-message/EngineVersion :portkey.aws.rds.restoredbcluster-from-snapshot-message/DBSubnetGroupName :portkey.aws.rds.restoredbcluster-from-snapshot-message/Port :portkey.aws.rds.restoredbcluster-from-snapshot-message/KmsKeyId :portkey.aws.rds/AvailabilityZones] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot/snapshot-create-time (clojure.spec.alpha/and :portkey.aws.rds/tstamp))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot/dbcluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot/snapshot-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot/license-model (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot/master-username (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot/port (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot/vpc-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot/cluster-create-time (clojure.spec.alpha/and :portkey.aws.rds/tstamp))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot/iamdatabase-authentication-enabled (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot/sourcedbcluster-snapshot-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot/dbcluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot/dbcluster-snapshot-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot/percent-progress (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-snapshot (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbcluster-snapshot/SnapshotCreateTime :portkey.aws.rds.dbcluster-snapshot/DBClusterSnapshotIdentifier :portkey.aws.rds.dbcluster-snapshot/Status :portkey.aws.rds.dbcluster-snapshot/SnapshotType :portkey.aws.rds.dbcluster-snapshot/LicenseModel :portkey.aws.rds.dbcluster-snapshot/AllocatedStorage :portkey.aws.rds.dbcluster-snapshot/MasterUsername :portkey.aws.rds.dbcluster-snapshot/EngineVersion :portkey.aws.rds.dbcluster-snapshot/StorageEncrypted :portkey.aws.rds.dbcluster-snapshot/Port :portkey.aws.rds.dbcluster-snapshot/VpcId :portkey.aws.rds.dbcluster-snapshot/KmsKeyId :portkey.aws.rds.dbcluster-snapshot/ClusterCreateTime :portkey.aws.rds.dbcluster-snapshot/IAMDatabaseAuthenticationEnabled :portkey.aws.rds.dbcluster-snapshot/Engine :portkey.aws.rds.dbcluster-snapshot/SourceDBClusterSnapshotArn :portkey.aws.rds/AvailabilityZones :portkey.aws.rds.dbcluster-snapshot/DBClusterIdentifier :portkey.aws.rds.dbcluster-snapshot/DBClusterSnapshotArn :portkey.aws.rds.dbcluster-snapshot/PercentProgress] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.modifydbsubnet-group-message/dbsubnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbsubnet-group-message/dbsubnet-group-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbsubnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.rds/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.rds/modifydbsubnet-group-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.modifydbsubnet-group-message/DBSubnetGroupName :portkey.aws.rds.modifydbsubnet-group-message/SubnetIds] :opt-un [:portkey.aws.rds.modifydbsubnet-group-message/DBSubnetGroupDescription] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.deletedbsecurity-group-message/dbsecurity-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/deletedbsecurity-group-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.deletedbsecurity-group-message/DBSecurityGroupName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.pending-cloudwatch-logs-exports/log-types-to-enable (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.pending-cloudwatch-logs-exports/log-types-to-disable (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds/pending-cloudwatch-logs-exports (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.pending-cloudwatch-logs-exports/LogTypesToEnable :portkey.aws.rds.pending-cloudwatch-logs-exports/LogTypesToDisable] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/promote-read-replica-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBInstance] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/dbsecurity-groups (clojure.spec.alpha/and :portkey.aws.rds/dbsecurity-group-name-list))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/promotion-tier (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/character-set-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/enableiamdatabase-authentication (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/domainiamrole-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/dbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/dbname (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/availability-zone (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/license-model (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/domain (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/monitoring-interval (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/timezone (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/master-username (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/dbsubnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/iops (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/tde-credential-password (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/storage-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/dbinstance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/dbparameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/enable-performance-insights (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/multiaz (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/performance-insightskmskey-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/dbcluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/createdbinstance-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.createdbinstance-message/DBInstanceIdentifier :portkey.aws.rds.createdbinstance-message/DBInstanceClass :portkey.aws.rds.createdbinstance-message/Engine] :opt-un [:portkey.aws.rds.createdbinstance-message/BackupRetentionPeriod :portkey.aws.rds.createdbinstance-message/OptionGroupName :portkey.aws.rds.createdbinstance-message/DBSecurityGroups :portkey.aws.rds.createdbinstance-message/PromotionTier :portkey.aws.rds.createdbinstance-message/CharacterSetName :portkey.aws.rds.createdbinstance-message/EnableIAMDatabaseAuthentication :portkey.aws.rds.createdbinstance-message/PubliclyAccessible :portkey.aws.rds.createdbinstance-message/DomainIAMRoleName :portkey.aws.rds.createdbinstance-message/PreferredMaintenanceWindow :portkey.aws.rds.createdbinstance-message/CopyTagsToSnapshot :portkey.aws.rds.createdbinstance-message/EnableCloudwatchLogsExports :portkey.aws.rds.createdbinstance-message/AutoMinorVersionUpgrade :portkey.aws.rds.createdbinstance-message/Tags :portkey.aws.rds.createdbinstance-message/DBName :portkey.aws.rds.createdbinstance-message/VpcSecurityGroupIds :portkey.aws.rds.createdbinstance-message/AvailabilityZone :portkey.aws.rds.createdbinstance-message/MasterUserPassword :portkey.aws.rds.createdbinstance-message/LicenseModel :portkey.aws.rds.createdbinstance-message/Domain :portkey.aws.rds.createdbinstance-message/AllocatedStorage :portkey.aws.rds.createdbinstance-message/MonitoringInterval :portkey.aws.rds.createdbinstance-message/Timezone :portkey.aws.rds.createdbinstance-message/MasterUsername :portkey.aws.rds.createdbinstance-message/EngineVersion :portkey.aws.rds.createdbinstance-message/StorageEncrypted :portkey.aws.rds.createdbinstance-message/DBSubnetGroupName :portkey.aws.rds.createdbinstance-message/Port :portkey.aws.rds.createdbinstance-message/KmsKeyId :portkey.aws.rds.createdbinstance-message/Iops :portkey.aws.rds.createdbinstance-message/TdeCredentialPassword :portkey.aws.rds.createdbinstance-message/StorageType :portkey.aws.rds.createdbinstance-message/DBParameterGroupName :portkey.aws.rds.createdbinstance-message/EnablePerformanceInsights :portkey.aws.rds.createdbinstance-message/MonitoringRoleArn :portkey.aws.rds.createdbinstance-message/TdeCredentialArn :portkey.aws.rds.createdbinstance-message/MultiAZ :portkey.aws.rds.createdbinstance-message/PerformanceInsightsKMSKeyId :portkey.aws.rds.createdbinstance-message/DBClusterIdentifier :portkey.aws.rds.createdbinstance-message/PreferredBackupWindow] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.promote-read-replica-message/dbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.promote-read-replica-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.promote-read-replica-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/promote-read-replica-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.promote-read-replica-message/DBInstanceIdentifier] :opt-un [:portkey.aws.rds.promote-read-replica-message/BackupRetentionPeriod :portkey.aws.rds.promote-read-replica-message/PreferredBackupWindow] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/key-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-list (clojure.spec.alpha/coll-of :portkey.aws.rds/dbcluster))

(clojure.spec.alpha/def :portkey.aws.rds.modifydbsnapshot-message/dbsnapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbsnapshot-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbsnapshot-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/modifydbsnapshot-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.modifydbsnapshot-message/DBSnapshotIdentifier] :opt-un [:portkey.aws.rds.modifydbsnapshot-message/EngineVersion :portkey.aws.rds.modifydbsnapshot-message/OptionGroupName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbengine-version-list (clojure.spec.alpha/coll-of :portkey.aws.rds/dbengine-version))

(clojure.spec.alpha/def :portkey.aws.rds.event-subscription/event-subscription-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.event-subscription/customer-aws-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.event-subscription/source-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.event-subscription/enabled (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.event-subscription/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.event-subscription/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.event-subscription/cust-subscription-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.event-subscription/subscription-creation-time (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/event-subscription (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/SourceIdsList :portkey.aws.rds.event-subscription/EventSubscriptionArn :portkey.aws.rds.event-subscription/CustomerAwsId :portkey.aws.rds.event-subscription/SourceType :portkey.aws.rds.event-subscription/Enabled :portkey.aws.rds.event-subscription/Status :portkey.aws.rds.event-subscription/SnsTopicArn :portkey.aws.rds/EventCategoriesList :portkey.aws.rds.event-subscription/CustSubscriptionId :portkey.aws.rds.event-subscription/SubscriptionCreationTime] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/snapshot-create-time (clojure.spec.alpha/and :portkey.aws.rds/tstamp))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/source-region (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/sourcedbsnapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/encrypted (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/dbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/instance-create-time (clojure.spec.alpha/and :portkey.aws.rds/tstamp))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/availability-zone (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/snapshot-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/license-model (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/timezone (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/master-username (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/dbsnapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/port (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/vpc-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/iops (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/storage-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/iamdatabase-authentication-enabled (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/dbsnapshot-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot/percent-progress (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds/dbsnapshot (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbsnapshot/SnapshotCreateTime :portkey.aws.rds.dbsnapshot/OptionGroupName :portkey.aws.rds.dbsnapshot/SourceRegion :portkey.aws.rds.dbsnapshot/SourceDBSnapshotIdentifier :portkey.aws.rds.dbsnapshot/Encrypted :portkey.aws.rds.dbsnapshot/DBInstanceIdentifier :portkey.aws.rds.dbsnapshot/InstanceCreateTime :portkey.aws.rds.dbsnapshot/AvailabilityZone :portkey.aws.rds.dbsnapshot/Status :portkey.aws.rds.dbsnapshot/SnapshotType :portkey.aws.rds.dbsnapshot/LicenseModel :portkey.aws.rds.dbsnapshot/AllocatedStorage :portkey.aws.rds.dbsnapshot/Timezone :portkey.aws.rds.dbsnapshot/MasterUsername :portkey.aws.rds.dbsnapshot/EngineVersion :portkey.aws.rds.dbsnapshot/DBSnapshotIdentifier :portkey.aws.rds.dbsnapshot/Port :portkey.aws.rds.dbsnapshot/VpcId :portkey.aws.rds.dbsnapshot/KmsKeyId :portkey.aws.rds.dbsnapshot/Iops :portkey.aws.rds.dbsnapshot/StorageType :portkey.aws.rds.dbsnapshot/IAMDatabaseAuthenticationEnabled :portkey.aws.rds.dbsnapshot/DBSnapshotArn :portkey.aws.rds.dbsnapshot/Engine :portkey.aws.rds.dbsnapshot/TdeCredentialArn :portkey.aws.rds.dbsnapshot/PercentProgress] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.describedblog-files-details/log-file-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describedblog-files-details/last-written (clojure.spec.alpha/and :portkey.aws.rds/long))
(clojure.spec.alpha/def :portkey.aws.rds.describedblog-files-details/size (clojure.spec.alpha/and :portkey.aws.rds/long))
(clojure.spec.alpha/def :portkey.aws.rds/describedblog-files-details (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.describedblog-files-details/LogFileName :portkey.aws.rds.describedblog-files-details/LastWritten :portkey.aws.rds.describedblog-files-details/Size] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-member/dbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-member/is-cluster-writer (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-member/dbcluster-parameter-group-status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-member/promotion-tier (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-member (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbcluster-member/DBInstanceIdentifier :portkey.aws.rds.dbcluster-member/IsClusterWriter :portkey.aws.rds.dbcluster-member/DBClusterParameterGroupStatus :portkey.aws.rds.dbcluster-member/PromotionTier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.create-option-group-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-option-group-message/engine-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-option-group-message/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-option-group-message/option-group-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-option-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/create-option-group-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.create-option-group-message/OptionGroupName :portkey.aws.rds.create-option-group-message/EngineName :portkey.aws.rds.create-option-group-message/MajorEngineVersion :portkey.aws.rds.create-option-group-message/OptionGroupDescription] :opt-un [:portkey.aws.rds.create-option-group-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/invalidvpcnetwork-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-role-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbinstance-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.add-role-todbcluster-message/dbcluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.add-role-todbcluster-message/role-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/add-role-todbcluster-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.add-role-todbcluster-message/DBClusterIdentifier :portkey.aws.rds.add-role-todbcluster-message/RoleArn] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/option-names-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds.deletedbinstance-message/dbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.deletedbinstance-message/skip-final-snapshot (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.deletedbinstance-message/finaldbsnapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/deletedbinstance-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.deletedbinstance-message/DBInstanceIdentifier] :opt-un [:portkey.aws.rds.deletedbinstance-message/SkipFinalSnapshot :portkey.aws.rds.deletedbinstance-message/FinalDBSnapshotIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot-attributes-result/dbsnapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot-attributes-result/dbsnapshot-attributes (clojure.spec.alpha/and :portkey.aws.rds/dbsnapshot-attribute-list))
(clojure.spec.alpha/def :portkey.aws.rds/dbsnapshot-attributes-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbsnapshot-attributes-result/DBSnapshotIdentifier :portkey.aws.rds.dbsnapshot-attributes-result/DBSnapshotAttributes] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/shared-snapshot-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/invaliddbsubnet-group-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/certificate-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/deletedbcluster-snapshot-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBClusterSnapshot] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/copydbcluster-snapshot-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBClusterSnapshot] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.startdbinstance-message/dbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/startdbinstance-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.startdbinstance-message/DBInstanceIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/reserveddbinstance-list (clojure.spec.alpha/coll-of :portkey.aws.rds/reserveddbinstance))

(clojure.spec.alpha/def :portkey.aws.rds.orderabledbinstance-options-message/orderabledbinstance-options (clojure.spec.alpha/and :portkey.aws.rds/orderabledbinstance-options-list))
(clojure.spec.alpha/def :portkey.aws.rds.orderabledbinstance-options-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/orderabledbinstance-options-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.orderabledbinstance-options-message/OrderableDBInstanceOptions :portkey.aws.rds.orderabledbinstance-options-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/event-categories-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/EventCategoriesMapList] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.resource-pending-maintenance-actions/resource-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/resource-pending-maintenance-actions (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.resource-pending-maintenance-actions/ResourceIdentifier :portkey.aws.rds/PendingMaintenanceActionDetails] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.deletedbcluster-snapshot-message/dbcluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/deletedbcluster-snapshot-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.deletedbcluster-snapshot-message/DBClusterSnapshotIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.apply-pending-maintenance-action-message/resource-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.apply-pending-maintenance-action-message/apply-action (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.apply-pending-maintenance-action-message/opt-in-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/apply-pending-maintenance-action-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.apply-pending-maintenance-action-message/ResourceIdentifier :portkey.aws.rds.apply-pending-maintenance-action-message/ApplyAction :portkey.aws.rds.apply-pending-maintenance-action-message/OptInType] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.describe-events-message/end-time (clojure.spec.alpha/and :portkey.aws.rds/tstamp))
(clojure.spec.alpha/def :portkey.aws.rds.describe-events-message/start-time (clojure.spec.alpha/and :portkey.aws.rds/tstamp))
(clojure.spec.alpha/def :portkey.aws.rds.describe-events-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-events-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-events-message/duration (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-events-message/event-categories (clojure.spec.alpha/and :portkey.aws.rds/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-events-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-events-message/source-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-events-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.describe-events-message/EndTime :portkey.aws.rds.describe-events-message/StartTime :portkey.aws.rds.describe-events-message/MaxRecords :portkey.aws.rds.describe-events-message/Marker :portkey.aws.rds/SourceType :portkey.aws.rds.describe-events-message/Duration :portkey.aws.rds.describe-events-message/EventCategories :portkey.aws.rds.describe-events-message/Filters :portkey.aws.rds.describe-events-message/SourceIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/subscription-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/replication-source-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/earliest-restorable-time (clojure.spec.alpha/and :portkey.aws.rds/tstamp))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/character-set-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/database-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/clone-group-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/master-username (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/hosted-zone-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/db-cluster-resource-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/dbcluster-members (clojure.spec.alpha/and :portkey.aws.rds/dbcluster-member-list))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/cluster-create-time (clojure.spec.alpha/and :portkey.aws.rds/tstamp))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/read-replica-identifiers (clojure.spec.alpha/and :portkey.aws.rds/read-replica-identifier-list))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/dbcluster-parameter-group (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/endpoint (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/iamdatabase-authentication-enabled (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/dbcluster-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/vpc-security-groups (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/reader-endpoint (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/associated-roles (clojure.spec.alpha/and :portkey.aws.rds/dbcluster-roles))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/multiaz (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/dbcluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/percent-progress (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/latest-restorable-time (clojure.spec.alpha/and :portkey.aws.rds/tstamp))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster/dbsubnet-group (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/dbcluster (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbcluster/BackupRetentionPeriod :portkey.aws.rds.dbcluster/ReplicationSourceIdentifier :portkey.aws.rds.dbcluster/EarliestRestorableTime :portkey.aws.rds.dbcluster/CharacterSetName :portkey.aws.rds.dbcluster/DatabaseName :portkey.aws.rds.dbcluster/PreferredMaintenanceWindow :portkey.aws.rds.dbcluster/CloneGroupId :portkey.aws.rds.dbcluster/Status :portkey.aws.rds.dbcluster/AllocatedStorage :portkey.aws.rds.dbcluster/MasterUsername :portkey.aws.rds.dbcluster/EngineVersion :portkey.aws.rds.dbcluster/HostedZoneId :portkey.aws.rds.dbcluster/StorageEncrypted :portkey.aws.rds.dbcluster/Port :portkey.aws.rds.dbcluster/DbClusterResourceId :portkey.aws.rds.dbcluster/DBClusterMembers :portkey.aws.rds.dbcluster/KmsKeyId :portkey.aws.rds.dbcluster/ClusterCreateTime :portkey.aws.rds.dbcluster/ReadReplicaIdentifiers :portkey.aws.rds.dbcluster/DBClusterParameterGroup :portkey.aws.rds.dbcluster/Endpoint :portkey.aws.rds.dbcluster/IAMDatabaseAuthenticationEnabled :portkey.aws.rds.dbcluster/DBClusterArn :portkey.aws.rds.dbcluster/VpcSecurityGroups :portkey.aws.rds.dbcluster/Engine :portkey.aws.rds/DBClusterOptionGroupMemberships :portkey.aws.rds/AvailabilityZones :portkey.aws.rds.dbcluster/ReaderEndpoint :portkey.aws.rds.dbcluster/AssociatedRoles :portkey.aws.rds.dbcluster/MultiAZ :portkey.aws.rds.dbcluster/DBClusterIdentifier :portkey.aws.rds.dbcluster/PreferredBackupWindow :portkey.aws.rds.dbcluster/PercentProgress :portkey.aws.rds.dbcluster/LatestRestorableTime :portkey.aws.rds.dbcluster/DBSubnetGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.option-group/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group/option-group-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group/engine-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group/options (clojure.spec.alpha/and :portkey.aws.rds/options-list))
(clojure.spec.alpha/def :portkey.aws.rds.option-group/allows-vpc-and-non-vpc-instance-memberships (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.option-group/vpc-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group/option-group-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/option-group (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.option-group/OptionGroupName :portkey.aws.rds.option-group/OptionGroupDescription :portkey.aws.rds.option-group/EngineName :portkey.aws.rds.option-group/MajorEngineVersion :portkey.aws.rds.option-group/Options :portkey.aws.rds.option-group/AllowsVpcAndNonVpcInstanceMemberships :portkey.aws.rds.option-group/VpcId :portkey.aws.rds.option-group/OptionGroupArn] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/authorization-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/option-groups-list (clojure.spec.alpha/coll-of :portkey.aws.rds/option-group))

(clojure.spec.alpha/def :portkey.aws.rds/iprange-list (clojure.spec.alpha/coll-of :portkey.aws.rds/iprange))

(clojure.spec.alpha/def :portkey.aws.rds.describe-pending-maintenance-actions-message/resource-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-pending-maintenance-actions-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-pending-maintenance-actions-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-pending-maintenance-actions-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds/describe-pending-maintenance-actions-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.describe-pending-maintenance-actions-message/ResourceIdentifier :portkey.aws.rds.describe-pending-maintenance-actions-message/Filters :portkey.aws.rds.describe-pending-maintenance-actions-message/Marker :portkey.aws.rds.describe-pending-maintenance-actions-message/MaxRecords] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/invaliddbsubnet-group-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/option-group-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/createdbsnapshot-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBSnapshot] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.dbinstance-status-info/status-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance-status-info/normal (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance-status-info/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance-status-info/message (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/dbinstance-status-info (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbinstance-status-info/StatusType :portkey.aws.rds.dbinstance-status-info/Normal :portkey.aws.rds.dbinstance-status-info/Status :portkey.aws.rds.dbinstance-status-info/Message] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.authorizedbsecurity-group-ingress-message/dbsecurity-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.authorizedbsecurity-group-ingress-message/cidrip (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.authorizedbsecurity-group-ingress-message/ec2-security-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.authorizedbsecurity-group-ingress-message/ec2-security-group-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.authorizedbsecurity-group-ingress-message/ec2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/authorizedbsecurity-group-ingress-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.authorizedbsecurity-group-ingress-message/DBSecurityGroupName] :opt-un [:portkey.aws.rds.authorizedbsecurity-group-ingress-message/CIDRIP :portkey.aws.rds.authorizedbsecurity-group-ingress-message/EC2SecurityGroupName :portkey.aws.rds.authorizedbsecurity-group-ingress-message/EC2SecurityGroupId :portkey.aws.rds.authorizedbsecurity-group-ingress-message/EC2SecurityGroupOwnerId] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/snstopic-arn-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.remove-role-fromdbcluster-message/dbcluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.remove-role-fromdbcluster-message/role-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/remove-role-fromdbcluster-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.remove-role-fromdbcluster-message/DBClusterIdentifier :portkey.aws.rds.remove-role-fromdbcluster-message/RoleArn] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/event-list (clojure.spec.alpha/coll-of :portkey.aws.rds/event))

(clojure.spec.alpha/def :portkey.aws.rds.describe-engine-default-cluster-parameters-message/dbparameter-group-family (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-engine-default-cluster-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-engine-default-cluster-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-engine-default-cluster-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-engine-default-cluster-parameters-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.describe-engine-default-cluster-parameters-message/DBParameterGroupFamily] :opt-un [:portkey.aws.rds.describe-engine-default-cluster-parameters-message/Filters :portkey.aws.rds.describe-engine-default-cluster-parameters-message/MaxRecords :portkey.aws.rds.describe-engine-default-cluster-parameters-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.events-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.events-message/events (clojure.spec.alpha/and :portkey.aws.rds/event-list))
(clojure.spec.alpha/def :portkey.aws.rds/events-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.events-message/Marker :portkey.aws.rds.events-message/Events] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.account-attributes-message/account-quotas (clojure.spec.alpha/and :portkey.aws.rds/account-quota-list))
(clojure.spec.alpha/def :portkey.aws.rds/account-attributes-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.account-attributes-message/AccountQuotas] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/source-type {:db-cluster-snapshot "db-cluster-snapshot", "db-security-group" "db-security-group", "db-cluster" "db-cluster", :db-snapshot "db-snapshot", :db-cluster "db-cluster", "db-instance" "db-instance", "db-cluster-snapshot" "db-cluster-snapshot", :db-parameter-group "db-parameter-group", "db-parameter-group" "db-parameter-group", "db-snapshot" "db-snapshot", :db-security-group "db-security-group", :db-instance "db-instance"})

(clojure.spec.alpha/def :portkey.aws.rds/orderabledbinstance-options-list (clojure.spec.alpha/coll-of :portkey.aws.rds/orderabledbinstance-option))

(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot-message/dbcluster-snapshots (clojure.spec.alpha/and :portkey.aws.rds/dbcluster-snapshot-list))
(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-snapshot-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbcluster-snapshot-message/Marker :portkey.aws.rds.dbcluster-snapshot-message/DBClusterSnapshots] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot-message/dbsnapshots (clojure.spec.alpha/and :portkey.aws.rds/dbsnapshot-list))
(clojure.spec.alpha/def :portkey.aws.rds/dbsnapshot-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbsnapshot-message/Marker :portkey.aws.rds.dbsnapshot-message/DBSnapshots] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/subscription-category-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.event/source-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.event/message (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.event/event-categories (clojure.spec.alpha/and :portkey.aws.rds/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds.event/date (clojure.spec.alpha/and :portkey.aws.rds/tstamp))
(clojure.spec.alpha/def :portkey.aws.rds.event/source-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/event (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.event/SourceIdentifier :portkey.aws.rds/SourceType :portkey.aws.rds.event/Message :portkey.aws.rds.event/EventCategories :portkey.aws.rds.event/Date :portkey.aws.rds.event/SourceArn] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.option-group-options-message/option-group-options (clojure.spec.alpha/and :portkey.aws.rds/option-group-options-list))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-options-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/option-group-options-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.option-group-options-message/OptionGroupOptions :portkey.aws.rds.option-group-options-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/revokedbsecurity-group-ingress-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBSecurityGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/availability-zone-list (clojure.spec.alpha/coll-of :portkey.aws.rds/availability-zone))

(clojure.spec.alpha/def :portkey.aws.rds.resetdbparameter-group-message/dbparameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.resetdbparameter-group-message/reset-all-parameters (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.resetdbparameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.rds/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds/resetdbparameter-group-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.resetdbparameter-group-message/DBParameterGroupName] :opt-un [:portkey.aws.rds.resetdbparameter-group-message/ResetAllParameters :portkey.aws.rds.resetdbparameter-group-message/Parameters] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.describedbcluster-parameter-groups-message/dbcluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describedbcluster-parameter-groups-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describedbcluster-parameter-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describedbcluster-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describedbcluster-parameter-groups-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.describedbcluster-parameter-groups-message/DBClusterParameterGroupName :portkey.aws.rds.describedbcluster-parameter-groups-message/Filters :portkey.aws.rds.describedbcluster-parameter-groups-message/MaxRecords :portkey.aws.rds.describedbcluster-parameter-groups-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.availability-zone/name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/availability-zone (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.availability-zone/Name] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.event-subscriptions-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/event-subscriptions-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.event-subscriptions-message/Marker :portkey.aws.rds/EventSubscriptionsList] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstances-offering-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstances-offering-message/reserveddbinstances-offerings (clojure.spec.alpha/and :portkey.aws.rds/reserveddbinstances-offering-list))
(clojure.spec.alpha/def :portkey.aws.rds/reserveddbinstances-offering-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.reserveddbinstances-offering-message/Marker :portkey.aws.rds.reserveddbinstances-offering-message/ReservedDBInstancesOfferings] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/createdbsubnet-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBSubnetGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/create-event-subscription-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/EventSubscription] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-parameter-group-list (clojure.spec.alpha/coll-of :portkey.aws.rds/dbcluster-parameter-group))

(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-parameter-group-details/parameters (clojure.spec.alpha/and :portkey.aws.rds/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-parameter-group-details/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-parameter-group-details (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbcluster-parameter-group-details/Parameters :portkey.aws.rds.dbcluster-parameter-group-details/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/createdbsecurity-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBSecurityGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.describe-orderabledbinstance-options-message/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-orderabledbinstance-options-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-orderabledbinstance-options-message/dbinstance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-orderabledbinstance-options-message/license-model (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-orderabledbinstance-options-message/vpc (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-orderabledbinstance-options-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-orderabledbinstance-options-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-orderabledbinstance-options-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-orderabledbinstance-options-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.describe-orderabledbinstance-options-message/Engine] :opt-un [:portkey.aws.rds.describe-orderabledbinstance-options-message/EngineVersion :portkey.aws.rds.describe-orderabledbinstance-options-message/DBInstanceClass :portkey.aws.rds.describe-orderabledbinstance-options-message/LicenseModel :portkey.aws.rds.describe-orderabledbinstance-options-message/Vpc :portkey.aws.rds.describe-orderabledbinstance-options-message/Filters :portkey.aws.rds.describe-orderabledbinstance-options-message/MaxRecords :portkey.aws.rds.describe-orderabledbinstance-options-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.createdbsubnet-group-message/dbsubnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbsubnet-group-message/dbsubnet-group-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbsubnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.rds/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.rds.createdbsubnet-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/createdbsubnet-group-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.createdbsubnet-group-message/DBSubnetGroupName :portkey.aws.rds.createdbsubnet-group-message/DBSubnetGroupDescription :portkey.aws.rds.createdbsubnet-group-message/SubnetIds] :opt-un [:portkey.aws.rds.createdbsubnet-group-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/invaliddbsecurity-group-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-member-list (clojure.spec.alpha/coll-of :portkey.aws.rds/dbcluster-member))

(clojure.spec.alpha/def :portkey.aws.rds.option-groups/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/option-groups (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/OptionGroupsList :portkey.aws.rds.option-groups/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.delete-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/delete-event-subscription-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.delete-event-subscription-message/SubscriptionName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.copy-option-group-message/source-option-group-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copy-option-group-message/target-option-group-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copy-option-group-message/target-option-group-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copy-option-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/copy-option-group-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.copy-option-group-message/SourceOptionGroupIdentifier :portkey.aws.rds.copy-option-group-message/TargetOptionGroupIdentifier :portkey.aws.rds.copy-option-group-message/TargetOptionGroupDescription] :opt-un [:portkey.aws.rds.copy-option-group-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/storage-type-not-supported-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-role-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/read-replicadbinstance-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-parameter-group-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/authorizedbsecurity-group-ingress-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBSecurityGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbsubnet-group-does-not-cover-enoughazs (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.dbparameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbparameter-groups-message/dbparameter-groups (clojure.spec.alpha/and :portkey.aws.rds/dbparameter-group-list))
(clojure.spec.alpha/def :portkey.aws.rds/dbparameter-groups-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbparameter-groups-message/Marker :portkey.aws.rds.dbparameter-groups-message/DBParameterGroups] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.recurring-charge/recurring-charge-amount (clojure.spec.alpha/and :portkey.aws.rds/double))
(clojure.spec.alpha/def :portkey.aws.rds.recurring-charge/recurring-charge-frequency (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/recurring-charge (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.recurring-charge/RecurringChargeAmount :portkey.aws.rds.recurring-charge/RecurringChargeFrequency] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/describe-engine-default-parameters-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/EngineDefaults] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/valid-upgrade-target-list (clojure.spec.alpha/coll-of :portkey.aws.rds/upgrade-target))

(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-snapshot-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/authorization-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.copydbsnapshot-message/sourcedbsnapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copydbsnapshot-message/targetdbsnapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copydbsnapshot-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copydbsnapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.copydbsnapshot-message/copy-tags (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.copydbsnapshot-message/pre-signed-url (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copydbsnapshot-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/copydbsnapshot-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.copydbsnapshot-message/SourceDBSnapshotIdentifier :portkey.aws.rds.copydbsnapshot-message/TargetDBSnapshotIdentifier] :opt-un [:portkey.aws.rds.copydbsnapshot-message/KmsKeyId :portkey.aws.rds.copydbsnapshot-message/Tags :portkey.aws.rds.copydbsnapshot-message/CopyTags :portkey.aws.rds.copydbsnapshot-message/PreSignedUrl :portkey.aws.rds.copydbsnapshot-message/OptionGroupName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-role-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.range/from (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.range/to (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.range/step (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds/range (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.range/From :portkey.aws.rds.range/To :portkey.aws.rds.range/Step] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-read-replica-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-read-replica-message/enableiamdatabase-authentication (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-read-replica-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-read-replica-message/pre-signed-url (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-read-replica-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-read-replica-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-read-replica-message/dbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-read-replica-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-read-replica-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-read-replica-message/availability-zone (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-read-replica-message/sourcedbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-read-replica-message/monitoring-interval (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-read-replica-message/dbsubnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-read-replica-message/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-read-replica-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-read-replica-message/iops (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-read-replica-message/storage-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-read-replica-message/dbinstance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-read-replica-message/enable-performance-insights (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-read-replica-message/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-read-replica-message/multiaz (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbinstance-read-replica-message/performance-insightskmskey-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/createdbinstance-read-replica-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.createdbinstance-read-replica-message/DBInstanceIdentifier :portkey.aws.rds.createdbinstance-read-replica-message/SourceDBInstanceIdentifier] :opt-un [:portkey.aws.rds.createdbinstance-read-replica-message/OptionGroupName :portkey.aws.rds.createdbinstance-read-replica-message/EnableIAMDatabaseAuthentication :portkey.aws.rds.createdbinstance-read-replica-message/PubliclyAccessible :portkey.aws.rds.createdbinstance-read-replica-message/PreSignedUrl :portkey.aws.rds.createdbinstance-read-replica-message/CopyTagsToSnapshot :portkey.aws.rds.createdbinstance-read-replica-message/EnableCloudwatchLogsExports :portkey.aws.rds.createdbinstance-read-replica-message/AutoMinorVersionUpgrade :portkey.aws.rds.createdbinstance-read-replica-message/Tags :portkey.aws.rds.createdbinstance-read-replica-message/AvailabilityZone :portkey.aws.rds.createdbinstance-read-replica-message/MonitoringInterval :portkey.aws.rds.createdbinstance-read-replica-message/DBSubnetGroupName :portkey.aws.rds.createdbinstance-read-replica-message/Port :portkey.aws.rds.createdbinstance-read-replica-message/KmsKeyId :portkey.aws.rds.createdbinstance-read-replica-message/Iops :portkey.aws.rds.createdbinstance-read-replica-message/StorageType :portkey.aws.rds.createdbinstance-read-replica-message/DBInstanceClass :portkey.aws.rds.createdbinstance-read-replica-message/EnablePerformanceInsights :portkey.aws.rds.createdbinstance-read-replica-message/MonitoringRoleArn :portkey.aws.rds.createdbinstance-read-replica-message/MultiAZ :portkey.aws.rds.createdbinstance-read-replica-message/PerformanceInsightsKMSKeyId] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/createdbinstance-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBInstance] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/copydbcluster-parameter-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBClusterParameterGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/subnet-already-in-use (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/insufficient-storage-cluster-capacity-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-snapshot-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/create-option-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/OptionGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/copydbsnapshot-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBSnapshot] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/invaliddbcluster-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-roles (clojure.spec.alpha/coll-of :portkey.aws.rds/dbcluster-role))

(clojure.spec.alpha/def :portkey.aws.rds.certificate-message/certificates (clojure.spec.alpha/and :portkey.aws.rds/certificate-list))
(clojure.spec.alpha/def :portkey.aws.rds.certificate-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/certificate-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.certificate-message/Certificates :portkey.aws.rds.certificate-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/modifydbsubnet-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBSubnetGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/engine-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/requires-auto-minor-engine-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/option-group-option-versions (clojure.spec.alpha/and :portkey.aws.rds/option-group-option-versions-list))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/permanent (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/vpc-only (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/port-required (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/option-group-option-settings (clojure.spec.alpha/and :portkey.aws.rds/option-group-option-settings-list))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/persistent (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/minimum-required-minor-engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/default-port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/supports-option-version-downgrade (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/option-group-option (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.option-group-option/MajorEngineVersion :portkey.aws.rds.option-group-option/EngineName :portkey.aws.rds.option-group-option/RequiresAutoMinorEngineVersionUpgrade :portkey.aws.rds.option-group-option/OptionGroupOptionVersions :portkey.aws.rds.option-group-option/Permanent :portkey.aws.rds.option-group-option/VpcOnly :portkey.aws.rds.option-group-option/PortRequired :portkey.aws.rds/OptionsConflictsWith :portkey.aws.rds.option-group-option/OptionGroupOptionSettings :portkey.aws.rds.option-group-option/Persistent :portkey.aws.rds.option-group-option/Description :portkey.aws.rds.option-group-option/MinimumRequiredMinorEngineVersion :portkey.aws.rds.option-group-option/DefaultPort :portkey.aws.rds.option-group-option/SupportsOptionVersionDowngrade :portkey.aws.rds/OptionsDependedOn :portkey.aws.rds.option-group-option/Name] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/option-group-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/invalid-subnet (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/modifydbsnapshot-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBSnapshot] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/tag-list (clojure.spec.alpha/coll-of :portkey.aws.rds/tag))

(clojure.spec.alpha/def :portkey.aws.rds.modifydbcluster-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbcluster-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbcluster-message/enableiamdatabase-authentication (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbcluster-message/newdbcluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbcluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbcluster-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbcluster-message/dbcluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbcluster-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbcluster-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbcluster-message/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbcluster-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbcluster-message/dbcluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbcluster-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/modifydbcluster-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.modifydbcluster-message/DBClusterIdentifier] :opt-un [:portkey.aws.rds.modifydbcluster-message/BackupRetentionPeriod :portkey.aws.rds.modifydbcluster-message/OptionGroupName :portkey.aws.rds.modifydbcluster-message/EnableIAMDatabaseAuthentication :portkey.aws.rds.modifydbcluster-message/NewDBClusterIdentifier :portkey.aws.rds.modifydbcluster-message/PreferredMaintenanceWindow :portkey.aws.rds.modifydbcluster-message/VpcSecurityGroupIds :portkey.aws.rds.modifydbcluster-message/DBClusterParameterGroupName :portkey.aws.rds.modifydbcluster-message/MasterUserPassword :portkey.aws.rds.modifydbcluster-message/EngineVersion :portkey.aws.rds.modifydbcluster-message/Port :portkey.aws.rds.modifydbcluster-message/ApplyImmediately :portkey.aws.rds.modifydbcluster-message/PreferredBackupWindow] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/modify-option-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/OptionGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.timezone/timezone-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/timezone (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.timezone/TimezoneName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-snapshot-list (clojure.spec.alpha/coll-of :portkey.aws.rds/dbcluster-snapshot))

(clojure.spec.alpha/def :portkey.aws.rds.dbengine-version/default-character-set (clojure.spec.alpha/and :portkey.aws.rds/character-set))
(clojure.spec.alpha/def :portkey.aws.rds.dbengine-version/dbengine-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbengine-version/supported-timezones (clojure.spec.alpha/and :portkey.aws.rds/supported-timezones-list))
(clojure.spec.alpha/def :portkey.aws.rds.dbengine-version/supports-read-replica (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.dbengine-version/dbengine-version-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbengine-version/valid-upgrade-target (clojure.spec.alpha/and :portkey.aws.rds/valid-upgrade-target-list))
(clojure.spec.alpha/def :portkey.aws.rds.dbengine-version/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbengine-version/supported-character-sets (clojure.spec.alpha/and :portkey.aws.rds/supported-character-sets-list))
(clojure.spec.alpha/def :portkey.aws.rds.dbengine-version/supports-log-exports-to-cloudwatch-logs (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.dbengine-version/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbengine-version/exportable-log-types (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.dbengine-version/dbparameter-group-family (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/dbengine-version (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbengine-version/DefaultCharacterSet :portkey.aws.rds.dbengine-version/DBEngineDescription :portkey.aws.rds.dbengine-version/SupportedTimezones :portkey.aws.rds.dbengine-version/SupportsReadReplica :portkey.aws.rds.dbengine-version/DBEngineVersionDescription :portkey.aws.rds.dbengine-version/ValidUpgradeTarget :portkey.aws.rds.dbengine-version/EngineVersion :portkey.aws.rds.dbengine-version/SupportedCharacterSets :portkey.aws.rds.dbengine-version/SupportsLogExportsToCloudwatchLogs :portkey.aws.rds.dbengine-version/Engine :portkey.aws.rds.dbengine-version/ExportableLogTypes :portkey.aws.rds.dbengine-version/DBParameterGroupFamily] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.describedbcluster-parameters-message/dbcluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describedbcluster-parameters-message/source (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describedbcluster-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describedbcluster-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describedbcluster-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describedbcluster-parameters-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.describedbcluster-parameters-message/DBClusterParameterGroupName] :opt-un [:portkey.aws.rds.describedbcluster-parameters-message/Source :portkey.aws.rds.describedbcluster-parameters-message/Filters :portkey.aws.rds.describedbcluster-parameters-message/MaxRecords :portkey.aws.rds.describedbcluster-parameters-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/options-conflicts-with (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds/option-setting-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.rds/option-setting))

(clojure.spec.alpha/def :portkey.aws.rds/subscription-already-exist-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbupgrade-dependency-failure-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.add-source-identifier-to-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.add-source-identifier-to-subscription-message/source-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/add-source-identifier-to-subscription-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.add-source-identifier-to-subscription-message/SubscriptionName :portkey.aws.rds.add-source-identifier-to-subscription-message/SourceIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/domain-membership-list (clojure.spec.alpha/coll-of :portkey.aws.rds/domain-membership))

(clojure.spec.alpha/def :portkey.aws.rds.add-tags-to-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.add-tags-to-resource-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/add-tags-to-resource-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.add-tags-to-resource-message/ResourceName :portkey.aws.rds.add-tags-to-resource-message/Tags] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.valid-storage-options/storage-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.valid-storage-options/storage-size (clojure.spec.alpha/and :portkey.aws.rds/range-list))
(clojure.spec.alpha/def :portkey.aws.rds.valid-storage-options/provisioned-iops (clojure.spec.alpha/and :portkey.aws.rds/range-list))
(clojure.spec.alpha/def :portkey.aws.rds.valid-storage-options/iops-to-storage-ratio (clojure.spec.alpha/and :portkey.aws.rds/double-range-list))
(clojure.spec.alpha/def :portkey.aws.rds/valid-storage-options (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.valid-storage-options/StorageType :portkey.aws.rds.valid-storage-options/StorageSize :portkey.aws.rds.valid-storage-options/ProvisionedIops :portkey.aws.rds.valid-storage-options/IopsToStorageRatio] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/invalid-event-subscription-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/restoredbcluster-froms3-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBCluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/tag-list-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/TagList] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.createdbparameter-group-message/dbparameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbparameter-group-message/dbparameter-group-family (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbparameter-group-message/description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbparameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/createdbparameter-group-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.createdbparameter-group-message/DBParameterGroupName :portkey.aws.rds.createdbparameter-group-message/DBParameterGroupFamily :portkey.aws.rds.createdbparameter-group-message/Description] :opt-un [:portkey.aws.rds.createdbparameter-group-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.vpc-security-group-membership/vpc-security-group-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.vpc-security-group-membership/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/vpc-security-group-membership (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.vpc-security-group-membership/VpcSecurityGroupId :portkey.aws.rds.vpc-security-group-membership/Status] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/invalids3-bucket-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/enableiamdatabase-authentication (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/domainiamrole-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/dbname (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/availability-zone (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/restore-time (clojure.spec.alpha/and :portkey.aws.rds/tstamp))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/license-model (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/domain (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/sourcedbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/dbsubnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/targetdbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/iops (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/tde-credential-password (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/storage-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/dbinstance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/multiaz (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-to-point-in-time-message/use-latest-restorable-time (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds/restoredbinstance-to-point-in-time-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.restoredbinstance-to-point-in-time-message/SourceDBInstanceIdentifier :portkey.aws.rds.restoredbinstance-to-point-in-time-message/TargetDBInstanceIdentifier] :opt-un [:portkey.aws.rds.restoredbinstance-to-point-in-time-message/OptionGroupName :portkey.aws.rds.restoredbinstance-to-point-in-time-message/EnableIAMDatabaseAuthentication :portkey.aws.rds.restoredbinstance-to-point-in-time-message/PubliclyAccessible :portkey.aws.rds.restoredbinstance-to-point-in-time-message/DomainIAMRoleName :portkey.aws.rds.restoredbinstance-to-point-in-time-message/CopyTagsToSnapshot :portkey.aws.rds.restoredbinstance-to-point-in-time-message/EnableCloudwatchLogsExports :portkey.aws.rds.restoredbinstance-to-point-in-time-message/AutoMinorVersionUpgrade :portkey.aws.rds.restoredbinstance-to-point-in-time-message/Tags :portkey.aws.rds.restoredbinstance-to-point-in-time-message/DBName :portkey.aws.rds.restoredbinstance-to-point-in-time-message/AvailabilityZone :portkey.aws.rds.restoredbinstance-to-point-in-time-message/RestoreTime :portkey.aws.rds.restoredbinstance-to-point-in-time-message/LicenseModel :portkey.aws.rds.restoredbinstance-to-point-in-time-message/Domain :portkey.aws.rds.restoredbinstance-to-point-in-time-message/DBSubnetGroupName :portkey.aws.rds.restoredbinstance-to-point-in-time-message/Port :portkey.aws.rds.restoredbinstance-to-point-in-time-message/Iops :portkey.aws.rds.restoredbinstance-to-point-in-time-message/TdeCredentialPassword :portkey.aws.rds.restoredbinstance-to-point-in-time-message/StorageType :portkey.aws.rds.restoredbinstance-to-point-in-time-message/DBInstanceClass :portkey.aws.rds.restoredbinstance-to-point-in-time-message/Engine :portkey.aws.rds.restoredbinstance-to-point-in-time-message/TdeCredentialArn :portkey.aws.rds.restoredbinstance-to-point-in-time-message/MultiAZ :portkey.aws.rds.restoredbinstance-to-point-in-time-message/UseLatestRestorableTime] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.validdbinstance-modifications-message/storage (clojure.spec.alpha/and :portkey.aws.rds/valid-storage-options-list))
(clojure.spec.alpha/def :portkey.aws.rds/validdbinstance-modifications-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.validdbinstance-modifications-message/Storage] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/authorization-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbsubnet-group-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.modifydbsnapshot-attribute-message/dbsnapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbsnapshot-attribute-message/attribute-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbsnapshot-attribute-message/values-to-add (clojure.spec.alpha/and :portkey.aws.rds/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbsnapshot-attribute-message/values-to-remove (clojure.spec.alpha/and :portkey.aws.rds/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.rds/modifydbsnapshot-attribute-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.modifydbsnapshot-attribute-message/DBSnapshotIdentifier :portkey.aws.rds.modifydbsnapshot-attribute-message/AttributeName] :opt-un [:portkey.aws.rds.modifydbsnapshot-attribute-message/ValuesToAdd :portkey.aws.rds.modifydbsnapshot-attribute-message/ValuesToRemove] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dblog-file-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/provisioned-iops-not-available-inazfault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstance-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstance-message/reserveddbinstances (clojure.spec.alpha/and :portkey.aws.rds/reserveddbinstance-list))
(clojure.spec.alpha/def :portkey.aws.rds/reserveddbinstance-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.reserveddbinstance-message/Marker :portkey.aws.rds.reserveddbinstance-message/ReservedDBInstances] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.modifydbparameter-group-message/dbparameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbparameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.rds/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds/modifydbparameter-group-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.modifydbparameter-group-message/DBParameterGroupName :portkey.aws.rds.modifydbparameter-group-message/Parameters] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.describe-validdbinstance-modifications-message/dbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-validdbinstance-modifications-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.describe-validdbinstance-modifications-message/DBInstanceIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-snapshot-attribute-list (clojure.spec.alpha/coll-of :portkey.aws.rds/dbcluster-snapshot-attribute))

(clojure.spec.alpha/def :portkey.aws.rds/account-quota-list (clojure.spec.alpha/coll-of :portkey.aws.rds/account-quota))

(clojure.spec.alpha/def :portkey.aws.rds/modifydbinstance-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBInstance] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.rebootdbinstance-message/dbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.rebootdbinstance-message/force-failover (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds/rebootdbinstance-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.rebootdbinstance-message/DBInstanceIdentifier] :opt-un [:portkey.aws.rds.rebootdbinstance-message/ForceFailover] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/restoredbinstance-froms3-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBInstance] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/reserveddbinstance-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/invalid-option-group-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot-attribute/attribute-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsnapshot-attribute/attribute-values (clojure.spec.alpha/and :portkey.aws.rds/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.rds/dbsnapshot-attribute (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbsnapshot-attribute/AttributeName :portkey.aws.rds.dbsnapshot-attribute/AttributeValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstances-offering/currency-code (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstances-offering/reserveddbinstances-offering-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstances-offering/fixed-price (clojure.spec.alpha/and :portkey.aws.rds/double))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstances-offering/duration (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstances-offering/usage-price (clojure.spec.alpha/and :portkey.aws.rds/double))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstances-offering/product-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstances-offering/dbinstance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstances-offering/recurring-charges (clojure.spec.alpha/and :portkey.aws.rds/recurring-charge-list))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstances-offering/offering-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstances-offering/multiaz (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds/reserveddbinstances-offering (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.reserveddbinstances-offering/CurrencyCode :portkey.aws.rds.reserveddbinstances-offering/ReservedDBInstancesOfferingId :portkey.aws.rds.reserveddbinstances-offering/FixedPrice :portkey.aws.rds.reserveddbinstances-offering/Duration :portkey.aws.rds.reserveddbinstances-offering/UsagePrice :portkey.aws.rds.reserveddbinstances-offering/ProductDescription :portkey.aws.rds.reserveddbinstances-offering/DBInstanceClass :portkey.aws.rds.reserveddbinstances-offering/RecurringCharges :portkey.aws.rds.reserveddbinstances-offering/OfferingType :portkey.aws.rds.reserveddbinstances-offering/MultiAZ] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/resource-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.ec2-security-group/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.ec2-security-group/ec2-security-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.ec2-security-group/ec2-security-group-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.ec2-security-group/ec2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/ec2-security-group (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.ec2-security-group/Status :portkey.aws.rds.ec2-security-group/EC2SecurityGroupName :portkey.aws.rds.ec2-security-group/EC2SecurityGroupId :portkey.aws.rds.ec2-security-group/EC2SecurityGroupOwnerId] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/option-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.rds/option-group-membership))

(clojure.spec.alpha/def :portkey.aws.rds.remove-source-identifier-from-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.remove-source-identifier-from-subscription-message/source-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/remove-source-identifier-from-subscription-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.remove-source-identifier-from-subscription-message/SubscriptionName :portkey.aws.rds.remove-source-identifier-from-subscription-message/SourceIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/createdbcluster-parameter-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBClusterParameterGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/point-in-time-restore-not-enabled-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.remove-tags-from-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.remove-tags-from-resource-message/tag-keys (clojure.spec.alpha/and :portkey.aws.rds/key-list))
(clojure.spec.alpha/def :portkey.aws.rds/remove-tags-from-resource-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.remove-tags-from-resource-message/ResourceName :portkey.aws.rds.remove-tags-from-resource-message/TagKeys] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/event-categories-map-list (clojure.spec.alpha/coll-of :portkey.aws.rds/event-categories-map))

(clojure.spec.alpha/def :portkey.aws.rds/integer clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.rds/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.rds.modifydbcluster-snapshot-attribute-message/dbcluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbcluster-snapshot-attribute-message/attribute-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbcluster-snapshot-attribute-message/values-to-add (clojure.spec.alpha/and :portkey.aws.rds/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbcluster-snapshot-attribute-message/values-to-remove (clojure.spec.alpha/and :portkey.aws.rds/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.rds/modifydbcluster-snapshot-attribute-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.modifydbcluster-snapshot-attribute-message/DBClusterSnapshotIdentifier :portkey.aws.rds.modifydbcluster-snapshot-attribute-message/AttributeName] :opt-un [:portkey.aws.rds.modifydbcluster-snapshot-attribute-message/ValuesToAdd :portkey.aws.rds.modifydbcluster-snapshot-attribute-message/ValuesToRemove] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot-attribute/attribute-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot-attribute/attribute-values (clojure.spec.alpha/and :portkey.aws.rds/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-snapshot-attribute (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbcluster-snapshot-attribute/AttributeName :portkey.aws.rds.dbcluster-snapshot-attribute/AttributeValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.parameter/data-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.parameter/parameter-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.parameter/source (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.parameter/minimum-engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.parameter/allowed-values (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.parameter/apply-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.parameter/description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.parameter/is-modifiable (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.parameter/parameter-value (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/parameter (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.parameter/DataType :portkey.aws.rds.parameter/ParameterName :portkey.aws.rds.parameter/Source :portkey.aws.rds.parameter/MinimumEngineVersion :portkey.aws.rds.parameter/AllowedValues :portkey.aws.rds.parameter/ApplyType :portkey.aws.rds.parameter/Description :portkey.aws.rds/ApplyMethod :portkey.aws.rds.parameter/IsModifiable :portkey.aws.rds.parameter/ParameterValue] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/vpc-security-group-id-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds/describedblog-files-list (clojure.spec.alpha/coll-of :portkey.aws.rds/describedblog-files-details))

(clojure.spec.alpha/def :portkey.aws.rds.dbsecurity-group-membership/dbsecurity-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsecurity-group-membership/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/dbsecurity-group-membership (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbsecurity-group-membership/DBSecurityGroupName :portkey.aws.rds.dbsecurity-group-membership/Status] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/read-replicadbcluster-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot-attributes-result/dbcluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-snapshot-attributes-result/dbcluster-snapshot-attributes (clojure.spec.alpha/and :portkey.aws.rds/dbcluster-snapshot-attribute-list))
(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-snapshot-attributes-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbcluster-snapshot-attributes-result/DBClusterSnapshotIdentifier :portkey.aws.rds.dbcluster-snapshot-attributes-result/DBClusterSnapshotAttributes] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/dbsecurity-groups (clojure.spec.alpha/and :portkey.aws.rds/dbsecurity-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/secondary-availability-zone (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/promotion-tier (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/character-set-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/read-replicadbcluster-identifiers (clojure.spec.alpha/and :portkey.aws.rds/read-replicadbcluster-identifier-list))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/read-replicadbinstance-identifiers (clojure.spec.alpha/and :portkey.aws.rds/read-replicadbinstance-identifier-list))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/domain-memberships (clojure.spec.alpha/and :portkey.aws.rds/domain-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/dbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/enabled-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/db-instance-port (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/dbname (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/dbinstance-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/instance-create-time (clojure.spec.alpha/and :portkey.aws.rds/tstamp))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/availability-zone (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/read-replica-sourcedbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/license-model (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/monitoring-interval (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/timezone (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/master-username (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/performance-insights-enabled (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/dbi-resource-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/iops (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/storage-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/cacertificate-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/option-group-memberships (clojure.spec.alpha/and :portkey.aws.rds/option-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/iamdatabase-authentication-enabled (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/dbinstance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/dbparameter-groups (clojure.spec.alpha/and :portkey.aws.rds/dbparameter-group-status-list))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/vpc-security-groups (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/dbinstance-status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/status-infos (clojure.spec.alpha/and :portkey.aws.rds/dbinstance-status-info-list))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/enhanced-monitoring-resource-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/multiaz (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/performance-insightskmskey-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/dbcluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance/latest-restorable-time (clojure.spec.alpha/and :portkey.aws.rds/tstamp))
(clojure.spec.alpha/def :portkey.aws.rds/dbinstance (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbinstance/BackupRetentionPeriod :portkey.aws.rds.dbinstance/DBSecurityGroups :portkey.aws.rds.dbinstance/SecondaryAvailabilityZone :portkey.aws.rds.dbinstance/PromotionTier :portkey.aws.rds.dbinstance/CharacterSetName :portkey.aws.rds.dbinstance/PubliclyAccessible :portkey.aws.rds.dbinstance/ReadReplicaDBClusterIdentifiers :portkey.aws.rds.dbinstance/ReadReplicaDBInstanceIdentifiers :portkey.aws.rds.dbinstance/DomainMemberships :portkey.aws.rds.dbinstance/PreferredMaintenanceWindow :portkey.aws.rds.dbinstance/CopyTagsToSnapshot :portkey.aws.rds.dbinstance/DBInstanceIdentifier :portkey.aws.rds.dbinstance/EnabledCloudwatchLogsExports :portkey.aws.rds.dbinstance/AutoMinorVersionUpgrade :portkey.aws.rds.dbinstance/DbInstancePort :portkey.aws.rds.dbinstance/DBName :portkey.aws.rds.dbinstance/DBInstanceArn :portkey.aws.rds.dbinstance/InstanceCreateTime :portkey.aws.rds.dbinstance/AvailabilityZone :portkey.aws.rds.dbinstance/ReadReplicaSourceDBInstanceIdentifier :portkey.aws.rds.dbinstance/LicenseModel :portkey.aws.rds.dbinstance/AllocatedStorage :portkey.aws.rds.dbinstance/MonitoringInterval :portkey.aws.rds.dbinstance/Timezone :portkey.aws.rds.dbinstance/MasterUsername :portkey.aws.rds.dbinstance/EngineVersion :portkey.aws.rds.dbinstance/PerformanceInsightsEnabled :portkey.aws.rds.dbinstance/StorageEncrypted :portkey.aws.rds.dbinstance/KmsKeyId :portkey.aws.rds.dbinstance/DbiResourceId :portkey.aws.rds.dbinstance/Iops :portkey.aws.rds.dbinstance/StorageType :portkey.aws.rds.dbinstance/CACertificateIdentifier :portkey.aws.rds/Endpoint :portkey.aws.rds.dbinstance/OptionGroupMemberships :portkey.aws.rds.dbinstance/IAMDatabaseAuthenticationEnabled :portkey.aws.rds.dbinstance/DBInstanceClass :portkey.aws.rds.dbinstance/DBParameterGroups :portkey.aws.rds.dbinstance/VpcSecurityGroups :portkey.aws.rds.dbinstance/Engine :portkey.aws.rds.dbinstance/DBInstanceStatus :portkey.aws.rds.dbinstance/StatusInfos :portkey.aws.rds.dbinstance/MonitoringRoleArn :portkey.aws.rds.dbinstance/TdeCredentialArn :portkey.aws.rds.dbinstance/EnhancedMonitoringResourceArn :portkey.aws.rds.dbinstance/MultiAZ :portkey.aws.rds.dbinstance/PerformanceInsightsKMSKeyId :portkey.aws.rds.dbinstance/DBClusterIdentifier :portkey.aws.rds.dbinstance/PreferredBackupWindow :portkey.aws.rds/PendingModifiedValues :portkey.aws.rds.dbinstance/LatestRestorableTime :portkey.aws.rds/DBSubnetGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/option-group-option-versions-list (clojure.spec.alpha/coll-of :portkey.aws.rds/option-version))

(clojure.spec.alpha/def :portkey.aws.rds/dbsubnet-group-not-allowed-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/createdbcluster-snapshot-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBClusterSnapshot] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbparameter-group-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/tstamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-message/dbclusters (clojure.spec.alpha/and :portkey.aws.rds/dbcluster-list))
(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbcluster-message/Marker :portkey.aws.rds.dbcluster-message/DBClusters] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.purchase-reserveddbinstances-offering-message/reserveddbinstances-offering-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.purchase-reserveddbinstances-offering-message/reserveddbinstance-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.purchase-reserveddbinstances-offering-message/dbinstance-count (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.purchase-reserveddbinstances-offering-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/purchase-reserveddbinstances-offering-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.purchase-reserveddbinstances-offering-message/ReservedDBInstancesOfferingId] :opt-un [:portkey.aws.rds.purchase-reserveddbinstances-offering-message/ReservedDBInstanceId :portkey.aws.rds.purchase-reserveddbinstances-offering-message/DBInstanceCount :portkey.aws.rds.purchase-reserveddbinstances-offering-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbsecurity-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.rds/dbsecurity-group-membership))

(clojure.spec.alpha/def :portkey.aws.rds.describe-certificates-message/certificate-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-certificates-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-certificates-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-certificates-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-certificates-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.describe-certificates-message/CertificateIdentifier :portkey.aws.rds.describe-certificates-message/Filters :portkey.aws.rds.describe-certificates-message/MaxRecords :portkey.aws.rds.describe-certificates-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.event-categories-map/source-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.event-categories-map/event-categories (clojure.spec.alpha/and :portkey.aws.rds/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds/event-categories-map (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.event-categories-map/SourceType :portkey.aws.rds.event-categories-map/EventCategories] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/reserveddbinstances-offering-list (clojure.spec.alpha/coll-of :portkey.aws.rds/reserveddbinstances-offering))

(clojure.spec.alpha/def :portkey.aws.rds/event-subscription-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/describedbcluster-snapshot-attributes-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBClusterSnapshotAttributesResult] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/kmskey-not-accessible-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.create-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-event-subscription-message/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-event-subscription-message/source-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-event-subscription-message/event-categories (clojure.spec.alpha/and :portkey.aws.rds/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds.create-event-subscription-message/source-ids (clojure.spec.alpha/and :portkey.aws.rds/source-ids-list))
(clojure.spec.alpha/def :portkey.aws.rds.create-event-subscription-message/enabled (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-event-subscription-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/create-event-subscription-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.create-event-subscription-message/SubscriptionName :portkey.aws.rds.create-event-subscription-message/SnsTopicArn] :opt-un [:portkey.aws.rds.create-event-subscription-message/SourceType :portkey.aws.rds.create-event-subscription-message/EventCategories :portkey.aws.rds.create-event-subscription-message/SourceIds :portkey.aws.rds.create-event-subscription-message/Enabled :portkey.aws.rds.create-event-subscription-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.describedbcluster-snapshot-attributes-message/dbcluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describedbcluster-snapshot-attributes-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.describedbcluster-snapshot-attributes-message/DBClusterSnapshotIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.describedblog-files-response/describedblog-files (clojure.spec.alpha/and :portkey.aws.rds/describedblog-files-list))
(clojure.spec.alpha/def :portkey.aws.rds.describedblog-files-response/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describedblog-files-response (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.describedblog-files-response/DescribeDBLogFiles :portkey.aws.rds.describedblog-files-response/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/recurring-charge-list (clojure.spec.alpha/coll-of :portkey.aws.rds/recurring-charge))

(clojure.spec.alpha/def :portkey.aws.rds/stopdbinstance-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBInstance] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/event-categories-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds.dbengine-version-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbengine-version-message/dbengine-versions (clojure.spec.alpha/and :portkey.aws.rds/dbengine-version-list))
(clojure.spec.alpha/def :portkey.aws.rds/dbengine-version-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbengine-version-message/Marker :portkey.aws.rds.dbengine-version-message/DBEngineVersions] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/modifydbcluster-snapshot-attribute-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBClusterSnapshotAttributesResult] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.dbinstance-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbinstance-message/dbinstances (clojure.spec.alpha/and :portkey.aws.rds/dbinstance-list))
(clojure.spec.alpha/def :portkey.aws.rds/dbinstance-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbinstance-message/Marker :portkey.aws.rds.dbinstance-message/DBInstances] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbsecurity-group-name-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds/reserveddbinstance-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.describedbclusters-message/dbcluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describedbclusters-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describedbclusters-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describedbclusters-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describedbclusters-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.describedbclusters-message/DBClusterIdentifier :portkey.aws.rds.describedbclusters-message/Filters :portkey.aws.rds.describedbclusters-message/MaxRecords :portkey.aws.rds.describedbclusters-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbsecurity-group-not-supported-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/createdbparameter-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBParameterGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-parameter-group/dbcluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-parameter-group/dbparameter-group-family (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-parameter-group/description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-parameter-group/dbcluster-parameter-group-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-parameter-group (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbcluster-parameter-group/DBClusterParameterGroupName :portkey.aws.rds.dbcluster-parameter-group/DBParameterGroupFamily :portkey.aws.rds.dbcluster-parameter-group/Description :portkey.aws.rds.dbcluster-parameter-group/DBClusterParameterGroupArn] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.describedblog-files-message/dbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describedblog-files-message/filename-contains (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describedblog-files-message/file-last-written (clojure.spec.alpha/and :portkey.aws.rds/long))
(clojure.spec.alpha/def :portkey.aws.rds.describedblog-files-message/file-size (clojure.spec.alpha/and :portkey.aws.rds/long))
(clojure.spec.alpha/def :portkey.aws.rds.describedblog-files-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describedblog-files-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describedblog-files-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describedblog-files-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.describedblog-files-message/DBInstanceIdentifier] :opt-un [:portkey.aws.rds.describedblog-files-message/FilenameContains :portkey.aws.rds.describedblog-files-message/FileLastWritten :portkey.aws.rds.describedblog-files-message/FileSize :portkey.aws.rds.describedblog-files-message/Filters :portkey.aws.rds.describedblog-files-message/MaxRecords :portkey.aws.rds.describedblog-files-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/apply-method {"immediate" "immediate", :immediate "immediate", "pending-reboot" "pending-reboot", :pending-reboot "pending-reboot"})

(clojure.spec.alpha/def :portkey.aws.rds/describe-engine-default-cluster-parameters-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/EngineDefaults] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-snapshot-message/dbcluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-snapshot-message/dbcluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/createdbcluster-snapshot-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.createdbcluster-snapshot-message/DBClusterSnapshotIdentifier :portkey.aws.rds.createdbcluster-snapshot-message/DBClusterIdentifier] :opt-un [:portkey.aws.rds.createdbcluster-snapshot-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.endpoint/address (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.endpoint/port (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.endpoint/hosted-zone-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/endpoint (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.endpoint/Address :portkey.aws.rds.endpoint/Port :portkey.aws.rds.endpoint/HostedZoneId] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/invaliddbcluster-snapshot-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.dbparameter-group/dbparameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbparameter-group/dbparameter-group-family (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbparameter-group/description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbparameter-group/dbparameter-group-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/dbparameter-group (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbparameter-group/DBParameterGroupName :portkey.aws.rds.dbparameter-group/DBParameterGroupFamily :portkey.aws.rds.dbparameter-group/Description :portkey.aws.rds.dbparameter-group/DBParameterGroupArn] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/supported-character-sets-list (clojure.spec.alpha/coll-of :portkey.aws.rds/character-set))

(clojure.spec.alpha/def :portkey.aws.rds/storage-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.rds.cloudwatch-logs-export-configuration/enable-log-types (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.cloudwatch-logs-export-configuration/disable-log-types (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds/cloudwatch-logs-export-configuration (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.cloudwatch-logs-export-configuration/EnableLogTypes :portkey.aws.rds.cloudwatch-logs-export-configuration/DisableLogTypes] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/invalid-restore-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/log-type-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds/insufficientdbcluster-capacity-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.account-quota/account-quota-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.account-quota/used (clojure.spec.alpha/and :portkey.aws.rds/long))
(clojure.spec.alpha/def :portkey.aws.rds.account-quota/max (clojure.spec.alpha/and :portkey.aws.rds/long))
(clojure.spec.alpha/def :portkey.aws.rds/account-quota (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.account-quota/AccountQuotaName :portkey.aws.rds.account-quota/Used :portkey.aws.rds.account-quota/Max] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-option-group-status/dbcluster-option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-option-group-status/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-option-group-status (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbcluster-option-group-status/DBClusterOptionGroupName :portkey.aws.rds.dbcluster-option-group-status/Status] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/describedbsnapshot-attributes-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBSnapshotAttributesResult] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.option-group-membership/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-membership/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/option-group-membership (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.option-group-membership/OptionGroupName :portkey.aws.rds.option-group-membership/Status] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbsecurity-group-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.upgrade-target/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.upgrade-target/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.upgrade-target/description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.upgrade-target/auto-upgrade (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.upgrade-target/is-major-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds/upgrade-target (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.upgrade-target/Engine :portkey.aws.rds.upgrade-target/EngineVersion :portkey.aws.rds.upgrade-target/Description :portkey.aws.rds.upgrade-target/AutoUpgrade :portkey.aws.rds.upgrade-target/IsMajorVersionUpgrade] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbparameter-group-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/attribute-value-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstance/reserveddbinstance-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstance/currency-code (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstance/reserveddbinstances-offering-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstance/start-time (clojure.spec.alpha/and :portkey.aws.rds/tstamp))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstance/fixed-price (clojure.spec.alpha/and :portkey.aws.rds/double))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstance/reserveddbinstance-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstance/dbinstance-count (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstance/duration (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstance/usage-price (clojure.spec.alpha/and :portkey.aws.rds/double))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstance/product-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstance/dbinstance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstance/state (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstance/recurring-charges (clojure.spec.alpha/and :portkey.aws.rds/recurring-charge-list))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstance/offering-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserveddbinstance/multiaz (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds/reserveddbinstance (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.reserveddbinstance/ReservedDBInstanceId :portkey.aws.rds.reserveddbinstance/CurrencyCode :portkey.aws.rds.reserveddbinstance/ReservedDBInstancesOfferingId :portkey.aws.rds.reserveddbinstance/StartTime :portkey.aws.rds.reserveddbinstance/FixedPrice :portkey.aws.rds.reserveddbinstance/ReservedDBInstanceArn :portkey.aws.rds.reserveddbinstance/DBInstanceCount :portkey.aws.rds.reserveddbinstance/Duration :portkey.aws.rds.reserveddbinstance/UsagePrice :portkey.aws.rds.reserveddbinstance/ProductDescription :portkey.aws.rds.reserveddbinstance/DBInstanceClass :portkey.aws.rds.reserveddbinstance/State :portkey.aws.rds.reserveddbinstance/RecurringCharges :portkey.aws.rds.reserveddbinstance/OfferingType :portkey.aws.rds.reserveddbinstance/MultiAZ] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.describedbparameter-groups-message/dbparameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describedbparameter-groups-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describedbparameter-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describedbparameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describedbparameter-groups-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.describedbparameter-groups-message/DBParameterGroupName :portkey.aws.rds.describedbparameter-groups-message/Filters :portkey.aws.rds.describedbparameter-groups-message/MaxRecords :portkey.aws.rds.describedbparameter-groups-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/invaliddbsubnet-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.iprange/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.iprange/cidrip (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/iprange (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.iprange/Status :portkey.aws.rds.iprange/CIDRIP] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.character-set/character-set-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.character-set/character-set-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/character-set (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.character-set/CharacterSetName :portkey.aws.rds.character-set/CharacterSetDescription] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbparameter-group-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/option-group-option-settings-list (clojure.spec.alpha/coll-of :portkey.aws.rds/option-group-option-setting))

(clojure.spec.alpha/def :portkey.aws.rds.deletedbcluster-message/dbcluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.deletedbcluster-message/skip-final-snapshot (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.deletedbcluster-message/finaldbsnapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/deletedbcluster-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.deletedbcluster-message/DBClusterIdentifier] :opt-un [:portkey.aws.rds.deletedbcluster-message/SkipFinalSnapshot :portkey.aws.rds.deletedbcluster-message/FinalDBSnapshotIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/describe-validdbinstance-modifications-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/ValidDBInstanceModificationsMessage] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/modify-event-subscription-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/EventSubscription] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.tag/key (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.tag/value (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/tag (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.tag/Key :portkey.aws.rds.tag/Value] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.describe-event-categories-message/source-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-event-categories-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds/describe-event-categories-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.describe-event-categories-message/SourceType :portkey.aws.rds.describe-event-categories-message/Filters] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/insufficientdbinstance-capacity-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/boolean-optional clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.rds/failoverdbcluster-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBCluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/snsinvalid-topic-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/options-depended-on (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds.option-setting/data-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-setting/allowed-values (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-setting/value (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-setting/apply-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-setting/description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-setting/default-value (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-setting/is-modifiable (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.option-setting/is-collection (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.option-setting/name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/option-setting (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.option-setting/DataType :portkey.aws.rds.option-setting/AllowedValues :portkey.aws.rds.option-setting/Value :portkey.aws.rds.option-setting/ApplyType :portkey.aws.rds.option-setting/Description :portkey.aws.rds.option-setting/DefaultValue :portkey.aws.rds.option-setting/IsModifiable :portkey.aws.rds.option-setting/IsCollection :portkey.aws.rds.option-setting/Name] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.deletedbcluster-parameter-group-message/dbcluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/deletedbcluster-parameter-group-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.deletedbcluster-parameter-group-message/DBClusterParameterGroupName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.list-tags-for-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.list-tags-for-resource-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds/list-tags-for-resource-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.list-tags-for-resource-message/ResourceName] :opt-un [:portkey.aws.rds.list-tags-for-resource-message/Filters] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.failoverdbcluster-message/dbcluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.failoverdbcluster-message/targetdbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/failoverdbcluster-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.failoverdbcluster-message/DBClusterIdentifier :portkey.aws.rds.failoverdbcluster-message/TargetDBInstanceIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.deletedbsubnet-group-message/dbsubnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/deletedbsubnet-group-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.deletedbsubnet-group-message/DBSubnetGroupName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbinstance-list (clojure.spec.alpha/coll-of :portkey.aws.rds/dbinstance))

(clojure.spec.alpha/def :portkey.aws.rds/deletedbinstance-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBInstance] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-message/replication-source-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-message/character-set-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-message/enableiamdatabase-authentication (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-message/pre-signed-url (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-message/database-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-message/dbcluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-message/master-username (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-message/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-message/dbsubnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-message/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-message/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-message/dbcluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/createdbcluster-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.createdbcluster-message/DBClusterIdentifier :portkey.aws.rds.createdbcluster-message/Engine] :opt-un [:portkey.aws.rds.createdbcluster-message/BackupRetentionPeriod :portkey.aws.rds.createdbcluster-message/OptionGroupName :portkey.aws.rds.createdbcluster-message/ReplicationSourceIdentifier :portkey.aws.rds.createdbcluster-message/CharacterSetName :portkey.aws.rds.createdbcluster-message/EnableIAMDatabaseAuthentication :portkey.aws.rds.createdbcluster-message/PreSignedUrl :portkey.aws.rds.createdbcluster-message/DatabaseName :portkey.aws.rds.createdbcluster-message/PreferredMaintenanceWindow :portkey.aws.rds.createdbcluster-message/Tags :portkey.aws.rds.createdbcluster-message/VpcSecurityGroupIds :portkey.aws.rds.createdbcluster-message/DBClusterParameterGroupName :portkey.aws.rds.createdbcluster-message/MasterUserPassword :portkey.aws.rds.createdbcluster-message/MasterUsername :portkey.aws.rds.createdbcluster-message/EngineVersion :portkey.aws.rds.createdbcluster-message/StorageEncrypted :portkey.aws.rds.createdbcluster-message/DBSubnetGroupName :portkey.aws.rds.createdbcluster-message/Port :portkey.aws.rds.createdbcluster-message/KmsKeyId :portkey.aws.rds/AvailabilityZones :portkey.aws.rds.createdbcluster-message/PreferredBackupWindow] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/delete-event-subscription-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/EventSubscription] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/option-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.rds/option-configuration))

(clojure.spec.alpha/def :portkey.aws.rds.pending-maintenance-actions-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/pending-maintenance-actions-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/PendingMaintenanceActions :portkey.aws.rds.pending-maintenance-actions-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/describe-account-attributes-message (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/reserveddbinstances-offering-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbsubnet-group-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/add-source-identifier-to-subscription-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/EventSubscription] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.downloaddblog-file-portion-message/dbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.downloaddblog-file-portion-message/log-file-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.downloaddblog-file-portion-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.downloaddblog-file-portion-message/number-of-lines (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds/downloaddblog-file-portion-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.downloaddblog-file-portion-message/DBInstanceIdentifier :portkey.aws.rds.downloaddblog-file-portion-message/LogFileName] :opt-un [:portkey.aws.rds.downloaddblog-file-portion-message/Marker :portkey.aws.rds.downloaddblog-file-portion-message/NumberOfLines] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.dbsecurity-group-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/dbsecurity-group-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbsecurity-group-message/Marker :portkey.aws.rds/DBSecurityGroups] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbcluster-parameter-groups-message/dbcluster-parameter-groups (clojure.spec.alpha/and :portkey.aws.rds/dbcluster-parameter-group-list))
(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-parameter-groups-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbcluster-parameter-groups-message/Marker :portkey.aws.rds.dbcluster-parameter-groups-message/DBClusterParameterGroups] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.createdbsecurity-group-message/dbsecurity-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbsecurity-group-message/dbsecurity-group-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbsecurity-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/createdbsecurity-group-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.createdbsecurity-group-message/DBSecurityGroupName :portkey.aws.rds.createdbsecurity-group-message/DBSecurityGroupDescription] :opt-un [:portkey.aws.rds.createdbsecurity-group-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/event-subscriptions-list (clojure.spec.alpha/coll-of :portkey.aws.rds/event-subscription))

(clojure.spec.alpha/def :portkey.aws.rds/dbsnapshot-list (clojure.spec.alpha/coll-of :portkey.aws.rds/dbsnapshot))

(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-parameter-group-message/dbcluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-parameter-group-message/dbparameter-group-family (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-parameter-group-message/description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.createdbcluster-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/createdbcluster-parameter-group-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.createdbcluster-parameter-group-message/DBClusterParameterGroupName :portkey.aws.rds.createdbcluster-parameter-group-message/DBParameterGroupFamily :portkey.aws.rds.createdbcluster-parameter-group-message/Description] :opt-un [:portkey.aws.rds.createdbcluster-parameter-group-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/modifydbsnapshot-attribute-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBSnapshotAttributesResult] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/startdbinstance-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBInstance] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbcluster-option-group-memberships (clojure.spec.alpha/coll-of :portkey.aws.rds/dbcluster-option-group-status))

(clojure.spec.alpha/def :portkey.aws.rds.engine-defaults/dbparameter-group-family (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.engine-defaults/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.engine-defaults/parameters (clojure.spec.alpha/and :portkey.aws.rds/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds/engine-defaults (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.engine-defaults/DBParameterGroupFamily :portkey.aws.rds.engine-defaults/Marker :portkey.aws.rds.engine-defaults/Parameters] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.describedbsnapshot-attributes-message/dbsnapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describedbsnapshot-attributes-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.describedbsnapshot-attributes-message/DBSnapshotIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/availability-zones (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds/dbsubnet-groups (clojure.spec.alpha/coll-of :portkey.aws.rds/dbsubnet-group))

(clojure.spec.alpha/def :portkey.aws.rds.option-configuration/option-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-configuration/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.option-configuration/option-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-configuration/dbsecurity-group-memberships (clojure.spec.alpha/and :portkey.aws.rds/dbsecurity-group-name-list))
(clojure.spec.alpha/def :portkey.aws.rds.option-configuration/vpc-security-group-memberships (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.option-configuration/option-settings (clojure.spec.alpha/and :portkey.aws.rds/option-settings-list))
(clojure.spec.alpha/def :portkey.aws.rds/option-configuration (portkey.aws/json-keys :req-un [:portkey.aws.rds.option-configuration/OptionName] :opt-un [:portkey.aws.rds.option-configuration/Port :portkey.aws.rds.option-configuration/OptionVersion :portkey.aws.rds.option-configuration/DBSecurityGroupMemberships :portkey.aws.rds.option-configuration/VpcSecurityGroupMemberships :portkey.aws.rds.option-configuration/OptionSettings] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/deletedbcluster-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBCluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbsubnet-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/invaliddbsnapshot-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/integer-optional clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.rds.dbsecurity-group/owner-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsecurity-group/dbsecurity-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsecurity-group/dbsecurity-group-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsecurity-group/vpc-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsecurity-group/ec2-security-groups (clojure.spec.alpha/and :portkey.aws.rds/ec2-security-group-list))
(clojure.spec.alpha/def :portkey.aws.rds.dbsecurity-group/ipranges (clojure.spec.alpha/and :portkey.aws.rds/iprange-list))
(clojure.spec.alpha/def :portkey.aws.rds.dbsecurity-group/dbsecurity-group-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/dbsecurity-group (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbsecurity-group/OwnerId :portkey.aws.rds.dbsecurity-group/DBSecurityGroupName :portkey.aws.rds.dbsecurity-group/DBSecurityGroupDescription :portkey.aws.rds.dbsecurity-group/VpcId :portkey.aws.rds.dbsecurity-group/EC2SecurityGroups :portkey.aws.rds.dbsecurity-group/IPRanges :portkey.aws.rds.dbsecurity-group/DBSecurityGroupArn] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.describe-reserveddbinstances-offerings-message/reserveddbinstances-offering-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserveddbinstances-offerings-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserveddbinstances-offerings-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserveddbinstances-offerings-message/duration (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserveddbinstances-offerings-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserveddbinstances-offerings-message/product-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserveddbinstances-offerings-message/dbinstance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserveddbinstances-offerings-message/offering-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserveddbinstances-offerings-message/multiaz (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds/describe-reserveddbinstances-offerings-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.describe-reserveddbinstances-offerings-message/ReservedDBInstancesOfferingId :portkey.aws.rds.describe-reserveddbinstances-offerings-message/MaxRecords :portkey.aws.rds.describe-reserveddbinstances-offerings-message/Marker :portkey.aws.rds.describe-reserveddbinstances-offerings-message/Duration :portkey.aws.rds.describe-reserveddbinstances-offerings-message/Filters :portkey.aws.rds.describe-reserveddbinstances-offerings-message/ProductDescription :portkey.aws.rds.describe-reserveddbinstances-offerings-message/DBInstanceClass :portkey.aws.rds.describe-reserveddbinstances-offerings-message/OfferingType :portkey.aws.rds.describe-reserveddbinstances-offerings-message/MultiAZ] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/supported-timezones-list (clojure.spec.alpha/coll-of :portkey.aws.rds/timezone))

(clojure.spec.alpha/def :portkey.aws.rds/range-list (clojure.spec.alpha/coll-of :portkey.aws.rds/range))

(clojure.spec.alpha/def :portkey.aws.rds.stopdbinstance-message/dbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.stopdbinstance-message/dbsnapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/stopdbinstance-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.stopdbinstance-message/DBInstanceIdentifier] :opt-un [:portkey.aws.rds.stopdbinstance-message/DBSnapshotIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.describedbsecurity-groups-message/dbsecurity-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describedbsecurity-groups-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describedbsecurity-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describedbsecurity-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describedbsecurity-groups-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.describedbsecurity-groups-message/DBSecurityGroupName :portkey.aws.rds.describedbsecurity-groups-message/Filters :portkey.aws.rds.describedbsecurity-groups-message/MaxRecords :portkey.aws.rds.describedbsecurity-groups-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/option-settings-list (clojure.spec.alpha/coll-of :portkey.aws.rds/option-setting))

(clojure.spec.alpha/def :portkey.aws.rds.delete-option-group-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/delete-option-group-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.delete-option-group-message/OptionGroupName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbinstance-status-info-list (clojure.spec.alpha/coll-of :portkey.aws.rds/dbinstance-status-info))

(clojure.spec.alpha/def :portkey.aws.rds.describedbparameters-message/dbparameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describedbparameters-message/source (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describedbparameters-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describedbparameters-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describedbparameters-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describedbparameters-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.describedbparameters-message/DBParameterGroupName] :opt-un [:portkey.aws.rds.describedbparameters-message/Source :portkey.aws.rds.describedbparameters-message/Filters :portkey.aws.rds.describedbparameters-message/MaxRecords :portkey.aws.rds.describedbparameters-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.certificate/certificate-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.certificate/certificate-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.certificate/thumbprint (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.certificate/valid-from (clojure.spec.alpha/and :portkey.aws.rds/tstamp))
(clojure.spec.alpha/def :portkey.aws.rds.certificate/valid-till (clojure.spec.alpha/and :portkey.aws.rds/tstamp))
(clojure.spec.alpha/def :portkey.aws.rds.certificate/certificate-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/certificate (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.certificate/CertificateIdentifier :portkey.aws.rds.certificate/CertificateType :portkey.aws.rds.certificate/Thumbprint :portkey.aws.rds.certificate/ValidFrom :portkey.aws.rds.certificate/ValidTill :portkey.aws.rds.certificate/CertificateArn] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/reserveddbinstance-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/purchase-reserveddbinstances-offering-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/ReservedDBInstance] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.describe-reserveddbinstances-message/reserveddbinstance-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserveddbinstances-message/reserveddbinstances-offering-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserveddbinstances-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserveddbinstances-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserveddbinstances-message/duration (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserveddbinstances-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserveddbinstances-message/product-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserveddbinstances-message/dbinstance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserveddbinstances-message/offering-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserveddbinstances-message/multiaz (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds/describe-reserveddbinstances-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.describe-reserveddbinstances-message/ReservedDBInstanceId :portkey.aws.rds.describe-reserveddbinstances-message/ReservedDBInstancesOfferingId :portkey.aws.rds.describe-reserveddbinstances-message/MaxRecords :portkey.aws.rds.describe-reserveddbinstances-message/Marker :portkey.aws.rds.describe-reserveddbinstances-message/Duration :portkey.aws.rds.describe-reserveddbinstances-message/Filters :portkey.aws.rds.describe-reserveddbinstances-message/ProductDescription :portkey.aws.rds.describe-reserveddbinstances-message/DBInstanceClass :portkey.aws.rds.describe-reserveddbinstances-message/OfferingType :portkey.aws.rds.describe-reserveddbinstances-message/MultiAZ] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.revokedbsecurity-group-ingress-message/dbsecurity-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.revokedbsecurity-group-ingress-message/cidrip (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.revokedbsecurity-group-ingress-message/ec2-security-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.revokedbsecurity-group-ingress-message/ec2-security-group-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.revokedbsecurity-group-ingress-message/ec2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/revokedbsecurity-group-ingress-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.revokedbsecurity-group-ingress-message/DBSecurityGroupName] :opt-un [:portkey.aws.rds.revokedbsecurity-group-ingress-message/CIDRIP :portkey.aws.rds.revokedbsecurity-group-ingress-message/EC2SecurityGroupName :portkey.aws.rds.revokedbsecurity-group-ingress-message/EC2SecurityGroupId :portkey.aws.rds.revokedbsecurity-group-ingress-message/EC2SecurityGroupOwnerId] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.domain-membership/domain (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.domain-membership/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.domain-membership/fqdn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.domain-membership/iamrole-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/domain-membership (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.domain-membership/Domain :portkey.aws.rds.domain-membership/Status :portkey.aws.rds.domain-membership/FQDN :portkey.aws.rds.domain-membership/IAMRoleName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.orderabledbinstance-option/supportsiamdatabase-authentication (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.orderabledbinstance-option/supports-iops (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.orderabledbinstance-option/multiazcapable (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.orderabledbinstance-option/min-storage-size (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.orderabledbinstance-option/max-iops-per-gib (clojure.spec.alpha/and :portkey.aws.rds/double-optional))
(clojure.spec.alpha/def :portkey.aws.rds.orderabledbinstance-option/min-iops-per-db-instance (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.orderabledbinstance-option/license-model (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.orderabledbinstance-option/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.orderabledbinstance-option/vpc (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.orderabledbinstance-option/supports-performance-insights (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.orderabledbinstance-option/storage-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.orderabledbinstance-option/max-storage-size (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.orderabledbinstance-option/min-iops-per-gib (clojure.spec.alpha/and :portkey.aws.rds/double-optional))
(clojure.spec.alpha/def :portkey.aws.rds.orderabledbinstance-option/read-replica-capable (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.orderabledbinstance-option/dbinstance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.orderabledbinstance-option/supports-storage-encryption (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.orderabledbinstance-option/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.orderabledbinstance-option/availability-zones (clojure.spec.alpha/and :portkey.aws.rds/availability-zone-list))
(clojure.spec.alpha/def :portkey.aws.rds.orderabledbinstance-option/supports-enhanced-monitoring (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.orderabledbinstance-option/max-iops-per-db-instance (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds/orderabledbinstance-option (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.orderabledbinstance-option/SupportsIAMDatabaseAuthentication :portkey.aws.rds.orderabledbinstance-option/SupportsIops :portkey.aws.rds.orderabledbinstance-option/MultiAZCapable :portkey.aws.rds.orderabledbinstance-option/MinStorageSize :portkey.aws.rds.orderabledbinstance-option/MaxIopsPerGib :portkey.aws.rds.orderabledbinstance-option/MinIopsPerDbInstance :portkey.aws.rds.orderabledbinstance-option/LicenseModel :portkey.aws.rds.orderabledbinstance-option/EngineVersion :portkey.aws.rds.orderabledbinstance-option/Vpc :portkey.aws.rds.orderabledbinstance-option/SupportsPerformanceInsights :portkey.aws.rds.orderabledbinstance-option/StorageType :portkey.aws.rds.orderabledbinstance-option/MaxStorageSize :portkey.aws.rds.orderabledbinstance-option/MinIopsPerGib :portkey.aws.rds.orderabledbinstance-option/ReadReplicaCapable :portkey.aws.rds.orderabledbinstance-option/DBInstanceClass :portkey.aws.rds.orderabledbinstance-option/SupportsStorageEncryption :portkey.aws.rds.orderabledbinstance-option/Engine :portkey.aws.rds.orderabledbinstance-option/AvailabilityZones :portkey.aws.rds.orderabledbinstance-option/SupportsEnhancedMonitoring :portkey.aws.rds.orderabledbinstance-option/MaxIopsPerDbInstance] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/dbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/master-user-password (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/license-model (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/dbsubnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/iops (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/storage-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/cacertificate-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/dbinstance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/multiaz (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds/pending-modified-values (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.pending-modified-values/BackupRetentionPeriod :portkey.aws.rds/PendingCloudwatchLogsExports :portkey.aws.rds.pending-modified-values/DBInstanceIdentifier :portkey.aws.rds.pending-modified-values/MasterUserPassword :portkey.aws.rds.pending-modified-values/LicenseModel :portkey.aws.rds.pending-modified-values/AllocatedStorage :portkey.aws.rds.pending-modified-values/EngineVersion :portkey.aws.rds.pending-modified-values/DBSubnetGroupName :portkey.aws.rds.pending-modified-values/Port :portkey.aws.rds.pending-modified-values/Iops :portkey.aws.rds.pending-modified-values/StorageType :portkey.aws.rds.pending-modified-values/CACertificateIdentifier :portkey.aws.rds.pending-modified-values/DBInstanceClass :portkey.aws.rds.pending-modified-values/MultiAZ] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbsubnet-group-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/subnet-list (clojure.spec.alpha/coll-of :portkey.aws.rds/subnet))

(clojure.spec.alpha/def :portkey.aws.rds/filter-list (clojure.spec.alpha/coll-of :portkey.aws.rds/filter))

(clojure.spec.alpha/def :portkey.aws.rds/createdbinstance-read-replica-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBInstance] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.downloaddblog-file-portion-details/log-file-data (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.downloaddblog-file-portion-details/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.downloaddblog-file-portion-details/additional-data-pending (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds/downloaddblog-file-portion-details (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.downloaddblog-file-portion-details/LogFileData :portkey.aws.rds.downloaddblog-file-portion-details/Marker :portkey.aws.rds.downloaddblog-file-portion-details/AdditionalDataPending] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbsnapshot-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/invaliddbparameter-group-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/dbsecurity-groups (clojure.spec.alpha/and :portkey.aws.rds/dbsecurity-group-name-list))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/promotion-tier (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/enableiamdatabase-authentication (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/domainiamrole-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/dbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/newdbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/license-model (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/domain (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/allow-major-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/monitoring-interval (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/dbsubnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/dbport-number (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/iops (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/tde-credential-password (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/storage-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/cacertificate-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/dbinstance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/dbparameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/enable-performance-insights (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/multiaz (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/performance-insightskmskey-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modifydbinstance-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/modifydbinstance-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.modifydbinstance-message/DBInstanceIdentifier] :opt-un [:portkey.aws.rds.modifydbinstance-message/BackupRetentionPeriod :portkey.aws.rds.modifydbinstance-message/OptionGroupName :portkey.aws.rds.modifydbinstance-message/DBSecurityGroups :portkey.aws.rds.modifydbinstance-message/PromotionTier :portkey.aws.rds.modifydbinstance-message/EnableIAMDatabaseAuthentication :portkey.aws.rds.modifydbinstance-message/PubliclyAccessible :portkey.aws.rds.modifydbinstance-message/DomainIAMRoleName :portkey.aws.rds.modifydbinstance-message/PreferredMaintenanceWindow :portkey.aws.rds.modifydbinstance-message/CopyTagsToSnapshot :portkey.aws.rds.modifydbinstance-message/AutoMinorVersionUpgrade :portkey.aws.rds.modifydbinstance-message/NewDBInstanceIdentifier :portkey.aws.rds.modifydbinstance-message/VpcSecurityGroupIds :portkey.aws.rds.modifydbinstance-message/MasterUserPassword :portkey.aws.rds.modifydbinstance-message/LicenseModel :portkey.aws.rds.modifydbinstance-message/Domain :portkey.aws.rds.modifydbinstance-message/AllowMajorVersionUpgrade :portkey.aws.rds.modifydbinstance-message/AllocatedStorage :portkey.aws.rds.modifydbinstance-message/MonitoringInterval :portkey.aws.rds.modifydbinstance-message/EngineVersion :portkey.aws.rds.modifydbinstance-message/DBSubnetGroupName :portkey.aws.rds.modifydbinstance-message/DBPortNumber :portkey.aws.rds.modifydbinstance-message/Iops :portkey.aws.rds.modifydbinstance-message/TdeCredentialPassword :portkey.aws.rds.modifydbinstance-message/StorageType :portkey.aws.rds.modifydbinstance-message/ApplyImmediately :portkey.aws.rds.modifydbinstance-message/CACertificateIdentifier :portkey.aws.rds/CloudwatchLogsExportConfiguration :portkey.aws.rds.modifydbinstance-message/DBInstanceClass :portkey.aws.rds.modifydbinstance-message/DBParameterGroupName :portkey.aws.rds.modifydbinstance-message/EnablePerformanceInsights :portkey.aws.rds.modifydbinstance-message/MonitoringRoleArn :portkey.aws.rds.modifydbinstance-message/TdeCredentialArn :portkey.aws.rds.modifydbinstance-message/MultiAZ :portkey.aws.rds.modifydbinstance-message/PerformanceInsightsKMSKeyId :portkey.aws.rds.modifydbinstance-message/PreferredBackupWindow] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/dbsecurity-groups (clojure.spec.alpha/and :portkey.aws.rds/dbsecurity-group-name-list))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/enableiamdatabase-authentication (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/s3-ingestion-role-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/dbinstance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/s3-bucket-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/dbname (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/availability-zone (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/source-engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/license-model (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/monitoring-interval (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/master-username (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/dbsubnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/source-engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/iops (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/storage-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/dbinstance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/s3-prefix (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/dbparameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/enable-performance-insights (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/multiaz (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/performance-insightskmskey-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restoredbinstance-froms3-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/restoredbinstance-froms3-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.restoredbinstance-froms3-message/DBInstanceIdentifier :portkey.aws.rds.restoredbinstance-froms3-message/DBInstanceClass :portkey.aws.rds.restoredbinstance-froms3-message/Engine :portkey.aws.rds.restoredbinstance-froms3-message/SourceEngine :portkey.aws.rds.restoredbinstance-froms3-message/SourceEngineVersion :portkey.aws.rds.restoredbinstance-froms3-message/S3BucketName :portkey.aws.rds.restoredbinstance-froms3-message/S3IngestionRoleArn] :opt-un [:portkey.aws.rds.restoredbinstance-froms3-message/BackupRetentionPeriod :portkey.aws.rds.restoredbinstance-froms3-message/OptionGroupName :portkey.aws.rds.restoredbinstance-froms3-message/DBSecurityGroups :portkey.aws.rds.restoredbinstance-froms3-message/EnableIAMDatabaseAuthentication :portkey.aws.rds.restoredbinstance-froms3-message/PubliclyAccessible :portkey.aws.rds.restoredbinstance-froms3-message/PreferredMaintenanceWindow :portkey.aws.rds.restoredbinstance-froms3-message/CopyTagsToSnapshot :portkey.aws.rds.restoredbinstance-froms3-message/EnableCloudwatchLogsExports :portkey.aws.rds.restoredbinstance-froms3-message/AutoMinorVersionUpgrade :portkey.aws.rds.restoredbinstance-froms3-message/Tags :portkey.aws.rds.restoredbinstance-froms3-message/DBName :portkey.aws.rds.restoredbinstance-froms3-message/VpcSecurityGroupIds :portkey.aws.rds.restoredbinstance-froms3-message/AvailabilityZone :portkey.aws.rds.restoredbinstance-froms3-message/MasterUserPassword :portkey.aws.rds.restoredbinstance-froms3-message/LicenseModel :portkey.aws.rds.restoredbinstance-froms3-message/AllocatedStorage :portkey.aws.rds.restoredbinstance-froms3-message/MonitoringInterval :portkey.aws.rds.restoredbinstance-froms3-message/MasterUsername :portkey.aws.rds.restoredbinstance-froms3-message/EngineVersion :portkey.aws.rds.restoredbinstance-froms3-message/StorageEncrypted :portkey.aws.rds.restoredbinstance-froms3-message/DBSubnetGroupName :portkey.aws.rds.restoredbinstance-froms3-message/Port :portkey.aws.rds.restoredbinstance-froms3-message/KmsKeyId :portkey.aws.rds.restoredbinstance-froms3-message/Iops :portkey.aws.rds.restoredbinstance-froms3-message/StorageType :portkey.aws.rds.restoredbinstance-froms3-message/S3Prefix :portkey.aws.rds.restoredbinstance-froms3-message/DBParameterGroupName :portkey.aws.rds.restoredbinstance-froms3-message/EnablePerformanceInsights :portkey.aws.rds.restoredbinstance-froms3-message/MonitoringRoleArn :portkey.aws.rds.restoredbinstance-froms3-message/MultiAZ :portkey.aws.rds.restoredbinstance-froms3-message/PerformanceInsightsKMSKeyId :portkey.aws.rds.restoredbinstance-froms3-message/PreferredBackupWindow] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/modifydbcluster-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds/DBCluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.modify-option-group-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-option-group-message/options-to-include (clojure.spec.alpha/and :portkey.aws.rds/option-configuration-list))
(clojure.spec.alpha/def :portkey.aws.rds.modify-option-group-message/options-to-remove (clojure.spec.alpha/and :portkey.aws.rds/option-names-list))
(clojure.spec.alpha/def :portkey.aws.rds.modify-option-group-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds/modify-option-group-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.modify-option-group-message/OptionGroupName] :opt-un [:portkey.aws.rds.modify-option-group-message/OptionsToInclude :portkey.aws.rds.modify-option-group-message/OptionsToRemove :portkey.aws.rds.modify-option-group-message/ApplyImmediately] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbsecurity-group-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/dbsecurity-group-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.dbsubnet-group/dbsubnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsubnet-group/dbsubnet-group-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsubnet-group/vpc-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsubnet-group/subnet-group-status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.dbsubnet-group/subnets (clojure.spec.alpha/and :portkey.aws.rds/subnet-list))
(clojure.spec.alpha/def :portkey.aws.rds.dbsubnet-group/dbsubnet-group-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/dbsubnet-group (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.dbsubnet-group/DBSubnetGroupName :portkey.aws.rds.dbsubnet-group/DBSubnetGroupDescription :portkey.aws.rds.dbsubnet-group/VpcId :portkey.aws.rds.dbsubnet-group/SubnetGroupStatus :portkey.aws.rds.dbsubnet-group/Subnets :portkey.aws.rds.dbsubnet-group/DBSubnetGroupArn] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.describe-option-groups-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-option-groups-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-option-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-option-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-option-groups-message/engine-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-option-groups-message/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-option-groups-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.rds.describe-option-groups-message/OptionGroupName :portkey.aws.rds.describe-option-groups-message/Filters :portkey.aws.rds.describe-option-groups-message/Marker :portkey.aws.rds.describe-option-groups-message/MaxRecords :portkey.aws.rds.describe-option-groups-message/EngineName :portkey.aws.rds.describe-option-groups-message/MajorEngineVersion] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds.modify-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-event-subscription-message/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-event-subscription-message/source-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-event-subscription-message/event-categories (clojure.spec.alpha/and :portkey.aws.rds/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds.modify-event-subscription-message/enabled (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds/modify-event-subscription-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.modify-event-subscription-message/SubscriptionName] :opt-un [:portkey.aws.rds.modify-event-subscription-message/SnsTopicArn :portkey.aws.rds.modify-event-subscription-message/SourceType :portkey.aws.rds.modify-event-subscription-message/EventCategories :portkey.aws.rds.modify-event-subscription-message/Enabled] :locations {}))

(clojure.spec.alpha/def :portkey.aws.rds/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.rds.describe-option-group-options-message/engine-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-option-group-options-message/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-option-group-options-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-option-group-options-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-option-group-options-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-option-group-options-message (portkey.aws/json-keys :req-un [:portkey.aws.rds.describe-option-group-options-message/EngineName] :opt-un [:portkey.aws.rds.describe-option-group-options-message/MajorEngineVersion :portkey.aws.rds.describe-option-group-options-message/Filters :portkey.aws.rds.describe-option-group-options-message/MaxRecords :portkey.aws.rds.describe-option-group-options-message/Marker] :locations {}))

(clojure.core/defn add-source-identifier-to-subscription "Adds a source identifier to an existing RDS event notification subscription." ([add-source-identifier-to-subscription-message] (clojure.core/let [req<-input__36755__auto__ (req<-add-source-identifier-to-subscription-message "AddSourceIdentifierToSubscription" add-source-identifier-to-subscription-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/add-source-identifier-to-subscription-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/add-source-identifier-to-subscription-result {"SubscriptionNotFoundFault" :portkey.aws.rds/subscription-not-found-fault, "SourceNotFoundFault" :portkey.aws.rds/source-not-found-fault}))))
(clojure.spec.alpha/fdef add-source-identifier-to-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds/add-source-identifier-to-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/add-source-identifier-to-subscription-result))

(clojure.core/defn deletedbsnapshot "Deletes a DBSnapshot. If the snapshot is being copied, the copy operation is\nterminated.\n The DBSnapshot must be in the available state to be deleted." ([deletedbsnapshot-message] (clojure.core/let [req<-input__36755__auto__ (req<-deletedbsnapshot-message "DeleteDBSnapshot" deletedbsnapshot-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/deletedbsnapshot-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/deletedbsnapshot-result {"InvalidDBSnapshotStateFault" :portkey.aws.rds/invaliddbsnapshot-state-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds/dbsnapshot-not-found-fault}))))
(clojure.spec.alpha/fdef deletedbsnapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds/deletedbsnapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/deletedbsnapshot-result))

(clojure.core/defn deletedbsubnet-group "Deletes a DB subnet group.\n The specified database subnet group must not be associated with any DB\ninstances." ([deletedbsubnet-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-deletedbsubnet-group-message "DeleteDBSubnetGroup" deletedbsubnet-group-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/deletedbsubnet-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"InvalidDBSubnetGroupStateFault" :portkey.aws.rds/invaliddbsubnet-group-state-fault, "InvalidDBSubnetStateFault" :portkey.aws.rds/invaliddbsubnet-state-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds/dbsubnet-group-not-found-fault}))))
(clojure.spec.alpha/fdef deletedbsubnet-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/deletedbsubnet-group-message) :ret clojure.core/true?)

(clojure.core/defn describe-orderabledbinstance-options "Returns a list of orderable DB instance options for the specified engine." ([describe-orderabledbinstance-options-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-orderabledbinstance-options-message "DescribeOrderableDBInstanceOptions" describe-orderabledbinstance-options-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describe-orderabledbinstance-options-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/orderabledbinstance-options-message {}))))
(clojure.spec.alpha/fdef describe-orderabledbinstance-options :args (clojure.spec.alpha/tuple :portkey.aws.rds/describe-orderabledbinstance-options-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/orderabledbinstance-options-message))

(clojure.core/defn copydbcluster-parameter-group "Copies the specified DB cluster parameter group." ([copydbcluster-parameter-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-copydbcluster-parameter-group-message "CopyDBClusterParameterGroup" copydbcluster-parameter-group-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/copydbcluster-parameter-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/copydbcluster-parameter-group-result {"DBParameterGroupNotFoundFault" :portkey.aws.rds/dbparameter-group-not-found-fault, "DBParameterGroupQuotaExceededFault" :portkey.aws.rds/dbparameter-group-quota-exceeded-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.rds/dbparameter-group-already-exists-fault}))))
(clojure.spec.alpha/fdef copydbcluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/copydbcluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/copydbcluster-parameter-group-result))

(clojure.core/defn revokedbsecurity-group-ingress "Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or\nEC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP,\nEC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either\nEC2SecurityGroupName or EC2SecurityGroupId)." ([revokedbsecurity-group-ingress-message] (clojure.core/let [req<-input__36755__auto__ (req<-revokedbsecurity-group-ingress-message "RevokeDBSecurityGroupIngress" revokedbsecurity-group-ingress-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/revokedbsecurity-group-ingress-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/revokedbsecurity-group-ingress-result {"DBSecurityGroupNotFoundFault" :portkey.aws.rds/dbsecurity-group-not-found-fault, "AuthorizationNotFoundFault" :portkey.aws.rds/authorization-not-found-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.rds/invaliddbsecurity-group-state-fault}))))
(clojure.spec.alpha/fdef revokedbsecurity-group-ingress :args (clojure.spec.alpha/tuple :portkey.aws.rds/revokedbsecurity-group-ingress-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/revokedbsecurity-group-ingress-result))

(clojure.core/defn authorizedbsecurity-group-ingress "Enables ingress to a DBSecurityGroup using one of two forms of authorization.\nFirst, EC2 or VPC security groups can be added to the DBSecurityGroup if the\napplication using the database is running on EC2 or VPC instances. Second, IP\nranges are available if the application accessing your database is running on\nthe Internet. Required parameters for this API are one of CIDR range,\nEC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either\nEC2SecurityGroupName or EC2SecurityGroupId for non-VPC).\n You can't authorize ingress from an EC2 security group in one AWS Region to an\nAmazon RDS DB instance in another. You can't authorize ingress from a VPC\nsecurity group in one VPC to an Amazon RDS DB instance in another.\n For an overview of CIDR ranges, go to the Wikipedia Tutorial\n(http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)." ([authorizedbsecurity-group-ingress-message] (clojure.core/let [req<-input__36755__auto__ (req<-authorizedbsecurity-group-ingress-message "AuthorizeDBSecurityGroupIngress" authorizedbsecurity-group-ingress-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/authorizedbsecurity-group-ingress-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/authorizedbsecurity-group-ingress-result {"DBSecurityGroupNotFoundFault" :portkey.aws.rds/dbsecurity-group-not-found-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.rds/invaliddbsecurity-group-state-fault, "AuthorizationAlreadyExistsFault" :portkey.aws.rds/authorization-already-exists-fault, "AuthorizationQuotaExceededFault" :portkey.aws.rds/authorization-quota-exceeded-fault}))))
(clojure.spec.alpha/fdef authorizedbsecurity-group-ingress :args (clojure.spec.alpha/tuple :portkey.aws.rds/authorizedbsecurity-group-ingress-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/authorizedbsecurity-group-ingress-result))

(clojure.core/defn modifydbsubnet-group "Modifies an existing DB subnet group. DB subnet groups must contain at least one\nsubnet in at least two AZs in the AWS Region." ([modifydbsubnet-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-modifydbsubnet-group-message "ModifyDBSubnetGroup" modifydbsubnet-group-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/modifydbsubnet-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/modifydbsubnet-group-result {"DBSubnetGroupNotFoundFault" :portkey.aws.rds/dbsubnet-group-not-found-fault, "DBSubnetQuotaExceededFault" :portkey.aws.rds/dbsubnet-quota-exceeded-fault, "SubnetAlreadyInUse" :portkey.aws.rds/subnet-already-in-use, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds/dbsubnet-group-does-not-cover-enoughazs, "InvalidSubnet" :portkey.aws.rds/invalid-subnet}))))
(clojure.spec.alpha/fdef modifydbsubnet-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/modifydbsubnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/modifydbsubnet-group-result))

(clojure.core/defn modifydbsnapshot "Updates a manual DB snapshot, which can be encrypted or not encrypted, with a\nnew engine version.\n Amazon RDS supports upgrading DB snapshots for MySQL and Oracle." ([modifydbsnapshot-message] (clojure.core/let [req<-input__36755__auto__ (req<-modifydbsnapshot-message "ModifyDBSnapshot" modifydbsnapshot-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/modifydbsnapshot-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/modifydbsnapshot-result {"DBSnapshotNotFoundFault" :portkey.aws.rds/dbsnapshot-not-found-fault}))))
(clojure.spec.alpha/fdef modifydbsnapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds/modifydbsnapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/modifydbsnapshot-result))

(clojure.core/defn restoredbinstance-to-point-in-time "Restores a DB instance to an arbitrary point in time. You can restore to any\npoint in time before the time identified by the LatestRestorableTime property.\nYou can restore to a point up to the number of days specified by the\nBackupRetentionPeriod property.\n The target database is created with most of the original configuration, but in\na system-selected availability zone, with the default security group, the\ndefault subnet group, and the default DB parameter group. By default, the new DB\ninstance is created as a single-AZ deployment except when the instance is a SQL\nServer instance that has an option group that is associated with mirroring; in\nthis case, the instance becomes a mirrored deployment and not a single-AZ\ndeployment.\n This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora,\nuse RestoreDBClusterToPointInTime." ([restoredbinstance-to-point-in-time-message] (clojure.core/let [req<-input__36755__auto__ (req<-restoredbinstance-to-point-in-time-message "RestoreDBInstanceToPointInTime" restoredbinstance-to-point-in-time-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/restoredbinstance-to-point-in-time-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/restoredbinstance-to-point-in-time-result {"DBInstanceNotFoundFault" :portkey.aws.rds/dbinstance-not-found-fault, "DomainNotFoundFault" :portkey.aws.rds/domain-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invaliddbinstance-state-fault, "InstanceQuotaExceededFault" :portkey.aws.rds/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.rds/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds/invalidvpcnetwork-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds/dbinstance-already-exists-fault, "StorageTypeNotSupportedFault" :portkey.aws.rds/storage-type-not-supported-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds/dbsubnet-group-does-not-cover-enoughazs, "AuthorizationNotFoundFault" :portkey.aws.rds/authorization-not-found-fault, "InvalidSubnet" :portkey.aws.rds/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds/dbsubnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds/provisioned-iops-not-available-inazfault, "PointInTimeRestoreNotEnabledFault" :portkey.aws.rds/point-in-time-restore-not-enabled-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds/kmskey-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds/storage-quota-exceeded-fault, "InvalidRestoreFault" :portkey.aws.rds/invalid-restore-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds/insufficientdbinstance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds/dbsecurity-group-not-found-fault}))))
(clojure.spec.alpha/fdef restoredbinstance-to-point-in-time :args (clojure.spec.alpha/tuple :portkey.aws.rds/restoredbinstance-to-point-in-time-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/restoredbinstance-to-point-in-time-result))

(clojure.core/defn restoredbcluster-to-point-in-time "Restores a DB cluster to an arbitrary point in time. Users can restore to any\npoint in time before LatestRestorableTime for up to BackupRetentionPeriod days.\nThe target DB cluster is created from the source DB cluster with the same\nconfiguration as the original DB cluster, except that the new DB cluster is\ncreated with the default DB security group.\n This action only restores the DB cluster, not the DB instances for that DB\ncluster. You must invoke the CreateDBInstance action to create DB instances for\nthe restored DB cluster, specifying the identifier of the restored DB cluster in\nDBClusterIdentifier. You can create DB instances only after the\nRestoreDBClusterToPointInTime action has completed and the DB cluster is\navailable.\n For more information on Amazon Aurora, see Aurora on Amazon RDS\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html) in the\nAmazon RDS User Guide." ([restoredbcluster-to-point-in-time-message] (clojure.core/let [req<-input__36755__auto__ (req<-restoredbcluster-to-point-in-time-message "RestoreDBClusterToPointInTime" restoredbcluster-to-point-in-time-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/restoredbcluster-to-point-in-time-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/restoredbcluster-to-point-in-time-result {"DBClusterAlreadyExistsFault" :portkey.aws.rds/dbcluster-already-exists-fault, "OptionGroupNotFoundFault" :portkey.aws.rds/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds/invalidvpcnetwork-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds/dbcluster-not-found-fault, "InsufficientStorageClusterCapacityFault" :portkey.aws.rds/insufficient-storage-cluster-capacity-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.rds/dbcluster-snapshot-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invaliddbcluster-state-fault, "InvalidSubnet" :portkey.aws.rds/invalid-subnet, "DBClusterQuotaExceededFault" :portkey.aws.rds/dbcluster-quota-exceeded-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds/dbsubnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds/kmskey-not-accessible-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.rds/invaliddbcluster-snapshot-state-fault, "StorageQuotaExceededFault" :portkey.aws.rds/storage-quota-exceeded-fault, "InvalidRestoreFault" :portkey.aws.rds/invalid-restore-fault, "InsufficientDBClusterCapacityFault" :portkey.aws.rds/insufficientdbcluster-capacity-fault, "InvalidDBSnapshotStateFault" :portkey.aws.rds/invaliddbsnapshot-state-fault}))))
(clojure.spec.alpha/fdef restoredbcluster-to-point-in-time :args (clojure.spec.alpha/tuple :portkey.aws.rds/restoredbcluster-to-point-in-time-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/restoredbcluster-to-point-in-time-result))

(clojure.core/defn describe-events "Returns events related to DB instances, DB security groups, DB snapshots, and DB\nparameter groups for the past 14 days. Events specific to a particular DB\ninstance, DB security group, database snapshot, or DB parameter group can be\nobtained by providing the name as a parameter. By default, the past hour of\nevents are returned." ([] (describe-events {})) ([describe-events-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-events-message "DescribeEvents" describe-events-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describe-events-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/events-message {}))))
(clojure.spec.alpha/fdef describe-events :args (clojure.spec.alpha/? :portkey.aws.rds/describe-events-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/events-message))

(clojure.core/defn resetdbparameter-group "Modifies the parameters of a DB parameter group to the engine/system default\nvalue. To reset specific parameters, provide a list of the following:\nParameterName and ApplyMethod. To reset the entire DB parameter group, specify\nthe DBParameterGroup name and ResetAllParameters parameters. When resetting the\nentire group, dynamic parameters are updated immediately and static parameters\nare set to pending-reboot to take effect on the next DB instance restart or\nRebootDBInstance request." ([resetdbparameter-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-resetdbparameter-group-message "ResetDBParameterGroup" resetdbparameter-group-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/resetdbparameter-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/dbparameter-group-name-message {"InvalidDBParameterGroupStateFault" :portkey.aws.rds/invaliddbparameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds/dbparameter-group-not-found-fault}))))
(clojure.spec.alpha/fdef resetdbparameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/resetdbparameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/dbparameter-group-name-message))

(clojure.core/defn remove-role-fromdbcluster "Disassociates an Identity and Access Management (IAM) role from an Aurora DB\ncluster. For more information, see Authorizing Amazon Aurora to Access Other AWS\nServices On Your Behalf\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Aurora.Authorizing.AWSServices.html)." ([remove-role-fromdbcluster-message] (clojure.core/let [req<-input__36755__auto__ (req<-remove-role-fromdbcluster-message "RemoveRoleFromDBCluster" remove-role-fromdbcluster-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/remove-role-fromdbcluster-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"DBClusterNotFoundFault" :portkey.aws.rds/dbcluster-not-found-fault, "DBClusterRoleNotFoundFault" :portkey.aws.rds/dbcluster-role-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invaliddbcluster-state-fault}))))
(clojure.spec.alpha/fdef remove-role-fromdbcluster :args (clojure.spec.alpha/tuple :portkey.aws.rds/remove-role-fromdbcluster-message) :ret clojure.core/true?)

(clojure.core/defn describe-option-groups "Describes the available option groups." ([] (describe-option-groups {})) ([describe-option-groups-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-option-groups-message "DescribeOptionGroups" describe-option-groups-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describe-option-groups-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/option-groups {"OptionGroupNotFoundFault" :portkey.aws.rds/option-group-not-found-fault}))))
(clojure.spec.alpha/fdef describe-option-groups :args (clojure.spec.alpha/? :portkey.aws.rds/describe-option-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/option-groups))

(clojure.core/defn deletedbcluster-snapshot "Deletes a DB cluster snapshot. If the snapshot is being copied, the copy\noperation is terminated.\n The DB cluster snapshot must be in the available state to be deleted.\n For more information on Amazon Aurora, see Aurora on Amazon RDS\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html) in the\nAmazon RDS User Guide." ([deletedbcluster-snapshot-message] (clojure.core/let [req<-input__36755__auto__ (req<-deletedbcluster-snapshot-message "DeleteDBClusterSnapshot" deletedbcluster-snapshot-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/deletedbcluster-snapshot-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/deletedbcluster-snapshot-result {"InvalidDBClusterSnapshotStateFault" :portkey.aws.rds/invaliddbcluster-snapshot-state-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.rds/dbcluster-snapshot-not-found-fault}))))
(clojure.spec.alpha/fdef deletedbcluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds/deletedbcluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/deletedbcluster-snapshot-result))

(clojure.core/defn rebootdbinstance "You might need to reboot your DB instance, usually for maintenance reasons. For\nexample, if you make certain modifications, or if you change the DB parameter\ngroup associated with the DB instance, you must reboot the instance for the\nchanges to take effect.\n Rebooting a DB instance restarts the database engine service. Rebooting a DB\ninstance results in a momentary outage, during which the DB instance status is\nset to rebooting.\n For more information about rebooting, see Rebooting a DB Instance\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html)." ([rebootdbinstance-message] (clojure.core/let [req<-input__36755__auto__ (req<-rebootdbinstance-message "RebootDBInstance" rebootdbinstance-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/rebootdbinstance-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/rebootdbinstance-result {"InvalidDBInstanceStateFault" :portkey.aws.rds/invaliddbinstance-state-fault, "DBInstanceNotFoundFault" :portkey.aws.rds/dbinstance-not-found-fault}))))
(clojure.spec.alpha/fdef rebootdbinstance :args (clojure.spec.alpha/tuple :portkey.aws.rds/rebootdbinstance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/rebootdbinstance-result))

(clojure.core/defn createdbcluster-parameter-group "Creates a new DB cluster parameter group.\n Parameters in a DB cluster parameter group apply to all of the instances in a\nDB cluster.\n A DB cluster parameter group is initially created with the default parameters\nfor the database engine used by instances in the DB cluster. To provide custom\nvalues for any of the parameters, you must modify the group after creating it\nusing ModifyDBClusterParameterGroup. Once you've created a DB cluster parameter\ngroup, you need to associate it with your DB cluster using ModifyDBCluster. When\nyou associate a new DB cluster parameter group with a running DB cluster, you\nneed to reboot the DB instances in the DB cluster without failover for the new\nDB cluster parameter group and associated settings to take effect.\n After you create a DB cluster parameter group, you should wait at least 5\nminutes before creating your first DB cluster that uses that DB cluster\nparameter group as the default parameter group. This allows Amazon RDS to fully\ncomplete the create action before the DB cluster parameter group is used as the\ndefault for a new DB cluster. This is especially important for parameters that\nare critical when creating the default database for a DB cluster, such as the\ncharacter set for the default database defined by the character_set_database\nparameter. You can use the Parameter Groups option of the Amazon RDS console\n(https://console.aws.amazon.com/rds/) or the DescribeDBClusterParameters command\nto verify that your DB cluster parameter group has been created or modified.\n For more information on Amazon Aurora, see Aurora on Amazon RDS\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html) in the\nAmazon RDS User Guide." ([createdbcluster-parameter-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-createdbcluster-parameter-group-message "CreateDBClusterParameterGroup" createdbcluster-parameter-group-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/createdbcluster-parameter-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/createdbcluster-parameter-group-result {"DBParameterGroupQuotaExceededFault" :portkey.aws.rds/dbparameter-group-quota-exceeded-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.rds/dbparameter-group-already-exists-fault}))))
(clojure.spec.alpha/fdef createdbcluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/createdbcluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/createdbcluster-parameter-group-result))

(clojure.core/defn deletedbsecurity-group "Deletes a DB security group.\n The specified DB security group must not be associated with any DB instances." ([deletedbsecurity-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-deletedbsecurity-group-message "DeleteDBSecurityGroup" deletedbsecurity-group-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/deletedbsecurity-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"InvalidDBSecurityGroupStateFault" :portkey.aws.rds/invaliddbsecurity-group-state-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds/dbsecurity-group-not-found-fault}))))
(clojure.spec.alpha/fdef deletedbsecurity-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/deletedbsecurity-group-message) :ret clojure.core/true?)

(clojure.core/defn copydbparameter-group "Copies the specified DB parameter group." ([copydbparameter-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-copydbparameter-group-message "CopyDBParameterGroup" copydbparameter-group-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/copydbparameter-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/copydbparameter-group-result {"DBParameterGroupNotFoundFault" :portkey.aws.rds/dbparameter-group-not-found-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.rds/dbparameter-group-already-exists-fault, "DBParameterGroupQuotaExceededFault" :portkey.aws.rds/dbparameter-group-quota-exceeded-fault}))))
(clojure.spec.alpha/fdef copydbparameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/copydbparameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/copydbparameter-group-result))

(clojure.core/defn list-tags-for-resource "Lists all tags on an Amazon RDS resource.\n For an overview on tagging an Amazon RDS resource, see Tagging Amazon RDS\nResources\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html)." ([list-tags-for-resource-message] (clojure.core/let [req<-input__36755__auto__ (req<-list-tags-for-resource-message "ListTagsForResource" list-tags-for-resource-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/list-tags-for-resource-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/tag-list-message {"DBInstanceNotFoundFault" :portkey.aws.rds/dbinstance-not-found-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds/dbsnapshot-not-found-fault, "DBClusterNotFoundFault" :portkey.aws.rds/dbcluster-not-found-fault}))))
(clojure.spec.alpha/fdef list-tags-for-resource :args (clojure.spec.alpha/tuple :portkey.aws.rds/list-tags-for-resource-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/tag-list-message))

(clojure.core/defn describe-certificates "Lists the set of CA certificates provided by Amazon RDS for this AWS account." ([] (describe-certificates {})) ([describe-certificates-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-certificates-message "DescribeCertificates" describe-certificates-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describe-certificates-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/certificate-message {"CertificateNotFoundFault" :portkey.aws.rds/certificate-not-found-fault}))))
(clojure.spec.alpha/fdef describe-certificates :args (clojure.spec.alpha/? :portkey.aws.rds/describe-certificates-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/certificate-message))

(clojure.core/defn stopdbinstance " Stops a DB instance. When you stop a DB instance, Amazon RDS retains the DB\ninstance's metadata, including its endpoint, DB parameter group, and option\ngroup membership. Amazon RDS also retains the transaction logs so you can do a\npoint-in-time restore if necessary. For more information, see Stopping and\nStarting a DB instance in the AWS RDS user guide.\n This command doesn't apply to Aurora MySQL and Aurora PostgreSQL." ([stopdbinstance-message] (clojure.core/let [req<-input__36755__auto__ (req<-stopdbinstance-message "StopDBInstance" stopdbinstance-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/stopdbinstance-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/stopdbinstance-result {"DBInstanceNotFoundFault" :portkey.aws.rds/dbinstance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invaliddbinstance-state-fault, "DBSnapshotAlreadyExistsFault" :portkey.aws.rds/dbsnapshot-already-exists-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds/snapshot-quota-exceeded-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invaliddbcluster-state-fault}))))
(clojure.spec.alpha/fdef stopdbinstance :args (clojure.spec.alpha/tuple :portkey.aws.rds/stopdbinstance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/stopdbinstance-result))

(clojure.core/defn describe-engine-default-parameters "Returns the default engine and system parameter information for the specified\ndatabase engine." ([describe-engine-default-parameters-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-engine-default-parameters-message "DescribeEngineDefaultParameters" describe-engine-default-parameters-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describe-engine-default-parameters-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/describe-engine-default-parameters-result {}))))
(clojure.spec.alpha/fdef describe-engine-default-parameters :args (clojure.spec.alpha/tuple :portkey.aws.rds/describe-engine-default-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/describe-engine-default-parameters-result))

(clojure.core/defn deletedbinstance "The DeleteDBInstance action deletes a previously provisioned DB instance. When\nyou delete a DB instance, all automated backups for that instance are deleted\nand can't be recovered. Manual DB snapshots of the DB instance to be deleted by\nDeleteDBInstance are not deleted.\n If you request a final DB snapshot the status of the Amazon RDS DB instance is\ndeleting until the DB snapshot is created. The API action DescribeDBInstance is\nused to monitor the status of this operation. The action can't be canceled or\nreverted once submitted.\n Note that when a DB instance is in a failure state and has a status of failed,\nincompatible-restore, or incompatible-network, you can only delete it when the\nSkipFinalSnapshot parameter is set to true.\n If the specified DB instance is part of an Amazon Aurora DB cluster, you can't\ndelete the DB instance if both of the following conditions are true:\n * The DB cluster is a Read Replica of another Amazon Aurora DB cluster.\n * The DB instance is the only instance in the DB cluster.\n To delete a DB instance in this case, first call the\nPromoteReadReplicaDBCluster API action to promote the DB cluster so it's no\nlonger a Read Replica. After the promotion completes, then call the\nDeleteDBInstance API action to delete the final instance in the DB cluster." ([deletedbinstance-message] (clojure.core/let [req<-input__36755__auto__ (req<-deletedbinstance-message "DeleteDBInstance" deletedbinstance-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/deletedbinstance-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/deletedbinstance-result {"DBInstanceNotFoundFault" :portkey.aws.rds/dbinstance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invaliddbinstance-state-fault, "DBSnapshotAlreadyExistsFault" :portkey.aws.rds/dbsnapshot-already-exists-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds/snapshot-quota-exceeded-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invaliddbcluster-state-fault}))))
(clojure.spec.alpha/fdef deletedbinstance :args (clojure.spec.alpha/tuple :portkey.aws.rds/deletedbinstance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/deletedbinstance-result))

(clojure.core/defn describedbsubnet-groups "Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is\nspecified, the list will contain only the descriptions of the specified\nDBSubnetGroup.\n For an overview of CIDR ranges, go to the Wikipedia Tutorial\n(http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)." ([] (describedbsubnet-groups {})) ([describedbsubnet-groups-message] (clojure.core/let [req<-input__36755__auto__ (req<-describedbsubnet-groups-message "DescribeDBSubnetGroups" describedbsubnet-groups-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describedbsubnet-groups-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/dbsubnet-group-message {"DBSubnetGroupNotFoundFault" :portkey.aws.rds/dbsubnet-group-not-found-fault}))))
(clojure.spec.alpha/fdef describedbsubnet-groups :args (clojure.spec.alpha/? :portkey.aws.rds/describedbsubnet-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/dbsubnet-group-message))

(clojure.core/defn describedbclusters "Returns information about provisioned Aurora DB clusters. This API supports\npagination.\n For more information on Amazon Aurora, see Aurora on Amazon RDS\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html) in the\nAmazon RDS User Guide." ([] (describedbclusters {})) ([describedbclusters-message] (clojure.core/let [req<-input__36755__auto__ (req<-describedbclusters-message "DescribeDBClusters" describedbclusters-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describedbclusters-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/dbcluster-message {"DBClusterNotFoundFault" :portkey.aws.rds/dbcluster-not-found-fault}))))
(clojure.spec.alpha/fdef describedbclusters :args (clojure.spec.alpha/? :portkey.aws.rds/describedbclusters-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/dbcluster-message))

(clojure.core/defn createdbcluster "Creates a new Amazon Aurora DB cluster.\n You can use the ReplicationSourceIdentifier parameter to create the DB cluster\nas a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For\ncross-region replication where the DB cluster identified by\nReplicationSourceIdentifier is encrypted, you must also specify the PreSignedUrl\nparameter.\n For more information on Amazon Aurora, see Aurora on Amazon RDS\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html) in the\nAmazon RDS User Guide." ([createdbcluster-message] (clojure.core/let [req<-input__36755__auto__ (req<-createdbcluster-message "CreateDBCluster" createdbcluster-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/createdbcluster-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/createdbcluster-result {"DBInstanceNotFoundFault" :portkey.aws.rds/dbinstance-not-found-fault, "DBClusterAlreadyExistsFault" :portkey.aws.rds/dbcluster-already-exists-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invaliddbinstance-state-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds/invalidvpcnetwork-state-fault, "InvalidDBSubnetGroupStateFault" :portkey.aws.rds/invaliddbsubnet-group-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds/dbcluster-not-found-fault, "DBClusterParameterGroupNotFoundFault" :portkey.aws.rds/dbcluster-parameter-group-not-found-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds/dbsubnet-group-does-not-cover-enoughazs, "InsufficientStorageClusterCapacityFault" :portkey.aws.rds/insufficient-storage-cluster-capacity-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invaliddbcluster-state-fault, "InvalidSubnet" :portkey.aws.rds/invalid-subnet, "DBClusterQuotaExceededFault" :portkey.aws.rds/dbcluster-quota-exceeded-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds/dbsubnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds/kmskey-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds/storage-quota-exceeded-fault}))))
(clojure.spec.alpha/fdef createdbcluster :args (clojure.spec.alpha/tuple :portkey.aws.rds/createdbcluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/createdbcluster-result))

(clojure.core/defn failoverdbcluster "Forces a failover for a DB cluster.\n A failover for a DB cluster promotes one of the Aurora Replicas (read-only\ninstances) in the DB cluster to be the primary instance (the cluster writer).\n Amazon Aurora will automatically fail over to an Aurora Replica, if one exists,\nwhen the primary instance fails. You can force a failover when you want to\nsimulate a failure of a primary instance for testing. Because each instance in a\nDB cluster has its own endpoint address, you will need to clean up and\nre-establish any existing connections that use those endpoint addresses when the\nfailover is complete.\n For more information on Amazon Aurora, see Aurora on Amazon RDS\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html) in the\nAmazon RDS User Guide." ([] (failoverdbcluster {})) ([failoverdbcluster-message] (clojure.core/let [req<-input__36755__auto__ (req<-failoverdbcluster-message "FailoverDBCluster" failoverdbcluster-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/failoverdbcluster-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/failoverdbcluster-result {"DBClusterNotFoundFault" :portkey.aws.rds/dbcluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invaliddbcluster-state-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invaliddbinstance-state-fault}))))
(clojure.spec.alpha/fdef failoverdbcluster :args (clojure.spec.alpha/? :portkey.aws.rds/failoverdbcluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/failoverdbcluster-result))

(clojure.core/defn resetdbcluster-parameter-group " Modifies the parameters of a DB cluster parameter group to the default value.\nTo reset specific parameters submit a list of the following: ParameterName and\nApplyMethod. To reset the entire DB cluster parameter group, specify the\nDBClusterParameterGroupName and ResetAllParameters parameters.\n When resetting the entire group, dynamic parameters are updated immediately and\nstatic parameters are set to pending-reboot to take effect on the next DB\ninstance restart or RebootDBInstance request. You must call RebootDBInstance for\nevery DB instance in your DB cluster that you want the updated static parameter\nto apply to.\n For more information on Amazon Aurora, see Aurora on Amazon RDS\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html) in the\nAmazon RDS User Guide." ([resetdbcluster-parameter-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-resetdbcluster-parameter-group-message "ResetDBClusterParameterGroup" resetdbcluster-parameter-group-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/resetdbcluster-parameter-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/dbcluster-parameter-group-name-message {"InvalidDBParameterGroupStateFault" :portkey.aws.rds/invaliddbparameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds/dbparameter-group-not-found-fault}))))
(clojure.spec.alpha/fdef resetdbcluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/resetdbcluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/dbcluster-parameter-group-name-message))

(clojure.core/defn createdbinstance "Creates a new DB instance." ([createdbinstance-message] (clojure.core/let [req<-input__36755__auto__ (req<-createdbinstance-message "CreateDBInstance" createdbinstance-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/createdbinstance-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/createdbinstance-result {"DomainNotFoundFault" :portkey.aws.rds/domain-not-found-fault, "InstanceQuotaExceededFault" :portkey.aws.rds/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.rds/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds/invalidvpcnetwork-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds/dbinstance-already-exists-fault, "DBClusterNotFoundFault" :portkey.aws.rds/dbcluster-not-found-fault, "StorageTypeNotSupportedFault" :portkey.aws.rds/storage-type-not-supported-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds/dbsubnet-group-does-not-cover-enoughazs, "AuthorizationNotFoundFault" :portkey.aws.rds/authorization-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invaliddbcluster-state-fault, "InvalidSubnet" :portkey.aws.rds/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds/dbsubnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds/provisioned-iops-not-available-inazfault, "DBParameterGroupNotFoundFault" :portkey.aws.rds/dbparameter-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds/kmskey-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds/storage-quota-exceeded-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds/insufficientdbinstance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds/dbsecurity-group-not-found-fault}))))
(clojure.spec.alpha/fdef createdbinstance :args (clojure.spec.alpha/tuple :portkey.aws.rds/createdbinstance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/createdbinstance-result))

(clojure.core/defn promote-read-replica "Promotes a Read Replica DB instance to a standalone DB instance.\n * Backup duration is a function of the amount of changes to the database since\nthe previous backup. If you plan to promote a Read Replica to a standalone\ninstance, we recommend that you enable backups and complete at least one backup\nprior to promotion. In addition, a Read Replica cannot be promoted to a\nstandalone instance when it is in the backing-up status. If you have enabled\nbackups on your Read Replica, configure the automated backup window so that\ndaily backups do not interfere with Read Replica promotion.\n * This command doesn't apply to Aurora MySQL and Aurora PostgreSQL." ([promote-read-replica-message] (clojure.core/let [req<-input__36755__auto__ (req<-promote-read-replica-message "PromoteReadReplica" promote-read-replica-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/promote-read-replica-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/promote-read-replica-result {"InvalidDBInstanceStateFault" :portkey.aws.rds/invaliddbinstance-state-fault, "DBInstanceNotFoundFault" :portkey.aws.rds/dbinstance-not-found-fault}))))
(clojure.spec.alpha/fdef promote-read-replica :args (clojure.spec.alpha/tuple :portkey.aws.rds/promote-read-replica-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/promote-read-replica-result))

(clojure.core/defn delete-event-subscription "Deletes an RDS event notification subscription." ([delete-event-subscription-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-event-subscription-message "DeleteEventSubscription" delete-event-subscription-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/delete-event-subscription-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/delete-event-subscription-result {"SubscriptionNotFoundFault" :portkey.aws.rds/subscription-not-found-fault, "InvalidEventSubscriptionStateFault" :portkey.aws.rds/invalid-event-subscription-state-fault}))))
(clojure.spec.alpha/fdef delete-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds/delete-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/delete-event-subscription-result))

(clojure.core/defn apply-pending-maintenance-action "Applies a pending maintenance action to a resource (for example, to a DB\ninstance)." ([apply-pending-maintenance-action-message] (clojure.core/let [req<-input__36755__auto__ (req<-apply-pending-maintenance-action-message "ApplyPendingMaintenanceAction" apply-pending-maintenance-action-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/apply-pending-maintenance-action-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/apply-pending-maintenance-action-result {"ResourceNotFoundFault" :portkey.aws.rds/resource-not-found-fault}))))
(clojure.spec.alpha/fdef apply-pending-maintenance-action :args (clojure.spec.alpha/tuple :portkey.aws.rds/apply-pending-maintenance-action-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/apply-pending-maintenance-action-result))

(clojure.core/defn deletedbcluster "The DeleteDBCluster action deletes a previously provisioned DB cluster. When you\ndelete a DB cluster, all automated backups for that DB cluster are deleted and\ncan't be recovered. Manual DB cluster snapshots of the specified DB cluster are\nnot deleted.\n For more information on Amazon Aurora, see Aurora on Amazon RDS\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html) in the\nAmazon RDS User Guide." ([deletedbcluster-message] (clojure.core/let [req<-input__36755__auto__ (req<-deletedbcluster-message "DeleteDBCluster" deletedbcluster-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/deletedbcluster-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/deletedbcluster-result {"DBClusterNotFoundFault" :portkey.aws.rds/dbcluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invaliddbcluster-state-fault, "DBClusterSnapshotAlreadyExistsFault" :portkey.aws.rds/dbcluster-snapshot-already-exists-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds/snapshot-quota-exceeded-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.rds/invaliddbcluster-snapshot-state-fault}))))
(clojure.spec.alpha/fdef deletedbcluster :args (clojure.spec.alpha/tuple :portkey.aws.rds/deletedbcluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/deletedbcluster-result))

(clojure.core/defn restoredbinstance-froms3 "Amazon Relational Database Service (Amazon RDS) supports importing MySQL\ndatabases by using backup files. You can create a backup of your on-premises\ndatabase, store it on Amazon Simple Storage Service (Amazon S3), and then\nrestore the backup file onto a new Amazon RDS DB instance running MySQL. For\nmore information, see Importing Data into an Amazon RDS MySQL DB Instance\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html)." ([restoredbinstance-froms3-message] (clojure.core/let [req<-input__36755__auto__ (req<-restoredbinstance-froms3-message "RestoreDBInstanceFromS3" restoredbinstance-froms3-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/restoredbinstance-froms3-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/restoredbinstance-froms3-result {"InstanceQuotaExceededFault" :portkey.aws.rds/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.rds/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds/invalidvpcnetwork-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds/dbinstance-already-exists-fault, "StorageTypeNotSupportedFault" :portkey.aws.rds/storage-type-not-supported-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds/dbsubnet-group-does-not-cover-enoughazs, "AuthorizationNotFoundFault" :portkey.aws.rds/authorization-not-found-fault, "InvalidSubnet" :portkey.aws.rds/invalid-subnet, "InvalidS3BucketFault" :portkey.aws.rds/invalids3-bucket-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds/dbsubnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds/provisioned-iops-not-available-inazfault, "DBParameterGroupNotFoundFault" :portkey.aws.rds/dbparameter-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds/kmskey-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds/storage-quota-exceeded-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds/insufficientdbinstance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds/dbsecurity-group-not-found-fault}))))
(clojure.spec.alpha/fdef restoredbinstance-froms3 :args (clojure.spec.alpha/tuple :portkey.aws.rds/restoredbinstance-froms3-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/restoredbinstance-froms3-result))

(clojure.core/defn describedblog-files "Returns a list of DB log files for the DB instance." ([describedblog-files-message] (clojure.core/let [req<-input__36755__auto__ (req<-describedblog-files-message "DescribeDBLogFiles" describedblog-files-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describedblog-files-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/describedblog-files-response {"DBInstanceNotFoundFault" :portkey.aws.rds/dbinstance-not-found-fault}))))
(clojure.spec.alpha/fdef describedblog-files :args (clojure.spec.alpha/tuple :portkey.aws.rds/describedblog-files-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/describedblog-files-response))

(clojure.core/defn restoredbinstance-fromdbsnapshot "Creates a new DB instance from a DB snapshot. The target database is created\nfrom the source database restore point with the most of original configuration\nwith the default security group and the default DB parameter group. By default,\nthe new DB instance is created as a single-AZ deployment except when the\ninstance is a SQL Server instance that has an option group that is associated\nwith mirroring; in this case, the instance becomes a mirrored AZ deployment and\nnot a single-AZ deployment.\n If your intent is to replace your original DB instance with the new, restored\nDB instance, then rename your original DB instance before you call the\nRestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with\nthe same name. Once you have renamed your original DB instance with a different\nidentifier, then you can pass the original name of the DB instance as the\nDBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action.\nThe result is that you will replace the original DB instance with the DB\ninstance created from the snapshot.\n If you are restoring from a shared manual DB snapshot, the DBSnapshotIdentifier\nmust be the ARN of the shared DB snapshot.\n This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora,\nuse RestoreDBClusterFromSnapshot." ([restoredbinstance-fromdbsnapshot-message] (clojure.core/let [req<-input__36755__auto__ (req<-restoredbinstance-fromdbsnapshot-message "RestoreDBInstanceFromDBSnapshot" restoredbinstance-fromdbsnapshot-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/restoredbinstance-fromdbsnapshot-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/restoredbinstance-fromdbsnapshot-result {"DomainNotFoundFault" :portkey.aws.rds/domain-not-found-fault, "InstanceQuotaExceededFault" :portkey.aws.rds/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.rds/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds/invalidvpcnetwork-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds/dbinstance-already-exists-fault, "StorageTypeNotSupportedFault" :portkey.aws.rds/storage-type-not-supported-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds/dbsubnet-group-does-not-cover-enoughazs, "AuthorizationNotFoundFault" :portkey.aws.rds/authorization-not-found-fault, "InvalidSubnet" :portkey.aws.rds/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds/dbsubnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds/provisioned-iops-not-available-inazfault, "KMSKeyNotAccessibleFault" :portkey.aws.rds/kmskey-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds/storage-quota-exceeded-fault, "InvalidRestoreFault" :portkey.aws.rds/invalid-restore-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds/insufficientdbinstance-capacity-fault, "InvalidDBSnapshotStateFault" :portkey.aws.rds/invaliddbsnapshot-state-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds/dbsnapshot-not-found-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds/dbsecurity-group-not-found-fault}))))
(clojure.spec.alpha/fdef restoredbinstance-fromdbsnapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds/restoredbinstance-fromdbsnapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/restoredbinstance-fromdbsnapshot-result))

(clojure.core/defn describedbsnapshots "Returns information about DB snapshots. This API action supports pagination." ([] (describedbsnapshots {})) ([describedbsnapshots-message] (clojure.core/let [req<-input__36755__auto__ (req<-describedbsnapshots-message "DescribeDBSnapshots" describedbsnapshots-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describedbsnapshots-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/dbsnapshot-message {"DBSnapshotNotFoundFault" :portkey.aws.rds/dbsnapshot-not-found-fault}))))
(clojure.spec.alpha/fdef describedbsnapshots :args (clojure.spec.alpha/? :portkey.aws.rds/describedbsnapshots-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/dbsnapshot-message))

(clojure.core/defn createdbsubnet-group "Creates a new DB subnet group. DB subnet groups must contain at least one subnet\nin at least two AZs in the AWS Region." ([createdbsubnet-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-createdbsubnet-group-message "CreateDBSubnetGroup" createdbsubnet-group-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/createdbsubnet-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/createdbsubnet-group-result {"DBSubnetGroupAlreadyExistsFault" :portkey.aws.rds/dbsubnet-group-already-exists-fault, "DBSubnetGroupQuotaExceededFault" :portkey.aws.rds/dbsubnet-group-quota-exceeded-fault, "DBSubnetQuotaExceededFault" :portkey.aws.rds/dbsubnet-quota-exceeded-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds/dbsubnet-group-does-not-cover-enoughazs, "InvalidSubnet" :portkey.aws.rds/invalid-subnet}))))
(clojure.spec.alpha/fdef createdbsubnet-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/createdbsubnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/createdbsubnet-group-result))

(clojure.core/defn remove-source-identifier-from-subscription "Removes a source identifier from an existing RDS event notification\nsubscription." ([remove-source-identifier-from-subscription-message] (clojure.core/let [req<-input__36755__auto__ (req<-remove-source-identifier-from-subscription-message "RemoveSourceIdentifierFromSubscription" remove-source-identifier-from-subscription-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/remove-source-identifier-from-subscription-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/remove-source-identifier-from-subscription-result {"SubscriptionNotFoundFault" :portkey.aws.rds/subscription-not-found-fault, "SourceNotFoundFault" :portkey.aws.rds/source-not-found-fault}))))
(clojure.spec.alpha/fdef remove-source-identifier-from-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds/remove-source-identifier-from-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/remove-source-identifier-from-subscription-result))

(clojure.core/defn create-option-group "Creates a new option group. You can create up to 20 option groups." ([create-option-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-option-group-message "CreateOptionGroup" create-option-group-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/create-option-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/create-option-group-result {"OptionGroupAlreadyExistsFault" :portkey.aws.rds/option-group-already-exists-fault, "OptionGroupQuotaExceededFault" :portkey.aws.rds/option-group-quota-exceeded-fault}))))
(clojure.spec.alpha/fdef create-option-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/create-option-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/create-option-group-result))

(clojure.core/defn describedbcluster-parameters "Returns the detailed parameter list for a particular DB cluster parameter group.\n For more information on Amazon Aurora, see Aurora on Amazon RDS\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html) in the\nAmazon RDS User Guide." ([describedbcluster-parameters-message] (clojure.core/let [req<-input__36755__auto__ (req<-describedbcluster-parameters-message "DescribeDBClusterParameters" describedbcluster-parameters-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describedbcluster-parameters-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/dbcluster-parameter-group-details {"DBParameterGroupNotFoundFault" :portkey.aws.rds/dbparameter-group-not-found-fault}))))
(clojure.spec.alpha/fdef describedbcluster-parameters :args (clojure.spec.alpha/tuple :portkey.aws.rds/describedbcluster-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/dbcluster-parameter-group-details))

(clojure.core/defn describe-event-categories "Displays a list of categories for all event source types, or, if specified, for\na specified source type. You can see a list of the event categories and source\ntypes in the Events\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html) topic\nin the Amazon RDS User Guide." ([] (describe-event-categories {})) ([describe-event-categories-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-event-categories-message "DescribeEventCategories" describe-event-categories-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describe-event-categories-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/event-categories-message {}))))
(clojure.spec.alpha/fdef describe-event-categories :args (clojure.spec.alpha/? :portkey.aws.rds/describe-event-categories-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/event-categories-message))

(clojure.core/defn describe-account-attributes "Lists all of the attributes for a customer account. The attributes include\nAmazon RDS quotas for the account, such as the number of DB instances allowed.\nThe description for a quota includes the quota name, current usage toward that\nquota, and the quota's maximum value.\n This command doesn't take any parameters." ([] (describe-account-attributes {})) ([describe-account-attributes-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-account-attributes-message "DescribeAccountAttributes" describe-account-attributes-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describe-account-attributes-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/account-attributes-message {}))))
(clojure.spec.alpha/fdef describe-account-attributes :args (clojure.spec.alpha/? :portkey.aws.rds/describe-account-attributes-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/account-attributes-message))

(clojure.core/defn describe-engine-default-cluster-parameters "Returns the default engine and system parameter information for the cluster\ndatabase engine.\n For more information on Amazon Aurora, see Aurora on Amazon RDS\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html) in the\nAmazon RDS User Guide." ([describe-engine-default-cluster-parameters-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-engine-default-cluster-parameters-message "DescribeEngineDefaultClusterParameters" describe-engine-default-cluster-parameters-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describe-engine-default-cluster-parameters-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/describe-engine-default-cluster-parameters-result {}))))
(clojure.spec.alpha/fdef describe-engine-default-cluster-parameters :args (clojure.spec.alpha/tuple :portkey.aws.rds/describe-engine-default-cluster-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/describe-engine-default-cluster-parameters-result))

(clojure.core/defn modifydbcluster "Modify a setting for an Amazon Aurora DB cluster. You can change one or more\ndatabase configuration parameters by specifying these parameters and the new\nvalues in the request. For more information on Amazon Aurora, see Aurora on\nAmazon RDS\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html) in the\nAmazon RDS User Guide." ([modifydbcluster-message] (clojure.core/let [req<-input__36755__auto__ (req<-modifydbcluster-message "ModifyDBCluster" modifydbcluster-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/modifydbcluster-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/modifydbcluster-result {"DBClusterAlreadyExistsFault" :portkey.aws.rds/dbcluster-already-exists-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invaliddbinstance-state-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds/invalidvpcnetwork-state-fault, "InvalidDBSubnetGroupStateFault" :portkey.aws.rds/invaliddbsubnet-group-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds/dbcluster-not-found-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.rds/invaliddbsecurity-group-state-fault, "DBClusterParameterGroupNotFoundFault" :portkey.aws.rds/dbcluster-parameter-group-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invaliddbcluster-state-fault, "InvalidSubnet" :portkey.aws.rds/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds/dbsubnet-group-not-found-fault, "StorageQuotaExceededFault" :portkey.aws.rds/storage-quota-exceeded-fault}))))
(clojure.spec.alpha/fdef modifydbcluster :args (clojure.spec.alpha/tuple :portkey.aws.rds/modifydbcluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/modifydbcluster-result))

(clojure.core/defn restoredbcluster-froms3 "Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket.\nAmazon RDS must be authorized to access the Amazon S3 bucket and the data must\nbe created using the Percona XtraBackup utility as described in Migrating Data\nfrom MySQL by Using an Amazon S3 Bucket\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Aurora.Migrate.MySQL.html#Aurora.Migrate.MySQL.S3)." ([restoredbcluster-froms3-message] (clojure.core/let [req<-input__36755__auto__ (req<-restoredbcluster-froms3-message "RestoreDBClusterFromS3" restoredbcluster-froms3-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/restoredbcluster-froms3-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/restoredbcluster-froms3-result {"DBClusterAlreadyExistsFault" :portkey.aws.rds/dbcluster-already-exists-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds/invalidvpcnetwork-state-fault, "InvalidDBSubnetGroupStateFault" :portkey.aws.rds/invaliddbsubnet-group-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds/dbcluster-not-found-fault, "DBClusterParameterGroupNotFoundFault" :portkey.aws.rds/dbcluster-parameter-group-not-found-fault, "InsufficientStorageClusterCapacityFault" :portkey.aws.rds/insufficient-storage-cluster-capacity-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invaliddbcluster-state-fault, "InvalidSubnet" :portkey.aws.rds/invalid-subnet, "DBClusterQuotaExceededFault" :portkey.aws.rds/dbcluster-quota-exceeded-fault, "InvalidS3BucketFault" :portkey.aws.rds/invalids3-bucket-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds/dbsubnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds/kmskey-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds/storage-quota-exceeded-fault}))))
(clojure.spec.alpha/fdef restoredbcluster-froms3 :args (clojure.spec.alpha/tuple :portkey.aws.rds/restoredbcluster-froms3-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/restoredbcluster-froms3-result))

(clojure.core/defn describe-reserveddbinstances-offerings "Lists available reserved DB instance offerings." ([] (describe-reserveddbinstances-offerings {})) ([describe-reserveddbinstances-offerings-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-reserveddbinstances-offerings-message "DescribeReservedDBInstancesOfferings" describe-reserveddbinstances-offerings-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describe-reserveddbinstances-offerings-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/reserveddbinstances-offering-message {"ReservedDBInstancesOfferingNotFoundFault" :portkey.aws.rds/reserveddbinstances-offering-not-found-fault}))))
(clojure.spec.alpha/fdef describe-reserveddbinstances-offerings :args (clojure.spec.alpha/? :portkey.aws.rds/describe-reserveddbinstances-offerings-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/reserveddbinstances-offering-message))

(clojure.core/defn describe-pending-maintenance-actions "Returns a list of resources (for example, DB instances) that have at least one\npending maintenance action." ([] (describe-pending-maintenance-actions {})) ([describe-pending-maintenance-actions-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-pending-maintenance-actions-message "DescribePendingMaintenanceActions" describe-pending-maintenance-actions-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describe-pending-maintenance-actions-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/pending-maintenance-actions-message {"ResourceNotFoundFault" :portkey.aws.rds/resource-not-found-fault}))))
(clojure.spec.alpha/fdef describe-pending-maintenance-actions :args (clojure.spec.alpha/? :portkey.aws.rds/describe-pending-maintenance-actions-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/pending-maintenance-actions-message))

(clojure.core/defn createdbsnapshot "Creates a DBSnapshot. The source DBInstance must be in \"available\" state." ([createdbsnapshot-message] (clojure.core/let [req<-input__36755__auto__ (req<-createdbsnapshot-message "CreateDBSnapshot" createdbsnapshot-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/createdbsnapshot-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/createdbsnapshot-result {"DBSnapshotAlreadyExistsFault" :portkey.aws.rds/dbsnapshot-already-exists-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invaliddbinstance-state-fault, "DBInstanceNotFoundFault" :portkey.aws.rds/dbinstance-not-found-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds/snapshot-quota-exceeded-fault}))))
(clojure.spec.alpha/fdef createdbsnapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds/createdbsnapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/createdbsnapshot-result))

(clojure.core/defn downloaddblog-file-portion "Downloads all or a portion of the specified log file, up to 1 MB in size." ([downloaddblog-file-portion-message] (clojure.core/let [req<-input__36755__auto__ (req<-downloaddblog-file-portion-message "DownloadDBLogFilePortion" downloaddblog-file-portion-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/downloaddblog-file-portion-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/downloaddblog-file-portion-details {"DBInstanceNotFoundFault" :portkey.aws.rds/dbinstance-not-found-fault, "DBLogFileNotFoundFault" :portkey.aws.rds/dblog-file-not-found-fault}))))
(clojure.spec.alpha/fdef downloaddblog-file-portion :args (clojure.spec.alpha/tuple :portkey.aws.rds/downloaddblog-file-portion-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/downloaddblog-file-portion-details))

(clojure.core/defn modifydbsnapshot-attribute "Adds an attribute and values to, or removes an attribute and values from, a\nmanual DB snapshot.\n To share a manual DB snapshot with other AWS accounts, specify restore as the\nAttributeName and use the ValuesToAdd parameter to add a list of IDs of the AWS\naccounts that are authorized to restore the manual DB snapshot. Uses the value\nall to make the manual DB snapshot public, which means it can be copied or\nrestored by all AWS accounts. Do not add the all value for any manual DB\nsnapshots that contain private information that you don't want available to all\nAWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only\nby specifying a list of authorized AWS account IDs for the ValuesToAdd\nparameter. You can't use all as a value for that parameter in this case.\n To view which AWS accounts have access to copy or restore a manual DB snapshot,\nor whether a manual DB snapshot public or private, use the\nDescribeDBSnapshotAttributes API action." ([modifydbsnapshot-attribute-message] (clojure.core/let [req<-input__36755__auto__ (req<-modifydbsnapshot-attribute-message "ModifyDBSnapshotAttribute" modifydbsnapshot-attribute-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/modifydbsnapshot-attribute-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/modifydbsnapshot-attribute-result {"DBSnapshotNotFoundFault" :portkey.aws.rds/dbsnapshot-not-found-fault, "InvalidDBSnapshotStateFault" :portkey.aws.rds/invaliddbsnapshot-state-fault, "SharedSnapshotQuotaExceededFault" :portkey.aws.rds/shared-snapshot-quota-exceeded-fault}))))
(clojure.spec.alpha/fdef modifydbsnapshot-attribute :args (clojure.spec.alpha/tuple :portkey.aws.rds/modifydbsnapshot-attribute-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/modifydbsnapshot-attribute-result))

(clojure.core/defn describe-source-regions "Returns a list of the source AWS Regions where the current AWS Region can create\na Read Replica or copy a DB snapshot from. This API action supports pagination." ([] (describe-source-regions {})) ([describe-source-regions-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-source-regions-message "DescribeSourceRegions" describe-source-regions-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describe-source-regions-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/source-region-message {}))))
(clojure.spec.alpha/fdef describe-source-regions :args (clojure.spec.alpha/? :portkey.aws.rds/describe-source-regions-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/source-region-message))

(clojure.core/defn startdbinstance " Starts a DB instance that was stopped using the AWS console, the\nstop-db-instance AWS CLI command, or the StopDBInstance action. For more\ninformation, see Stopping and Starting a DB instance in the AWS RDS user guide.\n This command doesn't apply to Aurora MySQL and Aurora PostgreSQL." ([startdbinstance-message] (clojure.core/let [req<-input__36755__auto__ (req<-startdbinstance-message "StartDBInstance" startdbinstance-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/startdbinstance-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/startdbinstance-result {"DBInstanceNotFoundFault" :portkey.aws.rds/dbinstance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invaliddbinstance-state-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds/invalidvpcnetwork-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds/dbcluster-not-found-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds/dbsubnet-group-does-not-cover-enoughazs, "AuthorizationNotFoundFault" :portkey.aws.rds/authorization-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invaliddbcluster-state-fault, "InvalidSubnet" :portkey.aws.rds/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds/dbsubnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds/kmskey-not-accessible-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds/insufficientdbinstance-capacity-fault}))))
(clojure.spec.alpha/fdef startdbinstance :args (clojure.spec.alpha/tuple :portkey.aws.rds/startdbinstance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/startdbinstance-result))

(clojure.core/defn describedbsnapshot-attributes "Returns a list of DB snapshot attribute names and values for a manual DB\nsnapshot.\n When sharing snapshots with other AWS accounts, DescribeDBSnapshotAttributes\nreturns the restore attribute and a list of IDs for the AWS accounts that are\nauthorized to copy or restore the manual DB snapshot. If all is included in the\nlist of values for the restore attribute, then the manual DB snapshot is public\nand can be copied or restored by all AWS accounts.\n To add or remove access for an AWS account to copy or restore a manual DB\nsnapshot, or to make the manual DB snapshot public or private, use the\nModifyDBSnapshotAttribute API action." ([describedbsnapshot-attributes-message] (clojure.core/let [req<-input__36755__auto__ (req<-describedbsnapshot-attributes-message "DescribeDBSnapshotAttributes" describedbsnapshot-attributes-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describedbsnapshot-attributes-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/describedbsnapshot-attributes-result {"DBSnapshotNotFoundFault" :portkey.aws.rds/dbsnapshot-not-found-fault}))))
(clojure.spec.alpha/fdef describedbsnapshot-attributes :args (clojure.spec.alpha/tuple :portkey.aws.rds/describedbsnapshot-attributes-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/describedbsnapshot-attributes-result))

(clojure.core/defn describedbinstances "Returns information about provisioned RDS instances. This API supports\npagination." ([] (describedbinstances {})) ([describedbinstances-message] (clojure.core/let [req<-input__36755__auto__ (req<-describedbinstances-message "DescribeDBInstances" describedbinstances-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describedbinstances-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/dbinstance-message {"DBInstanceNotFoundFault" :portkey.aws.rds/dbinstance-not-found-fault}))))
(clojure.spec.alpha/fdef describedbinstances :args (clojure.spec.alpha/? :portkey.aws.rds/describedbinstances-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/dbinstance-message))

(clojure.core/defn modify-event-subscription "Modifies an existing RDS event notification subscription. Note that you can't\nmodify the source identifiers using this call; to change source identifiers for\na subscription, use the AddSourceIdentifierToSubscription and\nRemoveSourceIdentifierFromSubscription calls.\n You can see a list of the event categories for a given SourceType in the Events\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html) topic\nin the Amazon RDS User Guide or by using the DescribeEventCategories action." ([modify-event-subscription-message] (clojure.core/let [req<-input__36755__auto__ (req<-modify-event-subscription-message "ModifyEventSubscription" modify-event-subscription-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/modify-event-subscription-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/modify-event-subscription-result {"EventSubscriptionQuotaExceededFault" :portkey.aws.rds/event-subscription-quota-exceeded-fault, "SubscriptionNotFoundFault" :portkey.aws.rds/subscription-not-found-fault, "SNSInvalidTopicFault" :portkey.aws.rds/snsinvalid-topic-fault, "SNSNoAuthorizationFault" :portkey.aws.rds/snsno-authorization-fault, "SNSTopicArnNotFoundFault" :portkey.aws.rds/snstopic-arn-not-found-fault, "SubscriptionCategoryNotFoundFault" :portkey.aws.rds/subscription-category-not-found-fault}))))
(clojure.spec.alpha/fdef modify-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds/modify-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/modify-event-subscription-result))

(clojure.core/defn describedbengine-versions "Returns a list of the available DB engines." ([] (describedbengine-versions {})) ([describedbengine-versions-message] (clojure.core/let [req<-input__36755__auto__ (req<-describedbengine-versions-message "DescribeDBEngineVersions" describedbengine-versions-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describedbengine-versions-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/dbengine-version-message {}))))
(clojure.spec.alpha/fdef describedbengine-versions :args (clojure.spec.alpha/? :portkey.aws.rds/describedbengine-versions-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/dbengine-version-message))

(clojure.core/defn modifydbcluster-parameter-group " Modifies the parameters of a DB cluster parameter group. To modify more than\none parameter, submit a list of the following: ParameterName, ParameterValue,\nand ApplyMethod. A maximum of 20 parameters can be modified in a single request.\n For more information on Amazon Aurora, see Aurora on Amazon RDS\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html) in the\nAmazon RDS User Guide.\n Changes to dynamic parameters are applied immediately. Changes to static\nparameters require a reboot without failover to the DB cluster associated with\nthe parameter group before the change can take effect.\n After you create a DB cluster parameter group, you should wait at least 5\nminutes before creating your first DB cluster that uses that DB cluster\nparameter group as the default parameter group. This allows Amazon RDS to fully\ncomplete the create action before the parameter group is used as the default for\na new DB cluster. This is especially important for parameters that are critical\nwhen creating the default database for a DB cluster, such as the character set\nfor the default database defined by the character_set_database parameter. You\ncan use the Parameter Groups option of the Amazon RDS console\n(https://console.aws.amazon.com/rds/) or the DescribeDBClusterParameters command\nto verify that your DB cluster parameter group has been created or modified." ([modifydbcluster-parameter-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-modifydbcluster-parameter-group-message "ModifyDBClusterParameterGroup" modifydbcluster-parameter-group-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/modifydbcluster-parameter-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/dbcluster-parameter-group-name-message {"DBParameterGroupNotFoundFault" :portkey.aws.rds/dbparameter-group-not-found-fault, "InvalidDBParameterGroupStateFault" :portkey.aws.rds/invaliddbparameter-group-state-fault}))))
(clojure.spec.alpha/fdef modifydbcluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/modifydbcluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/dbcluster-parameter-group-name-message))

(clojure.core/defn describe-option-group-options "Describes all available options." ([describe-option-group-options-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-option-group-options-message "DescribeOptionGroupOptions" describe-option-group-options-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describe-option-group-options-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/option-group-options-message {}))))
(clojure.spec.alpha/fdef describe-option-group-options :args (clojure.spec.alpha/tuple :portkey.aws.rds/describe-option-group-options-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/option-group-options-message))

(clojure.core/defn createdbsecurity-group "Creates a new DB security group. DB security groups control access to a DB\ninstance." ([createdbsecurity-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-createdbsecurity-group-message "CreateDBSecurityGroup" createdbsecurity-group-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/createdbsecurity-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/createdbsecurity-group-result {"DBSecurityGroupAlreadyExistsFault" :portkey.aws.rds/dbsecurity-group-already-exists-fault, "DBSecurityGroupQuotaExceededFault" :portkey.aws.rds/dbsecurity-group-quota-exceeded-fault, "DBSecurityGroupNotSupportedFault" :portkey.aws.rds/dbsecurity-group-not-supported-fault}))))
(clojure.spec.alpha/fdef createdbsecurity-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/createdbsecurity-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/createdbsecurity-group-result))

(clojure.core/defn delete-option-group "Deletes an existing option group." ([delete-option-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-option-group-message "DeleteOptionGroup" delete-option-group-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/delete-option-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"OptionGroupNotFoundFault" :portkey.aws.rds/option-group-not-found-fault, "InvalidOptionGroupStateFault" :portkey.aws.rds/invalid-option-group-state-fault}))))
(clojure.spec.alpha/fdef delete-option-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/delete-option-group-message) :ret clojure.core/true?)

(clojure.core/defn create-event-subscription "Creates an RDS event notification subscription. This action requires a topic ARN\n(Amazon Resource Name) created by either the RDS console, the SNS console, or\nthe SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS\nand subscribe to the topic. The ARN is displayed in the SNS console.\n You can specify the type of source (SourceType) you want to be notified of,\nprovide a list of RDS sources (SourceIds) that triggers the events, and provide\na list of event categories (EventCategories) for events you want to be notified\nof. For example, you can specify SourceType = db-instance, SourceIds =\nmydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.\n If you specify both the SourceType and SourceIds, such as SourceType =\ndb-instance and SourceIdentifier = myDBInstance1, you are notified of all the\ndb-instance events for the specified source. If you specify a SourceType but do\nnot specify a SourceIdentifier, you receive notice of the events for that source\ntype for all your RDS sources. If you do not specify either the SourceType nor\nthe SourceIdentifier, you are notified of events generated from all RDS sources\nbelonging to your customer account." ([create-event-subscription-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-event-subscription-message "CreateEventSubscription" create-event-subscription-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/create-event-subscription-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/create-event-subscription-result {"EventSubscriptionQuotaExceededFault" :portkey.aws.rds/event-subscription-quota-exceeded-fault, "SubscriptionAlreadyExistFault" :portkey.aws.rds/subscription-already-exist-fault, "SNSInvalidTopicFault" :portkey.aws.rds/snsinvalid-topic-fault, "SNSNoAuthorizationFault" :portkey.aws.rds/snsno-authorization-fault, "SNSTopicArnNotFoundFault" :portkey.aws.rds/snstopic-arn-not-found-fault, "SubscriptionCategoryNotFoundFault" :portkey.aws.rds/subscription-category-not-found-fault, "SourceNotFoundFault" :portkey.aws.rds/source-not-found-fault}))))
(clojure.spec.alpha/fdef create-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds/create-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/create-event-subscription-result))

(clojure.core/defn modifydbcluster-snapshot-attribute "Adds an attribute and values to, or removes an attribute and values from, a\nmanual DB cluster snapshot.\n To share a manual DB cluster snapshot with other AWS accounts, specify restore\nas the AttributeName and use the ValuesToAdd parameter to add a list of IDs of\nthe AWS accounts that are authorized to restore the manual DB cluster snapshot.\nUse the value all to make the manual DB cluster snapshot public, which means\nthat it can be copied or restored by all AWS accounts. Do not add the all value\nfor any manual DB cluster snapshots that contain private information that you\ndon't want available to all AWS accounts. If a manual DB cluster snapshot is\nencrypted, it can be shared, but only by specifying a list of authorized AWS\naccount IDs for the ValuesToAdd parameter. You can't use all as a value for that\nparameter in this case.\n To view which AWS accounts have access to copy or restore a manual DB cluster\nsnapshot, or whether a manual DB cluster snapshot public or private, use the\nDescribeDBClusterSnapshotAttributes API action." ([modifydbcluster-snapshot-attribute-message] (clojure.core/let [req<-input__36755__auto__ (req<-modifydbcluster-snapshot-attribute-message "ModifyDBClusterSnapshotAttribute" modifydbcluster-snapshot-attribute-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/modifydbcluster-snapshot-attribute-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/modifydbcluster-snapshot-attribute-result {"DBClusterSnapshotNotFoundFault" :portkey.aws.rds/dbcluster-snapshot-not-found-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.rds/invaliddbcluster-snapshot-state-fault, "SharedSnapshotQuotaExceededFault" :portkey.aws.rds/shared-snapshot-quota-exceeded-fault}))))
(clojure.spec.alpha/fdef modifydbcluster-snapshot-attribute :args (clojure.spec.alpha/tuple :portkey.aws.rds/modifydbcluster-snapshot-attribute-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/modifydbcluster-snapshot-attribute-result))

(clojure.core/defn createdbparameter-group "Creates a new DB parameter group.\n A DB parameter group is initially created with the default parameters for the\ndatabase engine used by the DB instance. To provide custom values for any of the\nparameters, you must modify the group after creating it using\nModifyDBParameterGroup. Once you've created a DB parameter group, you need to\nassociate it with your DB instance using ModifyDBInstance. When you associate a\nnew DB parameter group with a running DB instance, you need to reboot the DB\ninstance without failover for the new DB parameter group and associated settings\nto take effect.\n After you create a DB parameter group, you should wait at least 5 minutes\nbefore creating your first DB instance that uses that DB parameter group as the\ndefault parameter group. This allows Amazon RDS to fully complete the create\naction before the parameter group is used as the default for a new DB instance.\nThis is especially important for parameters that are critical when creating the\ndefault database for a DB instance, such as the character set for the default\ndatabase defined by the character_set_database parameter. You can use the\nParameter Groups option of the Amazon RDS console\n(https://console.aws.amazon.com/rds/) or the DescribeDBParameters command to\nverify that your DB parameter group has been created or modified." ([createdbparameter-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-createdbparameter-group-message "CreateDBParameterGroup" createdbparameter-group-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/createdbparameter-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/createdbparameter-group-result {"DBParameterGroupQuotaExceededFault" :portkey.aws.rds/dbparameter-group-quota-exceeded-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.rds/dbparameter-group-already-exists-fault}))))
(clojure.spec.alpha/fdef createdbparameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/createdbparameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/createdbparameter-group-result))

(clojure.core/defn describe-validdbinstance-modifications "You can call DescribeValidDBInstanceModifications to learn what modifications\nyou can make to your DB instance. You can use this information when you call\nModifyDBInstance." ([describe-validdbinstance-modifications-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-validdbinstance-modifications-message "DescribeValidDBInstanceModifications" describe-validdbinstance-modifications-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describe-validdbinstance-modifications-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/describe-validdbinstance-modifications-result {"DBInstanceNotFoundFault" :portkey.aws.rds/dbinstance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invaliddbinstance-state-fault}))))
(clojure.spec.alpha/fdef describe-validdbinstance-modifications :args (clojure.spec.alpha/tuple :portkey.aws.rds/describe-validdbinstance-modifications-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/describe-validdbinstance-modifications-result))

(clojure.core/defn purchase-reserveddbinstances-offering "Purchases a reserved DB instance offering." ([purchase-reserveddbinstances-offering-message] (clojure.core/let [req<-input__36755__auto__ (req<-purchase-reserveddbinstances-offering-message "PurchaseReservedDBInstancesOffering" purchase-reserveddbinstances-offering-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/purchase-reserveddbinstances-offering-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/purchase-reserveddbinstances-offering-result {"ReservedDBInstancesOfferingNotFoundFault" :portkey.aws.rds/reserveddbinstances-offering-not-found-fault, "ReservedDBInstanceAlreadyExistsFault" :portkey.aws.rds/reserveddbinstance-already-exists-fault, "ReservedDBInstanceQuotaExceededFault" :portkey.aws.rds/reserveddbinstance-quota-exceeded-fault}))))
(clojure.spec.alpha/fdef purchase-reserveddbinstances-offering :args (clojure.spec.alpha/tuple :portkey.aws.rds/purchase-reserveddbinstances-offering-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/purchase-reserveddbinstances-offering-result))

(clojure.core/defn describedbcluster-snapshots "Returns information about DB cluster snapshots. This API action supports\npagination.\n For more information on Amazon Aurora, see Aurora on Amazon RDS\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html) in the\nAmazon RDS User Guide." ([] (describedbcluster-snapshots {})) ([describedbcluster-snapshots-message] (clojure.core/let [req<-input__36755__auto__ (req<-describedbcluster-snapshots-message "DescribeDBClusterSnapshots" describedbcluster-snapshots-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describedbcluster-snapshots-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/dbcluster-snapshot-message {"DBClusterSnapshotNotFoundFault" :portkey.aws.rds/dbcluster-snapshot-not-found-fault}))))
(clojure.spec.alpha/fdef describedbcluster-snapshots :args (clojure.spec.alpha/? :portkey.aws.rds/describedbcluster-snapshots-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/dbcluster-snapshot-message))

(clojure.core/defn deletedbparameter-group "Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't\nbe associated with any DB instances." ([deletedbparameter-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-deletedbparameter-group-message "DeleteDBParameterGroup" deletedbparameter-group-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/deletedbparameter-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"InvalidDBParameterGroupStateFault" :portkey.aws.rds/invaliddbparameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds/dbparameter-group-not-found-fault}))))
(clojure.spec.alpha/fdef deletedbparameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/deletedbparameter-group-message) :ret clojure.core/true?)

(clojure.core/defn copydbsnapshot "Copies the specified DB snapshot. The source DB snapshot must be in the\n\"available\" state.\n You can copy a snapshot from one AWS Region to another. In that case, the AWS\nRegion where you call the CopyDBSnapshot action is the destination AWS Region\nfor the DB snapshot copy.\n For more information about copying snapshots, see Copying a DB Snapshot\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html)\nin the Amazon RDS User Guide." ([copydbsnapshot-message] (clojure.core/let [req<-input__36755__auto__ (req<-copydbsnapshot-message "CopyDBSnapshot" copydbsnapshot-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/copydbsnapshot-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/copydbsnapshot-result {"DBSnapshotAlreadyExistsFault" :portkey.aws.rds/dbsnapshot-already-exists-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds/dbsnapshot-not-found-fault, "InvalidDBSnapshotStateFault" :portkey.aws.rds/invaliddbsnapshot-state-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds/snapshot-quota-exceeded-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds/kmskey-not-accessible-fault}))))
(clojure.spec.alpha/fdef copydbsnapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds/copydbsnapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/copydbsnapshot-result))

(clojure.core/defn describe-reserveddbinstances "Returns information about reserved DB instances for this account, or about a\nspecified reserved DB instance." ([] (describe-reserveddbinstances {})) ([describe-reserveddbinstances-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-reserveddbinstances-message "DescribeReservedDBInstances" describe-reserveddbinstances-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describe-reserveddbinstances-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/reserveddbinstance-message {"ReservedDBInstanceNotFoundFault" :portkey.aws.rds/reserveddbinstance-not-found-fault}))))
(clojure.spec.alpha/fdef describe-reserveddbinstances :args (clojure.spec.alpha/? :portkey.aws.rds/describe-reserveddbinstances-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/reserveddbinstance-message))

(clojure.core/defn describe-event-subscriptions "Lists all the subscription descriptions for a customer account. The description\nfor a subscription includes SubscriptionName, SNSTopicARN, CustomerID,\nSourceType, SourceID, CreationTime, and Status.\n If you specify a SubscriptionName, lists the description for that subscription." ([] (describe-event-subscriptions {})) ([describe-event-subscriptions-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-event-subscriptions-message "DescribeEventSubscriptions" describe-event-subscriptions-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describe-event-subscriptions-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/event-subscriptions-message {"SubscriptionNotFoundFault" :portkey.aws.rds/subscription-not-found-fault}))))
(clojure.spec.alpha/fdef describe-event-subscriptions :args (clojure.spec.alpha/? :portkey.aws.rds/describe-event-subscriptions-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/event-subscriptions-message))

(clojure.core/defn modifydbinstance "Modifies settings for a DB instance. You can change one or more database\nconfiguration parameters by specifying these parameters and the new values in\nthe request. To learn what modifications you can make to your DB instance, call\nDescribeValidDBInstanceModifications before you call ModifyDBInstance." ([modifydbinstance-message] (clojure.core/let [req<-input__36755__auto__ (req<-modifydbinstance-message "ModifyDBInstance" modifydbinstance-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/modifydbinstance-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/modifydbinstance-result {"DBInstanceNotFoundFault" :portkey.aws.rds/dbinstance-not-found-fault, "DomainNotFoundFault" :portkey.aws.rds/domain-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invaliddbinstance-state-fault, "OptionGroupNotFoundFault" :portkey.aws.rds/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds/invalidvpcnetwork-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds/dbinstance-already-exists-fault, "CertificateNotFoundFault" :portkey.aws.rds/certificate-not-found-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.rds/invaliddbsecurity-group-state-fault, "StorageTypeNotSupportedFault" :portkey.aws.rds/storage-type-not-supported-fault, "AuthorizationNotFoundFault" :portkey.aws.rds/authorization-not-found-fault, "DBUpgradeDependencyFailureFault" :portkey.aws.rds/dbupgrade-dependency-failure-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds/provisioned-iops-not-available-inazfault, "DBParameterGroupNotFoundFault" :portkey.aws.rds/dbparameter-group-not-found-fault, "StorageQuotaExceededFault" :portkey.aws.rds/storage-quota-exceeded-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds/insufficientdbinstance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds/dbsecurity-group-not-found-fault}))))
(clojure.spec.alpha/fdef modifydbinstance :args (clojure.spec.alpha/tuple :portkey.aws.rds/modifydbinstance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/modifydbinstance-result))

(clojure.core/defn describedbcluster-parameter-groups " Returns a list of DBClusterParameterGroup descriptions. If a\nDBClusterParameterGroupName parameter is specified, the list will contain only\nthe description of the specified DB cluster parameter group.\n For more information on Amazon Aurora, see Aurora on Amazon RDS\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html) in the\nAmazon RDS User Guide." ([] (describedbcluster-parameter-groups {})) ([describedbcluster-parameter-groups-message] (clojure.core/let [req<-input__36755__auto__ (req<-describedbcluster-parameter-groups-message "DescribeDBClusterParameterGroups" describedbcluster-parameter-groups-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describedbcluster-parameter-groups-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/dbcluster-parameter-groups-message {"DBParameterGroupNotFoundFault" :portkey.aws.rds/dbparameter-group-not-found-fault}))))
(clojure.spec.alpha/fdef describedbcluster-parameter-groups :args (clojure.spec.alpha/? :portkey.aws.rds/describedbcluster-parameter-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/dbcluster-parameter-groups-message))

(clojure.core/defn createdbcluster-snapshot "Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see\nAurora on Amazon RDS\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html) in the\nAmazon RDS User Guide." ([createdbcluster-snapshot-message] (clojure.core/let [req<-input__36755__auto__ (req<-createdbcluster-snapshot-message "CreateDBClusterSnapshot" createdbcluster-snapshot-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/createdbcluster-snapshot-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/createdbcluster-snapshot-result {"DBClusterSnapshotAlreadyExistsFault" :portkey.aws.rds/dbcluster-snapshot-already-exists-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invaliddbcluster-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds/dbcluster-not-found-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds/snapshot-quota-exceeded-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.rds/invaliddbcluster-snapshot-state-fault}))))
(clojure.spec.alpha/fdef createdbcluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds/createdbcluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/createdbcluster-snapshot-result))

(clojure.core/defn describedbparameters "Returns the detailed parameter list for a particular DB parameter group." ([describedbparameters-message] (clojure.core/let [req<-input__36755__auto__ (req<-describedbparameters-message "DescribeDBParameters" describedbparameters-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describedbparameters-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/dbparameter-group-details {"DBParameterGroupNotFoundFault" :portkey.aws.rds/dbparameter-group-not-found-fault}))))
(clojure.spec.alpha/fdef describedbparameters :args (clojure.spec.alpha/tuple :portkey.aws.rds/describedbparameters-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/dbparameter-group-details))

(clojure.core/defn modify-option-group "Modifies an existing option group." ([modify-option-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-modify-option-group-message "ModifyOptionGroup" modify-option-group-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/modify-option-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/modify-option-group-result {"InvalidOptionGroupStateFault" :portkey.aws.rds/invalid-option-group-state-fault, "OptionGroupNotFoundFault" :portkey.aws.rds/option-group-not-found-fault}))))
(clojure.spec.alpha/fdef modify-option-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/modify-option-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/modify-option-group-result))

(clojure.core/defn describedbparameter-groups " Returns a list of DBParameterGroup descriptions. If a DBParameterGroupName is\nspecified, the list will contain only the description of the specified DB\nparameter group." ([] (describedbparameter-groups {})) ([describedbparameter-groups-message] (clojure.core/let [req<-input__36755__auto__ (req<-describedbparameter-groups-message "DescribeDBParameterGroups" describedbparameter-groups-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describedbparameter-groups-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/dbparameter-groups-message {"DBParameterGroupNotFoundFault" :portkey.aws.rds/dbparameter-group-not-found-fault}))))
(clojure.spec.alpha/fdef describedbparameter-groups :args (clojure.spec.alpha/? :portkey.aws.rds/describedbparameter-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/dbparameter-groups-message))

(clojure.core/defn remove-tags-from-resource "Removes metadata tags from an Amazon RDS resource.\n For an overview on tagging an Amazon RDS resource, see Tagging Amazon RDS\nResources\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html)." ([remove-tags-from-resource-message] (clojure.core/let [req<-input__36755__auto__ (req<-remove-tags-from-resource-message "RemoveTagsFromResource" remove-tags-from-resource-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/remove-tags-from-resource-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"DBInstanceNotFoundFault" :portkey.aws.rds/dbinstance-not-found-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds/dbsnapshot-not-found-fault, "DBClusterNotFoundFault" :portkey.aws.rds/dbcluster-not-found-fault}))))
(clojure.spec.alpha/fdef remove-tags-from-resource :args (clojure.spec.alpha/tuple :portkey.aws.rds/remove-tags-from-resource-message) :ret clojure.core/true?)

(clojure.core/defn copydbcluster-snapshot "Copies a snapshot of a DB cluster.\n To copy a DB cluster snapshot from a shared manual DB cluster snapshot,\nSourceDBClusterSnapshotIdentifier must be the Amazon Resource Name (ARN) of the\nshared DB cluster snapshot.\n You can copy an encrypted DB cluster snapshot from another AWS Region. In that\ncase, the AWS Region where you call the CopyDBClusterSnapshot action is the\ndestination AWS Region for the encrypted DB cluster snapshot to be copied to. To\ncopy an encrypted DB cluster snapshot from another AWS Region, you must provide\nthe following values:\n * KmsKeyId - The AWS Key Management System (AWS KMS) key identifier for the key\nto use to encrypt the copy of the DB cluster snapshot in the destination AWS\nRegion.\n * PreSignedUrl - A URL that contains a Signature Version 4 signed request for\nthe CopyDBClusterSnapshot action to be called in the source AWS Region where the\nDB cluster snapshot is copied from. The pre-signed URL must be a valid request\nfor the CopyDBClusterSnapshot API action that can be executed in the source AWS\nRegion that contains the encrypted DB cluster snapshot to be copied.\n The pre-signed URL request must contain the following parameter values:\n * KmsKeyId - The KMS key identifier for the key to use to encrypt the copy of\nthe DB cluster snapshot in the destination AWS Region. This is the same\nidentifier for both the CopyDBClusterSnapshot action that is called in the\ndestination AWS Region, and the action contained in the pre-signed URL.\n * DestinationRegion - The name of the AWS Region that the DB cluster snapshot\nwill be created in.\n * SourceDBClusterSnapshotIdentifier - The DB cluster snapshot identifier for\nthe encrypted DB cluster snapshot to be copied. This identifier must be in the\nAmazon Resource Name (ARN) format for the source AWS Region. For example, if you\nare copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then\nyour SourceDBClusterSnapshotIdentifier looks like the following example:\narn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115.\n To learn how to generate a Signature Version 4 signed request, see\nAuthenticating Requests: Using Query Parameters (AWS Signature Version 4)\n(http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html)\nand Signature Version 4 Signing Process\n(http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html).\n * TargetDBClusterSnapshotIdentifier - The identifier for the new copy of the DB\ncluster snapshot in the destination AWS Region.\n * SourceDBClusterSnapshotIdentifier - The DB cluster snapshot identifier for\nthe encrypted DB cluster snapshot to be copied. This identifier must be in the\nARN format for the source AWS Region and is the same value as the\nSourceDBClusterSnapshotIdentifier in the pre-signed URL.\n To cancel the copy operation once it is in progress, delete the target DB\ncluster snapshot identified by TargetDBClusterSnapshotIdentifier while that DB\ncluster snapshot is in \"copying\" status.\n For more information on copying encrypted DB cluster snapshots from one AWS\nRegion to another, see Copying a DB Cluster Snapshot in the Same Account, Either\nin the Same Region or Across Regions\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBClusterSnapshot.CrossRegion)\nin the Amazon RDS User Guide.\n For more information on Amazon Aurora, see Aurora on Amazon RDS\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html) in the\nAmazon RDS User Guide." ([copydbcluster-snapshot-message] (clojure.core/let [req<-input__36755__auto__ (req<-copydbcluster-snapshot-message "CopyDBClusterSnapshot" copydbcluster-snapshot-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/copydbcluster-snapshot-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/copydbcluster-snapshot-result {"DBClusterSnapshotAlreadyExistsFault" :portkey.aws.rds/dbcluster-snapshot-already-exists-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.rds/dbcluster-snapshot-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invaliddbcluster-state-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.rds/invaliddbcluster-snapshot-state-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds/snapshot-quota-exceeded-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds/kmskey-not-accessible-fault}))))
(clojure.spec.alpha/fdef copydbcluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds/copydbcluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/copydbcluster-snapshot-result))

(clojure.core/defn deletedbcluster-parameter-group "Deletes a specified DB cluster parameter group. The DB cluster parameter group\nto be deleted can't be associated with any DB clusters.\n For more information on Amazon Aurora, see Aurora on Amazon RDS\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html) in the\nAmazon RDS User Guide." ([deletedbcluster-parameter-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-deletedbcluster-parameter-group-message "DeleteDBClusterParameterGroup" deletedbcluster-parameter-group-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/deletedbcluster-parameter-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"InvalidDBParameterGroupStateFault" :portkey.aws.rds/invaliddbparameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds/dbparameter-group-not-found-fault}))))
(clojure.spec.alpha/fdef deletedbcluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/deletedbcluster-parameter-group-message) :ret clojure.core/true?)

(clojure.core/defn add-role-todbcluster "Associates an Identity and Access Management (IAM) role from an Aurora DB\ncluster. For more information, see Authorizing Amazon Aurora to Access Other AWS\nServices On Your Behalf\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Aurora.Authorizing.AWSServices.html)." ([add-role-todbcluster-message] (clojure.core/let [req<-input__36755__auto__ (req<-add-role-todbcluster-message "AddRoleToDBCluster" add-role-todbcluster-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/add-role-todbcluster-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"DBClusterNotFoundFault" :portkey.aws.rds/dbcluster-not-found-fault, "DBClusterRoleAlreadyExistsFault" :portkey.aws.rds/dbcluster-role-already-exists-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invaliddbcluster-state-fault, "DBClusterRoleQuotaExceededFault" :portkey.aws.rds/dbcluster-role-quota-exceeded-fault}))))
(clojure.spec.alpha/fdef add-role-todbcluster :args (clojure.spec.alpha/tuple :portkey.aws.rds/add-role-todbcluster-message) :ret clojure.core/true?)

(clojure.core/defn copy-option-group "Copies the specified option group." ([copy-option-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-copy-option-group-message "CopyOptionGroup" copy-option-group-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/copy-option-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/copy-option-group-result {"OptionGroupAlreadyExistsFault" :portkey.aws.rds/option-group-already-exists-fault, "OptionGroupNotFoundFault" :portkey.aws.rds/option-group-not-found-fault, "OptionGroupQuotaExceededFault" :portkey.aws.rds/option-group-quota-exceeded-fault}))))
(clojure.spec.alpha/fdef copy-option-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/copy-option-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/copy-option-group-result))

(clojure.core/defn promote-read-replicadbcluster "Promotes a Read Replica DB cluster to a standalone DB cluster." ([promote-read-replicadbcluster-message] (clojure.core/let [req<-input__36755__auto__ (req<-promote-read-replicadbcluster-message "PromoteReadReplicaDBCluster" promote-read-replicadbcluster-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/promote-read-replicadbcluster-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/promote-read-replicadbcluster-result {"DBClusterNotFoundFault" :portkey.aws.rds/dbcluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invaliddbcluster-state-fault}))))
(clojure.spec.alpha/fdef promote-read-replicadbcluster :args (clojure.spec.alpha/tuple :portkey.aws.rds/promote-read-replicadbcluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/promote-read-replicadbcluster-result))

(clojure.core/defn add-tags-to-resource "Adds metadata tags to an Amazon RDS resource. These tags can also be used with\ncost allocation reporting to track cost associated with Amazon RDS resources, or\nused in a Condition statement in an IAM policy for Amazon RDS.\n For an overview on tagging Amazon RDS resources, see Tagging Amazon RDS\nResources\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html)." ([add-tags-to-resource-message] (clojure.core/let [req<-input__36755__auto__ (req<-add-tags-to-resource-message "AddTagsToResource" add-tags-to-resource-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/add-tags-to-resource-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"DBInstanceNotFoundFault" :portkey.aws.rds/dbinstance-not-found-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds/dbsnapshot-not-found-fault, "DBClusterNotFoundFault" :portkey.aws.rds/dbcluster-not-found-fault}))))
(clojure.spec.alpha/fdef add-tags-to-resource :args (clojure.spec.alpha/tuple :portkey.aws.rds/add-tags-to-resource-message) :ret clojure.core/true?)

(clojure.core/defn restoredbcluster-from-snapshot "Creates a new DB cluster from a DB snapshot or DB cluster snapshot.\n If a DB snapshot is specified, the target DB cluster is created from the source\nDB snapshot with a default configuration and default security group.\n If a DB cluster snapshot is specified, the target DB cluster is created from\nthe source DB cluster restore point with the same configuration as the original\nsource DB cluster, except that the new DB cluster is created with the default\nsecurity group.\n For more information on Amazon Aurora, see Aurora on Amazon RDS\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Aurora.html) in the\nAmazon RDS User Guide." ([restoredbcluster-from-snapshot-message] (clojure.core/let [req<-input__36755__auto__ (req<-restoredbcluster-from-snapshot-message "RestoreDBClusterFromSnapshot" restoredbcluster-from-snapshot-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/restoredbcluster-from-snapshot-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/restoredbcluster-from-snapshot-result {"DBClusterAlreadyExistsFault" :portkey.aws.rds/dbcluster-already-exists-fault, "OptionGroupNotFoundFault" :portkey.aws.rds/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds/invalidvpcnetwork-state-fault, "InsufficientStorageClusterCapacityFault" :portkey.aws.rds/insufficient-storage-cluster-capacity-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.rds/dbcluster-snapshot-not-found-fault, "InvalidSubnet" :portkey.aws.rds/invalid-subnet, "DBClusterQuotaExceededFault" :portkey.aws.rds/dbcluster-quota-exceeded-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds/dbsubnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds/kmskey-not-accessible-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.rds/invaliddbcluster-snapshot-state-fault, "StorageQuotaExceededFault" :portkey.aws.rds/storage-quota-exceeded-fault, "InvalidRestoreFault" :portkey.aws.rds/invalid-restore-fault, "InsufficientDBClusterCapacityFault" :portkey.aws.rds/insufficientdbcluster-capacity-fault, "InvalidDBSnapshotStateFault" :portkey.aws.rds/invaliddbsnapshot-state-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds/dbsnapshot-not-found-fault}))))
(clojure.spec.alpha/fdef restoredbcluster-from-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds/restoredbcluster-from-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/restoredbcluster-from-snapshot-result))

(clojure.core/defn modifydbparameter-group " Modifies the parameters of a DB parameter group. To modify more than one\nparameter, submit a list of the following: ParameterName, ParameterValue, and\nApplyMethod. A maximum of 20 parameters can be modified in a single request.\n Changes to dynamic parameters are applied immediately. Changes to static\nparameters require a reboot without failover to the DB instance associated with\nthe parameter group before the change can take effect.\n After you modify a DB parameter group, you should wait at least 5 minutes\nbefore creating your first DB instance that uses that DB parameter group as the\ndefault parameter group. This allows Amazon RDS to fully complete the modify\naction before the parameter group is used as the default for a new DB instance.\nThis is especially important for parameters that are critical when creating the\ndefault database for a DB instance, such as the character set for the default\ndatabase defined by the character_set_database parameter. You can use the\nParameter Groups option of the Amazon RDS console\n(https://console.aws.amazon.com/rds/) or the DescribeDBParameters command to\nverify that your DB parameter group has been created or modified." ([modifydbparameter-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-modifydbparameter-group-message "ModifyDBParameterGroup" modifydbparameter-group-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/modifydbparameter-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/dbparameter-group-name-message {"DBParameterGroupNotFoundFault" :portkey.aws.rds/dbparameter-group-not-found-fault, "InvalidDBParameterGroupStateFault" :portkey.aws.rds/invaliddbparameter-group-state-fault}))))
(clojure.spec.alpha/fdef modifydbparameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/modifydbparameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/dbparameter-group-name-message))

(clojure.core/defn describedbcluster-snapshot-attributes "Returns a list of DB cluster snapshot attribute names and values for a manual DB\ncluster snapshot.\n When sharing snapshots with other AWS accounts,\nDescribeDBClusterSnapshotAttributes returns the restore attribute and a list of\nIDs for the AWS accounts that are authorized to copy or restore the manual DB\ncluster snapshot. If all is included in the list of values for the restore\nattribute, then the manual DB cluster snapshot is public and can be copied or\nrestored by all AWS accounts.\n To add or remove access for an AWS account to copy or restore a manual DB\ncluster snapshot, or to make the manual DB cluster snapshot public or private,\nuse the ModifyDBClusterSnapshotAttribute API action." ([describedbcluster-snapshot-attributes-message] (clojure.core/let [req<-input__36755__auto__ (req<-describedbcluster-snapshot-attributes-message "DescribeDBClusterSnapshotAttributes" describedbcluster-snapshot-attributes-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describedbcluster-snapshot-attributes-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/describedbcluster-snapshot-attributes-result {"DBClusterSnapshotNotFoundFault" :portkey.aws.rds/dbcluster-snapshot-not-found-fault}))))
(clojure.spec.alpha/fdef describedbcluster-snapshot-attributes :args (clojure.spec.alpha/tuple :portkey.aws.rds/describedbcluster-snapshot-attributes-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/describedbcluster-snapshot-attributes-result))

(clojure.core/defn describedbsecurity-groups " Returns a list of DBSecurityGroup descriptions. If a DBSecurityGroupName is\nspecified, the list will contain only the descriptions of the specified DB\nsecurity group." ([] (describedbsecurity-groups {})) ([describedbsecurity-groups-message] (clojure.core/let [req<-input__36755__auto__ (req<-describedbsecurity-groups-message "DescribeDBSecurityGroups" describedbsecurity-groups-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/describedbsecurity-groups-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/dbsecurity-group-message {"DBSecurityGroupNotFoundFault" :portkey.aws.rds/dbsecurity-group-not-found-fault}))))
(clojure.spec.alpha/fdef describedbsecurity-groups :args (clojure.spec.alpha/? :portkey.aws.rds/describedbsecurity-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/dbsecurity-group-message))

(clojure.core/defn createdbinstance-read-replica "Creates a new DB instance that acts as a Read Replica for an existing source DB\ninstance. You can create a Read Replica for a DB instance running MySQL,\nMariaDB, or PostgreSQL. For more information, see Working with PostgreSQL,\nMySQL, and MariaDB Read Replicas\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html).\n Amazon Aurora doesn't support this action. You must call the CreateDBInstance\naction to create a DB instance for an Aurora DB cluster.\n All Read Replica DB instances are created with backups disabled. All other DB\ninstance attributes (including DB security groups and DB parameter groups) are\ninherited from the source DB instance, except as specified following.\n Your source DB instance must have backup retention enabled." ([createdbinstance-read-replica-message] (clojure.core/let [req<-input__36755__auto__ (req<-createdbinstance-read-replica-message "CreateDBInstanceReadReplica" createdbinstance-read-replica-message)] (portkey.aws/-query-call portkey.aws.rds/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.rds/createdbinstance-read-replica-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.rds/createdbinstance-read-replica-result {"DBInstanceNotFoundFault" :portkey.aws.rds/dbinstance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invaliddbinstance-state-fault, "InstanceQuotaExceededFault" :portkey.aws.rds/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.rds/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds/invalidvpcnetwork-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds/dbinstance-already-exists-fault, "InvalidDBSubnetGroupFault" :portkey.aws.rds/invaliddbsubnet-group-fault, "StorageTypeNotSupportedFault" :portkey.aws.rds/storage-type-not-supported-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds/dbsubnet-group-does-not-cover-enoughazs, "InvalidSubnet" :portkey.aws.rds/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds/dbsubnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds/provisioned-iops-not-available-inazfault, "DBSubnetGroupNotAllowedFault" :portkey.aws.rds/dbsubnet-group-not-allowed-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds/dbparameter-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds/kmskey-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds/storage-quota-exceeded-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds/insufficientdbinstance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds/dbsecurity-group-not-found-fault}))))
(clojure.spec.alpha/fdef createdbinstance-read-replica :args (clojure.spec.alpha/tuple :portkey.aws.rds/createdbinstance-read-replica-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/createdbinstance-read-replica-result))
