(ns portkey.aws.rds (:require [portkey.aws]))

(def
 endpoints
 '{"us-gov-east-1"
   {:credential-scope {:service "rds", :region "us-gov-east-1"},
    :ssl-common-name "rds.us-gov-east-1.amazonaws.com",
    :endpoint "https://rds.us-gov-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-northeast-1"
   {:credential-scope {:service "rds", :region "ap-northeast-1"},
    :ssl-common-name "rds.ap-northeast-1.amazonaws.com",
    :endpoint "https://rds.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "rds", :region "eu-west-1"},
    :ssl-common-name "rds.eu-west-1.amazonaws.com",
    :endpoint "https://rds.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "rds", :region "us-east-2"},
    :ssl-common-name "rds.us-east-2.amazonaws.com",
    :endpoint "https://rds.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope {:service "rds", :region "ap-southeast-2"},
    :ssl-common-name "rds.ap-southeast-2.amazonaws.com",
    :endpoint "https://rds.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "cn-north-1"
   {:credential-scope {:service "rds", :region "cn-north-1"},
    :ssl-common-name "rds.cn-north-1.amazonaws.com.cn",
    :endpoint "https://rds.cn-north-1.amazonaws.com.cn",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "rds", :region "sa-east-1"},
    :ssl-common-name "rds.sa-east-1.amazonaws.com",
    :endpoint "https://rds.sa-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope {:service "rds", :region "ap-southeast-1"},
    :ssl-common-name "rds.ap-southeast-1.amazonaws.com",
    :endpoint "https://rds.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "cn-northwest-1"
   {:credential-scope {:service "rds", :region "cn-northwest-1"},
    :ssl-common-name "rds.cn-northwest-1.amazonaws.com.cn",
    :endpoint "https://rds.cn-northwest-1.amazonaws.com.cn",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope {:service "rds", :region "ap-northeast-2"},
    :ssl-common-name "rds.ap-northeast-2.amazonaws.com",
    :endpoint "https://rds.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-west-3"
   {:credential-scope {:service "rds", :region "eu-west-3"},
    :ssl-common-name "rds.eu-west-3.amazonaws.com",
    :endpoint "https://rds.eu-west-3.amazonaws.com",
    :signature-version :v4},
   "ca-central-1"
   {:credential-scope {:service "rds", :region "ca-central-1"},
    :ssl-common-name "rds.ca-central-1.amazonaws.com",
    :endpoint "https://rds.ca-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "rds", :region "eu-central-1"},
    :ssl-common-name "rds.eu-central-1.amazonaws.com",
    :endpoint "https://rds.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "rds", :region "eu-west-2"},
    :ssl-common-name "rds.eu-west-2.amazonaws.com",
    :endpoint "https://rds.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-gov-west-1"
   {:credential-scope {:service "rds", :region "us-gov-west-1"},
    :ssl-common-name "rds.us-gov-west-1.amazonaws.com",
    :endpoint "https://rds.us-gov-west-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "rds", :region "us-west-2"},
    :ssl-common-name "rds.us-west-2.amazonaws.com",
    :endpoint "https://rds.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "rds", :region "us-east-1"},
    :ssl-common-name "rds.amazonaws.com",
    :endpoint "https://rds.us-east-1.amazonaws.com",
    :signature-version :v4},
   "us-west-1"
   {:credential-scope {:service "rds", :region "us-west-1"},
    :ssl-common-name "rds.us-west-1.amazonaws.com",
    :endpoint "https://rds.us-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-south-1"
   {:credential-scope {:service "rds", :region "ap-south-1"},
    :ssl-common-name "rds.ap-south-1.amazonaws.com",
    :endpoint "https://rds.ap-south-1.amazonaws.com",
    :signature-version :v4},
   "eu-north-1"
   {:credential-scope {:service "rds", :region "eu-north-1"},
    :ssl-common-name "rds.eu-north-1.amazonaws.com",
    :endpoint "https://rds.eu-north-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-subnet-identifier-list)

(clojure.core/declare ser-string-list)

(clojure.core/declare ser-filter-value-list)

(clojure.core/declare ser-parameters-list)

(clojure.core/declare ser-filter)

(clojure.core/declare ser-source-ids-list)

(clojure.core/declare ser-key-list)

(clojure.core/declare ser-option-names-list)

(clojure.core/declare ser-scaling-configuration)

(clojure.core/declare ser-source-type)

(clojure.core/declare ser-tag-list)

(clojure.core/declare ser-integer)

(clojure.core/declare ser-string)

(clojure.core/declare ser-parameter)

(clojure.core/declare ser-vpc-security-group-id-list)

(clojure.core/declare ser-t-stamp)

(clojure.core/declare ser-event-categories-list)

(clojure.core/declare ser-db-security-group-name-list)

(clojure.core/declare ser-processor-feature)

(clojure.core/declare ser-apply-method)

(clojure.core/declare ser-long)

(clojure.core/declare ser-cloudwatch-logs-export-configuration)

(clojure.core/declare ser-log-type-list)

(clojure.core/declare ser-attribute-value-list)

(clojure.core/declare ser-tag)

(clojure.core/declare ser-boolean-optional)

(clojure.core/declare ser-option-setting)

(clojure.core/declare ser-option-configuration-list)

(clojure.core/declare ser-engine-mode-list)

(clojure.core/declare ser-availability-zones)

(clojure.core/declare ser-long-optional)

(clojure.core/declare ser-processor-feature-list)

(clojure.core/declare ser-option-configuration)

(clojure.core/declare ser-integer-optional)

(clojure.core/declare ser-option-settings-list)

(clojure.core/declare ser-filter-list)

(clojure.core/declare ser-boolean)

(clojure.core/defn- ser-subnet-identifier-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SubnetIdentifier"}))) input), :shape "SubnetIdentifierList", :type "list"})

(clojure.core/defn- ser-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "StringList", :type "list"})

(clojure.core/defn- ser-filter-value-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "Value"}))) input), :shape "FilterValueList", :type "list"})

(clojure.core/defn- ser-parameters-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-parameter coll) #:http.request.field{:shape "Parameter", :location-name "Parameter"}))) input), :shape "ParametersList", :type "list"})

(clojure.core/defn- ser-filter [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:name input)) #:http.request.field{:name "Name", :shape "String"}) (clojure.core/into (ser-filter-value-list (:values input)) #:http.request.field{:name "Values", :shape "FilterValueList"})], :shape "Filter", :type "structure"}))

(clojure.core/defn- ser-source-ids-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SourceId"}))) input), :shape "SourceIdsList", :type "list"})

(clojure.core/defn- ser-key-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "KeyList", :type "list"})

(clojure.core/defn- ser-option-names-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "OptionNamesList", :type "list"})

(clojure.core/defn- ser-scaling-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScalingConfiguration", :type "structure"} (clojure.core/contains? input :min-capacity) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :min-capacity)) #:http.request.field{:name "MinCapacity", :shape "IntegerOptional"})) (clojure.core/contains? input :max-capacity) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-capacity)) #:http.request.field{:name "MaxCapacity", :shape "IntegerOptional"})) (clojure.core/contains? input :auto-pause) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-pause)) #:http.request.field{:name "AutoPause", :shape "BooleanOptional"})) (clojure.core/contains? input :seconds-until-auto-pause) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :seconds-until-auto-pause)) #:http.request.field{:name "SecondsUntilAutoPause", :shape "IntegerOptional"}))))

(clojure.core/defn- ser-source-type [input] #:http.request.field{:value (clojure.core/get {:dbcluster "db-cluster", "db-security-group" "db-security-group", "db-cluster" "db-cluster", :dbsecuritygroup "db-security-group", :dbclustersnapshot "db-cluster-snapshot", "db-instance" "db-instance", "db-cluster-snapshot" "db-cluster-snapshot", :dbparametergroup "db-parameter-group", "db-parameter-group" "db-parameter-group", "db-snapshot" "db-snapshot", :dbsnapshot "db-snapshot", :dbinstance "db-instance"} input), :shape "SourceType"})

(clojure.core/defn- ser-tag-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-tag coll) #:http.request.field{:shape "Tag", :location-name "Tag"}))) input), :shape "TagList", :type "list"})

(clojure.core/defn- ser-integer [input] #:http.request.field{:value input, :shape "Integer"})

(clojure.core/defn- ser-string [input] #:http.request.field{:value input, :shape "String"})

(clojure.core/defn- ser-parameter [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Parameter", :type "structure"} (clojure.core/contains? input :data-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :data-type)) #:http.request.field{:name "DataType", :shape "String"})) (clojure.core/contains? input :supported-engine-modes) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-engine-mode-list (input :supported-engine-modes)) #:http.request.field{:name "SupportedEngineModes", :shape "EngineModeList"})) (clojure.core/contains? input :parameter-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :parameter-name)) #:http.request.field{:name "ParameterName", :shape "String"})) (clojure.core/contains? input :source) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source)) #:http.request.field{:name "Source", :shape "String"})) (clojure.core/contains? input :minimum-engine-version) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :minimum-engine-version)) #:http.request.field{:name "MinimumEngineVersion", :shape "String"})) (clojure.core/contains? input :allowed-values) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :allowed-values)) #:http.request.field{:name "AllowedValues", :shape "String"})) (clojure.core/contains? input :apply-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :apply-type)) #:http.request.field{:name "ApplyType", :shape "String"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :apply-method) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-apply-method (input :apply-method)) #:http.request.field{:name "ApplyMethod", :shape "ApplyMethod"})) (clojure.core/contains? input :is-modifiable) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :is-modifiable)) #:http.request.field{:name "IsModifiable", :shape "Boolean"})) (clojure.core/contains? input :parameter-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :parameter-value)) #:http.request.field{:name "ParameterValue", :shape "String"}))))

(clojure.core/defn- ser-vpc-security-group-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "VpcSecurityGroupId"}))) input), :shape "VpcSecurityGroupIdList", :type "list"})

(clojure.core/defn- ser-t-stamp [input] #:http.request.field{:value input, :shape "TStamp"})

(clojure.core/defn- ser-event-categories-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "EventCategory"}))) input), :shape "EventCategoriesList", :type "list"})

(clojure.core/defn- ser-db-security-group-name-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "DBSecurityGroupName"}))) input), :shape "DBSecurityGroupNameList", :type "list"})

(clojure.core/defn- ser-processor-feature [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ProcessorFeature", :type "structure"} (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String"}))))

(clojure.core/defn- ser-apply-method [input] #:http.request.field{:value (clojure.core/get {"immediate" "immediate", :immediate "immediate", "pending-reboot" "pending-reboot", :pendingreboot "pending-reboot"} input), :shape "ApplyMethod"})

(clojure.core/defn- ser-long [input] #:http.request.field{:value input, :shape "Long"})

(clojure.core/defn- ser-cloudwatch-logs-export-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "CloudwatchLogsExportConfiguration", :type "structure"} (clojure.core/contains? input :enable-log-types) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-log-types)) #:http.request.field{:name "EnableLogTypes", :shape "LogTypeList"})) (clojure.core/contains? input :disable-log-types) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :disable-log-types)) #:http.request.field{:name "DisableLogTypes", :shape "LogTypeList"}))))

(clojure.core/defn- ser-log-type-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "LogTypeList", :type "list"})

(clojure.core/defn- ser-attribute-value-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "AttributeValue"}))) input), :shape "AttributeValueList", :type "list"})

(clojure.core/defn- ser-tag [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Tag", :type "structure"} (clojure.core/contains? input :key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key)) #:http.request.field{:name "Key", :shape "String"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String"}))))

(clojure.core/defn- ser-boolean-optional [input] #:http.request.field{:value input, :shape "BooleanOptional"})

(clojure.core/defn- ser-option-setting [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "OptionSetting", :type "structure"} (clojure.core/contains? input :data-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :data-type)) #:http.request.field{:name "DataType", :shape "String"})) (clojure.core/contains? input :allowed-values) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :allowed-values)) #:http.request.field{:name "AllowedValues", :shape "String"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String"})) (clojure.core/contains? input :apply-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :apply-type)) #:http.request.field{:name "ApplyType", :shape "String"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :default-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :default-value)) #:http.request.field{:name "DefaultValue", :shape "String"})) (clojure.core/contains? input :is-modifiable) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :is-modifiable)) #:http.request.field{:name "IsModifiable", :shape "Boolean"})) (clojure.core/contains? input :is-collection) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :is-collection)) #:http.request.field{:name "IsCollection", :shape "Boolean"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"}))))

(clojure.core/defn- ser-option-configuration-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-option-configuration coll) #:http.request.field{:shape "OptionConfiguration", :location-name "OptionConfiguration"}))) input), :shape "OptionConfigurationList", :type "list"})

(clojure.core/defn- ser-engine-mode-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "EngineModeList", :type "list"})

(clojure.core/defn- ser-availability-zones [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "AvailabilityZone"}))) input), :shape "AvailabilityZones", :type "list"})

(clojure.core/defn- ser-long-optional [input] #:http.request.field{:value input, :shape "LongOptional"})

(clojure.core/defn- ser-processor-feature-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-processor-feature coll) #:http.request.field{:shape "ProcessorFeature", :location-name "ProcessorFeature"}))) input), :shape "ProcessorFeatureList", :type "list"})

(clojure.core/defn- ser-option-configuration [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:option-name input)) #:http.request.field{:name "OptionName", :shape "String"})], :shape "OptionConfiguration", :type "structure"} (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :option-version) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-version)) #:http.request.field{:name "OptionVersion", :shape "String"})) (clojure.core/contains? input :db-security-group-memberships) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-db-security-group-name-list (input :db-security-group-memberships)) #:http.request.field{:name "DBSecurityGroupMemberships", :shape "DBSecurityGroupNameList"})) (clojure.core/contains? input :vpc-security-group-memberships) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-memberships)) #:http.request.field{:name "VpcSecurityGroupMemberships", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :option-settings) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-option-settings-list (input :option-settings)) #:http.request.field{:name "OptionSettings", :shape "OptionSettingsList"}))))

(clojure.core/defn- ser-integer-optional [input] #:http.request.field{:value input, :shape "IntegerOptional"})

(clojure.core/defn- ser-option-settings-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-option-setting coll) #:http.request.field{:shape "OptionSetting", :location-name "OptionSetting"}))) input), :shape "OptionSettingsList", :type "list"})

(clojure.core/defn- ser-filter-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-filter coll) #:http.request.field{:shape "Filter", :location-name "Filter"}))) input), :shape "FilterList", :type "list"})

(clojure.core/defn- ser-boolean [input] #:http.request.field{:value input, :shape "Boolean"})

(clojure.core/defn- req-describe-db-cluster-snapshots-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :db-cluster-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"})) (clojure.core/contains? input :snapshot-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-type)) #:http.request.field{:name "SnapshotType", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :include-shared) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-shared)) #:http.request.field{:name "IncludeShared", :shape "Boolean"})) (clojure.core/contains? input :include-public) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-public)) #:http.request.field{:name "IncludePublic", :shape "Boolean"}))))

(clojure.core/defn- req-restore-db-cluster-from-s-3-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"}) (clojure.core/into (ser-string (input :master-username)) #:http.request.field{:name "MasterUsername", :shape "String"}) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"}) (clojure.core/into (ser-string (input :source-engine)) #:http.request.field{:name "SourceEngine", :shape "String"}) (clojure.core/into (ser-string (input :source-engine-version)) #:http.request.field{:name "SourceEngineVersion", :shape "String"}) (clojure.core/into (ser-string (input :s-3-bucket-name)) #:http.request.field{:name "S3BucketName", :shape "String"}) (clojure.core/into (ser-string (input :s-3-ingestion-role-arn)) #:http.request.field{:name "S3IngestionRoleArn", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :character-set-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :character-set-name)) #:http.request.field{:name "CharacterSetName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :database-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :database-name)) #:http.request.field{:name "DatabaseName", :shape "String"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :storage-encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :storage-encrypted)) #:http.request.field{:name "StorageEncrypted", :shape "BooleanOptional"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :backtrack-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long-optional (input :backtrack-window)) #:http.request.field{:name "BacktrackWindow", :shape "LongOptional"})) (clojure.core/contains? input :s-3-prefix) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :s-3-prefix)) #:http.request.field{:name "S3Prefix", :shape "String"})) (clojure.core/contains? input :availability-zones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-availability-zones (input :availability-zones)) #:http.request.field{:name "AvailabilityZones", :shape "AvailabilityZones"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-copy-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-db-parameter-group-identifier)) #:http.request.field{:name "SourceDBParameterGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-parameter-group-identifier)) #:http.request.field{:name "TargetDBParameterGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-parameter-group-description)) #:http.request.field{:name "TargetDBParameterGroupDescription", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-copy-db-cluster-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-db-cluster-snapshot-identifier)) #:http.request.field{:name "SourceDBClusterSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-cluster-snapshot-identifier)) #:http.request.field{:name "TargetDBClusterSnapshotIdentifier", :shape "String"})]} (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :pre-signed-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :pre-signed-url)) #:http.request.field{:name "PreSignedUrl", :shape "String"})) (clojure.core/contains? input :copy-tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags)) #:http.request.field{:name "CopyTags", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-instances-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-reset-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})]} (clojure.core/contains? input :reset-all-parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :reset-all-parameters)) #:http.request.field{:name "ResetAllParameters", :shape "Boolean"})) (clojure.core/contains? input :parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-parameters-list (input :parameters)) #:http.request.field{:name "Parameters", :shape "ParametersList"}))))

(clojure.core/defn- req-copy-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-db-cluster-parameter-group-identifier)) #:http.request.field{:name "SourceDBClusterParameterGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-cluster-parameter-group-identifier)) #:http.request.field{:name "TargetDBClusterParameterGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-cluster-parameter-group-description)) #:http.request.field{:name "TargetDBClusterParameterGroupDescription", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-delete-db-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"})]}))

(clojure.core/defn- req-modify-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"}) (clojure.core/into (ser-parameters-list (input :parameters)) #:http.request.field{:name "Parameters", :shape "ParametersList"})]}))

(clojure.core/defn- req-delete-db-instance-automated-backup-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :dbi-resource-id)) #:http.request.field{:name "DbiResourceId", :shape "String"})]}))

(clojure.core/defn- req-describe-db-snapshots-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :include-public) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-public)) #:http.request.field{:name "IncludePublic", :shape "Boolean"})) (clojure.core/contains? input :snapshot-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-type)) #:http.request.field{:name "SnapshotType", :shape "String"})) (clojure.core/contains? input :include-shared) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-shared)) #:http.request.field{:name "IncludeShared", :shape "Boolean"})) (clojure.core/contains? input :db-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"})) (clojure.core/contains? input :dbi-resource-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :dbi-resource-id)) #:http.request.field{:name "DbiResourceId", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"}))))

(clojure.core/defn- req-delete-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})]}))

(clojure.core/defn- req-describe-engine-default-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"})]} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-stop-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]}))

(clojure.core/defn- req-create-db-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-engine-versions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :list-supported-character-sets) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :list-supported-character-sets)) #:http.request.field{:name "ListSupportedCharacterSets", :shape "BooleanOptional"})) (clojure.core/contains? input :default-only) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :default-only)) #:http.request.field{:name "DefaultOnly", :shape "Boolean"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :list-supported-timezones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :list-supported-timezones)) #:http.request.field{:name "ListSupportedTimezones", :shape "BooleanOptional"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :db-parameter-group-family) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"}))))

(clojure.core/defn- req-promote-read-replica-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]}))

(clojure.core/defn- req-describe-source-regions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :region-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :region-name)) #:http.request.field{:name "RegionName", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"}))))

(clojure.core/defn- req-describe-event-subscriptions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :subscription-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-db-subnet-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-restore-db-instance-from-db-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional"})) (clojure.core/contains? input :domain-iam-role-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain-iam-role-name)) #:http.request.field{:name "DomainIAMRoleName", :shape "String"})) (clojure.core/contains? input :copy-tags-to-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags-to-snapshot)) #:http.request.field{:name "CopyTagsToSnapshot", :shape "BooleanOptional"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :db-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-name)) #:http.request.field{:name "DBName", :shape "String"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :use-default-processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :use-default-processor-features)) #:http.request.field{:name "UseDefaultProcessorFeatures", :shape "BooleanOptional"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :domain) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain)) #:http.request.field{:name "Domain", :shape "String"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :tde-credential-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-password)) #:http.request.field{:name "TdeCredentialPassword", :shape "String"})) (clojure.core/contains? input :storage-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :storage-type)) #:http.request.field{:name "StorageType", :shape "String"})) (clojure.core/contains? input :processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-processor-feature-list (input :processor-features)) #:http.request.field{:name "ProcessorFeatures", :shape "ProcessorFeatureList"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :tde-credential-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-arn)) #:http.request.field{:name "TdeCredentialArn", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"}))))

(clojure.core/defn- req-restore-db-cluster-to-point-in-time-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :source-db-cluster-identifier)) #:http.request.field{:name "SourceDBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :restore-to-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :restore-to-time)) #:http.request.field{:name "RestoreToTime", :shape "TStamp"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :backtrack-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long-optional (input :backtrack-window)) #:http.request.field{:name "BacktrackWindow", :shape "LongOptional"})) (clojure.core/contains? input :restore-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :restore-type)) #:http.request.field{:name "RestoreType", :shape "String"})) (clojure.core/contains? input :use-latest-restorable-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :use-latest-restorable-time)) #:http.request.field{:name "UseLatestRestorableTime", :shape "Boolean"}))))

(clojure.core/defn- req-restore-db-cluster-from-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :snapshot-identifier)) #:http.request.field{:name "SnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :database-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :database-name)) #:http.request.field{:name "DatabaseName", :shape "String"})) (clojure.core/contains? input :engine-mode) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-mode)) #:http.request.field{:name "EngineMode", :shape "String"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :scaling-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scaling-configuration (input :scaling-configuration)) #:http.request.field{:name "ScalingConfiguration", :shape "ScalingConfiguration"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :backtrack-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long-optional (input :backtrack-window)) #:http.request.field{:name "BacktrackWindow", :shape "LongOptional"})) (clojure.core/contains? input :availability-zones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-availability-zones (input :availability-zones)) #:http.request.field{:name "AvailabilityZones", :shape "AvailabilityZones"}))))

(clojure.core/defn- req-modify-db-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"}) (clojure.core/into (ser-subnet-identifier-list (input :subnet-ids)) #:http.request.field{:name "SubnetIds", :shape "SubnetIdentifierList"})]} (clojure.core/contains? input :db-subnet-group-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-description)) #:http.request.field{:name "DBSubnetGroupDescription", :shape "String"}))))

(clojure.core/defn- req-delete-db-security-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-security-group-name)) #:http.request.field{:name "DBSecurityGroupName", :shape "String"})]}))

(clojure.core/defn- req-create-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :db-security-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-db-security-group-name-list (input :db-security-groups)) #:http.request.field{:name "DBSecurityGroups", :shape "DBSecurityGroupNameList"})) (clojure.core/contains? input :promotion-tier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :promotion-tier)) #:http.request.field{:name "PromotionTier", :shape "IntegerOptional"})) (clojure.core/contains? input :character-set-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :character-set-name)) #:http.request.field{:name "CharacterSetName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional"})) (clojure.core/contains? input :domain-iam-role-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain-iam-role-name)) #:http.request.field{:name "DomainIAMRoleName", :shape "String"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :copy-tags-to-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags-to-snapshot)) #:http.request.field{:name "CopyTagsToSnapshot", :shape "BooleanOptional"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :db-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-name)) #:http.request.field{:name "DBName", :shape "String"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :domain) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain)) #:http.request.field{:name "Domain", :shape "String"})) (clojure.core/contains? input :allocated-storage) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :allocated-storage)) #:http.request.field{:name "AllocatedStorage", :shape "IntegerOptional"})) (clojure.core/contains? input :monitoring-interval) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :monitoring-interval)) #:http.request.field{:name "MonitoringInterval", :shape "IntegerOptional"})) (clojure.core/contains? input :timezone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :timezone)) #:http.request.field{:name "Timezone", :shape "String"})) (clojure.core/contains? input :master-username) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-username)) #:http.request.field{:name "MasterUsername", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :storage-encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :storage-encrypted)) #:http.request.field{:name "StorageEncrypted", :shape "BooleanOptional"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :tde-credential-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-password)) #:http.request.field{:name "TdeCredentialPassword", :shape "String"})) (clojure.core/contains? input :storage-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :storage-type)) #:http.request.field{:name "StorageType", :shape "String"})) (clojure.core/contains? input :processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-processor-feature-list (input :processor-features)) #:http.request.field{:name "ProcessorFeatures", :shape "ProcessorFeatureList"})) (clojure.core/contains? input :performance-insights-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :performance-insights-retention-period)) #:http.request.field{:name "PerformanceInsightsRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :enable-performance-insights) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-performance-insights)) #:http.request.field{:name "EnablePerformanceInsights", :shape "BooleanOptional"})) (clojure.core/contains? input :monitoring-role-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :monitoring-role-arn)) #:http.request.field{:name "MonitoringRoleArn", :shape "String"})) (clojure.core/contains? input :tde-credential-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-arn)) #:http.request.field{:name "TdeCredentialArn", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"})) (clojure.core/contains? input :performance-insights-kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :performance-insights-kms-key-id)) #:http.request.field{:name "PerformanceInsightsKMSKeyId", :shape "String"})) (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-promote-read-replica-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-modify-db-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"})]} (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"}))))

(clojure.core/defn- req-describe-db-cluster-endpoints-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :db-cluster-endpoint-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-endpoint-identifier)) #:http.request.field{:name "DBClusterEndpointIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-option-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"}) (clojure.core/into (ser-string (input :engine-name)) #:http.request.field{:name "EngineName", :shape "String"}) (clojure.core/into (ser-string (input :major-engine-version)) #:http.request.field{:name "MajorEngineVersion", :shape "String"}) (clojure.core/into (ser-string (input :option-group-description)) #:http.request.field{:name "OptionGroupDescription", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-start-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]}))

(clojure.core/defn- req-add-role-to-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :role-arn)) #:http.request.field{:name "RoleArn", :shape "String"})]}))

(clojure.core/defn- req-delete-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :skip-final-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :skip-final-snapshot)) #:http.request.field{:name "SkipFinalSnapshot", :shape "Boolean"})) (clojure.core/contains? input :final-db-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :final-db-snapshot-identifier)) #:http.request.field{:name "FinalDBSnapshotIdentifier", :shape "String"})) (clojure.core/contains? input :delete-automated-backups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :delete-automated-backups)) #:http.request.field{:name "DeleteAutomatedBackups", :shape "BooleanOptional"}))))

(clojure.core/defn- req-describe-global-clusters-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :global-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :global-cluster-identifier)) #:http.request.field{:name "GlobalClusterIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-start-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]}))

(clojure.core/defn- req-delete-db-cluster-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"})]}))

(clojure.core/defn- req-apply-pending-maintenance-action-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-identifier)) #:http.request.field{:name "ResourceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :apply-action)) #:http.request.field{:name "ApplyAction", :shape "String"}) (clojure.core/into (ser-string (input :opt-in-type)) #:http.request.field{:name "OptInType", :shape "String"})]}))

(clojure.core/defn- req-describe-events-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :end-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :end-time)) #:http.request.field{:name "EndTime", :shape "TStamp"})) (clojure.core/contains? input :start-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :start-time)) #:http.request.field{:name "StartTime", :shape "TStamp"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-source-type (input :source-type)) #:http.request.field{:name "SourceType", :shape "SourceType"})) (clojure.core/contains? input :duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :duration)) #:http.request.field{:name "Duration", :shape "IntegerOptional"})) (clojure.core/contains? input :event-categories) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-event-categories-list (input :event-categories)) #:http.request.field{:name "EventCategories", :shape "EventCategoriesList"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :source-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-identifier)) #:http.request.field{:name "SourceIdentifier", :shape "String"}))))

(clojure.core/defn- req-describe-pending-maintenance-actions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :resource-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :resource-identifier)) #:http.request.field{:name "ResourceIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"}))))

(clojure.core/defn- req-authorize-db-security-group-ingress-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-security-group-name)) #:http.request.field{:name "DBSecurityGroupName", :shape "String"})]} (clojure.core/contains? input :cidrip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidrip)) #:http.request.field{:name "CIDRIP", :shape "String"})) (clojure.core/contains? input :ec-2-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-security-group-name)) #:http.request.field{:name "EC2SecurityGroupName", :shape "String"})) (clojure.core/contains? input :ec-2-security-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-security-group-id)) #:http.request.field{:name "EC2SecurityGroupId", :shape "String"})) (clojure.core/contains? input :ec-2-security-group-owner-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-security-group-owner-id)) #:http.request.field{:name "EC2SecurityGroupOwnerId", :shape "String"}))))

(clojure.core/defn- req-remove-role-from-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :role-arn)) #:http.request.field{:name "RoleArn", :shape "String"})]}))

(clojure.core/defn- req-describe-engine-default-cluster-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"})]} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-reset-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})]} (clojure.core/contains? input :reset-all-parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :reset-all-parameters)) #:http.request.field{:name "ResetAllParameters", :shape "Boolean"})) (clojure.core/contains? input :parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-parameters-list (input :parameters)) #:http.request.field{:name "Parameters", :shape "ParametersList"}))))

(clojure.core/defn- req-describe-db-cluster-parameter-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-orderable-db-instance-options-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})]} (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :vpc) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :vpc)) #:http.request.field{:name "Vpc", :shape "BooleanOptional"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-db-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"}) (clojure.core/into (ser-string (input :db-subnet-group-description)) #:http.request.field{:name "DBSubnetGroupDescription", :shape "String"}) (clojure.core/into (ser-subnet-identifier-list (input :subnet-ids)) #:http.request.field{:name "SubnetIds", :shape "SubnetIdentifierList"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-delete-event-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"})]}))

(clojure.core/defn- req-copy-option-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-option-group-identifier)) #:http.request.field{:name "SourceOptionGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-option-group-identifier)) #:http.request.field{:name "TargetOptionGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-option-group-description)) #:http.request.field{:name "TargetOptionGroupDescription", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-modify-db-cluster-endpoint-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-endpoint-identifier)) #:http.request.field{:name "DBClusterEndpointIdentifier", :shape "String"})]} (clojure.core/contains? input :endpoint-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :endpoint-type)) #:http.request.field{:name "EndpointType", :shape "String"})) (clojure.core/contains? input :static-members) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-list (input :static-members)) #:http.request.field{:name "StaticMembers", :shape "StringList"})) (clojure.core/contains? input :excluded-members) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-list (input :excluded-members)) #:http.request.field{:name "ExcludedMembers", :shape "StringList"}))))

(clojure.core/defn- req-delete-db-cluster-endpoint-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-endpoint-identifier)) #:http.request.field{:name "DBClusterEndpointIdentifier", :shape "String"})]}))

(clojure.core/defn- req-copy-db-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-db-snapshot-identifier)) #:http.request.field{:name "SourceDBSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-snapshot-identifier)) #:http.request.field{:name "TargetDBSnapshotIdentifier", :shape "String"})]} (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :copy-tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags)) #:http.request.field{:name "CopyTags", :shape "BooleanOptional"})) (clojure.core/contains? input :pre-signed-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :pre-signed-url)) #:http.request.field{:name "PreSignedUrl", :shape "String"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"}))))

(clojure.core/defn- req-create-db-instance-read-replica-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :source-db-instance-identifier)) #:http.request.field{:name "SourceDBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional"})) (clojure.core/contains? input :pre-signed-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :pre-signed-url)) #:http.request.field{:name "PreSignedUrl", :shape "String"})) (clojure.core/contains? input :copy-tags-to-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags-to-snapshot)) #:http.request.field{:name "CopyTagsToSnapshot", :shape "BooleanOptional"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :use-default-processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :use-default-processor-features)) #:http.request.field{:name "UseDefaultProcessorFeatures", :shape "BooleanOptional"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :monitoring-interval) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :monitoring-interval)) #:http.request.field{:name "MonitoringInterval", :shape "IntegerOptional"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :storage-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :storage-type)) #:http.request.field{:name "StorageType", :shape "String"})) (clojure.core/contains? input :processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-processor-feature-list (input :processor-features)) #:http.request.field{:name "ProcessorFeatures", :shape "ProcessorFeatureList"})) (clojure.core/contains? input :performance-insights-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :performance-insights-retention-period)) #:http.request.field{:name "PerformanceInsightsRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :enable-performance-insights) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-performance-insights)) #:http.request.field{:name "EnablePerformanceInsights", :shape "BooleanOptional"})) (clojure.core/contains? input :monitoring-role-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :monitoring-role-arn)) #:http.request.field{:name "MonitoringRoleArn", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"})) (clojure.core/contains? input :performance-insights-kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :performance-insights-kms-key-id)) #:http.request.field{:name "PerformanceInsightsKMSKeyId", :shape "String"}))))

(clojure.core/defn- req-remove-from-global-cluster-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :global-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :global-cluster-identifier)) #:http.request.field{:name "GlobalClusterIdentifier", :shape "String"})) (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DbClusterIdentifier", :shape "String"}))))

(clojure.core/defn- req-modify-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :enable-http-endpoint) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-http-endpoint)) #:http.request.field{:name "EnableHttpEndpoint", :shape "BooleanOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :new-db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :new-db-cluster-identifier)) #:http.request.field{:name "NewDBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :scaling-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scaling-configuration (input :scaling-configuration)) #:http.request.field{:name "ScalingConfiguration", :shape "ScalingConfiguration"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :backtrack-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long-optional (input :backtrack-window)) #:http.request.field{:name "BacktrackWindow", :shape "LongOptional"})) (clojure.core/contains? input :apply-immediately) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})) (clojure.core/contains? input :cloudwatch-logs-export-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cloudwatch-logs-export-configuration (input :cloudwatch-logs-export-configuration)) #:http.request.field{:name "CloudwatchLogsExportConfiguration", :shape "CloudwatchLogsExportConfiguration"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-describe-db-cluster-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})]} (clojure.core/contains? input :source) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source)) #:http.request.field{:name "Source", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-add-source-identifier-to-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"}) (clojure.core/into (ser-string (input :source-identifier)) #:http.request.field{:name "SourceIdentifier", :shape "String"})]}))

(clojure.core/defn- req-backtrack-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-t-stamp (input :backtrack-to)) #:http.request.field{:name "BacktrackTo", :shape "TStamp"})]} (clojure.core/contains? input :force) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :force)) #:http.request.field{:name "Force", :shape "BooleanOptional"})) (clojure.core/contains? input :use-earliest-time-on-point-in-time-unavailable) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :use-earliest-time-on-point-in-time-unavailable)) #:http.request.field{:name "UseEarliestTimeOnPointInTimeUnavailable", :shape "BooleanOptional"}))))

(clojure.core/defn- req-add-tags-to-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"}) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})]}))

(clojure.core/defn- req-modify-global-cluster-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :global-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :global-cluster-identifier)) #:http.request.field{:name "GlobalClusterIdentifier", :shape "String"})) (clojure.core/contains? input :new-global-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :new-global-cluster-identifier)) #:http.request.field{:name "NewGlobalClusterIdentifier", :shape "String"})) (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"}))))

(clojure.core/defn- req-create-global-cluster-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :global-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :global-cluster-identifier)) #:http.request.field{:name "GlobalClusterIdentifier", :shape "String"})) (clojure.core/contains? input :source-db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-db-cluster-identifier)) #:http.request.field{:name "SourceDBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :database-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :database-name)) #:http.request.field{:name "DatabaseName", :shape "String"})) (clojure.core/contains? input :storage-encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :storage-encrypted)) #:http.request.field{:name "StorageEncrypted", :shape "BooleanOptional"}))))

(clojure.core/defn- req-create-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"}) (clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"}) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-restore-db-instance-to-point-in-time-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :target-db-instance-identifier)) #:http.request.field{:name "TargetDBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional"})) (clojure.core/contains? input :domain-iam-role-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain-iam-role-name)) #:http.request.field{:name "DomainIAMRoleName", :shape "String"})) (clojure.core/contains? input :copy-tags-to-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags-to-snapshot)) #:http.request.field{:name "CopyTagsToSnapshot", :shape "BooleanOptional"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :db-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-name)) #:http.request.field{:name "DBName", :shape "String"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :use-default-processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :use-default-processor-features)) #:http.request.field{:name "UseDefaultProcessorFeatures", :shape "BooleanOptional"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :restore-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :restore-time)) #:http.request.field{:name "RestoreTime", :shape "TStamp"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :domain) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain)) #:http.request.field{:name "Domain", :shape "String"})) (clojure.core/contains? input :source-db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-db-instance-identifier)) #:http.request.field{:name "SourceDBInstanceIdentifier", :shape "String"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :source-dbi-resource-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-dbi-resource-id)) #:http.request.field{:name "SourceDbiResourceId", :shape "String"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :tde-credential-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-password)) #:http.request.field{:name "TdeCredentialPassword", :shape "String"})) (clojure.core/contains? input :storage-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :storage-type)) #:http.request.field{:name "StorageType", :shape "String"})) (clojure.core/contains? input :processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-processor-feature-list (input :processor-features)) #:http.request.field{:name "ProcessorFeatures", :shape "ProcessorFeatureList"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :tde-credential-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-arn)) #:http.request.field{:name "TdeCredentialArn", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"})) (clojure.core/contains? input :use-latest-restorable-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :use-latest-restorable-time)) #:http.request.field{:name "UseLatestRestorableTime", :shape "Boolean"}))))

(clojure.core/defn- req-modify-db-snapshot-attribute-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :attribute-name)) #:http.request.field{:name "AttributeName", :shape "String"})]} (clojure.core/contains? input :values-to-add) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value-list (input :values-to-add)) #:http.request.field{:name "ValuesToAdd", :shape "AttributeValueList"})) (clojure.core/contains? input :values-to-remove) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value-list (input :values-to-remove)) #:http.request.field{:name "ValuesToRemove", :shape "AttributeValueList"}))))

(clojure.core/defn- req-modify-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"}) (clojure.core/into (ser-parameters-list (input :parameters)) #:http.request.field{:name "Parameters", :shape "ParametersList"})]}))

(clojure.core/defn- req-describe-valid-db-instance-modifications-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]}))

(clojure.core/defn- req-reboot-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :force-failover) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :force-failover)) #:http.request.field{:name "ForceFailover", :shape "BooleanOptional"}))))

(clojure.core/defn- req-remove-source-identifier-from-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"}) (clojure.core/into (ser-string (input :source-identifier)) #:http.request.field{:name "SourceIdentifier", :shape "String"})]}))

(clojure.core/defn- req-remove-tags-from-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"}) (clojure.core/into (ser-key-list (input :tag-keys)) #:http.request.field{:name "TagKeys", :shape "KeyList"})]}))

(clojure.core/defn- req-modify-db-cluster-snapshot-attribute-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :attribute-name)) #:http.request.field{:name "AttributeName", :shape "String"})]} (clojure.core/contains? input :values-to-add) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value-list (input :values-to-add)) #:http.request.field{:name "ValuesToAdd", :shape "AttributeValueList"})) (clojure.core/contains? input :values-to-remove) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value-list (input :values-to-remove)) #:http.request.field{:name "ValuesToRemove", :shape "AttributeValueList"}))))

(clojure.core/defn- req-purchase-reserved-db-instances-offering-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :reserved-db-instances-offering-id)) #:http.request.field{:name "ReservedDBInstancesOfferingId", :shape "String"})]} (clojure.core/contains? input :reserved-db-instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-db-instance-id)) #:http.request.field{:name "ReservedDBInstanceId", :shape "String"})) (clojure.core/contains? input :db-instance-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :db-instance-count)) #:http.request.field{:name "DBInstanceCount", :shape "IntegerOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-certificates-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :certificate-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :certificate-identifier)) #:http.request.field{:name "CertificateIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-event-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"}) (clojure.core/into (ser-string (input :sns-topic-arn)) #:http.request.field{:name "SnsTopicArn", :shape "String"})]} (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-type)) #:http.request.field{:name "SourceType", :shape "String"})) (clojure.core/contains? input :event-categories) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-event-categories-list (input :event-categories)) #:http.request.field{:name "EventCategories", :shape "EventCategoriesList"})) (clojure.core/contains? input :source-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-source-ids-list (input :source-ids)) #:http.request.field{:name "SourceIds", :shape "SourceIdsList"})) (clojure.core/contains? input :enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enabled)) #:http.request.field{:name "Enabled", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-cluster-snapshot-attributes-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"})]}))

(clojure.core/defn- req-describe-db-instance-automated-backups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :dbi-resource-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :dbi-resource-id)) #:http.request.field{:name "DbiResourceId", :shape "String"})) (clojure.core/contains? input :db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-delete-global-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :global-cluster-identifier)) #:http.request.field{:name "GlobalClusterIdentifier", :shape "String"})]}))

(clojure.core/defn- req-describe-db-clusters-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-db-log-files-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :filename-contains) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :filename-contains)) #:http.request.field{:name "FilenameContains", :shape "String"})) (clojure.core/contains? input :file-last-written) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long (input :file-last-written)) #:http.request.field{:name "FileLastWritten", :shape "Long"})) (clojure.core/contains? input :file-size) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long (input :file-size)) #:http.request.field{:name "FileSize", :shape "Long"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-db-cluster-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-cluster-backtracks-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :backtrack-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :backtrack-identifier)) #:http.request.field{:name "BacktrackIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-add-role-to-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :role-arn)) #:http.request.field{:name "RoleArn", :shape "String"}) (clojure.core/into (ser-string (input :feature-name)) #:http.request.field{:name "FeatureName", :shape "String"})]}))

(clojure.core/defn- req-describe-db-parameter-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-modify-current-db-cluster-capacity-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :capacity) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :capacity)) #:http.request.field{:name "Capacity", :shape "IntegerOptional"})) (clojure.core/contains? input :seconds-before-timeout) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :seconds-before-timeout)) #:http.request.field{:name "SecondsBeforeTimeout", :shape "IntegerOptional"})) (clojure.core/contains? input :timeout-action) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :timeout-action)) #:http.request.field{:name "TimeoutAction", :shape "String"}))))

(clojure.core/defn- req-delete-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :skip-final-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :skip-final-snapshot)) #:http.request.field{:name "SkipFinalSnapshot", :shape "Boolean"})) (clojure.core/contains? input :final-db-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :final-db-snapshot-identifier)) #:http.request.field{:name "FinalDBSnapshotIdentifier", :shape "String"}))))

(clojure.core/defn- req-describe-event-categories-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-type)) #:http.request.field{:name "SourceType", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"}))))

(clojure.core/defn- req-delete-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})]}))

(clojure.core/defn- req-list-tags-for-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"})]} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"}))))

(clojure.core/defn- req-failover-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :target-db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :target-db-instance-identifier)) #:http.request.field{:name "TargetDBInstanceIdentifier", :shape "String"}))))

(clojure.core/defn- req-delete-db-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})]}))

(clojure.core/defn- req-create-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :replication-source-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :replication-source-identifier)) #:http.request.field{:name "ReplicationSourceIdentifier", :shape "String"})) (clojure.core/contains? input :character-set-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :character-set-name)) #:http.request.field{:name "CharacterSetName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :pre-signed-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :pre-signed-url)) #:http.request.field{:name "PreSignedUrl", :shape "String"})) (clojure.core/contains? input :database-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :database-name)) #:http.request.field{:name "DatabaseName", :shape "String"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :engine-mode) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-mode)) #:http.request.field{:name "EngineMode", :shape "String"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :scaling-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scaling-configuration (input :scaling-configuration)) #:http.request.field{:name "ScalingConfiguration", :shape "ScalingConfiguration"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :master-username) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-username)) #:http.request.field{:name "MasterUsername", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :storage-encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :storage-encrypted)) #:http.request.field{:name "StorageEncrypted", :shape "BooleanOptional"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :backtrack-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long-optional (input :backtrack-window)) #:http.request.field{:name "BacktrackWindow", :shape "LongOptional"})) (clojure.core/contains? input :global-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :global-cluster-identifier)) #:http.request.field{:name "GlobalClusterIdentifier", :shape "String"})) (clojure.core/contains? input :availability-zones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-availability-zones (input :availability-zones)) #:http.request.field{:name "AvailabilityZones", :shape "AvailabilityZones"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-describe-account-attributes-message [input] (clojure.core/cond-> {}))

(clojure.core/defn- req-download-db-log-file-portion-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :log-file-name)) #:http.request.field{:name "LogFileName", :shape "String"})]} (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :number-of-lines) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :number-of-lines)) #:http.request.field{:name "NumberOfLines", :shape "Integer"}))))

(clojure.core/defn- req-create-db-security-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-security-group-name)) #:http.request.field{:name "DBSecurityGroupName", :shape "String"}) (clojure.core/into (ser-string (input :db-security-group-description)) #:http.request.field{:name "DBSecurityGroupDescription", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-create-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"}) (clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"}) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-snapshot-attributes-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"})]}))

(clojure.core/defn- req-remove-role-from-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :role-arn)) #:http.request.field{:name "RoleArn", :shape "String"}) (clojure.core/into (ser-string (input :feature-name)) #:http.request.field{:name "FeatureName", :shape "String"})]}))

(clojure.core/defn- req-describe-reserved-db-instances-offerings-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :reserved-db-instances-offering-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-db-instances-offering-id)) #:http.request.field{:name "ReservedDBInstancesOfferingId", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :duration)) #:http.request.field{:name "Duration", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :product-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :product-description)) #:http.request.field{:name "ProductDescription", :shape "String"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :offering-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :offering-type)) #:http.request.field{:name "OfferingType", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"}))))

(clojure.core/defn- req-stop-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :db-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-snapshot-identifier)) #:http.request.field{:name "DBSnapshotIdentifier", :shape "String"}))))

(clojure.core/defn- req-describe-db-security-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-security-group-name)) #:http.request.field{:name "DBSecurityGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-delete-option-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})]}))

(clojure.core/defn- req-describe-db-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})]} (clojure.core/contains? input :source) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source)) #:http.request.field{:name "Source", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-reserved-db-instances-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :reserved-db-instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-db-instance-id)) #:http.request.field{:name "ReservedDBInstanceId", :shape "String"})) (clojure.core/contains? input :reserved-db-instances-offering-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-db-instances-offering-id)) #:http.request.field{:name "ReservedDBInstancesOfferingId", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :duration)) #:http.request.field{:name "Duration", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :product-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :product-description)) #:http.request.field{:name "ProductDescription", :shape "String"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :offering-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :offering-type)) #:http.request.field{:name "OfferingType", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"}))))

(clojure.core/defn- req-revoke-db-security-group-ingress-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-security-group-name)) #:http.request.field{:name "DBSecurityGroupName", :shape "String"})]} (clojure.core/contains? input :cidrip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidrip)) #:http.request.field{:name "CIDRIP", :shape "String"})) (clojure.core/contains? input :ec-2-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-security-group-name)) #:http.request.field{:name "EC2SecurityGroupName", :shape "String"})) (clojure.core/contains? input :ec-2-security-group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-security-group-id)) #:http.request.field{:name "EC2SecurityGroupId", :shape "String"})) (clojure.core/contains? input :ec-2-security-group-owner-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ec-2-security-group-owner-id)) #:http.request.field{:name "EC2SecurityGroupOwnerId", :shape "String"}))))

(clojure.core/defn- req-modify-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :db-security-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-db-security-group-name-list (input :db-security-groups)) #:http.request.field{:name "DBSecurityGroups", :shape "DBSecurityGroupNameList"})) (clojure.core/contains? input :promotion-tier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :promotion-tier)) #:http.request.field{:name "PromotionTier", :shape "IntegerOptional"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional"})) (clojure.core/contains? input :domain-iam-role-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain-iam-role-name)) #:http.request.field{:name "DomainIAMRoleName", :shape "String"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :copy-tags-to-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags-to-snapshot)) #:http.request.field{:name "CopyTagsToSnapshot", :shape "BooleanOptional"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :new-db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :new-db-instance-identifier)) #:http.request.field{:name "NewDBInstanceIdentifier", :shape "String"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :use-default-processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :use-default-processor-features)) #:http.request.field{:name "UseDefaultProcessorFeatures", :shape "BooleanOptional"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :domain) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain)) #:http.request.field{:name "Domain", :shape "String"})) (clojure.core/contains? input :allow-major-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :allow-major-version-upgrade)) #:http.request.field{:name "AllowMajorVersionUpgrade", :shape "Boolean"})) (clojure.core/contains? input :allocated-storage) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :allocated-storage)) #:http.request.field{:name "AllocatedStorage", :shape "IntegerOptional"})) (clojure.core/contains? input :monitoring-interval) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :monitoring-interval)) #:http.request.field{:name "MonitoringInterval", :shape "IntegerOptional"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :db-port-number) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :db-port-number)) #:http.request.field{:name "DBPortNumber", :shape "IntegerOptional"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :tde-credential-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-password)) #:http.request.field{:name "TdeCredentialPassword", :shape "String"})) (clojure.core/contains? input :storage-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :storage-type)) #:http.request.field{:name "StorageType", :shape "String"})) (clojure.core/contains? input :apply-immediately) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})) (clojure.core/contains? input :processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-processor-feature-list (input :processor-features)) #:http.request.field{:name "ProcessorFeatures", :shape "ProcessorFeatureList"})) (clojure.core/contains? input :ca-certificate-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ca-certificate-identifier)) #:http.request.field{:name "CACertificateIdentifier", :shape "String"})) (clojure.core/contains? input :cloudwatch-logs-export-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cloudwatch-logs-export-configuration (input :cloudwatch-logs-export-configuration)) #:http.request.field{:name "CloudwatchLogsExportConfiguration", :shape "CloudwatchLogsExportConfiguration"})) (clojure.core/contains? input :performance-insights-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :performance-insights-retention-period)) #:http.request.field{:name "PerformanceInsightsRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :enable-performance-insights) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-performance-insights)) #:http.request.field{:name "EnablePerformanceInsights", :shape "BooleanOptional"})) (clojure.core/contains? input :monitoring-role-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :monitoring-role-arn)) #:http.request.field{:name "MonitoringRoleArn", :shape "String"})) (clojure.core/contains? input :tde-credential-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-arn)) #:http.request.field{:name "TdeCredentialArn", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"})) (clojure.core/contains? input :performance-insights-kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :performance-insights-kms-key-id)) #:http.request.field{:name "PerformanceInsightsKMSKeyId", :shape "String"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-restore-db-instance-from-s-3-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"}) (clojure.core/into (ser-string (input :source-engine)) #:http.request.field{:name "SourceEngine", :shape "String"}) (clojure.core/into (ser-string (input :source-engine-version)) #:http.request.field{:name "SourceEngineVersion", :shape "String"}) (clojure.core/into (ser-string (input :s-3-bucket-name)) #:http.request.field{:name "S3BucketName", :shape "String"}) (clojure.core/into (ser-string (input :s-3-ingestion-role-arn)) #:http.request.field{:name "S3IngestionRoleArn", :shape "String"})]} (clojure.core/contains? input :deletion-protection) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :deletion-protection)) #:http.request.field{:name "DeletionProtection", :shape "BooleanOptional"})) (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :db-security-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-db-security-group-name-list (input :db-security-groups)) #:http.request.field{:name "DBSecurityGroups", :shape "DBSecurityGroupNameList"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :copy-tags-to-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags-to-snapshot)) #:http.request.field{:name "CopyTagsToSnapshot", :shape "BooleanOptional"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :db-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-name)) #:http.request.field{:name "DBName", :shape "String"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :use-default-processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :use-default-processor-features)) #:http.request.field{:name "UseDefaultProcessorFeatures", :shape "BooleanOptional"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :allocated-storage) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :allocated-storage)) #:http.request.field{:name "AllocatedStorage", :shape "IntegerOptional"})) (clojure.core/contains? input :monitoring-interval) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :monitoring-interval)) #:http.request.field{:name "MonitoringInterval", :shape "IntegerOptional"})) (clojure.core/contains? input :master-username) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-username)) #:http.request.field{:name "MasterUsername", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :storage-encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :storage-encrypted)) #:http.request.field{:name "StorageEncrypted", :shape "BooleanOptional"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :storage-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :storage-type)) #:http.request.field{:name "StorageType", :shape "String"})) (clojure.core/contains? input :processor-features) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-processor-feature-list (input :processor-features)) #:http.request.field{:name "ProcessorFeatures", :shape "ProcessorFeatureList"})) (clojure.core/contains? input :performance-insights-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :performance-insights-retention-period)) #:http.request.field{:name "PerformanceInsightsRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :s-3-prefix) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :s-3-prefix)) #:http.request.field{:name "S3Prefix", :shape "String"})) (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :enable-performance-insights) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-performance-insights)) #:http.request.field{:name "EnablePerformanceInsights", :shape "BooleanOptional"})) (clojure.core/contains? input :monitoring-role-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :monitoring-role-arn)) #:http.request.field{:name "MonitoringRoleArn", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"})) (clojure.core/contains? input :performance-insights-kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :performance-insights-kms-key-id)) #:http.request.field{:name "PerformanceInsightsKMSKeyId", :shape "String"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-modify-option-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})]} (clojure.core/contains? input :options-to-include) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-option-configuration-list (input :options-to-include)) #:http.request.field{:name "OptionsToInclude", :shape "OptionConfigurationList"})) (clojure.core/contains? input :options-to-remove) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-option-names-list (input :options-to-remove)) #:http.request.field{:name "OptionsToRemove", :shape "OptionNamesList"})) (clojure.core/contains? input :apply-immediately) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"}))))

(clojure.core/defn- req-create-db-cluster-endpoint-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-cluster-endpoint-identifier)) #:http.request.field{:name "DBClusterEndpointIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :endpoint-type)) #:http.request.field{:name "EndpointType", :shape "String"})]} (clojure.core/contains? input :static-members) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-list (input :static-members)) #:http.request.field{:name "StaticMembers", :shape "StringList"})) (clojure.core/contains? input :excluded-members) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string-list (input :excluded-members)) #:http.request.field{:name "ExcludedMembers", :shape "StringList"}))))

(clojure.core/defn- req-describe-option-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :engine-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-name)) #:http.request.field{:name "EngineName", :shape "String"})) (clojure.core/contains? input :major-engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :major-engine-version)) #:http.request.field{:name "MajorEngineVersion", :shape "String"}))))

(clojure.core/defn- req-modify-event-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"})]} (clojure.core/contains? input :sns-topic-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :sns-topic-arn)) #:http.request.field{:name "SnsTopicArn", :shape "String"})) (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-type)) #:http.request.field{:name "SourceType", :shape "String"})) (clojure.core/contains? input :event-categories) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-event-categories-list (input :event-categories)) #:http.request.field{:name "EventCategories", :shape "EventCategoriesList"})) (clojure.core/contains? input :enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enabled)) #:http.request.field{:name "Enabled", :shape "BooleanOptional"}))))

(clojure.core/defn- req-describe-option-group-options-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :engine-name)) #:http.request.field{:name "EngineName", :shape "String"})]} (clojure.core/contains? input :major-engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :major-engine-version)) #:http.request.field{:name "MajorEngineVersion", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/declare deser-vpc-security-group-membership-list)

(clojure.core/declare deser-certificate-list)

(clojure.core/declare deser-pending-maintenance-action)

(clojure.core/declare deser-read-replica-identifier-list)

(clojure.core/declare deser-string-list)

(clojure.core/declare deser-double)

(clojure.core/declare deser-parameters-list)

(clojure.core/declare deser-ec-2-security-group-list)

(clojure.core/declare deser-double-range)

(clojure.core/declare deser-minimum-engine-version-per-allowed-value)

(clojure.core/declare deser-db-cluster-role)

(clojure.core/declare deser-pending-maintenance-action-details)

(clojure.core/declare deser-source-region-list)

(clojure.core/declare deser-db-parameter-group-status)

(clojure.core/declare deser-valid-storage-options-list)

(clojure.core/declare deser-db-security-groups)

(clojure.core/declare deser-option-version)

(clojure.core/declare deser-double-optional)

(clojure.core/declare deser-minimum-engine-version-per-allowed-value-list)

(clojure.core/declare deser-scaling-configuration-info)

(clojure.core/declare deser-source-ids-list)

(clojure.core/declare deser-db-snapshot-attribute-list)

(clojure.core/declare deser-source-region)

(clojure.core/declare deser-options-list)

(clojure.core/declare deser-option)

(clojure.core/declare deser-option-group-options-list)

(clojure.core/declare deser-db-parameter-group-list)

(clojure.core/declare deser-db-parameter-group-status-list)

(clojure.core/declare deser-double-range-list)

(clojure.core/declare deser-pending-maintenance-actions)

(clojure.core/declare deser-option-group-option-setting)

(clojure.core/declare deser-subnet)

(clojure.core/declare deser-db-cluster-snapshot)

(clojure.core/declare deser-pending-cloudwatch-logs-exports)

(clojure.core/declare deser-db-cluster-list)

(clojure.core/declare deser-db-cluster-backtrack-list)

(clojure.core/declare deser-db-engine-version-list)

(clojure.core/declare deser-event-subscription)

(clojure.core/declare deser-db-snapshot)

(clojure.core/declare deser-describe-db-log-files-details)

(clojure.core/declare deser-db-cluster-member)

(clojure.core/declare deser-db-snapshot-attributes-result)

(clojure.core/declare deser-db-cluster-backtrack)

(clojure.core/declare deser-reserved-db-instance-list)

(clojure.core/declare deser-resource-pending-maintenance-actions)

(clojure.core/declare deser-global-cluster)

(clojure.core/declare deser-db-cluster)

(clojure.core/declare deser-option-group)

(clojure.core/declare deser-option-groups-list)

(clojure.core/declare deser-ip-range-list)

(clojure.core/declare deser-db-instance-status-info)

(clojure.core/declare deser-event-list)

(clojure.core/declare deser-source-type)

(clojure.core/declare deser-orderable-db-instance-options-list)

(clojure.core/declare deser-event)

(clojure.core/declare deser-feature-name-list)

(clojure.core/declare deser-availability-zone-list)

(clojure.core/declare deser-availability-zone)

(clojure.core/declare deser-db-cluster-parameter-group-list)

(clojure.core/declare deser-db-instance-automated-backup)

(clojure.core/declare deser-db-instance-automated-backup-list)

(clojure.core/declare deser-db-cluster-member-list)

(clojure.core/declare deser-read-replica-db-instance-identifier-list)

(clojure.core/declare deser-recurring-charge)

(clojure.core/declare deser-valid-upgrade-target-list)

(clojure.core/declare deser-range)

(clojure.core/declare deser-db-cluster-roles)

(clojure.core/declare deser-option-group-option)

(clojure.core/declare deser-tag-list)

(clojure.core/declare deser-timezone)

(clojure.core/declare deser-db-cluster-snapshot-list)

(clojure.core/declare deser-db-engine-version)

(clojure.core/declare deser-options-conflicts-with)

(clojure.core/declare deser-option-setting-configuration-list)

(clojure.core/declare deser-domain-membership-list)

(clojure.core/declare deser-valid-storage-options)

(clojure.core/declare deser-restore-window)

(clojure.core/declare deser-vpc-security-group-membership)

(clojure.core/declare deser-valid-db-instance-modifications-message)

(clojure.core/declare deser-global-cluster-member)

(clojure.core/declare deser-db-cluster-snapshot-attribute-list)

(clojure.core/declare deser-account-quota-list)

(clojure.core/declare deser-db-snapshot-attribute)

(clojure.core/declare deser-reserved-db-instances-offering)

(clojure.core/declare deser-readers-arn-list)

(clojure.core/declare deser-ec-2-security-group)

(clojure.core/declare deser-option-group-membership-list)

(clojure.core/declare deser-db-instance-roles)

(clojure.core/declare deser-event-categories-map-list)

(clojure.core/declare deser-db-cluster-endpoint-list)

(clojure.core/declare deser-integer)

(clojure.core/declare deser-string)

(clojure.core/declare deser-db-cluster-snapshot-attribute)

(clojure.core/declare deser-parameter)

(clojure.core/declare deser-describe-db-log-files-list)

(clojure.core/declare deser-db-security-group-membership)

(clojure.core/declare deser-read-replica-db-cluster-identifier-list)

(clojure.core/declare deser-db-cluster-snapshot-attributes-result)

(clojure.core/declare deser-db-instance)

(clojure.core/declare deser-option-group-option-versions-list)

(clojure.core/declare deser-t-stamp)

(clojure.core/declare deser-db-security-group-membership-list)

(clojure.core/declare deser-event-categories-map)

(clojure.core/declare deser-reserved-db-instances-offering-list)

(clojure.core/declare deser-recurring-charge-list)

(clojure.core/declare deser-event-categories-list)

(clojure.core/declare deser-processor-feature)

(clojure.core/declare deser-db-cluster-parameter-group)

(clojure.core/declare deser-apply-method)

(clojure.core/declare deser-endpoint)

(clojure.core/declare deser-db-parameter-group)

(clojure.core/declare deser-supported-character-sets-list)

(clojure.core/declare deser-long)

(clojure.core/declare deser-log-type-list)

(clojure.core/declare deser-account-quota)

(clojure.core/declare deser-db-cluster-option-group-status)

(clojure.core/declare deser-option-group-membership)

(clojure.core/declare deser-upgrade-target)

(clojure.core/declare deser-available-processor-feature-list)

(clojure.core/declare deser-attribute-value-list)

(clojure.core/declare deser-reserved-db-instance)

(clojure.core/declare deser-ip-range)

(clojure.core/declare deser-character-set)

(clojure.core/declare deser-option-group-option-settings-list)

(clojure.core/declare deser-tag)

(clojure.core/declare deser-boolean-optional)

(clojure.core/declare deser-options-depended-on)

(clojure.core/declare deser-option-setting)

(clojure.core/declare deser-db-instance-list)

(clojure.core/declare deser-global-cluster-member-list)

(clojure.core/declare deser-db-instance-role)

(clojure.core/declare deser-engine-mode-list)

(clojure.core/declare deser-event-subscriptions-list)

(clojure.core/declare deser-db-snapshot-list)

(clojure.core/declare deser-db-cluster-option-group-memberships)

(clojure.core/declare deser-db-cluster-endpoint)

(clojure.core/declare deser-engine-defaults)

(clojure.core/declare deser-availability-zones)

(clojure.core/declare deser-db-subnet-groups)

(clojure.core/declare deser-long-optional)

(clojure.core/declare deser-global-cluster-list)

(clojure.core/declare deser-processor-feature-list)

(clojure.core/declare deser-integer-optional)

(clojure.core/declare deser-db-security-group)

(clojure.core/declare deser-supported-timezones-list)

(clojure.core/declare deser-range-list)

(clojure.core/declare deser-db-instance-status-info-list)

(clojure.core/declare deser-certificate)

(clojure.core/declare deser-domain-membership)

(clojure.core/declare deser-orderable-db-instance-option)

(clojure.core/declare deser-pending-modified-values)

(clojure.core/declare deser-subnet-list)

(clojure.core/declare deser-available-processor-feature)

(clojure.core/declare deser-db-subnet-group)

(clojure.core/declare deser-boolean)

(clojure.core/defn- deser-vpc-security-group-membership-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpc-security-group-membership coll))) input))

(clojure.core/defn- deser-certificate-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-certificate coll))) input))

(clojure.core/defn- deser-pending-maintenance-action [input] (clojure.core/let [letvar1475725 {"Action" (portkey.aws/search-for-tag input "Action" :flattened? nil :xmlAttribute? nil), "AutoAppliedAfterDate" (portkey.aws/search-for-tag input "AutoAppliedAfterDate" :flattened? nil :xmlAttribute? nil), "ForcedApplyDate" (portkey.aws/search-for-tag input "ForcedApplyDate" :flattened? nil :xmlAttribute? nil), "OptInStatus" (portkey.aws/search-for-tag input "OptInStatus" :flattened? nil :xmlAttribute? nil), "CurrentApplyDate" (portkey.aws/search-for-tag input "CurrentApplyDate" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1475725 "Action") (clojure.core/assoc :action (deser-string (clojure.core/get-in letvar1475725 ["Action" :content]))) (letvar1475725 "AutoAppliedAfterDate") (clojure.core/assoc :auto-applied-after-date (deser-t-stamp (clojure.core/get-in letvar1475725 ["AutoAppliedAfterDate" :content]))) (letvar1475725 "ForcedApplyDate") (clojure.core/assoc :forced-apply-date (deser-t-stamp (clojure.core/get-in letvar1475725 ["ForcedApplyDate" :content]))) (letvar1475725 "OptInStatus") (clojure.core/assoc :opt-in-status (deser-string (clojure.core/get-in letvar1475725 ["OptInStatus" :content]))) (letvar1475725 "CurrentApplyDate") (clojure.core/assoc :current-apply-date (deser-t-stamp (clojure.core/get-in letvar1475725 ["CurrentApplyDate" :content]))) (letvar1475725 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar1475725 ["Description" :content]))))))

(clojure.core/defn- deser-read-replica-identifier-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-string-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-double [input] (java.lang.Double. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-parameters-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-parameter coll))) input))

(clojure.core/defn- deser-ec-2-security-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-ec-2-security-group coll))) input))

(clojure.core/defn- deser-double-range [input] (clojure.core/let [letvar1475903 {"From" (portkey.aws/search-for-tag input "From" :flattened? nil :xmlAttribute? nil), "To" (portkey.aws/search-for-tag input "To" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1475903 "From") (clojure.core/assoc :from (deser-double (clojure.core/get-in letvar1475903 ["From" :content]))) (letvar1475903 "To") (clojure.core/assoc :to (deser-double (clojure.core/get-in letvar1475903 ["To" :content]))))))

(clojure.core/defn- deser-minimum-engine-version-per-allowed-value [input] (clojure.core/let [letvar1476011 {"AllowedValue" (portkey.aws/search-for-tag input "AllowedValue" :flattened? nil :xmlAttribute? nil), "MinimumEngineVersion" (portkey.aws/search-for-tag input "MinimumEngineVersion" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1476011 "AllowedValue") (clojure.core/assoc :allowed-value (deser-string (clojure.core/get-in letvar1476011 ["AllowedValue" :content]))) (letvar1476011 "MinimumEngineVersion") (clojure.core/assoc :minimum-engine-version (deser-string (clojure.core/get-in letvar1476011 ["MinimumEngineVersion" :content]))))))

(clojure.core/defn- deser-db-cluster-role [input] (clojure.core/let [letvar1476119 {"RoleArn" (portkey.aws/search-for-tag input "RoleArn" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "FeatureName" (portkey.aws/search-for-tag input "FeatureName" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1476119 "RoleArn") (clojure.core/assoc :role-arn (deser-string (clojure.core/get-in letvar1476119 ["RoleArn" :content]))) (letvar1476119 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar1476119 ["Status" :content]))) (letvar1476119 "FeatureName") (clojure.core/assoc :feature-name (deser-string (clojure.core/get-in letvar1476119 ["FeatureName" :content]))))))

(clojure.core/defn- deser-pending-maintenance-action-details [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-pending-maintenance-action coll))) input))

(clojure.core/defn- deser-source-region-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-source-region coll))) input))

(clojure.core/defn- deser-db-parameter-group-status [input] (clojure.core/let [letvar1476261 {"DBParameterGroupName" (portkey.aws/search-for-tag input "DBParameterGroupName" :flattened? nil :xmlAttribute? nil), "ParameterApplyStatus" (portkey.aws/search-for-tag input "ParameterApplyStatus" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1476261 "DBParameterGroupName") (clojure.core/assoc :db-parameter-group-name (deser-string (clojure.core/get-in letvar1476261 ["DBParameterGroupName" :content]))) (letvar1476261 "ParameterApplyStatus") (clojure.core/assoc :parameter-apply-status (deser-string (clojure.core/get-in letvar1476261 ["ParameterApplyStatus" :content]))))))

(clojure.core/defn- deser-valid-storage-options-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-valid-storage-options coll))) input))

(clojure.core/defn- deser-db-security-groups [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-security-group coll))) input))

(clojure.core/defn- deser-option-version [input] (clojure.core/let [letvar1476403 {"Version" (portkey.aws/search-for-tag input "Version" :flattened? nil :xmlAttribute? nil), "IsDefault" (portkey.aws/search-for-tag input "IsDefault" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1476403 "Version") (clojure.core/assoc :version (deser-string (clojure.core/get-in letvar1476403 ["Version" :content]))) (letvar1476403 "IsDefault") (clojure.core/assoc :is-default (deser-boolean (clojure.core/get-in letvar1476403 ["IsDefault" :content]))))))

(clojure.core/defn- deser-double-optional [input] (java.lang.Double. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-minimum-engine-version-per-allowed-value-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-minimum-engine-version-per-allowed-value coll))) input))

(clojure.core/defn- deser-scaling-configuration-info [input] (clojure.core/let [letvar1476530 {"MinCapacity" (portkey.aws/search-for-tag input "MinCapacity" :flattened? nil :xmlAttribute? nil), "MaxCapacity" (portkey.aws/search-for-tag input "MaxCapacity" :flattened? nil :xmlAttribute? nil), "AutoPause" (portkey.aws/search-for-tag input "AutoPause" :flattened? nil :xmlAttribute? nil), "SecondsUntilAutoPause" (portkey.aws/search-for-tag input "SecondsUntilAutoPause" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1476530 "MinCapacity") (clojure.core/assoc :min-capacity (deser-integer-optional (clojure.core/get-in letvar1476530 ["MinCapacity" :content]))) (letvar1476530 "MaxCapacity") (clojure.core/assoc :max-capacity (deser-integer-optional (clojure.core/get-in letvar1476530 ["MaxCapacity" :content]))) (letvar1476530 "AutoPause") (clojure.core/assoc :auto-pause (deser-boolean-optional (clojure.core/get-in letvar1476530 ["AutoPause" :content]))) (letvar1476530 "SecondsUntilAutoPause") (clojure.core/assoc :seconds-until-auto-pause (deser-integer-optional (clojure.core/get-in letvar1476530 ["SecondsUntilAutoPause" :content]))))))

(clojure.core/defn- deser-source-ids-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-db-snapshot-attribute-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-snapshot-attribute coll))) input))

(clojure.core/defn- deser-source-region [input] (clojure.core/let [letvar1476672 {"RegionName" (portkey.aws/search-for-tag input "RegionName" :flattened? nil :xmlAttribute? nil), "Endpoint" (portkey.aws/search-for-tag input "Endpoint" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1476672 "RegionName") (clojure.core/assoc :region-name (deser-string (clojure.core/get-in letvar1476672 ["RegionName" :content]))) (letvar1476672 "Endpoint") (clojure.core/assoc :endpoint (deser-string (clojure.core/get-in letvar1476672 ["Endpoint" :content]))) (letvar1476672 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar1476672 ["Status" :content]))))))

(clojure.core/defn- deser-options-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-option coll))) input))

(clojure.core/defn- deser-option [input] (clojure.core/let [letvar1476797 {"VpcSecurityGroupMemberships" (portkey.aws/search-for-tag input "VpcSecurityGroupMemberships" :flattened? nil :xmlAttribute? nil), "OptionVersion" (portkey.aws/search-for-tag input "OptionVersion" :flattened? nil :xmlAttribute? nil), "DBSecurityGroupMemberships" (portkey.aws/search-for-tag input "DBSecurityGroupMemberships" :flattened? nil :xmlAttribute? nil), "OptionSettings" (portkey.aws/search-for-tag input "OptionSettings" :flattened? nil :xmlAttribute? nil), "Permanent" (portkey.aws/search-for-tag input "Permanent" :flattened? nil :xmlAttribute? nil), "Persistent" (portkey.aws/search-for-tag input "Persistent" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "OptionDescription" (portkey.aws/search-for-tag input "OptionDescription" :flattened? nil :xmlAttribute? nil), "OptionName" (portkey.aws/search-for-tag input "OptionName" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1476797 "VpcSecurityGroupMemberships") (clojure.core/assoc :vpc-security-group-memberships (deser-vpc-security-group-membership-list (clojure.core/get-in letvar1476797 ["VpcSecurityGroupMemberships" :content]))) (letvar1476797 "OptionVersion") (clojure.core/assoc :option-version (deser-string (clojure.core/get-in letvar1476797 ["OptionVersion" :content]))) (letvar1476797 "DBSecurityGroupMemberships") (clojure.core/assoc :db-security-group-memberships (deser-db-security-group-membership-list (clojure.core/get-in letvar1476797 ["DBSecurityGroupMemberships" :content]))) (letvar1476797 "OptionSettings") (clojure.core/assoc :option-settings (deser-option-setting-configuration-list (clojure.core/get-in letvar1476797 ["OptionSettings" :content]))) (letvar1476797 "Permanent") (clojure.core/assoc :permanent (deser-boolean (clojure.core/get-in letvar1476797 ["Permanent" :content]))) (letvar1476797 "Persistent") (clojure.core/assoc :persistent (deser-boolean (clojure.core/get-in letvar1476797 ["Persistent" :content]))) (letvar1476797 "Port") (clojure.core/assoc :port (deser-integer-optional (clojure.core/get-in letvar1476797 ["Port" :content]))) (letvar1476797 "OptionDescription") (clojure.core/assoc :option-description (deser-string (clojure.core/get-in letvar1476797 ["OptionDescription" :content]))) (letvar1476797 "OptionName") (clojure.core/assoc :option-name (deser-string (clojure.core/get-in letvar1476797 ["OptionName" :content]))))))

(clojure.core/defn- deser-option-group-options-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-option-group-option coll))) input))

(clojure.core/defn- deser-db-parameter-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-parameter-group coll))) input))

(clojure.core/defn- deser-db-parameter-group-status-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-parameter-group-status coll))) input))

(clojure.core/defn- deser-double-range-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-double-range coll))) input))

(clojure.core/defn- deser-pending-maintenance-actions [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-resource-pending-maintenance-actions coll))) input))

(clojure.core/defn- deser-option-group-option-setting [input] (clojure.core/let [letvar1476990 {"SettingName" (portkey.aws/search-for-tag input "SettingName" :flattened? nil :xmlAttribute? nil), "SettingDescription" (portkey.aws/search-for-tag input "SettingDescription" :flattened? nil :xmlAttribute? nil), "DefaultValue" (portkey.aws/search-for-tag input "DefaultValue" :flattened? nil :xmlAttribute? nil), "ApplyType" (portkey.aws/search-for-tag input "ApplyType" :flattened? nil :xmlAttribute? nil), "AllowedValues" (portkey.aws/search-for-tag input "AllowedValues" :flattened? nil :xmlAttribute? nil), "IsModifiable" (portkey.aws/search-for-tag input "IsModifiable" :flattened? nil :xmlAttribute? nil), "IsRequired" (portkey.aws/search-for-tag input "IsRequired" :flattened? nil :xmlAttribute? nil), "MinimumEngineVersionPerAllowedValue" (portkey.aws/search-for-tag input "MinimumEngineVersionPerAllowedValue" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1476990 "SettingName") (clojure.core/assoc :setting-name (deser-string (clojure.core/get-in letvar1476990 ["SettingName" :content]))) (letvar1476990 "SettingDescription") (clojure.core/assoc :setting-description (deser-string (clojure.core/get-in letvar1476990 ["SettingDescription" :content]))) (letvar1476990 "DefaultValue") (clojure.core/assoc :default-value (deser-string (clojure.core/get-in letvar1476990 ["DefaultValue" :content]))) (letvar1476990 "ApplyType") (clojure.core/assoc :apply-type (deser-string (clojure.core/get-in letvar1476990 ["ApplyType" :content]))) (letvar1476990 "AllowedValues") (clojure.core/assoc :allowed-values (deser-string (clojure.core/get-in letvar1476990 ["AllowedValues" :content]))) (letvar1476990 "IsModifiable") (clojure.core/assoc :is-modifiable (deser-boolean (clojure.core/get-in letvar1476990 ["IsModifiable" :content]))) (letvar1476990 "IsRequired") (clojure.core/assoc :is-required (deser-boolean (clojure.core/get-in letvar1476990 ["IsRequired" :content]))) (letvar1476990 "MinimumEngineVersionPerAllowedValue") (clojure.core/assoc :minimum-engine-version-per-allowed-value (deser-minimum-engine-version-per-allowed-value-list (clojure.core/get-in letvar1476990 ["MinimumEngineVersionPerAllowedValue" :content]))))))

(clojure.core/defn- deser-subnet [input] (clojure.core/let [letvar1477098 {"SubnetIdentifier" (portkey.aws/search-for-tag input "SubnetIdentifier" :flattened? nil :xmlAttribute? nil), "SubnetAvailabilityZone" (portkey.aws/search-for-tag input "SubnetAvailabilityZone" :flattened? nil :xmlAttribute? nil), "SubnetStatus" (portkey.aws/search-for-tag input "SubnetStatus" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1477098 "SubnetIdentifier") (clojure.core/assoc :subnet-identifier (deser-string (clojure.core/get-in letvar1477098 ["SubnetIdentifier" :content]))) (letvar1477098 "SubnetAvailabilityZone") (clojure.core/assoc :subnet-availability-zone (deser-availability-zone (clojure.core/get-in letvar1477098 ["SubnetAvailabilityZone" :content]))) (letvar1477098 "SubnetStatus") (clojure.core/assoc :subnet-status (deser-string (clojure.core/get-in letvar1477098 ["SubnetStatus" :content]))))))

(clojure.core/defn- deser-db-cluster-snapshot [input] (clojure.core/let [letvar1477206 {"SnapshotCreateTime" (portkey.aws/search-for-tag input "SnapshotCreateTime" :flattened? nil :xmlAttribute? nil), "DBClusterSnapshotIdentifier" (portkey.aws/search-for-tag input "DBClusterSnapshotIdentifier" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "SnapshotType" (portkey.aws/search-for-tag input "SnapshotType" :flattened? nil :xmlAttribute? nil), "LicenseModel" (portkey.aws/search-for-tag input "LicenseModel" :flattened? nil :xmlAttribute? nil), "AllocatedStorage" (portkey.aws/search-for-tag input "AllocatedStorage" :flattened? nil :xmlAttribute? nil), "MasterUsername" (portkey.aws/search-for-tag input "MasterUsername" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "StorageEncrypted" (portkey.aws/search-for-tag input "StorageEncrypted" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "VpcId" (portkey.aws/search-for-tag input "VpcId" :flattened? nil :xmlAttribute? nil), "KmsKeyId" (portkey.aws/search-for-tag input "KmsKeyId" :flattened? nil :xmlAttribute? nil), "ClusterCreateTime" (portkey.aws/search-for-tag input "ClusterCreateTime" :flattened? nil :xmlAttribute? nil), "IAMDatabaseAuthenticationEnabled" (portkey.aws/search-for-tag input "IAMDatabaseAuthenticationEnabled" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "SourceDBClusterSnapshotArn" (portkey.aws/search-for-tag input "SourceDBClusterSnapshotArn" :flattened? nil :xmlAttribute? nil), "AvailabilityZones" (portkey.aws/search-for-tag input "AvailabilityZones" :flattened? nil :xmlAttribute? nil), "DBClusterIdentifier" (portkey.aws/search-for-tag input "DBClusterIdentifier" :flattened? nil :xmlAttribute? nil), "DBClusterSnapshotArn" (portkey.aws/search-for-tag input "DBClusterSnapshotArn" :flattened? nil :xmlAttribute? nil), "PercentProgress" (portkey.aws/search-for-tag input "PercentProgress" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1477206 "SnapshotCreateTime") (clojure.core/assoc :snapshot-create-time (deser-t-stamp (clojure.core/get-in letvar1477206 ["SnapshotCreateTime" :content]))) (letvar1477206 "DBClusterSnapshotIdentifier") (clojure.core/assoc :db-cluster-snapshot-identifier (deser-string (clojure.core/get-in letvar1477206 ["DBClusterSnapshotIdentifier" :content]))) (letvar1477206 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar1477206 ["Status" :content]))) (letvar1477206 "SnapshotType") (clojure.core/assoc :snapshot-type (deser-string (clojure.core/get-in letvar1477206 ["SnapshotType" :content]))) (letvar1477206 "LicenseModel") (clojure.core/assoc :license-model (deser-string (clojure.core/get-in letvar1477206 ["LicenseModel" :content]))) (letvar1477206 "AllocatedStorage") (clojure.core/assoc :allocated-storage (deser-integer (clojure.core/get-in letvar1477206 ["AllocatedStorage" :content]))) (letvar1477206 "MasterUsername") (clojure.core/assoc :master-username (deser-string (clojure.core/get-in letvar1477206 ["MasterUsername" :content]))) (letvar1477206 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar1477206 ["EngineVersion" :content]))) (letvar1477206 "StorageEncrypted") (clojure.core/assoc :storage-encrypted (deser-boolean (clojure.core/get-in letvar1477206 ["StorageEncrypted" :content]))) (letvar1477206 "Port") (clojure.core/assoc :port (deser-integer (clojure.core/get-in letvar1477206 ["Port" :content]))) (letvar1477206 "VpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar1477206 ["VpcId" :content]))) (letvar1477206 "KmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar1477206 ["KmsKeyId" :content]))) (letvar1477206 "ClusterCreateTime") (clojure.core/assoc :cluster-create-time (deser-t-stamp (clojure.core/get-in letvar1477206 ["ClusterCreateTime" :content]))) (letvar1477206 "IAMDatabaseAuthenticationEnabled") (clojure.core/assoc :iam-database-authentication-enabled (deser-boolean (clojure.core/get-in letvar1477206 ["IAMDatabaseAuthenticationEnabled" :content]))) (letvar1477206 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar1477206 ["Engine" :content]))) (letvar1477206 "SourceDBClusterSnapshotArn") (clojure.core/assoc :source-db-cluster-snapshot-arn (deser-string (clojure.core/get-in letvar1477206 ["SourceDBClusterSnapshotArn" :content]))) (letvar1477206 "AvailabilityZones") (clojure.core/assoc :availability-zones (deser-availability-zones (clojure.core/get-in letvar1477206 ["AvailabilityZones" :content]))) (letvar1477206 "DBClusterIdentifier") (clojure.core/assoc :db-cluster-identifier (deser-string (clojure.core/get-in letvar1477206 ["DBClusterIdentifier" :content]))) (letvar1477206 "DBClusterSnapshotArn") (clojure.core/assoc :db-cluster-snapshot-arn (deser-string (clojure.core/get-in letvar1477206 ["DBClusterSnapshotArn" :content]))) (letvar1477206 "PercentProgress") (clojure.core/assoc :percent-progress (deser-integer (clojure.core/get-in letvar1477206 ["PercentProgress" :content]))))))

(clojure.core/defn- deser-pending-cloudwatch-logs-exports [input] (clojure.core/let [letvar1477314 {"LogTypesToEnable" (portkey.aws/search-for-tag input "LogTypesToEnable" :flattened? nil :xmlAttribute? nil), "LogTypesToDisable" (portkey.aws/search-for-tag input "LogTypesToDisable" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1477314 "LogTypesToEnable") (clojure.core/assoc :log-types-to-enable (deser-log-type-list (clojure.core/get-in letvar1477314 ["LogTypesToEnable" :content]))) (letvar1477314 "LogTypesToDisable") (clojure.core/assoc :log-types-to-disable (deser-log-type-list (clojure.core/get-in letvar1477314 ["LogTypesToDisable" :content]))))))

(clojure.core/defn- deser-db-cluster-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster coll))) input))

(clojure.core/defn- deser-db-cluster-backtrack-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-backtrack coll))) input))

(clojure.core/defn- deser-db-engine-version-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-engine-version coll))) input))

(clojure.core/defn- deser-event-subscription [input] (clojure.core/let [letvar1477473 {"SourceIdsList" (portkey.aws/search-for-tag input "SourceIdsList" :flattened? nil :xmlAttribute? nil), "EventSubscriptionArn" (portkey.aws/search-for-tag input "EventSubscriptionArn" :flattened? nil :xmlAttribute? nil), "CustomerAwsId" (portkey.aws/search-for-tag input "CustomerAwsId" :flattened? nil :xmlAttribute? nil), "SourceType" (portkey.aws/search-for-tag input "SourceType" :flattened? nil :xmlAttribute? nil), "Enabled" (portkey.aws/search-for-tag input "Enabled" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "SnsTopicArn" (portkey.aws/search-for-tag input "SnsTopicArn" :flattened? nil :xmlAttribute? nil), "EventCategoriesList" (portkey.aws/search-for-tag input "EventCategoriesList" :flattened? nil :xmlAttribute? nil), "CustSubscriptionId" (portkey.aws/search-for-tag input "CustSubscriptionId" :flattened? nil :xmlAttribute? nil), "SubscriptionCreationTime" (portkey.aws/search-for-tag input "SubscriptionCreationTime" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1477473 "SourceIdsList") (clojure.core/assoc :source-ids-list (deser-source-ids-list (clojure.core/get-in letvar1477473 ["SourceIdsList" :content]))) (letvar1477473 "EventSubscriptionArn") (clojure.core/assoc :event-subscription-arn (deser-string (clojure.core/get-in letvar1477473 ["EventSubscriptionArn" :content]))) (letvar1477473 "CustomerAwsId") (clojure.core/assoc :customer-aws-id (deser-string (clojure.core/get-in letvar1477473 ["CustomerAwsId" :content]))) (letvar1477473 "SourceType") (clojure.core/assoc :source-type (deser-string (clojure.core/get-in letvar1477473 ["SourceType" :content]))) (letvar1477473 "Enabled") (clojure.core/assoc :enabled (deser-boolean (clojure.core/get-in letvar1477473 ["Enabled" :content]))) (letvar1477473 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar1477473 ["Status" :content]))) (letvar1477473 "SnsTopicArn") (clojure.core/assoc :sns-topic-arn (deser-string (clojure.core/get-in letvar1477473 ["SnsTopicArn" :content]))) (letvar1477473 "EventCategoriesList") (clojure.core/assoc :event-categories-list (deser-event-categories-list (clojure.core/get-in letvar1477473 ["EventCategoriesList" :content]))) (letvar1477473 "CustSubscriptionId") (clojure.core/assoc :cust-subscription-id (deser-string (clojure.core/get-in letvar1477473 ["CustSubscriptionId" :content]))) (letvar1477473 "SubscriptionCreationTime") (clojure.core/assoc :subscription-creation-time (deser-string (clojure.core/get-in letvar1477473 ["SubscriptionCreationTime" :content]))))))

(clojure.core/defn- deser-db-snapshot [input] (clojure.core/let [letvar1477581 {"SnapshotCreateTime" (portkey.aws/search-for-tag input "SnapshotCreateTime" :flattened? nil :xmlAttribute? nil), "OptionGroupName" (portkey.aws/search-for-tag input "OptionGroupName" :flattened? nil :xmlAttribute? nil), "SourceRegion" (portkey.aws/search-for-tag input "SourceRegion" :flattened? nil :xmlAttribute? nil), "SourceDBSnapshotIdentifier" (portkey.aws/search-for-tag input "SourceDBSnapshotIdentifier" :flattened? nil :xmlAttribute? nil), "Encrypted" (portkey.aws/search-for-tag input "Encrypted" :flattened? nil :xmlAttribute? nil), "DBInstanceIdentifier" (portkey.aws/search-for-tag input "DBInstanceIdentifier" :flattened? nil :xmlAttribute? nil), "InstanceCreateTime" (portkey.aws/search-for-tag input "InstanceCreateTime" :flattened? nil :xmlAttribute? nil), "AvailabilityZone" (portkey.aws/search-for-tag input "AvailabilityZone" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "SnapshotType" (portkey.aws/search-for-tag input "SnapshotType" :flattened? nil :xmlAttribute? nil), "LicenseModel" (portkey.aws/search-for-tag input "LicenseModel" :flattened? nil :xmlAttribute? nil), "AllocatedStorage" (portkey.aws/search-for-tag input "AllocatedStorage" :flattened? nil :xmlAttribute? nil), "Timezone" (portkey.aws/search-for-tag input "Timezone" :flattened? nil :xmlAttribute? nil), "MasterUsername" (portkey.aws/search-for-tag input "MasterUsername" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "DBSnapshotIdentifier" (portkey.aws/search-for-tag input "DBSnapshotIdentifier" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "VpcId" (portkey.aws/search-for-tag input "VpcId" :flattened? nil :xmlAttribute? nil), "KmsKeyId" (portkey.aws/search-for-tag input "KmsKeyId" :flattened? nil :xmlAttribute? nil), "DbiResourceId" (portkey.aws/search-for-tag input "DbiResourceId" :flattened? nil :xmlAttribute? nil), "Iops" (portkey.aws/search-for-tag input "Iops" :flattened? nil :xmlAttribute? nil), "StorageType" (portkey.aws/search-for-tag input "StorageType" :flattened? nil :xmlAttribute? nil), "ProcessorFeatures" (portkey.aws/search-for-tag input "ProcessorFeatures" :flattened? nil :xmlAttribute? nil), "IAMDatabaseAuthenticationEnabled" (portkey.aws/search-for-tag input "IAMDatabaseAuthenticationEnabled" :flattened? nil :xmlAttribute? nil), "DBSnapshotArn" (portkey.aws/search-for-tag input "DBSnapshotArn" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "TdeCredentialArn" (portkey.aws/search-for-tag input "TdeCredentialArn" :flattened? nil :xmlAttribute? nil), "PercentProgress" (portkey.aws/search-for-tag input "PercentProgress" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1477581 "SnapshotCreateTime") (clojure.core/assoc :snapshot-create-time (deser-t-stamp (clojure.core/get-in letvar1477581 ["SnapshotCreateTime" :content]))) (letvar1477581 "OptionGroupName") (clojure.core/assoc :option-group-name (deser-string (clojure.core/get-in letvar1477581 ["OptionGroupName" :content]))) (letvar1477581 "SourceRegion") (clojure.core/assoc :source-region (deser-string (clojure.core/get-in letvar1477581 ["SourceRegion" :content]))) (letvar1477581 "SourceDBSnapshotIdentifier") (clojure.core/assoc :source-db-snapshot-identifier (deser-string (clojure.core/get-in letvar1477581 ["SourceDBSnapshotIdentifier" :content]))) (letvar1477581 "Encrypted") (clojure.core/assoc :encrypted (deser-boolean (clojure.core/get-in letvar1477581 ["Encrypted" :content]))) (letvar1477581 "DBInstanceIdentifier") (clojure.core/assoc :db-instance-identifier (deser-string (clojure.core/get-in letvar1477581 ["DBInstanceIdentifier" :content]))) (letvar1477581 "InstanceCreateTime") (clojure.core/assoc :instance-create-time (deser-t-stamp (clojure.core/get-in letvar1477581 ["InstanceCreateTime" :content]))) (letvar1477581 "AvailabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar1477581 ["AvailabilityZone" :content]))) (letvar1477581 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar1477581 ["Status" :content]))) (letvar1477581 "SnapshotType") (clojure.core/assoc :snapshot-type (deser-string (clojure.core/get-in letvar1477581 ["SnapshotType" :content]))) (letvar1477581 "LicenseModel") (clojure.core/assoc :license-model (deser-string (clojure.core/get-in letvar1477581 ["LicenseModel" :content]))) (letvar1477581 "AllocatedStorage") (clojure.core/assoc :allocated-storage (deser-integer (clojure.core/get-in letvar1477581 ["AllocatedStorage" :content]))) (letvar1477581 "Timezone") (clojure.core/assoc :timezone (deser-string (clojure.core/get-in letvar1477581 ["Timezone" :content]))) (letvar1477581 "MasterUsername") (clojure.core/assoc :master-username (deser-string (clojure.core/get-in letvar1477581 ["MasterUsername" :content]))) (letvar1477581 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar1477581 ["EngineVersion" :content]))) (letvar1477581 "DBSnapshotIdentifier") (clojure.core/assoc :db-snapshot-identifier (deser-string (clojure.core/get-in letvar1477581 ["DBSnapshotIdentifier" :content]))) (letvar1477581 "Port") (clojure.core/assoc :port (deser-integer (clojure.core/get-in letvar1477581 ["Port" :content]))) (letvar1477581 "VpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar1477581 ["VpcId" :content]))) (letvar1477581 "KmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar1477581 ["KmsKeyId" :content]))) (letvar1477581 "DbiResourceId") (clojure.core/assoc :dbi-resource-id (deser-string (clojure.core/get-in letvar1477581 ["DbiResourceId" :content]))) (letvar1477581 "Iops") (clojure.core/assoc :iops (deser-integer-optional (clojure.core/get-in letvar1477581 ["Iops" :content]))) (letvar1477581 "StorageType") (clojure.core/assoc :storage-type (deser-string (clojure.core/get-in letvar1477581 ["StorageType" :content]))) (letvar1477581 "ProcessorFeatures") (clojure.core/assoc :processor-features (deser-processor-feature-list (clojure.core/get-in letvar1477581 ["ProcessorFeatures" :content]))) (letvar1477581 "IAMDatabaseAuthenticationEnabled") (clojure.core/assoc :iam-database-authentication-enabled (deser-boolean (clojure.core/get-in letvar1477581 ["IAMDatabaseAuthenticationEnabled" :content]))) (letvar1477581 "DBSnapshotArn") (clojure.core/assoc :db-snapshot-arn (deser-string (clojure.core/get-in letvar1477581 ["DBSnapshotArn" :content]))) (letvar1477581 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar1477581 ["Engine" :content]))) (letvar1477581 "TdeCredentialArn") (clojure.core/assoc :tde-credential-arn (deser-string (clojure.core/get-in letvar1477581 ["TdeCredentialArn" :content]))) (letvar1477581 "PercentProgress") (clojure.core/assoc :percent-progress (deser-integer (clojure.core/get-in letvar1477581 ["PercentProgress" :content]))))))

(clojure.core/defn- deser-describe-db-log-files-details [input] (clojure.core/let [letvar1477689 {"LogFileName" (portkey.aws/search-for-tag input "LogFileName" :flattened? nil :xmlAttribute? nil), "LastWritten" (portkey.aws/search-for-tag input "LastWritten" :flattened? nil :xmlAttribute? nil), "Size" (portkey.aws/search-for-tag input "Size" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1477689 "LogFileName") (clojure.core/assoc :log-file-name (deser-string (clojure.core/get-in letvar1477689 ["LogFileName" :content]))) (letvar1477689 "LastWritten") (clojure.core/assoc :last-written (deser-long (clojure.core/get-in letvar1477689 ["LastWritten" :content]))) (letvar1477689 "Size") (clojure.core/assoc :size (deser-long (clojure.core/get-in letvar1477689 ["Size" :content]))))))

(clojure.core/defn- deser-db-cluster-member [input] (clojure.core/let [letvar1477797 {"DBInstanceIdentifier" (portkey.aws/search-for-tag input "DBInstanceIdentifier" :flattened? nil :xmlAttribute? nil), "IsClusterWriter" (portkey.aws/search-for-tag input "IsClusterWriter" :flattened? nil :xmlAttribute? nil), "DBClusterParameterGroupStatus" (portkey.aws/search-for-tag input "DBClusterParameterGroupStatus" :flattened? nil :xmlAttribute? nil), "PromotionTier" (portkey.aws/search-for-tag input "PromotionTier" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1477797 "DBInstanceIdentifier") (clojure.core/assoc :db-instance-identifier (deser-string (clojure.core/get-in letvar1477797 ["DBInstanceIdentifier" :content]))) (letvar1477797 "IsClusterWriter") (clojure.core/assoc :is-cluster-writer (deser-boolean (clojure.core/get-in letvar1477797 ["IsClusterWriter" :content]))) (letvar1477797 "DBClusterParameterGroupStatus") (clojure.core/assoc :db-cluster-parameter-group-status (deser-string (clojure.core/get-in letvar1477797 ["DBClusterParameterGroupStatus" :content]))) (letvar1477797 "PromotionTier") (clojure.core/assoc :promotion-tier (deser-integer-optional (clojure.core/get-in letvar1477797 ["PromotionTier" :content]))))))

(clojure.core/defn- deser-db-snapshot-attributes-result [input] (clojure.core/let [letvar1477905 {"DBSnapshotIdentifier" (portkey.aws/search-for-tag input "DBSnapshotIdentifier" :flattened? nil :xmlAttribute? nil), "DBSnapshotAttributes" (portkey.aws/search-for-tag input "DBSnapshotAttributes" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1477905 "DBSnapshotIdentifier") (clojure.core/assoc :db-snapshot-identifier (deser-string (clojure.core/get-in letvar1477905 ["DBSnapshotIdentifier" :content]))) (letvar1477905 "DBSnapshotAttributes") (clojure.core/assoc :db-snapshot-attributes (deser-db-snapshot-attribute-list (clojure.core/get-in letvar1477905 ["DBSnapshotAttributes" :content]))))))

(clojure.core/defn- deser-db-cluster-backtrack [input] (clojure.core/let [letvar1478013 {"DBClusterIdentifier" (portkey.aws/search-for-tag input "DBClusterIdentifier" :flattened? nil :xmlAttribute? nil), "BacktrackIdentifier" (portkey.aws/search-for-tag input "BacktrackIdentifier" :flattened? nil :xmlAttribute? nil), "BacktrackTo" (portkey.aws/search-for-tag input "BacktrackTo" :flattened? nil :xmlAttribute? nil), "BacktrackedFrom" (portkey.aws/search-for-tag input "BacktrackedFrom" :flattened? nil :xmlAttribute? nil), "BacktrackRequestCreationTime" (portkey.aws/search-for-tag input "BacktrackRequestCreationTime" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1478013 "DBClusterIdentifier") (clojure.core/assoc :db-cluster-identifier (deser-string (clojure.core/get-in letvar1478013 ["DBClusterIdentifier" :content]))) (letvar1478013 "BacktrackIdentifier") (clojure.core/assoc :backtrack-identifier (deser-string (clojure.core/get-in letvar1478013 ["BacktrackIdentifier" :content]))) (letvar1478013 "BacktrackTo") (clojure.core/assoc :backtrack-to (deser-t-stamp (clojure.core/get-in letvar1478013 ["BacktrackTo" :content]))) (letvar1478013 "BacktrackedFrom") (clojure.core/assoc :backtracked-from (deser-t-stamp (clojure.core/get-in letvar1478013 ["BacktrackedFrom" :content]))) (letvar1478013 "BacktrackRequestCreationTime") (clojure.core/assoc :backtrack-request-creation-time (deser-t-stamp (clojure.core/get-in letvar1478013 ["BacktrackRequestCreationTime" :content]))) (letvar1478013 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar1478013 ["Status" :content]))))))

(clojure.core/defn- deser-reserved-db-instance-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-db-instance coll))) input))

(clojure.core/defn- deser-resource-pending-maintenance-actions [input] (clojure.core/let [letvar1478138 {"ResourceIdentifier" (portkey.aws/search-for-tag input "ResourceIdentifier" :flattened? nil :xmlAttribute? nil), "PendingMaintenanceActionDetails" (portkey.aws/search-for-tag input "PendingMaintenanceActionDetails" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1478138 "ResourceIdentifier") (clojure.core/assoc :resource-identifier (deser-string (clojure.core/get-in letvar1478138 ["ResourceIdentifier" :content]))) (letvar1478138 "PendingMaintenanceActionDetails") (clojure.core/assoc :pending-maintenance-action-details (deser-pending-maintenance-action-details (clojure.core/get-in letvar1478138 ["PendingMaintenanceActionDetails" :content]))))))

(clojure.core/defn- deser-global-cluster [input] (clojure.core/let [letvar1478246 {"DeletionProtection" (portkey.aws/search-for-tag input "DeletionProtection" :flattened? nil :xmlAttribute? nil), "GlobalClusterArn" (portkey.aws/search-for-tag input "GlobalClusterArn" :flattened? nil :xmlAttribute? nil), "DatabaseName" (portkey.aws/search-for-tag input "DatabaseName" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "StorageEncrypted" (portkey.aws/search-for-tag input "StorageEncrypted" :flattened? nil :xmlAttribute? nil), "GlobalClusterIdentifier" (portkey.aws/search-for-tag input "GlobalClusterIdentifier" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "GlobalClusterMembers" (portkey.aws/search-for-tag input "GlobalClusterMembers" :flattened? nil :xmlAttribute? nil), "GlobalClusterResourceId" (portkey.aws/search-for-tag input "GlobalClusterResourceId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1478246 "DeletionProtection") (clojure.core/assoc :deletion-protection (deser-boolean-optional (clojure.core/get-in letvar1478246 ["DeletionProtection" :content]))) (letvar1478246 "GlobalClusterArn") (clojure.core/assoc :global-cluster-arn (deser-string (clojure.core/get-in letvar1478246 ["GlobalClusterArn" :content]))) (letvar1478246 "DatabaseName") (clojure.core/assoc :database-name (deser-string (clojure.core/get-in letvar1478246 ["DatabaseName" :content]))) (letvar1478246 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar1478246 ["Status" :content]))) (letvar1478246 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar1478246 ["EngineVersion" :content]))) (letvar1478246 "StorageEncrypted") (clojure.core/assoc :storage-encrypted (deser-boolean-optional (clojure.core/get-in letvar1478246 ["StorageEncrypted" :content]))) (letvar1478246 "GlobalClusterIdentifier") (clojure.core/assoc :global-cluster-identifier (deser-string (clojure.core/get-in letvar1478246 ["GlobalClusterIdentifier" :content]))) (letvar1478246 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar1478246 ["Engine" :content]))) (letvar1478246 "GlobalClusterMembers") (clojure.core/assoc :global-cluster-members (deser-global-cluster-member-list (clojure.core/get-in letvar1478246 ["GlobalClusterMembers" :content]))) (letvar1478246 "GlobalClusterResourceId") (clojure.core/assoc :global-cluster-resource-id (deser-string (clojure.core/get-in letvar1478246 ["GlobalClusterResourceId" :content]))))))

(clojure.core/defn- deser-db-cluster [input] (clojure.core/let [letvar1478354 {"DeletionProtection" (portkey.aws/search-for-tag input "DeletionProtection" :flattened? nil :xmlAttribute? nil), "BackupRetentionPeriod" (portkey.aws/search-for-tag input "BackupRetentionPeriod" :flattened? nil :xmlAttribute? nil), "ReplicationSourceIdentifier" (portkey.aws/search-for-tag input "ReplicationSourceIdentifier" :flattened? nil :xmlAttribute? nil), "EarliestRestorableTime" (portkey.aws/search-for-tag input "EarliestRestorableTime" :flattened? nil :xmlAttribute? nil), "CharacterSetName" (portkey.aws/search-for-tag input "CharacterSetName" :flattened? nil :xmlAttribute? nil), "ScalingConfigurationInfo" (portkey.aws/search-for-tag input "ScalingConfigurationInfo" :flattened? nil :xmlAttribute? nil), "DatabaseName" (portkey.aws/search-for-tag input "DatabaseName" :flattened? nil :xmlAttribute? nil), "CustomEndpoints" (portkey.aws/search-for-tag input "CustomEndpoints" :flattened? nil :xmlAttribute? nil), "PreferredMaintenanceWindow" (portkey.aws/search-for-tag input "PreferredMaintenanceWindow" :flattened? nil :xmlAttribute? nil), "EngineMode" (portkey.aws/search-for-tag input "EngineMode" :flattened? nil :xmlAttribute? nil), "CloneGroupId" (portkey.aws/search-for-tag input "CloneGroupId" :flattened? nil :xmlAttribute? nil), "EnabledCloudwatchLogsExports" (portkey.aws/search-for-tag input "EnabledCloudwatchLogsExports" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "AllocatedStorage" (portkey.aws/search-for-tag input "AllocatedStorage" :flattened? nil :xmlAttribute? nil), "MasterUsername" (portkey.aws/search-for-tag input "MasterUsername" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "HostedZoneId" (portkey.aws/search-for-tag input "HostedZoneId" :flattened? nil :xmlAttribute? nil), "StorageEncrypted" (portkey.aws/search-for-tag input "StorageEncrypted" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "DbClusterResourceId" (portkey.aws/search-for-tag input "DbClusterResourceId" :flattened? nil :xmlAttribute? nil), "DBClusterMembers" (portkey.aws/search-for-tag input "DBClusterMembers" :flattened? nil :xmlAttribute? nil), "KmsKeyId" (portkey.aws/search-for-tag input "KmsKeyId" :flattened? nil :xmlAttribute? nil), "ClusterCreateTime" (portkey.aws/search-for-tag input "ClusterCreateTime" :flattened? nil :xmlAttribute? nil), "Capacity" (portkey.aws/search-for-tag input "Capacity" :flattened? nil :xmlAttribute? nil), "BacktrackWindow" (portkey.aws/search-for-tag input "BacktrackWindow" :flattened? nil :xmlAttribute? nil), "ReadReplicaIdentifiers" (portkey.aws/search-for-tag input "ReadReplicaIdentifiers" :flattened? nil :xmlAttribute? nil), "DBClusterParameterGroup" (portkey.aws/search-for-tag input "DBClusterParameterGroup" :flattened? nil :xmlAttribute? nil), "Endpoint" (portkey.aws/search-for-tag input "Endpoint" :flattened? nil :xmlAttribute? nil), "IAMDatabaseAuthenticationEnabled" (portkey.aws/search-for-tag input "IAMDatabaseAuthenticationEnabled" :flattened? nil :xmlAttribute? nil), "DBClusterArn" (portkey.aws/search-for-tag input "DBClusterArn" :flattened? nil :xmlAttribute? nil), "VpcSecurityGroups" (portkey.aws/search-for-tag input "VpcSecurityGroups" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "EarliestBacktrackTime" (portkey.aws/search-for-tag input "EarliestBacktrackTime" :flattened? nil :xmlAttribute? nil), "DBClusterOptionGroupMemberships" (portkey.aws/search-for-tag input "DBClusterOptionGroupMemberships" :flattened? nil :xmlAttribute? nil), "AvailabilityZones" (portkey.aws/search-for-tag input "AvailabilityZones" :flattened? nil :xmlAttribute? nil), "ReaderEndpoint" (portkey.aws/search-for-tag input "ReaderEndpoint" :flattened? nil :xmlAttribute? nil), "AssociatedRoles" (portkey.aws/search-for-tag input "AssociatedRoles" :flattened? nil :xmlAttribute? nil), "BacktrackConsumedChangeRecords" (portkey.aws/search-for-tag input "BacktrackConsumedChangeRecords" :flattened? nil :xmlAttribute? nil), "MultiAZ" (portkey.aws/search-for-tag input "MultiAZ" :flattened? nil :xmlAttribute? nil), "DBClusterIdentifier" (portkey.aws/search-for-tag input "DBClusterIdentifier" :flattened? nil :xmlAttribute? nil), "PreferredBackupWindow" (portkey.aws/search-for-tag input "PreferredBackupWindow" :flattened? nil :xmlAttribute? nil), "PercentProgress" (portkey.aws/search-for-tag input "PercentProgress" :flattened? nil :xmlAttribute? nil), "HttpEndpointEnabled" (portkey.aws/search-for-tag input "HttpEndpointEnabled" :flattened? nil :xmlAttribute? nil), "LatestRestorableTime" (portkey.aws/search-for-tag input "LatestRestorableTime" :flattened? nil :xmlAttribute? nil), "DBSubnetGroup" (portkey.aws/search-for-tag input "DBSubnetGroup" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1478354 "DeletionProtection") (clojure.core/assoc :deletion-protection (deser-boolean (clojure.core/get-in letvar1478354 ["DeletionProtection" :content]))) (letvar1478354 "BackupRetentionPeriod") (clojure.core/assoc :backup-retention-period (deser-integer-optional (clojure.core/get-in letvar1478354 ["BackupRetentionPeriod" :content]))) (letvar1478354 "ReplicationSourceIdentifier") (clojure.core/assoc :replication-source-identifier (deser-string (clojure.core/get-in letvar1478354 ["ReplicationSourceIdentifier" :content]))) (letvar1478354 "EarliestRestorableTime") (clojure.core/assoc :earliest-restorable-time (deser-t-stamp (clojure.core/get-in letvar1478354 ["EarliestRestorableTime" :content]))) (letvar1478354 "CharacterSetName") (clojure.core/assoc :character-set-name (deser-string (clojure.core/get-in letvar1478354 ["CharacterSetName" :content]))) (letvar1478354 "ScalingConfigurationInfo") (clojure.core/assoc :scaling-configuration-info (deser-scaling-configuration-info (clojure.core/get-in letvar1478354 ["ScalingConfigurationInfo" :content]))) (letvar1478354 "DatabaseName") (clojure.core/assoc :database-name (deser-string (clojure.core/get-in letvar1478354 ["DatabaseName" :content]))) (letvar1478354 "CustomEndpoints") (clojure.core/assoc :custom-endpoints (deser-string-list (clojure.core/get-in letvar1478354 ["CustomEndpoints" :content]))) (letvar1478354 "PreferredMaintenanceWindow") (clojure.core/assoc :preferred-maintenance-window (deser-string (clojure.core/get-in letvar1478354 ["PreferredMaintenanceWindow" :content]))) (letvar1478354 "EngineMode") (clojure.core/assoc :engine-mode (deser-string (clojure.core/get-in letvar1478354 ["EngineMode" :content]))) (letvar1478354 "CloneGroupId") (clojure.core/assoc :clone-group-id (deser-string (clojure.core/get-in letvar1478354 ["CloneGroupId" :content]))) (letvar1478354 "EnabledCloudwatchLogsExports") (clojure.core/assoc :enabled-cloudwatch-logs-exports (deser-log-type-list (clojure.core/get-in letvar1478354 ["EnabledCloudwatchLogsExports" :content]))) (letvar1478354 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar1478354 ["Status" :content]))) (letvar1478354 "AllocatedStorage") (clojure.core/assoc :allocated-storage (deser-integer-optional (clojure.core/get-in letvar1478354 ["AllocatedStorage" :content]))) (letvar1478354 "MasterUsername") (clojure.core/assoc :master-username (deser-string (clojure.core/get-in letvar1478354 ["MasterUsername" :content]))) (letvar1478354 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar1478354 ["EngineVersion" :content]))) (letvar1478354 "HostedZoneId") (clojure.core/assoc :hosted-zone-id (deser-string (clojure.core/get-in letvar1478354 ["HostedZoneId" :content]))) (letvar1478354 "StorageEncrypted") (clojure.core/assoc :storage-encrypted (deser-boolean (clojure.core/get-in letvar1478354 ["StorageEncrypted" :content]))) (letvar1478354 "Port") (clojure.core/assoc :port (deser-integer-optional (clojure.core/get-in letvar1478354 ["Port" :content]))) (letvar1478354 "DbClusterResourceId") (clojure.core/assoc :db-cluster-resource-id (deser-string (clojure.core/get-in letvar1478354 ["DbClusterResourceId" :content]))) (letvar1478354 "DBClusterMembers") (clojure.core/assoc :db-cluster-members (deser-db-cluster-member-list (clojure.core/get-in letvar1478354 ["DBClusterMembers" :content]))) (letvar1478354 "KmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar1478354 ["KmsKeyId" :content]))) (letvar1478354 "ClusterCreateTime") (clojure.core/assoc :cluster-create-time (deser-t-stamp (clojure.core/get-in letvar1478354 ["ClusterCreateTime" :content]))) (letvar1478354 "Capacity") (clojure.core/assoc :capacity (deser-integer-optional (clojure.core/get-in letvar1478354 ["Capacity" :content]))) (letvar1478354 "BacktrackWindow") (clojure.core/assoc :backtrack-window (deser-long-optional (clojure.core/get-in letvar1478354 ["BacktrackWindow" :content]))) (letvar1478354 "ReadReplicaIdentifiers") (clojure.core/assoc :read-replica-identifiers (deser-read-replica-identifier-list (clojure.core/get-in letvar1478354 ["ReadReplicaIdentifiers" :content]))) (letvar1478354 "DBClusterParameterGroup") (clojure.core/assoc :db-cluster-parameter-group (deser-string (clojure.core/get-in letvar1478354 ["DBClusterParameterGroup" :content]))) (letvar1478354 "Endpoint") (clojure.core/assoc :endpoint (deser-string (clojure.core/get-in letvar1478354 ["Endpoint" :content]))) (letvar1478354 "IAMDatabaseAuthenticationEnabled") (clojure.core/assoc :iam-database-authentication-enabled (deser-boolean (clojure.core/get-in letvar1478354 ["IAMDatabaseAuthenticationEnabled" :content]))) (letvar1478354 "DBClusterArn") (clojure.core/assoc :db-cluster-arn (deser-string (clojure.core/get-in letvar1478354 ["DBClusterArn" :content]))) (letvar1478354 "VpcSecurityGroups") (clojure.core/assoc :vpc-security-groups (deser-vpc-security-group-membership-list (clojure.core/get-in letvar1478354 ["VpcSecurityGroups" :content]))) (letvar1478354 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar1478354 ["Engine" :content]))) (letvar1478354 "EarliestBacktrackTime") (clojure.core/assoc :earliest-backtrack-time (deser-t-stamp (clojure.core/get-in letvar1478354 ["EarliestBacktrackTime" :content]))) (letvar1478354 "DBClusterOptionGroupMemberships") (clojure.core/assoc :db-cluster-option-group-memberships (deser-db-cluster-option-group-memberships (clojure.core/get-in letvar1478354 ["DBClusterOptionGroupMemberships" :content]))) (letvar1478354 "AvailabilityZones") (clojure.core/assoc :availability-zones (deser-availability-zones (clojure.core/get-in letvar1478354 ["AvailabilityZones" :content]))) (letvar1478354 "ReaderEndpoint") (clojure.core/assoc :reader-endpoint (deser-string (clojure.core/get-in letvar1478354 ["ReaderEndpoint" :content]))) (letvar1478354 "AssociatedRoles") (clojure.core/assoc :associated-roles (deser-db-cluster-roles (clojure.core/get-in letvar1478354 ["AssociatedRoles" :content]))) (letvar1478354 "BacktrackConsumedChangeRecords") (clojure.core/assoc :backtrack-consumed-change-records (deser-long-optional (clojure.core/get-in letvar1478354 ["BacktrackConsumedChangeRecords" :content]))) (letvar1478354 "MultiAZ") (clojure.core/assoc :multi-az (deser-boolean (clojure.core/get-in letvar1478354 ["MultiAZ" :content]))) (letvar1478354 "DBClusterIdentifier") (clojure.core/assoc :db-cluster-identifier (deser-string (clojure.core/get-in letvar1478354 ["DBClusterIdentifier" :content]))) (letvar1478354 "PreferredBackupWindow") (clojure.core/assoc :preferred-backup-window (deser-string (clojure.core/get-in letvar1478354 ["PreferredBackupWindow" :content]))) (letvar1478354 "PercentProgress") (clojure.core/assoc :percent-progress (deser-string (clojure.core/get-in letvar1478354 ["PercentProgress" :content]))) (letvar1478354 "HttpEndpointEnabled") (clojure.core/assoc :http-endpoint-enabled (deser-boolean (clojure.core/get-in letvar1478354 ["HttpEndpointEnabled" :content]))) (letvar1478354 "LatestRestorableTime") (clojure.core/assoc :latest-restorable-time (deser-t-stamp (clojure.core/get-in letvar1478354 ["LatestRestorableTime" :content]))) (letvar1478354 "DBSubnetGroup") (clojure.core/assoc :db-subnet-group (deser-string (clojure.core/get-in letvar1478354 ["DBSubnetGroup" :content]))))))

(clojure.core/defn- deser-option-group [input] (clojure.core/let [letvar1478462 {"OptionGroupName" (portkey.aws/search-for-tag input "OptionGroupName" :flattened? nil :xmlAttribute? nil), "OptionGroupDescription" (portkey.aws/search-for-tag input "OptionGroupDescription" :flattened? nil :xmlAttribute? nil), "EngineName" (portkey.aws/search-for-tag input "EngineName" :flattened? nil :xmlAttribute? nil), "MajorEngineVersion" (portkey.aws/search-for-tag input "MajorEngineVersion" :flattened? nil :xmlAttribute? nil), "Options" (portkey.aws/search-for-tag input "Options" :flattened? nil :xmlAttribute? nil), "AllowsVpcAndNonVpcInstanceMemberships" (portkey.aws/search-for-tag input "AllowsVpcAndNonVpcInstanceMemberships" :flattened? nil :xmlAttribute? nil), "VpcId" (portkey.aws/search-for-tag input "VpcId" :flattened? nil :xmlAttribute? nil), "OptionGroupArn" (portkey.aws/search-for-tag input "OptionGroupArn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1478462 "OptionGroupName") (clojure.core/assoc :option-group-name (deser-string (clojure.core/get-in letvar1478462 ["OptionGroupName" :content]))) (letvar1478462 "OptionGroupDescription") (clojure.core/assoc :option-group-description (deser-string (clojure.core/get-in letvar1478462 ["OptionGroupDescription" :content]))) (letvar1478462 "EngineName") (clojure.core/assoc :engine-name (deser-string (clojure.core/get-in letvar1478462 ["EngineName" :content]))) (letvar1478462 "MajorEngineVersion") (clojure.core/assoc :major-engine-version (deser-string (clojure.core/get-in letvar1478462 ["MajorEngineVersion" :content]))) (letvar1478462 "Options") (clojure.core/assoc :options (deser-options-list (clojure.core/get-in letvar1478462 ["Options" :content]))) (letvar1478462 "AllowsVpcAndNonVpcInstanceMemberships") (clojure.core/assoc :allows-vpc-and-non-vpc-instance-memberships (deser-boolean (clojure.core/get-in letvar1478462 ["AllowsVpcAndNonVpcInstanceMemberships" :content]))) (letvar1478462 "VpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar1478462 ["VpcId" :content]))) (letvar1478462 "OptionGroupArn") (clojure.core/assoc :option-group-arn (deser-string (clojure.core/get-in letvar1478462 ["OptionGroupArn" :content]))))))

(clojure.core/defn- deser-option-groups-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-option-group coll))) input))

(clojure.core/defn- deser-ip-range-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-ip-range coll))) input))

(clojure.core/defn- deser-db-instance-status-info [input] (clojure.core/let [letvar1478604 {"StatusType" (portkey.aws/search-for-tag input "StatusType" :flattened? nil :xmlAttribute? nil), "Normal" (portkey.aws/search-for-tag input "Normal" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "Message" (portkey.aws/search-for-tag input "Message" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1478604 "StatusType") (clojure.core/assoc :status-type (deser-string (clojure.core/get-in letvar1478604 ["StatusType" :content]))) (letvar1478604 "Normal") (clojure.core/assoc :normal (deser-boolean (clojure.core/get-in letvar1478604 ["Normal" :content]))) (letvar1478604 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar1478604 ["Status" :content]))) (letvar1478604 "Message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar1478604 ["Message" :content]))))))

(clojure.core/defn- deser-event-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-event coll))) input))

(clojure.core/defn- deser-source-type [input] (clojure.core/get {"db-instance" :dbinstance, "db-parameter-group" :dbparametergroup, "db-security-group" :dbsecuritygroup, "db-snapshot" :dbsnapshot, "db-cluster" :dbcluster, "db-cluster-snapshot" :dbclustersnapshot} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-orderable-db-instance-options-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-orderable-db-instance-option coll))) input))

(clojure.core/defn- deser-event [input] (clojure.core/let [letvar1478751 {"SourceIdentifier" (portkey.aws/search-for-tag input "SourceIdentifier" :flattened? nil :xmlAttribute? nil), "SourceType" (portkey.aws/search-for-tag input "SourceType" :flattened? nil :xmlAttribute? nil), "Message" (portkey.aws/search-for-tag input "Message" :flattened? nil :xmlAttribute? nil), "EventCategories" (portkey.aws/search-for-tag input "EventCategories" :flattened? nil :xmlAttribute? nil), "Date" (portkey.aws/search-for-tag input "Date" :flattened? nil :xmlAttribute? nil), "SourceArn" (portkey.aws/search-for-tag input "SourceArn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1478751 "SourceIdentifier") (clojure.core/assoc :source-identifier (deser-string (clojure.core/get-in letvar1478751 ["SourceIdentifier" :content]))) (letvar1478751 "SourceType") (clojure.core/assoc :source-type (deser-source-type (clojure.core/get-in letvar1478751 ["SourceType" :content]))) (letvar1478751 "Message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar1478751 ["Message" :content]))) (letvar1478751 "EventCategories") (clojure.core/assoc :event-categories (deser-event-categories-list (clojure.core/get-in letvar1478751 ["EventCategories" :content]))) (letvar1478751 "Date") (clojure.core/assoc :date (deser-t-stamp (clojure.core/get-in letvar1478751 ["Date" :content]))) (letvar1478751 "SourceArn") (clojure.core/assoc :source-arn (deser-string (clojure.core/get-in letvar1478751 ["SourceArn" :content]))))))

(clojure.core/defn- deser-feature-name-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-availability-zone-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-availability-zone coll))) input))

(clojure.core/defn- deser-availability-zone [input] (clojure.core/let [letvar1478893 {"Name" (portkey.aws/search-for-tag input "Name" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1478893 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar1478893 ["Name" :content]))))))

(clojure.core/defn- deser-db-cluster-parameter-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-parameter-group coll))) input))

(clojure.core/defn- deser-db-instance-automated-backup [input] (clojure.core/let [letvar1479018 {"OptionGroupName" (portkey.aws/search-for-tag input "OptionGroupName" :flattened? nil :xmlAttribute? nil), "Encrypted" (portkey.aws/search-for-tag input "Encrypted" :flattened? nil :xmlAttribute? nil), "DBInstanceIdentifier" (portkey.aws/search-for-tag input "DBInstanceIdentifier" :flattened? nil :xmlAttribute? nil), "DBInstanceArn" (portkey.aws/search-for-tag input "DBInstanceArn" :flattened? nil :xmlAttribute? nil), "InstanceCreateTime" (portkey.aws/search-for-tag input "InstanceCreateTime" :flattened? nil :xmlAttribute? nil), "AvailabilityZone" (portkey.aws/search-for-tag input "AvailabilityZone" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "LicenseModel" (portkey.aws/search-for-tag input "LicenseModel" :flattened? nil :xmlAttribute? nil), "AllocatedStorage" (portkey.aws/search-for-tag input "AllocatedStorage" :flattened? nil :xmlAttribute? nil), "Timezone" (portkey.aws/search-for-tag input "Timezone" :flattened? nil :xmlAttribute? nil), "MasterUsername" (portkey.aws/search-for-tag input "MasterUsername" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "RestoreWindow" (portkey.aws/search-for-tag input "RestoreWindow" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "VpcId" (portkey.aws/search-for-tag input "VpcId" :flattened? nil :xmlAttribute? nil), "KmsKeyId" (portkey.aws/search-for-tag input "KmsKeyId" :flattened? nil :xmlAttribute? nil), "DbiResourceId" (portkey.aws/search-for-tag input "DbiResourceId" :flattened? nil :xmlAttribute? nil), "Iops" (portkey.aws/search-for-tag input "Iops" :flattened? nil :xmlAttribute? nil), "StorageType" (portkey.aws/search-for-tag input "StorageType" :flattened? nil :xmlAttribute? nil), "IAMDatabaseAuthenticationEnabled" (portkey.aws/search-for-tag input "IAMDatabaseAuthenticationEnabled" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "TdeCredentialArn" (portkey.aws/search-for-tag input "TdeCredentialArn" :flattened? nil :xmlAttribute? nil), "Region" (portkey.aws/search-for-tag input "Region" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1479018 "OptionGroupName") (clojure.core/assoc :option-group-name (deser-string (clojure.core/get-in letvar1479018 ["OptionGroupName" :content]))) (letvar1479018 "Encrypted") (clojure.core/assoc :encrypted (deser-boolean (clojure.core/get-in letvar1479018 ["Encrypted" :content]))) (letvar1479018 "DBInstanceIdentifier") (clojure.core/assoc :db-instance-identifier (deser-string (clojure.core/get-in letvar1479018 ["DBInstanceIdentifier" :content]))) (letvar1479018 "DBInstanceArn") (clojure.core/assoc :db-instance-arn (deser-string (clojure.core/get-in letvar1479018 ["DBInstanceArn" :content]))) (letvar1479018 "InstanceCreateTime") (clojure.core/assoc :instance-create-time (deser-t-stamp (clojure.core/get-in letvar1479018 ["InstanceCreateTime" :content]))) (letvar1479018 "AvailabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar1479018 ["AvailabilityZone" :content]))) (letvar1479018 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar1479018 ["Status" :content]))) (letvar1479018 "LicenseModel") (clojure.core/assoc :license-model (deser-string (clojure.core/get-in letvar1479018 ["LicenseModel" :content]))) (letvar1479018 "AllocatedStorage") (clojure.core/assoc :allocated-storage (deser-integer (clojure.core/get-in letvar1479018 ["AllocatedStorage" :content]))) (letvar1479018 "Timezone") (clojure.core/assoc :timezone (deser-string (clojure.core/get-in letvar1479018 ["Timezone" :content]))) (letvar1479018 "MasterUsername") (clojure.core/assoc :master-username (deser-string (clojure.core/get-in letvar1479018 ["MasterUsername" :content]))) (letvar1479018 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar1479018 ["EngineVersion" :content]))) (letvar1479018 "RestoreWindow") (clojure.core/assoc :restore-window (deser-restore-window (clojure.core/get-in letvar1479018 ["RestoreWindow" :content]))) (letvar1479018 "Port") (clojure.core/assoc :port (deser-integer (clojure.core/get-in letvar1479018 ["Port" :content]))) (letvar1479018 "VpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar1479018 ["VpcId" :content]))) (letvar1479018 "KmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar1479018 ["KmsKeyId" :content]))) (letvar1479018 "DbiResourceId") (clojure.core/assoc :dbi-resource-id (deser-string (clojure.core/get-in letvar1479018 ["DbiResourceId" :content]))) (letvar1479018 "Iops") (clojure.core/assoc :iops (deser-integer-optional (clojure.core/get-in letvar1479018 ["Iops" :content]))) (letvar1479018 "StorageType") (clojure.core/assoc :storage-type (deser-string (clojure.core/get-in letvar1479018 ["StorageType" :content]))) (letvar1479018 "IAMDatabaseAuthenticationEnabled") (clojure.core/assoc :iam-database-authentication-enabled (deser-boolean (clojure.core/get-in letvar1479018 ["IAMDatabaseAuthenticationEnabled" :content]))) (letvar1479018 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar1479018 ["Engine" :content]))) (letvar1479018 "TdeCredentialArn") (clojure.core/assoc :tde-credential-arn (deser-string (clojure.core/get-in letvar1479018 ["TdeCredentialArn" :content]))) (letvar1479018 "Region") (clojure.core/assoc :region (deser-string (clojure.core/get-in letvar1479018 ["Region" :content]))))))

(clojure.core/defn- deser-db-instance-automated-backup-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-instance-automated-backup coll))) input))

(clojure.core/defn- deser-db-cluster-member-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-member coll))) input))

(clojure.core/defn- deser-read-replica-db-instance-identifier-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-recurring-charge [input] (clojure.core/let [letvar1479177 {"RecurringChargeAmount" (portkey.aws/search-for-tag input "RecurringChargeAmount" :flattened? nil :xmlAttribute? nil), "RecurringChargeFrequency" (portkey.aws/search-for-tag input "RecurringChargeFrequency" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1479177 "RecurringChargeAmount") (clojure.core/assoc :recurring-charge-amount (deser-double (clojure.core/get-in letvar1479177 ["RecurringChargeAmount" :content]))) (letvar1479177 "RecurringChargeFrequency") (clojure.core/assoc :recurring-charge-frequency (deser-string (clojure.core/get-in letvar1479177 ["RecurringChargeFrequency" :content]))))))

(clojure.core/defn- deser-valid-upgrade-target-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-upgrade-target coll))) input))

(clojure.core/defn- deser-range [input] (clojure.core/let [letvar1479302 {"From" (portkey.aws/search-for-tag input "From" :flattened? nil :xmlAttribute? nil), "To" (portkey.aws/search-for-tag input "To" :flattened? nil :xmlAttribute? nil), "Step" (portkey.aws/search-for-tag input "Step" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1479302 "From") (clojure.core/assoc :from (deser-integer (clojure.core/get-in letvar1479302 ["From" :content]))) (letvar1479302 "To") (clojure.core/assoc :to (deser-integer (clojure.core/get-in letvar1479302 ["To" :content]))) (letvar1479302 "Step") (clojure.core/assoc :step (deser-integer-optional (clojure.core/get-in letvar1479302 ["Step" :content]))))))

(clojure.core/defn- deser-db-cluster-roles [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-role coll))) input))

(clojure.core/defn- deser-option-group-option [input] (clojure.core/let [letvar1479427 {"MajorEngineVersion" (portkey.aws/search-for-tag input "MajorEngineVersion" :flattened? nil :xmlAttribute? nil), "EngineName" (portkey.aws/search-for-tag input "EngineName" :flattened? nil :xmlAttribute? nil), "RequiresAutoMinorEngineVersionUpgrade" (portkey.aws/search-for-tag input "RequiresAutoMinorEngineVersionUpgrade" :flattened? nil :xmlAttribute? nil), "OptionGroupOptionVersions" (portkey.aws/search-for-tag input "OptionGroupOptionVersions" :flattened? nil :xmlAttribute? nil), "Permanent" (portkey.aws/search-for-tag input "Permanent" :flattened? nil :xmlAttribute? nil), "VpcOnly" (portkey.aws/search-for-tag input "VpcOnly" :flattened? nil :xmlAttribute? nil), "PortRequired" (portkey.aws/search-for-tag input "PortRequired" :flattened? nil :xmlAttribute? nil), "OptionsConflictsWith" (portkey.aws/search-for-tag input "OptionsConflictsWith" :flattened? nil :xmlAttribute? nil), "OptionGroupOptionSettings" (portkey.aws/search-for-tag input "OptionGroupOptionSettings" :flattened? nil :xmlAttribute? nil), "Persistent" (portkey.aws/search-for-tag input "Persistent" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "MinimumRequiredMinorEngineVersion" (portkey.aws/search-for-tag input "MinimumRequiredMinorEngineVersion" :flattened? nil :xmlAttribute? nil), "DefaultPort" (portkey.aws/search-for-tag input "DefaultPort" :flattened? nil :xmlAttribute? nil), "SupportsOptionVersionDowngrade" (portkey.aws/search-for-tag input "SupportsOptionVersionDowngrade" :flattened? nil :xmlAttribute? nil), "OptionsDependedOn" (portkey.aws/search-for-tag input "OptionsDependedOn" :flattened? nil :xmlAttribute? nil), "Name" (portkey.aws/search-for-tag input "Name" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1479427 "MajorEngineVersion") (clojure.core/assoc :major-engine-version (deser-string (clojure.core/get-in letvar1479427 ["MajorEngineVersion" :content]))) (letvar1479427 "EngineName") (clojure.core/assoc :engine-name (deser-string (clojure.core/get-in letvar1479427 ["EngineName" :content]))) (letvar1479427 "RequiresAutoMinorEngineVersionUpgrade") (clojure.core/assoc :requires-auto-minor-engine-version-upgrade (deser-boolean (clojure.core/get-in letvar1479427 ["RequiresAutoMinorEngineVersionUpgrade" :content]))) (letvar1479427 "OptionGroupOptionVersions") (clojure.core/assoc :option-group-option-versions (deser-option-group-option-versions-list (clojure.core/get-in letvar1479427 ["OptionGroupOptionVersions" :content]))) (letvar1479427 "Permanent") (clojure.core/assoc :permanent (deser-boolean (clojure.core/get-in letvar1479427 ["Permanent" :content]))) (letvar1479427 "VpcOnly") (clojure.core/assoc :vpc-only (deser-boolean (clojure.core/get-in letvar1479427 ["VpcOnly" :content]))) (letvar1479427 "PortRequired") (clojure.core/assoc :port-required (deser-boolean (clojure.core/get-in letvar1479427 ["PortRequired" :content]))) (letvar1479427 "OptionsConflictsWith") (clojure.core/assoc :options-conflicts-with (deser-options-conflicts-with (clojure.core/get-in letvar1479427 ["OptionsConflictsWith" :content]))) (letvar1479427 "OptionGroupOptionSettings") (clojure.core/assoc :option-group-option-settings (deser-option-group-option-settings-list (clojure.core/get-in letvar1479427 ["OptionGroupOptionSettings" :content]))) (letvar1479427 "Persistent") (clojure.core/assoc :persistent (deser-boolean (clojure.core/get-in letvar1479427 ["Persistent" :content]))) (letvar1479427 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar1479427 ["Description" :content]))) (letvar1479427 "MinimumRequiredMinorEngineVersion") (clojure.core/assoc :minimum-required-minor-engine-version (deser-string (clojure.core/get-in letvar1479427 ["MinimumRequiredMinorEngineVersion" :content]))) (letvar1479427 "DefaultPort") (clojure.core/assoc :default-port (deser-integer-optional (clojure.core/get-in letvar1479427 ["DefaultPort" :content]))) (letvar1479427 "SupportsOptionVersionDowngrade") (clojure.core/assoc :supports-option-version-downgrade (deser-boolean-optional (clojure.core/get-in letvar1479427 ["SupportsOptionVersionDowngrade" :content]))) (letvar1479427 "OptionsDependedOn") (clojure.core/assoc :options-depended-on (deser-options-depended-on (clojure.core/get-in letvar1479427 ["OptionsDependedOn" :content]))) (letvar1479427 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar1479427 ["Name" :content]))))))

(clojure.core/defn- deser-tag-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-tag coll))) input))

(clojure.core/defn- deser-timezone [input] (clojure.core/let [letvar1479552 {"TimezoneName" (portkey.aws/search-for-tag input "TimezoneName" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1479552 "TimezoneName") (clojure.core/assoc :timezone-name (deser-string (clojure.core/get-in letvar1479552 ["TimezoneName" :content]))))))

(clojure.core/defn- deser-db-cluster-snapshot-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-snapshot coll))) input))

(clojure.core/defn- deser-db-engine-version [input] (clojure.core/let [letvar1479677 {"SupportedEngineModes" (portkey.aws/search-for-tag input "SupportedEngineModes" :flattened? nil :xmlAttribute? nil), "DefaultCharacterSet" (portkey.aws/search-for-tag input "DefaultCharacterSet" :flattened? nil :xmlAttribute? nil), "DBEngineDescription" (portkey.aws/search-for-tag input "DBEngineDescription" :flattened? nil :xmlAttribute? nil), "SupportedTimezones" (portkey.aws/search-for-tag input "SupportedTimezones" :flattened? nil :xmlAttribute? nil), "SupportsReadReplica" (portkey.aws/search-for-tag input "SupportsReadReplica" :flattened? nil :xmlAttribute? nil), "DBEngineVersionDescription" (portkey.aws/search-for-tag input "DBEngineVersionDescription" :flattened? nil :xmlAttribute? nil), "ValidUpgradeTarget" (portkey.aws/search-for-tag input "ValidUpgradeTarget" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "SupportedCharacterSets" (portkey.aws/search-for-tag input "SupportedCharacterSets" :flattened? nil :xmlAttribute? nil), "SupportsLogExportsToCloudwatchLogs" (portkey.aws/search-for-tag input "SupportsLogExportsToCloudwatchLogs" :flattened? nil :xmlAttribute? nil), "SupportedFeatureNames" (portkey.aws/search-for-tag input "SupportedFeatureNames" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "ExportableLogTypes" (portkey.aws/search-for-tag input "ExportableLogTypes" :flattened? nil :xmlAttribute? nil), "DBParameterGroupFamily" (portkey.aws/search-for-tag input "DBParameterGroupFamily" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1479677 "SupportedEngineModes") (clojure.core/assoc :supported-engine-modes (deser-engine-mode-list (clojure.core/get-in letvar1479677 ["SupportedEngineModes" :content]))) (letvar1479677 "DefaultCharacterSet") (clojure.core/assoc :default-character-set (deser-character-set (clojure.core/get-in letvar1479677 ["DefaultCharacterSet" :content]))) (letvar1479677 "DBEngineDescription") (clojure.core/assoc :db-engine-description (deser-string (clojure.core/get-in letvar1479677 ["DBEngineDescription" :content]))) (letvar1479677 "SupportedTimezones") (clojure.core/assoc :supported-timezones (deser-supported-timezones-list (clojure.core/get-in letvar1479677 ["SupportedTimezones" :content]))) (letvar1479677 "SupportsReadReplica") (clojure.core/assoc :supports-read-replica (deser-boolean (clojure.core/get-in letvar1479677 ["SupportsReadReplica" :content]))) (letvar1479677 "DBEngineVersionDescription") (clojure.core/assoc :db-engine-version-description (deser-string (clojure.core/get-in letvar1479677 ["DBEngineVersionDescription" :content]))) (letvar1479677 "ValidUpgradeTarget") (clojure.core/assoc :valid-upgrade-target (deser-valid-upgrade-target-list (clojure.core/get-in letvar1479677 ["ValidUpgradeTarget" :content]))) (letvar1479677 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar1479677 ["EngineVersion" :content]))) (letvar1479677 "SupportedCharacterSets") (clojure.core/assoc :supported-character-sets (deser-supported-character-sets-list (clojure.core/get-in letvar1479677 ["SupportedCharacterSets" :content]))) (letvar1479677 "SupportsLogExportsToCloudwatchLogs") (clojure.core/assoc :supports-log-exports-to-cloudwatch-logs (deser-boolean (clojure.core/get-in letvar1479677 ["SupportsLogExportsToCloudwatchLogs" :content]))) (letvar1479677 "SupportedFeatureNames") (clojure.core/assoc :supported-feature-names (deser-feature-name-list (clojure.core/get-in letvar1479677 ["SupportedFeatureNames" :content]))) (letvar1479677 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar1479677 ["Engine" :content]))) (letvar1479677 "ExportableLogTypes") (clojure.core/assoc :exportable-log-types (deser-log-type-list (clojure.core/get-in letvar1479677 ["ExportableLogTypes" :content]))) (letvar1479677 "DBParameterGroupFamily") (clojure.core/assoc :db-parameter-group-family (deser-string (clojure.core/get-in letvar1479677 ["DBParameterGroupFamily" :content]))))))

(clojure.core/defn- deser-options-conflicts-with [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-option-setting-configuration-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-option-setting coll))) input))

(clojure.core/defn- deser-domain-membership-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-domain-membership coll))) input))

(clojure.core/defn- deser-valid-storage-options [input] (clojure.core/let [letvar1479836 {"StorageType" (portkey.aws/search-for-tag input "StorageType" :flattened? nil :xmlAttribute? nil), "StorageSize" (portkey.aws/search-for-tag input "StorageSize" :flattened? nil :xmlAttribute? nil), "ProvisionedIops" (portkey.aws/search-for-tag input "ProvisionedIops" :flattened? nil :xmlAttribute? nil), "IopsToStorageRatio" (portkey.aws/search-for-tag input "IopsToStorageRatio" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1479836 "StorageType") (clojure.core/assoc :storage-type (deser-string (clojure.core/get-in letvar1479836 ["StorageType" :content]))) (letvar1479836 "StorageSize") (clojure.core/assoc :storage-size (deser-range-list (clojure.core/get-in letvar1479836 ["StorageSize" :content]))) (letvar1479836 "ProvisionedIops") (clojure.core/assoc :provisioned-iops (deser-range-list (clojure.core/get-in letvar1479836 ["ProvisionedIops" :content]))) (letvar1479836 "IopsToStorageRatio") (clojure.core/assoc :iops-to-storage-ratio (deser-double-range-list (clojure.core/get-in letvar1479836 ["IopsToStorageRatio" :content]))))))

(clojure.core/defn- deser-restore-window [input] (clojure.core/let [letvar1479944 {"EarliestTime" (portkey.aws/search-for-tag input "EarliestTime" :flattened? nil :xmlAttribute? nil), "LatestTime" (portkey.aws/search-for-tag input "LatestTime" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1479944 "EarliestTime") (clojure.core/assoc :earliest-time (deser-t-stamp (clojure.core/get-in letvar1479944 ["EarliestTime" :content]))) (letvar1479944 "LatestTime") (clojure.core/assoc :latest-time (deser-t-stamp (clojure.core/get-in letvar1479944 ["LatestTime" :content]))))))

(clojure.core/defn- deser-vpc-security-group-membership [input] (clojure.core/let [letvar1480052 {"VpcSecurityGroupId" (portkey.aws/search-for-tag input "VpcSecurityGroupId" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1480052 "VpcSecurityGroupId") (clojure.core/assoc :vpc-security-group-id (deser-string (clojure.core/get-in letvar1480052 ["VpcSecurityGroupId" :content]))) (letvar1480052 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar1480052 ["Status" :content]))))))

(clojure.core/defn- deser-valid-db-instance-modifications-message [input] (clojure.core/let [letvar1480160 {"Storage" (portkey.aws/search-for-tag input "Storage" :flattened? nil :xmlAttribute? nil), "ValidProcessorFeatures" (portkey.aws/search-for-tag input "ValidProcessorFeatures" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1480160 "Storage") (clojure.core/assoc :storage (deser-valid-storage-options-list (clojure.core/get-in letvar1480160 ["Storage" :content]))) (letvar1480160 "ValidProcessorFeatures") (clojure.core/assoc :valid-processor-features (deser-available-processor-feature-list (clojure.core/get-in letvar1480160 ["ValidProcessorFeatures" :content]))))))

(clojure.core/defn- deser-global-cluster-member [input] (clojure.core/let [letvar1480268 {"DBClusterArn" (portkey.aws/search-for-tag input "DBClusterArn" :flattened? nil :xmlAttribute? nil), "Readers" (portkey.aws/search-for-tag input "Readers" :flattened? nil :xmlAttribute? nil), "IsWriter" (portkey.aws/search-for-tag input "IsWriter" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1480268 "DBClusterArn") (clojure.core/assoc :db-cluster-arn (deser-string (clojure.core/get-in letvar1480268 ["DBClusterArn" :content]))) (letvar1480268 "Readers") (clojure.core/assoc :readers (deser-readers-arn-list (clojure.core/get-in letvar1480268 ["Readers" :content]))) (letvar1480268 "IsWriter") (clojure.core/assoc :is-writer (deser-boolean (clojure.core/get-in letvar1480268 ["IsWriter" :content]))))))

(clojure.core/defn- deser-db-cluster-snapshot-attribute-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-snapshot-attribute coll))) input))

(clojure.core/defn- deser-account-quota-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-account-quota coll))) input))

(clojure.core/defn- deser-db-snapshot-attribute [input] (clojure.core/let [letvar1480410 {"AttributeName" (portkey.aws/search-for-tag input "AttributeName" :flattened? nil :xmlAttribute? nil), "AttributeValues" (portkey.aws/search-for-tag input "AttributeValues" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1480410 "AttributeName") (clojure.core/assoc :attribute-name (deser-string (clojure.core/get-in letvar1480410 ["AttributeName" :content]))) (letvar1480410 "AttributeValues") (clojure.core/assoc :attribute-values (deser-attribute-value-list (clojure.core/get-in letvar1480410 ["AttributeValues" :content]))))))

(clojure.core/defn- deser-reserved-db-instances-offering [input] (clojure.core/let [letvar1480518 {"CurrencyCode" (portkey.aws/search-for-tag input "CurrencyCode" :flattened? nil :xmlAttribute? nil), "ReservedDBInstancesOfferingId" (portkey.aws/search-for-tag input "ReservedDBInstancesOfferingId" :flattened? nil :xmlAttribute? nil), "FixedPrice" (portkey.aws/search-for-tag input "FixedPrice" :flattened? nil :xmlAttribute? nil), "Duration" (portkey.aws/search-for-tag input "Duration" :flattened? nil :xmlAttribute? nil), "UsagePrice" (portkey.aws/search-for-tag input "UsagePrice" :flattened? nil :xmlAttribute? nil), "ProductDescription" (portkey.aws/search-for-tag input "ProductDescription" :flattened? nil :xmlAttribute? nil), "DBInstanceClass" (portkey.aws/search-for-tag input "DBInstanceClass" :flattened? nil :xmlAttribute? nil), "RecurringCharges" (portkey.aws/search-for-tag input "RecurringCharges" :flattened? nil :xmlAttribute? nil), "OfferingType" (portkey.aws/search-for-tag input "OfferingType" :flattened? nil :xmlAttribute? nil), "MultiAZ" (portkey.aws/search-for-tag input "MultiAZ" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1480518 "CurrencyCode") (clojure.core/assoc :currency-code (deser-string (clojure.core/get-in letvar1480518 ["CurrencyCode" :content]))) (letvar1480518 "ReservedDBInstancesOfferingId") (clojure.core/assoc :reserved-db-instances-offering-id (deser-string (clojure.core/get-in letvar1480518 ["ReservedDBInstancesOfferingId" :content]))) (letvar1480518 "FixedPrice") (clojure.core/assoc :fixed-price (deser-double (clojure.core/get-in letvar1480518 ["FixedPrice" :content]))) (letvar1480518 "Duration") (clojure.core/assoc :duration (deser-integer (clojure.core/get-in letvar1480518 ["Duration" :content]))) (letvar1480518 "UsagePrice") (clojure.core/assoc :usage-price (deser-double (clojure.core/get-in letvar1480518 ["UsagePrice" :content]))) (letvar1480518 "ProductDescription") (clojure.core/assoc :product-description (deser-string (clojure.core/get-in letvar1480518 ["ProductDescription" :content]))) (letvar1480518 "DBInstanceClass") (clojure.core/assoc :db-instance-class (deser-string (clojure.core/get-in letvar1480518 ["DBInstanceClass" :content]))) (letvar1480518 "RecurringCharges") (clojure.core/assoc :recurring-charges (deser-recurring-charge-list (clojure.core/get-in letvar1480518 ["RecurringCharges" :content]))) (letvar1480518 "OfferingType") (clojure.core/assoc :offering-type (deser-string (clojure.core/get-in letvar1480518 ["OfferingType" :content]))) (letvar1480518 "MultiAZ") (clojure.core/assoc :multi-az (deser-boolean (clojure.core/get-in letvar1480518 ["MultiAZ" :content]))))))

(clojure.core/defn- deser-readers-arn-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-ec-2-security-group [input] (clojure.core/let [letvar1480643 {"Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "EC2SecurityGroupName" (portkey.aws/search-for-tag input "EC2SecurityGroupName" :flattened? nil :xmlAttribute? nil), "EC2SecurityGroupId" (portkey.aws/search-for-tag input "EC2SecurityGroupId" :flattened? nil :xmlAttribute? nil), "EC2SecurityGroupOwnerId" (portkey.aws/search-for-tag input "EC2SecurityGroupOwnerId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1480643 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar1480643 ["Status" :content]))) (letvar1480643 "EC2SecurityGroupName") (clojure.core/assoc :ec-2-security-group-name (deser-string (clojure.core/get-in letvar1480643 ["EC2SecurityGroupName" :content]))) (letvar1480643 "EC2SecurityGroupId") (clojure.core/assoc :ec-2-security-group-id (deser-string (clojure.core/get-in letvar1480643 ["EC2SecurityGroupId" :content]))) (letvar1480643 "EC2SecurityGroupOwnerId") (clojure.core/assoc :ec-2-security-group-owner-id (deser-string (clojure.core/get-in letvar1480643 ["EC2SecurityGroupOwnerId" :content]))))))

(clojure.core/defn- deser-option-group-membership-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-option-group-membership coll))) input))

(clojure.core/defn- deser-db-instance-roles [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-instance-role coll))) input))

(clojure.core/defn- deser-event-categories-map-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-event-categories-map coll))) input))

(clojure.core/defn- deser-db-cluster-endpoint-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-endpoint coll))) input))

(clojure.core/defn- deser-integer [input] (java.lang.Integer. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-string [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-db-cluster-snapshot-attribute [input] (clojure.core/let [letvar1480826 {"AttributeName" (portkey.aws/search-for-tag input "AttributeName" :flattened? nil :xmlAttribute? nil), "AttributeValues" (portkey.aws/search-for-tag input "AttributeValues" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1480826 "AttributeName") (clojure.core/assoc :attribute-name (deser-string (clojure.core/get-in letvar1480826 ["AttributeName" :content]))) (letvar1480826 "AttributeValues") (clojure.core/assoc :attribute-values (deser-attribute-value-list (clojure.core/get-in letvar1480826 ["AttributeValues" :content]))))))

(clojure.core/defn- deser-parameter [input] (clojure.core/let [letvar1480934 {"DataType" (portkey.aws/search-for-tag input "DataType" :flattened? nil :xmlAttribute? nil), "SupportedEngineModes" (portkey.aws/search-for-tag input "SupportedEngineModes" :flattened? nil :xmlAttribute? nil), "ParameterName" (portkey.aws/search-for-tag input "ParameterName" :flattened? nil :xmlAttribute? nil), "Source" (portkey.aws/search-for-tag input "Source" :flattened? nil :xmlAttribute? nil), "MinimumEngineVersion" (portkey.aws/search-for-tag input "MinimumEngineVersion" :flattened? nil :xmlAttribute? nil), "AllowedValues" (portkey.aws/search-for-tag input "AllowedValues" :flattened? nil :xmlAttribute? nil), "ApplyType" (portkey.aws/search-for-tag input "ApplyType" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "ApplyMethod" (portkey.aws/search-for-tag input "ApplyMethod" :flattened? nil :xmlAttribute? nil), "IsModifiable" (portkey.aws/search-for-tag input "IsModifiable" :flattened? nil :xmlAttribute? nil), "ParameterValue" (portkey.aws/search-for-tag input "ParameterValue" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1480934 "DataType") (clojure.core/assoc :data-type (deser-string (clojure.core/get-in letvar1480934 ["DataType" :content]))) (letvar1480934 "SupportedEngineModes") (clojure.core/assoc :supported-engine-modes (deser-engine-mode-list (clojure.core/get-in letvar1480934 ["SupportedEngineModes" :content]))) (letvar1480934 "ParameterName") (clojure.core/assoc :parameter-name (deser-string (clojure.core/get-in letvar1480934 ["ParameterName" :content]))) (letvar1480934 "Source") (clojure.core/assoc :source (deser-string (clojure.core/get-in letvar1480934 ["Source" :content]))) (letvar1480934 "MinimumEngineVersion") (clojure.core/assoc :minimum-engine-version (deser-string (clojure.core/get-in letvar1480934 ["MinimumEngineVersion" :content]))) (letvar1480934 "AllowedValues") (clojure.core/assoc :allowed-values (deser-string (clojure.core/get-in letvar1480934 ["AllowedValues" :content]))) (letvar1480934 "ApplyType") (clojure.core/assoc :apply-type (deser-string (clojure.core/get-in letvar1480934 ["ApplyType" :content]))) (letvar1480934 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar1480934 ["Description" :content]))) (letvar1480934 "ApplyMethod") (clojure.core/assoc :apply-method (deser-apply-method (clojure.core/get-in letvar1480934 ["ApplyMethod" :content]))) (letvar1480934 "IsModifiable") (clojure.core/assoc :is-modifiable (deser-boolean (clojure.core/get-in letvar1480934 ["IsModifiable" :content]))) (letvar1480934 "ParameterValue") (clojure.core/assoc :parameter-value (deser-string (clojure.core/get-in letvar1480934 ["ParameterValue" :content]))))))

(clojure.core/defn- deser-describe-db-log-files-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-describe-db-log-files-details coll))) input))

(clojure.core/defn- deser-db-security-group-membership [input] (clojure.core/let [letvar1481059 {"DBSecurityGroupName" (portkey.aws/search-for-tag input "DBSecurityGroupName" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1481059 "DBSecurityGroupName") (clojure.core/assoc :db-security-group-name (deser-string (clojure.core/get-in letvar1481059 ["DBSecurityGroupName" :content]))) (letvar1481059 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar1481059 ["Status" :content]))))))

(clojure.core/defn- deser-read-replica-db-cluster-identifier-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-db-cluster-snapshot-attributes-result [input] (clojure.core/let [letvar1481184 {"DBClusterSnapshotIdentifier" (portkey.aws/search-for-tag input "DBClusterSnapshotIdentifier" :flattened? nil :xmlAttribute? nil), "DBClusterSnapshotAttributes" (portkey.aws/search-for-tag input "DBClusterSnapshotAttributes" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1481184 "DBClusterSnapshotIdentifier") (clojure.core/assoc :db-cluster-snapshot-identifier (deser-string (clojure.core/get-in letvar1481184 ["DBClusterSnapshotIdentifier" :content]))) (letvar1481184 "DBClusterSnapshotAttributes") (clojure.core/assoc :db-cluster-snapshot-attributes (deser-db-cluster-snapshot-attribute-list (clojure.core/get-in letvar1481184 ["DBClusterSnapshotAttributes" :content]))))))

(clojure.core/defn- deser-db-instance [input] (clojure.core/let [letvar1481292 {"DeletionProtection" (portkey.aws/search-for-tag input "DeletionProtection" :flattened? nil :xmlAttribute? nil), "BackupRetentionPeriod" (portkey.aws/search-for-tag input "BackupRetentionPeriod" :flattened? nil :xmlAttribute? nil), "DBSecurityGroups" (portkey.aws/search-for-tag input "DBSecurityGroups" :flattened? nil :xmlAttribute? nil), "SecondaryAvailabilityZone" (portkey.aws/search-for-tag input "SecondaryAvailabilityZone" :flattened? nil :xmlAttribute? nil), "PromotionTier" (portkey.aws/search-for-tag input "PromotionTier" :flattened? nil :xmlAttribute? nil), "CharacterSetName" (portkey.aws/search-for-tag input "CharacterSetName" :flattened? nil :xmlAttribute? nil), "PubliclyAccessible" (portkey.aws/search-for-tag input "PubliclyAccessible" :flattened? nil :xmlAttribute? nil), "ReadReplicaDBClusterIdentifiers" (portkey.aws/search-for-tag input "ReadReplicaDBClusterIdentifiers" :flattened? nil :xmlAttribute? nil), "ReadReplicaDBInstanceIdentifiers" (portkey.aws/search-for-tag input "ReadReplicaDBInstanceIdentifiers" :flattened? nil :xmlAttribute? nil), "DomainMemberships" (portkey.aws/search-for-tag input "DomainMemberships" :flattened? nil :xmlAttribute? nil), "PreferredMaintenanceWindow" (portkey.aws/search-for-tag input "PreferredMaintenanceWindow" :flattened? nil :xmlAttribute? nil), "CopyTagsToSnapshot" (portkey.aws/search-for-tag input "CopyTagsToSnapshot" :flattened? nil :xmlAttribute? nil), "DBInstanceIdentifier" (portkey.aws/search-for-tag input "DBInstanceIdentifier" :flattened? nil :xmlAttribute? nil), "EnabledCloudwatchLogsExports" (portkey.aws/search-for-tag input "EnabledCloudwatchLogsExports" :flattened? nil :xmlAttribute? nil), "AutoMinorVersionUpgrade" (portkey.aws/search-for-tag input "AutoMinorVersionUpgrade" :flattened? nil :xmlAttribute? nil), "DbInstancePort" (portkey.aws/search-for-tag input "DbInstancePort" :flattened? nil :xmlAttribute? nil), "DBName" (portkey.aws/search-for-tag input "DBName" :flattened? nil :xmlAttribute? nil), "DBInstanceArn" (portkey.aws/search-for-tag input "DBInstanceArn" :flattened? nil :xmlAttribute? nil), "InstanceCreateTime" (portkey.aws/search-for-tag input "InstanceCreateTime" :flattened? nil :xmlAttribute? nil), "AvailabilityZone" (portkey.aws/search-for-tag input "AvailabilityZone" :flattened? nil :xmlAttribute? nil), "ReadReplicaSourceDBInstanceIdentifier" (portkey.aws/search-for-tag input "ReadReplicaSourceDBInstanceIdentifier" :flattened? nil :xmlAttribute? nil), "LicenseModel" (portkey.aws/search-for-tag input "LicenseModel" :flattened? nil :xmlAttribute? nil), "ListenerEndpoint" (portkey.aws/search-for-tag input "ListenerEndpoint" :flattened? nil :xmlAttribute? nil), "AllocatedStorage" (portkey.aws/search-for-tag input "AllocatedStorage" :flattened? nil :xmlAttribute? nil), "MonitoringInterval" (portkey.aws/search-for-tag input "MonitoringInterval" :flattened? nil :xmlAttribute? nil), "Timezone" (portkey.aws/search-for-tag input "Timezone" :flattened? nil :xmlAttribute? nil), "MasterUsername" (portkey.aws/search-for-tag input "MasterUsername" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "PerformanceInsightsEnabled" (portkey.aws/search-for-tag input "PerformanceInsightsEnabled" :flattened? nil :xmlAttribute? nil), "StorageEncrypted" (portkey.aws/search-for-tag input "StorageEncrypted" :flattened? nil :xmlAttribute? nil), "KmsKeyId" (portkey.aws/search-for-tag input "KmsKeyId" :flattened? nil :xmlAttribute? nil), "DbiResourceId" (portkey.aws/search-for-tag input "DbiResourceId" :flattened? nil :xmlAttribute? nil), "Iops" (portkey.aws/search-for-tag input "Iops" :flattened? nil :xmlAttribute? nil), "StorageType" (portkey.aws/search-for-tag input "StorageType" :flattened? nil :xmlAttribute? nil), "ProcessorFeatures" (portkey.aws/search-for-tag input "ProcessorFeatures" :flattened? nil :xmlAttribute? nil), "CACertificateIdentifier" (portkey.aws/search-for-tag input "CACertificateIdentifier" :flattened? nil :xmlAttribute? nil), "Endpoint" (portkey.aws/search-for-tag input "Endpoint" :flattened? nil :xmlAttribute? nil), "OptionGroupMemberships" (portkey.aws/search-for-tag input "OptionGroupMemberships" :flattened? nil :xmlAttribute? nil), "IAMDatabaseAuthenticationEnabled" (portkey.aws/search-for-tag input "IAMDatabaseAuthenticationEnabled" :flattened? nil :xmlAttribute? nil), "PerformanceInsightsRetentionPeriod" (portkey.aws/search-for-tag input "PerformanceInsightsRetentionPeriod" :flattened? nil :xmlAttribute? nil), "DBInstanceClass" (portkey.aws/search-for-tag input "DBInstanceClass" :flattened? nil :xmlAttribute? nil), "DBParameterGroups" (portkey.aws/search-for-tag input "DBParameterGroups" :flattened? nil :xmlAttribute? nil), "VpcSecurityGroups" (portkey.aws/search-for-tag input "VpcSecurityGroups" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "DBInstanceStatus" (portkey.aws/search-for-tag input "DBInstanceStatus" :flattened? nil :xmlAttribute? nil), "StatusInfos" (portkey.aws/search-for-tag input "StatusInfos" :flattened? nil :xmlAttribute? nil), "AssociatedRoles" (portkey.aws/search-for-tag input "AssociatedRoles" :flattened? nil :xmlAttribute? nil), "MonitoringRoleArn" (portkey.aws/search-for-tag input "MonitoringRoleArn" :flattened? nil :xmlAttribute? nil), "TdeCredentialArn" (portkey.aws/search-for-tag input "TdeCredentialArn" :flattened? nil :xmlAttribute? nil), "EnhancedMonitoringResourceArn" (portkey.aws/search-for-tag input "EnhancedMonitoringResourceArn" :flattened? nil :xmlAttribute? nil), "MultiAZ" (portkey.aws/search-for-tag input "MultiAZ" :flattened? nil :xmlAttribute? nil), "PerformanceInsightsKMSKeyId" (portkey.aws/search-for-tag input "PerformanceInsightsKMSKeyId" :flattened? nil :xmlAttribute? nil), "DBClusterIdentifier" (portkey.aws/search-for-tag input "DBClusterIdentifier" :flattened? nil :xmlAttribute? nil), "PreferredBackupWindow" (portkey.aws/search-for-tag input "PreferredBackupWindow" :flattened? nil :xmlAttribute? nil), "PendingModifiedValues" (portkey.aws/search-for-tag input "PendingModifiedValues" :flattened? nil :xmlAttribute? nil), "LatestRestorableTime" (portkey.aws/search-for-tag input "LatestRestorableTime" :flattened? nil :xmlAttribute? nil), "DBSubnetGroup" (portkey.aws/search-for-tag input "DBSubnetGroup" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1481292 "DeletionProtection") (clojure.core/assoc :deletion-protection (deser-boolean (clojure.core/get-in letvar1481292 ["DeletionProtection" :content]))) (letvar1481292 "BackupRetentionPeriod") (clojure.core/assoc :backup-retention-period (deser-integer (clojure.core/get-in letvar1481292 ["BackupRetentionPeriod" :content]))) (letvar1481292 "DBSecurityGroups") (clojure.core/assoc :db-security-groups (deser-db-security-group-membership-list (clojure.core/get-in letvar1481292 ["DBSecurityGroups" :content]))) (letvar1481292 "SecondaryAvailabilityZone") (clojure.core/assoc :secondary-availability-zone (deser-string (clojure.core/get-in letvar1481292 ["SecondaryAvailabilityZone" :content]))) (letvar1481292 "PromotionTier") (clojure.core/assoc :promotion-tier (deser-integer-optional (clojure.core/get-in letvar1481292 ["PromotionTier" :content]))) (letvar1481292 "CharacterSetName") (clojure.core/assoc :character-set-name (deser-string (clojure.core/get-in letvar1481292 ["CharacterSetName" :content]))) (letvar1481292 "PubliclyAccessible") (clojure.core/assoc :publicly-accessible (deser-boolean (clojure.core/get-in letvar1481292 ["PubliclyAccessible" :content]))) (letvar1481292 "ReadReplicaDBClusterIdentifiers") (clojure.core/assoc :read-replica-db-cluster-identifiers (deser-read-replica-db-cluster-identifier-list (clojure.core/get-in letvar1481292 ["ReadReplicaDBClusterIdentifiers" :content]))) (letvar1481292 "ReadReplicaDBInstanceIdentifiers") (clojure.core/assoc :read-replica-db-instance-identifiers (deser-read-replica-db-instance-identifier-list (clojure.core/get-in letvar1481292 ["ReadReplicaDBInstanceIdentifiers" :content]))) (letvar1481292 "DomainMemberships") (clojure.core/assoc :domain-memberships (deser-domain-membership-list (clojure.core/get-in letvar1481292 ["DomainMemberships" :content]))) (letvar1481292 "PreferredMaintenanceWindow") (clojure.core/assoc :preferred-maintenance-window (deser-string (clojure.core/get-in letvar1481292 ["PreferredMaintenanceWindow" :content]))) (letvar1481292 "CopyTagsToSnapshot") (clojure.core/assoc :copy-tags-to-snapshot (deser-boolean (clojure.core/get-in letvar1481292 ["CopyTagsToSnapshot" :content]))) (letvar1481292 "DBInstanceIdentifier") (clojure.core/assoc :db-instance-identifier (deser-string (clojure.core/get-in letvar1481292 ["DBInstanceIdentifier" :content]))) (letvar1481292 "EnabledCloudwatchLogsExports") (clojure.core/assoc :enabled-cloudwatch-logs-exports (deser-log-type-list (clojure.core/get-in letvar1481292 ["EnabledCloudwatchLogsExports" :content]))) (letvar1481292 "AutoMinorVersionUpgrade") (clojure.core/assoc :auto-minor-version-upgrade (deser-boolean (clojure.core/get-in letvar1481292 ["AutoMinorVersionUpgrade" :content]))) (letvar1481292 "DbInstancePort") (clojure.core/assoc :db-instance-port (deser-integer (clojure.core/get-in letvar1481292 ["DbInstancePort" :content]))) (letvar1481292 "DBName") (clojure.core/assoc :db-name (deser-string (clojure.core/get-in letvar1481292 ["DBName" :content]))) (letvar1481292 "DBInstanceArn") (clojure.core/assoc :db-instance-arn (deser-string (clojure.core/get-in letvar1481292 ["DBInstanceArn" :content]))) (letvar1481292 "InstanceCreateTime") (clojure.core/assoc :instance-create-time (deser-t-stamp (clojure.core/get-in letvar1481292 ["InstanceCreateTime" :content]))) (letvar1481292 "AvailabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar1481292 ["AvailabilityZone" :content]))) (letvar1481292 "ReadReplicaSourceDBInstanceIdentifier") (clojure.core/assoc :read-replica-source-db-instance-identifier (deser-string (clojure.core/get-in letvar1481292 ["ReadReplicaSourceDBInstanceIdentifier" :content]))) (letvar1481292 "LicenseModel") (clojure.core/assoc :license-model (deser-string (clojure.core/get-in letvar1481292 ["LicenseModel" :content]))) (letvar1481292 "ListenerEndpoint") (clojure.core/assoc :listener-endpoint (deser-endpoint (clojure.core/get-in letvar1481292 ["ListenerEndpoint" :content]))) (letvar1481292 "AllocatedStorage") (clojure.core/assoc :allocated-storage (deser-integer (clojure.core/get-in letvar1481292 ["AllocatedStorage" :content]))) (letvar1481292 "MonitoringInterval") (clojure.core/assoc :monitoring-interval (deser-integer-optional (clojure.core/get-in letvar1481292 ["MonitoringInterval" :content]))) (letvar1481292 "Timezone") (clojure.core/assoc :timezone (deser-string (clojure.core/get-in letvar1481292 ["Timezone" :content]))) (letvar1481292 "MasterUsername") (clojure.core/assoc :master-username (deser-string (clojure.core/get-in letvar1481292 ["MasterUsername" :content]))) (letvar1481292 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar1481292 ["EngineVersion" :content]))) (letvar1481292 "PerformanceInsightsEnabled") (clojure.core/assoc :performance-insights-enabled (deser-boolean-optional (clojure.core/get-in letvar1481292 ["PerformanceInsightsEnabled" :content]))) (letvar1481292 "StorageEncrypted") (clojure.core/assoc :storage-encrypted (deser-boolean (clojure.core/get-in letvar1481292 ["StorageEncrypted" :content]))) (letvar1481292 "KmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar1481292 ["KmsKeyId" :content]))) (letvar1481292 "DbiResourceId") (clojure.core/assoc :dbi-resource-id (deser-string (clojure.core/get-in letvar1481292 ["DbiResourceId" :content]))) (letvar1481292 "Iops") (clojure.core/assoc :iops (deser-integer-optional (clojure.core/get-in letvar1481292 ["Iops" :content]))) (letvar1481292 "StorageType") (clojure.core/assoc :storage-type (deser-string (clojure.core/get-in letvar1481292 ["StorageType" :content]))) (letvar1481292 "ProcessorFeatures") (clojure.core/assoc :processor-features (deser-processor-feature-list (clojure.core/get-in letvar1481292 ["ProcessorFeatures" :content]))) (letvar1481292 "CACertificateIdentifier") (clojure.core/assoc :ca-certificate-identifier (deser-string (clojure.core/get-in letvar1481292 ["CACertificateIdentifier" :content]))) (letvar1481292 "Endpoint") (clojure.core/assoc :endpoint (deser-endpoint (clojure.core/get-in letvar1481292 ["Endpoint" :content]))) (letvar1481292 "OptionGroupMemberships") (clojure.core/assoc :option-group-memberships (deser-option-group-membership-list (clojure.core/get-in letvar1481292 ["OptionGroupMemberships" :content]))) (letvar1481292 "IAMDatabaseAuthenticationEnabled") (clojure.core/assoc :iam-database-authentication-enabled (deser-boolean (clojure.core/get-in letvar1481292 ["IAMDatabaseAuthenticationEnabled" :content]))) (letvar1481292 "PerformanceInsightsRetentionPeriod") (clojure.core/assoc :performance-insights-retention-period (deser-integer-optional (clojure.core/get-in letvar1481292 ["PerformanceInsightsRetentionPeriod" :content]))) (letvar1481292 "DBInstanceClass") (clojure.core/assoc :db-instance-class (deser-string (clojure.core/get-in letvar1481292 ["DBInstanceClass" :content]))) (letvar1481292 "DBParameterGroups") (clojure.core/assoc :db-parameter-groups (deser-db-parameter-group-status-list (clojure.core/get-in letvar1481292 ["DBParameterGroups" :content]))) (letvar1481292 "VpcSecurityGroups") (clojure.core/assoc :vpc-security-groups (deser-vpc-security-group-membership-list (clojure.core/get-in letvar1481292 ["VpcSecurityGroups" :content]))) (letvar1481292 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar1481292 ["Engine" :content]))) (letvar1481292 "DBInstanceStatus") (clojure.core/assoc :db-instance-status (deser-string (clojure.core/get-in letvar1481292 ["DBInstanceStatus" :content]))) (letvar1481292 "StatusInfos") (clojure.core/assoc :status-infos (deser-db-instance-status-info-list (clojure.core/get-in letvar1481292 ["StatusInfos" :content]))) (letvar1481292 "AssociatedRoles") (clojure.core/assoc :associated-roles (deser-db-instance-roles (clojure.core/get-in letvar1481292 ["AssociatedRoles" :content]))) (letvar1481292 "MonitoringRoleArn") (clojure.core/assoc :monitoring-role-arn (deser-string (clojure.core/get-in letvar1481292 ["MonitoringRoleArn" :content]))) (letvar1481292 "TdeCredentialArn") (clojure.core/assoc :tde-credential-arn (deser-string (clojure.core/get-in letvar1481292 ["TdeCredentialArn" :content]))) (letvar1481292 "EnhancedMonitoringResourceArn") (clojure.core/assoc :enhanced-monitoring-resource-arn (deser-string (clojure.core/get-in letvar1481292 ["EnhancedMonitoringResourceArn" :content]))) (letvar1481292 "MultiAZ") (clojure.core/assoc :multi-az (deser-boolean (clojure.core/get-in letvar1481292 ["MultiAZ" :content]))) (letvar1481292 "PerformanceInsightsKMSKeyId") (clojure.core/assoc :performance-insights-kms-key-id (deser-string (clojure.core/get-in letvar1481292 ["PerformanceInsightsKMSKeyId" :content]))) (letvar1481292 "DBClusterIdentifier") (clojure.core/assoc :db-cluster-identifier (deser-string (clojure.core/get-in letvar1481292 ["DBClusterIdentifier" :content]))) (letvar1481292 "PreferredBackupWindow") (clojure.core/assoc :preferred-backup-window (deser-string (clojure.core/get-in letvar1481292 ["PreferredBackupWindow" :content]))) (letvar1481292 "PendingModifiedValues") (clojure.core/assoc :pending-modified-values (deser-pending-modified-values (clojure.core/get-in letvar1481292 ["PendingModifiedValues" :content]))) (letvar1481292 "LatestRestorableTime") (clojure.core/assoc :latest-restorable-time (deser-t-stamp (clojure.core/get-in letvar1481292 ["LatestRestorableTime" :content]))) (letvar1481292 "DBSubnetGroup") (clojure.core/assoc :db-subnet-group (deser-db-subnet-group (clojure.core/get-in letvar1481292 ["DBSubnetGroup" :content]))))))

(clojure.core/defn- deser-option-group-option-versions-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-option-version coll))) input))

(clojure.core/defn- deser-t-stamp [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-db-security-group-membership-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-security-group-membership coll))) input))

(clojure.core/defn- deser-event-categories-map [input] (clojure.core/let [letvar1481436 {"SourceType" (portkey.aws/search-for-tag input "SourceType" :flattened? nil :xmlAttribute? nil), "EventCategories" (portkey.aws/search-for-tag input "EventCategories" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1481436 "SourceType") (clojure.core/assoc :source-type (deser-string (clojure.core/get-in letvar1481436 ["SourceType" :content]))) (letvar1481436 "EventCategories") (clojure.core/assoc :event-categories (deser-event-categories-list (clojure.core/get-in letvar1481436 ["EventCategories" :content]))))))

(clojure.core/defn- deser-reserved-db-instances-offering-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-db-instances-offering coll))) input))

(clojure.core/defn- deser-recurring-charge-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-recurring-charge coll))) input))

(clojure.core/defn- deser-event-categories-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-processor-feature [input] (clojure.core/let [letvar1481595 {"Name" (portkey.aws/search-for-tag input "Name" :flattened? nil :xmlAttribute? nil), "Value" (portkey.aws/search-for-tag input "Value" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1481595 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar1481595 ["Name" :content]))) (letvar1481595 "Value") (clojure.core/assoc :value (deser-string (clojure.core/get-in letvar1481595 ["Value" :content]))))))

(clojure.core/defn- deser-db-cluster-parameter-group [input] (clojure.core/let [letvar1481703 {"DBClusterParameterGroupName" (portkey.aws/search-for-tag input "DBClusterParameterGroupName" :flattened? nil :xmlAttribute? nil), "DBParameterGroupFamily" (portkey.aws/search-for-tag input "DBParameterGroupFamily" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "DBClusterParameterGroupArn" (portkey.aws/search-for-tag input "DBClusterParameterGroupArn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1481703 "DBClusterParameterGroupName") (clojure.core/assoc :db-cluster-parameter-group-name (deser-string (clojure.core/get-in letvar1481703 ["DBClusterParameterGroupName" :content]))) (letvar1481703 "DBParameterGroupFamily") (clojure.core/assoc :db-parameter-group-family (deser-string (clojure.core/get-in letvar1481703 ["DBParameterGroupFamily" :content]))) (letvar1481703 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar1481703 ["Description" :content]))) (letvar1481703 "DBClusterParameterGroupArn") (clojure.core/assoc :db-cluster-parameter-group-arn (deser-string (clojure.core/get-in letvar1481703 ["DBClusterParameterGroupArn" :content]))))))

(clojure.core/defn- deser-apply-method [input] (clojure.core/get {"immediate" :immediate, "pending-reboot" :pendingreboot} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-endpoint [input] (clojure.core/let [letvar1481816 {"Address" (portkey.aws/search-for-tag input "Address" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "HostedZoneId" (portkey.aws/search-for-tag input "HostedZoneId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1481816 "Address") (clojure.core/assoc :address (deser-string (clojure.core/get-in letvar1481816 ["Address" :content]))) (letvar1481816 "Port") (clojure.core/assoc :port (deser-integer (clojure.core/get-in letvar1481816 ["Port" :content]))) (letvar1481816 "HostedZoneId") (clojure.core/assoc :hosted-zone-id (deser-string (clojure.core/get-in letvar1481816 ["HostedZoneId" :content]))))))

(clojure.core/defn- deser-db-parameter-group [input] (clojure.core/let [letvar1481924 {"DBParameterGroupName" (portkey.aws/search-for-tag input "DBParameterGroupName" :flattened? nil :xmlAttribute? nil), "DBParameterGroupFamily" (portkey.aws/search-for-tag input "DBParameterGroupFamily" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "DBParameterGroupArn" (portkey.aws/search-for-tag input "DBParameterGroupArn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1481924 "DBParameterGroupName") (clojure.core/assoc :db-parameter-group-name (deser-string (clojure.core/get-in letvar1481924 ["DBParameterGroupName" :content]))) (letvar1481924 "DBParameterGroupFamily") (clojure.core/assoc :db-parameter-group-family (deser-string (clojure.core/get-in letvar1481924 ["DBParameterGroupFamily" :content]))) (letvar1481924 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar1481924 ["Description" :content]))) (letvar1481924 "DBParameterGroupArn") (clojure.core/assoc :db-parameter-group-arn (deser-string (clojure.core/get-in letvar1481924 ["DBParameterGroupArn" :content]))))))

(clojure.core/defn- deser-supported-character-sets-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-character-set coll))) input))

(clojure.core/defn- deser-long [input] (java.lang.Long. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-log-type-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-account-quota [input] (clojure.core/let [letvar1482068 {"AccountQuotaName" (portkey.aws/search-for-tag input "AccountQuotaName" :flattened? nil :xmlAttribute? nil), "Used" (portkey.aws/search-for-tag input "Used" :flattened? nil :xmlAttribute? nil), "Max" (portkey.aws/search-for-tag input "Max" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1482068 "AccountQuotaName") (clojure.core/assoc :account-quota-name (deser-string (clojure.core/get-in letvar1482068 ["AccountQuotaName" :content]))) (letvar1482068 "Used") (clojure.core/assoc :used (deser-long (clojure.core/get-in letvar1482068 ["Used" :content]))) (letvar1482068 "Max") (clojure.core/assoc :max (deser-long (clojure.core/get-in letvar1482068 ["Max" :content]))))))

(clojure.core/defn- deser-db-cluster-option-group-status [input] (clojure.core/let [letvar1482176 {"DBClusterOptionGroupName" (portkey.aws/search-for-tag input "DBClusterOptionGroupName" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1482176 "DBClusterOptionGroupName") (clojure.core/assoc :db-cluster-option-group-name (deser-string (clojure.core/get-in letvar1482176 ["DBClusterOptionGroupName" :content]))) (letvar1482176 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar1482176 ["Status" :content]))))))

(clojure.core/defn- deser-option-group-membership [input] (clojure.core/let [letvar1482284 {"OptionGroupName" (portkey.aws/search-for-tag input "OptionGroupName" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1482284 "OptionGroupName") (clojure.core/assoc :option-group-name (deser-string (clojure.core/get-in letvar1482284 ["OptionGroupName" :content]))) (letvar1482284 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar1482284 ["Status" :content]))))))

(clojure.core/defn- deser-upgrade-target [input] (clojure.core/let [letvar1482392 {"Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "AutoUpgrade" (portkey.aws/search-for-tag input "AutoUpgrade" :flattened? nil :xmlAttribute? nil), "IsMajorVersionUpgrade" (portkey.aws/search-for-tag input "IsMajorVersionUpgrade" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1482392 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar1482392 ["Engine" :content]))) (letvar1482392 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar1482392 ["EngineVersion" :content]))) (letvar1482392 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar1482392 ["Description" :content]))) (letvar1482392 "AutoUpgrade") (clojure.core/assoc :auto-upgrade (deser-boolean (clojure.core/get-in letvar1482392 ["AutoUpgrade" :content]))) (letvar1482392 "IsMajorVersionUpgrade") (clojure.core/assoc :is-major-version-upgrade (deser-boolean (clojure.core/get-in letvar1482392 ["IsMajorVersionUpgrade" :content]))))))

(clojure.core/defn- deser-available-processor-feature-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-available-processor-feature coll))) input))

(clojure.core/defn- deser-attribute-value-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-reserved-db-instance [input] (clojure.core/let [letvar1482534 {"ReservedDBInstanceId" (portkey.aws/search-for-tag input "ReservedDBInstanceId" :flattened? nil :xmlAttribute? nil), "CurrencyCode" (portkey.aws/search-for-tag input "CurrencyCode" :flattened? nil :xmlAttribute? nil), "ReservedDBInstancesOfferingId" (portkey.aws/search-for-tag input "ReservedDBInstancesOfferingId" :flattened? nil :xmlAttribute? nil), "StartTime" (portkey.aws/search-for-tag input "StartTime" :flattened? nil :xmlAttribute? nil), "FixedPrice" (portkey.aws/search-for-tag input "FixedPrice" :flattened? nil :xmlAttribute? nil), "ReservedDBInstanceArn" (portkey.aws/search-for-tag input "ReservedDBInstanceArn" :flattened? nil :xmlAttribute? nil), "DBInstanceCount" (portkey.aws/search-for-tag input "DBInstanceCount" :flattened? nil :xmlAttribute? nil), "Duration" (portkey.aws/search-for-tag input "Duration" :flattened? nil :xmlAttribute? nil), "UsagePrice" (portkey.aws/search-for-tag input "UsagePrice" :flattened? nil :xmlAttribute? nil), "ProductDescription" (portkey.aws/search-for-tag input "ProductDescription" :flattened? nil :xmlAttribute? nil), "DBInstanceClass" (portkey.aws/search-for-tag input "DBInstanceClass" :flattened? nil :xmlAttribute? nil), "State" (portkey.aws/search-for-tag input "State" :flattened? nil :xmlAttribute? nil), "RecurringCharges" (portkey.aws/search-for-tag input "RecurringCharges" :flattened? nil :xmlAttribute? nil), "OfferingType" (portkey.aws/search-for-tag input "OfferingType" :flattened? nil :xmlAttribute? nil), "MultiAZ" (portkey.aws/search-for-tag input "MultiAZ" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1482534 "ReservedDBInstanceId") (clojure.core/assoc :reserved-db-instance-id (deser-string (clojure.core/get-in letvar1482534 ["ReservedDBInstanceId" :content]))) (letvar1482534 "CurrencyCode") (clojure.core/assoc :currency-code (deser-string (clojure.core/get-in letvar1482534 ["CurrencyCode" :content]))) (letvar1482534 "ReservedDBInstancesOfferingId") (clojure.core/assoc :reserved-db-instances-offering-id (deser-string (clojure.core/get-in letvar1482534 ["ReservedDBInstancesOfferingId" :content]))) (letvar1482534 "StartTime") (clojure.core/assoc :start-time (deser-t-stamp (clojure.core/get-in letvar1482534 ["StartTime" :content]))) (letvar1482534 "FixedPrice") (clojure.core/assoc :fixed-price (deser-double (clojure.core/get-in letvar1482534 ["FixedPrice" :content]))) (letvar1482534 "ReservedDBInstanceArn") (clojure.core/assoc :reserved-db-instance-arn (deser-string (clojure.core/get-in letvar1482534 ["ReservedDBInstanceArn" :content]))) (letvar1482534 "DBInstanceCount") (clojure.core/assoc :db-instance-count (deser-integer (clojure.core/get-in letvar1482534 ["DBInstanceCount" :content]))) (letvar1482534 "Duration") (clojure.core/assoc :duration (deser-integer (clojure.core/get-in letvar1482534 ["Duration" :content]))) (letvar1482534 "UsagePrice") (clojure.core/assoc :usage-price (deser-double (clojure.core/get-in letvar1482534 ["UsagePrice" :content]))) (letvar1482534 "ProductDescription") (clojure.core/assoc :product-description (deser-string (clojure.core/get-in letvar1482534 ["ProductDescription" :content]))) (letvar1482534 "DBInstanceClass") (clojure.core/assoc :db-instance-class (deser-string (clojure.core/get-in letvar1482534 ["DBInstanceClass" :content]))) (letvar1482534 "State") (clojure.core/assoc :state (deser-string (clojure.core/get-in letvar1482534 ["State" :content]))) (letvar1482534 "RecurringCharges") (clojure.core/assoc :recurring-charges (deser-recurring-charge-list (clojure.core/get-in letvar1482534 ["RecurringCharges" :content]))) (letvar1482534 "OfferingType") (clojure.core/assoc :offering-type (deser-string (clojure.core/get-in letvar1482534 ["OfferingType" :content]))) (letvar1482534 "MultiAZ") (clojure.core/assoc :multi-az (deser-boolean (clojure.core/get-in letvar1482534 ["MultiAZ" :content]))))))

(clojure.core/defn- deser-ip-range [input] (clojure.core/let [letvar1482642 {"Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "CIDRIP" (portkey.aws/search-for-tag input "CIDRIP" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1482642 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar1482642 ["Status" :content]))) (letvar1482642 "CIDRIP") (clojure.core/assoc :cidrip (deser-string (clojure.core/get-in letvar1482642 ["CIDRIP" :content]))))))

(clojure.core/defn- deser-character-set [input] (clojure.core/let [letvar1482750 {"CharacterSetName" (portkey.aws/search-for-tag input "CharacterSetName" :flattened? nil :xmlAttribute? nil), "CharacterSetDescription" (portkey.aws/search-for-tag input "CharacterSetDescription" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1482750 "CharacterSetName") (clojure.core/assoc :character-set-name (deser-string (clojure.core/get-in letvar1482750 ["CharacterSetName" :content]))) (letvar1482750 "CharacterSetDescription") (clojure.core/assoc :character-set-description (deser-string (clojure.core/get-in letvar1482750 ["CharacterSetDescription" :content]))))))

(clojure.core/defn- deser-option-group-option-settings-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-option-group-option-setting coll))) input))

(clojure.core/defn- deser-tag [input] (clojure.core/let [letvar1482875 {"Key" (portkey.aws/search-for-tag input "Key" :flattened? nil :xmlAttribute? nil), "Value" (portkey.aws/search-for-tag input "Value" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1482875 "Key") (clojure.core/assoc :key (deser-string (clojure.core/get-in letvar1482875 ["Key" :content]))) (letvar1482875 "Value") (clojure.core/assoc :value (deser-string (clojure.core/get-in letvar1482875 ["Value" :content]))))))

(clojure.core/defn- deser-boolean-optional [input] (clojure.core/when-let [boolstr__21591__auto__ (portkey.aws/unbox-xml-primitive-value input)] (clojure.core/cond (clojure.core/= "true" boolstr__21591__auto__) true (clojure.core/= "false" boolstr__21591__auto__) false)))

(clojure.core/defn- deser-options-depended-on [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-option-setting [input] (clojure.core/let [letvar1483002 {"DataType" (portkey.aws/search-for-tag input "DataType" :flattened? nil :xmlAttribute? nil), "AllowedValues" (portkey.aws/search-for-tag input "AllowedValues" :flattened? nil :xmlAttribute? nil), "Value" (portkey.aws/search-for-tag input "Value" :flattened? nil :xmlAttribute? nil), "ApplyType" (portkey.aws/search-for-tag input "ApplyType" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "DefaultValue" (portkey.aws/search-for-tag input "DefaultValue" :flattened? nil :xmlAttribute? nil), "IsModifiable" (portkey.aws/search-for-tag input "IsModifiable" :flattened? nil :xmlAttribute? nil), "IsCollection" (portkey.aws/search-for-tag input "IsCollection" :flattened? nil :xmlAttribute? nil), "Name" (portkey.aws/search-for-tag input "Name" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1483002 "DataType") (clojure.core/assoc :data-type (deser-string (clojure.core/get-in letvar1483002 ["DataType" :content]))) (letvar1483002 "AllowedValues") (clojure.core/assoc :allowed-values (deser-string (clojure.core/get-in letvar1483002 ["AllowedValues" :content]))) (letvar1483002 "Value") (clojure.core/assoc :value (deser-string (clojure.core/get-in letvar1483002 ["Value" :content]))) (letvar1483002 "ApplyType") (clojure.core/assoc :apply-type (deser-string (clojure.core/get-in letvar1483002 ["ApplyType" :content]))) (letvar1483002 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar1483002 ["Description" :content]))) (letvar1483002 "DefaultValue") (clojure.core/assoc :default-value (deser-string (clojure.core/get-in letvar1483002 ["DefaultValue" :content]))) (letvar1483002 "IsModifiable") (clojure.core/assoc :is-modifiable (deser-boolean (clojure.core/get-in letvar1483002 ["IsModifiable" :content]))) (letvar1483002 "IsCollection") (clojure.core/assoc :is-collection (deser-boolean (clojure.core/get-in letvar1483002 ["IsCollection" :content]))) (letvar1483002 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar1483002 ["Name" :content]))))))

(clojure.core/defn- deser-db-instance-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-instance coll))) input))

(clojure.core/defn- deser-global-cluster-member-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-global-cluster-member coll))) input))

(clojure.core/defn- deser-db-instance-role [input] (clojure.core/let [letvar1483144 {"RoleArn" (portkey.aws/search-for-tag input "RoleArn" :flattened? nil :xmlAttribute? nil), "FeatureName" (portkey.aws/search-for-tag input "FeatureName" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1483144 "RoleArn") (clojure.core/assoc :role-arn (deser-string (clojure.core/get-in letvar1483144 ["RoleArn" :content]))) (letvar1483144 "FeatureName") (clojure.core/assoc :feature-name (deser-string (clojure.core/get-in letvar1483144 ["FeatureName" :content]))) (letvar1483144 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar1483144 ["Status" :content]))))))

(clojure.core/defn- deser-engine-mode-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-event-subscriptions-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-event-subscription coll))) input))

(clojure.core/defn- deser-db-snapshot-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-snapshot coll))) input))

(clojure.core/defn- deser-db-cluster-option-group-memberships [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-option-group-status coll))) input))

(clojure.core/defn- deser-db-cluster-endpoint [input] (clojure.core/let [letvar1483320 {"ExcludedMembers" (portkey.aws/search-for-tag input "ExcludedMembers" :flattened? nil :xmlAttribute? nil), "EndpointType" (portkey.aws/search-for-tag input "EndpointType" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "DBClusterEndpointIdentifier" (portkey.aws/search-for-tag input "DBClusterEndpointIdentifier" :flattened? nil :xmlAttribute? nil), "CustomEndpointType" (portkey.aws/search-for-tag input "CustomEndpointType" :flattened? nil :xmlAttribute? nil), "StaticMembers" (portkey.aws/search-for-tag input "StaticMembers" :flattened? nil :xmlAttribute? nil), "DBClusterEndpointArn" (portkey.aws/search-for-tag input "DBClusterEndpointArn" :flattened? nil :xmlAttribute? nil), "Endpoint" (portkey.aws/search-for-tag input "Endpoint" :flattened? nil :xmlAttribute? nil), "DBClusterIdentifier" (portkey.aws/search-for-tag input "DBClusterIdentifier" :flattened? nil :xmlAttribute? nil), "DBClusterEndpointResourceIdentifier" (portkey.aws/search-for-tag input "DBClusterEndpointResourceIdentifier" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1483320 "ExcludedMembers") (clojure.core/assoc :excluded-members (deser-string-list (clojure.core/get-in letvar1483320 ["ExcludedMembers" :content]))) (letvar1483320 "EndpointType") (clojure.core/assoc :endpoint-type (deser-string (clojure.core/get-in letvar1483320 ["EndpointType" :content]))) (letvar1483320 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar1483320 ["Status" :content]))) (letvar1483320 "DBClusterEndpointIdentifier") (clojure.core/assoc :db-cluster-endpoint-identifier (deser-string (clojure.core/get-in letvar1483320 ["DBClusterEndpointIdentifier" :content]))) (letvar1483320 "CustomEndpointType") (clojure.core/assoc :custom-endpoint-type (deser-string (clojure.core/get-in letvar1483320 ["CustomEndpointType" :content]))) (letvar1483320 "StaticMembers") (clojure.core/assoc :static-members (deser-string-list (clojure.core/get-in letvar1483320 ["StaticMembers" :content]))) (letvar1483320 "DBClusterEndpointArn") (clojure.core/assoc :db-cluster-endpoint-arn (deser-string (clojure.core/get-in letvar1483320 ["DBClusterEndpointArn" :content]))) (letvar1483320 "Endpoint") (clojure.core/assoc :endpoint (deser-string (clojure.core/get-in letvar1483320 ["Endpoint" :content]))) (letvar1483320 "DBClusterIdentifier") (clojure.core/assoc :db-cluster-identifier (deser-string (clojure.core/get-in letvar1483320 ["DBClusterIdentifier" :content]))) (letvar1483320 "DBClusterEndpointResourceIdentifier") (clojure.core/assoc :db-cluster-endpoint-resource-identifier (deser-string (clojure.core/get-in letvar1483320 ["DBClusterEndpointResourceIdentifier" :content]))))))

(clojure.core/defn- deser-engine-defaults [input] (clojure.core/let [letvar1483428 {"DBParameterGroupFamily" (portkey.aws/search-for-tag input "DBParameterGroupFamily" :flattened? nil :xmlAttribute? nil), "Marker" (portkey.aws/search-for-tag input "Marker" :flattened? nil :xmlAttribute? nil), "Parameters" (portkey.aws/search-for-tag input "Parameters" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1483428 "DBParameterGroupFamily") (clojure.core/assoc :db-parameter-group-family (deser-string (clojure.core/get-in letvar1483428 ["DBParameterGroupFamily" :content]))) (letvar1483428 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1483428 ["Marker" :content]))) (letvar1483428 "Parameters") (clojure.core/assoc :parameters (deser-parameters-list (clojure.core/get-in letvar1483428 ["Parameters" :content]))))))

(clojure.core/defn- deser-availability-zones [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-db-subnet-groups [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-subnet-group coll))) input))

(clojure.core/defn- deser-long-optional [input] (java.lang.Long. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-global-cluster-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-global-cluster coll))) input))

(clojure.core/defn- deser-processor-feature-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-processor-feature coll))) input))

(clojure.core/defn- deser-integer-optional [input] (java.lang.Integer. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-db-security-group [input] (clojure.core/let [letvar1483608 {"OwnerId" (portkey.aws/search-for-tag input "OwnerId" :flattened? nil :xmlAttribute? nil), "DBSecurityGroupName" (portkey.aws/search-for-tag input "DBSecurityGroupName" :flattened? nil :xmlAttribute? nil), "DBSecurityGroupDescription" (portkey.aws/search-for-tag input "DBSecurityGroupDescription" :flattened? nil :xmlAttribute? nil), "VpcId" (portkey.aws/search-for-tag input "VpcId" :flattened? nil :xmlAttribute? nil), "EC2SecurityGroups" (portkey.aws/search-for-tag input "EC2SecurityGroups" :flattened? nil :xmlAttribute? nil), "IPRanges" (portkey.aws/search-for-tag input "IPRanges" :flattened? nil :xmlAttribute? nil), "DBSecurityGroupArn" (portkey.aws/search-for-tag input "DBSecurityGroupArn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1483608 "OwnerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar1483608 ["OwnerId" :content]))) (letvar1483608 "DBSecurityGroupName") (clojure.core/assoc :db-security-group-name (deser-string (clojure.core/get-in letvar1483608 ["DBSecurityGroupName" :content]))) (letvar1483608 "DBSecurityGroupDescription") (clojure.core/assoc :db-security-group-description (deser-string (clojure.core/get-in letvar1483608 ["DBSecurityGroupDescription" :content]))) (letvar1483608 "VpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar1483608 ["VpcId" :content]))) (letvar1483608 "EC2SecurityGroups") (clojure.core/assoc :ec-2-security-groups (deser-ec-2-security-group-list (clojure.core/get-in letvar1483608 ["EC2SecurityGroups" :content]))) (letvar1483608 "IPRanges") (clojure.core/assoc :ip-ranges (deser-ip-range-list (clojure.core/get-in letvar1483608 ["IPRanges" :content]))) (letvar1483608 "DBSecurityGroupArn") (clojure.core/assoc :db-security-group-arn (deser-string (clojure.core/get-in letvar1483608 ["DBSecurityGroupArn" :content]))))))

(clojure.core/defn- deser-supported-timezones-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-timezone coll))) input))

(clojure.core/defn- deser-range-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-range coll))) input))

(clojure.core/defn- deser-db-instance-status-info-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-instance-status-info coll))) input))

(clojure.core/defn- deser-certificate [input] (clojure.core/let [letvar1483767 {"CertificateIdentifier" (portkey.aws/search-for-tag input "CertificateIdentifier" :flattened? nil :xmlAttribute? nil), "CertificateType" (portkey.aws/search-for-tag input "CertificateType" :flattened? nil :xmlAttribute? nil), "Thumbprint" (portkey.aws/search-for-tag input "Thumbprint" :flattened? nil :xmlAttribute? nil), "ValidFrom" (portkey.aws/search-for-tag input "ValidFrom" :flattened? nil :xmlAttribute? nil), "ValidTill" (portkey.aws/search-for-tag input "ValidTill" :flattened? nil :xmlAttribute? nil), "CertificateArn" (portkey.aws/search-for-tag input "CertificateArn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1483767 "CertificateIdentifier") (clojure.core/assoc :certificate-identifier (deser-string (clojure.core/get-in letvar1483767 ["CertificateIdentifier" :content]))) (letvar1483767 "CertificateType") (clojure.core/assoc :certificate-type (deser-string (clojure.core/get-in letvar1483767 ["CertificateType" :content]))) (letvar1483767 "Thumbprint") (clojure.core/assoc :thumbprint (deser-string (clojure.core/get-in letvar1483767 ["Thumbprint" :content]))) (letvar1483767 "ValidFrom") (clojure.core/assoc :valid-from (deser-t-stamp (clojure.core/get-in letvar1483767 ["ValidFrom" :content]))) (letvar1483767 "ValidTill") (clojure.core/assoc :valid-till (deser-t-stamp (clojure.core/get-in letvar1483767 ["ValidTill" :content]))) (letvar1483767 "CertificateArn") (clojure.core/assoc :certificate-arn (deser-string (clojure.core/get-in letvar1483767 ["CertificateArn" :content]))))))

(clojure.core/defn- deser-domain-membership [input] (clojure.core/let [letvar1483875 {"Domain" (portkey.aws/search-for-tag input "Domain" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "FQDN" (portkey.aws/search-for-tag input "FQDN" :flattened? nil :xmlAttribute? nil), "IAMRoleName" (portkey.aws/search-for-tag input "IAMRoleName" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1483875 "Domain") (clojure.core/assoc :domain (deser-string (clojure.core/get-in letvar1483875 ["Domain" :content]))) (letvar1483875 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar1483875 ["Status" :content]))) (letvar1483875 "FQDN") (clojure.core/assoc :fqdn (deser-string (clojure.core/get-in letvar1483875 ["FQDN" :content]))) (letvar1483875 "IAMRoleName") (clojure.core/assoc :iam-role-name (deser-string (clojure.core/get-in letvar1483875 ["IAMRoleName" :content]))))))

(clojure.core/defn- deser-orderable-db-instance-option [input] (clojure.core/let [letvar1483983 {"SupportsIAMDatabaseAuthentication" (portkey.aws/search-for-tag input "SupportsIAMDatabaseAuthentication" :flattened? nil :xmlAttribute? nil), "SupportsIops" (portkey.aws/search-for-tag input "SupportsIops" :flattened? nil :xmlAttribute? nil), "SupportedEngineModes" (portkey.aws/search-for-tag input "SupportedEngineModes" :flattened? nil :xmlAttribute? nil), "MultiAZCapable" (portkey.aws/search-for-tag input "MultiAZCapable" :flattened? nil :xmlAttribute? nil), "MinStorageSize" (portkey.aws/search-for-tag input "MinStorageSize" :flattened? nil :xmlAttribute? nil), "MaxIopsPerGib" (portkey.aws/search-for-tag input "MaxIopsPerGib" :flattened? nil :xmlAttribute? nil), "MinIopsPerDbInstance" (portkey.aws/search-for-tag input "MinIopsPerDbInstance" :flattened? nil :xmlAttribute? nil), "LicenseModel" (portkey.aws/search-for-tag input "LicenseModel" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "AvailableProcessorFeatures" (portkey.aws/search-for-tag input "AvailableProcessorFeatures" :flattened? nil :xmlAttribute? nil), "Vpc" (portkey.aws/search-for-tag input "Vpc" :flattened? nil :xmlAttribute? nil), "SupportsPerformanceInsights" (portkey.aws/search-for-tag input "SupportsPerformanceInsights" :flattened? nil :xmlAttribute? nil), "StorageType" (portkey.aws/search-for-tag input "StorageType" :flattened? nil :xmlAttribute? nil), "MaxStorageSize" (portkey.aws/search-for-tag input "MaxStorageSize" :flattened? nil :xmlAttribute? nil), "MinIopsPerGib" (portkey.aws/search-for-tag input "MinIopsPerGib" :flattened? nil :xmlAttribute? nil), "ReadReplicaCapable" (portkey.aws/search-for-tag input "ReadReplicaCapable" :flattened? nil :xmlAttribute? nil), "DBInstanceClass" (portkey.aws/search-for-tag input "DBInstanceClass" :flattened? nil :xmlAttribute? nil), "SupportsStorageEncryption" (portkey.aws/search-for-tag input "SupportsStorageEncryption" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "AvailabilityZones" (portkey.aws/search-for-tag input "AvailabilityZones" :flattened? nil :xmlAttribute? nil), "SupportsEnhancedMonitoring" (portkey.aws/search-for-tag input "SupportsEnhancedMonitoring" :flattened? nil :xmlAttribute? nil), "MaxIopsPerDbInstance" (portkey.aws/search-for-tag input "MaxIopsPerDbInstance" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1483983 "SupportsIAMDatabaseAuthentication") (clojure.core/assoc :supports-iam-database-authentication (deser-boolean (clojure.core/get-in letvar1483983 ["SupportsIAMDatabaseAuthentication" :content]))) (letvar1483983 "SupportsIops") (clojure.core/assoc :supports-iops (deser-boolean (clojure.core/get-in letvar1483983 ["SupportsIops" :content]))) (letvar1483983 "SupportedEngineModes") (clojure.core/assoc :supported-engine-modes (deser-engine-mode-list (clojure.core/get-in letvar1483983 ["SupportedEngineModes" :content]))) (letvar1483983 "MultiAZCapable") (clojure.core/assoc :multi-az-capable (deser-boolean (clojure.core/get-in letvar1483983 ["MultiAZCapable" :content]))) (letvar1483983 "MinStorageSize") (clojure.core/assoc :min-storage-size (deser-integer-optional (clojure.core/get-in letvar1483983 ["MinStorageSize" :content]))) (letvar1483983 "MaxIopsPerGib") (clojure.core/assoc :max-iops-per-gib (deser-double-optional (clojure.core/get-in letvar1483983 ["MaxIopsPerGib" :content]))) (letvar1483983 "MinIopsPerDbInstance") (clojure.core/assoc :min-iops-per-db-instance (deser-integer-optional (clojure.core/get-in letvar1483983 ["MinIopsPerDbInstance" :content]))) (letvar1483983 "LicenseModel") (clojure.core/assoc :license-model (deser-string (clojure.core/get-in letvar1483983 ["LicenseModel" :content]))) (letvar1483983 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar1483983 ["EngineVersion" :content]))) (letvar1483983 "AvailableProcessorFeatures") (clojure.core/assoc :available-processor-features (deser-available-processor-feature-list (clojure.core/get-in letvar1483983 ["AvailableProcessorFeatures" :content]))) (letvar1483983 "Vpc") (clojure.core/assoc :vpc (deser-boolean (clojure.core/get-in letvar1483983 ["Vpc" :content]))) (letvar1483983 "SupportsPerformanceInsights") (clojure.core/assoc :supports-performance-insights (deser-boolean (clojure.core/get-in letvar1483983 ["SupportsPerformanceInsights" :content]))) (letvar1483983 "StorageType") (clojure.core/assoc :storage-type (deser-string (clojure.core/get-in letvar1483983 ["StorageType" :content]))) (letvar1483983 "MaxStorageSize") (clojure.core/assoc :max-storage-size (deser-integer-optional (clojure.core/get-in letvar1483983 ["MaxStorageSize" :content]))) (letvar1483983 "MinIopsPerGib") (clojure.core/assoc :min-iops-per-gib (deser-double-optional (clojure.core/get-in letvar1483983 ["MinIopsPerGib" :content]))) (letvar1483983 "ReadReplicaCapable") (clojure.core/assoc :read-replica-capable (deser-boolean (clojure.core/get-in letvar1483983 ["ReadReplicaCapable" :content]))) (letvar1483983 "DBInstanceClass") (clojure.core/assoc :db-instance-class (deser-string (clojure.core/get-in letvar1483983 ["DBInstanceClass" :content]))) (letvar1483983 "SupportsStorageEncryption") (clojure.core/assoc :supports-storage-encryption (deser-boolean (clojure.core/get-in letvar1483983 ["SupportsStorageEncryption" :content]))) (letvar1483983 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar1483983 ["Engine" :content]))) (letvar1483983 "AvailabilityZones") (clojure.core/assoc :availability-zones (deser-availability-zone-list (clojure.core/get-in letvar1483983 ["AvailabilityZones" :content]))) (letvar1483983 "SupportsEnhancedMonitoring") (clojure.core/assoc :supports-enhanced-monitoring (deser-boolean (clojure.core/get-in letvar1483983 ["SupportsEnhancedMonitoring" :content]))) (letvar1483983 "MaxIopsPerDbInstance") (clojure.core/assoc :max-iops-per-db-instance (deser-integer-optional (clojure.core/get-in letvar1483983 ["MaxIopsPerDbInstance" :content]))))))

(clojure.core/defn- deser-pending-modified-values [input] (clojure.core/let [letvar1484091 {"BackupRetentionPeriod" (portkey.aws/search-for-tag input "BackupRetentionPeriod" :flattened? nil :xmlAttribute? nil), "PendingCloudwatchLogsExports" (portkey.aws/search-for-tag input "PendingCloudwatchLogsExports" :flattened? nil :xmlAttribute? nil), "DBInstanceIdentifier" (portkey.aws/search-for-tag input "DBInstanceIdentifier" :flattened? nil :xmlAttribute? nil), "MasterUserPassword" (portkey.aws/search-for-tag input "MasterUserPassword" :flattened? nil :xmlAttribute? nil), "LicenseModel" (portkey.aws/search-for-tag input "LicenseModel" :flattened? nil :xmlAttribute? nil), "AllocatedStorage" (portkey.aws/search-for-tag input "AllocatedStorage" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "DBSubnetGroupName" (portkey.aws/search-for-tag input "DBSubnetGroupName" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "Iops" (portkey.aws/search-for-tag input "Iops" :flattened? nil :xmlAttribute? nil), "StorageType" (portkey.aws/search-for-tag input "StorageType" :flattened? nil :xmlAttribute? nil), "ProcessorFeatures" (portkey.aws/search-for-tag input "ProcessorFeatures" :flattened? nil :xmlAttribute? nil), "CACertificateIdentifier" (portkey.aws/search-for-tag input "CACertificateIdentifier" :flattened? nil :xmlAttribute? nil), "DBInstanceClass" (portkey.aws/search-for-tag input "DBInstanceClass" :flattened? nil :xmlAttribute? nil), "MultiAZ" (portkey.aws/search-for-tag input "MultiAZ" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1484091 "BackupRetentionPeriod") (clojure.core/assoc :backup-retention-period (deser-integer-optional (clojure.core/get-in letvar1484091 ["BackupRetentionPeriod" :content]))) (letvar1484091 "PendingCloudwatchLogsExports") (clojure.core/assoc :pending-cloudwatch-logs-exports (deser-pending-cloudwatch-logs-exports (clojure.core/get-in letvar1484091 ["PendingCloudwatchLogsExports" :content]))) (letvar1484091 "DBInstanceIdentifier") (clojure.core/assoc :db-instance-identifier (deser-string (clojure.core/get-in letvar1484091 ["DBInstanceIdentifier" :content]))) (letvar1484091 "MasterUserPassword") (clojure.core/assoc :master-user-password (deser-string (clojure.core/get-in letvar1484091 ["MasterUserPassword" :content]))) (letvar1484091 "LicenseModel") (clojure.core/assoc :license-model (deser-string (clojure.core/get-in letvar1484091 ["LicenseModel" :content]))) (letvar1484091 "AllocatedStorage") (clojure.core/assoc :allocated-storage (deser-integer-optional (clojure.core/get-in letvar1484091 ["AllocatedStorage" :content]))) (letvar1484091 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar1484091 ["EngineVersion" :content]))) (letvar1484091 "DBSubnetGroupName") (clojure.core/assoc :db-subnet-group-name (deser-string (clojure.core/get-in letvar1484091 ["DBSubnetGroupName" :content]))) (letvar1484091 "Port") (clojure.core/assoc :port (deser-integer-optional (clojure.core/get-in letvar1484091 ["Port" :content]))) (letvar1484091 "Iops") (clojure.core/assoc :iops (deser-integer-optional (clojure.core/get-in letvar1484091 ["Iops" :content]))) (letvar1484091 "StorageType") (clojure.core/assoc :storage-type (deser-string (clojure.core/get-in letvar1484091 ["StorageType" :content]))) (letvar1484091 "ProcessorFeatures") (clojure.core/assoc :processor-features (deser-processor-feature-list (clojure.core/get-in letvar1484091 ["ProcessorFeatures" :content]))) (letvar1484091 "CACertificateIdentifier") (clojure.core/assoc :ca-certificate-identifier (deser-string (clojure.core/get-in letvar1484091 ["CACertificateIdentifier" :content]))) (letvar1484091 "DBInstanceClass") (clojure.core/assoc :db-instance-class (deser-string (clojure.core/get-in letvar1484091 ["DBInstanceClass" :content]))) (letvar1484091 "MultiAZ") (clojure.core/assoc :multi-az (deser-boolean-optional (clojure.core/get-in letvar1484091 ["MultiAZ" :content]))))))

(clojure.core/defn- deser-subnet-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-subnet coll))) input))

(clojure.core/defn- deser-available-processor-feature [input] (clojure.core/let [letvar1484216 {"Name" (portkey.aws/search-for-tag input "Name" :flattened? nil :xmlAttribute? nil), "DefaultValue" (portkey.aws/search-for-tag input "DefaultValue" :flattened? nil :xmlAttribute? nil), "AllowedValues" (portkey.aws/search-for-tag input "AllowedValues" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1484216 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar1484216 ["Name" :content]))) (letvar1484216 "DefaultValue") (clojure.core/assoc :default-value (deser-string (clojure.core/get-in letvar1484216 ["DefaultValue" :content]))) (letvar1484216 "AllowedValues") (clojure.core/assoc :allowed-values (deser-string (clojure.core/get-in letvar1484216 ["AllowedValues" :content]))))))

(clojure.core/defn- deser-db-subnet-group [input] (clojure.core/let [letvar1484324 {"DBSubnetGroupName" (portkey.aws/search-for-tag input "DBSubnetGroupName" :flattened? nil :xmlAttribute? nil), "DBSubnetGroupDescription" (portkey.aws/search-for-tag input "DBSubnetGroupDescription" :flattened? nil :xmlAttribute? nil), "VpcId" (portkey.aws/search-for-tag input "VpcId" :flattened? nil :xmlAttribute? nil), "SubnetGroupStatus" (portkey.aws/search-for-tag input "SubnetGroupStatus" :flattened? nil :xmlAttribute? nil), "Subnets" (portkey.aws/search-for-tag input "Subnets" :flattened? nil :xmlAttribute? nil), "DBSubnetGroupArn" (portkey.aws/search-for-tag input "DBSubnetGroupArn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1484324 "DBSubnetGroupName") (clojure.core/assoc :db-subnet-group-name (deser-string (clojure.core/get-in letvar1484324 ["DBSubnetGroupName" :content]))) (letvar1484324 "DBSubnetGroupDescription") (clojure.core/assoc :db-subnet-group-description (deser-string (clojure.core/get-in letvar1484324 ["DBSubnetGroupDescription" :content]))) (letvar1484324 "VpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar1484324 ["VpcId" :content]))) (letvar1484324 "SubnetGroupStatus") (clojure.core/assoc :subnet-group-status (deser-string (clojure.core/get-in letvar1484324 ["SubnetGroupStatus" :content]))) (letvar1484324 "Subnets") (clojure.core/assoc :subnets (deser-subnet-list (clojure.core/get-in letvar1484324 ["Subnets" :content]))) (letvar1484324 "DBSubnetGroupArn") (clojure.core/assoc :db-subnet-group-arn (deser-string (clojure.core/get-in letvar1484324 ["DBSubnetGroupArn" :content]))))))

(clojure.core/defn- deser-boolean [input] (clojure.core/when-let [boolstr__21591__auto__ (portkey.aws/unbox-xml-primitive-value input)] (clojure.core/cond (clojure.core/= "true" boolstr__21591__auto__) true (clojure.core/= "false" boolstr__21591__auto__) false)))

(clojure.core/defn- response-source-not-found-fault ([input] (response-source-not-found-fault nil input)) ([resultWrapper1484328 input] (clojure.core/let [rawinput1484327 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484329 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-restore-db-cluster-to-point-in-time-result ([input] (response-restore-db-cluster-to-point-in-time-result nil input)) ([resultWrapper1484331 input] (clojure.core/let [rawinput1484330 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484332 {"DBCluster" (portkey.aws/search-for-tag rawinput1484330 "DBCluster" :flattened? nil :result-wrapper resultWrapper1484331)}] (clojure.core/cond-> {} (letvar1484332 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar1484332 ["DBCluster" :content])))))))

(clojure.core/defn- response-delete-global-cluster-result ([input] (response-delete-global-cluster-result nil input)) ([resultWrapper1484334 input] (clojure.core/let [rawinput1484333 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484335 {"GlobalCluster" (portkey.aws/search-for-tag rawinput1484333 "GlobalCluster" :flattened? nil :result-wrapper resultWrapper1484334)}] (clojure.core/cond-> {} (letvar1484335 "GlobalCluster") (clojure.core/assoc :global-cluster (deser-global-cluster (clojure.core/get-in letvar1484335 ["GlobalCluster" :content])))))))

(clojure.core/defn- response-db-instance-not-found-fault ([input] (response-db-instance-not-found-fault nil input)) ([resultWrapper1484337 input] (clojure.core/let [rawinput1484336 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484338 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-restore-db-instance-from-db-snapshot-result ([input] (response-restore-db-instance-from-db-snapshot-result nil input)) ([resultWrapper1484340 input] (clojure.core/let [rawinput1484339 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484341 {"DBInstance" (portkey.aws/search-for-tag rawinput1484339 "DBInstance" :flattened? nil :result-wrapper resultWrapper1484340)}] (clojure.core/cond-> {} (letvar1484341 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar1484341 ["DBInstance" :content])))))))

(clojure.core/defn- response-remove-source-identifier-from-subscription-result ([input] (response-remove-source-identifier-from-subscription-result nil input)) ([resultWrapper1484343 input] (clojure.core/let [rawinput1484342 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484344 {"EventSubscription" (portkey.aws/search-for-tag rawinput1484342 "EventSubscription" :flattened? nil :result-wrapper resultWrapper1484343)}] (clojure.core/cond-> {} (letvar1484344 "EventSubscription") (clojure.core/assoc :event-subscription (deser-event-subscription (clojure.core/get-in letvar1484344 ["EventSubscription" :content])))))))

(clojure.core/defn- response-db-cluster-backtrack-not-found-fault ([input] (response-db-cluster-backtrack-not-found-fault nil input)) ([resultWrapper1484346 input] (clojure.core/let [rawinput1484345 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484347 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-delete-db-snapshot-result ([input] (response-delete-db-snapshot-result nil input)) ([resultWrapper1484349 input] (clojure.core/let [rawinput1484348 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484350 {"DBSnapshot" (portkey.aws/search-for-tag rawinput1484348 "DBSnapshot" :flattened? nil :result-wrapper resultWrapper1484349)}] (clojure.core/cond-> {} (letvar1484350 "DBSnapshot") (clojure.core/assoc :db-snapshot (deser-db-snapshot (clojure.core/get-in letvar1484350 ["DBSnapshot" :content])))))))

(clojure.core/defn- response-snapshot-quota-exceeded-fault ([input] (response-snapshot-quota-exceeded-fault nil input)) ([resultWrapper1484352 input] (clojure.core/let [rawinput1484351 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484353 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-modify-global-cluster-result ([input] (response-modify-global-cluster-result nil input)) ([resultWrapper1484355 input] (clojure.core/let [rawinput1484354 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484356 {"GlobalCluster" (portkey.aws/search-for-tag rawinput1484354 "GlobalCluster" :flattened? nil :result-wrapper resultWrapper1484355)}] (clojure.core/cond-> {} (letvar1484356 "GlobalCluster") (clojure.core/assoc :global-cluster (deser-global-cluster (clojure.core/get-in letvar1484356 ["GlobalCluster" :content])))))))

(clojure.core/defn- response-domain-not-found-fault ([input] (response-domain-not-found-fault nil input)) ([resultWrapper1484358 input] (clojure.core/let [rawinput1484357 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484359 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-copy-db-parameter-group-result ([input] (response-copy-db-parameter-group-result nil input)) ([resultWrapper1484361 input] (clojure.core/let [rawinput1484360 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484362 {"DBParameterGroup" (portkey.aws/search-for-tag rawinput1484360 "DBParameterGroup" :flattened? nil :result-wrapper resultWrapper1484361)}] (clojure.core/cond-> {} (letvar1484362 "DBParameterGroup") (clojure.core/assoc :db-parameter-group (deser-db-parameter-group (clojure.core/get-in letvar1484362 ["DBParameterGroup" :content])))))))

(clojure.core/defn- response-db-cluster-endpoint-already-exists-fault ([input] (response-db-cluster-endpoint-already-exists-fault nil input)) ([resultWrapper1484364 input] (clojure.core/let [rawinput1484363 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484365 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-snapshot-already-exists-fault ([input] (response-db-snapshot-already-exists-fault nil input)) ([resultWrapper1484367 input] (clojure.core/let [rawinput1484366 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484368 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-promote-read-replica-db-cluster-result ([input] (response-promote-read-replica-db-cluster-result nil input)) ([resultWrapper1484370 input] (clojure.core/let [rawinput1484369 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484371 {"DBCluster" (portkey.aws/search-for-tag rawinput1484369 "DBCluster" :flattened? nil :result-wrapper resultWrapper1484370)}] (clojure.core/cond-> {} (letvar1484371 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar1484371 ["DBCluster" :content])))))))

(clojure.core/defn- response-restore-db-instance-to-point-in-time-result ([input] (response-restore-db-instance-to-point-in-time-result nil input)) ([resultWrapper1484373 input] (clojure.core/let [rawinput1484372 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484374 {"DBInstance" (portkey.aws/search-for-tag rawinput1484372 "DBInstance" :flattened? nil :result-wrapper resultWrapper1484373)}] (clojure.core/cond-> {} (letvar1484374 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar1484374 ["DBInstance" :content])))))))

(clojure.core/defn- response-db-parameter-group-details ([input] (response-db-parameter-group-details nil input)) ([resultWrapper1484376 input] (clojure.core/let [rawinput1484375 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484377 {"Parameters" (portkey.aws/search-for-tag rawinput1484375 "Parameters" :flattened? nil :result-wrapper resultWrapper1484376), "Marker" (portkey.aws/search-for-tag rawinput1484375 "Marker" :flattened? nil :result-wrapper resultWrapper1484376)}] (clojure.core/cond-> {} (letvar1484377 "Parameters") (clojure.core/assoc :parameters (deser-parameters-list (clojure.core/get-in letvar1484377 ["Parameters" :content]))) (letvar1484377 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484377 ["Marker" :content])))))))

(clojure.core/defn- response-source-region-message ([input] (response-source-region-message nil input)) ([resultWrapper1484379 input] (clojure.core/let [rawinput1484378 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484380 {"Marker" (portkey.aws/search-for-tag rawinput1484378 "Marker" :flattened? nil :result-wrapper resultWrapper1484379), "SourceRegions" (portkey.aws/search-for-tag rawinput1484378 "SourceRegions" :flattened? nil :result-wrapper resultWrapper1484379)}] (clojure.core/cond-> {} (letvar1484380 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484380 ["Marker" :content]))) (letvar1484380 "SourceRegions") (clojure.core/assoc :source-regions (deser-source-region-list (clojure.core/get-in letvar1484380 ["SourceRegions" :content])))))))

(clojure.core/defn- response-invalid-db-cluster-capacity-fault ([input] (response-invalid-db-cluster-capacity-fault nil input)) ([resultWrapper1484382 input] (clojure.core/let [rawinput1484381 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484383 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-global-cluster-quota-exceeded-fault ([input] (response-global-cluster-quota-exceeded-fault nil input)) ([resultWrapper1484385 input] (clojure.core/let [rawinput1484384 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484386 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-already-exists-fault ([input] (response-db-cluster-already-exists-fault nil input)) ([resultWrapper1484388 input] (clojure.core/let [rawinput1484387 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484389 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-start-db-cluster-result ([input] (response-start-db-cluster-result nil input)) ([resultWrapper1484391 input] (clojure.core/let [rawinput1484390 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484392 {"DBCluster" (portkey.aws/search-for-tag rawinput1484390 "DBCluster" :flattened? nil :result-wrapper resultWrapper1484391)}] (clojure.core/cond-> {} (letvar1484392 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar1484392 ["DBCluster" :content])))))))

(clojure.core/defn- response-create-db-cluster-result ([input] (response-create-db-cluster-result nil input)) ([resultWrapper1484394 input] (clojure.core/let [rawinput1484393 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484395 {"DBCluster" (portkey.aws/search-for-tag rawinput1484393 "DBCluster" :flattened? nil :result-wrapper resultWrapper1484394)}] (clojure.core/cond-> {} (letvar1484395 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar1484395 ["DBCluster" :content])))))))

(clojure.core/defn- response-invalid-db-instance-state-fault ([input] (response-invalid-db-instance-state-fault nil input)) ([resultWrapper1484397 input] (clojure.core/let [rawinput1484396 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484398 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-sns-no-authorization-fault ([input] (response-sns-no-authorization-fault nil input)) ([resultWrapper1484400 input] (clojure.core/let [rawinput1484399 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484401 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-copy-option-group-result ([input] (response-copy-option-group-result nil input)) ([resultWrapper1484403 input] (clojure.core/let [rawinput1484402 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484404 {"OptionGroup" (portkey.aws/search-for-tag rawinput1484402 "OptionGroup" :flattened? nil :result-wrapper resultWrapper1484403)}] (clojure.core/cond-> {} (letvar1484404 "OptionGroup") (clojure.core/assoc :option-group (deser-option-group (clojure.core/get-in letvar1484404 ["OptionGroup" :content])))))))

(clojure.core/defn- response-reboot-db-instance-result ([input] (response-reboot-db-instance-result nil input)) ([resultWrapper1484406 input] (clojure.core/let [rawinput1484405 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484407 {"DBInstance" (portkey.aws/search-for-tag rawinput1484405 "DBInstance" :flattened? nil :result-wrapper resultWrapper1484406)}] (clojure.core/cond-> {} (letvar1484407 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar1484407 ["DBInstance" :content])))))))

(clojure.core/defn- response-instance-quota-exceeded-fault ([input] (response-instance-quota-exceeded-fault nil input)) ([resultWrapper1484409 input] (clojure.core/let [rawinput1484408 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484410 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-parameter-group-name-message ([input] (response-db-parameter-group-name-message nil input)) ([resultWrapper1484412 input] (clojure.core/let [rawinput1484411 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484413 {"DBParameterGroupName" (portkey.aws/search-for-tag rawinput1484411 "DBParameterGroupName" :flattened? nil :result-wrapper resultWrapper1484412)}] (clojure.core/cond-> {} (letvar1484413 "DBParameterGroupName") (clojure.core/assoc :db-parameter-group-name (deser-string (clojure.core/get-in letvar1484413 ["DBParameterGroupName" :content])))))))

(clojure.core/defn- response-apply-pending-maintenance-action-result ([input] (response-apply-pending-maintenance-action-result nil input)) ([resultWrapper1484415 input] (clojure.core/let [rawinput1484414 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484416 {"ResourcePendingMaintenanceActions" (portkey.aws/search-for-tag rawinput1484414 "ResourcePendingMaintenanceActions" :flattened? nil :result-wrapper resultWrapper1484415)}] (clojure.core/cond-> {} (letvar1484416 "ResourcePendingMaintenanceActions") (clojure.core/assoc :resource-pending-maintenance-actions (deser-resource-pending-maintenance-actions (clojure.core/get-in letvar1484416 ["ResourcePendingMaintenanceActions" :content])))))))

(clojure.core/defn- response-db-cluster-parameter-group-name-message ([input] (response-db-cluster-parameter-group-name-message nil input)) ([resultWrapper1484418 input] (clojure.core/let [rawinput1484417 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484419 {"DBClusterParameterGroupName" (portkey.aws/search-for-tag rawinput1484417 "DBClusterParameterGroupName" :flattened? nil :result-wrapper resultWrapper1484418)}] (clojure.core/cond-> {} (letvar1484419 "DBClusterParameterGroupName") (clojure.core/assoc :db-cluster-parameter-group-name (deser-string (clojure.core/get-in letvar1484419 ["DBClusterParameterGroupName" :content])))))))

(clojure.core/defn- response-db-cluster-endpoint-not-found-fault ([input] (response-db-cluster-endpoint-not-found-fault nil input)) ([resultWrapper1484421 input] (clojure.core/let [rawinput1484420 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484422 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-restore-db-cluster-from-snapshot-result ([input] (response-restore-db-cluster-from-snapshot-result nil input)) ([resultWrapper1484424 input] (clojure.core/let [rawinput1484423 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484425 {"DBCluster" (portkey.aws/search-for-tag rawinput1484423 "DBCluster" :flattened? nil :result-wrapper resultWrapper1484424)}] (clojure.core/cond-> {} (letvar1484425 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar1484425 ["DBCluster" :content])))))))

(clojure.core/defn- response-option-group-not-found-fault ([input] (response-option-group-not-found-fault nil input)) ([resultWrapper1484427 input] (clojure.core/let [rawinput1484426 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484428 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-subnet-group-message ([input] (response-db-subnet-group-message nil input)) ([resultWrapper1484430 input] (clojure.core/let [rawinput1484429 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484431 {"Marker" (portkey.aws/search-for-tag rawinput1484429 "Marker" :flattened? nil :result-wrapper resultWrapper1484430), "DBSubnetGroups" (portkey.aws/search-for-tag rawinput1484429 "DBSubnetGroups" :flattened? nil :result-wrapper resultWrapper1484430)}] (clojure.core/cond-> {} (letvar1484431 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484431 ["Marker" :content]))) (letvar1484431 "DBSubnetGroups") (clojure.core/assoc :db-subnet-groups (deser-db-subnet-groups (clojure.core/get-in letvar1484431 ["DBSubnetGroups" :content])))))))

(clojure.core/defn- response-promote-read-replica-result ([input] (response-promote-read-replica-result nil input)) ([resultWrapper1484433 input] (clojure.core/let [rawinput1484432 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484434 {"DBInstance" (portkey.aws/search-for-tag rawinput1484432 "DBInstance" :flattened? nil :result-wrapper resultWrapper1484433)}] (clojure.core/cond-> {} (letvar1484434 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar1484434 ["DBInstance" :content])))))))

(clojure.core/defn- response-invalid-db-cluster-endpoint-state-fault ([input] (response-invalid-db-cluster-endpoint-state-fault nil input)) ([resultWrapper1484436 input] (clojure.core/let [rawinput1484435 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484437 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-vpc-network-state-fault ([input] (response-invalid-vpc-network-state-fault nil input)) ([resultWrapper1484439 input] (clojure.core/let [rawinput1484438 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484440 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-role-already-exists-fault ([input] (response-db-cluster-role-already-exists-fault nil input)) ([resultWrapper1484442 input] (clojure.core/let [rawinput1484441 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484443 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-instance-already-exists-fault ([input] (response-db-instance-already-exists-fault nil input)) ([resultWrapper1484445 input] (clojure.core/let [rawinput1484444 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484446 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-shared-snapshot-quota-exceeded-fault ([input] (response-shared-snapshot-quota-exceeded-fault nil input)) ([resultWrapper1484448 input] (clojure.core/let [rawinput1484447 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484449 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-subnet-group-fault ([input] (response-invalid-db-subnet-group-fault nil input)) ([resultWrapper1484451 input] (clojure.core/let [rawinput1484450 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484452 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-certificate-not-found-fault ([input] (response-certificate-not-found-fault nil input)) ([resultWrapper1484454 input] (clojure.core/let [rawinput1484453 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484455 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-delete-db-cluster-snapshot-result ([input] (response-delete-db-cluster-snapshot-result nil input)) ([resultWrapper1484457 input] (clojure.core/let [rawinput1484456 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484458 {"DBClusterSnapshot" (portkey.aws/search-for-tag rawinput1484456 "DBClusterSnapshot" :flattened? nil :result-wrapper resultWrapper1484457)}] (clojure.core/cond-> {} (letvar1484458 "DBClusterSnapshot") (clojure.core/assoc :db-cluster-snapshot (deser-db-cluster-snapshot (clojure.core/get-in letvar1484458 ["DBClusterSnapshot" :content])))))))

(clojure.core/defn- response-copy-db-cluster-snapshot-result ([input] (response-copy-db-cluster-snapshot-result nil input)) ([resultWrapper1484460 input] (clojure.core/let [rawinput1484459 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484461 {"DBClusterSnapshot" (portkey.aws/search-for-tag rawinput1484459 "DBClusterSnapshot" :flattened? nil :result-wrapper resultWrapper1484460)}] (clojure.core/cond-> {} (letvar1484461 "DBClusterSnapshot") (clojure.core/assoc :db-cluster-snapshot (deser-db-cluster-snapshot (clojure.core/get-in letvar1484461 ["DBClusterSnapshot" :content])))))))

(clojure.core/defn- response-db-cluster-backtrack ([input] (response-db-cluster-backtrack nil input)) ([resultWrapper1484463 input] (clojure.core/let [rawinput1484462 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484464 {"DBClusterIdentifier" (portkey.aws/search-for-tag rawinput1484462 "DBClusterIdentifier" :flattened? nil :result-wrapper resultWrapper1484463), "BacktrackIdentifier" (portkey.aws/search-for-tag rawinput1484462 "BacktrackIdentifier" :flattened? nil :result-wrapper resultWrapper1484463), "BacktrackTo" (portkey.aws/search-for-tag rawinput1484462 "BacktrackTo" :flattened? nil :result-wrapper resultWrapper1484463), "BacktrackedFrom" (portkey.aws/search-for-tag rawinput1484462 "BacktrackedFrom" :flattened? nil :result-wrapper resultWrapper1484463), "BacktrackRequestCreationTime" (portkey.aws/search-for-tag rawinput1484462 "BacktrackRequestCreationTime" :flattened? nil :result-wrapper resultWrapper1484463), "Status" (portkey.aws/search-for-tag rawinput1484462 "Status" :flattened? nil :result-wrapper resultWrapper1484463)}] (clojure.core/cond-> {} (letvar1484464 "DBClusterIdentifier") (clojure.core/assoc :db-cluster-identifier (deser-string (clojure.core/get-in letvar1484464 ["DBClusterIdentifier" :content]))) (letvar1484464 "BacktrackIdentifier") (clojure.core/assoc :backtrack-identifier (deser-string (clojure.core/get-in letvar1484464 ["BacktrackIdentifier" :content]))) (letvar1484464 "BacktrackTo") (clojure.core/assoc :backtrack-to (deser-t-stamp (clojure.core/get-in letvar1484464 ["BacktrackTo" :content]))) (letvar1484464 "BacktrackedFrom") (clojure.core/assoc :backtracked-from (deser-t-stamp (clojure.core/get-in letvar1484464 ["BacktrackedFrom" :content]))) (letvar1484464 "BacktrackRequestCreationTime") (clojure.core/assoc :backtrack-request-creation-time (deser-t-stamp (clojure.core/get-in letvar1484464 ["BacktrackRequestCreationTime" :content]))) (letvar1484464 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar1484464 ["Status" :content])))))))

(clojure.core/defn- response-orderable-db-instance-options-message ([input] (response-orderable-db-instance-options-message nil input)) ([resultWrapper1484466 input] (clojure.core/let [rawinput1484465 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484467 {"OrderableDBInstanceOptions" (portkey.aws/search-for-tag rawinput1484465 "OrderableDBInstanceOptions" :flattened? nil :result-wrapper resultWrapper1484466), "Marker" (portkey.aws/search-for-tag rawinput1484465 "Marker" :flattened? nil :result-wrapper resultWrapper1484466)}] (clojure.core/cond-> {} (letvar1484467 "OrderableDBInstanceOptions") (clojure.core/assoc :orderable-db-instance-options (deser-orderable-db-instance-options-list (clojure.core/get-in letvar1484467 ["OrderableDBInstanceOptions" :content]))) (letvar1484467 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484467 ["Marker" :content])))))))

(clojure.core/defn- response-event-categories-message ([input] (response-event-categories-message nil input)) ([resultWrapper1484469 input] (clojure.core/let [rawinput1484468 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484470 {"EventCategoriesMapList" (portkey.aws/search-for-tag rawinput1484468 "EventCategoriesMapList" :flattened? nil :result-wrapper resultWrapper1484469)}] (clojure.core/cond-> {} (letvar1484470 "EventCategoriesMapList") (clojure.core/assoc :event-categories-map-list (deser-event-categories-map-list (clojure.core/get-in letvar1484470 ["EventCategoriesMapList" :content])))))))

(clojure.core/defn- response-subscription-not-found-fault ([input] (response-subscription-not-found-fault nil input)) ([resultWrapper1484472 input] (clojure.core/let [rawinput1484471 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484473 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-authorization-already-exists-fault ([input] (response-authorization-already-exists-fault nil input)) ([resultWrapper1484475 input] (clojure.core/let [rawinput1484474 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484476 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-instance-automated-backup-not-found-fault ([input] (response-db-instance-automated-backup-not-found-fault nil input)) ([resultWrapper1484478 input] (clojure.core/let [rawinput1484477 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484479 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-subnet-group-state-fault ([input] (response-invalid-db-subnet-group-state-fault nil input)) ([resultWrapper1484481 input] (clojure.core/let [rawinput1484480 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484482 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-option-group-already-exists-fault ([input] (response-option-group-already-exists-fault nil input)) ([resultWrapper1484484 input] (clojure.core/let [rawinput1484483 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484485 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-db-snapshot-result ([input] (response-create-db-snapshot-result nil input)) ([resultWrapper1484487 input] (clojure.core/let [rawinput1484486 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484488 {"DBSnapshot" (portkey.aws/search-for-tag rawinput1484486 "DBSnapshot" :flattened? nil :result-wrapper resultWrapper1484487)}] (clojure.core/cond-> {} (letvar1484488 "DBSnapshot") (clojure.core/assoc :db-snapshot (deser-db-snapshot (clojure.core/get-in letvar1484488 ["DBSnapshot" :content])))))))

(clojure.core/defn- response-sns-topic-arn-not-found-fault ([input] (response-sns-topic-arn-not-found-fault nil input)) ([resultWrapper1484490 input] (clojure.core/let [rawinput1484489 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484491 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-not-found-fault ([input] (response-db-cluster-not-found-fault nil input)) ([resultWrapper1484493 input] (clojure.core/let [rawinput1484492 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484494 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-events-message ([input] (response-events-message nil input)) ([resultWrapper1484496 input] (clojure.core/let [rawinput1484495 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484497 {"Marker" (portkey.aws/search-for-tag rawinput1484495 "Marker" :flattened? nil :result-wrapper resultWrapper1484496), "Events" (portkey.aws/search-for-tag rawinput1484495 "Events" :flattened? nil :result-wrapper resultWrapper1484496)}] (clojure.core/cond-> {} (letvar1484497 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484497 ["Marker" :content]))) (letvar1484497 "Events") (clojure.core/assoc :events (deser-event-list (clojure.core/get-in letvar1484497 ["Events" :content])))))))

(clojure.core/defn- response-account-attributes-message ([input] (response-account-attributes-message nil input)) ([resultWrapper1484499 input] (clojure.core/let [rawinput1484498 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484500 {"AccountQuotas" (portkey.aws/search-for-tag rawinput1484498 "AccountQuotas" :flattened? nil :result-wrapper resultWrapper1484499)}] (clojure.core/cond-> {} (letvar1484500 "AccountQuotas") (clojure.core/assoc :account-quotas (deser-account-quota-list (clojure.core/get-in letvar1484500 ["AccountQuotas" :content])))))))

(clojure.core/defn- response-db-cluster-snapshot-message ([input] (response-db-cluster-snapshot-message nil input)) ([resultWrapper1484502 input] (clojure.core/let [rawinput1484501 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484503 {"Marker" (portkey.aws/search-for-tag rawinput1484501 "Marker" :flattened? nil :result-wrapper resultWrapper1484502), "DBClusterSnapshots" (portkey.aws/search-for-tag rawinput1484501 "DBClusterSnapshots" :flattened? nil :result-wrapper resultWrapper1484502)}] (clojure.core/cond-> {} (letvar1484503 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484503 ["Marker" :content]))) (letvar1484503 "DBClusterSnapshots") (clojure.core/assoc :db-cluster-snapshots (deser-db-cluster-snapshot-list (clojure.core/get-in letvar1484503 ["DBClusterSnapshots" :content])))))))

(clojure.core/defn- response-db-snapshot-message ([input] (response-db-snapshot-message nil input)) ([resultWrapper1484505 input] (clojure.core/let [rawinput1484504 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484506 {"Marker" (portkey.aws/search-for-tag rawinput1484504 "Marker" :flattened? nil :result-wrapper resultWrapper1484505), "DBSnapshots" (portkey.aws/search-for-tag rawinput1484504 "DBSnapshots" :flattened? nil :result-wrapper resultWrapper1484505)}] (clojure.core/cond-> {} (letvar1484506 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484506 ["Marker" :content]))) (letvar1484506 "DBSnapshots") (clojure.core/assoc :db-snapshots (deser-db-snapshot-list (clojure.core/get-in letvar1484506 ["DBSnapshots" :content])))))))

(clojure.core/defn- response-subscription-category-not-found-fault ([input] (response-subscription-category-not-found-fault nil input)) ([resultWrapper1484508 input] (clojure.core/let [rawinput1484507 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484509 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-option-group-options-message ([input] (response-option-group-options-message nil input)) ([resultWrapper1484511 input] (clojure.core/let [rawinput1484510 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484512 {"OptionGroupOptions" (portkey.aws/search-for-tag rawinput1484510 "OptionGroupOptions" :flattened? nil :result-wrapper resultWrapper1484511), "Marker" (portkey.aws/search-for-tag rawinput1484510 "Marker" :flattened? nil :result-wrapper resultWrapper1484511)}] (clojure.core/cond-> {} (letvar1484512 "OptionGroupOptions") (clojure.core/assoc :option-group-options (deser-option-group-options-list (clojure.core/get-in letvar1484512 ["OptionGroupOptions" :content]))) (letvar1484512 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484512 ["Marker" :content])))))))

(clojure.core/defn- response-db-cluster-endpoint-message ([input] (response-db-cluster-endpoint-message nil input)) ([resultWrapper1484514 input] (clojure.core/let [rawinput1484513 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484515 {"Marker" (portkey.aws/search-for-tag rawinput1484513 "Marker" :flattened? nil :result-wrapper resultWrapper1484514), "DBClusterEndpoints" (portkey.aws/search-for-tag rawinput1484513 "DBClusterEndpoints" :flattened? nil :result-wrapper resultWrapper1484514)}] (clojure.core/cond-> {} (letvar1484515 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484515 ["Marker" :content]))) (letvar1484515 "DBClusterEndpoints") (clojure.core/assoc :db-cluster-endpoints (deser-db-cluster-endpoint-list (clojure.core/get-in letvar1484515 ["DBClusterEndpoints" :content])))))))

(clojure.core/defn- response-revoke-db-security-group-ingress-result ([input] (response-revoke-db-security-group-ingress-result nil input)) ([resultWrapper1484517 input] (clojure.core/let [rawinput1484516 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484518 {"DBSecurityGroup" (portkey.aws/search-for-tag rawinput1484516 "DBSecurityGroup" :flattened? nil :result-wrapper resultWrapper1484517)}] (clojure.core/cond-> {} (letvar1484518 "DBSecurityGroup") (clojure.core/assoc :db-security-group (deser-db-security-group (clojure.core/get-in letvar1484518 ["DBSecurityGroup" :content])))))))

(clojure.core/defn- response-event-subscriptions-message ([input] (response-event-subscriptions-message nil input)) ([resultWrapper1484520 input] (clojure.core/let [rawinput1484519 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484521 {"Marker" (portkey.aws/search-for-tag rawinput1484519 "Marker" :flattened? nil :result-wrapper resultWrapper1484520), "EventSubscriptionsList" (portkey.aws/search-for-tag rawinput1484519 "EventSubscriptionsList" :flattened? nil :result-wrapper resultWrapper1484520)}] (clojure.core/cond-> {} (letvar1484521 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484521 ["Marker" :content]))) (letvar1484521 "EventSubscriptionsList") (clojure.core/assoc :event-subscriptions-list (deser-event-subscriptions-list (clojure.core/get-in letvar1484521 ["EventSubscriptionsList" :content])))))))

(clojure.core/defn- response-reserved-db-instances-offering-message ([input] (response-reserved-db-instances-offering-message nil input)) ([resultWrapper1484523 input] (clojure.core/let [rawinput1484522 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484524 {"Marker" (portkey.aws/search-for-tag rawinput1484522 "Marker" :flattened? nil :result-wrapper resultWrapper1484523), "ReservedDBInstancesOfferings" (portkey.aws/search-for-tag rawinput1484522 "ReservedDBInstancesOfferings" :flattened? nil :result-wrapper resultWrapper1484523)}] (clojure.core/cond-> {} (letvar1484524 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484524 ["Marker" :content]))) (letvar1484524 "ReservedDBInstancesOfferings") (clojure.core/assoc :reserved-db-instances-offerings (deser-reserved-db-instances-offering-list (clojure.core/get-in letvar1484524 ["ReservedDBInstancesOfferings" :content])))))))

(clojure.core/defn- response-create-db-subnet-group-result ([input] (response-create-db-subnet-group-result nil input)) ([resultWrapper1484526 input] (clojure.core/let [rawinput1484525 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484527 {"DBSubnetGroup" (portkey.aws/search-for-tag rawinput1484525 "DBSubnetGroup" :flattened? nil :result-wrapper resultWrapper1484526)}] (clojure.core/cond-> {} (letvar1484527 "DBSubnetGroup") (clojure.core/assoc :db-subnet-group (deser-db-subnet-group (clojure.core/get-in letvar1484527 ["DBSubnetGroup" :content])))))))

(clojure.core/defn- response-create-event-subscription-result ([input] (response-create-event-subscription-result nil input)) ([resultWrapper1484529 input] (clojure.core/let [rawinput1484528 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484530 {"EventSubscription" (portkey.aws/search-for-tag rawinput1484528 "EventSubscription" :flattened? nil :result-wrapper resultWrapper1484529)}] (clojure.core/cond-> {} (letvar1484530 "EventSubscription") (clojure.core/assoc :event-subscription (deser-event-subscription (clojure.core/get-in letvar1484530 ["EventSubscription" :content])))))))

(clojure.core/defn- response-db-cluster-parameter-group-details ([input] (response-db-cluster-parameter-group-details nil input)) ([resultWrapper1484532 input] (clojure.core/let [rawinput1484531 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484533 {"Parameters" (portkey.aws/search-for-tag rawinput1484531 "Parameters" :flattened? nil :result-wrapper resultWrapper1484532), "Marker" (portkey.aws/search-for-tag rawinput1484531 "Marker" :flattened? nil :result-wrapper resultWrapper1484532)}] (clojure.core/cond-> {} (letvar1484533 "Parameters") (clojure.core/assoc :parameters (deser-parameters-list (clojure.core/get-in letvar1484533 ["Parameters" :content]))) (letvar1484533 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484533 ["Marker" :content])))))))

(clojure.core/defn- response-create-db-security-group-result ([input] (response-create-db-security-group-result nil input)) ([resultWrapper1484535 input] (clojure.core/let [rawinput1484534 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484536 {"DBSecurityGroup" (portkey.aws/search-for-tag rawinput1484534 "DBSecurityGroup" :flattened? nil :result-wrapper resultWrapper1484535)}] (clojure.core/cond-> {} (letvar1484536 "DBSecurityGroup") (clojure.core/assoc :db-security-group (deser-db-security-group (clojure.core/get-in letvar1484536 ["DBSecurityGroup" :content])))))))

(clojure.core/defn- response-create-global-cluster-result ([input] (response-create-global-cluster-result nil input)) ([resultWrapper1484538 input] (clojure.core/let [rawinput1484537 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484539 {"GlobalCluster" (portkey.aws/search-for-tag rawinput1484537 "GlobalCluster" :flattened? nil :result-wrapper resultWrapper1484538)}] (clojure.core/cond-> {} (letvar1484539 "GlobalCluster") (clojure.core/assoc :global-cluster (deser-global-cluster (clojure.core/get-in letvar1484539 ["GlobalCluster" :content])))))))

(clojure.core/defn- response-invalid-db-security-group-state-fault ([input] (response-invalid-db-security-group-state-fault nil input)) ([resultWrapper1484541 input] (clojure.core/let [rawinput1484540 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484542 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-option-groups ([input] (response-option-groups nil input)) ([resultWrapper1484544 input] (clojure.core/let [rawinput1484543 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484545 {"OptionGroupsList" (portkey.aws/search-for-tag rawinput1484543 "OptionGroupsList" :flattened? nil :result-wrapper resultWrapper1484544), "Marker" (portkey.aws/search-for-tag rawinput1484543 "Marker" :flattened? nil :result-wrapper resultWrapper1484544)}] (clojure.core/cond-> {} (letvar1484545 "OptionGroupsList") (clojure.core/assoc :option-groups-list (deser-option-groups-list (clojure.core/get-in letvar1484545 ["OptionGroupsList" :content]))) (letvar1484545 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484545 ["Marker" :content])))))))

(clojure.core/defn- response-storage-type-not-supported-fault ([input] (response-storage-type-not-supported-fault nil input)) ([resultWrapper1484547 input] (clojure.core/let [rawinput1484546 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484548 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-role-not-found-fault ([input] (response-db-cluster-role-not-found-fault nil input)) ([resultWrapper1484550 input] (clojure.core/let [rawinput1484549 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484551 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-parameter-group-not-found-fault ([input] (response-db-cluster-parameter-group-not-found-fault nil input)) ([resultWrapper1484553 input] (clojure.core/let [rawinput1484552 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484554 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-authorize-db-security-group-ingress-result ([input] (response-authorize-db-security-group-ingress-result nil input)) ([resultWrapper1484556 input] (clojure.core/let [rawinput1484555 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484557 {"DBSecurityGroup" (portkey.aws/search-for-tag rawinput1484555 "DBSecurityGroup" :flattened? nil :result-wrapper resultWrapper1484556)}] (clojure.core/cond-> {} (letvar1484557 "DBSecurityGroup") (clojure.core/assoc :db-security-group (deser-db-security-group (clojure.core/get-in letvar1484557 ["DBSecurityGroup" :content])))))))

(clojure.core/defn- response-db-subnet-group-does-not-cover-enough-a-zs ([input] (response-db-subnet-group-does-not-cover-enough-a-zs nil input)) ([resultWrapper1484559 input] (clojure.core/let [rawinput1484558 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484560 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-parameter-groups-message ([input] (response-db-parameter-groups-message nil input)) ([resultWrapper1484562 input] (clojure.core/let [rawinput1484561 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484563 {"Marker" (portkey.aws/search-for-tag rawinput1484561 "Marker" :flattened? nil :result-wrapper resultWrapper1484562), "DBParameterGroups" (portkey.aws/search-for-tag rawinput1484561 "DBParameterGroups" :flattened? nil :result-wrapper resultWrapper1484562)}] (clojure.core/cond-> {} (letvar1484563 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484563 ["Marker" :content]))) (letvar1484563 "DBParameterGroups") (clojure.core/assoc :db-parameter-groups (deser-db-parameter-group-list (clojure.core/get-in letvar1484563 ["DBParameterGroups" :content])))))))

(clojure.core/defn- response-describe-engine-default-parameters-result ([input] (response-describe-engine-default-parameters-result nil input)) ([resultWrapper1484565 input] (clojure.core/let [rawinput1484564 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484566 {"EngineDefaults" (portkey.aws/search-for-tag rawinput1484564 "EngineDefaults" :flattened? nil :result-wrapper resultWrapper1484565)}] (clojure.core/cond-> {} (letvar1484566 "EngineDefaults") (clojure.core/assoc :engine-defaults (deser-engine-defaults (clojure.core/get-in letvar1484566 ["EngineDefaults" :content])))))))

(clojure.core/defn- response-db-cluster-snapshot-already-exists-fault ([input] (response-db-cluster-snapshot-already-exists-fault nil input)) ([resultWrapper1484568 input] (clojure.core/let [rawinput1484567 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484569 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-authorization-not-found-fault ([input] (response-authorization-not-found-fault nil input)) ([resultWrapper1484571 input] (clojure.core/let [rawinput1484570 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484572 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-role-quota-exceeded-fault ([input] (response-db-cluster-role-quota-exceeded-fault nil input)) ([resultWrapper1484574 input] (clojure.core/let [rawinput1484573 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484575 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-db-instance-result ([input] (response-create-db-instance-result nil input)) ([resultWrapper1484577 input] (clojure.core/let [rawinput1484576 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484578 {"DBInstance" (portkey.aws/search-for-tag rawinput1484576 "DBInstance" :flattened? nil :result-wrapper resultWrapper1484577)}] (clojure.core/cond-> {} (letvar1484578 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar1484578 ["DBInstance" :content])))))))

(clojure.core/defn- response-copy-db-cluster-parameter-group-result ([input] (response-copy-db-cluster-parameter-group-result nil input)) ([resultWrapper1484580 input] (clojure.core/let [rawinput1484579 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484581 {"DBClusterParameterGroup" (portkey.aws/search-for-tag rawinput1484579 "DBClusterParameterGroup" :flattened? nil :result-wrapper resultWrapper1484580)}] (clojure.core/cond-> {} (letvar1484581 "DBClusterParameterGroup") (clojure.core/assoc :db-cluster-parameter-group (deser-db-cluster-parameter-group (clojure.core/get-in letvar1484581 ["DBClusterParameterGroup" :content])))))))

(clojure.core/defn- response-subnet-already-in-use ([input] (response-subnet-already-in-use nil input)) ([resultWrapper1484583 input] (clojure.core/let [rawinput1484582 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484584 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-insufficient-storage-cluster-capacity-fault ([input] (response-insufficient-storage-cluster-capacity-fault nil input)) ([resultWrapper1484586 input] (clojure.core/let [rawinput1484585 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484587 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-snapshot-not-found-fault ([input] (response-db-cluster-snapshot-not-found-fault nil input)) ([resultWrapper1484589 input] (clojure.core/let [rawinput1484588 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484590 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-option-group-result ([input] (response-create-option-group-result nil input)) ([resultWrapper1484592 input] (clojure.core/let [rawinput1484591 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484593 {"OptionGroup" (portkey.aws/search-for-tag rawinput1484591 "OptionGroup" :flattened? nil :result-wrapper resultWrapper1484592)}] (clojure.core/cond-> {} (letvar1484593 "OptionGroup") (clojure.core/assoc :option-group (deser-option-group (clojure.core/get-in letvar1484593 ["OptionGroup" :content])))))))

(clojure.core/defn- response-copy-db-snapshot-result ([input] (response-copy-db-snapshot-result nil input)) ([resultWrapper1484595 input] (clojure.core/let [rawinput1484594 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484596 {"DBSnapshot" (portkey.aws/search-for-tag rawinput1484594 "DBSnapshot" :flattened? nil :result-wrapper resultWrapper1484595)}] (clojure.core/cond-> {} (letvar1484596 "DBSnapshot") (clojure.core/assoc :db-snapshot (deser-db-snapshot (clojure.core/get-in letvar1484596 ["DBSnapshot" :content])))))))

(clojure.core/defn- response-invalid-db-cluster-state-fault ([input] (response-invalid-db-cluster-state-fault nil input)) ([resultWrapper1484598 input] (clojure.core/let [rawinput1484597 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484599 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-certificate-message ([input] (response-certificate-message nil input)) ([resultWrapper1484601 input] (clojure.core/let [rawinput1484600 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484602 {"Certificates" (portkey.aws/search-for-tag rawinput1484600 "Certificates" :flattened? nil :result-wrapper resultWrapper1484601), "Marker" (portkey.aws/search-for-tag rawinput1484600 "Marker" :flattened? nil :result-wrapper resultWrapper1484601)}] (clojure.core/cond-> {} (letvar1484602 "Certificates") (clojure.core/assoc :certificates (deser-certificate-list (clojure.core/get-in letvar1484602 ["Certificates" :content]))) (letvar1484602 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484602 ["Marker" :content])))))))

(clojure.core/defn- response-modify-db-subnet-group-result ([input] (response-modify-db-subnet-group-result nil input)) ([resultWrapper1484604 input] (clojure.core/let [rawinput1484603 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484605 {"DBSubnetGroup" (portkey.aws/search-for-tag rawinput1484603 "DBSubnetGroup" :flattened? nil :result-wrapper resultWrapper1484604)}] (clojure.core/cond-> {} (letvar1484605 "DBSubnetGroup") (clojure.core/assoc :db-subnet-group (deser-db-subnet-group (clojure.core/get-in letvar1484605 ["DBSubnetGroup" :content])))))))

(clojure.core/defn- response-invalid-db-instance-automated-backup-state-fault ([input] (response-invalid-db-instance-automated-backup-state-fault nil input)) ([resultWrapper1484607 input] (clojure.core/let [rawinput1484606 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484608 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-option-group-quota-exceeded-fault ([input] (response-option-group-quota-exceeded-fault nil input)) ([resultWrapper1484610 input] (clojure.core/let [rawinput1484609 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484611 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-subnet ([input] (response-invalid-subnet nil input)) ([resultWrapper1484613 input] (clojure.core/let [rawinput1484612 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484614 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-modify-db-snapshot-result ([input] (response-modify-db-snapshot-result nil input)) ([resultWrapper1484616 input] (clojure.core/let [rawinput1484615 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484617 {"DBSnapshot" (portkey.aws/search-for-tag rawinput1484615 "DBSnapshot" :flattened? nil :result-wrapper resultWrapper1484616)}] (clojure.core/cond-> {} (letvar1484617 "DBSnapshot") (clojure.core/assoc :db-snapshot (deser-db-snapshot (clojure.core/get-in letvar1484617 ["DBSnapshot" :content])))))))

(clojure.core/defn- response-modify-option-group-result ([input] (response-modify-option-group-result nil input)) ([resultWrapper1484619 input] (clojure.core/let [rawinput1484618 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484620 {"OptionGroup" (portkey.aws/search-for-tag rawinput1484618 "OptionGroup" :flattened? nil :result-wrapper resultWrapper1484619)}] (clojure.core/cond-> {} (letvar1484620 "OptionGroup") (clojure.core/assoc :option-group (deser-option-group (clojure.core/get-in letvar1484620 ["OptionGroup" :content])))))))

(clojure.core/defn- response-invalid-global-cluster-state-fault ([input] (response-invalid-global-cluster-state-fault nil input)) ([resultWrapper1484622 input] (clojure.core/let [rawinput1484621 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484623 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-instance-automated-backup-message ([input] (response-db-instance-automated-backup-message nil input)) ([resultWrapper1484625 input] (clojure.core/let [rawinput1484624 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484626 {"Marker" (portkey.aws/search-for-tag rawinput1484624 "Marker" :flattened? nil :result-wrapper resultWrapper1484625), "DBInstanceAutomatedBackups" (portkey.aws/search-for-tag rawinput1484624 "DBInstanceAutomatedBackups" :flattened? nil :result-wrapper resultWrapper1484625)}] (clojure.core/cond-> {} (letvar1484626 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484626 ["Marker" :content]))) (letvar1484626 "DBInstanceAutomatedBackups") (clojure.core/assoc :db-instance-automated-backups (deser-db-instance-automated-backup-list (clojure.core/get-in letvar1484626 ["DBInstanceAutomatedBackups" :content])))))))

(clojure.core/defn- response-subscription-already-exist-fault ([input] (response-subscription-already-exist-fault nil input)) ([resultWrapper1484628 input] (clojure.core/let [rawinput1484627 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484629 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-upgrade-dependency-failure-fault ([input] (response-db-upgrade-dependency-failure-fault nil input)) ([resultWrapper1484631 input] (clojure.core/let [rawinput1484630 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484632 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-delete-db-instance-automated-backup-result ([input] (response-delete-db-instance-automated-backup-result nil input)) ([resultWrapper1484634 input] (clojure.core/let [rawinput1484633 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484635 {"DBInstanceAutomatedBackup" (portkey.aws/search-for-tag rawinput1484633 "DBInstanceAutomatedBackup" :flattened? nil :result-wrapper resultWrapper1484634)}] (clojure.core/cond-> {} (letvar1484635 "DBInstanceAutomatedBackup") (clojure.core/assoc :db-instance-automated-backup (deser-db-instance-automated-backup (clojure.core/get-in letvar1484635 ["DBInstanceAutomatedBackup" :content])))))))

(clojure.core/defn- response-db-cluster-quota-exceeded-fault ([input] (response-db-cluster-quota-exceeded-fault nil input)) ([resultWrapper1484637 input] (clojure.core/let [rawinput1484636 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484638 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-event-subscription-state-fault ([input] (response-invalid-event-subscription-state-fault nil input)) ([resultWrapper1484640 input] (clojure.core/let [rawinput1484639 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484641 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-restore-db-cluster-from-s-3-result ([input] (response-restore-db-cluster-from-s-3-result nil input)) ([resultWrapper1484643 input] (clojure.core/let [rawinput1484642 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484644 {"DBCluster" (portkey.aws/search-for-tag rawinput1484642 "DBCluster" :flattened? nil :result-wrapper resultWrapper1484643)}] (clojure.core/cond-> {} (letvar1484644 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar1484644 ["DBCluster" :content])))))))

(clojure.core/defn- response-tag-list-message ([input] (response-tag-list-message nil input)) ([resultWrapper1484646 input] (clojure.core/let [rawinput1484645 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484647 {"TagList" (portkey.aws/search-for-tag rawinput1484645 "TagList" :flattened? nil :result-wrapper resultWrapper1484646)}] (clojure.core/cond-> {} (letvar1484647 "TagList") (clojure.core/assoc :tag-list (deser-tag-list (clojure.core/get-in letvar1484647 ["TagList" :content])))))))

(clojure.core/defn- response-invalid-s-3-bucket-fault ([input] (response-invalid-s-3-bucket-fault nil input)) ([resultWrapper1484649 input] (clojure.core/let [rawinput1484648 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484650 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-authorization-quota-exceeded-fault ([input] (response-authorization-quota-exceeded-fault nil input)) ([resultWrapper1484652 input] (clojure.core/let [rawinput1484651 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484653 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-subnet-group-not-found-fault ([input] (response-db-subnet-group-not-found-fault nil input)) ([resultWrapper1484655 input] (clojure.core/let [rawinput1484654 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484656 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-log-file-not-found-fault ([input] (response-db-log-file-not-found-fault nil input)) ([resultWrapper1484658 input] (clojure.core/let [rawinput1484657 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484659 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-provisioned-iops-not-available-in-az-fault ([input] (response-provisioned-iops-not-available-in-az-fault nil input)) ([resultWrapper1484661 input] (clojure.core/let [rawinput1484660 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484662 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-reserved-db-instance-message ([input] (response-reserved-db-instance-message nil input)) ([resultWrapper1484664 input] (clojure.core/let [rawinput1484663 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484665 {"Marker" (portkey.aws/search-for-tag rawinput1484663 "Marker" :flattened? nil :result-wrapper resultWrapper1484664), "ReservedDBInstances" (portkey.aws/search-for-tag rawinput1484663 "ReservedDBInstances" :flattened? nil :result-wrapper resultWrapper1484664)}] (clojure.core/cond-> {} (letvar1484665 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484665 ["Marker" :content]))) (letvar1484665 "ReservedDBInstances") (clojure.core/assoc :reserved-db-instances (deser-reserved-db-instance-list (clojure.core/get-in letvar1484665 ["ReservedDBInstances" :content])))))))

(clojure.core/defn- response-modify-db-instance-result ([input] (response-modify-db-instance-result nil input)) ([resultWrapper1484667 input] (clojure.core/let [rawinput1484666 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484668 {"DBInstance" (portkey.aws/search-for-tag rawinput1484666 "DBInstance" :flattened? nil :result-wrapper resultWrapper1484667)}] (clojure.core/cond-> {} (letvar1484668 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar1484668 ["DBInstance" :content])))))))

(clojure.core/defn- response-restore-db-instance-from-s-3-result ([input] (response-restore-db-instance-from-s-3-result nil input)) ([resultWrapper1484670 input] (clojure.core/let [rawinput1484669 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484671 {"DBInstance" (portkey.aws/search-for-tag rawinput1484669 "DBInstance" :flattened? nil :result-wrapper resultWrapper1484670)}] (clojure.core/cond-> {} (letvar1484671 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar1484671 ["DBInstance" :content])))))))

(clojure.core/defn- response-reserved-db-instance-not-found-fault ([input] (response-reserved-db-instance-not-found-fault nil input)) ([resultWrapper1484673 input] (clojure.core/let [rawinput1484672 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484674 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-option-group-state-fault ([input] (response-invalid-option-group-state-fault nil input)) ([resultWrapper1484676 input] (clojure.core/let [rawinput1484675 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484677 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-backtrack-message ([input] (response-db-cluster-backtrack-message nil input)) ([resultWrapper1484679 input] (clojure.core/let [rawinput1484678 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484680 {"Marker" (portkey.aws/search-for-tag rawinput1484678 "Marker" :flattened? nil :result-wrapper resultWrapper1484679), "DBClusterBacktracks" (portkey.aws/search-for-tag rawinput1484678 "DBClusterBacktracks" :flattened? nil :result-wrapper resultWrapper1484679)}] (clojure.core/cond-> {} (letvar1484680 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484680 ["Marker" :content]))) (letvar1484680 "DBClusterBacktracks") (clojure.core/assoc :db-cluster-backtracks (deser-db-cluster-backtrack-list (clojure.core/get-in letvar1484680 ["DBClusterBacktracks" :content])))))))

(clojure.core/defn- response-resource-not-found-fault ([input] (response-resource-not-found-fault nil input)) ([resultWrapper1484682 input] (clojure.core/let [rawinput1484681 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484683 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-db-cluster-parameter-group-result ([input] (response-create-db-cluster-parameter-group-result nil input)) ([resultWrapper1484685 input] (clojure.core/let [rawinput1484684 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484686 {"DBClusterParameterGroup" (portkey.aws/search-for-tag rawinput1484684 "DBClusterParameterGroup" :flattened? nil :result-wrapper resultWrapper1484685)}] (clojure.core/cond-> {} (letvar1484686 "DBClusterParameterGroup") (clojure.core/assoc :db-cluster-parameter-group (deser-db-cluster-parameter-group (clojure.core/get-in letvar1484686 ["DBClusterParameterGroup" :content])))))))

(clojure.core/defn- response-point-in-time-restore-not-enabled-fault ([input] (response-point-in-time-restore-not-enabled-fault nil input)) ([resultWrapper1484688 input] (clojure.core/let [rawinput1484687 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484689 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-subnet-group-not-allowed-fault ([input] (response-db-subnet-group-not-allowed-fault nil input)) ([resultWrapper1484691 input] (clojure.core/let [rawinput1484690 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484692 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-db-cluster-snapshot-result ([input] (response-create-db-cluster-snapshot-result nil input)) ([resultWrapper1484694 input] (clojure.core/let [rawinput1484693 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484695 {"DBClusterSnapshot" (portkey.aws/search-for-tag rawinput1484693 "DBClusterSnapshot" :flattened? nil :result-wrapper resultWrapper1484694)}] (clojure.core/cond-> {} (letvar1484695 "DBClusterSnapshot") (clojure.core/assoc :db-cluster-snapshot (deser-db-cluster-snapshot (clojure.core/get-in letvar1484695 ["DBClusterSnapshot" :content])))))))

(clojure.core/defn- response-db-parameter-group-not-found-fault ([input] (response-db-parameter-group-not-found-fault nil input)) ([resultWrapper1484697 input] (clojure.core/let [rawinput1484696 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484698 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-global-clusters-message ([input] (response-global-clusters-message nil input)) ([resultWrapper1484700 input] (clojure.core/let [rawinput1484699 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484701 {"Marker" (portkey.aws/search-for-tag rawinput1484699 "Marker" :flattened? nil :result-wrapper resultWrapper1484700), "GlobalClusters" (portkey.aws/search-for-tag rawinput1484699 "GlobalClusters" :flattened? nil :result-wrapper resultWrapper1484700)}] (clojure.core/cond-> {} (letvar1484701 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484701 ["Marker" :content]))) (letvar1484701 "GlobalClusters") (clojure.core/assoc :global-clusters (deser-global-cluster-list (clojure.core/get-in letvar1484701 ["GlobalClusters" :content])))))))

(clojure.core/defn- response-db-cluster-message ([input] (response-db-cluster-message nil input)) ([resultWrapper1484703 input] (clojure.core/let [rawinput1484702 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484704 {"Marker" (portkey.aws/search-for-tag rawinput1484702 "Marker" :flattened? nil :result-wrapper resultWrapper1484703), "DBClusters" (portkey.aws/search-for-tag rawinput1484702 "DBClusters" :flattened? nil :result-wrapper resultWrapper1484703)}] (clojure.core/cond-> {} (letvar1484704 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484704 ["Marker" :content]))) (letvar1484704 "DBClusters") (clojure.core/assoc :db-clusters (deser-db-cluster-list (clojure.core/get-in letvar1484704 ["DBClusters" :content])))))))

(clojure.core/defn- response-event-subscription-quota-exceeded-fault ([input] (response-event-subscription-quota-exceeded-fault nil input)) ([resultWrapper1484706 input] (clojure.core/let [rawinput1484705 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484707 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-describe-db-cluster-snapshot-attributes-result ([input] (response-describe-db-cluster-snapshot-attributes-result nil input)) ([resultWrapper1484709 input] (clojure.core/let [rawinput1484708 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484710 {"DBClusterSnapshotAttributesResult" (portkey.aws/search-for-tag rawinput1484708 "DBClusterSnapshotAttributesResult" :flattened? nil :result-wrapper resultWrapper1484709)}] (clojure.core/cond-> {} (letvar1484710 "DBClusterSnapshotAttributesResult") (clojure.core/assoc :db-cluster-snapshot-attributes-result (deser-db-cluster-snapshot-attributes-result (clojure.core/get-in letvar1484710 ["DBClusterSnapshotAttributesResult" :content])))))))

(clojure.core/defn- response-kms-key-not-accessible-fault ([input] (response-kms-key-not-accessible-fault nil input)) ([resultWrapper1484712 input] (clojure.core/let [rawinput1484711 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484713 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-describe-db-log-files-response ([input] (response-describe-db-log-files-response nil input)) ([resultWrapper1484715 input] (clojure.core/let [rawinput1484714 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484716 {"DescribeDBLogFiles" (portkey.aws/search-for-tag rawinput1484714 "DescribeDBLogFiles" :flattened? nil :result-wrapper resultWrapper1484715), "Marker" (portkey.aws/search-for-tag rawinput1484714 "Marker" :flattened? nil :result-wrapper resultWrapper1484715)}] (clojure.core/cond-> {} (letvar1484716 "DescribeDBLogFiles") (clojure.core/assoc :describe-db-log-files (deser-describe-db-log-files-list (clojure.core/get-in letvar1484716 ["DescribeDBLogFiles" :content]))) (letvar1484716 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484716 ["Marker" :content])))))))

(clojure.core/defn- response-db-instance-role-not-found-fault ([input] (response-db-instance-role-not-found-fault nil input)) ([resultWrapper1484718 input] (clojure.core/let [rawinput1484717 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484719 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-stop-db-instance-result ([input] (response-stop-db-instance-result nil input)) ([resultWrapper1484721 input] (clojure.core/let [rawinput1484720 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484722 {"DBInstance" (portkey.aws/search-for-tag rawinput1484720 "DBInstance" :flattened? nil :result-wrapper resultWrapper1484721)}] (clojure.core/cond-> {} (letvar1484722 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar1484722 ["DBInstance" :content])))))))

(clojure.core/defn- response-db-engine-version-message ([input] (response-db-engine-version-message nil input)) ([resultWrapper1484724 input] (clojure.core/let [rawinput1484723 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484725 {"Marker" (portkey.aws/search-for-tag rawinput1484723 "Marker" :flattened? nil :result-wrapper resultWrapper1484724), "DBEngineVersions" (portkey.aws/search-for-tag rawinput1484723 "DBEngineVersions" :flattened? nil :result-wrapper resultWrapper1484724)}] (clojure.core/cond-> {} (letvar1484725 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484725 ["Marker" :content]))) (letvar1484725 "DBEngineVersions") (clojure.core/assoc :db-engine-versions (deser-db-engine-version-list (clojure.core/get-in letvar1484725 ["DBEngineVersions" :content])))))))

(clojure.core/defn- response-modify-db-cluster-snapshot-attribute-result ([input] (response-modify-db-cluster-snapshot-attribute-result nil input)) ([resultWrapper1484727 input] (clojure.core/let [rawinput1484726 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484728 {"DBClusterSnapshotAttributesResult" (portkey.aws/search-for-tag rawinput1484726 "DBClusterSnapshotAttributesResult" :flattened? nil :result-wrapper resultWrapper1484727)}] (clojure.core/cond-> {} (letvar1484728 "DBClusterSnapshotAttributesResult") (clojure.core/assoc :db-cluster-snapshot-attributes-result (deser-db-cluster-snapshot-attributes-result (clojure.core/get-in letvar1484728 ["DBClusterSnapshotAttributesResult" :content])))))))

(clojure.core/defn- response-db-instance-message ([input] (response-db-instance-message nil input)) ([resultWrapper1484730 input] (clojure.core/let [rawinput1484729 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484731 {"Marker" (portkey.aws/search-for-tag rawinput1484729 "Marker" :flattened? nil :result-wrapper resultWrapper1484730), "DBInstances" (portkey.aws/search-for-tag rawinput1484729 "DBInstances" :flattened? nil :result-wrapper resultWrapper1484730)}] (clojure.core/cond-> {} (letvar1484731 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484731 ["Marker" :content]))) (letvar1484731 "DBInstances") (clojure.core/assoc :db-instances (deser-db-instance-list (clojure.core/get-in letvar1484731 ["DBInstances" :content])))))))

(clojure.core/defn- response-reserved-db-instance-already-exists-fault ([input] (response-reserved-db-instance-already-exists-fault nil input)) ([resultWrapper1484733 input] (clojure.core/let [rawinput1484732 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484734 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-security-group-not-supported-fault ([input] (response-db-security-group-not-supported-fault nil input)) ([resultWrapper1484736 input] (clojure.core/let [rawinput1484735 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484737 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-db-parameter-group-result ([input] (response-create-db-parameter-group-result nil input)) ([resultWrapper1484739 input] (clojure.core/let [rawinput1484738 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484740 {"DBParameterGroup" (portkey.aws/search-for-tag rawinput1484738 "DBParameterGroup" :flattened? nil :result-wrapper resultWrapper1484739)}] (clojure.core/cond-> {} (letvar1484740 "DBParameterGroup") (clojure.core/assoc :db-parameter-group (deser-db-parameter-group (clojure.core/get-in letvar1484740 ["DBParameterGroup" :content])))))))

(clojure.core/defn- response-db-instance-role-already-exists-fault ([input] (response-db-instance-role-already-exists-fault nil input)) ([resultWrapper1484742 input] (clojure.core/let [rawinput1484741 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484743 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-describe-engine-default-cluster-parameters-result ([input] (response-describe-engine-default-cluster-parameters-result nil input)) ([resultWrapper1484745 input] (clojure.core/let [rawinput1484744 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484746 {"EngineDefaults" (portkey.aws/search-for-tag rawinput1484744 "EngineDefaults" :flattened? nil :result-wrapper resultWrapper1484745)}] (clojure.core/cond-> {} (letvar1484746 "EngineDefaults") (clojure.core/assoc :engine-defaults (deser-engine-defaults (clojure.core/get-in letvar1484746 ["EngineDefaults" :content])))))))

(clojure.core/defn- response-db-instance-automated-backup-quota-exceeded-fault ([input] (response-db-instance-automated-backup-quota-exceeded-fault nil input)) ([resultWrapper1484748 input] (clojure.core/let [rawinput1484747 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484749 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-cluster-snapshot-state-fault ([input] (response-invalid-db-cluster-snapshot-state-fault nil input)) ([resultWrapper1484751 input] (clojure.core/let [rawinput1484750 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484752 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-storage-quota-exceeded-fault ([input] (response-storage-quota-exceeded-fault nil input)) ([resultWrapper1484754 input] (clojure.core/let [rawinput1484753 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484755 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-restore-fault ([input] (response-invalid-restore-fault nil input)) ([resultWrapper1484757 input] (clojure.core/let [rawinput1484756 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484758 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-insufficient-db-cluster-capacity-fault ([input] (response-insufficient-db-cluster-capacity-fault nil input)) ([resultWrapper1484760 input] (clojure.core/let [rawinput1484759 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484761 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-describe-db-snapshot-attributes-result ([input] (response-describe-db-snapshot-attributes-result nil input)) ([resultWrapper1484763 input] (clojure.core/let [rawinput1484762 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484764 {"DBSnapshotAttributesResult" (portkey.aws/search-for-tag rawinput1484762 "DBSnapshotAttributesResult" :flattened? nil :result-wrapper resultWrapper1484763)}] (clojure.core/cond-> {} (letvar1484764 "DBSnapshotAttributesResult") (clojure.core/assoc :db-snapshot-attributes-result (deser-db-snapshot-attributes-result (clojure.core/get-in letvar1484764 ["DBSnapshotAttributesResult" :content])))))))

(clojure.core/defn- response-db-security-group-quota-exceeded-fault ([input] (response-db-security-group-quota-exceeded-fault nil input)) ([resultWrapper1484766 input] (clojure.core/let [rawinput1484765 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484767 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-global-cluster-not-found-fault ([input] (response-global-cluster-not-found-fault nil input)) ([resultWrapper1484769 input] (clojure.core/let [rawinput1484768 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484770 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-parameter-group-already-exists-fault ([input] (response-db-parameter-group-already-exists-fault nil input)) ([resultWrapper1484772 input] (clojure.core/let [rawinput1484771 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484773 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-subnet-state-fault ([input] (response-invalid-db-subnet-state-fault nil input)) ([resultWrapper1484775 input] (clojure.core/let [rawinput1484774 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484776 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-endpoint-quota-exceeded-fault ([input] (response-db-cluster-endpoint-quota-exceeded-fault nil input)) ([resultWrapper1484778 input] (clojure.core/let [rawinput1484777 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484779 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-parameter-group-quota-exceeded-fault ([input] (response-db-parameter-group-quota-exceeded-fault nil input)) ([resultWrapper1484781 input] (clojure.core/let [rawinput1484780 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484782 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-stop-db-cluster-result ([input] (response-stop-db-cluster-result nil input)) ([resultWrapper1484784 input] (clojure.core/let [rawinput1484783 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484785 {"DBCluster" (portkey.aws/search-for-tag rawinput1484783 "DBCluster" :flattened? nil :result-wrapper resultWrapper1484784)}] (clojure.core/cond-> {} (letvar1484785 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar1484785 ["DBCluster" :content])))))))

(clojure.core/defn- response-db-cluster-capacity-info ([input] (response-db-cluster-capacity-info nil input)) ([resultWrapper1484787 input] (clojure.core/let [rawinput1484786 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484788 {"DBClusterIdentifier" (portkey.aws/search-for-tag rawinput1484786 "DBClusterIdentifier" :flattened? nil :result-wrapper resultWrapper1484787), "PendingCapacity" (portkey.aws/search-for-tag rawinput1484786 "PendingCapacity" :flattened? nil :result-wrapper resultWrapper1484787), "CurrentCapacity" (portkey.aws/search-for-tag rawinput1484786 "CurrentCapacity" :flattened? nil :result-wrapper resultWrapper1484787), "SecondsBeforeTimeout" (portkey.aws/search-for-tag rawinput1484786 "SecondsBeforeTimeout" :flattened? nil :result-wrapper resultWrapper1484787), "TimeoutAction" (portkey.aws/search-for-tag rawinput1484786 "TimeoutAction" :flattened? nil :result-wrapper resultWrapper1484787)}] (clojure.core/cond-> {} (letvar1484788 "DBClusterIdentifier") (clojure.core/assoc :db-cluster-identifier (deser-string (clojure.core/get-in letvar1484788 ["DBClusterIdentifier" :content]))) (letvar1484788 "PendingCapacity") (clojure.core/assoc :pending-capacity (deser-integer-optional (clojure.core/get-in letvar1484788 ["PendingCapacity" :content]))) (letvar1484788 "CurrentCapacity") (clojure.core/assoc :current-capacity (deser-integer-optional (clojure.core/get-in letvar1484788 ["CurrentCapacity" :content]))) (letvar1484788 "SecondsBeforeTimeout") (clojure.core/assoc :seconds-before-timeout (deser-integer-optional (clojure.core/get-in letvar1484788 ["SecondsBeforeTimeout" :content]))) (letvar1484788 "TimeoutAction") (clojure.core/assoc :timeout-action (deser-string (clojure.core/get-in letvar1484788 ["TimeoutAction" :content])))))))

(clojure.core/defn- response-backup-policy-not-found-fault ([input] (response-backup-policy-not-found-fault nil input)) ([resultWrapper1484790 input] (clojure.core/let [rawinput1484789 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484791 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-describe-valid-db-instance-modifications-result ([input] (response-describe-valid-db-instance-modifications-result nil input)) ([resultWrapper1484793 input] (clojure.core/let [rawinput1484792 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484794 {"ValidDBInstanceModificationsMessage" (portkey.aws/search-for-tag rawinput1484792 "ValidDBInstanceModificationsMessage" :flattened? nil :result-wrapper resultWrapper1484793)}] (clojure.core/cond-> {} (letvar1484794 "ValidDBInstanceModificationsMessage") (clojure.core/assoc :valid-db-instance-modifications-message (deser-valid-db-instance-modifications-message (clojure.core/get-in letvar1484794 ["ValidDBInstanceModificationsMessage" :content])))))))

(clojure.core/defn- response-modify-event-subscription-result ([input] (response-modify-event-subscription-result nil input)) ([resultWrapper1484796 input] (clojure.core/let [rawinput1484795 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484797 {"EventSubscription" (portkey.aws/search-for-tag rawinput1484795 "EventSubscription" :flattened? nil :result-wrapper resultWrapper1484796)}] (clojure.core/cond-> {} (letvar1484797 "EventSubscription") (clojure.core/assoc :event-subscription (deser-event-subscription (clojure.core/get-in letvar1484797 ["EventSubscription" :content])))))))

(clojure.core/defn- response-insufficient-db-instance-capacity-fault ([input] (response-insufficient-db-instance-capacity-fault nil input)) ([resultWrapper1484799 input] (clojure.core/let [rawinput1484798 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484800 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-failover-db-cluster-result ([input] (response-failover-db-cluster-result nil input)) ([resultWrapper1484802 input] (clojure.core/let [rawinput1484801 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484803 {"DBCluster" (portkey.aws/search-for-tag rawinput1484801 "DBCluster" :flattened? nil :result-wrapper resultWrapper1484802)}] (clojure.core/cond-> {} (letvar1484803 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar1484803 ["DBCluster" :content])))))))

(clojure.core/defn- response-sns-invalid-topic-fault ([input] (response-sns-invalid-topic-fault nil input)) ([resultWrapper1484805 input] (clojure.core/let [rawinput1484804 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484806 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-delete-db-instance-result ([input] (response-delete-db-instance-result nil input)) ([resultWrapper1484808 input] (clojure.core/let [rawinput1484807 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484809 {"DBInstance" (portkey.aws/search-for-tag rawinput1484807 "DBInstance" :flattened? nil :result-wrapper resultWrapper1484808)}] (clojure.core/cond-> {} (letvar1484809 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar1484809 ["DBInstance" :content])))))))

(clojure.core/defn- response-delete-event-subscription-result ([input] (response-delete-event-subscription-result nil input)) ([resultWrapper1484811 input] (clojure.core/let [rawinput1484810 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484812 {"EventSubscription" (portkey.aws/search-for-tag rawinput1484810 "EventSubscription" :flattened? nil :result-wrapper resultWrapper1484811)}] (clojure.core/cond-> {} (letvar1484812 "EventSubscription") (clojure.core/assoc :event-subscription (deser-event-subscription (clojure.core/get-in letvar1484812 ["EventSubscription" :content])))))))

(clojure.core/defn- response-pending-maintenance-actions-message ([input] (response-pending-maintenance-actions-message nil input)) ([resultWrapper1484814 input] (clojure.core/let [rawinput1484813 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484815 {"PendingMaintenanceActions" (portkey.aws/search-for-tag rawinput1484813 "PendingMaintenanceActions" :flattened? nil :result-wrapper resultWrapper1484814), "Marker" (portkey.aws/search-for-tag rawinput1484813 "Marker" :flattened? nil :result-wrapper resultWrapper1484814)}] (clojure.core/cond-> {} (letvar1484815 "PendingMaintenanceActions") (clojure.core/assoc :pending-maintenance-actions (deser-pending-maintenance-actions (clojure.core/get-in letvar1484815 ["PendingMaintenanceActions" :content]))) (letvar1484815 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484815 ["Marker" :content])))))))

(clojure.core/defn- response-reserved-db-instances-offering-not-found-fault ([input] (response-reserved-db-instances-offering-not-found-fault nil input)) ([resultWrapper1484817 input] (clojure.core/let [rawinput1484816 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484818 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-subnet-group-quota-exceeded-fault ([input] (response-db-subnet-group-quota-exceeded-fault nil input)) ([resultWrapper1484820 input] (clojure.core/let [rawinput1484819 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484821 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-add-source-identifier-to-subscription-result ([input] (response-add-source-identifier-to-subscription-result nil input)) ([resultWrapper1484823 input] (clojure.core/let [rawinput1484822 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484824 {"EventSubscription" (portkey.aws/search-for-tag rawinput1484822 "EventSubscription" :flattened? nil :result-wrapper resultWrapper1484823)}] (clojure.core/cond-> {} (letvar1484824 "EventSubscription") (clojure.core/assoc :event-subscription (deser-event-subscription (clojure.core/get-in letvar1484824 ["EventSubscription" :content])))))))

(clojure.core/defn- response-db-security-group-message ([input] (response-db-security-group-message nil input)) ([resultWrapper1484826 input] (clojure.core/let [rawinput1484825 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484827 {"Marker" (portkey.aws/search-for-tag rawinput1484825 "Marker" :flattened? nil :result-wrapper resultWrapper1484826), "DBSecurityGroups" (portkey.aws/search-for-tag rawinput1484825 "DBSecurityGroups" :flattened? nil :result-wrapper resultWrapper1484826)}] (clojure.core/cond-> {} (letvar1484827 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484827 ["Marker" :content]))) (letvar1484827 "DBSecurityGroups") (clojure.core/assoc :db-security-groups (deser-db-security-groups (clojure.core/get-in letvar1484827 ["DBSecurityGroups" :content])))))))

(clojure.core/defn- response-db-cluster-parameter-groups-message ([input] (response-db-cluster-parameter-groups-message nil input)) ([resultWrapper1484829 input] (clojure.core/let [rawinput1484828 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484830 {"Marker" (portkey.aws/search-for-tag rawinput1484828 "Marker" :flattened? nil :result-wrapper resultWrapper1484829), "DBClusterParameterGroups" (portkey.aws/search-for-tag rawinput1484828 "DBClusterParameterGroups" :flattened? nil :result-wrapper resultWrapper1484829)}] (clojure.core/cond-> {} (letvar1484830 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484830 ["Marker" :content]))) (letvar1484830 "DBClusterParameterGroups") (clojure.core/assoc :db-cluster-parameter-groups (deser-db-cluster-parameter-group-list (clojure.core/get-in letvar1484830 ["DBClusterParameterGroups" :content])))))))

(clojure.core/defn- response-modify-db-snapshot-attribute-result ([input] (response-modify-db-snapshot-attribute-result nil input)) ([resultWrapper1484832 input] (clojure.core/let [rawinput1484831 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484833 {"DBSnapshotAttributesResult" (portkey.aws/search-for-tag rawinput1484831 "DBSnapshotAttributesResult" :flattened? nil :result-wrapper resultWrapper1484832)}] (clojure.core/cond-> {} (letvar1484833 "DBSnapshotAttributesResult") (clojure.core/assoc :db-snapshot-attributes-result (deser-db-snapshot-attributes-result (clojure.core/get-in letvar1484833 ["DBSnapshotAttributesResult" :content])))))))

(clojure.core/defn- response-start-db-instance-result ([input] (response-start-db-instance-result nil input)) ([resultWrapper1484835 input] (clojure.core/let [rawinput1484834 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484836 {"DBInstance" (portkey.aws/search-for-tag rawinput1484834 "DBInstance" :flattened? nil :result-wrapper resultWrapper1484835)}] (clojure.core/cond-> {} (letvar1484836 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar1484836 ["DBInstance" :content])))))))

(clojure.core/defn- response-db-cluster-endpoint ([input] (response-db-cluster-endpoint nil input)) ([resultWrapper1484838 input] (clojure.core/let [rawinput1484837 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484839 {"ExcludedMembers" (portkey.aws/search-for-tag rawinput1484837 "ExcludedMembers" :flattened? nil :result-wrapper resultWrapper1484838), "EndpointType" (portkey.aws/search-for-tag rawinput1484837 "EndpointType" :flattened? nil :result-wrapper resultWrapper1484838), "Status" (portkey.aws/search-for-tag rawinput1484837 "Status" :flattened? nil :result-wrapper resultWrapper1484838), "DBClusterEndpointIdentifier" (portkey.aws/search-for-tag rawinput1484837 "DBClusterEndpointIdentifier" :flattened? nil :result-wrapper resultWrapper1484838), "CustomEndpointType" (portkey.aws/search-for-tag rawinput1484837 "CustomEndpointType" :flattened? nil :result-wrapper resultWrapper1484838), "StaticMembers" (portkey.aws/search-for-tag rawinput1484837 "StaticMembers" :flattened? nil :result-wrapper resultWrapper1484838), "DBClusterEndpointArn" (portkey.aws/search-for-tag rawinput1484837 "DBClusterEndpointArn" :flattened? nil :result-wrapper resultWrapper1484838), "Endpoint" (portkey.aws/search-for-tag rawinput1484837 "Endpoint" :flattened? nil :result-wrapper resultWrapper1484838), "DBClusterIdentifier" (portkey.aws/search-for-tag rawinput1484837 "DBClusterIdentifier" :flattened? nil :result-wrapper resultWrapper1484838), "DBClusterEndpointResourceIdentifier" (portkey.aws/search-for-tag rawinput1484837 "DBClusterEndpointResourceIdentifier" :flattened? nil :result-wrapper resultWrapper1484838)}] (clojure.core/cond-> {} (letvar1484839 "ExcludedMembers") (clojure.core/assoc :excluded-members (deser-string-list (clojure.core/get-in letvar1484839 ["ExcludedMembers" :content]))) (letvar1484839 "EndpointType") (clojure.core/assoc :endpoint-type (deser-string (clojure.core/get-in letvar1484839 ["EndpointType" :content]))) (letvar1484839 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar1484839 ["Status" :content]))) (letvar1484839 "DBClusterEndpointIdentifier") (clojure.core/assoc :db-cluster-endpoint-identifier (deser-string (clojure.core/get-in letvar1484839 ["DBClusterEndpointIdentifier" :content]))) (letvar1484839 "CustomEndpointType") (clojure.core/assoc :custom-endpoint-type (deser-string (clojure.core/get-in letvar1484839 ["CustomEndpointType" :content]))) (letvar1484839 "StaticMembers") (clojure.core/assoc :static-members (deser-string-list (clojure.core/get-in letvar1484839 ["StaticMembers" :content]))) (letvar1484839 "DBClusterEndpointArn") (clojure.core/assoc :db-cluster-endpoint-arn (deser-string (clojure.core/get-in letvar1484839 ["DBClusterEndpointArn" :content]))) (letvar1484839 "Endpoint") (clojure.core/assoc :endpoint (deser-string (clojure.core/get-in letvar1484839 ["Endpoint" :content]))) (letvar1484839 "DBClusterIdentifier") (clojure.core/assoc :db-cluster-identifier (deser-string (clojure.core/get-in letvar1484839 ["DBClusterIdentifier" :content]))) (letvar1484839 "DBClusterEndpointResourceIdentifier") (clojure.core/assoc :db-cluster-endpoint-resource-identifier (deser-string (clojure.core/get-in letvar1484839 ["DBClusterEndpointResourceIdentifier" :content])))))))

(clojure.core/defn- response-delete-db-cluster-result ([input] (response-delete-db-cluster-result nil input)) ([resultWrapper1484841 input] (clojure.core/let [rawinput1484840 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484842 {"DBCluster" (portkey.aws/search-for-tag rawinput1484840 "DBCluster" :flattened? nil :result-wrapper resultWrapper1484841)}] (clojure.core/cond-> {} (letvar1484842 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar1484842 ["DBCluster" :content])))))))

(clojure.core/defn- response-db-subnet-quota-exceeded-fault ([input] (response-db-subnet-quota-exceeded-fault nil input)) ([resultWrapper1484844 input] (clojure.core/let [rawinput1484843 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484845 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-snapshot-state-fault ([input] (response-invalid-db-snapshot-state-fault nil input)) ([resultWrapper1484847 input] (clojure.core/let [rawinput1484846 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484848 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-instance-role-quota-exceeded-fault ([input] (response-db-instance-role-quota-exceeded-fault nil input)) ([resultWrapper1484850 input] (clojure.core/let [rawinput1484849 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484851 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-reserved-db-instance-quota-exceeded-fault ([input] (response-reserved-db-instance-quota-exceeded-fault nil input)) ([resultWrapper1484853 input] (clojure.core/let [rawinput1484852 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484854 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-purchase-reserved-db-instances-offering-result ([input] (response-purchase-reserved-db-instances-offering-result nil input)) ([resultWrapper1484856 input] (clojure.core/let [rawinput1484855 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484857 {"ReservedDBInstance" (portkey.aws/search-for-tag rawinput1484855 "ReservedDBInstance" :flattened? nil :result-wrapper resultWrapper1484856)}] (clojure.core/cond-> {} (letvar1484857 "ReservedDBInstance") (clojure.core/assoc :reserved-db-instance (deser-reserved-db-instance (clojure.core/get-in letvar1484857 ["ReservedDBInstance" :content])))))))

(clojure.core/defn- response-db-subnet-group-already-exists-fault ([input] (response-db-subnet-group-already-exists-fault nil input)) ([resultWrapper1484859 input] (clojure.core/let [rawinput1484858 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484860 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-remove-from-global-cluster-result ([input] (response-remove-from-global-cluster-result nil input)) ([resultWrapper1484862 input] (clojure.core/let [rawinput1484861 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484863 {"GlobalCluster" (portkey.aws/search-for-tag rawinput1484861 "GlobalCluster" :flattened? nil :result-wrapper resultWrapper1484862)}] (clojure.core/cond-> {} (letvar1484863 "GlobalCluster") (clojure.core/assoc :global-cluster (deser-global-cluster (clojure.core/get-in letvar1484863 ["GlobalCluster" :content])))))))

(clojure.core/defn- response-create-db-instance-read-replica-result ([input] (response-create-db-instance-read-replica-result nil input)) ([resultWrapper1484865 input] (clojure.core/let [rawinput1484864 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484866 {"DBInstance" (portkey.aws/search-for-tag rawinput1484864 "DBInstance" :flattened? nil :result-wrapper resultWrapper1484865)}] (clojure.core/cond-> {} (letvar1484866 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar1484866 ["DBInstance" :content])))))))

(clojure.core/defn- response-download-db-log-file-portion-details ([input] (response-download-db-log-file-portion-details nil input)) ([resultWrapper1484868 input] (clojure.core/let [rawinput1484867 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484869 {"LogFileData" (portkey.aws/search-for-tag rawinput1484867 "LogFileData" :flattened? nil :result-wrapper resultWrapper1484868), "Marker" (portkey.aws/search-for-tag rawinput1484867 "Marker" :flattened? nil :result-wrapper resultWrapper1484868), "AdditionalDataPending" (portkey.aws/search-for-tag rawinput1484867 "AdditionalDataPending" :flattened? nil :result-wrapper resultWrapper1484868)}] (clojure.core/cond-> {} (letvar1484869 "LogFileData") (clojure.core/assoc :log-file-data (deser-string (clojure.core/get-in letvar1484869 ["LogFileData" :content]))) (letvar1484869 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar1484869 ["Marker" :content]))) (letvar1484869 "AdditionalDataPending") (clojure.core/assoc :additional-data-pending (deser-boolean (clojure.core/get-in letvar1484869 ["AdditionalDataPending" :content])))))))

(clojure.core/defn- response-db-snapshot-not-found-fault ([input] (response-db-snapshot-not-found-fault nil input)) ([resultWrapper1484871 input] (clojure.core/let [rawinput1484870 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484872 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-parameter-group-state-fault ([input] (response-invalid-db-parameter-group-state-fault nil input)) ([resultWrapper1484874 input] (clojure.core/let [rawinput1484873 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484875 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-modify-db-cluster-result ([input] (response-modify-db-cluster-result nil input)) ([resultWrapper1484877 input] (clojure.core/let [rawinput1484876 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484878 {"DBCluster" (portkey.aws/search-for-tag rawinput1484876 "DBCluster" :flattened? nil :result-wrapper resultWrapper1484877)}] (clojure.core/cond-> {} (letvar1484878 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar1484878 ["DBCluster" :content])))))))

(clojure.core/defn- response-db-security-group-not-found-fault ([input] (response-db-security-group-not-found-fault nil input)) ([resultWrapper1484880 input] (clojure.core/let [rawinput1484879 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484881 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-security-group-already-exists-fault ([input] (response-db-security-group-already-exists-fault nil input)) ([resultWrapper1484883 input] (clojure.core/let [rawinput1484882 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484884 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-global-cluster-already-exists-fault ([input] (response-global-cluster-already-exists-fault nil input)) ([resultWrapper1484886 input] (clojure.core/let [rawinput1484885 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1484887 {}] (clojure.core/cond-> {}))))

(clojure.spec.alpha/def :portkey.aws.rds/source-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/vpc-security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.rds/vpc-security-group-membership))

(clojure.spec.alpha/def :portkey.aws.rds/certificate-list (clojure.spec.alpha/coll-of :portkey.aws.rds/certificate))

(clojure.spec.alpha/def :portkey.aws.rds/subnet-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds/restore-db-cluster-to-point-in-time-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.pending-maintenance-action/action (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.pending-maintenance-action/auto-applied-after-date (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.pending-maintenance-action/forced-apply-date (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.pending-maintenance-action/opt-in-status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.pending-maintenance-action/current-apply-date (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.pending-maintenance-action/description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/pending-maintenance-action (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.pending-maintenance-action/action :portkey.aws.rds.pending-maintenance-action/auto-applied-after-date :portkey.aws.rds.pending-maintenance-action/forced-apply-date :portkey.aws.rds.pending-maintenance-action/opt-in-status :portkey.aws.rds.pending-maintenance-action/current-apply-date :portkey.aws.rds.pending-maintenance-action/description]))

(clojure.spec.alpha/def :portkey.aws.rds/delete-global-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/global-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds/db-instance-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/read-replica-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds/restore-db-instance-from-db-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds/string-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds/remove-source-identifier-from-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-backtrack-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.rds/delete-db-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-snapshot]))

(clojure.spec.alpha/def :portkey.aws.rds/snapshot-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/filter-value-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds/modify-global-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/global-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds/parameters-list (clojure.spec.alpha/coll-of :portkey.aws.rds/parameter))

(clojure.spec.alpha/def :portkey.aws.rds/domain-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/ec-2-security-group-list (clojure.spec.alpha/coll-of :portkey.aws.rds/ec-2-security-group))

(clojure.spec.alpha/def :portkey.aws.rds/copy-db-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.rds.double-range/from (clojure.spec.alpha/and :portkey.aws.rds/double))
(clojure.spec.alpha/def :portkey.aws.rds.double-range/to (clojure.spec.alpha/and :portkey.aws.rds/double))
(clojure.spec.alpha/def :portkey.aws.rds/double-range (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.double-range/from :portkey.aws.rds.double-range/to]))

(clojure.spec.alpha/def :portkey.aws.rds.minimum-engine-version-per-allowed-value/allowed-value (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.minimum-engine-version-per-allowed-value/minimum-engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/minimum-engine-version-per-allowed-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.minimum-engine-version-per-allowed-value/allowed-value :portkey.aws.rds.minimum-engine-version-per-allowed-value/minimum-engine-version]))

(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-endpoint-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/db-snapshot-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-snapshots-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-snapshots-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-snapshots-message/snapshot-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-snapshots-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-snapshots-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-snapshots-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-snapshots-message/include-shared (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-snapshots-message/include-public (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds/describe-db-cluster-snapshots-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.describe-db-cluster-snapshots-message/db-cluster-identifier :portkey.aws.rds.describe-db-cluster-snapshots-message/db-cluster-snapshot-identifier :portkey.aws.rds.describe-db-cluster-snapshots-message/snapshot-type :portkey.aws.rds.describe-db-cluster-snapshots-message/filters :portkey.aws.rds.describe-db-cluster-snapshots-message/max-records :portkey.aws.rds.describe-db-cluster-snapshots-message/marker :portkey.aws.rds.describe-db-cluster-snapshots-message/include-shared :portkey.aws.rds.describe-db-cluster-snapshots-message/include-public]))

(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/character-set-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/database-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/s-3-ingestion-role-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/s-3-bucket-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/source-engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/master-username (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/source-engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/backtrack-window (clojure.spec.alpha/and :portkey.aws.rds/long-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/s-3-prefix (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-s-3-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/restore-db-cluster-from-s-3-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.restore-db-cluster-from-s-3-message/db-cluster-identifier :portkey.aws.rds.restore-db-cluster-from-s-3-message/engine :portkey.aws.rds.restore-db-cluster-from-s-3-message/master-username :portkey.aws.rds.restore-db-cluster-from-s-3-message/master-user-password :portkey.aws.rds.restore-db-cluster-from-s-3-message/source-engine :portkey.aws.rds.restore-db-cluster-from-s-3-message/source-engine-version :portkey.aws.rds.restore-db-cluster-from-s-3-message/s-3-bucket-name :portkey.aws.rds.restore-db-cluster-from-s-3-message/s-3-ingestion-role-arn] :opt-un [:portkey.aws.rds.restore-db-cluster-from-s-3-message/deletion-protection :portkey.aws.rds.restore-db-cluster-from-s-3-message/backup-retention-period :portkey.aws.rds.restore-db-cluster-from-s-3-message/option-group-name :portkey.aws.rds.restore-db-cluster-from-s-3-message/character-set-name :portkey.aws.rds.restore-db-cluster-from-s-3-message/enable-iam-database-authentication :portkey.aws.rds.restore-db-cluster-from-s-3-message/database-name :portkey.aws.rds.restore-db-cluster-from-s-3-message/preferred-maintenance-window :portkey.aws.rds.restore-db-cluster-from-s-3-message/enable-cloudwatch-logs-exports :portkey.aws.rds.restore-db-cluster-from-s-3-message/tags :portkey.aws.rds.restore-db-cluster-from-s-3-message/vpc-security-group-ids :portkey.aws.rds.restore-db-cluster-from-s-3-message/db-cluster-parameter-group-name :portkey.aws.rds.restore-db-cluster-from-s-3-message/engine-version :portkey.aws.rds.restore-db-cluster-from-s-3-message/storage-encrypted :portkey.aws.rds.restore-db-cluster-from-s-3-message/db-subnet-group-name :portkey.aws.rds.restore-db-cluster-from-s-3-message/port :portkey.aws.rds.restore-db-cluster-from-s-3-message/kms-key-id :portkey.aws.rds.restore-db-cluster-from-s-3-message/backtrack-window :portkey.aws.rds.restore-db-cluster-from-s-3-message/s-3-prefix :portkey.aws.rds/availability-zones :portkey.aws.rds.restore-db-cluster-from-s-3-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.rds.copy-db-parameter-group-message/source-db-parameter-group-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copy-db-parameter-group-message/target-db-parameter-group-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copy-db-parameter-group-message/target-db-parameter-group-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copy-db-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/copy-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.copy-db-parameter-group-message/source-db-parameter-group-identifier :portkey.aws.rds.copy-db-parameter-group-message/target-db-parameter-group-identifier :portkey.aws.rds.copy-db-parameter-group-message/target-db-parameter-group-description] :opt-un [:portkey.aws.rds.copy-db-parameter-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-role/role-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-role/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-role/feature-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-role (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-cluster-role/role-arn :portkey.aws.rds.db-cluster-role/status :portkey.aws.rds.db-cluster-role/feature-name]))

(clojure.spec.alpha/def :portkey.aws.rds.filter/name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.filter/values (clojure.spec.alpha/and :portkey.aws.rds/filter-value-list))
(clojure.spec.alpha/def :portkey.aws.rds/filter (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.filter/name :portkey.aws.rds.filter/values] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/pending-maintenance-action-details (clojure.spec.alpha/coll-of :portkey.aws.rds/pending-maintenance-action))

(clojure.spec.alpha/def :portkey.aws.rds.copy-db-cluster-snapshot-message/source-db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copy-db-cluster-snapshot-message/target-db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copy-db-cluster-snapshot-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copy-db-cluster-snapshot-message/pre-signed-url (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copy-db-cluster-snapshot-message/copy-tags (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.copy-db-cluster-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/copy-db-cluster-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.copy-db-cluster-snapshot-message/source-db-cluster-snapshot-identifier :portkey.aws.rds.copy-db-cluster-snapshot-message/target-db-cluster-snapshot-identifier] :opt-un [:portkey.aws.rds.copy-db-cluster-snapshot-message/kms-key-id :portkey.aws.rds.copy-db-cluster-snapshot-message/pre-signed-url :portkey.aws.rds.copy-db-cluster-snapshot-message/copy-tags :portkey.aws.rds.copy-db-cluster-snapshot-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds/source-region-list (clojure.spec.alpha/coll-of :portkey.aws.rds/source-region))

(clojure.spec.alpha/def :portkey.aws.rds/promote-read-replica-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.db-parameter-group-status/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-parameter-group-status/parameter-apply-status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/db-parameter-group-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-parameter-group-status/db-parameter-group-name :portkey.aws.rds.db-parameter-group-status/parameter-apply-status]))

(clojure.spec.alpha/def :portkey.aws.rds/valid-storage-options-list (clojure.spec.alpha/coll-of :portkey.aws.rds/valid-storage-options))

(clojure.spec.alpha/def :portkey.aws.rds/db-security-groups (clojure.spec.alpha/coll-of :portkey.aws.rds/db-security-group))

(clojure.spec.alpha/def :portkey.aws.rds.describe-db-instances-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-instances-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-instances-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-instances-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-db-instances-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.describe-db-instances-message/db-instance-identifier :portkey.aws.rds.describe-db-instances-message/filters :portkey.aws.rds.describe-db-instances-message/max-records :portkey.aws.rds.describe-db-instances-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds/restore-db-instance-to-point-in-time-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.reset-db-cluster-parameter-group-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reset-db-cluster-parameter-group-message/reset-all-parameters (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.reset-db-cluster-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.rds/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds/reset-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.reset-db-cluster-parameter-group-message/db-cluster-parameter-group-name] :opt-un [:portkey.aws.rds.reset-db-cluster-parameter-group-message/reset-all-parameters :portkey.aws.rds.reset-db-cluster-parameter-group-message/parameters]))

(clojure.spec.alpha/def :portkey.aws.rds.copy-db-cluster-parameter-group-message/source-db-cluster-parameter-group-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copy-db-cluster-parameter-group-message/target-db-cluster-parameter-group-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copy-db-cluster-parameter-group-message/target-db-cluster-parameter-group-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copy-db-cluster-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/copy-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.copy-db-cluster-parameter-group-message/source-db-cluster-parameter-group-identifier :portkey.aws.rds.copy-db-cluster-parameter-group-message/target-db-cluster-parameter-group-identifier :portkey.aws.rds.copy-db-cluster-parameter-group-message/target-db-cluster-parameter-group-description] :opt-un [:portkey.aws.rds.copy-db-cluster-parameter-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.delete-db-snapshot-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/delete-db-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.delete-db-snapshot-message/db-snapshot-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-parameter-group-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.rds/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds/modify-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.modify-db-cluster-parameter-group-message/db-cluster-parameter-group-name :portkey.aws.rds.modify-db-cluster-parameter-group-message/parameters] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.delete-db-instance-automated-backup-message/dbi-resource-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/delete-db-instance-automated-backup-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.delete-db-instance-automated-backup-message/dbi-resource-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.describe-db-snapshots-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-snapshots-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-snapshots-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-snapshots-message/include-public (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-snapshots-message/snapshot-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-snapshots-message/include-shared (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-snapshots-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-snapshots-message/dbi-resource-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-snapshots-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds/describe-db-snapshots-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.describe-db-snapshots-message/db-instance-identifier :portkey.aws.rds.describe-db-snapshots-message/max-records :portkey.aws.rds.describe-db-snapshots-message/marker :portkey.aws.rds.describe-db-snapshots-message/include-public :portkey.aws.rds.describe-db-snapshots-message/snapshot-type :portkey.aws.rds.describe-db-snapshots-message/include-shared :portkey.aws.rds.describe-db-snapshots-message/db-snapshot-identifier :portkey.aws.rds.describe-db-snapshots-message/dbi-resource-id :portkey.aws.rds.describe-db-snapshots-message/filters]))

(clojure.spec.alpha/def :portkey.aws.rds.db-parameter-group-details/parameters (clojure.spec.alpha/and :portkey.aws.rds/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-parameter-group-details/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/db-parameter-group-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-parameter-group-details/parameters :portkey.aws.rds.db-parameter-group-details/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.option-version/version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-version/is-default (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds/option-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.option-version/version :portkey.aws.rds.option-version/is-default]))

(clojure.spec.alpha/def :portkey.aws.rds.delete-db-parameter-group-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/delete-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.delete-db-parameter-group-message/db-parameter-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/double-optional clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.rds/minimum-engine-version-per-allowed-value-list (clojure.spec.alpha/coll-of :portkey.aws.rds/minimum-engine-version-per-allowed-value))

(clojure.spec.alpha/def :portkey.aws.rds.scaling-configuration-info/min-capacity (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.scaling-configuration-info/max-capacity (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.scaling-configuration-info/auto-pause (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.scaling-configuration-info/seconds-until-auto-pause (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds/scaling-configuration-info (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.scaling-configuration-info/min-capacity :portkey.aws.rds.scaling-configuration-info/max-capacity :portkey.aws.rds.scaling-configuration-info/auto-pause :portkey.aws.rds.scaling-configuration-info/seconds-until-auto-pause]))

(clojure.spec.alpha/def :portkey.aws.rds/source-ids-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds.source-region-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.source-region-message/source-regions (clojure.spec.alpha/and :portkey.aws.rds/source-region-list))
(clojure.spec.alpha/def :portkey.aws.rds/source-region-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.source-region-message/marker :portkey.aws.rds.source-region-message/source-regions]))

(clojure.spec.alpha/def :portkey.aws.rds/db-snapshot-attribute-list (clojure.spec.alpha/coll-of :portkey.aws.rds/db-snapshot-attribute))

(clojure.spec.alpha/def :portkey.aws.rds/invalid-db-cluster-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.source-region/region-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.source-region/endpoint (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.source-region/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/source-region (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.source-region/region-name :portkey.aws.rds.source-region/endpoint :portkey.aws.rds.source-region/status]))

(clojure.spec.alpha/def :portkey.aws.rds/global-cluster-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/options-list (clojure.spec.alpha/coll-of :portkey.aws.rds/option))

(clojure.spec.alpha/def :portkey.aws.rds.describe-engine-default-parameters-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-engine-default-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-engine-default-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-engine-default-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-engine-default-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.describe-engine-default-parameters-message/db-parameter-group-family] :opt-un [:portkey.aws.rds.describe-engine-default-parameters-message/filters :portkey.aws.rds.describe-engine-default-parameters-message/max-records :portkey.aws.rds.describe-engine-default-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/start-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.stop-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/stop-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.stop-db-cluster-message/db-cluster-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/create-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds/invalid-db-instance-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/sns-no-authorization-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/copy-option-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/option-group]))

(clojure.spec.alpha/def :portkey.aws.rds.option/vpc-security-group-memberships (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.option/option-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option/db-security-group-memberships (clojure.spec.alpha/and :portkey.aws.rds/db-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.option/option-settings (clojure.spec.alpha/and :portkey.aws.rds/option-setting-configuration-list))
(clojure.spec.alpha/def :portkey.aws.rds.option/permanent (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.option/persistent (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.option/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.option/option-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option/option-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/option (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.option/vpc-security-group-memberships :portkey.aws.rds.option/option-version :portkey.aws.rds.option/db-security-group-memberships :portkey.aws.rds.option/option-settings :portkey.aws.rds.option/permanent :portkey.aws.rds.option/persistent :portkey.aws.rds.option/port :portkey.aws.rds.option/option-description :portkey.aws.rds.option/option-name]))

(clojure.spec.alpha/def :portkey.aws.rds/option-group-options-list (clojure.spec.alpha/coll-of :portkey.aws.rds/option-group-option))

(clojure.spec.alpha/def :portkey.aws.rds.create-db-snapshot-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-snapshot-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/create-db-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.create-db-snapshot-message/db-snapshot-identifier :portkey.aws.rds.create-db-snapshot-message/db-instance-identifier] :opt-un [:portkey.aws.rds.create-db-snapshot-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds/db-parameter-group-list (clojure.spec.alpha/coll-of :portkey.aws.rds/db-parameter-group))

(clojure.spec.alpha/def :portkey.aws.rds/reboot-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds/instance-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/db-parameter-group-status-list (clojure.spec.alpha/coll-of :portkey.aws.rds/db-parameter-group-status))

(clojure.spec.alpha/def :portkey.aws.rds.db-parameter-group-name-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/db-parameter-group-name-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-parameter-group-name-message/db-parameter-group-name]))

(clojure.spec.alpha/def :portkey.aws.rds/apply-pending-maintenance-action-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/resource-pending-maintenance-actions]))

(clojure.spec.alpha/def :portkey.aws.rds/double-range-list (clojure.spec.alpha/coll-of :portkey.aws.rds/double-range))

(clojure.spec.alpha/def :portkey.aws.rds.describe-db-engine-versions-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-engine-versions-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-engine-versions-message/list-supported-character-sets (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-engine-versions-message/default-only (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-engine-versions-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-engine-versions-message/list-supported-timezones (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-engine-versions-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-engine-versions-message/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-engine-versions-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-db-engine-versions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.describe-db-engine-versions-message/max-records :portkey.aws.rds.describe-db-engine-versions-message/marker :portkey.aws.rds.describe-db-engine-versions-message/list-supported-character-sets :portkey.aws.rds.describe-db-engine-versions-message/default-only :portkey.aws.rds.describe-db-engine-versions-message/engine-version :portkey.aws.rds.describe-db-engine-versions-message/list-supported-timezones :portkey.aws.rds.describe-db-engine-versions-message/filters :portkey.aws.rds.describe-db-engine-versions-message/engine :portkey.aws.rds.describe-db-engine-versions-message/db-parameter-group-family]))

(clojure.spec.alpha/def :portkey.aws.rds.promote-read-replica-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/promote-read-replica-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.promote-read-replica-db-cluster-message/db-cluster-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-parameter-group-name-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-parameter-group-name-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-cluster-parameter-group-name-message/db-cluster-parameter-group-name]))

(clojure.spec.alpha/def :portkey.aws.rds.describe-source-regions-message/region-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-source-regions-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-source-regions-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-source-regions-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds/describe-source-regions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.describe-source-regions-message/region-name :portkey.aws.rds.describe-source-regions-message/max-records :portkey.aws.rds.describe-source-regions-message/marker :portkey.aws.rds.describe-source-regions-message/filters]))

(clojure.spec.alpha/def :portkey.aws.rds.describe-event-subscriptions-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-event-subscriptions-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-event-subscriptions-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-event-subscriptions-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-event-subscriptions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.describe-event-subscriptions-message/subscription-name :portkey.aws.rds.describe-event-subscriptions-message/filters :portkey.aws.rds.describe-event-subscriptions-message/max-records :portkey.aws.rds.describe-event-subscriptions-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.describe-db-subnet-groups-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-subnet-groups-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-subnet-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-subnet-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-db-subnet-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.describe-db-subnet-groups-message/db-subnet-group-name :portkey.aws.rds.describe-db-subnet-groups-message/filters :portkey.aws.rds.describe-db-subnet-groups-message/max-records :portkey.aws.rds.describe-db-subnet-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds/pending-maintenance-actions (clojure.spec.alpha/coll-of :portkey.aws.rds/resource-pending-maintenance-actions))

(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-endpoint-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/restore-db-cluster-from-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/domain-iam-role-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/db-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/use-default-processor-features (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/availability-zone (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/license-model (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/domain (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/iops (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/tde-credential-password (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/storage-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/processor-features (clojure.spec.alpha/and :portkey.aws.rds/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds/restore-db-instance-from-db-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.restore-db-instance-from-db-snapshot-message/db-instance-identifier :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/db-snapshot-identifier] :opt-un [:portkey.aws.rds.restore-db-instance-from-db-snapshot-message/deletion-protection :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/option-group-name :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/enable-iam-database-authentication :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/publicly-accessible :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/domain-iam-role-name :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/copy-tags-to-snapshot :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/enable-cloudwatch-logs-exports :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/auto-minor-version-upgrade :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/tags :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/db-name :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/vpc-security-group-ids :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/use-default-processor-features :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/availability-zone :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/license-model :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/domain :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/db-subnet-group-name :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/port :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/iops :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/tde-credential-password :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/storage-type :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/processor-features :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/db-instance-class :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/engine :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/db-parameter-group-name :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/tde-credential-arn :portkey.aws.rds.restore-db-instance-from-db-snapshot-message/multi-az]))

(clojure.spec.alpha/def :portkey.aws.rds.option-group-option-setting/setting-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option-setting/setting-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option-setting/default-value (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option-setting/apply-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option-setting/allowed-values (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option-setting/is-modifiable (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option-setting/is-required (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option-setting/minimum-engine-version-per-allowed-value (clojure.spec.alpha/and :portkey.aws.rds/minimum-engine-version-per-allowed-value-list))
(clojure.spec.alpha/def :portkey.aws.rds/option-group-option-setting (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.option-group-option-setting/setting-name :portkey.aws.rds.option-group-option-setting/setting-description :portkey.aws.rds.option-group-option-setting/default-value :portkey.aws.rds.option-group-option-setting/apply-type :portkey.aws.rds.option-group-option-setting/allowed-values :portkey.aws.rds.option-group-option-setting/is-modifiable :portkey.aws.rds.option-group-option-setting/is-required :portkey.aws.rds.option-group-option-setting/minimum-engine-version-per-allowed-value]))

(clojure.spec.alpha/def :portkey.aws.rds.subnet/subnet-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.subnet/subnet-availability-zone (clojure.spec.alpha/and :portkey.aws.rds/availability-zone))
(clojure.spec.alpha/def :portkey.aws.rds.subnet/subnet-status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/subnet (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.subnet/subnet-identifier :portkey.aws.rds.subnet/subnet-availability-zone :portkey.aws.rds.subnet/subnet-status]))

(clojure.spec.alpha/def :portkey.aws.rds/option-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.db-subnet-group-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/db-subnet-group-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-subnet-group-message/marker :portkey.aws.rds/db-subnet-groups]))

(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/restore-to-time (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/source-db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/backtrack-window (clojure.spec.alpha/and :portkey.aws.rds/long-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/restore-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/use-latest-restorable-time (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds/restore-db-cluster-to-point-in-time-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.restore-db-cluster-to-point-in-time-message/db-cluster-identifier :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/source-db-cluster-identifier] :opt-un [:portkey.aws.rds.restore-db-cluster-to-point-in-time-message/deletion-protection :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/option-group-name :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/enable-iam-database-authentication :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/enable-cloudwatch-logs-exports :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/restore-to-time :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/tags :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/vpc-security-group-ids :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/db-cluster-parameter-group-name :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/db-subnet-group-name :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/port :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/kms-key-id :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/backtrack-window :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/restore-type :portkey.aws.rds.restore-db-cluster-to-point-in-time-message/use-latest-restorable-time]))

(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-snapshot-message/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-snapshot-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-snapshot-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-snapshot-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-snapshot-message/database-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-snapshot-message/engine-mode (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-snapshot-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-snapshot-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-snapshot-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-snapshot-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-snapshot-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-snapshot-message/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-snapshot-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-snapshot-message/backtrack-window (clojure.spec.alpha/and :portkey.aws.rds/long-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-snapshot-message/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-cluster-from-snapshot-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/restore-db-cluster-from-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.restore-db-cluster-from-snapshot-message/db-cluster-identifier :portkey.aws.rds.restore-db-cluster-from-snapshot-message/snapshot-identifier :portkey.aws.rds.restore-db-cluster-from-snapshot-message/engine] :opt-un [:portkey.aws.rds.restore-db-cluster-from-snapshot-message/deletion-protection :portkey.aws.rds.restore-db-cluster-from-snapshot-message/option-group-name :portkey.aws.rds.restore-db-cluster-from-snapshot-message/enable-iam-database-authentication :portkey.aws.rds.restore-db-cluster-from-snapshot-message/database-name :portkey.aws.rds.restore-db-cluster-from-snapshot-message/engine-mode :portkey.aws.rds.restore-db-cluster-from-snapshot-message/enable-cloudwatch-logs-exports :portkey.aws.rds.restore-db-cluster-from-snapshot-message/tags :portkey.aws.rds/scaling-configuration :portkey.aws.rds.restore-db-cluster-from-snapshot-message/vpc-security-group-ids :portkey.aws.rds.restore-db-cluster-from-snapshot-message/db-cluster-parameter-group-name :portkey.aws.rds.restore-db-cluster-from-snapshot-message/engine-version :portkey.aws.rds.restore-db-cluster-from-snapshot-message/db-subnet-group-name :portkey.aws.rds.restore-db-cluster-from-snapshot-message/port :portkey.aws.rds.restore-db-cluster-from-snapshot-message/kms-key-id :portkey.aws.rds.restore-db-cluster-from-snapshot-message/backtrack-window :portkey.aws.rds/availability-zones]))

(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot/snapshot-create-time (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot/snapshot-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot/license-model (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot/master-username (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot/port (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot/vpc-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot/cluster-create-time (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot/iam-database-authentication-enabled (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot/source-db-cluster-snapshot-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot/db-cluster-snapshot-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot/percent-progress (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-snapshot (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-cluster-snapshot/snapshot-create-time :portkey.aws.rds.db-cluster-snapshot/db-cluster-snapshot-identifier :portkey.aws.rds.db-cluster-snapshot/status :portkey.aws.rds.db-cluster-snapshot/snapshot-type :portkey.aws.rds.db-cluster-snapshot/license-model :portkey.aws.rds.db-cluster-snapshot/allocated-storage :portkey.aws.rds.db-cluster-snapshot/master-username :portkey.aws.rds.db-cluster-snapshot/engine-version :portkey.aws.rds.db-cluster-snapshot/storage-encrypted :portkey.aws.rds.db-cluster-snapshot/port :portkey.aws.rds.db-cluster-snapshot/vpc-id :portkey.aws.rds.db-cluster-snapshot/kms-key-id :portkey.aws.rds.db-cluster-snapshot/cluster-create-time :portkey.aws.rds.db-cluster-snapshot/iam-database-authentication-enabled :portkey.aws.rds.db-cluster-snapshot/engine :portkey.aws.rds.db-cluster-snapshot/source-db-cluster-snapshot-arn :portkey.aws.rds/availability-zones :portkey.aws.rds.db-cluster-snapshot/db-cluster-identifier :portkey.aws.rds.db-cluster-snapshot/db-cluster-snapshot-arn :portkey.aws.rds.db-cluster-snapshot/percent-progress]))

(clojure.spec.alpha/def :portkey.aws.rds.modify-db-subnet-group-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-subnet-group-message/db-subnet-group-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.rds/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.rds/modify-db-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.modify-db-subnet-group-message/db-subnet-group-name :portkey.aws.rds.modify-db-subnet-group-message/subnet-ids] :opt-un [:portkey.aws.rds.modify-db-subnet-group-message/db-subnet-group-description]))

(clojure.spec.alpha/def :portkey.aws.rds.delete-db-security-group-message/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/delete-db-security-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.delete-db-security-group-message/db-security-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.pending-cloudwatch-logs-exports/log-types-to-enable (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.pending-cloudwatch-logs-exports/log-types-to-disable (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds/pending-cloudwatch-logs-exports (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.pending-cloudwatch-logs-exports/log-types-to-enable :portkey.aws.rds.pending-cloudwatch-logs-exports/log-types-to-disable]))

(clojure.spec.alpha/def :portkey.aws.rds/promote-read-replica-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/db-security-groups (clojure.spec.alpha/and :portkey.aws.rds/db-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/promotion-tier (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/character-set-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/domain-iam-role-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/db-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/availability-zone (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/license-model (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/domain (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/monitoring-interval (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/timezone (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/master-username (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/iops (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/tde-credential-password (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/storage-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/processor-features (clojure.spec.alpha/and :portkey.aws.rds/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/performance-insights-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/enable-performance-insights (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/performance-insights-kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/create-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.create-db-instance-message/db-instance-identifier :portkey.aws.rds.create-db-instance-message/db-instance-class :portkey.aws.rds.create-db-instance-message/engine] :opt-un [:portkey.aws.rds.create-db-instance-message/deletion-protection :portkey.aws.rds.create-db-instance-message/backup-retention-period :portkey.aws.rds.create-db-instance-message/option-group-name :portkey.aws.rds.create-db-instance-message/db-security-groups :portkey.aws.rds.create-db-instance-message/promotion-tier :portkey.aws.rds.create-db-instance-message/character-set-name :portkey.aws.rds.create-db-instance-message/enable-iam-database-authentication :portkey.aws.rds.create-db-instance-message/publicly-accessible :portkey.aws.rds.create-db-instance-message/domain-iam-role-name :portkey.aws.rds.create-db-instance-message/preferred-maintenance-window :portkey.aws.rds.create-db-instance-message/copy-tags-to-snapshot :portkey.aws.rds.create-db-instance-message/enable-cloudwatch-logs-exports :portkey.aws.rds.create-db-instance-message/auto-minor-version-upgrade :portkey.aws.rds.create-db-instance-message/tags :portkey.aws.rds.create-db-instance-message/db-name :portkey.aws.rds.create-db-instance-message/vpc-security-group-ids :portkey.aws.rds.create-db-instance-message/availability-zone :portkey.aws.rds.create-db-instance-message/master-user-password :portkey.aws.rds.create-db-instance-message/license-model :portkey.aws.rds.create-db-instance-message/domain :portkey.aws.rds.create-db-instance-message/allocated-storage :portkey.aws.rds.create-db-instance-message/monitoring-interval :portkey.aws.rds.create-db-instance-message/timezone :portkey.aws.rds.create-db-instance-message/master-username :portkey.aws.rds.create-db-instance-message/engine-version :portkey.aws.rds.create-db-instance-message/storage-encrypted :portkey.aws.rds.create-db-instance-message/db-subnet-group-name :portkey.aws.rds.create-db-instance-message/port :portkey.aws.rds.create-db-instance-message/kms-key-id :portkey.aws.rds.create-db-instance-message/iops :portkey.aws.rds.create-db-instance-message/tde-credential-password :portkey.aws.rds.create-db-instance-message/storage-type :portkey.aws.rds.create-db-instance-message/processor-features :portkey.aws.rds.create-db-instance-message/performance-insights-retention-period :portkey.aws.rds.create-db-instance-message/db-parameter-group-name :portkey.aws.rds.create-db-instance-message/enable-performance-insights :portkey.aws.rds.create-db-instance-message/monitoring-role-arn :portkey.aws.rds.create-db-instance-message/tde-credential-arn :portkey.aws.rds.create-db-instance-message/multi-az :portkey.aws.rds.create-db-instance-message/performance-insights-kms-key-id :portkey.aws.rds.create-db-instance-message/db-cluster-identifier :portkey.aws.rds.create-db-instance-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.rds.promote-read-replica-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.promote-read-replica-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.promote-read-replica-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/promote-read-replica-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.promote-read-replica-message/db-instance-identifier] :opt-un [:portkey.aws.rds.promote-read-replica-message/backup-retention-period :portkey.aws.rds.promote-read-replica-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.rds/key-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-list (clojure.spec.alpha/coll-of :portkey.aws.rds/db-cluster))

(clojure.spec.alpha/def :portkey.aws.rds/invalid-db-cluster-endpoint-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-backtrack-list (clojure.spec.alpha/coll-of :portkey.aws.rds/db-cluster-backtrack))

(clojure.spec.alpha/def :portkey.aws.rds.modify-db-snapshot-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-snapshot-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-snapshot-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/modify-db-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.modify-db-snapshot-message/db-snapshot-identifier] :opt-un [:portkey.aws.rds.modify-db-snapshot-message/engine-version :portkey.aws.rds.modify-db-snapshot-message/option-group-name]))

(clojure.spec.alpha/def :portkey.aws.rds/db-engine-version-list (clojure.spec.alpha/coll-of :portkey.aws.rds/db-engine-version))

(clojure.spec.alpha/def :portkey.aws.rds.event-subscription/event-subscription-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.event-subscription/customer-aws-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.event-subscription/source-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.event-subscription/enabled (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.event-subscription/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.event-subscription/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.event-subscription/cust-subscription-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.event-subscription/subscription-creation-time (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/event-subscription (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/source-ids-list :portkey.aws.rds.event-subscription/event-subscription-arn :portkey.aws.rds.event-subscription/customer-aws-id :portkey.aws.rds.event-subscription/source-type :portkey.aws.rds.event-subscription/enabled :portkey.aws.rds.event-subscription/status :portkey.aws.rds.event-subscription/sns-topic-arn :portkey.aws.rds/event-categories-list :portkey.aws.rds.event-subscription/cust-subscription-id :portkey.aws.rds.event-subscription/subscription-creation-time]))

(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/snapshot-create-time (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/source-region (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/source-db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/encrypted (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/instance-create-time (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/availability-zone (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/snapshot-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/license-model (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/timezone (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/master-username (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/port (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/vpc-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/dbi-resource-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/iops (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/storage-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/processor-features (clojure.spec.alpha/and :portkey.aws.rds/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/iam-database-authentication-enabled (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/db-snapshot-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot/percent-progress (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds/db-snapshot (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-snapshot/snapshot-create-time :portkey.aws.rds.db-snapshot/option-group-name :portkey.aws.rds.db-snapshot/source-region :portkey.aws.rds.db-snapshot/source-db-snapshot-identifier :portkey.aws.rds.db-snapshot/encrypted :portkey.aws.rds.db-snapshot/db-instance-identifier :portkey.aws.rds.db-snapshot/instance-create-time :portkey.aws.rds.db-snapshot/availability-zone :portkey.aws.rds.db-snapshot/status :portkey.aws.rds.db-snapshot/snapshot-type :portkey.aws.rds.db-snapshot/license-model :portkey.aws.rds.db-snapshot/allocated-storage :portkey.aws.rds.db-snapshot/timezone :portkey.aws.rds.db-snapshot/master-username :portkey.aws.rds.db-snapshot/engine-version :portkey.aws.rds.db-snapshot/db-snapshot-identifier :portkey.aws.rds.db-snapshot/port :portkey.aws.rds.db-snapshot/vpc-id :portkey.aws.rds.db-snapshot/kms-key-id :portkey.aws.rds.db-snapshot/dbi-resource-id :portkey.aws.rds.db-snapshot/iops :portkey.aws.rds.db-snapshot/storage-type :portkey.aws.rds.db-snapshot/processor-features :portkey.aws.rds.db-snapshot/iam-database-authentication-enabled :portkey.aws.rds.db-snapshot/db-snapshot-arn :portkey.aws.rds.db-snapshot/engine :portkey.aws.rds.db-snapshot/tde-credential-arn :portkey.aws.rds.db-snapshot/percent-progress]))

(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-endpoints-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-endpoints-message/db-cluster-endpoint-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-endpoints-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-endpoints-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-endpoints-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-db-cluster-endpoints-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.describe-db-cluster-endpoints-message/db-cluster-identifier :portkey.aws.rds.describe-db-cluster-endpoints-message/db-cluster-endpoint-identifier :portkey.aws.rds.describe-db-cluster-endpoints-message/filters :portkey.aws.rds.describe-db-cluster-endpoints-message/max-records :portkey.aws.rds.describe-db-cluster-endpoints-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.describe-db-log-files-details/log-file-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-log-files-details/last-written (clojure.spec.alpha/and :portkey.aws.rds/long))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-log-files-details/size (clojure.spec.alpha/and :portkey.aws.rds/long))
(clojure.spec.alpha/def :portkey.aws.rds/describe-db-log-files-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.describe-db-log-files-details/log-file-name :portkey.aws.rds.describe-db-log-files-details/last-written :portkey.aws.rds.describe-db-log-files-details/size]))

(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-member/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-member/is-cluster-writer (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-member/db-cluster-parameter-group-status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-member/promotion-tier (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-member (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-cluster-member/db-instance-identifier :portkey.aws.rds.db-cluster-member/is-cluster-writer :portkey.aws.rds.db-cluster-member/db-cluster-parameter-group-status :portkey.aws.rds.db-cluster-member/promotion-tier]))

(clojure.spec.alpha/def :portkey.aws.rds.create-option-group-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-option-group-message/engine-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-option-group-message/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-option-group-message/option-group-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-option-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/create-option-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.create-option-group-message/option-group-name :portkey.aws.rds.create-option-group-message/engine-name :portkey.aws.rds.create-option-group-message/major-engine-version :portkey.aws.rds.create-option-group-message/option-group-description] :opt-un [:portkey.aws.rds.create-option-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds/invalid-vpc-network-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-role-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.start-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/start-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.start-db-cluster-message/db-cluster-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/db-instance-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.add-role-to-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.add-role-to-db-cluster-message/role-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/add-role-to-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.add-role-to-db-cluster-message/db-cluster-identifier :portkey.aws.rds.add-role-to-db-cluster-message/role-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/option-names-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds.delete-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.delete-db-instance-message/skip-final-snapshot (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.delete-db-instance-message/final-db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.delete-db-instance-message/delete-automated-backups (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds/delete-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.delete-db-instance-message/db-instance-identifier] :opt-un [:portkey.aws.rds.delete-db-instance-message/skip-final-snapshot :portkey.aws.rds.delete-db-instance-message/final-db-snapshot-identifier :portkey.aws.rds.delete-db-instance-message/delete-automated-backups]))

(clojure.spec.alpha/def :portkey.aws.rds.describe-global-clusters-message/global-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-global-clusters-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-global-clusters-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-global-clusters-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-global-clusters-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.describe-global-clusters-message/global-cluster-identifier :portkey.aws.rds.describe-global-clusters-message/filters :portkey.aws.rds.describe-global-clusters-message/max-records :portkey.aws.rds.describe-global-clusters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot-attributes-result/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot-attributes-result/db-snapshot-attributes (clojure.spec.alpha/and :portkey.aws.rds/db-snapshot-attribute-list))
(clojure.spec.alpha/def :portkey.aws.rds/db-snapshot-attributes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-snapshot-attributes-result/db-snapshot-identifier :portkey.aws.rds.db-snapshot-attributes-result/db-snapshot-attributes]))

(clojure.spec.alpha/def :portkey.aws.rds/shared-snapshot-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/invalid-db-subnet-group-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/certificate-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/delete-db-cluster-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-cluster-snapshot]))

(clojure.spec.alpha/def :portkey.aws.rds/copy-db-cluster-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-cluster-snapshot]))

(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-backtrack/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-backtrack/backtrack-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-backtrack/backtrack-to (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-backtrack/backtracked-from (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-backtrack/backtrack-request-creation-time (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-backtrack/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-backtrack (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-cluster-backtrack/db-cluster-identifier :portkey.aws.rds.db-cluster-backtrack/backtrack-identifier :portkey.aws.rds.db-cluster-backtrack/backtrack-to :portkey.aws.rds.db-cluster-backtrack/backtracked-from :portkey.aws.rds.db-cluster-backtrack/backtrack-request-creation-time :portkey.aws.rds.db-cluster-backtrack/status]))

(clojure.spec.alpha/def :portkey.aws.rds.start-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/start-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.start-db-instance-message/db-instance-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/reserved-db-instance-list (clojure.spec.alpha/coll-of :portkey.aws.rds/reserved-db-instance))

(clojure.spec.alpha/def :portkey.aws.rds.orderable-db-instance-options-message/orderable-db-instance-options (clojure.spec.alpha/and :portkey.aws.rds/orderable-db-instance-options-list))
(clojure.spec.alpha/def :portkey.aws.rds.orderable-db-instance-options-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/orderable-db-instance-options-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.orderable-db-instance-options-message/orderable-db-instance-options :portkey.aws.rds.orderable-db-instance-options-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds/event-categories-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/event-categories-map-list]))

(clojure.spec.alpha/def :portkey.aws.rds.resource-pending-maintenance-actions/resource-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/resource-pending-maintenance-actions (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.resource-pending-maintenance-actions/resource-identifier :portkey.aws.rds/pending-maintenance-action-details]))

(clojure.spec.alpha/def :portkey.aws.rds.global-cluster/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.global-cluster/global-cluster-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.global-cluster/database-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.global-cluster/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.global-cluster/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.global-cluster/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.global-cluster/global-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.global-cluster/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.global-cluster/global-cluster-members (clojure.spec.alpha/and :portkey.aws.rds/global-cluster-member-list))
(clojure.spec.alpha/def :portkey.aws.rds.global-cluster/global-cluster-resource-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/global-cluster (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.global-cluster/deletion-protection :portkey.aws.rds.global-cluster/global-cluster-arn :portkey.aws.rds.global-cluster/database-name :portkey.aws.rds.global-cluster/status :portkey.aws.rds.global-cluster/engine-version :portkey.aws.rds.global-cluster/storage-encrypted :portkey.aws.rds.global-cluster/global-cluster-identifier :portkey.aws.rds.global-cluster/engine :portkey.aws.rds.global-cluster/global-cluster-members :portkey.aws.rds.global-cluster/global-cluster-resource-id]))

(clojure.spec.alpha/def :portkey.aws.rds.delete-db-cluster-snapshot-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/delete-db-cluster-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.delete-db-cluster-snapshot-message/db-cluster-snapshot-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.scaling-configuration/min-capacity (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.scaling-configuration/max-capacity (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.scaling-configuration/auto-pause (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.scaling-configuration/seconds-until-auto-pause (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds/scaling-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.scaling-configuration/min-capacity :portkey.aws.rds.scaling-configuration/max-capacity :portkey.aws.rds.scaling-configuration/auto-pause :portkey.aws.rds.scaling-configuration/seconds-until-auto-pause]))

(clojure.spec.alpha/def :portkey.aws.rds.apply-pending-maintenance-action-message/resource-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.apply-pending-maintenance-action-message/apply-action (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.apply-pending-maintenance-action-message/opt-in-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/apply-pending-maintenance-action-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.apply-pending-maintenance-action-message/resource-identifier :portkey.aws.rds.apply-pending-maintenance-action-message/apply-action :portkey.aws.rds.apply-pending-maintenance-action-message/opt-in-type] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.describe-events-message/end-time (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.describe-events-message/start-time (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.describe-events-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-events-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-events-message/duration (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-events-message/event-categories (clojure.spec.alpha/and :portkey.aws.rds/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-events-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-events-message/source-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-events-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.describe-events-message/end-time :portkey.aws.rds.describe-events-message/start-time :portkey.aws.rds.describe-events-message/max-records :portkey.aws.rds.describe-events-message/marker :portkey.aws.rds/source-type :portkey.aws.rds.describe-events-message/duration :portkey.aws.rds.describe-events-message/event-categories :portkey.aws.rds.describe-events-message/filters :portkey.aws.rds.describe-events-message/source-identifier]))

(clojure.spec.alpha/def :portkey.aws.rds/subscription-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/replication-source-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/earliest-restorable-time (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/character-set-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/database-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/custom-endpoints (clojure.spec.alpha/and :portkey.aws.rds/string-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/engine-mode (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/clone-group-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/enabled-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/master-username (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/hosted-zone-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/db-cluster-resource-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/db-cluster-members (clojure.spec.alpha/and :portkey.aws.rds/db-cluster-member-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/cluster-create-time (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/capacity (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/backtrack-window (clojure.spec.alpha/and :portkey.aws.rds/long-optional))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/read-replica-identifiers (clojure.spec.alpha/and :portkey.aws.rds/read-replica-identifier-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/db-cluster-parameter-group (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/endpoint (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/iam-database-authentication-enabled (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/db-cluster-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/vpc-security-groups (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/earliest-backtrack-time (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/reader-endpoint (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/associated-roles (clojure.spec.alpha/and :portkey.aws.rds/db-cluster-roles))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/backtrack-consumed-change-records (clojure.spec.alpha/and :portkey.aws.rds/long-optional))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/multi-az (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/percent-progress (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/http-endpoint-enabled (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/latest-restorable-time (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster/db-subnet-group (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/db-cluster (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-cluster/deletion-protection :portkey.aws.rds.db-cluster/backup-retention-period :portkey.aws.rds.db-cluster/replication-source-identifier :portkey.aws.rds.db-cluster/earliest-restorable-time :portkey.aws.rds.db-cluster/character-set-name :portkey.aws.rds/scaling-configuration-info :portkey.aws.rds.db-cluster/database-name :portkey.aws.rds.db-cluster/custom-endpoints :portkey.aws.rds.db-cluster/preferred-maintenance-window :portkey.aws.rds.db-cluster/engine-mode :portkey.aws.rds.db-cluster/clone-group-id :portkey.aws.rds.db-cluster/enabled-cloudwatch-logs-exports :portkey.aws.rds.db-cluster/status :portkey.aws.rds.db-cluster/allocated-storage :portkey.aws.rds.db-cluster/master-username :portkey.aws.rds.db-cluster/engine-version :portkey.aws.rds.db-cluster/hosted-zone-id :portkey.aws.rds.db-cluster/storage-encrypted :portkey.aws.rds.db-cluster/port :portkey.aws.rds.db-cluster/db-cluster-resource-id :portkey.aws.rds.db-cluster/db-cluster-members :portkey.aws.rds.db-cluster/kms-key-id :portkey.aws.rds.db-cluster/cluster-create-time :portkey.aws.rds.db-cluster/capacity :portkey.aws.rds.db-cluster/backtrack-window :portkey.aws.rds.db-cluster/read-replica-identifiers :portkey.aws.rds.db-cluster/db-cluster-parameter-group :portkey.aws.rds.db-cluster/endpoint :portkey.aws.rds.db-cluster/iam-database-authentication-enabled :portkey.aws.rds.db-cluster/db-cluster-arn :portkey.aws.rds.db-cluster/vpc-security-groups :portkey.aws.rds.db-cluster/engine :portkey.aws.rds.db-cluster/earliest-backtrack-time :portkey.aws.rds/db-cluster-option-group-memberships :portkey.aws.rds/availability-zones :portkey.aws.rds.db-cluster/reader-endpoint :portkey.aws.rds.db-cluster/associated-roles :portkey.aws.rds.db-cluster/backtrack-consumed-change-records :portkey.aws.rds.db-cluster/multi-az :portkey.aws.rds.db-cluster/db-cluster-identifier :portkey.aws.rds.db-cluster/preferred-backup-window :portkey.aws.rds.db-cluster/percent-progress :portkey.aws.rds.db-cluster/http-endpoint-enabled :portkey.aws.rds.db-cluster/latest-restorable-time :portkey.aws.rds.db-cluster/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.rds.option-group/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group/option-group-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group/engine-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group/options (clojure.spec.alpha/and :portkey.aws.rds/options-list))
(clojure.spec.alpha/def :portkey.aws.rds.option-group/allows-vpc-and-non-vpc-instance-memberships (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.option-group/vpc-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group/option-group-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/option-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.option-group/option-group-name :portkey.aws.rds.option-group/option-group-description :portkey.aws.rds.option-group/engine-name :portkey.aws.rds.option-group/major-engine-version :portkey.aws.rds.option-group/options :portkey.aws.rds.option-group/allows-vpc-and-non-vpc-instance-memberships :portkey.aws.rds.option-group/vpc-id :portkey.aws.rds.option-group/option-group-arn]))

(clojure.spec.alpha/def :portkey.aws.rds/authorization-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/option-groups-list (clojure.spec.alpha/coll-of :portkey.aws.rds/option-group))

(clojure.spec.alpha/def :portkey.aws.rds/db-instance-automated-backup-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/ip-range-list (clojure.spec.alpha/coll-of :portkey.aws.rds/ip-range))

(clojure.spec.alpha/def :portkey.aws.rds.describe-pending-maintenance-actions-message/resource-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-pending-maintenance-actions-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-pending-maintenance-actions-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-pending-maintenance-actions-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds/describe-pending-maintenance-actions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.describe-pending-maintenance-actions-message/resource-identifier :portkey.aws.rds.describe-pending-maintenance-actions-message/filters :portkey.aws.rds.describe-pending-maintenance-actions-message/marker :portkey.aws.rds.describe-pending-maintenance-actions-message/max-records]))

(clojure.spec.alpha/def :portkey.aws.rds/invalid-db-subnet-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/option-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/create-db-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-snapshot]))

(clojure.spec.alpha/def :portkey.aws.rds.db-instance-status-info/status-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-status-info/normal (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-status-info/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-status-info/message (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/db-instance-status-info (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-instance-status-info/status-type :portkey.aws.rds.db-instance-status-info/normal :portkey.aws.rds.db-instance-status-info/status :portkey.aws.rds.db-instance-status-info/message]))

(clojure.spec.alpha/def :portkey.aws.rds.authorize-db-security-group-ingress-message/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.authorize-db-security-group-ingress-message/cidrip (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.authorize-db-security-group-ingress-message/ec-2-security-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.authorize-db-security-group-ingress-message/ec-2-security-group-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.authorize-db-security-group-ingress-message/ec-2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/authorize-db-security-group-ingress-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.authorize-db-security-group-ingress-message/db-security-group-name] :opt-un [:portkey.aws.rds.authorize-db-security-group-ingress-message/cidrip :portkey.aws.rds.authorize-db-security-group-ingress-message/ec-2-security-group-name :portkey.aws.rds.authorize-db-security-group-ingress-message/ec-2-security-group-id :portkey.aws.rds.authorize-db-security-group-ingress-message/ec-2-security-group-owner-id]))

(clojure.spec.alpha/def :portkey.aws.rds/sns-topic-arn-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.remove-role-from-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.remove-role-from-db-cluster-message/role-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/remove-role-from-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.remove-role-from-db-cluster-message/db-cluster-identifier :portkey.aws.rds.remove-role-from-db-cluster-message/role-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/event-list (clojure.spec.alpha/coll-of :portkey.aws.rds/event))

(clojure.spec.alpha/def :portkey.aws.rds.describe-engine-default-cluster-parameters-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-engine-default-cluster-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-engine-default-cluster-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-engine-default-cluster-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-engine-default-cluster-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.describe-engine-default-cluster-parameters-message/db-parameter-group-family] :opt-un [:portkey.aws.rds.describe-engine-default-cluster-parameters-message/filters :portkey.aws.rds.describe-engine-default-cluster-parameters-message/max-records :portkey.aws.rds.describe-engine-default-cluster-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.events-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.events-message/events (clojure.spec.alpha/and :portkey.aws.rds/event-list))
(clojure.spec.alpha/def :portkey.aws.rds/events-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.events-message/marker :portkey.aws.rds.events-message/events]))

(clojure.spec.alpha/def :portkey.aws.rds.account-attributes-message/account-quotas (clojure.spec.alpha/and :portkey.aws.rds/account-quota-list))
(clojure.spec.alpha/def :portkey.aws.rds/account-attributes-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.account-attributes-message/account-quotas]))

(clojure.spec.alpha/def :portkey.aws.rds/source-type #{:dbcluster "db-security-group" "db-cluster" :dbsecuritygroup :dbclustersnapshot "db-instance" "db-cluster-snapshot" :dbparametergroup "db-parameter-group" "db-snapshot" :dbsnapshot :dbinstance})

(clojure.spec.alpha/def :portkey.aws.rds/orderable-db-instance-options-list (clojure.spec.alpha/coll-of :portkey.aws.rds/orderable-db-instance-option))

(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot-message/db-cluster-snapshots (clojure.spec.alpha/and :portkey.aws.rds/db-cluster-snapshot-list))
(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-snapshot-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-cluster-snapshot-message/marker :portkey.aws.rds.db-cluster-snapshot-message/db-cluster-snapshots]))

(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot-message/db-snapshots (clojure.spec.alpha/and :portkey.aws.rds/db-snapshot-list))
(clojure.spec.alpha/def :portkey.aws.rds/db-snapshot-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-snapshot-message/marker :portkey.aws.rds.db-snapshot-message/db-snapshots]))

(clojure.spec.alpha/def :portkey.aws.rds/subscription-category-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.event/source-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.event/message (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.event/event-categories (clojure.spec.alpha/and :portkey.aws.rds/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds.event/date (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.event/source-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/event (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.event/source-identifier :portkey.aws.rds/source-type :portkey.aws.rds.event/message :portkey.aws.rds.event/event-categories :portkey.aws.rds.event/date :portkey.aws.rds.event/source-arn]))

(clojure.spec.alpha/def :portkey.aws.rds.option-group-options-message/option-group-options (clojure.spec.alpha/and :portkey.aws.rds/option-group-options-list))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-options-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/option-group-options-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.option-group-options-message/option-group-options :portkey.aws.rds.option-group-options-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-endpoint-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-endpoint-message/db-cluster-endpoints (clojure.spec.alpha/and :portkey.aws.rds/db-cluster-endpoint-list))
(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-endpoint-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-cluster-endpoint-message/marker :portkey.aws.rds.db-cluster-endpoint-message/db-cluster-endpoints]))

(clojure.spec.alpha/def :portkey.aws.rds/feature-name-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds/revoke-db-security-group-ingress-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-security-group]))

(clojure.spec.alpha/def :portkey.aws.rds/availability-zone-list (clojure.spec.alpha/coll-of :portkey.aws.rds/availability-zone))

(clojure.spec.alpha/def :portkey.aws.rds.reset-db-parameter-group-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reset-db-parameter-group-message/reset-all-parameters (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.reset-db-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.rds/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds/reset-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.reset-db-parameter-group-message/db-parameter-group-name] :opt-un [:portkey.aws.rds.reset-db-parameter-group-message/reset-all-parameters :portkey.aws.rds.reset-db-parameter-group-message/parameters]))

(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-parameter-groups-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-parameter-groups-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-parameter-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-db-cluster-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.describe-db-cluster-parameter-groups-message/db-cluster-parameter-group-name :portkey.aws.rds.describe-db-cluster-parameter-groups-message/filters :portkey.aws.rds.describe-db-cluster-parameter-groups-message/max-records :portkey.aws.rds.describe-db-cluster-parameter-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.availability-zone/name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/availability-zone (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.availability-zone/name]))

(clojure.spec.alpha/def :portkey.aws.rds.event-subscriptions-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/event-subscriptions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.event-subscriptions-message/marker :portkey.aws.rds/event-subscriptions-list]))

(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instances-offering-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instances-offering-message/reserved-db-instances-offerings (clojure.spec.alpha/and :portkey.aws.rds/reserved-db-instances-offering-list))
(clojure.spec.alpha/def :portkey.aws.rds/reserved-db-instances-offering-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.reserved-db-instances-offering-message/marker :portkey.aws.rds.reserved-db-instances-offering-message/reserved-db-instances-offerings]))

(clojure.spec.alpha/def :portkey.aws.rds/create-db-subnet-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.rds/create-event-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-parameter-group-list (clojure.spec.alpha/coll-of :portkey.aws.rds/db-cluster-parameter-group))

(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-parameter-group-details/parameters (clojure.spec.alpha/and :portkey.aws.rds/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-parameter-group-details/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-parameter-group-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-cluster-parameter-group-details/parameters :portkey.aws.rds.db-cluster-parameter-group-details/marker]))

(clojure.spec.alpha/def :portkey.aws.rds/create-db-security-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-security-group]))

(clojure.spec.alpha/def :portkey.aws.rds.describe-orderable-db-instance-options-message/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-orderable-db-instance-options-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-orderable-db-instance-options-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-orderable-db-instance-options-message/license-model (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-orderable-db-instance-options-message/vpc (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-orderable-db-instance-options-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-orderable-db-instance-options-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-orderable-db-instance-options-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-orderable-db-instance-options-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.describe-orderable-db-instance-options-message/engine] :opt-un [:portkey.aws.rds.describe-orderable-db-instance-options-message/engine-version :portkey.aws.rds.describe-orderable-db-instance-options-message/db-instance-class :portkey.aws.rds.describe-orderable-db-instance-options-message/license-model :portkey.aws.rds.describe-orderable-db-instance-options-message/vpc :portkey.aws.rds.describe-orderable-db-instance-options-message/filters :portkey.aws.rds.describe-orderable-db-instance-options-message/max-records :portkey.aws.rds.describe-orderable-db-instance-options-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.db-instance-automated-backup/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-automated-backup/encrypted (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-automated-backup/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-automated-backup/db-instance-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-automated-backup/instance-create-time (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-automated-backup/availability-zone (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-automated-backup/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-automated-backup/license-model (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-automated-backup/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-automated-backup/timezone (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-automated-backup/master-username (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-automated-backup/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-automated-backup/port (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-automated-backup/vpc-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-automated-backup/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-automated-backup/dbi-resource-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-automated-backup/iops (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-automated-backup/storage-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-automated-backup/iam-database-authentication-enabled (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-automated-backup/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-automated-backup/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-automated-backup/region (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/db-instance-automated-backup (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-instance-automated-backup/option-group-name :portkey.aws.rds.db-instance-automated-backup/encrypted :portkey.aws.rds.db-instance-automated-backup/db-instance-identifier :portkey.aws.rds.db-instance-automated-backup/db-instance-arn :portkey.aws.rds.db-instance-automated-backup/instance-create-time :portkey.aws.rds.db-instance-automated-backup/availability-zone :portkey.aws.rds.db-instance-automated-backup/status :portkey.aws.rds.db-instance-automated-backup/license-model :portkey.aws.rds.db-instance-automated-backup/allocated-storage :portkey.aws.rds.db-instance-automated-backup/timezone :portkey.aws.rds.db-instance-automated-backup/master-username :portkey.aws.rds.db-instance-automated-backup/engine-version :portkey.aws.rds/restore-window :portkey.aws.rds.db-instance-automated-backup/port :portkey.aws.rds.db-instance-automated-backup/vpc-id :portkey.aws.rds.db-instance-automated-backup/kms-key-id :portkey.aws.rds.db-instance-automated-backup/dbi-resource-id :portkey.aws.rds.db-instance-automated-backup/iops :portkey.aws.rds.db-instance-automated-backup/storage-type :portkey.aws.rds.db-instance-automated-backup/iam-database-authentication-enabled :portkey.aws.rds.db-instance-automated-backup/engine :portkey.aws.rds.db-instance-automated-backup/tde-credential-arn :portkey.aws.rds.db-instance-automated-backup/region]))

(clojure.spec.alpha/def :portkey.aws.rds/db-instance-automated-backup-list (clojure.spec.alpha/coll-of :portkey.aws.rds/db-instance-automated-backup))

(clojure.spec.alpha/def :portkey.aws.rds.create-db-subnet-group-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-subnet-group-message/db-subnet-group-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.rds/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-subnet-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/create-db-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.create-db-subnet-group-message/db-subnet-group-name :portkey.aws.rds.create-db-subnet-group-message/db-subnet-group-description :portkey.aws.rds.create-db-subnet-group-message/subnet-ids] :opt-un [:portkey.aws.rds.create-db-subnet-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds/create-global-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/global-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds/invalid-db-security-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-member-list (clojure.spec.alpha/coll-of :portkey.aws.rds/db-cluster-member))

(clojure.spec.alpha/def :portkey.aws.rds.option-groups/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/option-groups (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/option-groups-list :portkey.aws.rds.option-groups/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.delete-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/delete-event-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.delete-event-subscription-message/subscription-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.copy-option-group-message/source-option-group-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copy-option-group-message/target-option-group-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copy-option-group-message/target-option-group-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copy-option-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/copy-option-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.copy-option-group-message/source-option-group-identifier :portkey.aws.rds.copy-option-group-message/target-option-group-identifier :portkey.aws.rds.copy-option-group-message/target-option-group-description] :opt-un [:portkey.aws.rds.copy-option-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-endpoint-message/db-cluster-endpoint-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-endpoint-message/endpoint-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-endpoint-message/static-members (clojure.spec.alpha/and :portkey.aws.rds/string-list))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-endpoint-message/excluded-members (clojure.spec.alpha/and :portkey.aws.rds/string-list))
(clojure.spec.alpha/def :portkey.aws.rds/modify-db-cluster-endpoint-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.modify-db-cluster-endpoint-message/db-cluster-endpoint-identifier] :opt-un [:portkey.aws.rds.modify-db-cluster-endpoint-message/endpoint-type :portkey.aws.rds.modify-db-cluster-endpoint-message/static-members :portkey.aws.rds.modify-db-cluster-endpoint-message/excluded-members]))

(clojure.spec.alpha/def :portkey.aws.rds/storage-type-not-supported-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-role-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/read-replica-db-instance-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-parameter-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/authorize-db-security-group-ingress-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-security-group]))

(clojure.spec.alpha/def :portkey.aws.rds/db-subnet-group-does-not-cover-enough-a-zs (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.db-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-parameter-groups-message/db-parameter-groups (clojure.spec.alpha/and :portkey.aws.rds/db-parameter-group-list))
(clojure.spec.alpha/def :portkey.aws.rds/db-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-parameter-groups-message/marker :portkey.aws.rds.db-parameter-groups-message/db-parameter-groups]))

(clojure.spec.alpha/def :portkey.aws.rds.delete-db-cluster-endpoint-message/db-cluster-endpoint-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/delete-db-cluster-endpoint-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.delete-db-cluster-endpoint-message/db-cluster-endpoint-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.recurring-charge/recurring-charge-amount (clojure.spec.alpha/and :portkey.aws.rds/double))
(clojure.spec.alpha/def :portkey.aws.rds.recurring-charge/recurring-charge-frequency (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/recurring-charge (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.recurring-charge/recurring-charge-amount :portkey.aws.rds.recurring-charge/recurring-charge-frequency]))

(clojure.spec.alpha/def :portkey.aws.rds/describe-engine-default-parameters-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/engine-defaults]))

(clojure.spec.alpha/def :portkey.aws.rds/valid-upgrade-target-list (clojure.spec.alpha/coll-of :portkey.aws.rds/upgrade-target))

(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-snapshot-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/authorization-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.copy-db-snapshot-message/source-db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copy-db-snapshot-message/target-db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copy-db-snapshot-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copy-db-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.copy-db-snapshot-message/copy-tags (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.copy-db-snapshot-message/pre-signed-url (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.copy-db-snapshot-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/copy-db-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.copy-db-snapshot-message/source-db-snapshot-identifier :portkey.aws.rds.copy-db-snapshot-message/target-db-snapshot-identifier] :opt-un [:portkey.aws.rds.copy-db-snapshot-message/kms-key-id :portkey.aws.rds.copy-db-snapshot-message/tags :portkey.aws.rds.copy-db-snapshot-message/copy-tags :portkey.aws.rds.copy-db-snapshot-message/pre-signed-url :portkey.aws.rds.copy-db-snapshot-message/option-group-name]))

(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-role-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.range/from (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.range/to (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.range/step (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds/range (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.range/from :portkey.aws.rds.range/to :portkey.aws.rds.range/step]))

(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/pre-signed-url (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/use-default-processor-features (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/availability-zone (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/source-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/monitoring-interval (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/iops (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/storage-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/processor-features (clojure.spec.alpha/and :portkey.aws.rds/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/performance-insights-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/enable-performance-insights (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-instance-read-replica-message/performance-insights-kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/create-db-instance-read-replica-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.create-db-instance-read-replica-message/db-instance-identifier :portkey.aws.rds.create-db-instance-read-replica-message/source-db-instance-identifier] :opt-un [:portkey.aws.rds.create-db-instance-read-replica-message/deletion-protection :portkey.aws.rds.create-db-instance-read-replica-message/option-group-name :portkey.aws.rds.create-db-instance-read-replica-message/enable-iam-database-authentication :portkey.aws.rds.create-db-instance-read-replica-message/publicly-accessible :portkey.aws.rds.create-db-instance-read-replica-message/pre-signed-url :portkey.aws.rds.create-db-instance-read-replica-message/copy-tags-to-snapshot :portkey.aws.rds.create-db-instance-read-replica-message/enable-cloudwatch-logs-exports :portkey.aws.rds.create-db-instance-read-replica-message/auto-minor-version-upgrade :portkey.aws.rds.create-db-instance-read-replica-message/tags :portkey.aws.rds.create-db-instance-read-replica-message/vpc-security-group-ids :portkey.aws.rds.create-db-instance-read-replica-message/use-default-processor-features :portkey.aws.rds.create-db-instance-read-replica-message/availability-zone :portkey.aws.rds.create-db-instance-read-replica-message/monitoring-interval :portkey.aws.rds.create-db-instance-read-replica-message/db-subnet-group-name :portkey.aws.rds.create-db-instance-read-replica-message/port :portkey.aws.rds.create-db-instance-read-replica-message/kms-key-id :portkey.aws.rds.create-db-instance-read-replica-message/iops :portkey.aws.rds.create-db-instance-read-replica-message/storage-type :portkey.aws.rds.create-db-instance-read-replica-message/processor-features :portkey.aws.rds.create-db-instance-read-replica-message/performance-insights-retention-period :portkey.aws.rds.create-db-instance-read-replica-message/db-instance-class :portkey.aws.rds.create-db-instance-read-replica-message/enable-performance-insights :portkey.aws.rds.create-db-instance-read-replica-message/monitoring-role-arn :portkey.aws.rds.create-db-instance-read-replica-message/multi-az :portkey.aws.rds.create-db-instance-read-replica-message/performance-insights-kms-key-id]))

(clojure.spec.alpha/def :portkey.aws.rds/create-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds/copy-db-cluster-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-cluster-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.rds/subnet-already-in-use (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/insufficient-storage-cluster-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-snapshot-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/create-option-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/option-group]))

(clojure.spec.alpha/def :portkey.aws.rds/copy-db-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-snapshot]))

(clojure.spec.alpha/def :portkey.aws.rds/invalid-db-cluster-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-roles (clojure.spec.alpha/coll-of :portkey.aws.rds/db-cluster-role))

(clojure.spec.alpha/def :portkey.aws.rds.certificate-message/certificates (clojure.spec.alpha/and :portkey.aws.rds/certificate-list))
(clojure.spec.alpha/def :portkey.aws.rds.certificate-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/certificate-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.certificate-message/certificates :portkey.aws.rds.certificate-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds/modify-db-subnet-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.rds/invalid-db-instance-automated-backup-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/engine-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/requires-auto-minor-engine-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/option-group-option-versions (clojure.spec.alpha/and :portkey.aws.rds/option-group-option-versions-list))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/permanent (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/vpc-only (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/port-required (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/option-group-option-settings (clojure.spec.alpha/and :portkey.aws.rds/option-group-option-settings-list))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/persistent (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/minimum-required-minor-engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/default-port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/supports-option-version-downgrade (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-option/name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/option-group-option (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.option-group-option/major-engine-version :portkey.aws.rds.option-group-option/engine-name :portkey.aws.rds.option-group-option/requires-auto-minor-engine-version-upgrade :portkey.aws.rds.option-group-option/option-group-option-versions :portkey.aws.rds.option-group-option/permanent :portkey.aws.rds.option-group-option/vpc-only :portkey.aws.rds.option-group-option/port-required :portkey.aws.rds/options-conflicts-with :portkey.aws.rds.option-group-option/option-group-option-settings :portkey.aws.rds.option-group-option/persistent :portkey.aws.rds.option-group-option/description :portkey.aws.rds.option-group-option/minimum-required-minor-engine-version :portkey.aws.rds.option-group-option/default-port :portkey.aws.rds.option-group-option/supports-option-version-downgrade :portkey.aws.rds/options-depended-on :portkey.aws.rds.option-group-option/name]))

(clojure.spec.alpha/def :portkey.aws.rds/option-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/invalid-subnet (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/modify-db-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-snapshot]))

(clojure.spec.alpha/def :portkey.aws.rds/tag-list (clojure.spec.alpha/coll-of :portkey.aws.rds/tag))

(clojure.spec.alpha/def :portkey.aws.rds.remove-from-global-cluster-message/global-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.remove-from-global-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/remove-from-global-cluster-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.remove-from-global-cluster-message/global-cluster-identifier :portkey.aws.rds.remove-from-global-cluster-message/db-cluster-identifier]))

(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-message/enable-http-endpoint (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-message/new-db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-message/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-message/backtrack-window (clojure.spec.alpha/and :portkey.aws.rds/long-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/modify-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.modify-db-cluster-message/db-cluster-identifier] :opt-un [:portkey.aws.rds.modify-db-cluster-message/deletion-protection :portkey.aws.rds.modify-db-cluster-message/backup-retention-period :portkey.aws.rds.modify-db-cluster-message/enable-http-endpoint :portkey.aws.rds.modify-db-cluster-message/option-group-name :portkey.aws.rds.modify-db-cluster-message/enable-iam-database-authentication :portkey.aws.rds.modify-db-cluster-message/new-db-cluster-identifier :portkey.aws.rds.modify-db-cluster-message/preferred-maintenance-window :portkey.aws.rds/scaling-configuration :portkey.aws.rds.modify-db-cluster-message/vpc-security-group-ids :portkey.aws.rds.modify-db-cluster-message/db-cluster-parameter-group-name :portkey.aws.rds.modify-db-cluster-message/master-user-password :portkey.aws.rds.modify-db-cluster-message/engine-version :portkey.aws.rds.modify-db-cluster-message/port :portkey.aws.rds.modify-db-cluster-message/backtrack-window :portkey.aws.rds.modify-db-cluster-message/apply-immediately :portkey.aws.rds/cloudwatch-logs-export-configuration :portkey.aws.rds.modify-db-cluster-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.rds/modify-option-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/option-group]))

(clojure.spec.alpha/def :portkey.aws.rds.timezone/timezone-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/timezone (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.timezone/timezone-name]))

(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-snapshot-list (clojure.spec.alpha/coll-of :portkey.aws.rds/db-cluster-snapshot))

(clojure.spec.alpha/def :portkey.aws.rds/invalid-global-cluster-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.db-engine-version/supported-engine-modes (clojure.spec.alpha/and :portkey.aws.rds/engine-mode-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-engine-version/default-character-set (clojure.spec.alpha/and :portkey.aws.rds/character-set))
(clojure.spec.alpha/def :portkey.aws.rds.db-engine-version/db-engine-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-engine-version/supported-timezones (clojure.spec.alpha/and :portkey.aws.rds/supported-timezones-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-engine-version/supports-read-replica (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.db-engine-version/db-engine-version-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-engine-version/valid-upgrade-target (clojure.spec.alpha/and :portkey.aws.rds/valid-upgrade-target-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-engine-version/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-engine-version/supported-character-sets (clojure.spec.alpha/and :portkey.aws.rds/supported-character-sets-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-engine-version/supports-log-exports-to-cloudwatch-logs (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.db-engine-version/supported-feature-names (clojure.spec.alpha/and :portkey.aws.rds/feature-name-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-engine-version/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-engine-version/exportable-log-types (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-engine-version/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/db-engine-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-engine-version/supported-engine-modes :portkey.aws.rds.db-engine-version/default-character-set :portkey.aws.rds.db-engine-version/db-engine-description :portkey.aws.rds.db-engine-version/supported-timezones :portkey.aws.rds.db-engine-version/supports-read-replica :portkey.aws.rds.db-engine-version/db-engine-version-description :portkey.aws.rds.db-engine-version/valid-upgrade-target :portkey.aws.rds.db-engine-version/engine-version :portkey.aws.rds.db-engine-version/supported-character-sets :portkey.aws.rds.db-engine-version/supports-log-exports-to-cloudwatch-logs :portkey.aws.rds.db-engine-version/supported-feature-names :portkey.aws.rds.db-engine-version/engine :portkey.aws.rds.db-engine-version/exportable-log-types :portkey.aws.rds.db-engine-version/db-parameter-group-family]))

(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-parameters-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-parameters-message/source (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-db-cluster-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.describe-db-cluster-parameters-message/db-cluster-parameter-group-name] :opt-un [:portkey.aws.rds.describe-db-cluster-parameters-message/source :portkey.aws.rds.describe-db-cluster-parameters-message/filters :portkey.aws.rds.describe-db-cluster-parameters-message/max-records :portkey.aws.rds.describe-db-cluster-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds/options-conflicts-with (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds.db-instance-automated-backup-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-automated-backup-message/db-instance-automated-backups (clojure.spec.alpha/and :portkey.aws.rds/db-instance-automated-backup-list))
(clojure.spec.alpha/def :portkey.aws.rds/db-instance-automated-backup-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-instance-automated-backup-message/marker :portkey.aws.rds.db-instance-automated-backup-message/db-instance-automated-backups]))

(clojure.spec.alpha/def :portkey.aws.rds/option-setting-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.rds/option-setting))

(clojure.spec.alpha/def :portkey.aws.rds/subscription-already-exist-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/db-upgrade-dependency-failure-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.add-source-identifier-to-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.add-source-identifier-to-subscription-message/source-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/add-source-identifier-to-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.add-source-identifier-to-subscription-message/subscription-name :portkey.aws.rds.add-source-identifier-to-subscription-message/source-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/domain-membership-list (clojure.spec.alpha/coll-of :portkey.aws.rds/domain-membership))

(clojure.spec.alpha/def :portkey.aws.rds.backtrack-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.backtrack-db-cluster-message/backtrack-to (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.backtrack-db-cluster-message/force (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.backtrack-db-cluster-message/use-earliest-time-on-point-in-time-unavailable (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds/backtrack-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.backtrack-db-cluster-message/db-cluster-identifier :portkey.aws.rds.backtrack-db-cluster-message/backtrack-to] :opt-un [:portkey.aws.rds.backtrack-db-cluster-message/force :portkey.aws.rds.backtrack-db-cluster-message/use-earliest-time-on-point-in-time-unavailable]))

(clojure.spec.alpha/def :portkey.aws.rds.add-tags-to-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.add-tags-to-resource-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/add-tags-to-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.add-tags-to-resource-message/resource-name :portkey.aws.rds.add-tags-to-resource-message/tags] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.modify-global-cluster-message/global-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-global-cluster-message/new-global-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-global-cluster-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds/modify-global-cluster-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.modify-global-cluster-message/global-cluster-identifier :portkey.aws.rds.modify-global-cluster-message/new-global-cluster-identifier :portkey.aws.rds.modify-global-cluster-message/deletion-protection]))

(clojure.spec.alpha/def :portkey.aws.rds/delete-db-instance-automated-backup-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-instance-automated-backup]))

(clojure.spec.alpha/def :portkey.aws.rds.valid-storage-options/storage-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.valid-storage-options/storage-size (clojure.spec.alpha/and :portkey.aws.rds/range-list))
(clojure.spec.alpha/def :portkey.aws.rds.valid-storage-options/provisioned-iops (clojure.spec.alpha/and :portkey.aws.rds/range-list))
(clojure.spec.alpha/def :portkey.aws.rds.valid-storage-options/iops-to-storage-ratio (clojure.spec.alpha/and :portkey.aws.rds/double-range-list))
(clojure.spec.alpha/def :portkey.aws.rds/valid-storage-options (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.valid-storage-options/storage-type :portkey.aws.rds.valid-storage-options/storage-size :portkey.aws.rds.valid-storage-options/provisioned-iops :portkey.aws.rds.valid-storage-options/iops-to-storage-ratio]))

(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/invalid-event-subscription-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/restore-db-cluster-from-s-3-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds/tag-list-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/tag-list]))

(clojure.spec.alpha/def :portkey.aws.rds.create-global-cluster-message/global-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-global-cluster-message/source-db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-global-cluster-message/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-global-cluster-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-global-cluster-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-global-cluster-message/database-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-global-cluster-message/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds/create-global-cluster-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.create-global-cluster-message/global-cluster-identifier :portkey.aws.rds.create-global-cluster-message/source-db-cluster-identifier :portkey.aws.rds.create-global-cluster-message/engine :portkey.aws.rds.create-global-cluster-message/engine-version :portkey.aws.rds.create-global-cluster-message/deletion-protection :portkey.aws.rds.create-global-cluster-message/database-name :portkey.aws.rds.create-global-cluster-message/storage-encrypted]))

(clojure.spec.alpha/def :portkey.aws.rds.create-db-parameter-group-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-parameter-group-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-parameter-group-message/description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/create-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.create-db-parameter-group-message/db-parameter-group-name :portkey.aws.rds.create-db-parameter-group-message/db-parameter-group-family :portkey.aws.rds.create-db-parameter-group-message/description] :opt-un [:portkey.aws.rds.create-db-parameter-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.restore-window/earliest-time (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.restore-window/latest-time (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds/restore-window (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.restore-window/earliest-time :portkey.aws.rds.restore-window/latest-time]))

(clojure.spec.alpha/def :portkey.aws.rds.vpc-security-group-membership/vpc-security-group-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.vpc-security-group-membership/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/vpc-security-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.vpc-security-group-membership/vpc-security-group-id :portkey.aws.rds.vpc-security-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.rds/invalid-s-3-bucket-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/domain-iam-role-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/db-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/use-default-processor-features (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/availability-zone (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/restore-time (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/license-model (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/domain (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/source-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/target-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/source-dbi-resource-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/iops (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/tde-credential-password (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/storage-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/processor-features (clojure.spec.alpha/and :portkey.aws.rds/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-to-point-in-time-message/use-latest-restorable-time (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds/restore-db-instance-to-point-in-time-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.restore-db-instance-to-point-in-time-message/target-db-instance-identifier] :opt-un [:portkey.aws.rds.restore-db-instance-to-point-in-time-message/deletion-protection :portkey.aws.rds.restore-db-instance-to-point-in-time-message/option-group-name :portkey.aws.rds.restore-db-instance-to-point-in-time-message/enable-iam-database-authentication :portkey.aws.rds.restore-db-instance-to-point-in-time-message/publicly-accessible :portkey.aws.rds.restore-db-instance-to-point-in-time-message/domain-iam-role-name :portkey.aws.rds.restore-db-instance-to-point-in-time-message/copy-tags-to-snapshot :portkey.aws.rds.restore-db-instance-to-point-in-time-message/enable-cloudwatch-logs-exports :portkey.aws.rds.restore-db-instance-to-point-in-time-message/auto-minor-version-upgrade :portkey.aws.rds.restore-db-instance-to-point-in-time-message/tags :portkey.aws.rds.restore-db-instance-to-point-in-time-message/db-name :portkey.aws.rds.restore-db-instance-to-point-in-time-message/vpc-security-group-ids :portkey.aws.rds.restore-db-instance-to-point-in-time-message/use-default-processor-features :portkey.aws.rds.restore-db-instance-to-point-in-time-message/availability-zone :portkey.aws.rds.restore-db-instance-to-point-in-time-message/restore-time :portkey.aws.rds.restore-db-instance-to-point-in-time-message/license-model :portkey.aws.rds.restore-db-instance-to-point-in-time-message/domain :portkey.aws.rds.restore-db-instance-to-point-in-time-message/source-db-instance-identifier :portkey.aws.rds.restore-db-instance-to-point-in-time-message/db-subnet-group-name :portkey.aws.rds.restore-db-instance-to-point-in-time-message/port :portkey.aws.rds.restore-db-instance-to-point-in-time-message/source-dbi-resource-id :portkey.aws.rds.restore-db-instance-to-point-in-time-message/iops :portkey.aws.rds.restore-db-instance-to-point-in-time-message/tde-credential-password :portkey.aws.rds.restore-db-instance-to-point-in-time-message/storage-type :portkey.aws.rds.restore-db-instance-to-point-in-time-message/processor-features :portkey.aws.rds.restore-db-instance-to-point-in-time-message/db-instance-class :portkey.aws.rds.restore-db-instance-to-point-in-time-message/engine :portkey.aws.rds.restore-db-instance-to-point-in-time-message/db-parameter-group-name :portkey.aws.rds.restore-db-instance-to-point-in-time-message/tde-credential-arn :portkey.aws.rds.restore-db-instance-to-point-in-time-message/multi-az :portkey.aws.rds.restore-db-instance-to-point-in-time-message/use-latest-restorable-time]))

(clojure.spec.alpha/def :portkey.aws.rds.valid-db-instance-modifications-message/storage (clojure.spec.alpha/and :portkey.aws.rds/valid-storage-options-list))
(clojure.spec.alpha/def :portkey.aws.rds.valid-db-instance-modifications-message/valid-processor-features (clojure.spec.alpha/and :portkey.aws.rds/available-processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds/valid-db-instance-modifications-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.valid-db-instance-modifications-message/storage :portkey.aws.rds.valid-db-instance-modifications-message/valid-processor-features]))

(clojure.spec.alpha/def :portkey.aws.rds/authorization-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/db-subnet-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.modify-db-snapshot-attribute-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-snapshot-attribute-message/attribute-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-snapshot-attribute-message/values-to-add (clojure.spec.alpha/and :portkey.aws.rds/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-snapshot-attribute-message/values-to-remove (clojure.spec.alpha/and :portkey.aws.rds/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.rds/modify-db-snapshot-attribute-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.modify-db-snapshot-attribute-message/db-snapshot-identifier :portkey.aws.rds.modify-db-snapshot-attribute-message/attribute-name] :opt-un [:portkey.aws.rds.modify-db-snapshot-attribute-message/values-to-add :portkey.aws.rds.modify-db-snapshot-attribute-message/values-to-remove]))

(clojure.spec.alpha/def :portkey.aws.rds.global-cluster-member/db-cluster-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.global-cluster-member/readers (clojure.spec.alpha/and :portkey.aws.rds/readers-arn-list))
(clojure.spec.alpha/def :portkey.aws.rds.global-cluster-member/is-writer (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds/global-cluster-member (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.global-cluster-member/db-cluster-arn :portkey.aws.rds.global-cluster-member/readers :portkey.aws.rds.global-cluster-member/is-writer]))

(clojure.spec.alpha/def :portkey.aws.rds/db-log-file-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/provisioned-iops-not-available-in-az-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instance-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instance-message/reserved-db-instances (clojure.spec.alpha/and :portkey.aws.rds/reserved-db-instance-list))
(clojure.spec.alpha/def :portkey.aws.rds/reserved-db-instance-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.reserved-db-instance-message/marker :portkey.aws.rds.reserved-db-instance-message/reserved-db-instances]))

(clojure.spec.alpha/def :portkey.aws.rds.modify-db-parameter-group-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.rds/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds/modify-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.modify-db-parameter-group-message/db-parameter-group-name :portkey.aws.rds.modify-db-parameter-group-message/parameters] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.describe-valid-db-instance-modifications-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-valid-db-instance-modifications-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.describe-valid-db-instance-modifications-message/db-instance-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-snapshot-attribute-list (clojure.spec.alpha/coll-of :portkey.aws.rds/db-cluster-snapshot-attribute))

(clojure.spec.alpha/def :portkey.aws.rds/account-quota-list (clojure.spec.alpha/coll-of :portkey.aws.rds/account-quota))

(clojure.spec.alpha/def :portkey.aws.rds/modify-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.reboot-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reboot-db-instance-message/force-failover (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds/reboot-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.reboot-db-instance-message/db-instance-identifier] :opt-un [:portkey.aws.rds.reboot-db-instance-message/force-failover]))

(clojure.spec.alpha/def :portkey.aws.rds/restore-db-instance-from-s-3-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds/reserved-db-instance-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/invalid-option-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-backtrack-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-backtrack-message/db-cluster-backtracks (clojure.spec.alpha/and :portkey.aws.rds/db-cluster-backtrack-list))
(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-backtrack-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-cluster-backtrack-message/marker :portkey.aws.rds.db-cluster-backtrack-message/db-cluster-backtracks]))

(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot-attribute/attribute-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-snapshot-attribute/attribute-values (clojure.spec.alpha/and :portkey.aws.rds/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.rds/db-snapshot-attribute (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-snapshot-attribute/attribute-name :portkey.aws.rds.db-snapshot-attribute/attribute-values]))

(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instances-offering/currency-code (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instances-offering/reserved-db-instances-offering-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instances-offering/fixed-price (clojure.spec.alpha/and :portkey.aws.rds/double))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instances-offering/duration (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instances-offering/usage-price (clojure.spec.alpha/and :portkey.aws.rds/double))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instances-offering/product-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instances-offering/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instances-offering/recurring-charges (clojure.spec.alpha/and :portkey.aws.rds/recurring-charge-list))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instances-offering/offering-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instances-offering/multi-az (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds/reserved-db-instances-offering (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.reserved-db-instances-offering/currency-code :portkey.aws.rds.reserved-db-instances-offering/reserved-db-instances-offering-id :portkey.aws.rds.reserved-db-instances-offering/fixed-price :portkey.aws.rds.reserved-db-instances-offering/duration :portkey.aws.rds.reserved-db-instances-offering/usage-price :portkey.aws.rds.reserved-db-instances-offering/product-description :portkey.aws.rds.reserved-db-instances-offering/db-instance-class :portkey.aws.rds.reserved-db-instances-offering/recurring-charges :portkey.aws.rds.reserved-db-instances-offering/offering-type :portkey.aws.rds.reserved-db-instances-offering/multi-az]))

(clojure.spec.alpha/def :portkey.aws.rds/resource-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/readers-arn-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds.ec-2-security-group/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.ec-2-security-group/ec-2-security-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.ec-2-security-group/ec-2-security-group-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.ec-2-security-group/ec-2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/ec-2-security-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.ec-2-security-group/status :portkey.aws.rds.ec-2-security-group/ec-2-security-group-name :portkey.aws.rds.ec-2-security-group/ec-2-security-group-id :portkey.aws.rds.ec-2-security-group/ec-2-security-group-owner-id]))

(clojure.spec.alpha/def :portkey.aws.rds/option-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.rds/option-group-membership))

(clojure.spec.alpha/def :portkey.aws.rds.remove-source-identifier-from-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.remove-source-identifier-from-subscription-message/source-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/remove-source-identifier-from-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.remove-source-identifier-from-subscription-message/subscription-name :portkey.aws.rds.remove-source-identifier-from-subscription-message/source-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/create-db-cluster-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-cluster-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.rds/db-instance-roles (clojure.spec.alpha/coll-of :portkey.aws.rds/db-instance-role))

(clojure.spec.alpha/def :portkey.aws.rds/point-in-time-restore-not-enabled-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.remove-tags-from-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.remove-tags-from-resource-message/tag-keys (clojure.spec.alpha/and :portkey.aws.rds/key-list))
(clojure.spec.alpha/def :portkey.aws.rds/remove-tags-from-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.remove-tags-from-resource-message/resource-name :portkey.aws.rds.remove-tags-from-resource-message/tag-keys] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/event-categories-map-list (clojure.spec.alpha/coll-of :portkey.aws.rds/event-categories-map))

(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-endpoint-list (clojure.spec.alpha/coll-of :portkey.aws.rds/db-cluster-endpoint))

(clojure.spec.alpha/def :portkey.aws.rds/integer clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.rds/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-snapshot-attribute-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-snapshot-attribute-message/attribute-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-snapshot-attribute-message/values-to-add (clojure.spec.alpha/and :portkey.aws.rds/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-cluster-snapshot-attribute-message/values-to-remove (clojure.spec.alpha/and :portkey.aws.rds/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.rds/modify-db-cluster-snapshot-attribute-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.modify-db-cluster-snapshot-attribute-message/db-cluster-snapshot-identifier :portkey.aws.rds.modify-db-cluster-snapshot-attribute-message/attribute-name] :opt-un [:portkey.aws.rds.modify-db-cluster-snapshot-attribute-message/values-to-add :portkey.aws.rds.modify-db-cluster-snapshot-attribute-message/values-to-remove]))

(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot-attribute/attribute-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot-attribute/attribute-values (clojure.spec.alpha/and :portkey.aws.rds/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-snapshot-attribute (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-cluster-snapshot-attribute/attribute-name :portkey.aws.rds.db-cluster-snapshot-attribute/attribute-values]))

(clojure.spec.alpha/def :portkey.aws.rds.parameter/data-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.parameter/supported-engine-modes (clojure.spec.alpha/and :portkey.aws.rds/engine-mode-list))
(clojure.spec.alpha/def :portkey.aws.rds.parameter/parameter-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.parameter/source (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.parameter/minimum-engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.parameter/allowed-values (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.parameter/apply-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.parameter/description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.parameter/is-modifiable (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.parameter/parameter-value (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/parameter (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.parameter/data-type :portkey.aws.rds.parameter/supported-engine-modes :portkey.aws.rds.parameter/parameter-name :portkey.aws.rds.parameter/source :portkey.aws.rds.parameter/minimum-engine-version :portkey.aws.rds.parameter/allowed-values :portkey.aws.rds.parameter/apply-type :portkey.aws.rds.parameter/description :portkey.aws.rds/apply-method :portkey.aws.rds.parameter/is-modifiable :portkey.aws.rds.parameter/parameter-value]))

(clojure.spec.alpha/def :portkey.aws.rds/vpc-security-group-id-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds/describe-db-log-files-list (clojure.spec.alpha/coll-of :portkey.aws.rds/describe-db-log-files-details))

(clojure.spec.alpha/def :portkey.aws.rds.db-security-group-membership/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-security-group-membership/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/db-security-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-security-group-membership/db-security-group-name :portkey.aws.rds.db-security-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.rds/read-replica-db-cluster-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot-attributes-result/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-snapshot-attributes-result/db-cluster-snapshot-attributes (clojure.spec.alpha/and :portkey.aws.rds/db-cluster-snapshot-attribute-list))
(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-snapshot-attributes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-cluster-snapshot-attributes-result/db-cluster-snapshot-identifier :portkey.aws.rds.db-cluster-snapshot-attributes-result/db-cluster-snapshot-attributes]))

(clojure.spec.alpha/def :portkey.aws.rds.db-instance/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/db-security-groups (clojure.spec.alpha/and :portkey.aws.rds/db-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/secondary-availability-zone (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/promotion-tier (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/character-set-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/read-replica-db-cluster-identifiers (clojure.spec.alpha/and :portkey.aws.rds/read-replica-db-cluster-identifier-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/read-replica-db-instance-identifiers (clojure.spec.alpha/and :portkey.aws.rds/read-replica-db-instance-identifier-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/domain-memberships (clojure.spec.alpha/and :portkey.aws.rds/domain-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/enabled-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/db-instance-port (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/db-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/db-instance-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/instance-create-time (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/availability-zone (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/read-replica-source-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/license-model (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/listener-endpoint (clojure.spec.alpha/and :portkey.aws.rds/endpoint))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/monitoring-interval (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/timezone (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/master-username (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/performance-insights-enabled (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/dbi-resource-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/iops (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/storage-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/processor-features (clojure.spec.alpha/and :portkey.aws.rds/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/ca-certificate-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/option-group-memberships (clojure.spec.alpha/and :portkey.aws.rds/option-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/iam-database-authentication-enabled (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/performance-insights-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/db-parameter-groups (clojure.spec.alpha/and :portkey.aws.rds/db-parameter-group-status-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/vpc-security-groups (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/db-instance-status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/status-infos (clojure.spec.alpha/and :portkey.aws.rds/db-instance-status-info-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/associated-roles (clojure.spec.alpha/and :portkey.aws.rds/db-instance-roles))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/enhanced-monitoring-resource-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/multi-az (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/performance-insights-kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance/latest-restorable-time (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds/db-instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-instance/deletion-protection :portkey.aws.rds.db-instance/backup-retention-period :portkey.aws.rds.db-instance/db-security-groups :portkey.aws.rds.db-instance/secondary-availability-zone :portkey.aws.rds.db-instance/promotion-tier :portkey.aws.rds.db-instance/character-set-name :portkey.aws.rds.db-instance/publicly-accessible :portkey.aws.rds.db-instance/read-replica-db-cluster-identifiers :portkey.aws.rds.db-instance/read-replica-db-instance-identifiers :portkey.aws.rds.db-instance/domain-memberships :portkey.aws.rds.db-instance/preferred-maintenance-window :portkey.aws.rds.db-instance/copy-tags-to-snapshot :portkey.aws.rds.db-instance/db-instance-identifier :portkey.aws.rds.db-instance/enabled-cloudwatch-logs-exports :portkey.aws.rds.db-instance/auto-minor-version-upgrade :portkey.aws.rds.db-instance/db-instance-port :portkey.aws.rds.db-instance/db-name :portkey.aws.rds.db-instance/db-instance-arn :portkey.aws.rds.db-instance/instance-create-time :portkey.aws.rds.db-instance/availability-zone :portkey.aws.rds.db-instance/read-replica-source-db-instance-identifier :portkey.aws.rds.db-instance/license-model :portkey.aws.rds.db-instance/listener-endpoint :portkey.aws.rds.db-instance/allocated-storage :portkey.aws.rds.db-instance/monitoring-interval :portkey.aws.rds.db-instance/timezone :portkey.aws.rds.db-instance/master-username :portkey.aws.rds.db-instance/engine-version :portkey.aws.rds.db-instance/performance-insights-enabled :portkey.aws.rds.db-instance/storage-encrypted :portkey.aws.rds.db-instance/kms-key-id :portkey.aws.rds.db-instance/dbi-resource-id :portkey.aws.rds.db-instance/iops :portkey.aws.rds.db-instance/storage-type :portkey.aws.rds.db-instance/processor-features :portkey.aws.rds.db-instance/ca-certificate-identifier :portkey.aws.rds/endpoint :portkey.aws.rds.db-instance/option-group-memberships :portkey.aws.rds.db-instance/iam-database-authentication-enabled :portkey.aws.rds.db-instance/performance-insights-retention-period :portkey.aws.rds.db-instance/db-instance-class :portkey.aws.rds.db-instance/db-parameter-groups :portkey.aws.rds.db-instance/vpc-security-groups :portkey.aws.rds.db-instance/engine :portkey.aws.rds.db-instance/db-instance-status :portkey.aws.rds.db-instance/status-infos :portkey.aws.rds.db-instance/associated-roles :portkey.aws.rds.db-instance/monitoring-role-arn :portkey.aws.rds.db-instance/tde-credential-arn :portkey.aws.rds.db-instance/enhanced-monitoring-resource-arn :portkey.aws.rds.db-instance/multi-az :portkey.aws.rds.db-instance/performance-insights-kms-key-id :portkey.aws.rds.db-instance/db-cluster-identifier :portkey.aws.rds.db-instance/preferred-backup-window :portkey.aws.rds/pending-modified-values :portkey.aws.rds.db-instance/latest-restorable-time :portkey.aws.rds/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.rds/option-group-option-versions-list (clojure.spec.alpha/coll-of :portkey.aws.rds/option-version))

(clojure.spec.alpha/def :portkey.aws.rds/db-subnet-group-not-allowed-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/create-db-cluster-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-cluster-snapshot]))

(clojure.spec.alpha/def :portkey.aws.rds/db-parameter-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.global-clusters-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.global-clusters-message/global-clusters (clojure.spec.alpha/and :portkey.aws.rds/global-cluster-list))
(clojure.spec.alpha/def :portkey.aws.rds/global-clusters-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.global-clusters-message/marker :portkey.aws.rds.global-clusters-message/global-clusters]))

(clojure.spec.alpha/def :portkey.aws.rds/t-stamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-message/db-clusters (clojure.spec.alpha/and :portkey.aws.rds/db-cluster-list))
(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-cluster-message/marker :portkey.aws.rds.db-cluster-message/db-clusters]))

(clojure.spec.alpha/def :portkey.aws.rds.purchase-reserved-db-instances-offering-message/reserved-db-instances-offering-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.purchase-reserved-db-instances-offering-message/reserved-db-instance-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.purchase-reserved-db-instances-offering-message/db-instance-count (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.purchase-reserved-db-instances-offering-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/purchase-reserved-db-instances-offering-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.purchase-reserved-db-instances-offering-message/reserved-db-instances-offering-id] :opt-un [:portkey.aws.rds.purchase-reserved-db-instances-offering-message/reserved-db-instance-id :portkey.aws.rds.purchase-reserved-db-instances-offering-message/db-instance-count :portkey.aws.rds.purchase-reserved-db-instances-offering-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds/db-security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.rds/db-security-group-membership))

(clojure.spec.alpha/def :portkey.aws.rds.describe-certificates-message/certificate-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-certificates-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-certificates-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-certificates-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-certificates-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.describe-certificates-message/certificate-identifier :portkey.aws.rds.describe-certificates-message/filters :portkey.aws.rds.describe-certificates-message/max-records :portkey.aws.rds.describe-certificates-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.event-categories-map/source-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.event-categories-map/event-categories (clojure.spec.alpha/and :portkey.aws.rds/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds/event-categories-map (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.event-categories-map/source-type :portkey.aws.rds.event-categories-map/event-categories]))

(clojure.spec.alpha/def :portkey.aws.rds/reserved-db-instances-offering-list (clojure.spec.alpha/coll-of :portkey.aws.rds/reserved-db-instances-offering))

(clojure.spec.alpha/def :portkey.aws.rds/event-subscription-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/describe-db-cluster-snapshot-attributes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-cluster-snapshot-attributes-result]))

(clojure.spec.alpha/def :portkey.aws.rds/kms-key-not-accessible-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.create-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-event-subscription-message/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-event-subscription-message/source-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-event-subscription-message/event-categories (clojure.spec.alpha/and :portkey.aws.rds/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds.create-event-subscription-message/source-ids (clojure.spec.alpha/and :portkey.aws.rds/source-ids-list))
(clojure.spec.alpha/def :portkey.aws.rds.create-event-subscription-message/enabled (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-event-subscription-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/create-event-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.create-event-subscription-message/subscription-name :portkey.aws.rds.create-event-subscription-message/sns-topic-arn] :opt-un [:portkey.aws.rds.create-event-subscription-message/source-type :portkey.aws.rds.create-event-subscription-message/event-categories :portkey.aws.rds.create-event-subscription-message/source-ids :portkey.aws.rds.create-event-subscription-message/enabled :portkey.aws.rds.create-event-subscription-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-snapshot-attributes-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-db-cluster-snapshot-attributes-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.describe-db-cluster-snapshot-attributes-message/db-cluster-snapshot-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.describe-db-instance-automated-backups-message/dbi-resource-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-instance-automated-backups-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-instance-automated-backups-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-instance-automated-backups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-instance-automated-backups-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-db-instance-automated-backups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.describe-db-instance-automated-backups-message/dbi-resource-id :portkey.aws.rds.describe-db-instance-automated-backups-message/db-instance-identifier :portkey.aws.rds.describe-db-instance-automated-backups-message/filters :portkey.aws.rds.describe-db-instance-automated-backups-message/max-records :portkey.aws.rds.describe-db-instance-automated-backups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.describe-db-log-files-response/describe-db-log-files (clojure.spec.alpha/and :portkey.aws.rds/describe-db-log-files-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-log-files-response/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-db-log-files-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.describe-db-log-files-response/describe-db-log-files :portkey.aws.rds.describe-db-log-files-response/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.delete-global-cluster-message/global-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/delete-global-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.delete-global-cluster-message/global-cluster-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/recurring-charge-list (clojure.spec.alpha/coll-of :portkey.aws.rds/recurring-charge))

(clojure.spec.alpha/def :portkey.aws.rds/db-instance-role-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/stop-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds/event-categories-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds.db-engine-version-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-engine-version-message/db-engine-versions (clojure.spec.alpha/and :portkey.aws.rds/db-engine-version-list))
(clojure.spec.alpha/def :portkey.aws.rds/db-engine-version-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-engine-version-message/marker :portkey.aws.rds.db-engine-version-message/db-engine-versions]))

(clojure.spec.alpha/def :portkey.aws.rds/modify-db-cluster-snapshot-attribute-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-cluster-snapshot-attributes-result]))

(clojure.spec.alpha/def :portkey.aws.rds.db-instance-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-message/db-instances (clojure.spec.alpha/and :portkey.aws.rds/db-instance-list))
(clojure.spec.alpha/def :portkey.aws.rds/db-instance-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-instance-message/marker :portkey.aws.rds.db-instance-message/db-instances]))

(clojure.spec.alpha/def :portkey.aws.rds/db-security-group-name-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds.processor-feature/name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.processor-feature/value (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/processor-feature (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.processor-feature/name :portkey.aws.rds.processor-feature/value]))

(clojure.spec.alpha/def :portkey.aws.rds/reserved-db-instance-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.describe-db-clusters-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-clusters-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-clusters-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-clusters-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-db-clusters-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.describe-db-clusters-message/db-cluster-identifier :portkey.aws.rds.describe-db-clusters-message/filters :portkey.aws.rds.describe-db-clusters-message/max-records :portkey.aws.rds.describe-db-clusters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds/db-security-group-not-supported-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/create-db-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.rds/db-instance-role-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-parameter-group/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-parameter-group/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-parameter-group/description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-parameter-group/db-cluster-parameter-group-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-parameter-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-cluster-parameter-group/db-cluster-parameter-group-name :portkey.aws.rds.db-cluster-parameter-group/db-parameter-group-family :portkey.aws.rds.db-cluster-parameter-group/description :portkey.aws.rds.db-cluster-parameter-group/db-cluster-parameter-group-arn]))

(clojure.spec.alpha/def :portkey.aws.rds.describe-db-log-files-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-log-files-message/filename-contains (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-log-files-message/file-last-written (clojure.spec.alpha/and :portkey.aws.rds/long))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-log-files-message/file-size (clojure.spec.alpha/and :portkey.aws.rds/long))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-log-files-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-log-files-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-log-files-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-db-log-files-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.describe-db-log-files-message/db-instance-identifier] :opt-un [:portkey.aws.rds.describe-db-log-files-message/filename-contains :portkey.aws.rds.describe-db-log-files-message/file-last-written :portkey.aws.rds.describe-db-log-files-message/file-size :portkey.aws.rds.describe-db-log-files-message/filters :portkey.aws.rds.describe-db-log-files-message/max-records :portkey.aws.rds.describe-db-log-files-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds/apply-method #{"immediate" :pendingreboot :immediate "pending-reboot"})

(clojure.spec.alpha/def :portkey.aws.rds/describe-engine-default-cluster-parameters-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/engine-defaults]))

(clojure.spec.alpha/def :portkey.aws.rds/db-instance-automated-backup-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-snapshot-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-snapshot-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/create-db-cluster-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.create-db-cluster-snapshot-message/db-cluster-snapshot-identifier :portkey.aws.rds.create-db-cluster-snapshot-message/db-cluster-identifier] :opt-un [:portkey.aws.rds.create-db-cluster-snapshot-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds.endpoint/address (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.endpoint/port (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.endpoint/hosted-zone-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/endpoint (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.endpoint/address :portkey.aws.rds.endpoint/port :portkey.aws.rds.endpoint/hosted-zone-id]))

(clojure.spec.alpha/def :portkey.aws.rds/invalid-db-cluster-snapshot-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.db-parameter-group/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-parameter-group/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-parameter-group/description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-parameter-group/db-parameter-group-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/db-parameter-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-parameter-group/db-parameter-group-name :portkey.aws.rds.db-parameter-group/db-parameter-group-family :portkey.aws.rds.db-parameter-group/description :portkey.aws.rds.db-parameter-group/db-parameter-group-arn]))

(clojure.spec.alpha/def :portkey.aws.rds/supported-character-sets-list (clojure.spec.alpha/coll-of :portkey.aws.rds/character-set))

(clojure.spec.alpha/def :portkey.aws.rds/storage-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.rds.cloudwatch-logs-export-configuration/enable-log-types (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.cloudwatch-logs-export-configuration/disable-log-types (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds/cloudwatch-logs-export-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.cloudwatch-logs-export-configuration/enable-log-types :portkey.aws.rds.cloudwatch-logs-export-configuration/disable-log-types]))

(clojure.spec.alpha/def :portkey.aws.rds/invalid-restore-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/log-type-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-backtracks-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-backtracks-message/backtrack-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-backtracks-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-backtracks-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-cluster-backtracks-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-db-cluster-backtracks-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.describe-db-cluster-backtracks-message/db-cluster-identifier] :opt-un [:portkey.aws.rds.describe-db-cluster-backtracks-message/backtrack-identifier :portkey.aws.rds.describe-db-cluster-backtracks-message/filters :portkey.aws.rds.describe-db-cluster-backtracks-message/max-records :portkey.aws.rds.describe-db-cluster-backtracks-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds/insufficient-db-cluster-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.account-quota/account-quota-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.account-quota/used (clojure.spec.alpha/and :portkey.aws.rds/long))
(clojure.spec.alpha/def :portkey.aws.rds.account-quota/max (clojure.spec.alpha/and :portkey.aws.rds/long))
(clojure.spec.alpha/def :portkey.aws.rds/account-quota (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.account-quota/account-quota-name :portkey.aws.rds.account-quota/used :portkey.aws.rds.account-quota/max]))

(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-option-group-status/db-cluster-option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-option-group-status/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-option-group-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-cluster-option-group-status/db-cluster-option-group-name :portkey.aws.rds.db-cluster-option-group-status/status]))

(clojure.spec.alpha/def :portkey.aws.rds/describe-db-snapshot-attributes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-snapshot-attributes-result]))

(clojure.spec.alpha/def :portkey.aws.rds.option-group-membership/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-group-membership/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/option-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.option-group-membership/option-group-name :portkey.aws.rds.option-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.rds/db-security-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.upgrade-target/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.upgrade-target/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.upgrade-target/description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.upgrade-target/auto-upgrade (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.upgrade-target/is-major-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds/upgrade-target (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.upgrade-target/engine :portkey.aws.rds.upgrade-target/engine-version :portkey.aws.rds.upgrade-target/description :portkey.aws.rds.upgrade-target/auto-upgrade :portkey.aws.rds.upgrade-target/is-major-version-upgrade]))

(clojure.spec.alpha/def :portkey.aws.rds/global-cluster-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/available-processor-feature-list (clojure.spec.alpha/coll-of :portkey.aws.rds/available-processor-feature))

(clojure.spec.alpha/def :portkey.aws.rds/db-parameter-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/attribute-value-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds.add-role-to-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.add-role-to-db-instance-message/role-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.add-role-to-db-instance-message/feature-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/add-role-to-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.add-role-to-db-instance-message/db-instance-identifier :portkey.aws.rds.add-role-to-db-instance-message/role-arn :portkey.aws.rds.add-role-to-db-instance-message/feature-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instance/reserved-db-instance-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instance/currency-code (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instance/reserved-db-instances-offering-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instance/start-time (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instance/fixed-price (clojure.spec.alpha/and :portkey.aws.rds/double))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instance/reserved-db-instance-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instance/db-instance-count (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instance/duration (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instance/usage-price (clojure.spec.alpha/and :portkey.aws.rds/double))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instance/product-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instance/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instance/state (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instance/recurring-charges (clojure.spec.alpha/and :portkey.aws.rds/recurring-charge-list))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instance/offering-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.reserved-db-instance/multi-az (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds/reserved-db-instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.reserved-db-instance/reserved-db-instance-id :portkey.aws.rds.reserved-db-instance/currency-code :portkey.aws.rds.reserved-db-instance/reserved-db-instances-offering-id :portkey.aws.rds.reserved-db-instance/start-time :portkey.aws.rds.reserved-db-instance/fixed-price :portkey.aws.rds.reserved-db-instance/reserved-db-instance-arn :portkey.aws.rds.reserved-db-instance/db-instance-count :portkey.aws.rds.reserved-db-instance/duration :portkey.aws.rds.reserved-db-instance/usage-price :portkey.aws.rds.reserved-db-instance/product-description :portkey.aws.rds.reserved-db-instance/db-instance-class :portkey.aws.rds.reserved-db-instance/state :portkey.aws.rds.reserved-db-instance/recurring-charges :portkey.aws.rds.reserved-db-instance/offering-type :portkey.aws.rds.reserved-db-instance/multi-az]))

(clojure.spec.alpha/def :portkey.aws.rds.describe-db-parameter-groups-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-parameter-groups-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-parameter-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-db-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.describe-db-parameter-groups-message/db-parameter-group-name :portkey.aws.rds.describe-db-parameter-groups-message/filters :portkey.aws.rds.describe-db-parameter-groups-message/max-records :portkey.aws.rds.describe-db-parameter-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds/invalid-db-subnet-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.ip-range/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.ip-range/cidrip (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/ip-range (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.ip-range/status :portkey.aws.rds.ip-range/cidrip]))

(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-endpoint-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.character-set/character-set-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.character-set/character-set-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/character-set (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.character-set/character-set-name :portkey.aws.rds.character-set/character-set-description]))

(clojure.spec.alpha/def :portkey.aws.rds/db-parameter-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/option-group-option-settings-list (clojure.spec.alpha/coll-of :portkey.aws.rds/option-group-option-setting))

(clojure.spec.alpha/def :portkey.aws.rds/stop-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-capacity-info/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-capacity-info/pending-capacity (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-capacity-info/current-capacity (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-capacity-info/seconds-before-timeout (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-capacity-info/timeout-action (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-capacity-info (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-cluster-capacity-info/db-cluster-identifier :portkey.aws.rds.db-cluster-capacity-info/pending-capacity :portkey.aws.rds.db-cluster-capacity-info/current-capacity :portkey.aws.rds.db-cluster-capacity-info/seconds-before-timeout :portkey.aws.rds.db-cluster-capacity-info/timeout-action]))

(clojure.spec.alpha/def :portkey.aws.rds.modify-current-db-cluster-capacity-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-current-db-cluster-capacity-message/capacity (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modify-current-db-cluster-capacity-message/seconds-before-timeout (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modify-current-db-cluster-capacity-message/timeout-action (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/modify-current-db-cluster-capacity-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.modify-current-db-cluster-capacity-message/db-cluster-identifier] :opt-un [:portkey.aws.rds.modify-current-db-cluster-capacity-message/capacity :portkey.aws.rds.modify-current-db-cluster-capacity-message/seconds-before-timeout :portkey.aws.rds.modify-current-db-cluster-capacity-message/timeout-action]))

(clojure.spec.alpha/def :portkey.aws.rds.delete-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.delete-db-cluster-message/skip-final-snapshot (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.delete-db-cluster-message/final-db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/delete-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.delete-db-cluster-message/db-cluster-identifier] :opt-un [:portkey.aws.rds.delete-db-cluster-message/skip-final-snapshot :portkey.aws.rds.delete-db-cluster-message/final-db-snapshot-identifier]))

(clojure.spec.alpha/def :portkey.aws.rds/backup-policy-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/describe-valid-db-instance-modifications-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/valid-db-instance-modifications-message]))

(clojure.spec.alpha/def :portkey.aws.rds/modify-event-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.rds.tag/key (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.tag/value (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/tag (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.tag/key :portkey.aws.rds.tag/value]))

(clojure.spec.alpha/def :portkey.aws.rds.describe-event-categories-message/source-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-event-categories-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds/describe-event-categories-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.describe-event-categories-message/source-type :portkey.aws.rds.describe-event-categories-message/filters]))

(clojure.spec.alpha/def :portkey.aws.rds/insufficient-db-instance-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/boolean-optional clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.rds/failover-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds/sns-invalid-topic-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/options-depended-on (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds.option-setting/data-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-setting/allowed-values (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-setting/value (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-setting/apply-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-setting/description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-setting/default-value (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-setting/is-modifiable (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.option-setting/is-collection (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.option-setting/name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/option-setting (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.option-setting/data-type :portkey.aws.rds.option-setting/allowed-values :portkey.aws.rds.option-setting/value :portkey.aws.rds.option-setting/apply-type :portkey.aws.rds.option-setting/description :portkey.aws.rds.option-setting/default-value :portkey.aws.rds.option-setting/is-modifiable :portkey.aws.rds.option-setting/is-collection :portkey.aws.rds.option-setting/name]))

(clojure.spec.alpha/def :portkey.aws.rds.delete-db-cluster-parameter-group-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/delete-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.delete-db-cluster-parameter-group-message/db-cluster-parameter-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.list-tags-for-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.list-tags-for-resource-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds/list-tags-for-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.list-tags-for-resource-message/resource-name] :opt-un [:portkey.aws.rds.list-tags-for-resource-message/filters]))

(clojure.spec.alpha/def :portkey.aws.rds.failover-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.failover-db-cluster-message/target-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/failover-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.failover-db-cluster-message/db-cluster-identifier] :opt-un [:portkey.aws.rds.failover-db-cluster-message/target-db-instance-identifier]))

(clojure.spec.alpha/def :portkey.aws.rds.delete-db-subnet-group-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/delete-db-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.delete-db-subnet-group-message/db-subnet-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/db-instance-list (clojure.spec.alpha/coll-of :portkey.aws.rds/db-instance))

(clojure.spec.alpha/def :portkey.aws.rds/global-cluster-member-list (clojure.spec.alpha/coll-of :portkey.aws.rds/global-cluster-member))

(clojure.spec.alpha/def :portkey.aws.rds/delete-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/replication-source-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/character-set-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/pre-signed-url (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/database-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/engine-mode (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/master-username (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/backtrack-window (clojure.spec.alpha/and :portkey.aws.rds/long-optional))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/global-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/create-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.create-db-cluster-message/db-cluster-identifier :portkey.aws.rds.create-db-cluster-message/engine] :opt-un [:portkey.aws.rds.create-db-cluster-message/deletion-protection :portkey.aws.rds.create-db-cluster-message/backup-retention-period :portkey.aws.rds.create-db-cluster-message/option-group-name :portkey.aws.rds.create-db-cluster-message/replication-source-identifier :portkey.aws.rds.create-db-cluster-message/character-set-name :portkey.aws.rds.create-db-cluster-message/enable-iam-database-authentication :portkey.aws.rds.create-db-cluster-message/pre-signed-url :portkey.aws.rds.create-db-cluster-message/database-name :portkey.aws.rds.create-db-cluster-message/preferred-maintenance-window :portkey.aws.rds.create-db-cluster-message/engine-mode :portkey.aws.rds.create-db-cluster-message/enable-cloudwatch-logs-exports :portkey.aws.rds.create-db-cluster-message/tags :portkey.aws.rds/scaling-configuration :portkey.aws.rds.create-db-cluster-message/vpc-security-group-ids :portkey.aws.rds.create-db-cluster-message/db-cluster-parameter-group-name :portkey.aws.rds.create-db-cluster-message/master-user-password :portkey.aws.rds.create-db-cluster-message/master-username :portkey.aws.rds.create-db-cluster-message/engine-version :portkey.aws.rds.create-db-cluster-message/storage-encrypted :portkey.aws.rds.create-db-cluster-message/db-subnet-group-name :portkey.aws.rds.create-db-cluster-message/port :portkey.aws.rds.create-db-cluster-message/kms-key-id :portkey.aws.rds.create-db-cluster-message/backtrack-window :portkey.aws.rds.create-db-cluster-message/global-cluster-identifier :portkey.aws.rds/availability-zones :portkey.aws.rds.create-db-cluster-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.rds.db-instance-role/role-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-role/feature-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-instance-role/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/db-instance-role (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-instance-role/role-arn :portkey.aws.rds.db-instance-role/feature-name :portkey.aws.rds.db-instance-role/status]))

(clojure.spec.alpha/def :portkey.aws.rds/delete-event-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.rds/option-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.rds/option-configuration))

(clojure.spec.alpha/def :portkey.aws.rds.pending-maintenance-actions-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/pending-maintenance-actions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/pending-maintenance-actions :portkey.aws.rds.pending-maintenance-actions-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds/describe-account-attributes-message (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/engine-mode-list (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds/reserved-db-instances-offering-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/db-subnet-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/add-source-identifier-to-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.rds.download-db-log-file-portion-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.download-db-log-file-portion-message/log-file-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.download-db-log-file-portion-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.download-db-log-file-portion-message/number-of-lines (clojure.spec.alpha/and :portkey.aws.rds/integer))
(clojure.spec.alpha/def :portkey.aws.rds/download-db-log-file-portion-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.download-db-log-file-portion-message/db-instance-identifier :portkey.aws.rds.download-db-log-file-portion-message/log-file-name] :opt-un [:portkey.aws.rds.download-db-log-file-portion-message/marker :portkey.aws.rds.download-db-log-file-portion-message/number-of-lines]))

(clojure.spec.alpha/def :portkey.aws.rds.db-security-group-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/db-security-group-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-security-group-message/marker :portkey.aws.rds/db-security-groups]))

(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-parameter-groups-message/db-cluster-parameter-groups (clojure.spec.alpha/and :portkey.aws.rds/db-cluster-parameter-group-list))
(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-cluster-parameter-groups-message/marker :portkey.aws.rds.db-cluster-parameter-groups-message/db-cluster-parameter-groups]))

(clojure.spec.alpha/def :portkey.aws.rds.create-db-security-group-message/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-security-group-message/db-security-group-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-security-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/create-db-security-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.create-db-security-group-message/db-security-group-name :portkey.aws.rds.create-db-security-group-message/db-security-group-description] :opt-un [:portkey.aws.rds.create-db-security-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds/event-subscriptions-list (clojure.spec.alpha/coll-of :portkey.aws.rds/event-subscription))

(clojure.spec.alpha/def :portkey.aws.rds/db-snapshot-list (clojure.spec.alpha/coll-of :portkey.aws.rds/db-snapshot))

(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-parameter-group-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-parameter-group-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-parameter-group-message/description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds/create-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.create-db-cluster-parameter-group-message/db-cluster-parameter-group-name :portkey.aws.rds.create-db-cluster-parameter-group-message/db-parameter-group-family :portkey.aws.rds.create-db-cluster-parameter-group-message/description] :opt-un [:portkey.aws.rds.create-db-cluster-parameter-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.rds/modify-db-snapshot-attribute-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-snapshot-attributes-result]))

(clojure.spec.alpha/def :portkey.aws.rds/start-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-option-group-memberships (clojure.spec.alpha/coll-of :portkey.aws.rds/db-cluster-option-group-status))

(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-endpoint/excluded-members (clojure.spec.alpha/and :portkey.aws.rds/string-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-endpoint/endpoint-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-endpoint/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-endpoint/db-cluster-endpoint-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-endpoint/custom-endpoint-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-endpoint/static-members (clojure.spec.alpha/and :portkey.aws.rds/string-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-endpoint/db-cluster-endpoint-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-endpoint/endpoint (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-endpoint/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-cluster-endpoint/db-cluster-endpoint-resource-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/db-cluster-endpoint (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-cluster-endpoint/excluded-members :portkey.aws.rds.db-cluster-endpoint/endpoint-type :portkey.aws.rds.db-cluster-endpoint/status :portkey.aws.rds.db-cluster-endpoint/db-cluster-endpoint-identifier :portkey.aws.rds.db-cluster-endpoint/custom-endpoint-type :portkey.aws.rds.db-cluster-endpoint/static-members :portkey.aws.rds.db-cluster-endpoint/db-cluster-endpoint-arn :portkey.aws.rds.db-cluster-endpoint/endpoint :portkey.aws.rds.db-cluster-endpoint/db-cluster-identifier :portkey.aws.rds.db-cluster-endpoint/db-cluster-endpoint-resource-identifier]))

(clojure.spec.alpha/def :portkey.aws.rds.engine-defaults/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.engine-defaults/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.engine-defaults/parameters (clojure.spec.alpha/and :portkey.aws.rds/parameters-list))
(clojure.spec.alpha/def :portkey.aws.rds/engine-defaults (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.engine-defaults/db-parameter-group-family :portkey.aws.rds.engine-defaults/marker :portkey.aws.rds.engine-defaults/parameters]))

(clojure.spec.alpha/def :portkey.aws.rds.describe-db-snapshot-attributes-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-db-snapshot-attributes-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.describe-db-snapshot-attributes-message/db-snapshot-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/availability-zones (clojure.spec.alpha/coll-of :portkey.aws.rds/string))

(clojure.spec.alpha/def :portkey.aws.rds/db-subnet-groups (clojure.spec.alpha/coll-of :portkey.aws.rds/db-subnet-group))

(clojure.spec.alpha/def :portkey.aws.rds/long-optional clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.rds/global-cluster-list (clojure.spec.alpha/coll-of :portkey.aws.rds/global-cluster))

(clojure.spec.alpha/def :portkey.aws.rds/processor-feature-list (clojure.spec.alpha/coll-of :portkey.aws.rds/processor-feature))

(clojure.spec.alpha/def :portkey.aws.rds.option-configuration/option-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-configuration/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.option-configuration/option-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.option-configuration/db-security-group-memberships (clojure.spec.alpha/and :portkey.aws.rds/db-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.rds.option-configuration/vpc-security-group-memberships (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.option-configuration/option-settings (clojure.spec.alpha/and :portkey.aws.rds/option-settings-list))
(clojure.spec.alpha/def :portkey.aws.rds/option-configuration (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.option-configuration/option-name] :opt-un [:portkey.aws.rds.option-configuration/port :portkey.aws.rds.option-configuration/option-version :portkey.aws.rds.option-configuration/db-security-group-memberships :portkey.aws.rds.option-configuration/vpc-security-group-memberships :portkey.aws.rds.option-configuration/option-settings]))

(clojure.spec.alpha/def :portkey.aws.rds/delete-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds/db-subnet-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/invalid-db-snapshot-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.remove-role-from-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.remove-role-from-db-instance-message/role-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.remove-role-from-db-instance-message/feature-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/remove-role-from-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.remove-role-from-db-instance-message/db-instance-identifier :portkey.aws.rds.remove-role-from-db-instance-message/role-arn :portkey.aws.rds.remove-role-from-db-instance-message/feature-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/integer-optional clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.rds.db-security-group/owner-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-security-group/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-security-group/db-security-group-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-security-group/vpc-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-security-group/ec-2-security-groups (clojure.spec.alpha/and :portkey.aws.rds/ec-2-security-group-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-security-group/ip-ranges (clojure.spec.alpha/and :portkey.aws.rds/ip-range-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-security-group/db-security-group-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/db-security-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-security-group/owner-id :portkey.aws.rds.db-security-group/db-security-group-name :portkey.aws.rds.db-security-group/db-security-group-description :portkey.aws.rds.db-security-group/vpc-id :portkey.aws.rds.db-security-group/ec-2-security-groups :portkey.aws.rds.db-security-group/ip-ranges :portkey.aws.rds.db-security-group/db-security-group-arn]))

(clojure.spec.alpha/def :portkey.aws.rds.describe-reserved-db-instances-offerings-message/reserved-db-instances-offering-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserved-db-instances-offerings-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserved-db-instances-offerings-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserved-db-instances-offerings-message/duration (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserved-db-instances-offerings-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserved-db-instances-offerings-message/product-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserved-db-instances-offerings-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserved-db-instances-offerings-message/offering-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserved-db-instances-offerings-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds/describe-reserved-db-instances-offerings-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.describe-reserved-db-instances-offerings-message/reserved-db-instances-offering-id :portkey.aws.rds.describe-reserved-db-instances-offerings-message/max-records :portkey.aws.rds.describe-reserved-db-instances-offerings-message/marker :portkey.aws.rds.describe-reserved-db-instances-offerings-message/duration :portkey.aws.rds.describe-reserved-db-instances-offerings-message/filters :portkey.aws.rds.describe-reserved-db-instances-offerings-message/product-description :portkey.aws.rds.describe-reserved-db-instances-offerings-message/db-instance-class :portkey.aws.rds.describe-reserved-db-instances-offerings-message/offering-type :portkey.aws.rds.describe-reserved-db-instances-offerings-message/multi-az]))

(clojure.spec.alpha/def :portkey.aws.rds/supported-timezones-list (clojure.spec.alpha/coll-of :portkey.aws.rds/timezone))

(clojure.spec.alpha/def :portkey.aws.rds/range-list (clojure.spec.alpha/coll-of :portkey.aws.rds/range))

(clojure.spec.alpha/def :portkey.aws.rds.stop-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.stop-db-instance-message/db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/stop-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.stop-db-instance-message/db-instance-identifier] :opt-un [:portkey.aws.rds.stop-db-instance-message/db-snapshot-identifier]))

(clojure.spec.alpha/def :portkey.aws.rds.describe-db-security-groups-message/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-security-groups-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-security-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-security-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-db-security-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.describe-db-security-groups-message/db-security-group-name :portkey.aws.rds.describe-db-security-groups-message/filters :portkey.aws.rds.describe-db-security-groups-message/max-records :portkey.aws.rds.describe-db-security-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds/db-instance-role-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/option-settings-list (clojure.spec.alpha/coll-of :portkey.aws.rds/option-setting))

(clojure.spec.alpha/def :portkey.aws.rds.delete-option-group-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/delete-option-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.delete-option-group-message/option-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/db-instance-status-info-list (clojure.spec.alpha/coll-of :portkey.aws.rds/db-instance-status-info))

(clojure.spec.alpha/def :portkey.aws.rds.describe-db-parameters-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-parameters-message/source (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-db-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-db-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.describe-db-parameters-message/db-parameter-group-name] :opt-un [:portkey.aws.rds.describe-db-parameters-message/source :portkey.aws.rds.describe-db-parameters-message/filters :portkey.aws.rds.describe-db-parameters-message/max-records :portkey.aws.rds.describe-db-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds.certificate/certificate-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.certificate/certificate-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.certificate/thumbprint (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.certificate/valid-from (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.certificate/valid-till (clojure.spec.alpha/and :portkey.aws.rds/t-stamp))
(clojure.spec.alpha/def :portkey.aws.rds.certificate/certificate-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/certificate (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.certificate/certificate-identifier :portkey.aws.rds.certificate/certificate-type :portkey.aws.rds.certificate/thumbprint :portkey.aws.rds.certificate/valid-from :portkey.aws.rds.certificate/valid-till :portkey.aws.rds.certificate/certificate-arn]))

(clojure.spec.alpha/def :portkey.aws.rds/reserved-db-instance-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/purchase-reserved-db-instances-offering-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/reserved-db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.describe-reserved-db-instances-message/reserved-db-instance-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserved-db-instances-message/reserved-db-instances-offering-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserved-db-instances-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserved-db-instances-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserved-db-instances-message/duration (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserved-db-instances-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserved-db-instances-message/product-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserved-db-instances-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserved-db-instances-message/offering-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-reserved-db-instances-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds/describe-reserved-db-instances-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.describe-reserved-db-instances-message/reserved-db-instance-id :portkey.aws.rds.describe-reserved-db-instances-message/reserved-db-instances-offering-id :portkey.aws.rds.describe-reserved-db-instances-message/max-records :portkey.aws.rds.describe-reserved-db-instances-message/marker :portkey.aws.rds.describe-reserved-db-instances-message/duration :portkey.aws.rds.describe-reserved-db-instances-message/filters :portkey.aws.rds.describe-reserved-db-instances-message/product-description :portkey.aws.rds.describe-reserved-db-instances-message/db-instance-class :portkey.aws.rds.describe-reserved-db-instances-message/offering-type :portkey.aws.rds.describe-reserved-db-instances-message/multi-az]))

(clojure.spec.alpha/def :portkey.aws.rds.revoke-db-security-group-ingress-message/db-security-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.revoke-db-security-group-ingress-message/cidrip (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.revoke-db-security-group-ingress-message/ec-2-security-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.revoke-db-security-group-ingress-message/ec-2-security-group-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.revoke-db-security-group-ingress-message/ec-2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/revoke-db-security-group-ingress-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.revoke-db-security-group-ingress-message/db-security-group-name] :opt-un [:portkey.aws.rds.revoke-db-security-group-ingress-message/cidrip :portkey.aws.rds.revoke-db-security-group-ingress-message/ec-2-security-group-name :portkey.aws.rds.revoke-db-security-group-ingress-message/ec-2-security-group-id :portkey.aws.rds.revoke-db-security-group-ingress-message/ec-2-security-group-owner-id]))

(clojure.spec.alpha/def :portkey.aws.rds.domain-membership/domain (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.domain-membership/status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.domain-membership/fqdn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.domain-membership/iam-role-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/domain-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.domain-membership/domain :portkey.aws.rds.domain-membership/status :portkey.aws.rds.domain-membership/fqdn :portkey.aws.rds.domain-membership/iam-role-name]))

(clojure.spec.alpha/def :portkey.aws.rds.orderable-db-instance-option/supports-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.orderable-db-instance-option/supports-iops (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.orderable-db-instance-option/supported-engine-modes (clojure.spec.alpha/and :portkey.aws.rds/engine-mode-list))
(clojure.spec.alpha/def :portkey.aws.rds.orderable-db-instance-option/multi-az-capable (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.orderable-db-instance-option/min-storage-size (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.orderable-db-instance-option/max-iops-per-gib (clojure.spec.alpha/and :portkey.aws.rds/double-optional))
(clojure.spec.alpha/def :portkey.aws.rds.orderable-db-instance-option/min-iops-per-db-instance (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.orderable-db-instance-option/license-model (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.orderable-db-instance-option/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.orderable-db-instance-option/available-processor-features (clojure.spec.alpha/and :portkey.aws.rds/available-processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.orderable-db-instance-option/vpc (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.orderable-db-instance-option/supports-performance-insights (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.orderable-db-instance-option/storage-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.orderable-db-instance-option/max-storage-size (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.orderable-db-instance-option/min-iops-per-gib (clojure.spec.alpha/and :portkey.aws.rds/double-optional))
(clojure.spec.alpha/def :portkey.aws.rds.orderable-db-instance-option/read-replica-capable (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.orderable-db-instance-option/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.orderable-db-instance-option/supports-storage-encryption (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.orderable-db-instance-option/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.orderable-db-instance-option/availability-zones (clojure.spec.alpha/and :portkey.aws.rds/availability-zone-list))
(clojure.spec.alpha/def :portkey.aws.rds.orderable-db-instance-option/supports-enhanced-monitoring (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.orderable-db-instance-option/max-iops-per-db-instance (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds/orderable-db-instance-option (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.orderable-db-instance-option/supports-iam-database-authentication :portkey.aws.rds.orderable-db-instance-option/supports-iops :portkey.aws.rds.orderable-db-instance-option/supported-engine-modes :portkey.aws.rds.orderable-db-instance-option/multi-az-capable :portkey.aws.rds.orderable-db-instance-option/min-storage-size :portkey.aws.rds.orderable-db-instance-option/max-iops-per-gib :portkey.aws.rds.orderable-db-instance-option/min-iops-per-db-instance :portkey.aws.rds.orderable-db-instance-option/license-model :portkey.aws.rds.orderable-db-instance-option/engine-version :portkey.aws.rds.orderable-db-instance-option/available-processor-features :portkey.aws.rds.orderable-db-instance-option/vpc :portkey.aws.rds.orderable-db-instance-option/supports-performance-insights :portkey.aws.rds.orderable-db-instance-option/storage-type :portkey.aws.rds.orderable-db-instance-option/max-storage-size :portkey.aws.rds.orderable-db-instance-option/min-iops-per-gib :portkey.aws.rds.orderable-db-instance-option/read-replica-capable :portkey.aws.rds.orderable-db-instance-option/db-instance-class :portkey.aws.rds.orderable-db-instance-option/supports-storage-encryption :portkey.aws.rds.orderable-db-instance-option/engine :portkey.aws.rds.orderable-db-instance-option/availability-zones :portkey.aws.rds.orderable-db-instance-option/supports-enhanced-monitoring :portkey.aws.rds.orderable-db-instance-option/max-iops-per-db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/master-user-password (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/license-model (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/iops (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/storage-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/processor-features (clojure.spec.alpha/and :portkey.aws.rds/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/ca-certificate-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.pending-modified-values/multi-az (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds/pending-modified-values (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.pending-modified-values/backup-retention-period :portkey.aws.rds/pending-cloudwatch-logs-exports :portkey.aws.rds.pending-modified-values/db-instance-identifier :portkey.aws.rds.pending-modified-values/master-user-password :portkey.aws.rds.pending-modified-values/license-model :portkey.aws.rds.pending-modified-values/allocated-storage :portkey.aws.rds.pending-modified-values/engine-version :portkey.aws.rds.pending-modified-values/db-subnet-group-name :portkey.aws.rds.pending-modified-values/port :portkey.aws.rds.pending-modified-values/iops :portkey.aws.rds.pending-modified-values/storage-type :portkey.aws.rds.pending-modified-values/processor-features :portkey.aws.rds.pending-modified-values/ca-certificate-identifier :portkey.aws.rds.pending-modified-values/db-instance-class :portkey.aws.rds.pending-modified-values/multi-az]))

(clojure.spec.alpha/def :portkey.aws.rds/db-subnet-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/subnet-list (clojure.spec.alpha/coll-of :portkey.aws.rds/subnet))

(clojure.spec.alpha/def :portkey.aws.rds/filter-list (clojure.spec.alpha/coll-of :portkey.aws.rds/filter))

(clojure.spec.alpha/def :portkey.aws.rds/remove-from-global-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/global-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds/create-db-instance-read-replica-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-instance]))

(clojure.spec.alpha/def :portkey.aws.rds.available-processor-feature/name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.available-processor-feature/default-value (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.available-processor-feature/allowed-values (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/available-processor-feature (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.available-processor-feature/name :portkey.aws.rds.available-processor-feature/default-value :portkey.aws.rds.available-processor-feature/allowed-values]))

(clojure.spec.alpha/def :portkey.aws.rds.download-db-log-file-portion-details/log-file-data (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.download-db-log-file-portion-details/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.download-db-log-file-portion-details/additional-data-pending (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds/download-db-log-file-portion-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.download-db-log-file-portion-details/log-file-data :portkey.aws.rds.download-db-log-file-portion-details/marker :portkey.aws.rds.download-db-log-file-portion-details/additional-data-pending]))

(clojure.spec.alpha/def :portkey.aws.rds/db-snapshot-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/invalid-db-parameter-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/db-security-groups (clojure.spec.alpha/and :portkey.aws.rds/db-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/promotion-tier (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/domain-iam-role-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/new-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/use-default-processor-features (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/license-model (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/domain (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/allow-major-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/monitoring-interval (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/db-port-number (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/iops (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/tde-credential-password (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/storage-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/processor-features (clojure.spec.alpha/and :portkey.aws.rds/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/ca-certificate-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/performance-insights-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/enable-performance-insights (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/performance-insights-kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-db-instance-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/modify-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.modify-db-instance-message/db-instance-identifier] :opt-un [:portkey.aws.rds.modify-db-instance-message/deletion-protection :portkey.aws.rds.modify-db-instance-message/backup-retention-period :portkey.aws.rds.modify-db-instance-message/option-group-name :portkey.aws.rds.modify-db-instance-message/db-security-groups :portkey.aws.rds.modify-db-instance-message/promotion-tier :portkey.aws.rds.modify-db-instance-message/enable-iam-database-authentication :portkey.aws.rds.modify-db-instance-message/publicly-accessible :portkey.aws.rds.modify-db-instance-message/domain-iam-role-name :portkey.aws.rds.modify-db-instance-message/preferred-maintenance-window :portkey.aws.rds.modify-db-instance-message/copy-tags-to-snapshot :portkey.aws.rds.modify-db-instance-message/auto-minor-version-upgrade :portkey.aws.rds.modify-db-instance-message/new-db-instance-identifier :portkey.aws.rds.modify-db-instance-message/vpc-security-group-ids :portkey.aws.rds.modify-db-instance-message/use-default-processor-features :portkey.aws.rds.modify-db-instance-message/master-user-password :portkey.aws.rds.modify-db-instance-message/license-model :portkey.aws.rds.modify-db-instance-message/domain :portkey.aws.rds.modify-db-instance-message/allow-major-version-upgrade :portkey.aws.rds.modify-db-instance-message/allocated-storage :portkey.aws.rds.modify-db-instance-message/monitoring-interval :portkey.aws.rds.modify-db-instance-message/engine-version :portkey.aws.rds.modify-db-instance-message/db-subnet-group-name :portkey.aws.rds.modify-db-instance-message/db-port-number :portkey.aws.rds.modify-db-instance-message/iops :portkey.aws.rds.modify-db-instance-message/tde-credential-password :portkey.aws.rds.modify-db-instance-message/storage-type :portkey.aws.rds.modify-db-instance-message/apply-immediately :portkey.aws.rds.modify-db-instance-message/processor-features :portkey.aws.rds.modify-db-instance-message/ca-certificate-identifier :portkey.aws.rds/cloudwatch-logs-export-configuration :portkey.aws.rds.modify-db-instance-message/performance-insights-retention-period :portkey.aws.rds.modify-db-instance-message/db-instance-class :portkey.aws.rds.modify-db-instance-message/db-parameter-group-name :portkey.aws.rds.modify-db-instance-message/enable-performance-insights :portkey.aws.rds.modify-db-instance-message/monitoring-role-arn :portkey.aws.rds.modify-db-instance-message/tde-credential-arn :portkey.aws.rds.modify-db-instance-message/multi-az :portkey.aws.rds.modify-db-instance-message/performance-insights-kms-key-id :portkey.aws.rds.modify-db-instance-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/deletion-protection (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/db-security-groups (clojure.spec.alpha/and :portkey.aws.rds/db-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/s-3-ingestion-role-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.rds/log-type-list))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/s-3-bucket-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/tags (clojure.spec.alpha/and :portkey.aws.rds/tag-list))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/db-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.rds/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/use-default-processor-features (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/availability-zone (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/source-engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/master-user-password (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/license-model (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/allocated-storage (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/monitoring-interval (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/master-username (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/storage-encrypted (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/port (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/source-engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/iops (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/storage-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/processor-features (clojure.spec.alpha/and :portkey.aws.rds/processor-feature-list))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/performance-insights-retention-period (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/engine (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/s-3-prefix (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/enable-performance-insights (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/multi-az (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/performance-insights-kms-key-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.restore-db-instance-from-s-3-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/restore-db-instance-from-s-3-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.restore-db-instance-from-s-3-message/db-instance-identifier :portkey.aws.rds.restore-db-instance-from-s-3-message/db-instance-class :portkey.aws.rds.restore-db-instance-from-s-3-message/engine :portkey.aws.rds.restore-db-instance-from-s-3-message/source-engine :portkey.aws.rds.restore-db-instance-from-s-3-message/source-engine-version :portkey.aws.rds.restore-db-instance-from-s-3-message/s-3-bucket-name :portkey.aws.rds.restore-db-instance-from-s-3-message/s-3-ingestion-role-arn] :opt-un [:portkey.aws.rds.restore-db-instance-from-s-3-message/deletion-protection :portkey.aws.rds.restore-db-instance-from-s-3-message/backup-retention-period :portkey.aws.rds.restore-db-instance-from-s-3-message/option-group-name :portkey.aws.rds.restore-db-instance-from-s-3-message/db-security-groups :portkey.aws.rds.restore-db-instance-from-s-3-message/enable-iam-database-authentication :portkey.aws.rds.restore-db-instance-from-s-3-message/publicly-accessible :portkey.aws.rds.restore-db-instance-from-s-3-message/preferred-maintenance-window :portkey.aws.rds.restore-db-instance-from-s-3-message/copy-tags-to-snapshot :portkey.aws.rds.restore-db-instance-from-s-3-message/enable-cloudwatch-logs-exports :portkey.aws.rds.restore-db-instance-from-s-3-message/auto-minor-version-upgrade :portkey.aws.rds.restore-db-instance-from-s-3-message/tags :portkey.aws.rds.restore-db-instance-from-s-3-message/db-name :portkey.aws.rds.restore-db-instance-from-s-3-message/vpc-security-group-ids :portkey.aws.rds.restore-db-instance-from-s-3-message/use-default-processor-features :portkey.aws.rds.restore-db-instance-from-s-3-message/availability-zone :portkey.aws.rds.restore-db-instance-from-s-3-message/master-user-password :portkey.aws.rds.restore-db-instance-from-s-3-message/license-model :portkey.aws.rds.restore-db-instance-from-s-3-message/allocated-storage :portkey.aws.rds.restore-db-instance-from-s-3-message/monitoring-interval :portkey.aws.rds.restore-db-instance-from-s-3-message/master-username :portkey.aws.rds.restore-db-instance-from-s-3-message/engine-version :portkey.aws.rds.restore-db-instance-from-s-3-message/storage-encrypted :portkey.aws.rds.restore-db-instance-from-s-3-message/db-subnet-group-name :portkey.aws.rds.restore-db-instance-from-s-3-message/port :portkey.aws.rds.restore-db-instance-from-s-3-message/kms-key-id :portkey.aws.rds.restore-db-instance-from-s-3-message/iops :portkey.aws.rds.restore-db-instance-from-s-3-message/storage-type :portkey.aws.rds.restore-db-instance-from-s-3-message/processor-features :portkey.aws.rds.restore-db-instance-from-s-3-message/performance-insights-retention-period :portkey.aws.rds.restore-db-instance-from-s-3-message/s-3-prefix :portkey.aws.rds.restore-db-instance-from-s-3-message/db-parameter-group-name :portkey.aws.rds.restore-db-instance-from-s-3-message/enable-performance-insights :portkey.aws.rds.restore-db-instance-from-s-3-message/monitoring-role-arn :portkey.aws.rds.restore-db-instance-from-s-3-message/multi-az :portkey.aws.rds.restore-db-instance-from-s-3-message/performance-insights-kms-key-id :portkey.aws.rds.restore-db-instance-from-s-3-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.rds/modify-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.rds.modify-option-group-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-option-group-message/options-to-include (clojure.spec.alpha/and :portkey.aws.rds/option-configuration-list))
(clojure.spec.alpha/def :portkey.aws.rds.modify-option-group-message/options-to-remove (clojure.spec.alpha/and :portkey.aws.rds/option-names-list))
(clojure.spec.alpha/def :portkey.aws.rds.modify-option-group-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.rds/boolean))
(clojure.spec.alpha/def :portkey.aws.rds/modify-option-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.modify-option-group-message/option-group-name] :opt-un [:portkey.aws.rds.modify-option-group-message/options-to-include :portkey.aws.rds.modify-option-group-message/options-to-remove :portkey.aws.rds.modify-option-group-message/apply-immediately]))

(clojure.spec.alpha/def :portkey.aws.rds/db-security-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds/db-security-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.rds.db-subnet-group/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-subnet-group/db-subnet-group-description (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-subnet-group/vpc-id (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-subnet-group/subnet-group-status (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.db-subnet-group/subnets (clojure.spec.alpha/and :portkey.aws.rds/subnet-list))
(clojure.spec.alpha/def :portkey.aws.rds.db-subnet-group/db-subnet-group-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/db-subnet-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.db-subnet-group/db-subnet-group-name :portkey.aws.rds.db-subnet-group/db-subnet-group-description :portkey.aws.rds.db-subnet-group/vpc-id :portkey.aws.rds.db-subnet-group/subnet-group-status :portkey.aws.rds.db-subnet-group/subnets :portkey.aws.rds.db-subnet-group/db-subnet-group-arn]))

(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-endpoint-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-endpoint-message/db-cluster-endpoint-identifier (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-endpoint-message/endpoint-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-endpoint-message/static-members (clojure.spec.alpha/and :portkey.aws.rds/string-list))
(clojure.spec.alpha/def :portkey.aws.rds.create-db-cluster-endpoint-message/excluded-members (clojure.spec.alpha/and :portkey.aws.rds/string-list))
(clojure.spec.alpha/def :portkey.aws.rds/create-db-cluster-endpoint-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.create-db-cluster-endpoint-message/db-cluster-identifier :portkey.aws.rds.create-db-cluster-endpoint-message/db-cluster-endpoint-identifier :portkey.aws.rds.create-db-cluster-endpoint-message/endpoint-type] :opt-un [:portkey.aws.rds.create-db-cluster-endpoint-message/static-members :portkey.aws.rds.create-db-cluster-endpoint-message/excluded-members]))

(clojure.spec.alpha/def :portkey.aws.rds.describe-option-groups-message/option-group-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-option-groups-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-option-groups-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-option-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-option-groups-message/engine-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-option-groups-message/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-option-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.rds.describe-option-groups-message/option-group-name :portkey.aws.rds.describe-option-groups-message/filters :portkey.aws.rds.describe-option-groups-message/marker :portkey.aws.rds.describe-option-groups-message/max-records :portkey.aws.rds.describe-option-groups-message/engine-name :portkey.aws.rds.describe-option-groups-message/major-engine-version]))

(clojure.spec.alpha/def :portkey.aws.rds.modify-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-event-subscription-message/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-event-subscription-message/source-type (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.modify-event-subscription-message/event-categories (clojure.spec.alpha/and :portkey.aws.rds/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.rds.modify-event-subscription-message/enabled (clojure.spec.alpha/and :portkey.aws.rds/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.rds/modify-event-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.modify-event-subscription-message/subscription-name] :opt-un [:portkey.aws.rds.modify-event-subscription-message/sns-topic-arn :portkey.aws.rds.modify-event-subscription-message/source-type :portkey.aws.rds.modify-event-subscription-message/event-categories :portkey.aws.rds.modify-event-subscription-message/enabled]))

(clojure.spec.alpha/def :portkey.aws.rds/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.rds.describe-option-group-options-message/engine-name (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-option-group-options-message/major-engine-version (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds.describe-option-group-options-message/filters (clojure.spec.alpha/and :portkey.aws.rds/filter-list))
(clojure.spec.alpha/def :portkey.aws.rds.describe-option-group-options-message/max-records (clojure.spec.alpha/and :portkey.aws.rds/integer-optional))
(clojure.spec.alpha/def :portkey.aws.rds.describe-option-group-options-message/marker (clojure.spec.alpha/and :portkey.aws.rds/string))
(clojure.spec.alpha/def :portkey.aws.rds/describe-option-group-options-message (clojure.spec.alpha/keys :req-un [:portkey.aws.rds.describe-option-group-options-message/engine-name] :opt-un [:portkey.aws.rds.describe-option-group-options-message/major-engine-version :portkey.aws.rds.describe-option-group-options-message/filters :portkey.aws.rds.describe-option-group-options-message/max-records :portkey.aws.rds.describe-option-group-options-message/marker]))

(clojure.spec.alpha/def :portkey.aws.rds/global-cluster-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.core/defn add-source-identifier-to-subscription "Adds a source identifier to an existing RDS event notification subscription." ([add-source-identifier-to-subscription-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-add-source-identifier-to-subscription-message add-source-identifier-to-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/add-source-identifier-to-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/add-source-identifier-to-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "AddSourceIdentifierToSubscriptionResult", :http.request.configuration/action "AddSourceIdentifierToSubscription", :http.request.configuration/output-deser-fn response-add-source-identifier-to-subscription-result, :http.request.spec/error-spec {"SubscriptionNotFoundFault" :portkey.aws.rds/subscription-not-found-fault, "SourceNotFoundFault" :portkey.aws.rds/source-not-found-fault}})))))
(clojure.spec.alpha/fdef add-source-identifier-to-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds/add-source-identifier-to-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/add-source-identifier-to-subscription-result))

(clojure.core/defn delete-db-snapshot "Deletes a DB snapshot. If the snapshot is being copied, the copy operation is\nterminated.\n The DB snapshot must be in the available state to be deleted." ([delete-db-snapshot-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-db-snapshot-message delete-db-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/delete-db-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/delete-db-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteDBSnapshotResult", :http.request.configuration/action "DeleteDBSnapshot", :http.request.configuration/output-deser-fn response-delete-db-snapshot-result, :http.request.spec/error-spec {"InvalidDBSnapshotStateFault" :portkey.aws.rds/invalid-db-snapshot-state-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds/db-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds/delete-db-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/delete-db-snapshot-result))

(clojure.core/defn delete-db-subnet-group "Deletes a DB subnet group.\n The specified database subnet group must not be associated with any DB\ninstances." ([delete-db-subnet-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-db-subnet-group-message delete-db-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/delete-db-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteDBSubnetGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"InvalidDBSubnetGroupStateFault" :portkey.aws.rds/invalid-db-subnet-group-state-fault, "InvalidDBSubnetStateFault" :portkey.aws.rds/invalid-db-subnet-state-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds/db-subnet-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/delete-db-subnet-group-message) :ret clojure.core/true?)

(clojure.core/defn remove-from-global-cluster " Detaches an Aurora secondary cluster from an Aurora global database cluster.\nThe cluster becomes a standalone cluster with read-write capability instead of\nbeing read-only and receiving data from a primary cluster in a different region." ([] (remove-from-global-cluster {})) ([remove-from-global-cluster-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-remove-from-global-cluster-message remove-from-global-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/remove-from-global-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/remove-from-global-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RemoveFromGlobalClusterResult", :http.request.configuration/action "RemoveFromGlobalCluster", :http.request.configuration/output-deser-fn response-remove-from-global-cluster-result, :http.request.spec/error-spec {"GlobalClusterNotFoundFault" :portkey.aws.rds/global-cluster-not-found-fault, "InvalidGlobalClusterStateFault" :portkey.aws.rds/invalid-global-cluster-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef remove-from-global-cluster :args (clojure.spec.alpha/? :portkey.aws.rds/remove-from-global-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/remove-from-global-cluster-result))

(clojure.core/defn describe-orderable-db-instance-options "Returns a list of orderable DB instance options for the specified engine." ([describe-orderable-db-instance-options-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-orderable-db-instance-options-message describe-orderable-db-instance-options-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/orderable-db-instance-options-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-orderable-db-instance-options-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeOrderableDBInstanceOptionsResult", :http.request.configuration/action "DescribeOrderableDBInstanceOptions", :http.request.configuration/output-deser-fn response-orderable-db-instance-options-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-orderable-db-instance-options :args (clojure.spec.alpha/tuple :portkey.aws.rds/describe-orderable-db-instance-options-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/orderable-db-instance-options-message))

(clojure.core/defn copy-db-cluster-parameter-group "Copies the specified DB cluster parameter group." ([copy-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-copy-db-cluster-parameter-group-message copy-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/copy-db-cluster-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/copy-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CopyDBClusterParameterGroupResult", :http.request.configuration/action "CopyDBClusterParameterGroup", :http.request.configuration/output-deser-fn response-copy-db-cluster-parameter-group-result, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds/db-parameter-group-not-found-fault, "DBParameterGroupQuotaExceededFault" :portkey.aws.rds/db-parameter-group-quota-exceeded-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.rds/db-parameter-group-already-exists-fault}})))))
(clojure.spec.alpha/fdef copy-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/copy-db-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/copy-db-cluster-parameter-group-result))

(clojure.core/defn revoke-db-security-group-ingress "Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or\nEC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP,\nEC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either\nEC2SecurityGroupName or EC2SecurityGroupId)." ([revoke-db-security-group-ingress-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-revoke-db-security-group-ingress-message revoke-db-security-group-ingress-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/revoke-db-security-group-ingress-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/revoke-db-security-group-ingress-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RevokeDBSecurityGroupIngressResult", :http.request.configuration/action "RevokeDBSecurityGroupIngress", :http.request.configuration/output-deser-fn response-revoke-db-security-group-ingress-result, :http.request.spec/error-spec {"DBSecurityGroupNotFoundFault" :portkey.aws.rds/db-security-group-not-found-fault, "AuthorizationNotFoundFault" :portkey.aws.rds/authorization-not-found-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.rds/invalid-db-security-group-state-fault}})))))
(clojure.spec.alpha/fdef revoke-db-security-group-ingress :args (clojure.spec.alpha/tuple :portkey.aws.rds/revoke-db-security-group-ingress-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/revoke-db-security-group-ingress-result))

(clojure.core/defn authorize-db-security-group-ingress "Enables ingress to a DBSecurityGroup using one of two forms of authorization.\nFirst, EC2 or VPC security groups can be added to the DBSecurityGroup if the\napplication using the database is running on EC2 or VPC instances. Second, IP\nranges are available if the application accessing your database is running on\nthe Internet. Required parameters for this API are one of CIDR range,\nEC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either\nEC2SecurityGroupName or EC2SecurityGroupId for non-VPC).\n You can't authorize ingress from an EC2 security group in one AWS Region to an\nAmazon RDS DB instance in another. You can't authorize ingress from a VPC\nsecurity group in one VPC to an Amazon RDS DB instance in another.\n For an overview of CIDR ranges, go to the Wikipedia Tutorial\n(http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)." ([authorize-db-security-group-ingress-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-authorize-db-security-group-ingress-message authorize-db-security-group-ingress-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/authorize-db-security-group-ingress-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/authorize-db-security-group-ingress-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "AuthorizeDBSecurityGroupIngressResult", :http.request.configuration/action "AuthorizeDBSecurityGroupIngress", :http.request.configuration/output-deser-fn response-authorize-db-security-group-ingress-result, :http.request.spec/error-spec {"DBSecurityGroupNotFoundFault" :portkey.aws.rds/db-security-group-not-found-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.rds/invalid-db-security-group-state-fault, "AuthorizationAlreadyExistsFault" :portkey.aws.rds/authorization-already-exists-fault, "AuthorizationQuotaExceededFault" :portkey.aws.rds/authorization-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef authorize-db-security-group-ingress :args (clojure.spec.alpha/tuple :portkey.aws.rds/authorize-db-security-group-ingress-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/authorize-db-security-group-ingress-result))

(clojure.core/defn modify-db-subnet-group "Modifies an existing DB subnet group. DB subnet groups must contain at least one\nsubnet in at least two AZs in the AWS Region." ([modify-db-subnet-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-db-subnet-group-message modify-db-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/modify-db-subnet-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/modify-db-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBSubnetGroupResult", :http.request.configuration/action "ModifyDBSubnetGroup", :http.request.configuration/output-deser-fn response-modify-db-subnet-group-result, :http.request.spec/error-spec {"DBSubnetGroupNotFoundFault" :portkey.aws.rds/db-subnet-group-not-found-fault, "DBSubnetQuotaExceededFault" :portkey.aws.rds/db-subnet-quota-exceeded-fault, "SubnetAlreadyInUse" :portkey.aws.rds/subnet-already-in-use, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds/db-subnet-group-does-not-cover-enough-a-zs, "InvalidSubnet" :portkey.aws.rds/invalid-subnet}})))))
(clojure.spec.alpha/fdef modify-db-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/modify-db-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/modify-db-subnet-group-result))

(clojure.core/defn modify-db-snapshot "Updates a manual DB snapshot, which can be encrypted or not encrypted, with a\nnew engine version.\n Amazon RDS supports upgrading DB snapshots for MySQL and Oracle." ([modify-db-snapshot-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-db-snapshot-message modify-db-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/modify-db-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/modify-db-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBSnapshotResult", :http.request.configuration/action "ModifyDBSnapshot", :http.request.configuration/output-deser-fn response-modify-db-snapshot-result, :http.request.spec/error-spec {"DBSnapshotNotFoundFault" :portkey.aws.rds/db-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef modify-db-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds/modify-db-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/modify-db-snapshot-result))

(clojure.core/defn restore-db-instance-to-point-in-time "Restores a DB instance to an arbitrary point in time. You can restore to any\npoint in time before the time identified by the LatestRestorableTime property.\nYou can restore to a point up to the number of days specified by the\nBackupRetentionPeriod property.\n The target database is created with most of the original configuration, but in\na system-selected Availability Zone, with the default security group, the\ndefault subnet group, and the default DB parameter group. By default, the new DB\ninstance is created as a single-AZ deployment except when the instance is a SQL\nServer instance that has an option group that is associated with mirroring; in\nthis case, the instance becomes a mirrored deployment and not a single-AZ\ndeployment.\n This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora,\nuse RestoreDBClusterToPointInTime." ([restore-db-instance-to-point-in-time-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-restore-db-instance-to-point-in-time-message restore-db-instance-to-point-in-time-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/restore-db-instance-to-point-in-time-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/restore-db-instance-to-point-in-time-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RestoreDBInstanceToPointInTimeResult", :http.request.configuration/action "RestoreDBInstanceToPointInTime", :http.request.configuration/output-deser-fn response-restore-db-instance-to-point-in-time-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds/db-instance-not-found-fault, "DomainNotFoundFault" :portkey.aws.rds/domain-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invalid-db-instance-state-fault, "InstanceQuotaExceededFault" :portkey.aws.rds/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.rds/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds/db-instance-already-exists-fault, "DBInstanceAutomatedBackupNotFoundFault" :portkey.aws.rds/db-instance-automated-backup-not-found-fault, "StorageTypeNotSupportedFault" :portkey.aws.rds/storage-type-not-supported-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds/db-subnet-group-does-not-cover-enough-a-zs, "AuthorizationNotFoundFault" :portkey.aws.rds/authorization-not-found-fault, "InvalidSubnet" :portkey.aws.rds/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds/db-subnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds/provisioned-iops-not-available-in-az-fault, "PointInTimeRestoreNotEnabledFault" :portkey.aws.rds/point-in-time-restore-not-enabled-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds/db-parameter-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds/storage-quota-exceeded-fault, "InvalidRestoreFault" :portkey.aws.rds/invalid-restore-fault, "BackupPolicyNotFoundFault" :portkey.aws.rds/backup-policy-not-found-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds/insufficient-db-instance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef restore-db-instance-to-point-in-time :args (clojure.spec.alpha/tuple :portkey.aws.rds/restore-db-instance-to-point-in-time-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/restore-db-instance-to-point-in-time-result))

(clojure.core/defn restore-db-cluster-to-point-in-time "Restores a DB cluster to an arbitrary point in time. Users can restore to any\npoint in time before LatestRestorableTime for up to BackupRetentionPeriod days.\nThe target DB cluster is created from the source DB cluster with the same\nconfiguration as the original DB cluster, except that the new DB cluster is\ncreated with the default DB security group.\n This action only restores the DB cluster, not the DB instances for that DB\ncluster. You must invoke the CreateDBInstance action to create DB instances for\nthe restored DB cluster, specifying the identifier of the restored DB cluster in\nDBClusterIdentifier. You can create DB instances only after the\nRestoreDBClusterToPointInTime action has completed and the DB cluster is\navailable.\n For more information on Amazon Aurora, see What Is Amazon Aurora?\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html)\nin the Amazon Aurora User Guide." ([restore-db-cluster-to-point-in-time-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-restore-db-cluster-to-point-in-time-message restore-db-cluster-to-point-in-time-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/restore-db-cluster-to-point-in-time-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/restore-db-cluster-to-point-in-time-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RestoreDBClusterToPointInTimeResult", :http.request.configuration/action "RestoreDBClusterToPointInTime", :http.request.configuration/output-deser-fn response-restore-db-cluster-to-point-in-time-result, :http.request.spec/error-spec {"DBClusterAlreadyExistsFault" :portkey.aws.rds/db-cluster-already-exists-fault, "OptionGroupNotFoundFault" :portkey.aws.rds/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds/invalid-vpc-network-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault, "DBClusterParameterGroupNotFoundFault" :portkey.aws.rds/db-cluster-parameter-group-not-found-fault, "InsufficientStorageClusterCapacityFault" :portkey.aws.rds/insufficient-storage-cluster-capacity-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.rds/db-cluster-snapshot-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.rds/invalid-subnet, "DBClusterQuotaExceededFault" :portkey.aws.rds/db-cluster-quota-exceeded-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds/db-subnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds/kms-key-not-accessible-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.rds/invalid-db-cluster-snapshot-state-fault, "StorageQuotaExceededFault" :portkey.aws.rds/storage-quota-exceeded-fault, "InvalidRestoreFault" :portkey.aws.rds/invalid-restore-fault, "InsufficientDBClusterCapacityFault" :portkey.aws.rds/insufficient-db-cluster-capacity-fault, "InvalidDBSnapshotStateFault" :portkey.aws.rds/invalid-db-snapshot-state-fault}})))))
(clojure.spec.alpha/fdef restore-db-cluster-to-point-in-time :args (clojure.spec.alpha/tuple :portkey.aws.rds/restore-db-cluster-to-point-in-time-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/restore-db-cluster-to-point-in-time-result))

(clojure.core/defn describe-events "Returns events related to DB instances, DB security groups, DB snapshots, and DB\nparameter groups for the past 14 days. Events specific to a particular DB\ninstance, DB security group, database snapshot, or DB parameter group can be\nobtained by providing the name as a parameter. By default, the past hour of\nevents are returned." ([] (describe-events {})) ([describe-events-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-events-message describe-events-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/events-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-events-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEventsResult", :http.request.configuration/action "DescribeEvents", :http.request.configuration/output-deser-fn response-events-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-events :args (clojure.spec.alpha/? :portkey.aws.rds/describe-events-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/events-message))

(clojure.core/defn reset-db-parameter-group "Modifies the parameters of a DB parameter group to the engine/system default\nvalue. To reset specific parameters, provide a list of the following:\nParameterName and ApplyMethod. To reset the entire DB parameter group, specify\nthe DBParameterGroup name and ResetAllParameters parameters. When resetting the\nentire group, dynamic parameters are updated immediately and static parameters\nare set to pending-reboot to take effect on the next DB instance restart or\nRebootDBInstance request." ([reset-db-parameter-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-reset-db-parameter-group-message reset-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/db-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/reset-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ResetDBParameterGroupResult", :http.request.configuration/action "ResetDBParameterGroup", :http.request.configuration/output-deser-fn response-db-parameter-group-name-message, :http.request.spec/error-spec {"InvalidDBParameterGroupStateFault" :portkey.aws.rds/invalid-db-parameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef reset-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/reset-db-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/db-parameter-group-name-message))

(clojure.core/defn remove-role-from-db-cluster "Disassociates an AWS Identity and Access Management (IAM) role from an Amazon\nAurora DB cluster. For more information, see Authorizing Amazon Aurora MySQL to\nAccess Other AWS Services on Your Behalf\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html)\nin the Amazon Aurora User Guide." ([remove-role-from-db-cluster-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-remove-role-from-db-cluster-message remove-role-from-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/remove-role-from-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RemoveRoleFromDBCluster", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault, "DBClusterRoleNotFoundFault" :portkey.aws.rds/db-cluster-role-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invalid-db-cluster-state-fault}})))))
(clojure.spec.alpha/fdef remove-role-from-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds/remove-role-from-db-cluster-message) :ret clojure.core/true?)

(clojure.core/defn describe-option-groups "Describes the available option groups." ([] (describe-option-groups {})) ([describe-option-groups-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-option-groups-message describe-option-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/option-groups, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-option-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeOptionGroupsResult", :http.request.configuration/action "DescribeOptionGroups", :http.request.configuration/output-deser-fn response-option-groups, :http.request.spec/error-spec {"OptionGroupNotFoundFault" :portkey.aws.rds/option-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-option-groups :args (clojure.spec.alpha/? :portkey.aws.rds/describe-option-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/option-groups))

(clojure.core/defn delete-db-cluster-snapshot "Deletes a DB cluster snapshot. If the snapshot is being copied, the copy\noperation is terminated.\n The DB cluster snapshot must be in the available state to be deleted.\n For more information on Amazon Aurora, see What Is Amazon Aurora?\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html)\nin the Amazon Aurora User Guide." ([delete-db-cluster-snapshot-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-db-cluster-snapshot-message delete-db-cluster-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/delete-db-cluster-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/delete-db-cluster-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteDBClusterSnapshotResult", :http.request.configuration/action "DeleteDBClusterSnapshot", :http.request.configuration/output-deser-fn response-delete-db-cluster-snapshot-result, :http.request.spec/error-spec {"InvalidDBClusterSnapshotStateFault" :portkey.aws.rds/invalid-db-cluster-snapshot-state-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.rds/db-cluster-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds/delete-db-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/delete-db-cluster-snapshot-result))

(clojure.core/defn reboot-db-instance "You might need to reboot your DB instance, usually for maintenance reasons. For\nexample, if you make certain modifications, or if you change the DB parameter\ngroup associated with the DB instance, you must reboot the instance for the\nchanges to take effect.\n Rebooting a DB instance restarts the database engine service. Rebooting a DB\ninstance results in a momentary outage, during which the DB instance status is\nset to rebooting.\n For more information about rebooting, see Rebooting a DB Instance\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html)\nin the Amazon RDS User Guide." ([reboot-db-instance-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-reboot-db-instance-message reboot-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/reboot-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/reboot-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RebootDBInstanceResult", :http.request.configuration/action "RebootDBInstance", :http.request.configuration/output-deser-fn response-reboot-db-instance-result, :http.request.spec/error-spec {"InvalidDBInstanceStateFault" :portkey.aws.rds/invalid-db-instance-state-fault, "DBInstanceNotFoundFault" :portkey.aws.rds/db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef reboot-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds/reboot-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/reboot-db-instance-result))

(clojure.core/defn create-db-cluster-parameter-group "Creates a new DB cluster parameter group.\n Parameters in a DB cluster parameter group apply to all of the instances in a\nDB cluster.\n A DB cluster parameter group is initially created with the default parameters\nfor the database engine used by instances in the DB cluster. To provide custom\nvalues for any of the parameters, you must modify the group after creating it\nusing ModifyDBClusterParameterGroup. Once you've created a DB cluster parameter\ngroup, you need to associate it with your DB cluster using ModifyDBCluster. When\nyou associate a new DB cluster parameter group with a running DB cluster, you\nneed to reboot the DB instances in the DB cluster without failover for the new\nDB cluster parameter group and associated settings to take effect.\n After you create a DB cluster parameter group, you should wait at least 5\nminutes before creating your first DB cluster that uses that DB cluster\nparameter group as the default parameter group. This allows Amazon RDS to fully\ncomplete the create action before the DB cluster parameter group is used as the\ndefault for a new DB cluster. This is especially important for parameters that\nare critical when creating the default database for a DB cluster, such as the\ncharacter set for the default database defined by the character_set_database\nparameter. You can use the Parameter Groups option of the Amazon RDS console\n(https://console.aws.amazon.com/rds/) or the DescribeDBClusterParameters command\nto verify that your DB cluster parameter group has been created or modified.\n For more information on Amazon Aurora, see What Is Amazon Aurora?\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html)\nin the Amazon Aurora User Guide." ([create-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-db-cluster-parameter-group-message create-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/create-db-cluster-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/create-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBClusterParameterGroupResult", :http.request.configuration/action "CreateDBClusterParameterGroup", :http.request.configuration/output-deser-fn response-create-db-cluster-parameter-group-result, :http.request.spec/error-spec {"DBParameterGroupQuotaExceededFault" :portkey.aws.rds/db-parameter-group-quota-exceeded-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.rds/db-parameter-group-already-exists-fault}})))))
(clojure.spec.alpha/fdef create-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/create-db-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/create-db-cluster-parameter-group-result))

(clojure.core/defn delete-db-security-group "Deletes a DB security group.\n The specified DB security group must not be associated with any DB instances." ([delete-db-security-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-db-security-group-message delete-db-security-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/delete-db-security-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteDBSecurityGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"InvalidDBSecurityGroupStateFault" :portkey.aws.rds/invalid-db-security-group-state-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-security-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/delete-db-security-group-message) :ret clojure.core/true?)

(clojure.core/defn copy-db-parameter-group "Copies the specified DB parameter group." ([copy-db-parameter-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-copy-db-parameter-group-message copy-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/copy-db-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/copy-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CopyDBParameterGroupResult", :http.request.configuration/action "CopyDBParameterGroup", :http.request.configuration/output-deser-fn response-copy-db-parameter-group-result, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds/db-parameter-group-not-found-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.rds/db-parameter-group-already-exists-fault, "DBParameterGroupQuotaExceededFault" :portkey.aws.rds/db-parameter-group-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef copy-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/copy-db-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/copy-db-parameter-group-result))

(clojure.core/defn list-tags-for-resource "Lists all tags on an Amazon RDS resource.\n For an overview on tagging an Amazon RDS resource, see Tagging Amazon RDS\nResources\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html) in\nthe Amazon RDS User Guide." ([list-tags-for-resource-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-tags-for-resource-message list-tags-for-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/tag-list-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/list-tags-for-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListTagsForResourceResult", :http.request.configuration/action "ListTagsForResource", :http.request.configuration/output-deser-fn response-tag-list-message, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds/db-instance-not-found-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds/db-snapshot-not-found-fault, "DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef list-tags-for-resource :args (clojure.spec.alpha/tuple :portkey.aws.rds/list-tags-for-resource-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/tag-list-message))

(clojure.core/defn delete-db-instance-automated-backup "Deletes automated backups based on the source instance's DbiResourceId value or\nthe restorable instance's resource ID." ([delete-db-instance-automated-backup-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-db-instance-automated-backup-message delete-db-instance-automated-backup-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/delete-db-instance-automated-backup-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/delete-db-instance-automated-backup-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteDBInstanceAutomatedBackupResult", :http.request.configuration/action "DeleteDBInstanceAutomatedBackup", :http.request.configuration/output-deser-fn response-delete-db-instance-automated-backup-result, :http.request.spec/error-spec {"InvalidDBInstanceAutomatedBackupStateFault" :portkey.aws.rds/invalid-db-instance-automated-backup-state-fault, "DBInstanceAutomatedBackupNotFoundFault" :portkey.aws.rds/db-instance-automated-backup-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-instance-automated-backup :args (clojure.spec.alpha/tuple :portkey.aws.rds/delete-db-instance-automated-backup-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/delete-db-instance-automated-backup-result))

(clojure.core/defn describe-certificates "Lists the set of CA certificates provided by Amazon RDS for this AWS account." ([] (describe-certificates {})) ([describe-certificates-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-certificates-message describe-certificates-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/certificate-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-certificates-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeCertificatesResult", :http.request.configuration/action "DescribeCertificates", :http.request.configuration/output-deser-fn response-certificate-message, :http.request.spec/error-spec {"CertificateNotFoundFault" :portkey.aws.rds/certificate-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-certificates :args (clojure.spec.alpha/? :portkey.aws.rds/describe-certificates-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/certificate-message))

(clojure.core/defn describe-global-clusters " Returns information about Aurora global database clusters. This API supports\npagination.\n For more information on Amazon Aurora, see What Is Amazon Aurora?\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html)\nin the Amazon Aurora User Guide." ([] (describe-global-clusters {})) ([describe-global-clusters-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-global-clusters-message describe-global-clusters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/global-clusters-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-global-clusters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeGlobalClustersResult", :http.request.configuration/action "DescribeGlobalClusters", :http.request.configuration/output-deser-fn response-global-clusters-message, :http.request.spec/error-spec {"GlobalClusterNotFoundFault" :portkey.aws.rds/global-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-global-clusters :args (clojure.spec.alpha/? :portkey.aws.rds/describe-global-clusters-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/global-clusters-message))

(clojure.core/defn stop-db-instance " Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS\nretains the DB instance's metadata, including its endpoint, DB parameter group,\nand option group membership. Amazon RDS also retains the transaction logs so you\ncan do a point-in-time restore if necessary.\n For more information, see Stopping an Amazon RDS DB Instance Temporarily\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html)\nin the Amazon RDS User Guide.\n This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora\nclusters, use StopDBCluster instead." ([stop-db-instance-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-stop-db-instance-message stop-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/stop-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/stop-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "StopDBInstanceResult", :http.request.configuration/action "StopDBInstance", :http.request.configuration/output-deser-fn response-stop-db-instance-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invalid-db-instance-state-fault, "DBSnapshotAlreadyExistsFault" :portkey.aws.rds/db-snapshot-already-exists-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds/snapshot-quota-exceeded-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invalid-db-cluster-state-fault}})))))
(clojure.spec.alpha/fdef stop-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds/stop-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/stop-db-instance-result))

(clojure.core/defn describe-engine-default-parameters "Returns the default engine and system parameter information for the specified\ndatabase engine." ([describe-engine-default-parameters-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-engine-default-parameters-message describe-engine-default-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/describe-engine-default-parameters-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-engine-default-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEngineDefaultParametersResult", :http.request.configuration/action "DescribeEngineDefaultParameters", :http.request.configuration/output-deser-fn response-describe-engine-default-parameters-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-engine-default-parameters :args (clojure.spec.alpha/tuple :portkey.aws.rds/describe-engine-default-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/describe-engine-default-parameters-result))

(clojure.core/defn delete-db-instance "The DeleteDBInstance action deletes a previously provisioned DB instance. When\nyou delete a DB instance, all automated backups for that instance are deleted\nand can't be recovered. Manual DB snapshots of the DB instance to be deleted by\nDeleteDBInstance are not deleted.\n If you request a final DB snapshot the status of the Amazon RDS DB instance is\ndeleting until the DB snapshot is created. The API action DescribeDBInstance is\nused to monitor the status of this operation. The action can't be canceled or\nreverted once submitted.\n Note that when a DB instance is in a failure state and has a status of failed,\nincompatible-restore, or incompatible-network, you can only delete it when the\nSkipFinalSnapshot parameter is set to true.\n If the specified DB instance is part of an Amazon Aurora DB cluster, you can't\ndelete the DB instance if both of the following conditions are true:\n * The DB cluster is a Read Replica of another Amazon Aurora DB cluster.\n * The DB instance is the only instance in the DB cluster.\n To delete a DB instance in this case, first call the\nPromoteReadReplicaDBCluster API action to promote the DB cluster so it's no\nlonger a Read Replica. After the promotion completes, then call the\nDeleteDBInstance API action to delete the final instance in the DB cluster." ([delete-db-instance-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-db-instance-message delete-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/delete-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/delete-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteDBInstanceResult", :http.request.configuration/action "DeleteDBInstance", :http.request.configuration/output-deser-fn response-delete-db-instance-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invalid-db-instance-state-fault, "DBSnapshotAlreadyExistsFault" :portkey.aws.rds/db-snapshot-already-exists-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds/snapshot-quota-exceeded-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invalid-db-cluster-state-fault, "DBInstanceAutomatedBackupQuotaExceededFault" :portkey.aws.rds/db-instance-automated-backup-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef delete-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds/delete-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/delete-db-instance-result))

(clojure.core/defn describe-db-subnet-groups "Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is\nspecified, the list will contain only the descriptions of the specified\nDBSubnetGroup.\n For an overview of CIDR ranges, go to the Wikipedia Tutorial\n(http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)." ([] (describe-db-subnet-groups {})) ([describe-db-subnet-groups-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-subnet-groups-message describe-db-subnet-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/db-subnet-group-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-db-subnet-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBSubnetGroupsResult", :http.request.configuration/action "DescribeDBSubnetGroups", :http.request.configuration/output-deser-fn response-db-subnet-group-message, :http.request.spec/error-spec {"DBSubnetGroupNotFoundFault" :portkey.aws.rds/db-subnet-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-subnet-groups :args (clojure.spec.alpha/? :portkey.aws.rds/describe-db-subnet-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/db-subnet-group-message))

(clojure.core/defn modify-global-cluster " Modify a setting for an Amazon Aurora global cluster. You can change one or\nmore database configuration parameters by specifying these parameters and the\nnew values in the request. For more information on Amazon Aurora, see What Is\nAmazon Aurora?\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html)\nin the Amazon Aurora User Guide." ([] (modify-global-cluster {})) ([modify-global-cluster-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-global-cluster-message modify-global-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/modify-global-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/modify-global-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyGlobalClusterResult", :http.request.configuration/action "ModifyGlobalCluster", :http.request.configuration/output-deser-fn response-modify-global-cluster-result, :http.request.spec/error-spec {"GlobalClusterNotFoundFault" :portkey.aws.rds/global-cluster-not-found-fault, "InvalidGlobalClusterStateFault" :portkey.aws.rds/invalid-global-cluster-state-fault}})))))
(clojure.spec.alpha/fdef modify-global-cluster :args (clojure.spec.alpha/? :portkey.aws.rds/modify-global-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/modify-global-cluster-result))

(clojure.core/defn describe-db-clusters "Returns information about provisioned Aurora DB clusters. This API supports\npagination.\n For more information on Amazon Aurora, see What Is Amazon Aurora?\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html)\nin the Amazon Aurora User Guide." ([] (describe-db-clusters {})) ([describe-db-clusters-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-clusters-message describe-db-clusters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/db-cluster-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-db-clusters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBClustersResult", :http.request.configuration/action "DescribeDBClusters", :http.request.configuration/output-deser-fn response-db-cluster-message, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-clusters :args (clojure.spec.alpha/? :portkey.aws.rds/describe-db-clusters-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/db-cluster-message))

(clojure.core/defn create-db-cluster "Creates a new Amazon Aurora DB cluster.\n You can use the ReplicationSourceIdentifier parameter to create the DB cluster\nas a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For\ncross-region replication where the DB cluster identified by\nReplicationSourceIdentifier is encrypted, you must also specify the PreSignedUrl\nparameter.\n For more information on Amazon Aurora, see What Is Amazon Aurora?\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html)\nin the Amazon Aurora User Guide." ([create-db-cluster-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-db-cluster-message create-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/create-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/create-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBClusterResult", :http.request.configuration/action "CreateDBCluster", :http.request.configuration/output-deser-fn response-create-db-cluster-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds/db-instance-not-found-fault, "DBClusterAlreadyExistsFault" :portkey.aws.rds/db-cluster-already-exists-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invalid-db-instance-state-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds/invalid-vpc-network-state-fault, "InvalidDBSubnetGroupStateFault" :portkey.aws.rds/invalid-db-subnet-group-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault, "DBClusterParameterGroupNotFoundFault" :portkey.aws.rds/db-cluster-parameter-group-not-found-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds/db-subnet-group-does-not-cover-enough-a-zs, "InsufficientStorageClusterCapacityFault" :portkey.aws.rds/insufficient-storage-cluster-capacity-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.rds/invalid-subnet, "InvalidGlobalClusterStateFault" :portkey.aws.rds/invalid-global-cluster-state-fault, "DBClusterQuotaExceededFault" :portkey.aws.rds/db-cluster-quota-exceeded-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds/db-subnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds/storage-quota-exceeded-fault, "GlobalClusterNotFoundFault" :portkey.aws.rds/global-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef create-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds/create-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/create-db-cluster-result))

(clojure.core/defn create-global-cluster " Creates an Aurora global database spread across multiple regions. The global\ndatabase contains a single primary cluster with read-write capability, and a\nread-only secondary cluster that receives data from the primary cluster through\nhigh-speed replication performed by the Aurora storage subsystem.\n You can create a global database that is initially empty, and then add a\nprimary cluster and a secondary cluster to it. Or you can specify an existing\nAurora cluster during the create operation, and this cluster becomes the primary\ncluster of the global database." ([] (create-global-cluster {})) ([create-global-cluster-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-global-cluster-message create-global-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/create-global-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/create-global-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateGlobalClusterResult", :http.request.configuration/action "CreateGlobalCluster", :http.request.configuration/output-deser-fn response-create-global-cluster-result, :http.request.spec/error-spec {"GlobalClusterAlreadyExistsFault" :portkey.aws.rds/global-cluster-already-exists-fault, "GlobalClusterQuotaExceededFault" :portkey.aws.rds/global-cluster-quota-exceeded-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invalid-db-cluster-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef create-global-cluster :args (clojure.spec.alpha/? :portkey.aws.rds/create-global-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/create-global-cluster-result))

(clojure.core/defn failover-db-cluster "Forces a failover for a DB cluster.\n A failover for a DB cluster promotes one of the Aurora Replicas (read-only\ninstances) in the DB cluster to be the primary instance (the cluster writer).\n Amazon Aurora will automatically fail over to an Aurora Replica, if one exists,\nwhen the primary instance fails. You can force a failover when you want to\nsimulate a failure of a primary instance for testing. Because each instance in a\nDB cluster has its own endpoint address, you will need to clean up and\nre-establish any existing connections that use those endpoint addresses when the\nfailover is complete.\n For more information on Amazon Aurora, see What Is Amazon Aurora?\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html)\nin the Amazon Aurora User Guide." ([failover-db-cluster-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-failover-db-cluster-message failover-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/failover-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/failover-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "FailoverDBClusterResult", :http.request.configuration/action "FailoverDBCluster", :http.request.configuration/output-deser-fn response-failover-db-cluster-result, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invalid-db-cluster-state-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef failover-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds/failover-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/failover-db-cluster-result))

(clojure.core/defn reset-db-cluster-parameter-group " Modifies the parameters of a DB cluster parameter group to the default value.\nTo reset specific parameters submit a list of the following: ParameterName and\nApplyMethod. To reset the entire DB cluster parameter group, specify the\nDBClusterParameterGroupName and ResetAllParameters parameters.\n When resetting the entire group, dynamic parameters are updated immediately and\nstatic parameters are set to pending-reboot to take effect on the next DB\ninstance restart or RebootDBInstance request. You must call RebootDBInstance for\nevery DB instance in your DB cluster that you want the updated static parameter\nto apply to.\n For more information on Amazon Aurora, see What Is Amazon Aurora?\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html)\nin the Amazon Aurora User Guide." ([reset-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-reset-db-cluster-parameter-group-message reset-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/db-cluster-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/reset-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ResetDBClusterParameterGroupResult", :http.request.configuration/action "ResetDBClusterParameterGroup", :http.request.configuration/output-deser-fn response-db-cluster-parameter-group-name-message, :http.request.spec/error-spec {"InvalidDBParameterGroupStateFault" :portkey.aws.rds/invalid-db-parameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef reset-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/reset-db-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/db-cluster-parameter-group-name-message))

(clojure.core/defn create-db-instance "Creates a new DB instance." ([create-db-instance-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-db-instance-message create-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/create-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/create-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBInstanceResult", :http.request.configuration/action "CreateDBInstance", :http.request.configuration/output-deser-fn response-create-db-instance-result, :http.request.spec/error-spec {"DomainNotFoundFault" :portkey.aws.rds/domain-not-found-fault, "InstanceQuotaExceededFault" :portkey.aws.rds/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.rds/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds/db-instance-already-exists-fault, "DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault, "StorageTypeNotSupportedFault" :portkey.aws.rds/storage-type-not-supported-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds/db-subnet-group-does-not-cover-enough-a-zs, "AuthorizationNotFoundFault" :portkey.aws.rds/authorization-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.rds/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds/db-subnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds/provisioned-iops-not-available-in-az-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds/db-parameter-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds/storage-quota-exceeded-fault, "BackupPolicyNotFoundFault" :portkey.aws.rds/backup-policy-not-found-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds/insufficient-db-instance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef create-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds/create-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/create-db-instance-result))

(clojure.core/defn promote-read-replica "Promotes a Read Replica DB instance to a standalone DB instance.\n * Backup duration is a function of the amount of changes to the database since\nthe previous backup. If you plan to promote a Read Replica to a standalone\ninstance, we recommend that you enable backups and complete at least one backup\nprior to promotion. In addition, a Read Replica cannot be promoted to a\nstandalone instance when it is in the backing-up status. If you have enabled\nbackups on your Read Replica, configure the automated backup window so that\ndaily backups do not interfere with Read Replica promotion.\n * This command doesn't apply to Aurora MySQL and Aurora PostgreSQL." ([promote-read-replica-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-promote-read-replica-message promote-read-replica-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/promote-read-replica-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/promote-read-replica-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "PromoteReadReplicaResult", :http.request.configuration/action "PromoteReadReplica", :http.request.configuration/output-deser-fn response-promote-read-replica-result, :http.request.spec/error-spec {"InvalidDBInstanceStateFault" :portkey.aws.rds/invalid-db-instance-state-fault, "DBInstanceNotFoundFault" :portkey.aws.rds/db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef promote-read-replica :args (clojure.spec.alpha/tuple :portkey.aws.rds/promote-read-replica-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/promote-read-replica-result))

(clojure.core/defn delete-event-subscription "Deletes an RDS event notification subscription." ([delete-event-subscription-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-event-subscription-message delete-event-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/delete-event-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/delete-event-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteEventSubscriptionResult", :http.request.configuration/action "DeleteEventSubscription", :http.request.configuration/output-deser-fn response-delete-event-subscription-result, :http.request.spec/error-spec {"SubscriptionNotFoundFault" :portkey.aws.rds/subscription-not-found-fault, "InvalidEventSubscriptionStateFault" :portkey.aws.rds/invalid-event-subscription-state-fault}})))))
(clojure.spec.alpha/fdef delete-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds/delete-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/delete-event-subscription-result))

(clojure.core/defn apply-pending-maintenance-action "Applies a pending maintenance action to a resource (for example, to a DB\ninstance)." ([apply-pending-maintenance-action-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-apply-pending-maintenance-action-message apply-pending-maintenance-action-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/apply-pending-maintenance-action-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/apply-pending-maintenance-action-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ApplyPendingMaintenanceActionResult", :http.request.configuration/action "ApplyPendingMaintenanceAction", :http.request.configuration/output-deser-fn response-apply-pending-maintenance-action-result, :http.request.spec/error-spec {"ResourceNotFoundFault" :portkey.aws.rds/resource-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invalid-db-cluster-state-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef apply-pending-maintenance-action :args (clojure.spec.alpha/tuple :portkey.aws.rds/apply-pending-maintenance-action-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/apply-pending-maintenance-action-result))

(clojure.core/defn delete-db-cluster "The DeleteDBCluster action deletes a previously provisioned DB cluster. When you\ndelete a DB cluster, all automated backups for that DB cluster are deleted and\ncan't be recovered. Manual DB cluster snapshots of the specified DB cluster are\nnot deleted.\n For more information on Amazon Aurora, see What Is Amazon Aurora?\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html)\nin the Amazon Aurora User Guide." ([delete-db-cluster-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-db-cluster-message delete-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/delete-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/delete-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteDBClusterResult", :http.request.configuration/action "DeleteDBCluster", :http.request.configuration/output-deser-fn response-delete-db-cluster-result, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invalid-db-cluster-state-fault, "DBClusterSnapshotAlreadyExistsFault" :portkey.aws.rds/db-cluster-snapshot-already-exists-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds/snapshot-quota-exceeded-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.rds/invalid-db-cluster-snapshot-state-fault}})))))
(clojure.spec.alpha/fdef delete-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds/delete-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/delete-db-cluster-result))

(clojure.core/defn restore-db-instance-from-s-3 "Amazon Relational Database Service (Amazon RDS) supports importing MySQL\ndatabases by using backup files. You can create a backup of your on-premises\ndatabase, store it on Amazon Simple Storage Service (Amazon S3), and then\nrestore the backup file onto a new Amazon RDS DB instance running MySQL. For\nmore information, see Importing Data into an Amazon RDS MySQL DB Instance\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html)\nin the Amazon RDS User Guide." ([restore-db-instance-from-s-3-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-restore-db-instance-from-s-3-message restore-db-instance-from-s-3-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/restore-db-instance-from-s-3-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/restore-db-instance-from-s-3-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RestoreDBInstanceFromS3Result", :http.request.configuration/action "RestoreDBInstanceFromS3", :http.request.configuration/output-deser-fn response-restore-db-instance-from-s-3-result, :http.request.spec/error-spec {"InstanceQuotaExceededFault" :portkey.aws.rds/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.rds/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds/db-instance-already-exists-fault, "StorageTypeNotSupportedFault" :portkey.aws.rds/storage-type-not-supported-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds/db-subnet-group-does-not-cover-enough-a-zs, "AuthorizationNotFoundFault" :portkey.aws.rds/authorization-not-found-fault, "InvalidSubnet" :portkey.aws.rds/invalid-subnet, "InvalidS3BucketFault" :portkey.aws.rds/invalid-s-3-bucket-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds/db-subnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds/provisioned-iops-not-available-in-az-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds/db-parameter-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds/storage-quota-exceeded-fault, "BackupPolicyNotFoundFault" :portkey.aws.rds/backup-policy-not-found-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds/insufficient-db-instance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef restore-db-instance-from-s-3 :args (clojure.spec.alpha/tuple :portkey.aws.rds/restore-db-instance-from-s-3-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/restore-db-instance-from-s-3-result))

(clojure.core/defn describe-db-log-files "Returns a list of DB log files for the DB instance." ([describe-db-log-files-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-log-files-message describe-db-log-files-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/describe-db-log-files-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-db-log-files-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBLogFilesResult", :http.request.configuration/action "DescribeDBLogFiles", :http.request.configuration/output-deser-fn response-describe-db-log-files-response, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds/db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-log-files :args (clojure.spec.alpha/tuple :portkey.aws.rds/describe-db-log-files-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/describe-db-log-files-response))

(clojure.core/defn restore-db-instance-from-db-snapshot "Creates a new DB instance from a DB snapshot. The target database is created\nfrom the source database restore point with the most of original configuration\nwith the default security group and the default DB parameter group. By default,\nthe new DB instance is created as a single-AZ deployment except when the\ninstance is a SQL Server instance that has an option group that is associated\nwith mirroring; in this case, the instance becomes a mirrored AZ deployment and\nnot a single-AZ deployment.\n If your intent is to replace your original DB instance with the new, restored\nDB instance, then rename your original DB instance before you call the\nRestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with\nthe same name. Once you have renamed your original DB instance with a different\nidentifier, then you can pass the original name of the DB instance as the\nDBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action.\nThe result is that you will replace the original DB instance with the DB\ninstance created from the snapshot.\n If you are restoring from a shared manual DB snapshot, the DBSnapshotIdentifier\nmust be the ARN of the shared DB snapshot.\n This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora,\nuse RestoreDBClusterFromSnapshot." ([restore-db-instance-from-db-snapshot-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-restore-db-instance-from-db-snapshot-message restore-db-instance-from-db-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/restore-db-instance-from-db-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/restore-db-instance-from-db-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RestoreDBInstanceFromDBSnapshotResult", :http.request.configuration/action "RestoreDBInstanceFromDBSnapshot", :http.request.configuration/output-deser-fn response-restore-db-instance-from-db-snapshot-result, :http.request.spec/error-spec {"DomainNotFoundFault" :portkey.aws.rds/domain-not-found-fault, "InstanceQuotaExceededFault" :portkey.aws.rds/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.rds/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds/db-instance-already-exists-fault, "StorageTypeNotSupportedFault" :portkey.aws.rds/storage-type-not-supported-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds/db-subnet-group-does-not-cover-enough-a-zs, "AuthorizationNotFoundFault" :portkey.aws.rds/authorization-not-found-fault, "InvalidSubnet" :portkey.aws.rds/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds/db-subnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds/provisioned-iops-not-available-in-az-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds/db-parameter-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds/storage-quota-exceeded-fault, "InvalidRestoreFault" :portkey.aws.rds/invalid-restore-fault, "BackupPolicyNotFoundFault" :portkey.aws.rds/backup-policy-not-found-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds/insufficient-db-instance-capacity-fault, "InvalidDBSnapshotStateFault" :portkey.aws.rds/invalid-db-snapshot-state-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds/db-snapshot-not-found-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef restore-db-instance-from-db-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds/restore-db-instance-from-db-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/restore-db-instance-from-db-snapshot-result))

(clojure.core/defn describe-db-snapshots "Returns information about DB snapshots. This API action supports pagination." ([] (describe-db-snapshots {})) ([describe-db-snapshots-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-snapshots-message describe-db-snapshots-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/db-snapshot-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-db-snapshots-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBSnapshotsResult", :http.request.configuration/action "DescribeDBSnapshots", :http.request.configuration/output-deser-fn response-db-snapshot-message, :http.request.spec/error-spec {"DBSnapshotNotFoundFault" :portkey.aws.rds/db-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-snapshots :args (clojure.spec.alpha/? :portkey.aws.rds/describe-db-snapshots-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/db-snapshot-message))

(clojure.core/defn delete-db-cluster-endpoint "Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster." ([delete-db-cluster-endpoint-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-db-cluster-endpoint-message delete-db-cluster-endpoint-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/db-cluster-endpoint, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/delete-db-cluster-endpoint-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteDBClusterEndpointResult", :http.request.configuration/action "DeleteDBClusterEndpoint", :http.request.configuration/output-deser-fn response-db-cluster-endpoint, :http.request.spec/error-spec {"InvalidDBClusterEndpointStateFault" :portkey.aws.rds/invalid-db-cluster-endpoint-state-fault, "DBClusterEndpointNotFoundFault" :portkey.aws.rds/db-cluster-endpoint-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invalid-db-cluster-state-fault}})))))
(clojure.spec.alpha/fdef delete-db-cluster-endpoint :args (clojure.spec.alpha/tuple :portkey.aws.rds/delete-db-cluster-endpoint-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/db-cluster-endpoint))

(clojure.core/defn describe-db-cluster-backtracks "Returns information about backtracks for a DB cluster.\n For more information on Amazon Aurora, see What Is Amazon Aurora?\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html)\nin the Amazon Aurora User Guide." ([describe-db-cluster-backtracks-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-cluster-backtracks-message describe-db-cluster-backtracks-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/db-cluster-backtrack-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-db-cluster-backtracks-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBClusterBacktracksResult", :http.request.configuration/action "DescribeDBClusterBacktracks", :http.request.configuration/output-deser-fn response-db-cluster-backtrack-message, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault, "DBClusterBacktrackNotFoundFault" :portkey.aws.rds/db-cluster-backtrack-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-backtracks :args (clojure.spec.alpha/tuple :portkey.aws.rds/describe-db-cluster-backtracks-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/db-cluster-backtrack-message))

(clojure.core/defn create-db-subnet-group "Creates a new DB subnet group. DB subnet groups must contain at least one subnet\nin at least two AZs in the AWS Region." ([create-db-subnet-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-db-subnet-group-message create-db-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/create-db-subnet-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/create-db-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBSubnetGroupResult", :http.request.configuration/action "CreateDBSubnetGroup", :http.request.configuration/output-deser-fn response-create-db-subnet-group-result, :http.request.spec/error-spec {"DBSubnetGroupAlreadyExistsFault" :portkey.aws.rds/db-subnet-group-already-exists-fault, "DBSubnetGroupQuotaExceededFault" :portkey.aws.rds/db-subnet-group-quota-exceeded-fault, "DBSubnetQuotaExceededFault" :portkey.aws.rds/db-subnet-quota-exceeded-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds/db-subnet-group-does-not-cover-enough-a-zs, "InvalidSubnet" :portkey.aws.rds/invalid-subnet}})))))
(clojure.spec.alpha/fdef create-db-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/create-db-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/create-db-subnet-group-result))

(clojure.core/defn remove-source-identifier-from-subscription "Removes a source identifier from an existing RDS event notification\nsubscription." ([remove-source-identifier-from-subscription-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-remove-source-identifier-from-subscription-message remove-source-identifier-from-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/remove-source-identifier-from-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/remove-source-identifier-from-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RemoveSourceIdentifierFromSubscriptionResult", :http.request.configuration/action "RemoveSourceIdentifierFromSubscription", :http.request.configuration/output-deser-fn response-remove-source-identifier-from-subscription-result, :http.request.spec/error-spec {"SubscriptionNotFoundFault" :portkey.aws.rds/subscription-not-found-fault, "SourceNotFoundFault" :portkey.aws.rds/source-not-found-fault}})))))
(clojure.spec.alpha/fdef remove-source-identifier-from-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds/remove-source-identifier-from-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/remove-source-identifier-from-subscription-result))

(clojure.core/defn create-option-group "Creates a new option group. You can create up to 20 option groups." ([create-option-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-option-group-message create-option-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/create-option-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/create-option-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateOptionGroupResult", :http.request.configuration/action "CreateOptionGroup", :http.request.configuration/output-deser-fn response-create-option-group-result, :http.request.spec/error-spec {"OptionGroupAlreadyExistsFault" :portkey.aws.rds/option-group-already-exists-fault, "OptionGroupQuotaExceededFault" :portkey.aws.rds/option-group-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef create-option-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/create-option-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/create-option-group-result))

(clojure.core/defn describe-db-cluster-parameters "Returns the detailed parameter list for a particular DB cluster parameter group.\n For more information on Amazon Aurora, see What Is Amazon Aurora?\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html)\nin the Amazon Aurora User Guide." ([describe-db-cluster-parameters-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-cluster-parameters-message describe-db-cluster-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/db-cluster-parameter-group-details, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-db-cluster-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBClusterParametersResult", :http.request.configuration/action "DescribeDBClusterParameters", :http.request.configuration/output-deser-fn response-db-cluster-parameter-group-details, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-parameters :args (clojure.spec.alpha/tuple :portkey.aws.rds/describe-db-cluster-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/db-cluster-parameter-group-details))

(clojure.core/defn describe-event-categories "Displays a list of categories for all event source types, or, if specified, for\na specified source type. You can see a list of the event categories and source\ntypes in the Events\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html) topic\nin the Amazon RDS User Guide." ([] (describe-event-categories {})) ([describe-event-categories-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-event-categories-message describe-event-categories-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/event-categories-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-event-categories-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEventCategoriesResult", :http.request.configuration/action "DescribeEventCategories", :http.request.configuration/output-deser-fn response-event-categories-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-event-categories :args (clojure.spec.alpha/? :portkey.aws.rds/describe-event-categories-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/event-categories-message))

(clojure.core/defn describe-account-attributes "Lists all of the attributes for a customer account. The attributes include\nAmazon RDS quotas for the account, such as the number of DB instances allowed.\nThe description for a quota includes the quota name, current usage toward that\nquota, and the quota's maximum value.\n This command doesn't take any parameters." ([] (describe-account-attributes {})) ([describe-account-attributes-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-account-attributes-message describe-account-attributes-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/account-attributes-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-account-attributes-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeAccountAttributesResult", :http.request.configuration/action "DescribeAccountAttributes", :http.request.configuration/output-deser-fn response-account-attributes-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-account-attributes :args (clojure.spec.alpha/? :portkey.aws.rds/describe-account-attributes-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/account-attributes-message))

(clojure.core/defn describe-engine-default-cluster-parameters "Returns the default engine and system parameter information for the cluster\ndatabase engine.\n For more information on Amazon Aurora, see What Is Amazon Aurora?\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html)\nin the Amazon Aurora User Guide." ([describe-engine-default-cluster-parameters-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-engine-default-cluster-parameters-message describe-engine-default-cluster-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/describe-engine-default-cluster-parameters-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-engine-default-cluster-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEngineDefaultClusterParametersResult", :http.request.configuration/action "DescribeEngineDefaultClusterParameters", :http.request.configuration/output-deser-fn response-describe-engine-default-cluster-parameters-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-engine-default-cluster-parameters :args (clojure.spec.alpha/tuple :portkey.aws.rds/describe-engine-default-cluster-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/describe-engine-default-cluster-parameters-result))

(clojure.core/defn describe-db-cluster-endpoints "Returns information about endpoints for an Amazon Aurora DB cluster." ([] (describe-db-cluster-endpoints {})) ([describe-db-cluster-endpoints-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-cluster-endpoints-message describe-db-cluster-endpoints-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/db-cluster-endpoint-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-db-cluster-endpoints-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBClusterEndpointsResult", :http.request.configuration/action "DescribeDBClusterEndpoints", :http.request.configuration/output-deser-fn response-db-cluster-endpoint-message, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-endpoints :args (clojure.spec.alpha/? :portkey.aws.rds/describe-db-cluster-endpoints-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/db-cluster-endpoint-message))

(clojure.core/defn modify-db-cluster "Modify a setting for an Amazon Aurora DB cluster. You can change one or more\ndatabase configuration parameters by specifying these parameters and the new\nvalues in the request. For more information on Amazon Aurora, see What Is Amazon\nAurora?\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html)\nin the Amazon Aurora User Guide." ([modify-db-cluster-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-db-cluster-message modify-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/modify-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/modify-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBClusterResult", :http.request.configuration/action "ModifyDBCluster", :http.request.configuration/output-deser-fn response-modify-db-cluster-result, :http.request.spec/error-spec {"DBClusterAlreadyExistsFault" :portkey.aws.rds/db-cluster-already-exists-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invalid-db-instance-state-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds/invalid-vpc-network-state-fault, "InvalidDBSubnetGroupStateFault" :portkey.aws.rds/invalid-db-subnet-group-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.rds/invalid-db-security-group-state-fault, "DBClusterParameterGroupNotFoundFault" :portkey.aws.rds/db-cluster-parameter-group-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.rds/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds/db-subnet-group-not-found-fault, "StorageQuotaExceededFault" :portkey.aws.rds/storage-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef modify-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds/modify-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/modify-db-cluster-result))

(clojure.core/defn remove-role-from-db-instance "Disassociates an AWS Identity and Access Management (IAM) role from a DB\ninstance." ([remove-role-from-db-instance-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-remove-role-from-db-instance-message remove-role-from-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/remove-role-from-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RemoveRoleFromDBInstance", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds/db-instance-not-found-fault, "DBInstanceRoleNotFoundFault" :portkey.aws.rds/db-instance-role-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef remove-role-from-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds/remove-role-from-db-instance-message) :ret clojure.core/true?)

(clojure.core/defn restore-db-cluster-from-s-3 "Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket.\nAmazon RDS must be authorized to access the Amazon S3 bucket and the data must\nbe created using the Percona XtraBackup utility as described in Migrating Data\nto an Amazon Aurora MySQL DB Cluster\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html)\nin the Amazon Aurora User Guide." ([restore-db-cluster-from-s-3-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-restore-db-cluster-from-s-3-message restore-db-cluster-from-s-3-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/restore-db-cluster-from-s-3-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/restore-db-cluster-from-s-3-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RestoreDBClusterFromS3Result", :http.request.configuration/action "RestoreDBClusterFromS3", :http.request.configuration/output-deser-fn response-restore-db-cluster-from-s-3-result, :http.request.spec/error-spec {"DBClusterAlreadyExistsFault" :portkey.aws.rds/db-cluster-already-exists-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds/invalid-vpc-network-state-fault, "InvalidDBSubnetGroupStateFault" :portkey.aws.rds/invalid-db-subnet-group-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault, "DBClusterParameterGroupNotFoundFault" :portkey.aws.rds/db-cluster-parameter-group-not-found-fault, "InsufficientStorageClusterCapacityFault" :portkey.aws.rds/insufficient-storage-cluster-capacity-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.rds/invalid-subnet, "DBClusterQuotaExceededFault" :portkey.aws.rds/db-cluster-quota-exceeded-fault, "InvalidS3BucketFault" :portkey.aws.rds/invalid-s-3-bucket-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds/db-subnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds/storage-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef restore-db-cluster-from-s-3 :args (clojure.spec.alpha/tuple :portkey.aws.rds/restore-db-cluster-from-s-3-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/restore-db-cluster-from-s-3-result))

(clojure.core/defn describe-reserved-db-instances-offerings "Lists available reserved DB instance offerings." ([] (describe-reserved-db-instances-offerings {})) ([describe-reserved-db-instances-offerings-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-reserved-db-instances-offerings-message describe-reserved-db-instances-offerings-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/reserved-db-instances-offering-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-reserved-db-instances-offerings-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeReservedDBInstancesOfferingsResult", :http.request.configuration/action "DescribeReservedDBInstancesOfferings", :http.request.configuration/output-deser-fn response-reserved-db-instances-offering-message, :http.request.spec/error-spec {"ReservedDBInstancesOfferingNotFoundFault" :portkey.aws.rds/reserved-db-instances-offering-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-reserved-db-instances-offerings :args (clojure.spec.alpha/? :portkey.aws.rds/describe-reserved-db-instances-offerings-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/reserved-db-instances-offering-message))

(clojure.core/defn describe-pending-maintenance-actions "Returns a list of resources (for example, DB instances) that have at least one\npending maintenance action." ([] (describe-pending-maintenance-actions {})) ([describe-pending-maintenance-actions-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-pending-maintenance-actions-message describe-pending-maintenance-actions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/pending-maintenance-actions-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-pending-maintenance-actions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribePendingMaintenanceActionsResult", :http.request.configuration/action "DescribePendingMaintenanceActions", :http.request.configuration/output-deser-fn response-pending-maintenance-actions-message, :http.request.spec/error-spec {"ResourceNotFoundFault" :portkey.aws.rds/resource-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-pending-maintenance-actions :args (clojure.spec.alpha/? :portkey.aws.rds/describe-pending-maintenance-actions-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/pending-maintenance-actions-message))

(clojure.core/defn modify-db-cluster-endpoint "Modifies the properties of an endpoint in an Amazon Aurora DB cluster." ([modify-db-cluster-endpoint-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-db-cluster-endpoint-message modify-db-cluster-endpoint-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/db-cluster-endpoint, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/modify-db-cluster-endpoint-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBClusterEndpointResult", :http.request.configuration/action "ModifyDBClusterEndpoint", :http.request.configuration/output-deser-fn response-db-cluster-endpoint, :http.request.spec/error-spec {"InvalidDBClusterStateFault" :portkey.aws.rds/invalid-db-cluster-state-fault, "InvalidDBClusterEndpointStateFault" :portkey.aws.rds/invalid-db-cluster-endpoint-state-fault, "DBClusterEndpointNotFoundFault" :portkey.aws.rds/db-cluster-endpoint-not-found-fault, "DBInstanceNotFoundFault" :portkey.aws.rds/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef modify-db-cluster-endpoint :args (clojure.spec.alpha/tuple :portkey.aws.rds/modify-db-cluster-endpoint-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/db-cluster-endpoint))

(clojure.core/defn create-db-cluster-endpoint "Creates a new custom endpoint and associates it with an Amazon Aurora DB\ncluster." ([create-db-cluster-endpoint-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-db-cluster-endpoint-message create-db-cluster-endpoint-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/db-cluster-endpoint, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/create-db-cluster-endpoint-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBClusterEndpointResult", :http.request.configuration/action "CreateDBClusterEndpoint", :http.request.configuration/output-deser-fn response-db-cluster-endpoint, :http.request.spec/error-spec {"DBClusterEndpointQuotaExceededFault" :portkey.aws.rds/db-cluster-endpoint-quota-exceeded-fault, "DBClusterEndpointAlreadyExistsFault" :portkey.aws.rds/db-cluster-endpoint-already-exists-fault, "DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invalid-db-cluster-state-fault, "DBInstanceNotFoundFault" :portkey.aws.rds/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef create-db-cluster-endpoint :args (clojure.spec.alpha/tuple :portkey.aws.rds/create-db-cluster-endpoint-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/db-cluster-endpoint))

(clojure.core/defn create-db-snapshot "Creates a DBSnapshot. The source DBInstance must be in \"available\" state." ([create-db-snapshot-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-db-snapshot-message create-db-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/create-db-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/create-db-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBSnapshotResult", :http.request.configuration/action "CreateDBSnapshot", :http.request.configuration/output-deser-fn response-create-db-snapshot-result, :http.request.spec/error-spec {"DBSnapshotAlreadyExistsFault" :portkey.aws.rds/db-snapshot-already-exists-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invalid-db-instance-state-fault, "DBInstanceNotFoundFault" :portkey.aws.rds/db-instance-not-found-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds/snapshot-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef create-db-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds/create-db-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/create-db-snapshot-result))

(clojure.core/defn download-db-log-file-portion "Downloads all or a portion of the specified log file, up to 1 MB in size." ([download-db-log-file-portion-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-download-db-log-file-portion-message download-db-log-file-portion-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/download-db-log-file-portion-details, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/download-db-log-file-portion-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DownloadDBLogFilePortionResult", :http.request.configuration/action "DownloadDBLogFilePortion", :http.request.configuration/output-deser-fn response-download-db-log-file-portion-details, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds/db-instance-not-found-fault, "DBLogFileNotFoundFault" :portkey.aws.rds/db-log-file-not-found-fault}})))))
(clojure.spec.alpha/fdef download-db-log-file-portion :args (clojure.spec.alpha/tuple :portkey.aws.rds/download-db-log-file-portion-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/download-db-log-file-portion-details))

(clojure.core/defn modify-db-snapshot-attribute "Adds an attribute and values to, or removes an attribute and values from, a\nmanual DB snapshot.\n To share a manual DB snapshot with other AWS accounts, specify restore as the\nAttributeName and use the ValuesToAdd parameter to add a list of IDs of the AWS\naccounts that are authorized to restore the manual DB snapshot. Uses the value\nall to make the manual DB snapshot public, which means it can be copied or\nrestored by all AWS accounts. Do not add the all value for any manual DB\nsnapshots that contain private information that you don't want available to all\nAWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only\nby specifying a list of authorized AWS account IDs for the ValuesToAdd\nparameter. You can't use all as a value for that parameter in this case.\n To view which AWS accounts have access to copy or restore a manual DB snapshot,\nor whether a manual DB snapshot public or private, use the\nDescribeDBSnapshotAttributes API action." ([modify-db-snapshot-attribute-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-db-snapshot-attribute-message modify-db-snapshot-attribute-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/modify-db-snapshot-attribute-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/modify-db-snapshot-attribute-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBSnapshotAttributeResult", :http.request.configuration/action "ModifyDBSnapshotAttribute", :http.request.configuration/output-deser-fn response-modify-db-snapshot-attribute-result, :http.request.spec/error-spec {"DBSnapshotNotFoundFault" :portkey.aws.rds/db-snapshot-not-found-fault, "InvalidDBSnapshotStateFault" :portkey.aws.rds/invalid-db-snapshot-state-fault, "SharedSnapshotQuotaExceededFault" :portkey.aws.rds/shared-snapshot-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef modify-db-snapshot-attribute :args (clojure.spec.alpha/tuple :portkey.aws.rds/modify-db-snapshot-attribute-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/modify-db-snapshot-attribute-result))

(clojure.core/defn describe-source-regions "Returns a list of the source AWS Regions where the current AWS Region can create\na Read Replica or copy a DB snapshot from. This API action supports pagination." ([] (describe-source-regions {})) ([describe-source-regions-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-source-regions-message describe-source-regions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/source-region-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-source-regions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeSourceRegionsResult", :http.request.configuration/action "DescribeSourceRegions", :http.request.configuration/output-deser-fn response-source-region-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-source-regions :args (clojure.spec.alpha/? :portkey.aws.rds/describe-source-regions-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/source-region-message))

(clojure.core/defn start-db-instance " Starts an Amazon RDS DB instance that was stopped using the AWS console, the\nstop-db-instance AWS CLI command, or the StopDBInstance action.\n For more information, see Starting an Amazon RDS DB instance That Was\nPreviously Stopped\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html)\nin the Amazon RDS User Guide.\n This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB\nclusters, use StartDBCluster instead." ([start-db-instance-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-start-db-instance-message start-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/start-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/start-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "StartDBInstanceResult", :http.request.configuration/action "StartDBInstance", :http.request.configuration/output-deser-fn response-start-db-instance-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invalid-db-instance-state-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds/invalid-vpc-network-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds/db-subnet-group-does-not-cover-enough-a-zs, "AuthorizationNotFoundFault" :portkey.aws.rds/authorization-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.rds/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds/db-subnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds/kms-key-not-accessible-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds/insufficient-db-instance-capacity-fault}})))))
(clojure.spec.alpha/fdef start-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds/start-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/start-db-instance-result))

(clojure.core/defn start-db-cluster "Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the\nstop-db-cluster AWS CLI command, or the StopDBCluster action.\n For more information, see Stopping and Starting an Aurora Cluster\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html)\nin the Amazon Aurora User Guide." ([start-db-cluster-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-start-db-cluster-message start-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/start-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/start-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "StartDBClusterResult", :http.request.configuration/action "StartDBCluster", :http.request.configuration/output-deser-fn response-start-db-cluster-result, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invalid-db-cluster-state-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef start-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds/start-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/start-db-cluster-result))

(clojure.core/defn describe-db-snapshot-attributes "Returns a list of DB snapshot attribute names and values for a manual DB\nsnapshot.\n When sharing snapshots with other AWS accounts, DescribeDBSnapshotAttributes\nreturns the restore attribute and a list of IDs for the AWS accounts that are\nauthorized to copy or restore the manual DB snapshot. If all is included in the\nlist of values for the restore attribute, then the manual DB snapshot is public\nand can be copied or restored by all AWS accounts.\n To add or remove access for an AWS account to copy or restore a manual DB\nsnapshot, or to make the manual DB snapshot public or private, use the\nModifyDBSnapshotAttribute API action." ([describe-db-snapshot-attributes-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-snapshot-attributes-message describe-db-snapshot-attributes-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/describe-db-snapshot-attributes-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-db-snapshot-attributes-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBSnapshotAttributesResult", :http.request.configuration/action "DescribeDBSnapshotAttributes", :http.request.configuration/output-deser-fn response-describe-db-snapshot-attributes-result, :http.request.spec/error-spec {"DBSnapshotNotFoundFault" :portkey.aws.rds/db-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-snapshot-attributes :args (clojure.spec.alpha/tuple :portkey.aws.rds/describe-db-snapshot-attributes-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/describe-db-snapshot-attributes-result))

(clojure.core/defn describe-db-instances "Returns information about provisioned RDS instances. This API supports\npagination." ([] (describe-db-instances {})) ([describe-db-instances-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-instances-message describe-db-instances-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/db-instance-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-db-instances-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBInstancesResult", :http.request.configuration/action "DescribeDBInstances", :http.request.configuration/output-deser-fn response-db-instance-message, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds/db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-instances :args (clojure.spec.alpha/? :portkey.aws.rds/describe-db-instances-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/db-instance-message))

(clojure.core/defn modify-event-subscription "Modifies an existing RDS event notification subscription. Note that you can't\nmodify the source identifiers using this call; to change source identifiers for\na subscription, use the AddSourceIdentifierToSubscription and\nRemoveSourceIdentifierFromSubscription calls.\n You can see a list of the event categories for a given SourceType in the Events\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html) topic\nin the Amazon RDS User Guide or by using the DescribeEventCategories action." ([modify-event-subscription-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-event-subscription-message modify-event-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/modify-event-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/modify-event-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyEventSubscriptionResult", :http.request.configuration/action "ModifyEventSubscription", :http.request.configuration/output-deser-fn response-modify-event-subscription-result, :http.request.spec/error-spec {"EventSubscriptionQuotaExceededFault" :portkey.aws.rds/event-subscription-quota-exceeded-fault, "SubscriptionNotFoundFault" :portkey.aws.rds/subscription-not-found-fault, "SNSInvalidTopicFault" :portkey.aws.rds/sns-invalid-topic-fault, "SNSNoAuthorizationFault" :portkey.aws.rds/sns-no-authorization-fault, "SNSTopicArnNotFoundFault" :portkey.aws.rds/sns-topic-arn-not-found-fault, "SubscriptionCategoryNotFoundFault" :portkey.aws.rds/subscription-category-not-found-fault}})))))
(clojure.spec.alpha/fdef modify-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds/modify-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/modify-event-subscription-result))

(clojure.core/defn describe-db-engine-versions "Returns a list of the available DB engines." ([] (describe-db-engine-versions {})) ([describe-db-engine-versions-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-engine-versions-message describe-db-engine-versions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/db-engine-version-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-db-engine-versions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBEngineVersionsResult", :http.request.configuration/action "DescribeDBEngineVersions", :http.request.configuration/output-deser-fn response-db-engine-version-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-db-engine-versions :args (clojure.spec.alpha/? :portkey.aws.rds/describe-db-engine-versions-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/db-engine-version-message))

(clojure.core/defn modify-db-cluster-parameter-group " Modifies the parameters of a DB cluster parameter group. To modify more than\none parameter, submit a list of the following: ParameterName, ParameterValue,\nand ApplyMethod. A maximum of 20 parameters can be modified in a single request.\n For more information on Amazon Aurora, see What Is Amazon Aurora?\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html)\nin the Amazon Aurora User Guide.\n Changes to dynamic parameters are applied immediately. Changes to static\nparameters require a reboot without failover to the DB cluster associated with\nthe parameter group before the change can take effect.\n After you create a DB cluster parameter group, you should wait at least 5\nminutes before creating your first DB cluster that uses that DB cluster\nparameter group as the default parameter group. This allows Amazon RDS to fully\ncomplete the create action before the parameter group is used as the default for\na new DB cluster. This is especially important for parameters that are critical\nwhen creating the default database for a DB cluster, such as the character set\nfor the default database defined by the character_set_database parameter. You\ncan use the Parameter Groups option of the Amazon RDS console\n(https://console.aws.amazon.com/rds/) or the DescribeDBClusterParameters command\nto verify that your DB cluster parameter group has been created or modified." ([modify-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-db-cluster-parameter-group-message modify-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/db-cluster-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/modify-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBClusterParameterGroupResult", :http.request.configuration/action "ModifyDBClusterParameterGroup", :http.request.configuration/output-deser-fn response-db-cluster-parameter-group-name-message, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds/db-parameter-group-not-found-fault, "InvalidDBParameterGroupStateFault" :portkey.aws.rds/invalid-db-parameter-group-state-fault}})))))
(clojure.spec.alpha/fdef modify-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/modify-db-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/db-cluster-parameter-group-name-message))

(clojure.core/defn describe-option-group-options "Describes all available options." ([describe-option-group-options-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-option-group-options-message describe-option-group-options-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/option-group-options-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-option-group-options-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeOptionGroupOptionsResult", :http.request.configuration/action "DescribeOptionGroupOptions", :http.request.configuration/output-deser-fn response-option-group-options-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-option-group-options :args (clojure.spec.alpha/tuple :portkey.aws.rds/describe-option-group-options-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/option-group-options-message))

(clojure.core/defn create-db-security-group "Creates a new DB security group. DB security groups control access to a DB\ninstance.\n A DB security group controls access to EC2-Classic DB instances that are not in\na VPC." ([create-db-security-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-db-security-group-message create-db-security-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/create-db-security-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/create-db-security-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBSecurityGroupResult", :http.request.configuration/action "CreateDBSecurityGroup", :http.request.configuration/output-deser-fn response-create-db-security-group-result, :http.request.spec/error-spec {"DBSecurityGroupAlreadyExistsFault" :portkey.aws.rds/db-security-group-already-exists-fault, "DBSecurityGroupQuotaExceededFault" :portkey.aws.rds/db-security-group-quota-exceeded-fault, "DBSecurityGroupNotSupportedFault" :portkey.aws.rds/db-security-group-not-supported-fault}})))))
(clojure.spec.alpha/fdef create-db-security-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/create-db-security-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/create-db-security-group-result))

(clojure.core/defn delete-option-group "Deletes an existing option group." ([delete-option-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-option-group-message delete-option-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/delete-option-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteOptionGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"OptionGroupNotFoundFault" :portkey.aws.rds/option-group-not-found-fault, "InvalidOptionGroupStateFault" :portkey.aws.rds/invalid-option-group-state-fault}})))))
(clojure.spec.alpha/fdef delete-option-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/delete-option-group-message) :ret clojure.core/true?)

(clojure.core/defn create-event-subscription "Creates an RDS event notification subscription. This action requires a topic ARN\n(Amazon Resource Name) created by either the RDS console, the SNS console, or\nthe SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS\nand subscribe to the topic. The ARN is displayed in the SNS console.\n You can specify the type of source (SourceType) you want to be notified of,\nprovide a list of RDS sources (SourceIds) that triggers the events, and provide\na list of event categories (EventCategories) for events you want to be notified\nof. For example, you can specify SourceType = db-instance, SourceIds =\nmydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.\n If you specify both the SourceType and SourceIds, such as SourceType =\ndb-instance and SourceIdentifier = myDBInstance1, you are notified of all the\ndb-instance events for the specified source. If you specify a SourceType but do\nnot specify a SourceIdentifier, you receive notice of the events for that source\ntype for all your RDS sources. If you do not specify either the SourceType nor\nthe SourceIdentifier, you are notified of events generated from all RDS sources\nbelonging to your customer account." ([create-event-subscription-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-event-subscription-message create-event-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/create-event-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/create-event-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateEventSubscriptionResult", :http.request.configuration/action "CreateEventSubscription", :http.request.configuration/output-deser-fn response-create-event-subscription-result, :http.request.spec/error-spec {"EventSubscriptionQuotaExceededFault" :portkey.aws.rds/event-subscription-quota-exceeded-fault, "SubscriptionAlreadyExistFault" :portkey.aws.rds/subscription-already-exist-fault, "SNSInvalidTopicFault" :portkey.aws.rds/sns-invalid-topic-fault, "SNSNoAuthorizationFault" :portkey.aws.rds/sns-no-authorization-fault, "SNSTopicArnNotFoundFault" :portkey.aws.rds/sns-topic-arn-not-found-fault, "SubscriptionCategoryNotFoundFault" :portkey.aws.rds/subscription-category-not-found-fault, "SourceNotFoundFault" :portkey.aws.rds/source-not-found-fault}})))))
(clojure.spec.alpha/fdef create-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.rds/create-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/create-event-subscription-result))

(clojure.core/defn modify-db-cluster-snapshot-attribute "Adds an attribute and values to, or removes an attribute and values from, a\nmanual DB cluster snapshot.\n To share a manual DB cluster snapshot with other AWS accounts, specify restore\nas the AttributeName and use the ValuesToAdd parameter to add a list of IDs of\nthe AWS accounts that are authorized to restore the manual DB cluster snapshot.\nUse the value all to make the manual DB cluster snapshot public, which means\nthat it can be copied or restored by all AWS accounts. Do not add the all value\nfor any manual DB cluster snapshots that contain private information that you\ndon't want available to all AWS accounts. If a manual DB cluster snapshot is\nencrypted, it can be shared, but only by specifying a list of authorized AWS\naccount IDs for the ValuesToAdd parameter. You can't use all as a value for that\nparameter in this case.\n To view which AWS accounts have access to copy or restore a manual DB cluster\nsnapshot, or whether a manual DB cluster snapshot public or private, use the\nDescribeDBClusterSnapshotAttributes API action." ([modify-db-cluster-snapshot-attribute-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-db-cluster-snapshot-attribute-message modify-db-cluster-snapshot-attribute-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/modify-db-cluster-snapshot-attribute-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/modify-db-cluster-snapshot-attribute-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBClusterSnapshotAttributeResult", :http.request.configuration/action "ModifyDBClusterSnapshotAttribute", :http.request.configuration/output-deser-fn response-modify-db-cluster-snapshot-attribute-result, :http.request.spec/error-spec {"DBClusterSnapshotNotFoundFault" :portkey.aws.rds/db-cluster-snapshot-not-found-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.rds/invalid-db-cluster-snapshot-state-fault, "SharedSnapshotQuotaExceededFault" :portkey.aws.rds/shared-snapshot-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef modify-db-cluster-snapshot-attribute :args (clojure.spec.alpha/tuple :portkey.aws.rds/modify-db-cluster-snapshot-attribute-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/modify-db-cluster-snapshot-attribute-result))

(clojure.core/defn stop-db-cluster " Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains\nthe DB cluster's metadata, including its endpoints and DB parameter groups.\nAurora also retains the transaction logs so you can do a point-in-time restore\nif necessary.\n For more information, see Stopping and Starting an Aurora Cluster\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html)\nin the Amazon Aurora User Guide." ([stop-db-cluster-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-stop-db-cluster-message stop-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/stop-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/stop-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "StopDBClusterResult", :http.request.configuration/action "StopDBCluster", :http.request.configuration/output-deser-fn response-stop-db-cluster-result, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invalid-db-cluster-state-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef stop-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds/stop-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/stop-db-cluster-result))

(clojure.core/defn backtrack-db-cluster "Backtracks a DB cluster to a specific time, without creating a new DB cluster.\n For more information on backtracking, see Backtracking an Aurora DB Cluster\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html)\nin the Amazon Aurora User Guide." ([backtrack-db-cluster-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-backtrack-db-cluster-message backtrack-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/db-cluster-backtrack, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/backtrack-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "BacktrackDBClusterResult", :http.request.configuration/action "BacktrackDBCluster", :http.request.configuration/output-deser-fn response-db-cluster-backtrack, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invalid-db-cluster-state-fault}})))))
(clojure.spec.alpha/fdef backtrack-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds/backtrack-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/db-cluster-backtrack))

(clojure.core/defn create-db-parameter-group "Creates a new DB parameter group.\n A DB parameter group is initially created with the default parameters for the\ndatabase engine used by the DB instance. To provide custom values for any of the\nparameters, you must modify the group after creating it using\nModifyDBParameterGroup. Once you've created a DB parameter group, you need to\nassociate it with your DB instance using ModifyDBInstance. When you associate a\nnew DB parameter group with a running DB instance, you need to reboot the DB\ninstance without failover for the new DB parameter group and associated settings\nto take effect.\n After you create a DB parameter group, you should wait at least 5 minutes\nbefore creating your first DB instance that uses that DB parameter group as the\ndefault parameter group. This allows Amazon RDS to fully complete the create\naction before the parameter group is used as the default for a new DB instance.\nThis is especially important for parameters that are critical when creating the\ndefault database for a DB instance, such as the character set for the default\ndatabase defined by the character_set_database parameter. You can use the\nParameter Groups option of the Amazon RDS console\n(https://console.aws.amazon.com/rds/) or the DescribeDBParameters command to\nverify that your DB parameter group has been created or modified." ([create-db-parameter-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-db-parameter-group-message create-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/create-db-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/create-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBParameterGroupResult", :http.request.configuration/action "CreateDBParameterGroup", :http.request.configuration/output-deser-fn response-create-db-parameter-group-result, :http.request.spec/error-spec {"DBParameterGroupQuotaExceededFault" :portkey.aws.rds/db-parameter-group-quota-exceeded-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.rds/db-parameter-group-already-exists-fault}})))))
(clojure.spec.alpha/fdef create-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/create-db-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/create-db-parameter-group-result))

(clojure.core/defn describe-valid-db-instance-modifications "You can call DescribeValidDBInstanceModifications to learn what modifications\nyou can make to your DB instance. You can use this information when you call\nModifyDBInstance." ([describe-valid-db-instance-modifications-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-valid-db-instance-modifications-message describe-valid-db-instance-modifications-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/describe-valid-db-instance-modifications-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-valid-db-instance-modifications-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeValidDBInstanceModificationsResult", :http.request.configuration/action "DescribeValidDBInstanceModifications", :http.request.configuration/output-deser-fn response-describe-valid-db-instance-modifications-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef describe-valid-db-instance-modifications :args (clojure.spec.alpha/tuple :portkey.aws.rds/describe-valid-db-instance-modifications-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/describe-valid-db-instance-modifications-result))

(clojure.core/defn add-role-to-db-instance "Associates an AWS Identity and Access Management (IAM) role with a DB instance." ([add-role-to-db-instance-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-add-role-to-db-instance-message add-role-to-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/add-role-to-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AddRoleToDBInstance", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds/db-instance-not-found-fault, "DBInstanceRoleAlreadyExistsFault" :portkey.aws.rds/db-instance-role-already-exists-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invalid-db-instance-state-fault, "DBInstanceRoleQuotaExceededFault" :portkey.aws.rds/db-instance-role-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef add-role-to-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds/add-role-to-db-instance-message) :ret clojure.core/true?)

(clojure.core/defn purchase-reserved-db-instances-offering "Purchases a reserved DB instance offering." ([purchase-reserved-db-instances-offering-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-purchase-reserved-db-instances-offering-message purchase-reserved-db-instances-offering-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/purchase-reserved-db-instances-offering-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/purchase-reserved-db-instances-offering-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "PurchaseReservedDBInstancesOfferingResult", :http.request.configuration/action "PurchaseReservedDBInstancesOffering", :http.request.configuration/output-deser-fn response-purchase-reserved-db-instances-offering-result, :http.request.spec/error-spec {"ReservedDBInstancesOfferingNotFoundFault" :portkey.aws.rds/reserved-db-instances-offering-not-found-fault, "ReservedDBInstanceAlreadyExistsFault" :portkey.aws.rds/reserved-db-instance-already-exists-fault, "ReservedDBInstanceQuotaExceededFault" :portkey.aws.rds/reserved-db-instance-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef purchase-reserved-db-instances-offering :args (clojure.spec.alpha/tuple :portkey.aws.rds/purchase-reserved-db-instances-offering-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/purchase-reserved-db-instances-offering-result))

(clojure.core/defn describe-db-cluster-snapshots "Returns information about DB cluster snapshots. This API action supports\npagination.\n For more information on Amazon Aurora, see What Is Amazon Aurora?\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html)\nin the Amazon Aurora User Guide." ([] (describe-db-cluster-snapshots {})) ([describe-db-cluster-snapshots-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-cluster-snapshots-message describe-db-cluster-snapshots-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/db-cluster-snapshot-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-db-cluster-snapshots-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBClusterSnapshotsResult", :http.request.configuration/action "DescribeDBClusterSnapshots", :http.request.configuration/output-deser-fn response-db-cluster-snapshot-message, :http.request.spec/error-spec {"DBClusterSnapshotNotFoundFault" :portkey.aws.rds/db-cluster-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-snapshots :args (clojure.spec.alpha/? :portkey.aws.rds/describe-db-cluster-snapshots-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/db-cluster-snapshot-message))

(clojure.core/defn describe-db-instance-automated-backups "Displays backups for both current and deleted instances. For example, use this\noperation to find details about automated backups for previously deleted\ninstances. Current instances with retention periods greater than zero (0) are\nreturned for both the DescribeDBInstanceAutomatedBackups and DescribeDBInstances\noperations.\n All parameters are optional." ([] (describe-db-instance-automated-backups {})) ([describe-db-instance-automated-backups-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-instance-automated-backups-message describe-db-instance-automated-backups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/db-instance-automated-backup-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-db-instance-automated-backups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBInstanceAutomatedBackupsResult", :http.request.configuration/action "DescribeDBInstanceAutomatedBackups", :http.request.configuration/output-deser-fn response-db-instance-automated-backup-message, :http.request.spec/error-spec {"DBInstanceAutomatedBackupNotFoundFault" :portkey.aws.rds/db-instance-automated-backup-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-instance-automated-backups :args (clojure.spec.alpha/? :portkey.aws.rds/describe-db-instance-automated-backups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/db-instance-automated-backup-message))

(clojure.core/defn delete-db-parameter-group "Deletes a specified DB parameter group. The DB parameter group to be deleted\ncan't be associated with any DB instances." ([delete-db-parameter-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-db-parameter-group-message delete-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/delete-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteDBParameterGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"InvalidDBParameterGroupStateFault" :portkey.aws.rds/invalid-db-parameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/delete-db-parameter-group-message) :ret clojure.core/true?)

(clojure.core/defn copy-db-snapshot "Copies the specified DB snapshot. The source DB snapshot must be in the\n\"available\" state.\n You can copy a snapshot from one AWS Region to another. In that case, the AWS\nRegion where you call the CopyDBSnapshot action is the destination AWS Region\nfor the DB snapshot copy.\n For more information about copying snapshots, see Copying a DB Snapshot\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html)\nin the Amazon RDS User Guide." ([copy-db-snapshot-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-copy-db-snapshot-message copy-db-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/copy-db-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/copy-db-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CopyDBSnapshotResult", :http.request.configuration/action "CopyDBSnapshot", :http.request.configuration/output-deser-fn response-copy-db-snapshot-result, :http.request.spec/error-spec {"DBSnapshotAlreadyExistsFault" :portkey.aws.rds/db-snapshot-already-exists-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds/db-snapshot-not-found-fault, "InvalidDBSnapshotStateFault" :portkey.aws.rds/invalid-db-snapshot-state-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds/snapshot-quota-exceeded-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds/kms-key-not-accessible-fault}})))))
(clojure.spec.alpha/fdef copy-db-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds/copy-db-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/copy-db-snapshot-result))

(clojure.core/defn describe-reserved-db-instances "Returns information about reserved DB instances for this account, or about a\nspecified reserved DB instance." ([] (describe-reserved-db-instances {})) ([describe-reserved-db-instances-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-reserved-db-instances-message describe-reserved-db-instances-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/reserved-db-instance-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-reserved-db-instances-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeReservedDBInstancesResult", :http.request.configuration/action "DescribeReservedDBInstances", :http.request.configuration/output-deser-fn response-reserved-db-instance-message, :http.request.spec/error-spec {"ReservedDBInstanceNotFoundFault" :portkey.aws.rds/reserved-db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-reserved-db-instances :args (clojure.spec.alpha/? :portkey.aws.rds/describe-reserved-db-instances-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/reserved-db-instance-message))

(clojure.core/defn describe-event-subscriptions "Lists all the subscription descriptions for a customer account. The description\nfor a subscription includes SubscriptionName, SNSTopicARN, CustomerID,\nSourceType, SourceID, CreationTime, and Status.\n If you specify a SubscriptionName, lists the description for that subscription." ([] (describe-event-subscriptions {})) ([describe-event-subscriptions-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-event-subscriptions-message describe-event-subscriptions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/event-subscriptions-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-event-subscriptions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEventSubscriptionsResult", :http.request.configuration/action "DescribeEventSubscriptions", :http.request.configuration/output-deser-fn response-event-subscriptions-message, :http.request.spec/error-spec {"SubscriptionNotFoundFault" :portkey.aws.rds/subscription-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-event-subscriptions :args (clojure.spec.alpha/? :portkey.aws.rds/describe-event-subscriptions-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/event-subscriptions-message))

(clojure.core/defn modify-db-instance "Modifies settings for a DB instance. You can change one or more database\nconfiguration parameters by specifying these parameters and the new values in\nthe request. To learn what modifications you can make to your DB instance, call\nDescribeValidDBInstanceModifications before you call ModifyDBInstance." ([modify-db-instance-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-db-instance-message modify-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/modify-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/modify-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBInstanceResult", :http.request.configuration/action "ModifyDBInstance", :http.request.configuration/output-deser-fn response-modify-db-instance-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds/db-instance-not-found-fault, "DomainNotFoundFault" :portkey.aws.rds/domain-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invalid-db-instance-state-fault, "OptionGroupNotFoundFault" :portkey.aws.rds/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds/db-instance-already-exists-fault, "CertificateNotFoundFault" :portkey.aws.rds/certificate-not-found-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.rds/invalid-db-security-group-state-fault, "StorageTypeNotSupportedFault" :portkey.aws.rds/storage-type-not-supported-fault, "AuthorizationNotFoundFault" :portkey.aws.rds/authorization-not-found-fault, "DBUpgradeDependencyFailureFault" :portkey.aws.rds/db-upgrade-dependency-failure-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds/provisioned-iops-not-available-in-az-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds/db-parameter-group-not-found-fault, "StorageQuotaExceededFault" :portkey.aws.rds/storage-quota-exceeded-fault, "BackupPolicyNotFoundFault" :portkey.aws.rds/backup-policy-not-found-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds/insufficient-db-instance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef modify-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.rds/modify-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/modify-db-instance-result))

(clojure.core/defn describe-db-cluster-parameter-groups " Returns a list of DBClusterParameterGroup descriptions. If a\nDBClusterParameterGroupName parameter is specified, the list will contain only\nthe description of the specified DB cluster parameter group.\n For more information on Amazon Aurora, see What Is Amazon Aurora?\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html)\nin the Amazon Aurora User Guide." ([] (describe-db-cluster-parameter-groups {})) ([describe-db-cluster-parameter-groups-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-cluster-parameter-groups-message describe-db-cluster-parameter-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/db-cluster-parameter-groups-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-db-cluster-parameter-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBClusterParameterGroupsResult", :http.request.configuration/action "DescribeDBClusterParameterGroups", :http.request.configuration/output-deser-fn response-db-cluster-parameter-groups-message, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-parameter-groups :args (clojure.spec.alpha/? :portkey.aws.rds/describe-db-cluster-parameter-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/db-cluster-parameter-groups-message))

(clojure.core/defn create-db-cluster-snapshot "Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see\nWhat Is Amazon Aurora?\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html)\nin the Amazon Aurora User Guide." ([create-db-cluster-snapshot-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-db-cluster-snapshot-message create-db-cluster-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/create-db-cluster-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/create-db-cluster-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBClusterSnapshotResult", :http.request.configuration/action "CreateDBClusterSnapshot", :http.request.configuration/output-deser-fn response-create-db-cluster-snapshot-result, :http.request.spec/error-spec {"DBClusterSnapshotAlreadyExistsFault" :portkey.aws.rds/db-cluster-snapshot-already-exists-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invalid-db-cluster-state-fault, "DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds/snapshot-quota-exceeded-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.rds/invalid-db-cluster-snapshot-state-fault}})))))
(clojure.spec.alpha/fdef create-db-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds/create-db-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/create-db-cluster-snapshot-result))

(clojure.core/defn describe-db-parameters "Returns the detailed parameter list for a particular DB parameter group." ([describe-db-parameters-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-parameters-message describe-db-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/db-parameter-group-details, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-db-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBParametersResult", :http.request.configuration/action "DescribeDBParameters", :http.request.configuration/output-deser-fn response-db-parameter-group-details, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-parameters :args (clojure.spec.alpha/tuple :portkey.aws.rds/describe-db-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/db-parameter-group-details))

(clojure.core/defn modify-option-group "Modifies an existing option group." ([modify-option-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-option-group-message modify-option-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/modify-option-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/modify-option-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyOptionGroupResult", :http.request.configuration/action "ModifyOptionGroup", :http.request.configuration/output-deser-fn response-modify-option-group-result, :http.request.spec/error-spec {"InvalidOptionGroupStateFault" :portkey.aws.rds/invalid-option-group-state-fault, "OptionGroupNotFoundFault" :portkey.aws.rds/option-group-not-found-fault}})))))
(clojure.spec.alpha/fdef modify-option-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/modify-option-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/modify-option-group-result))

(clojure.core/defn describe-db-parameter-groups " Returns a list of DBParameterGroup descriptions. If a DBParameterGroupName is\nspecified, the list will contain only the description of the specified DB\nparameter group." ([] (describe-db-parameter-groups {})) ([describe-db-parameter-groups-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-parameter-groups-message describe-db-parameter-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/db-parameter-groups-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-db-parameter-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBParameterGroupsResult", :http.request.configuration/action "DescribeDBParameterGroups", :http.request.configuration/output-deser-fn response-db-parameter-groups-message, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-parameter-groups :args (clojure.spec.alpha/? :portkey.aws.rds/describe-db-parameter-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/db-parameter-groups-message))

(clojure.core/defn remove-tags-from-resource "Removes metadata tags from an Amazon RDS resource.\n For an overview on tagging an Amazon RDS resource, see Tagging Amazon RDS\nResources\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html) in\nthe Amazon RDS User Guide." ([remove-tags-from-resource-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-remove-tags-from-resource-message remove-tags-from-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/remove-tags-from-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RemoveTagsFromResource", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds/db-instance-not-found-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds/db-snapshot-not-found-fault, "DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef remove-tags-from-resource :args (clojure.spec.alpha/tuple :portkey.aws.rds/remove-tags-from-resource-message) :ret clojure.core/true?)

(clojure.core/defn copy-db-cluster-snapshot "Copies a snapshot of a DB cluster.\n To copy a DB cluster snapshot from a shared manual DB cluster snapshot,\nSourceDBClusterSnapshotIdentifier must be the Amazon Resource Name (ARN) of the\nshared DB cluster snapshot.\n You can copy an encrypted DB cluster snapshot from another AWS Region. In that\ncase, the AWS Region where you call the CopyDBClusterSnapshot action is the\ndestination AWS Region for the encrypted DB cluster snapshot to be copied to. To\ncopy an encrypted DB cluster snapshot from another AWS Region, you must provide\nthe following values:\n * KmsKeyId - The AWS Key Management System (AWS KMS) key identifier for the key\nto use to encrypt the copy of the DB cluster snapshot in the destination AWS\nRegion.\n * PreSignedUrl - A URL that contains a Signature Version 4 signed request for\nthe CopyDBClusterSnapshot action to be called in the source AWS Region where the\nDB cluster snapshot is copied from. The pre-signed URL must be a valid request\nfor the CopyDBClusterSnapshot API action that can be executed in the source AWS\nRegion that contains the encrypted DB cluster snapshot to be copied.\n The pre-signed URL request must contain the following parameter values:\n * KmsKeyId - The KMS key identifier for the key to use to encrypt the copy of\nthe DB cluster snapshot in the destination AWS Region. This is the same\nidentifier for both the CopyDBClusterSnapshot action that is called in the\ndestination AWS Region, and the action contained in the pre-signed URL.\n * DestinationRegion - The name of the AWS Region that the DB cluster snapshot\nwill be created in.\n * SourceDBClusterSnapshotIdentifier - The DB cluster snapshot identifier for\nthe encrypted DB cluster snapshot to be copied. This identifier must be in the\nAmazon Resource Name (ARN) format for the source AWS Region. For example, if you\nare copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then\nyour SourceDBClusterSnapshotIdentifier looks like the following example:\narn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115.\n To learn how to generate a Signature Version 4 signed request, see\nAuthenticating Requests: Using Query Parameters (AWS Signature Version 4)\n(http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html)\nand Signature Version 4 Signing Process\n(http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html).\n * TargetDBClusterSnapshotIdentifier - The identifier for the new copy of the DB\ncluster snapshot in the destination AWS Region.\n * SourceDBClusterSnapshotIdentifier - The DB cluster snapshot identifier for\nthe encrypted DB cluster snapshot to be copied. This identifier must be in the\nARN format for the source AWS Region and is the same value as the\nSourceDBClusterSnapshotIdentifier in the pre-signed URL.\n To cancel the copy operation once it is in progress, delete the target DB\ncluster snapshot identified by TargetDBClusterSnapshotIdentifier while that DB\ncluster snapshot is in \"copying\" status.\n For more information on copying encrypted DB cluster snapshots from one AWS\nRegion to another, see Copying a Snapshot\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html)\nin the Amazon Aurora User Guide.\n For more information on Amazon Aurora, see What Is Amazon Aurora?\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html)\nin the Amazon Aurora User Guide." ([copy-db-cluster-snapshot-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-copy-db-cluster-snapshot-message copy-db-cluster-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/copy-db-cluster-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/copy-db-cluster-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CopyDBClusterSnapshotResult", :http.request.configuration/action "CopyDBClusterSnapshot", :http.request.configuration/output-deser-fn response-copy-db-cluster-snapshot-result, :http.request.spec/error-spec {"DBClusterSnapshotAlreadyExistsFault" :portkey.aws.rds/db-cluster-snapshot-already-exists-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.rds/db-cluster-snapshot-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invalid-db-cluster-state-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.rds/invalid-db-cluster-snapshot-state-fault, "SnapshotQuotaExceededFault" :portkey.aws.rds/snapshot-quota-exceeded-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds/kms-key-not-accessible-fault}})))))
(clojure.spec.alpha/fdef copy-db-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds/copy-db-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/copy-db-cluster-snapshot-result))

(clojure.core/defn delete-db-cluster-parameter-group "Deletes a specified DB cluster parameter group. The DB cluster parameter group\nto be deleted can't be associated with any DB clusters.\n For more information on Amazon Aurora, see What Is Amazon Aurora?\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html)\nin the Amazon Aurora User Guide." ([delete-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-db-cluster-parameter-group-message delete-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/delete-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteDBClusterParameterGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"InvalidDBParameterGroupStateFault" :portkey.aws.rds/invalid-db-parameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/delete-db-cluster-parameter-group-message) :ret clojure.core/true?)

(clojure.core/defn add-role-to-db-cluster "Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB\ncluster. For more information, see Authorizing Amazon Aurora MySQL to Access\nOther AWS Services on Your Behalf\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html)\nin the Amazon Aurora User Guide." ([add-role-to-db-cluster-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-add-role-to-db-cluster-message add-role-to-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/add-role-to-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AddRoleToDBCluster", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault, "DBClusterRoleAlreadyExistsFault" :portkey.aws.rds/db-cluster-role-already-exists-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invalid-db-cluster-state-fault, "DBClusterRoleQuotaExceededFault" :portkey.aws.rds/db-cluster-role-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef add-role-to-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds/add-role-to-db-cluster-message) :ret clojure.core/true?)

(clojure.core/defn modify-current-db-cluster-capacity "Set the capacity of an Aurora Serverless DB cluster to a specific value.\n Aurora Serverless scales seamlessly based on the workload on the DB cluster. In\nsome cases, the capacity might not scale fast enough to meet a sudden change in\nworkload, such as a large number of new transactions. Call\nModifyCurrentDBClusterCapacity to set the capacity explicitly.\n After this call sets the DB cluster capacity, Aurora Serverless can\nautomatically scale the DB cluster based on the cooldown period for scaling up\nand the cooldown period for scaling down.\n For more information about Aurora Serverless, see Using Amazon Aurora\nServerless\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html)\nin the Amazon Aurora User Guide.\n If you call ModifyCurrentDBClusterCapacity with the default TimeoutAction,\nconnections that prevent Aurora Serverless from finding a scaling point might be\ndropped. For more information about scaling points, see Autoscaling for Aurora\nServerless\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling)\nin the Amazon Aurora User Guide." ([modify-current-db-cluster-capacity-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-current-db-cluster-capacity-message modify-current-db-cluster-capacity-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/db-cluster-capacity-info, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/modify-current-db-cluster-capacity-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyCurrentDBClusterCapacityResult", :http.request.configuration/action "ModifyCurrentDBClusterCapacity", :http.request.configuration/output-deser-fn response-db-cluster-capacity-info, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invalid-db-cluster-state-fault, "InvalidDBClusterCapacityFault" :portkey.aws.rds/invalid-db-cluster-capacity-fault}})))))
(clojure.spec.alpha/fdef modify-current-db-cluster-capacity :args (clojure.spec.alpha/tuple :portkey.aws.rds/modify-current-db-cluster-capacity-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/db-cluster-capacity-info))

(clojure.core/defn copy-option-group "Copies the specified option group." ([copy-option-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-copy-option-group-message copy-option-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/copy-option-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/copy-option-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CopyOptionGroupResult", :http.request.configuration/action "CopyOptionGroup", :http.request.configuration/output-deser-fn response-copy-option-group-result, :http.request.spec/error-spec {"OptionGroupAlreadyExistsFault" :portkey.aws.rds/option-group-already-exists-fault, "OptionGroupNotFoundFault" :portkey.aws.rds/option-group-not-found-fault, "OptionGroupQuotaExceededFault" :portkey.aws.rds/option-group-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef copy-option-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/copy-option-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/copy-option-group-result))

(clojure.core/defn promote-read-replica-db-cluster "Promotes a Read Replica DB cluster to a standalone DB cluster." ([promote-read-replica-db-cluster-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-promote-read-replica-db-cluster-message promote-read-replica-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/promote-read-replica-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/promote-read-replica-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "PromoteReadReplicaDBClusterResult", :http.request.configuration/action "PromoteReadReplicaDBCluster", :http.request.configuration/output-deser-fn response-promote-read-replica-db-cluster-result, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.rds/invalid-db-cluster-state-fault}})))))
(clojure.spec.alpha/fdef promote-read-replica-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds/promote-read-replica-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/promote-read-replica-db-cluster-result))

(clojure.core/defn add-tags-to-resource "Adds metadata tags to an Amazon RDS resource. These tags can also be used with\ncost allocation reporting to track cost associated with Amazon RDS resources, or\nused in a Condition statement in an IAM policy for Amazon RDS.\n For an overview on tagging Amazon RDS resources, see Tagging Amazon RDS\nResources\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html)." ([add-tags-to-resource-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-add-tags-to-resource-message add-tags-to-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/add-tags-to-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AddTagsToResource", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds/db-instance-not-found-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds/db-snapshot-not-found-fault, "DBClusterNotFoundFault" :portkey.aws.rds/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef add-tags-to-resource :args (clojure.spec.alpha/tuple :portkey.aws.rds/add-tags-to-resource-message) :ret clojure.core/true?)

(clojure.core/defn restore-db-cluster-from-snapshot "Creates a new DB cluster from a DB snapshot or DB cluster snapshot.\n If a DB snapshot is specified, the target DB cluster is created from the source\nDB snapshot with a default configuration and default security group.\n If a DB cluster snapshot is specified, the target DB cluster is created from\nthe source DB cluster restore point with the same configuration as the original\nsource DB cluster, except that the new DB cluster is created with the default\nsecurity group.\n For more information on Amazon Aurora, see What Is Amazon Aurora?\n(http://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html)\nin the Amazon Aurora User Guide." ([restore-db-cluster-from-snapshot-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-restore-db-cluster-from-snapshot-message restore-db-cluster-from-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/restore-db-cluster-from-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/restore-db-cluster-from-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RestoreDBClusterFromSnapshotResult", :http.request.configuration/action "RestoreDBClusterFromSnapshot", :http.request.configuration/output-deser-fn response-restore-db-cluster-from-snapshot-result, :http.request.spec/error-spec {"DBClusterAlreadyExistsFault" :portkey.aws.rds/db-cluster-already-exists-fault, "OptionGroupNotFoundFault" :portkey.aws.rds/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds/invalid-vpc-network-state-fault, "DBClusterParameterGroupNotFoundFault" :portkey.aws.rds/db-cluster-parameter-group-not-found-fault, "InsufficientStorageClusterCapacityFault" :portkey.aws.rds/insufficient-storage-cluster-capacity-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.rds/db-cluster-snapshot-not-found-fault, "InvalidSubnet" :portkey.aws.rds/invalid-subnet, "DBClusterQuotaExceededFault" :portkey.aws.rds/db-cluster-quota-exceeded-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.rds/db-subnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds/kms-key-not-accessible-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.rds/invalid-db-cluster-snapshot-state-fault, "StorageQuotaExceededFault" :portkey.aws.rds/storage-quota-exceeded-fault, "InvalidRestoreFault" :portkey.aws.rds/invalid-restore-fault, "InsufficientDBClusterCapacityFault" :portkey.aws.rds/insufficient-db-cluster-capacity-fault, "InvalidDBSnapshotStateFault" :portkey.aws.rds/invalid-db-snapshot-state-fault, "DBSnapshotNotFoundFault" :portkey.aws.rds/db-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef restore-db-cluster-from-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.rds/restore-db-cluster-from-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/restore-db-cluster-from-snapshot-result))

(clojure.core/defn modify-db-parameter-group " Modifies the parameters of a DB parameter group. To modify more than one\nparameter, submit a list of the following: ParameterName, ParameterValue, and\nApplyMethod. A maximum of 20 parameters can be modified in a single request.\n Changes to dynamic parameters are applied immediately. Changes to static\nparameters require a reboot without failover to the DB instance associated with\nthe parameter group before the change can take effect.\n After you modify a DB parameter group, you should wait at least 5 minutes\nbefore creating your first DB instance that uses that DB parameter group as the\ndefault parameter group. This allows Amazon RDS to fully complete the modify\naction before the parameter group is used as the default for a new DB instance.\nThis is especially important for parameters that are critical when creating the\ndefault database for a DB instance, such as the character set for the default\ndatabase defined by the character_set_database parameter. You can use the\nParameter Groups option of the Amazon RDS console\n(https://console.aws.amazon.com/rds/) or the DescribeDBParameters command to\nverify that your DB parameter group has been created or modified." ([modify-db-parameter-group-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-modify-db-parameter-group-message modify-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/db-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/modify-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBParameterGroupResult", :http.request.configuration/action "ModifyDBParameterGroup", :http.request.configuration/output-deser-fn response-db-parameter-group-name-message, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.rds/db-parameter-group-not-found-fault, "InvalidDBParameterGroupStateFault" :portkey.aws.rds/invalid-db-parameter-group-state-fault}})))))
(clojure.spec.alpha/fdef modify-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.rds/modify-db-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/db-parameter-group-name-message))

(clojure.core/defn describe-db-cluster-snapshot-attributes "Returns a list of DB cluster snapshot attribute names and values for a manual DB\ncluster snapshot.\n When sharing snapshots with other AWS accounts,\nDescribeDBClusterSnapshotAttributes returns the restore attribute and a list of\nIDs for the AWS accounts that are authorized to copy or restore the manual DB\ncluster snapshot. If all is included in the list of values for the restore\nattribute, then the manual DB cluster snapshot is public and can be copied or\nrestored by all AWS accounts.\n To add or remove access for an AWS account to copy or restore a manual DB\ncluster snapshot, or to make the manual DB cluster snapshot public or private,\nuse the ModifyDBClusterSnapshotAttribute API action." ([describe-db-cluster-snapshot-attributes-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-cluster-snapshot-attributes-message describe-db-cluster-snapshot-attributes-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/describe-db-cluster-snapshot-attributes-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-db-cluster-snapshot-attributes-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBClusterSnapshotAttributesResult", :http.request.configuration/action "DescribeDBClusterSnapshotAttributes", :http.request.configuration/output-deser-fn response-describe-db-cluster-snapshot-attributes-result, :http.request.spec/error-spec {"DBClusterSnapshotNotFoundFault" :portkey.aws.rds/db-cluster-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-snapshot-attributes :args (clojure.spec.alpha/tuple :portkey.aws.rds/describe-db-cluster-snapshot-attributes-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/describe-db-cluster-snapshot-attributes-result))

(clojure.core/defn describe-db-security-groups " Returns a list of DBSecurityGroup descriptions. If a DBSecurityGroupName is\nspecified, the list will contain only the descriptions of the specified DB\nsecurity group." ([] (describe-db-security-groups {})) ([describe-db-security-groups-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-describe-db-security-groups-message describe-db-security-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/db-security-group-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/describe-db-security-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBSecurityGroupsResult", :http.request.configuration/action "DescribeDBSecurityGroups", :http.request.configuration/output-deser-fn response-db-security-group-message, :http.request.spec/error-spec {"DBSecurityGroupNotFoundFault" :portkey.aws.rds/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-security-groups :args (clojure.spec.alpha/? :portkey.aws.rds/describe-db-security-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/db-security-group-message))

(clojure.core/defn delete-global-cluster " Deletes a global database cluster. The primary and secondary clusters must\nalready be detached or destroyed first." ([delete-global-cluster-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-global-cluster-message delete-global-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/delete-global-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/delete-global-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteGlobalClusterResult", :http.request.configuration/action "DeleteGlobalCluster", :http.request.configuration/output-deser-fn response-delete-global-cluster-result, :http.request.spec/error-spec {"GlobalClusterNotFoundFault" :portkey.aws.rds/global-cluster-not-found-fault, "InvalidGlobalClusterStateFault" :portkey.aws.rds/invalid-global-cluster-state-fault}})))))
(clojure.spec.alpha/fdef delete-global-cluster :args (clojure.spec.alpha/tuple :portkey.aws.rds/delete-global-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/delete-global-cluster-result))

(clojure.core/defn create-db-instance-read-replica "Creates a new DB instance that acts as a Read Replica for an existing source DB\ninstance. You can create a Read Replica for a DB instance running MySQL,\nMariaDB, or PostgreSQL. For more information, see Working with PostgreSQL,\nMySQL, and MariaDB Read Replicas\n(http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html) in\nthe Amazon RDS User Guide.\n Amazon Aurora doesn't support this action. You must call the CreateDBInstance\naction to create a DB instance for an Aurora DB cluster.\n All Read Replica DB instances are created with backups disabled. All other DB\ninstance attributes (including DB security groups and DB parameter groups) are\ninherited from the source DB instance, except as specified following.\n Your source DB instance must have backup retention enabled." ([create-db-instance-read-replica-messageinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-db-instance-read-replica-message create-db-instance-read-replica-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.rds/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.rds/create-db-instance-read-replica-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "RDS", :http.request.spec/input-spec :portkey.aws.rds/create-db-instance-read-replica-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBInstanceReadReplicaResult", :http.request.configuration/action "CreateDBInstanceReadReplica", :http.request.configuration/output-deser-fn response-create-db-instance-read-replica-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.rds/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.rds/invalid-db-instance-state-fault, "InstanceQuotaExceededFault" :portkey.aws.rds/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.rds/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.rds/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.rds/db-instance-already-exists-fault, "InvalidDBSubnetGroupFault" :portkey.aws.rds/invalid-db-subnet-group-fault, "StorageTypeNotSupportedFault" :portkey.aws.rds/storage-type-not-supported-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.rds/db-subnet-group-does-not-cover-enough-a-zs, "InvalidSubnet" :portkey.aws.rds/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.rds/db-subnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.rds/provisioned-iops-not-available-in-az-fault, "DBSubnetGroupNotAllowedFault" :portkey.aws.rds/db-subnet-group-not-allowed-fault, "DBParameterGroupNotFoundFault" :portkey.aws.rds/db-parameter-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.rds/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.rds/storage-quota-exceeded-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.rds/insufficient-db-instance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.rds/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef create-db-instance-read-replica :args (clojure.spec.alpha/tuple :portkey.aws.rds/create-db-instance-read-replica-message) :ret (clojure.spec.alpha/and :portkey.aws.rds/create-db-instance-read-replica-result))
