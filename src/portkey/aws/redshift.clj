(ns portkey.aws.redshift (:require [portkey.aws]))

(def
 endpoints
 '{"ap-northeast-1"
   {:credential-scope {:service "redshift", :region "ap-northeast-1"},
    :ssl-common-name "redshift.ap-northeast-1.amazonaws.com",
    :endpoint "https://redshift.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "redshift", :region "eu-west-1"},
    :ssl-common-name "redshift.eu-west-1.amazonaws.com",
    :endpoint "https://redshift.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "redshift", :region "us-east-2"},
    :ssl-common-name "redshift.us-east-2.amazonaws.com",
    :endpoint "https://redshift.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope {:service "redshift", :region "ap-southeast-2"},
    :ssl-common-name "redshift.ap-southeast-2.amazonaws.com",
    :endpoint "https://redshift.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "cn-north-1"
   {:credential-scope {:service "redshift", :region "cn-north-1"},
    :ssl-common-name "redshift.cn-north-1.amazonaws.com.cn",
    :endpoint "https://redshift.cn-north-1.amazonaws.com.cn",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "redshift", :region "sa-east-1"},
    :ssl-common-name "redshift.sa-east-1.amazonaws.com",
    :endpoint "https://redshift.sa-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope {:service "redshift", :region "ap-southeast-1"},
    :ssl-common-name "redshift.ap-southeast-1.amazonaws.com",
    :endpoint "https://redshift.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "cn-northwest-1"
   {:credential-scope {:service "redshift", :region "cn-northwest-1"},
    :ssl-common-name "redshift.cn-northwest-1.amazonaws.com.cn",
    :endpoint "https://redshift.cn-northwest-1.amazonaws.com.cn",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope {:service "redshift", :region "ap-northeast-2"},
    :ssl-common-name "redshift.ap-northeast-2.amazonaws.com",
    :endpoint "https://redshift.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-west-3"
   {:credential-scope {:service "redshift", :region "eu-west-3"},
    :ssl-common-name "redshift.eu-west-3.amazonaws.com",
    :endpoint "https://redshift.eu-west-3.amazonaws.com",
    :signature-version :v4},
   "ca-central-1"
   {:credential-scope {:service "redshift", :region "ca-central-1"},
    :ssl-common-name "redshift.ca-central-1.amazonaws.com",
    :endpoint "https://redshift.ca-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "redshift", :region "eu-central-1"},
    :ssl-common-name "redshift.eu-central-1.amazonaws.com",
    :endpoint "https://redshift.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "redshift", :region "eu-west-2"},
    :ssl-common-name "redshift.eu-west-2.amazonaws.com",
    :endpoint "https://redshift.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-gov-west-1"
   {:credential-scope {:service "redshift", :region "us-gov-west-1"},
    :ssl-common-name "redshift.us-gov-west-1.amazonaws.com",
    :endpoint "https://redshift.us-gov-west-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "redshift", :region "us-west-2"},
    :ssl-common-name "redshift.us-west-2.amazonaws.com",
    :endpoint "https://redshift.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "redshift", :region "us-east-1"},
    :ssl-common-name "redshift.us-east-1.amazonaws.com",
    :endpoint "https://redshift.us-east-1.amazonaws.com",
    :signature-version :v4},
   "us-west-1"
   {:credential-scope {:service "redshift", :region "us-west-1"},
    :ssl-common-name "redshift.us-west-1.amazonaws.com",
    :endpoint "https://redshift.us-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-south-1"
   {:credential-scope {:service "redshift", :region "ap-south-1"},
    :ssl-common-name "redshift.ap-south-1.amazonaws.com",
    :endpoint "https://redshift.ap-south-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-subnet-identifier-list ser-parameters-list ser-tag-value-list ser-source-ids-list ser-parameter-apply-type ser-source-type ser-tag-list ser-tag-key-list ser-integer ser-iam-role-arn-list ser-string ser-parameter ser-vpc-security-group-id-list ser-tstamp ser-event-categories-list ser-tag ser-boolean-optional ser-cluster-security-group-name-list ser-db-group-list ser-integer-optional ser-boolean)

(clojure.core/defn- ser-subnet-identifier-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-parameters-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-tag-value-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-source-ids-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-parameter-apply-type [shape-input] ({"static" "static", :static "static", "dynamic" "dynamic", :dynamic "dynamic"} shape-input))
(clojure.core/defn- ser-source-type [shape-input] ({"cluster" "cluster", :cluster "cluster", "cluster-parameter-group" "cluster-parameter-group", :cluster-parameter-group "cluster-parameter-group", "cluster-security-group" "cluster-security-group", :cluster-security-group "cluster-security-group", "cluster-snapshot" "cluster-snapshot", :cluster-snapshot "cluster-snapshot"} shape-input))
(clojure.core/defn- ser-tag-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-tag-key-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-integer [shape-input] shape-input)
(clojure.core/defn- ser-iam-role-arn-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-string [shape-input] shape-input)
(clojure.core/defn- ser-parameter [shape-input] (clojure.core/cond-> {} (:data-type shape-input) (clojure.core/assoc "Parameter.DataType" (ser-string (:data-type shape-input))) (:parameter-name shape-input) (clojure.core/assoc "Parameter.ParameterName" (ser-string (:parameter-name shape-input))) (:source shape-input) (clojure.core/assoc "Parameter.Source" (ser-string (:source shape-input))) (:minimum-engine-version shape-input) (clojure.core/assoc "Parameter.MinimumEngineVersion" (ser-string (:minimum-engine-version shape-input))) (:allowed-values shape-input) (clojure.core/assoc "Parameter.AllowedValues" (ser-string (:allowed-values shape-input))) (:apply-type shape-input) (clojure.core/assoc "Parameter.ApplyType" (ser-parameter-apply-type (:apply-type shape-input))) (:description shape-input) (clojure.core/assoc "Parameter.Description" (ser-string (:description shape-input))) (:is-modifiable shape-input) (clojure.core/assoc "Parameter.IsModifiable" (ser-boolean (:is-modifiable shape-input))) (:parameter-value shape-input) (clojure.core/assoc "Parameter.ParameterValue" (ser-string (:parameter-value shape-input)))))
(clojure.core/defn- ser-vpc-security-group-id-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-tstamp [shape-input] shape-input)
(clojure.core/defn- ser-event-categories-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-tag [shape-input] (clojure.core/cond-> {} (:key shape-input) (clojure.core/assoc "Tag.Key" (ser-string (:key shape-input))) (:value shape-input) (clojure.core/assoc "Tag.Value" (ser-string (:value shape-input)))))
(clojure.core/defn- ser-boolean-optional [shape-input] shape-input)
(clojure.core/defn- ser-cluster-security-group-name-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-db-group-list [shape-input] (clojure.core/into {} (clojure.core/map-indexed (clojure.core/fn [idx__36486__auto__ item__36487__auto__] [(clojure.core/str "member." (clojure.core/inc idx__36486__auto__)) item__36487__auto__]) shape-input)))
(clojure.core/defn- ser-integer-optional [shape-input] shape-input)
(clojure.core/defn- ser-boolean [shape-input] shape-input)

(clojure.core/defn req<-describe-cluster-parameters-message [action-name72914 input72913] (clojure.core/let [input72915 {:body {"ParameterGroupName" (ser-string (input72913 :parameter-group-name)), "Version" "2012-12-01", "Action" action-name72914}}] (clojure.core/cond-> input72915 (clojure.core/contains? input72913 :source) (clojure.core/assoc-in [:body "Source"] (ser-string (input72913 :source))) (clojure.core/contains? input72913 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input72913 :max-records))) (clojure.core/contains? input72913 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input72913 :marker))))))
(clojure.core/defn req<-enable-snapshot-copy-message [action-name72917 input72916] (clojure.core/let [input72918 {:body {"ClusterIdentifier" (ser-string (input72916 :cluster-identifier)), "DestinationRegion" (ser-string (input72916 :destination-region)), "Version" "2012-12-01", "Action" action-name72917}}] (clojure.core/cond-> input72918 (clojure.core/contains? input72916 :retention-period) (clojure.core/assoc-in [:body "RetentionPeriod"] (ser-integer-optional (input72916 :retention-period))) (clojure.core/contains? input72916 :snapshot-copy-grant-name) (clojure.core/assoc-in [:body "SnapshotCopyGrantName"] (ser-string (input72916 :snapshot-copy-grant-name))))))
(clojure.core/defn req<-disable-snapshot-copy-message [action-name72920 input72919] {:body {"ClusterIdentifier" (ser-string (input72919 :cluster-identifier)), "Version" "2012-12-01", "Action" action-name72920}})
(clojure.core/defn req<-create-cluster-message [action-name72922 input72921] (clojure.core/let [input72923 {:body {"ClusterIdentifier" (ser-string (input72921 :cluster-identifier)), "MasterUserPassword" (ser-string (input72921 :master-user-password)), "MasterUsername" (ser-string (input72921 :master-username)), "NodeType" (ser-string (input72921 :node-type)), "Version" "2012-12-01", "Action" action-name72922}}] (clojure.core/cond-> input72923 (clojure.core/contains? input72921 :enhanced-vpc-routing) (clojure.core/assoc-in [:body "EnhancedVpcRouting"] (ser-boolean-optional (input72921 :enhanced-vpc-routing))) (clojure.core/contains? input72921 :publicly-accessible) (clojure.core/assoc-in [:body "PubliclyAccessible"] (ser-boolean-optional (input72921 :publicly-accessible))) (clojure.core/contains? input72921 :preferred-maintenance-window) (clojure.core/assoc-in [:body "PreferredMaintenanceWindow"] (ser-string (input72921 :preferred-maintenance-window))) (clojure.core/contains? input72921 :encrypted) (clojure.core/assoc-in [:body "Encrypted"] (ser-boolean-optional (input72921 :encrypted))) (clojure.core/contains? input72921 :hsm-client-certificate-identifier) (clojure.core/assoc-in [:body "HsmClientCertificateIdentifier"] (ser-string (input72921 :hsm-client-certificate-identifier))) (clojure.core/contains? input72921 :cluster-subnet-group-name) (clojure.core/assoc-in [:body "ClusterSubnetGroupName"] (ser-string (input72921 :cluster-subnet-group-name))) (clojure.core/contains? input72921 :number-of-nodes) (clojure.core/assoc-in [:body "NumberOfNodes"] (ser-integer-optional (input72921 :number-of-nodes))) (clojure.core/contains? input72921 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input72921 :tags))) (clojure.core/contains? input72921 :dbname) (clojure.core/assoc-in [:body "DBName"] (ser-string (input72921 :dbname))) (clojure.core/contains? input72921 :vpc-security-group-ids) (clojure.core/assoc-in [:body "VpcSecurityGroupIds"] (ser-vpc-security-group-id-list (input72921 :vpc-security-group-ids))) (clojure.core/contains? input72921 :availability-zone) (clojure.core/assoc-in [:body "AvailabilityZone"] (ser-string (input72921 :availability-zone))) (clojure.core/contains? input72921 :cluster-type) (clojure.core/assoc-in [:body "ClusterType"] (ser-string (input72921 :cluster-type))) (clojure.core/contains? input72921 :cluster-security-groups) (clojure.core/assoc-in [:body "ClusterSecurityGroups"] (ser-cluster-security-group-name-list (input72921 :cluster-security-groups))) (clojure.core/contains? input72921 :additional-info) (clojure.core/assoc-in [:body "AdditionalInfo"] (ser-string (input72921 :additional-info))) (clojure.core/contains? input72921 :elastic-ip) (clojure.core/assoc-in [:body "ElasticIp"] (ser-string (input72921 :elastic-ip))) (clojure.core/contains? input72921 :hsm-configuration-identifier) (clojure.core/assoc-in [:body "HsmConfigurationIdentifier"] (ser-string (input72921 :hsm-configuration-identifier))) (clojure.core/contains? input72921 :port) (clojure.core/assoc-in [:body "Port"] (ser-integer-optional (input72921 :port))) (clojure.core/contains? input72921 :kms-key-id) (clojure.core/assoc-in [:body "KmsKeyId"] (ser-string (input72921 :kms-key-id))) (clojure.core/contains? input72921 :allow-version-upgrade) (clojure.core/assoc-in [:body "AllowVersionUpgrade"] (ser-boolean-optional (input72921 :allow-version-upgrade))) (clojure.core/contains? input72921 :cluster-version) (clojure.core/assoc-in [:body "ClusterVersion"] (ser-string (input72921 :cluster-version))) (clojure.core/contains? input72921 :automated-snapshot-retention-period) (clojure.core/assoc-in [:body "AutomatedSnapshotRetentionPeriod"] (ser-integer-optional (input72921 :automated-snapshot-retention-period))) (clojure.core/contains? input72921 :iam-roles) (clojure.core/assoc-in [:body "IamRoles"] (ser-iam-role-arn-list (input72921 :iam-roles))) (clojure.core/contains? input72921 :cluster-parameter-group-name) (clojure.core/assoc-in [:body "ClusterParameterGroupName"] (ser-string (input72921 :cluster-parameter-group-name))))))
(clojure.core/defn req<-describe-cluster-snapshots-message [action-name72925 input72924] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name72925}} (clojure.core/contains? input72924 :tag-keys) (clojure.core/assoc-in [:body "TagKeys"] (ser-tag-key-list (input72924 :tag-keys))) (clojure.core/contains? input72924 :tag-values) (clojure.core/assoc-in [:body "TagValues"] (ser-tag-value-list (input72924 :tag-values))) (clojure.core/contains? input72924 :snapshot-identifier) (clojure.core/assoc-in [:body "SnapshotIdentifier"] (ser-string (input72924 :snapshot-identifier))) (clojure.core/contains? input72924 :end-time) (clojure.core/assoc-in [:body "EndTime"] (ser-tstamp (input72924 :end-time))) (clojure.core/contains? input72924 :start-time) (clojure.core/assoc-in [:body "StartTime"] (ser-tstamp (input72924 :start-time))) (clojure.core/contains? input72924 :owner-account) (clojure.core/assoc-in [:body "OwnerAccount"] (ser-string (input72924 :owner-account))) (clojure.core/contains? input72924 :cluster-identifier) (clojure.core/assoc-in [:body "ClusterIdentifier"] (ser-string (input72924 :cluster-identifier))) (clojure.core/contains? input72924 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input72924 :max-records))) (clojure.core/contains? input72924 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input72924 :marker))) (clojure.core/contains? input72924 :snapshot-type) (clojure.core/assoc-in [:body "SnapshotType"] (ser-string (input72924 :snapshot-type))) (clojure.core/contains? input72924 :cluster-exists) (clojure.core/assoc-in [:body "ClusterExists"] (ser-boolean-optional (input72924 :cluster-exists)))))
(clojure.core/defn req<-create-hsm-client-certificate-message [action-name72927 input72926] (clojure.core/let [input72928 {:body {"HsmClientCertificateIdentifier" (ser-string (input72926 :hsm-client-certificate-identifier)), "Version" "2012-12-01", "Action" action-name72927}}] (clojure.core/cond-> input72928 (clojure.core/contains? input72926 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input72926 :tags))))))
(clojure.core/defn req<-delete-tags-message [action-name72930 input72929] {:body {"ResourceName" (ser-string (input72929 :resource-name)), "TagKeys" (ser-tag-key-list (input72929 :tag-keys)), "Version" "2012-12-01", "Action" action-name72930}})
(clojure.core/defn req<-describe-cluster-subnet-groups-message [action-name72932 input72931] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name72932}} (clojure.core/contains? input72931 :cluster-subnet-group-name) (clojure.core/assoc-in [:body "ClusterSubnetGroupName"] (ser-string (input72931 :cluster-subnet-group-name))) (clojure.core/contains? input72931 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input72931 :max-records))) (clojure.core/contains? input72931 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input72931 :marker))) (clojure.core/contains? input72931 :tag-keys) (clojure.core/assoc-in [:body "TagKeys"] (ser-tag-key-list (input72931 :tag-keys))) (clojure.core/contains? input72931 :tag-values) (clojure.core/assoc-in [:body "TagValues"] (ser-tag-value-list (input72931 :tag-values)))))
(clojure.core/defn req<-delete-cluster-subnet-group-message [action-name72934 input72933] {:body {"ClusterSubnetGroupName" (ser-string (input72933 :cluster-subnet-group-name)), "Version" "2012-12-01", "Action" action-name72934}})
(clojure.core/defn req<-describe-events-message [action-name72936 input72935] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name72936}} (clojure.core/contains? input72935 :source-identifier) (clojure.core/assoc-in [:body "SourceIdentifier"] (ser-string (input72935 :source-identifier))) (clojure.core/contains? input72935 :source-type) (clojure.core/assoc-in [:body "SourceType"] (ser-source-type (input72935 :source-type))) (clojure.core/contains? input72935 :start-time) (clojure.core/assoc-in [:body "StartTime"] (ser-tstamp (input72935 :start-time))) (clojure.core/contains? input72935 :end-time) (clojure.core/assoc-in [:body "EndTime"] (ser-tstamp (input72935 :end-time))) (clojure.core/contains? input72935 :duration) (clojure.core/assoc-in [:body "Duration"] (ser-integer-optional (input72935 :duration))) (clojure.core/contains? input72935 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input72935 :max-records))) (clojure.core/contains? input72935 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input72935 :marker)))))
(clojure.core/defn req<-rotate-encryption-key-message [action-name72938 input72937] {:body {"ClusterIdentifier" (ser-string (input72937 :cluster-identifier)), "Version" "2012-12-01", "Action" action-name72938}})
(clojure.core/defn req<-describe-hsm-configurations-message [action-name72940 input72939] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name72940}} (clojure.core/contains? input72939 :hsm-configuration-identifier) (clojure.core/assoc-in [:body "HsmConfigurationIdentifier"] (ser-string (input72939 :hsm-configuration-identifier))) (clojure.core/contains? input72939 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input72939 :max-records))) (clojure.core/contains? input72939 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input72939 :marker))) (clojure.core/contains? input72939 :tag-keys) (clojure.core/assoc-in [:body "TagKeys"] (ser-tag-key-list (input72939 :tag-keys))) (clojure.core/contains? input72939 :tag-values) (clojure.core/assoc-in [:body "TagValues"] (ser-tag-value-list (input72939 :tag-values)))))
(clojure.core/defn req<-revoke-snapshot-access-message [action-name72942 input72941] (clojure.core/let [input72943 {:body {"SnapshotIdentifier" (ser-string (input72941 :snapshot-identifier)), "AccountWithRestoreAccess" (ser-string (input72941 :account-with-restore-access)), "Version" "2012-12-01", "Action" action-name72942}}] (clojure.core/cond-> input72943 (clojure.core/contains? input72941 :snapshot-cluster-identifier) (clojure.core/assoc-in [:body "SnapshotClusterIdentifier"] (ser-string (input72941 :snapshot-cluster-identifier))))))
(clojure.core/defn req<-create-tags-message [action-name72945 input72944] {:body {"ResourceName" (ser-string (input72944 :resource-name)), "Tags" (ser-tag-list (input72944 :tags)), "Version" "2012-12-01", "Action" action-name72945}})
(clojure.core/defn req<-restore-from-cluster-snapshot-message [action-name72947 input72946] (clojure.core/let [input72948 {:body {"SnapshotIdentifier" (ser-string (input72946 :snapshot-identifier)), "ClusterIdentifier" (ser-string (input72946 :cluster-identifier)), "Version" "2012-12-01", "Action" action-name72947}}] (clojure.core/cond-> input72948 (clojure.core/contains? input72946 :enhanced-vpc-routing) (clojure.core/assoc-in [:body "EnhancedVpcRouting"] (ser-boolean-optional (input72946 :enhanced-vpc-routing))) (clojure.core/contains? input72946 :publicly-accessible) (clojure.core/assoc-in [:body "PubliclyAccessible"] (ser-boolean-optional (input72946 :publicly-accessible))) (clojure.core/contains? input72946 :preferred-maintenance-window) (clojure.core/assoc-in [:body "PreferredMaintenanceWindow"] (ser-string (input72946 :preferred-maintenance-window))) (clojure.core/contains? input72946 :owner-account) (clojure.core/assoc-in [:body "OwnerAccount"] (ser-string (input72946 :owner-account))) (clojure.core/contains? input72946 :hsm-client-certificate-identifier) (clojure.core/assoc-in [:body "HsmClientCertificateIdentifier"] (ser-string (input72946 :hsm-client-certificate-identifier))) (clojure.core/contains? input72946 :cluster-subnet-group-name) (clojure.core/assoc-in [:body "ClusterSubnetGroupName"] (ser-string (input72946 :cluster-subnet-group-name))) (clojure.core/contains? input72946 :vpc-security-group-ids) (clojure.core/assoc-in [:body "VpcSecurityGroupIds"] (ser-vpc-security-group-id-list (input72946 :vpc-security-group-ids))) (clojure.core/contains? input72946 :availability-zone) (clojure.core/assoc-in [:body "AvailabilityZone"] (ser-string (input72946 :availability-zone))) (clojure.core/contains? input72946 :cluster-security-groups) (clojure.core/assoc-in [:body "ClusterSecurityGroups"] (ser-cluster-security-group-name-list (input72946 :cluster-security-groups))) (clojure.core/contains? input72946 :additional-info) (clojure.core/assoc-in [:body "AdditionalInfo"] (ser-string (input72946 :additional-info))) (clojure.core/contains? input72946 :elastic-ip) (clojure.core/assoc-in [:body "ElasticIp"] (ser-string (input72946 :elastic-ip))) (clojure.core/contains? input72946 :hsm-configuration-identifier) (clojure.core/assoc-in [:body "HsmConfigurationIdentifier"] (ser-string (input72946 :hsm-configuration-identifier))) (clojure.core/contains? input72946 :port) (clojure.core/assoc-in [:body "Port"] (ser-integer-optional (input72946 :port))) (clojure.core/contains? input72946 :kms-key-id) (clojure.core/assoc-in [:body "KmsKeyId"] (ser-string (input72946 :kms-key-id))) (clojure.core/contains? input72946 :allow-version-upgrade) (clojure.core/assoc-in [:body "AllowVersionUpgrade"] (ser-boolean-optional (input72946 :allow-version-upgrade))) (clojure.core/contains? input72946 :automated-snapshot-retention-period) (clojure.core/assoc-in [:body "AutomatedSnapshotRetentionPeriod"] (ser-integer-optional (input72946 :automated-snapshot-retention-period))) (clojure.core/contains? input72946 :iam-roles) (clojure.core/assoc-in [:body "IamRoles"] (ser-iam-role-arn-list (input72946 :iam-roles))) (clojure.core/contains? input72946 :node-type) (clojure.core/assoc-in [:body "NodeType"] (ser-string (input72946 :node-type))) (clojure.core/contains? input72946 :snapshot-cluster-identifier) (clojure.core/assoc-in [:body "SnapshotClusterIdentifier"] (ser-string (input72946 :snapshot-cluster-identifier))) (clojure.core/contains? input72946 :cluster-parameter-group-name) (clojure.core/assoc-in [:body "ClusterParameterGroupName"] (ser-string (input72946 :cluster-parameter-group-name))))))
(clojure.core/defn req<-modify-cluster-parameter-group-message [action-name72950 input72949] {:body {"ParameterGroupName" (ser-string (input72949 :parameter-group-name)), "Parameters" (ser-parameters-list (input72949 :parameters)), "Version" "2012-12-01", "Action" action-name72950}})
(clojure.core/defn req<-describe-table-restore-status-message [action-name72952 input72951] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name72952}} (clojure.core/contains? input72951 :cluster-identifier) (clojure.core/assoc-in [:body "ClusterIdentifier"] (ser-string (input72951 :cluster-identifier))) (clojure.core/contains? input72951 :table-restore-request-id) (clojure.core/assoc-in [:body "TableRestoreRequestId"] (ser-string (input72951 :table-restore-request-id))) (clojure.core/contains? input72951 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input72951 :max-records))) (clojure.core/contains? input72951 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input72951 :marker)))))
(clojure.core/defn req<-revoke-cluster-security-group-ingress-message [action-name72954 input72953] (clojure.core/let [input72955 {:body {"ClusterSecurityGroupName" (ser-string (input72953 :cluster-security-group-name)), "Version" "2012-12-01", "Action" action-name72954}}] (clojure.core/cond-> input72955 (clojure.core/contains? input72953 :cidrip) (clojure.core/assoc-in [:body "CIDRIP"] (ser-string (input72953 :cidrip))) (clojure.core/contains? input72953 :ec2-security-group-name) (clojure.core/assoc-in [:body "EC2SecurityGroupName"] (ser-string (input72953 :ec2-security-group-name))) (clojure.core/contains? input72953 :ec2-security-group-owner-id) (clojure.core/assoc-in [:body "EC2SecurityGroupOwnerId"] (ser-string (input72953 :ec2-security-group-owner-id))))))
(clojure.core/defn req<-create-cluster-snapshot-message [action-name72957 input72956] (clojure.core/let [input72958 {:body {"SnapshotIdentifier" (ser-string (input72956 :snapshot-identifier)), "ClusterIdentifier" (ser-string (input72956 :cluster-identifier)), "Version" "2012-12-01", "Action" action-name72957}}] (clojure.core/cond-> input72958 (clojure.core/contains? input72956 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input72956 :tags))))))
(clojure.core/defn req<-create-hsm-configuration-message [action-name72960 input72959] (clojure.core/let [input72961 {:body {"HsmConfigurationIdentifier" (ser-string (input72959 :hsm-configuration-identifier)), "Description" (ser-string (input72959 :description)), "HsmIpAddress" (ser-string (input72959 :hsm-ip-address)), "HsmPartitionName" (ser-string (input72959 :hsm-partition-name)), "HsmPartitionPassword" (ser-string (input72959 :hsm-partition-password)), "HsmServerPublicCertificate" (ser-string (input72959 :hsm-server-public-certificate)), "Version" "2012-12-01", "Action" action-name72960}}] (clojure.core/cond-> input72961 (clojure.core/contains? input72959 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input72959 :tags))))))
(clojure.core/defn req<-delete-hsm-client-certificate-message [action-name72963 input72962] {:body {"HsmClientCertificateIdentifier" (ser-string (input72962 :hsm-client-certificate-identifier)), "Version" "2012-12-01", "Action" action-name72963}})
(clojure.core/defn req<-describe-clusters-message [action-name72965 input72964] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name72965}} (clojure.core/contains? input72964 :cluster-identifier) (clojure.core/assoc-in [:body "ClusterIdentifier"] (ser-string (input72964 :cluster-identifier))) (clojure.core/contains? input72964 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input72964 :max-records))) (clojure.core/contains? input72964 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input72964 :marker))) (clojure.core/contains? input72964 :tag-keys) (clojure.core/assoc-in [:body "TagKeys"] (ser-tag-key-list (input72964 :tag-keys))) (clojure.core/contains? input72964 :tag-values) (clojure.core/assoc-in [:body "TagValues"] (ser-tag-value-list (input72964 :tag-values)))))
(clojure.core/defn req<-disable-logging-message [action-name72967 input72966] {:body {"ClusterIdentifier" (ser-string (input72966 :cluster-identifier)), "Version" "2012-12-01", "Action" action-name72967}})
(clojure.core/defn req<-delete-cluster-snapshot-message [action-name72969 input72968] (clojure.core/let [input72970 {:body {"SnapshotIdentifier" (ser-string (input72968 :snapshot-identifier)), "Version" "2012-12-01", "Action" action-name72969}}] (clojure.core/cond-> input72970 (clojure.core/contains? input72968 :snapshot-cluster-identifier) (clojure.core/assoc-in [:body "SnapshotClusterIdentifier"] (ser-string (input72968 :snapshot-cluster-identifier))))))
(clojure.core/defn req<-create-snapshot-copy-grant-message [action-name72972 input72971] (clojure.core/let [input72973 {:body {"SnapshotCopyGrantName" (ser-string (input72971 :snapshot-copy-grant-name)), "Version" "2012-12-01", "Action" action-name72972}}] (clojure.core/cond-> input72973 (clojure.core/contains? input72971 :kms-key-id) (clojure.core/assoc-in [:body "KmsKeyId"] (ser-string (input72971 :kms-key-id))) (clojure.core/contains? input72971 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input72971 :tags))))))
(clojure.core/defn req<-describe-tags-message [action-name72975 input72974] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name72975}} (clojure.core/contains? input72974 :resource-name) (clojure.core/assoc-in [:body "ResourceName"] (ser-string (input72974 :resource-name))) (clojure.core/contains? input72974 :resource-type) (clojure.core/assoc-in [:body "ResourceType"] (ser-string (input72974 :resource-type))) (clojure.core/contains? input72974 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input72974 :max-records))) (clojure.core/contains? input72974 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input72974 :marker))) (clojure.core/contains? input72974 :tag-keys) (clojure.core/assoc-in [:body "TagKeys"] (ser-tag-key-list (input72974 :tag-keys))) (clojure.core/contains? input72974 :tag-values) (clojure.core/assoc-in [:body "TagValues"] (ser-tag-value-list (input72974 :tag-values)))))
(clojure.core/defn req<-modify-snapshot-copy-retention-period-message [action-name72977 input72976] {:body {"ClusterIdentifier" (ser-string (input72976 :cluster-identifier)), "RetentionPeriod" (ser-integer (input72976 :retention-period)), "Version" "2012-12-01", "Action" action-name72977}})
(clojure.core/defn req<-delete-event-subscription-message [action-name72979 input72978] {:body {"SubscriptionName" (ser-string (input72978 :subscription-name)), "Version" "2012-12-01", "Action" action-name72979}})
(clojure.core/defn req<-describe-default-cluster-parameters-message [action-name72981 input72980] (clojure.core/let [input72982 {:body {"ParameterGroupFamily" (ser-string (input72980 :parameter-group-family)), "Version" "2012-12-01", "Action" action-name72981}}] (clojure.core/cond-> input72982 (clojure.core/contains? input72980 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input72980 :max-records))) (clojure.core/contains? input72980 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input72980 :marker))))))
(clojure.core/defn req<-copy-cluster-snapshot-message [action-name72984 input72983] (clojure.core/let [input72985 {:body {"SourceSnapshotIdentifier" (ser-string (input72983 :source-snapshot-identifier)), "TargetSnapshotIdentifier" (ser-string (input72983 :target-snapshot-identifier)), "Version" "2012-12-01", "Action" action-name72984}}] (clojure.core/cond-> input72985 (clojure.core/contains? input72983 :source-snapshot-cluster-identifier) (clojure.core/assoc-in [:body "SourceSnapshotClusterIdentifier"] (ser-string (input72983 :source-snapshot-cluster-identifier))))))
(clojure.core/defn req<-get-cluster-credentials-message [action-name72987 input72986] (clojure.core/let [input72988 {:body {"DbUser" (ser-string (input72986 :db-user)), "ClusterIdentifier" (ser-string (input72986 :cluster-identifier)), "Version" "2012-12-01", "Action" action-name72987}}] (clojure.core/cond-> input72988 (clojure.core/contains? input72986 :db-name) (clojure.core/assoc-in [:body "DbName"] (ser-string (input72986 :db-name))) (clojure.core/contains? input72986 :duration-seconds) (clojure.core/assoc-in [:body "DurationSeconds"] (ser-integer-optional (input72986 :duration-seconds))) (clojure.core/contains? input72986 :auto-create) (clojure.core/assoc-in [:body "AutoCreate"] (ser-boolean-optional (input72986 :auto-create))) (clojure.core/contains? input72986 :db-groups) (clojure.core/assoc-in [:body "DbGroups"] (ser-db-group-list (input72986 :db-groups))))))
(clojure.core/defn req<-restore-table-from-cluster-snapshot-message [action-name72990 input72989] (clojure.core/let [input72991 {:body {"ClusterIdentifier" (ser-string (input72989 :cluster-identifier)), "SnapshotIdentifier" (ser-string (input72989 :snapshot-identifier)), "SourceDatabaseName" (ser-string (input72989 :source-database-name)), "SourceTableName" (ser-string (input72989 :source-table-name)), "NewTableName" (ser-string (input72989 :new-table-name)), "Version" "2012-12-01", "Action" action-name72990}}] (clojure.core/cond-> input72991 (clojure.core/contains? input72989 :source-schema-name) (clojure.core/assoc-in [:body "SourceSchemaName"] (ser-string (input72989 :source-schema-name))) (clojure.core/contains? input72989 :target-database-name) (clojure.core/assoc-in [:body "TargetDatabaseName"] (ser-string (input72989 :target-database-name))) (clojure.core/contains? input72989 :target-schema-name) (clojure.core/assoc-in [:body "TargetSchemaName"] (ser-string (input72989 :target-schema-name))))))
(clojure.core/defn req<-reset-cluster-parameter-group-message [action-name72993 input72992] (clojure.core/let [input72994 {:body {"ParameterGroupName" (ser-string (input72992 :parameter-group-name)), "Version" "2012-12-01", "Action" action-name72993}}] (clojure.core/cond-> input72994 (clojure.core/contains? input72992 :reset-all-parameters) (clojure.core/assoc-in [:body "ResetAllParameters"] (ser-boolean (input72992 :reset-all-parameters))) (clojure.core/contains? input72992 :parameters) (clojure.core/assoc-in [:body "Parameters"] (ser-parameters-list (input72992 :parameters))))))
(clojure.core/defn req<-enable-logging-message [action-name72996 input72995] (clojure.core/let [input72997 {:body {"ClusterIdentifier" (ser-string (input72995 :cluster-identifier)), "BucketName" (ser-string (input72995 :bucket-name)), "Version" "2012-12-01", "Action" action-name72996}}] (clojure.core/cond-> input72997 (clojure.core/contains? input72995 :s3-key-prefix) (clojure.core/assoc-in [:body "S3KeyPrefix"] (ser-string (input72995 :s3-key-prefix))))))
(clojure.core/defn req<-describe-event-categories-message [action-name72999 input72998] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name72999}} (clojure.core/contains? input72998 :source-type) (clojure.core/assoc-in [:body "SourceType"] (ser-string (input72998 :source-type)))))
(clojure.core/defn req<-describe-cluster-versions-message [action-name73001 input73000] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name73001}} (clojure.core/contains? input73000 :cluster-version) (clojure.core/assoc-in [:body "ClusterVersion"] (ser-string (input73000 :cluster-version))) (clojure.core/contains? input73000 :cluster-parameter-group-family) (clojure.core/assoc-in [:body "ClusterParameterGroupFamily"] (ser-string (input73000 :cluster-parameter-group-family))) (clojure.core/contains? input73000 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input73000 :max-records))) (clojure.core/contains? input73000 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input73000 :marker)))))
(clojure.core/defn req<-describe-reserved-nodes-message [action-name73003 input73002] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name73003}} (clojure.core/contains? input73002 :reserved-node-id) (clojure.core/assoc-in [:body "ReservedNodeId"] (ser-string (input73002 :reserved-node-id))) (clojure.core/contains? input73002 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input73002 :max-records))) (clojure.core/contains? input73002 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input73002 :marker)))))
(clojure.core/defn req<-modify-cluster-message [action-name73005 input73004] (clojure.core/let [input73006 {:body {"ClusterIdentifier" (ser-string (input73004 :cluster-identifier)), "Version" "2012-12-01", "Action" action-name73005}}] (clojure.core/cond-> input73006 (clojure.core/contains? input73004 :enhanced-vpc-routing) (clojure.core/assoc-in [:body "EnhancedVpcRouting"] (ser-boolean-optional (input73004 :enhanced-vpc-routing))) (clojure.core/contains? input73004 :publicly-accessible) (clojure.core/assoc-in [:body "PubliclyAccessible"] (ser-boolean-optional (input73004 :publicly-accessible))) (clojure.core/contains? input73004 :preferred-maintenance-window) (clojure.core/assoc-in [:body "PreferredMaintenanceWindow"] (ser-string (input73004 :preferred-maintenance-window))) (clojure.core/contains? input73004 :hsm-client-certificate-identifier) (clojure.core/assoc-in [:body "HsmClientCertificateIdentifier"] (ser-string (input73004 :hsm-client-certificate-identifier))) (clojure.core/contains? input73004 :number-of-nodes) (clojure.core/assoc-in [:body "NumberOfNodes"] (ser-integer-optional (input73004 :number-of-nodes))) (clojure.core/contains? input73004 :vpc-security-group-ids) (clojure.core/assoc-in [:body "VpcSecurityGroupIds"] (ser-vpc-security-group-id-list (input73004 :vpc-security-group-ids))) (clojure.core/contains? input73004 :cluster-type) (clojure.core/assoc-in [:body "ClusterType"] (ser-string (input73004 :cluster-type))) (clojure.core/contains? input73004 :master-user-password) (clojure.core/assoc-in [:body "MasterUserPassword"] (ser-string (input73004 :master-user-password))) (clojure.core/contains? input73004 :cluster-security-groups) (clojure.core/assoc-in [:body "ClusterSecurityGroups"] (ser-cluster-security-group-name-list (input73004 :cluster-security-groups))) (clojure.core/contains? input73004 :elastic-ip) (clojure.core/assoc-in [:body "ElasticIp"] (ser-string (input73004 :elastic-ip))) (clojure.core/contains? input73004 :hsm-configuration-identifier) (clojure.core/assoc-in [:body "HsmConfigurationIdentifier"] (ser-string (input73004 :hsm-configuration-identifier))) (clojure.core/contains? input73004 :allow-version-upgrade) (clojure.core/assoc-in [:body "AllowVersionUpgrade"] (ser-boolean-optional (input73004 :allow-version-upgrade))) (clojure.core/contains? input73004 :cluster-version) (clojure.core/assoc-in [:body "ClusterVersion"] (ser-string (input73004 :cluster-version))) (clojure.core/contains? input73004 :automated-snapshot-retention-period) (clojure.core/assoc-in [:body "AutomatedSnapshotRetentionPeriod"] (ser-integer-optional (input73004 :automated-snapshot-retention-period))) (clojure.core/contains? input73004 :new-cluster-identifier) (clojure.core/assoc-in [:body "NewClusterIdentifier"] (ser-string (input73004 :new-cluster-identifier))) (clojure.core/contains? input73004 :node-type) (clojure.core/assoc-in [:body "NodeType"] (ser-string (input73004 :node-type))) (clojure.core/contains? input73004 :cluster-parameter-group-name) (clojure.core/assoc-in [:body "ClusterParameterGroupName"] (ser-string (input73004 :cluster-parameter-group-name))))))
(clojure.core/defn req<-purchase-reserved-node-offering-message [action-name73008 input73007] (clojure.core/let [input73009 {:body {"ReservedNodeOfferingId" (ser-string (input73007 :reserved-node-offering-id)), "Version" "2012-12-01", "Action" action-name73008}}] (clojure.core/cond-> input73009 (clojure.core/contains? input73007 :node-count) (clojure.core/assoc-in [:body "NodeCount"] (ser-integer-optional (input73007 :node-count))))))
(clojure.core/defn req<-describe-reserved-node-offerings-message [action-name73011 input73010] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name73011}} (clojure.core/contains? input73010 :reserved-node-offering-id) (clojure.core/assoc-in [:body "ReservedNodeOfferingId"] (ser-string (input73010 :reserved-node-offering-id))) (clojure.core/contains? input73010 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input73010 :max-records))) (clojure.core/contains? input73010 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input73010 :marker)))))
(clojure.core/defn req<-delete-cluster-parameter-group-message [action-name73013 input73012] {:body {"ParameterGroupName" (ser-string (input73012 :parameter-group-name)), "Version" "2012-12-01", "Action" action-name73013}})
(clojure.core/defn req<-delete-snapshot-copy-grant-message [action-name73015 input73014] {:body {"SnapshotCopyGrantName" (ser-string (input73014 :snapshot-copy-grant-name)), "Version" "2012-12-01", "Action" action-name73015}})
(clojure.core/defn req<-delete-cluster-message [action-name73017 input73016] (clojure.core/let [input73018 {:body {"ClusterIdentifier" (ser-string (input73016 :cluster-identifier)), "Version" "2012-12-01", "Action" action-name73017}}] (clojure.core/cond-> input73018 (clojure.core/contains? input73016 :skip-final-cluster-snapshot) (clojure.core/assoc-in [:body "SkipFinalClusterSnapshot"] (ser-boolean (input73016 :skip-final-cluster-snapshot))) (clojure.core/contains? input73016 :final-cluster-snapshot-identifier) (clojure.core/assoc-in [:body "FinalClusterSnapshotIdentifier"] (ser-string (input73016 :final-cluster-snapshot-identifier))))))
(clojure.core/defn req<-modify-event-subscription-message [action-name73020 input73019] (clojure.core/let [input73021 {:body {"SubscriptionName" (ser-string (input73019 :subscription-name)), "Version" "2012-12-01", "Action" action-name73020}}] (clojure.core/cond-> input73021 (clojure.core/contains? input73019 :sns-topic-arn) (clojure.core/assoc-in [:body "SnsTopicArn"] (ser-string (input73019 :sns-topic-arn))) (clojure.core/contains? input73019 :source-type) (clojure.core/assoc-in [:body "SourceType"] (ser-string (input73019 :source-type))) (clojure.core/contains? input73019 :source-ids) (clojure.core/assoc-in [:body "SourceIds"] (ser-source-ids-list (input73019 :source-ids))) (clojure.core/contains? input73019 :event-categories) (clojure.core/assoc-in [:body "EventCategories"] (ser-event-categories-list (input73019 :event-categories))) (clojure.core/contains? input73019 :severity) (clojure.core/assoc-in [:body "Severity"] (ser-string (input73019 :severity))) (clojure.core/contains? input73019 :enabled) (clojure.core/assoc-in [:body "Enabled"] (ser-boolean-optional (input73019 :enabled))))))
(clojure.core/defn req<-describe-hsm-client-certificates-message [action-name73023 input73022] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name73023}} (clojure.core/contains? input73022 :hsm-client-certificate-identifier) (clojure.core/assoc-in [:body "HsmClientCertificateIdentifier"] (ser-string (input73022 :hsm-client-certificate-identifier))) (clojure.core/contains? input73022 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input73022 :max-records))) (clojure.core/contains? input73022 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input73022 :marker))) (clojure.core/contains? input73022 :tag-keys) (clojure.core/assoc-in [:body "TagKeys"] (ser-tag-key-list (input73022 :tag-keys))) (clojure.core/contains? input73022 :tag-values) (clojure.core/assoc-in [:body "TagValues"] (ser-tag-value-list (input73022 :tag-values)))))
(clojure.core/defn req<-create-event-subscription-message [action-name73025 input73024] (clojure.core/let [input73026 {:body {"SubscriptionName" (ser-string (input73024 :subscription-name)), "SnsTopicArn" (ser-string (input73024 :sns-topic-arn)), "Version" "2012-12-01", "Action" action-name73025}}] (clojure.core/cond-> input73026 (clojure.core/contains? input73024 :source-type) (clojure.core/assoc-in [:body "SourceType"] (ser-string (input73024 :source-type))) (clojure.core/contains? input73024 :source-ids) (clojure.core/assoc-in [:body "SourceIds"] (ser-source-ids-list (input73024 :source-ids))) (clojure.core/contains? input73024 :event-categories) (clojure.core/assoc-in [:body "EventCategories"] (ser-event-categories-list (input73024 :event-categories))) (clojure.core/contains? input73024 :severity) (clojure.core/assoc-in [:body "Severity"] (ser-string (input73024 :severity))) (clojure.core/contains? input73024 :enabled) (clojure.core/assoc-in [:body "Enabled"] (ser-boolean-optional (input73024 :enabled))) (clojure.core/contains? input73024 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input73024 :tags))))))
(clojure.core/defn req<-create-cluster-security-group-message [action-name73028 input73027] (clojure.core/let [input73029 {:body {"ClusterSecurityGroupName" (ser-string (input73027 :cluster-security-group-name)), "Description" (ser-string (input73027 :description)), "Version" "2012-12-01", "Action" action-name73028}}] (clojure.core/cond-> input73029 (clojure.core/contains? input73027 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input73027 :tags))))))
(clojure.core/defn req<-describe-snapshot-copy-grants-message [action-name73031 input73030] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name73031}} (clojure.core/contains? input73030 :snapshot-copy-grant-name) (clojure.core/assoc-in [:body "SnapshotCopyGrantName"] (ser-string (input73030 :snapshot-copy-grant-name))) (clojure.core/contains? input73030 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input73030 :max-records))) (clojure.core/contains? input73030 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input73030 :marker))) (clojure.core/contains? input73030 :tag-keys) (clojure.core/assoc-in [:body "TagKeys"] (ser-tag-key-list (input73030 :tag-keys))) (clojure.core/contains? input73030 :tag-values) (clojure.core/assoc-in [:body "TagValues"] (ser-tag-value-list (input73030 :tag-values)))))
(clojure.core/defn req<-authorize-cluster-security-group-ingress-message [action-name73033 input73032] (clojure.core/let [input73034 {:body {"ClusterSecurityGroupName" (ser-string (input73032 :cluster-security-group-name)), "Version" "2012-12-01", "Action" action-name73033}}] (clojure.core/cond-> input73034 (clojure.core/contains? input73032 :cidrip) (clojure.core/assoc-in [:body "CIDRIP"] (ser-string (input73032 :cidrip))) (clojure.core/contains? input73032 :ec2-security-group-name) (clojure.core/assoc-in [:body "EC2SecurityGroupName"] (ser-string (input73032 :ec2-security-group-name))) (clojure.core/contains? input73032 :ec2-security-group-owner-id) (clojure.core/assoc-in [:body "EC2SecurityGroupOwnerId"] (ser-string (input73032 :ec2-security-group-owner-id))))))
(clojure.core/defn req<-modify-cluster-subnet-group-message [action-name73036 input73035] (clojure.core/let [input73037 {:body {"ClusterSubnetGroupName" (ser-string (input73035 :cluster-subnet-group-name)), "SubnetIds" (ser-subnet-identifier-list (input73035 :subnet-ids)), "Version" "2012-12-01", "Action" action-name73036}}] (clojure.core/cond-> input73037 (clojure.core/contains? input73035 :description) (clojure.core/assoc-in [:body "Description"] (ser-string (input73035 :description))))))
(clojure.core/defn req<-delete-hsm-configuration-message [action-name73039 input73038] {:body {"HsmConfigurationIdentifier" (ser-string (input73038 :hsm-configuration-identifier)), "Version" "2012-12-01", "Action" action-name73039}})
(clojure.core/defn req<-describe-event-subscriptions-message [action-name73041 input73040] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name73041}} (clojure.core/contains? input73040 :subscription-name) (clojure.core/assoc-in [:body "SubscriptionName"] (ser-string (input73040 :subscription-name))) (clojure.core/contains? input73040 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input73040 :max-records))) (clojure.core/contains? input73040 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input73040 :marker))) (clojure.core/contains? input73040 :tag-keys) (clojure.core/assoc-in [:body "TagKeys"] (ser-tag-key-list (input73040 :tag-keys))) (clojure.core/contains? input73040 :tag-values) (clojure.core/assoc-in [:body "TagValues"] (ser-tag-value-list (input73040 :tag-values)))))
(clojure.core/defn req<-create-cluster-parameter-group-message [action-name73043 input73042] (clojure.core/let [input73044 {:body {"ParameterGroupName" (ser-string (input73042 :parameter-group-name)), "ParameterGroupFamily" (ser-string (input73042 :parameter-group-family)), "Description" (ser-string (input73042 :description)), "Version" "2012-12-01", "Action" action-name73043}}] (clojure.core/cond-> input73044 (clojure.core/contains? input73042 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input73042 :tags))))))
(clojure.core/defn req<-describe-cluster-parameter-groups-message [action-name73046 input73045] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name73046}} (clojure.core/contains? input73045 :parameter-group-name) (clojure.core/assoc-in [:body "ParameterGroupName"] (ser-string (input73045 :parameter-group-name))) (clojure.core/contains? input73045 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input73045 :max-records))) (clojure.core/contains? input73045 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input73045 :marker))) (clojure.core/contains? input73045 :tag-keys) (clojure.core/assoc-in [:body "TagKeys"] (ser-tag-key-list (input73045 :tag-keys))) (clojure.core/contains? input73045 :tag-values) (clojure.core/assoc-in [:body "TagValues"] (ser-tag-value-list (input73045 :tag-values)))))
(clojure.core/defn req<-authorize-snapshot-access-message [action-name73048 input73047] (clojure.core/let [input73049 {:body {"SnapshotIdentifier" (ser-string (input73047 :snapshot-identifier)), "AccountWithRestoreAccess" (ser-string (input73047 :account-with-restore-access)), "Version" "2012-12-01", "Action" action-name73048}}] (clojure.core/cond-> input73049 (clojure.core/contains? input73047 :snapshot-cluster-identifier) (clojure.core/assoc-in [:body "SnapshotClusterIdentifier"] (ser-string (input73047 :snapshot-cluster-identifier))))))
(clojure.core/defn req<-describe-logging-status-message [action-name73051 input73050] {:body {"ClusterIdentifier" (ser-string (input73050 :cluster-identifier)), "Version" "2012-12-01", "Action" action-name73051}})
(clojure.core/defn req<-describe-resize-message [action-name73053 input73052] {:body {"ClusterIdentifier" (ser-string (input73052 :cluster-identifier)), "Version" "2012-12-01", "Action" action-name73053}})
(clojure.core/defn req<-reboot-cluster-message [action-name73055 input73054] {:body {"ClusterIdentifier" (ser-string (input73054 :cluster-identifier)), "Version" "2012-12-01", "Action" action-name73055}})
(clojure.core/defn req<-describe-orderable-cluster-options-message [action-name73057 input73056] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name73057}} (clojure.core/contains? input73056 :cluster-version) (clojure.core/assoc-in [:body "ClusterVersion"] (ser-string (input73056 :cluster-version))) (clojure.core/contains? input73056 :node-type) (clojure.core/assoc-in [:body "NodeType"] (ser-string (input73056 :node-type))) (clojure.core/contains? input73056 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input73056 :max-records))) (clojure.core/contains? input73056 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input73056 :marker)))))
(clojure.core/defn req<-create-cluster-subnet-group-message [action-name73059 input73058] (clojure.core/let [input73060 {:body {"ClusterSubnetGroupName" (ser-string (input73058 :cluster-subnet-group-name)), "Description" (ser-string (input73058 :description)), "SubnetIds" (ser-subnet-identifier-list (input73058 :subnet-ids)), "Version" "2012-12-01", "Action" action-name73059}}] (clojure.core/cond-> input73060 (clojure.core/contains? input73058 :tags) (clojure.core/assoc-in [:body "Tags"] (ser-tag-list (input73058 :tags))))))
(clojure.core/defn req<-modify-cluster-iam-roles-message [action-name73062 input73061] (clojure.core/let [input73063 {:body {"ClusterIdentifier" (ser-string (input73061 :cluster-identifier)), "Version" "2012-12-01", "Action" action-name73062}}] (clojure.core/cond-> input73063 (clojure.core/contains? input73061 :add-iam-roles) (clojure.core/assoc-in [:body "AddIamRoles"] (ser-iam-role-arn-list (input73061 :add-iam-roles))) (clojure.core/contains? input73061 :remove-iam-roles) (clojure.core/assoc-in [:body "RemoveIamRoles"] (ser-iam-role-arn-list (input73061 :remove-iam-roles))))))
(clojure.core/defn req<-delete-cluster-security-group-message [action-name73065 input73064] {:body {"ClusterSecurityGroupName" (ser-string (input73064 :cluster-security-group-name)), "Version" "2012-12-01", "Action" action-name73065}})
(clojure.core/defn req<-describe-cluster-security-groups-message [action-name73067 input73066] (clojure.core/cond-> {:body {"Version" "2012-12-01", "Action" action-name73067}} (clojure.core/contains? input73066 :cluster-security-group-name) (clojure.core/assoc-in [:body "ClusterSecurityGroupName"] (ser-string (input73066 :cluster-security-group-name))) (clojure.core/contains? input73066 :max-records) (clojure.core/assoc-in [:body "MaxRecords"] (ser-integer-optional (input73066 :max-records))) (clojure.core/contains? input73066 :marker) (clojure.core/assoc-in [:body "Marker"] (ser-string (input73066 :marker))) (clojure.core/contains? input73066 :tag-keys) (clojure.core/assoc-in [:body "TagKeys"] (ser-tag-key-list (input73066 :tag-keys))) (clojure.core/contains? input73066 :tag-values) (clojure.core/assoc-in [:body "TagValues"] (ser-tag-value-list (input73066 :tag-values)))))

(clojure.spec.alpha/def :portkey.aws.redshift.describe-table-restore-status-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-table-restore-status-message/table-restore-request-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-table-restore-status-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-table-restore-status-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/describe-table-restore-status-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.describe-table-restore-status-message/ClusterIdentifier :portkey.aws.redshift.describe-table-restore-status-message/TableRestoreRequestId :portkey.aws.redshift.describe-table-restore-status-message/MaxRecords :portkey.aws.redshift.describe-table-restore-status-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/source-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/vpc-security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/vpc-security-group-membership))

(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/enhanced-vpc-routing (clojure.spec.alpha/and :portkey.aws.redshift/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.redshift/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/encrypted (clojure.spec.alpha/and :portkey.aws.redshift/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/hsm-client-certificate-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/cluster-subnet-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/number-of-nodes (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/tags (clojure.spec.alpha/and :portkey.aws.redshift/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/dbname (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.redshift/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/availability-zone (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/cluster-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/master-user-password (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/cluster-security-groups (clojure.spec.alpha/and :portkey.aws.redshift/cluster-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/additional-info (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/elastic-ip (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/master-username (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/hsm-configuration-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/port (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/allow-version-upgrade (clojure.spec.alpha/and :portkey.aws.redshift/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/cluster-version (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/automated-snapshot-retention-period (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/iam-roles (clojure.spec.alpha/and :portkey.aws.redshift/iam-role-arn-list))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/node-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-message/cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/create-cluster-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.create-cluster-message/ClusterIdentifier :portkey.aws.redshift.create-cluster-message/NodeType :portkey.aws.redshift.create-cluster-message/MasterUsername :portkey.aws.redshift.create-cluster-message/MasterUserPassword] :opt-un [:portkey.aws.redshift.create-cluster-message/EnhancedVpcRouting :portkey.aws.redshift.create-cluster-message/PubliclyAccessible :portkey.aws.redshift.create-cluster-message/PreferredMaintenanceWindow :portkey.aws.redshift.create-cluster-message/Encrypted :portkey.aws.redshift.create-cluster-message/HsmClientCertificateIdentifier :portkey.aws.redshift.create-cluster-message/ClusterSubnetGroupName :portkey.aws.redshift.create-cluster-message/NumberOfNodes :portkey.aws.redshift.create-cluster-message/Tags :portkey.aws.redshift.create-cluster-message/DBName :portkey.aws.redshift.create-cluster-message/VpcSecurityGroupIds :portkey.aws.redshift.create-cluster-message/AvailabilityZone :portkey.aws.redshift.create-cluster-message/ClusterType :portkey.aws.redshift.create-cluster-message/ClusterSecurityGroups :portkey.aws.redshift.create-cluster-message/AdditionalInfo :portkey.aws.redshift.create-cluster-message/ElasticIp :portkey.aws.redshift.create-cluster-message/HsmConfigurationIdentifier :portkey.aws.redshift.create-cluster-message/Port :portkey.aws.redshift.create-cluster-message/KmsKeyId :portkey.aws.redshift.create-cluster-message/AllowVersionUpgrade :portkey.aws.redshift.create-cluster-message/ClusterVersion :portkey.aws.redshift.create-cluster-message/AutomatedSnapshotRetentionPeriod :portkey.aws.redshift.create-cluster-message/IamRoles :portkey.aws.redshift.create-cluster-message/ClusterParameterGroupName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/dependent-service-request-throttling-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/snapshot-copy-grant-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/snapshot-copy-grant))

(clojure.spec.alpha/def :portkey.aws.redshift/insufficient-cluster-capacity-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/subnet-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/string))

(clojure.spec.alpha/def :portkey.aws.redshift.enable-logging-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.enable-logging-message/bucket-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.enable-logging-message/s3-key-prefix (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/enable-logging-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.enable-logging-message/ClusterIdentifier :portkey.aws.redshift.enable-logging-message/BucketName] :opt-un [:portkey.aws.redshift.enable-logging-message/S3KeyPrefix] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.hsm-configuration/hsm-configuration-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.hsm-configuration/description (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.hsm-configuration/hsm-ip-address (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.hsm-configuration/hsm-partition-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.hsm-configuration/tags (clojure.spec.alpha/and :portkey.aws.redshift/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift/hsm-configuration (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.hsm-configuration/HsmConfigurationIdentifier :portkey.aws.redshift.hsm-configuration/Description :portkey.aws.redshift.hsm-configuration/HsmIpAddress :portkey.aws.redshift.hsm-configuration/HsmPartitionName :portkey.aws.redshift.hsm-configuration/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.resize-progress-message/avg-resize-rate-in-mega-bytes-per-second (clojure.spec.alpha/and :portkey.aws.redshift/double-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.resize-progress-message/total-resize-data-in-mega-bytes (clojure.spec.alpha/and :portkey.aws.redshift/long-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.resize-progress-message/target-cluster-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.resize-progress-message/progress-in-mega-bytes (clojure.spec.alpha/and :portkey.aws.redshift/long-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.resize-progress-message/status (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.resize-progress-message/target-node-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.resize-progress-message/estimated-time-to-completion-in-seconds (clojure.spec.alpha/and :portkey.aws.redshift/long-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.resize-progress-message/target-number-of-nodes (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.resize-progress-message/elapsed-time-in-seconds (clojure.spec.alpha/and :portkey.aws.redshift/long-optional))
(clojure.spec.alpha/def :portkey.aws.redshift/resize-progress-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.resize-progress-message/AvgResizeRateInMegaBytesPerSecond :portkey.aws.redshift/ImportTablesNotStarted :portkey.aws.redshift.resize-progress-message/TotalResizeDataInMegaBytes :portkey.aws.redshift.resize-progress-message/TargetClusterType :portkey.aws.redshift.resize-progress-message/ProgressInMegaBytes :portkey.aws.redshift.resize-progress-message/Status :portkey.aws.redshift.resize-progress-message/TargetNodeType :portkey.aws.redshift/ImportTablesCompleted :portkey.aws.redshift/ImportTablesInProgress :portkey.aws.redshift.resize-progress-message/EstimatedTimeToCompletionInSeconds :portkey.aws.redshift.resize-progress-message/TargetNumberOfNodes :portkey.aws.redshift.resize-progress-message/ElapsedTimeInSeconds] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.describe-hsm-client-certificates-message/hsm-client-certificate-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-hsm-client-certificates-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-hsm-client-certificates-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-hsm-client-certificates-message/tag-keys (clojure.spec.alpha/and :portkey.aws.redshift/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-hsm-client-certificates-message/tag-values (clojure.spec.alpha/and :portkey.aws.redshift/tag-value-list))
(clojure.spec.alpha/def :portkey.aws.redshift/describe-hsm-client-certificates-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.describe-hsm-client-certificates-message/HsmClientCertificateIdentifier :portkey.aws.redshift.describe-hsm-client-certificates-message/MaxRecords :portkey.aws.redshift.describe-hsm-client-certificates-message/Marker :portkey.aws.redshift.describe-hsm-client-certificates-message/TagKeys :portkey.aws.redshift.describe-hsm-client-certificates-message/TagValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.redshift/parameters-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/parameter))

(clojure.spec.alpha/def :portkey.aws.redshift/ec2-security-group-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/ec2-security-group))

(clojure.spec.alpha/def :portkey.aws.redshift/tag-value-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/string))

(clojure.spec.alpha/def :portkey.aws.redshift/table-restore-status-type {"CANCELED" "CANCELED", "IN_PROGRESS" "IN_PROGRESS", :in-progress "IN_PROGRESS", :pending "PENDING", "PENDING" "PENDING", :canceled "CANCELED", "SUCCEEDED" "SUCCEEDED", "FAILED" "FAILED", :failed "FAILED", :succeeded "SUCCEEDED"})

(clojure.spec.alpha/def :portkey.aws.redshift/import-tables-not-started (clojure.spec.alpha/coll-of :portkey.aws.redshift/string))

(clojure.spec.alpha/def :portkey.aws.redshift.cluster-node/node-role (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-node/privateipaddress (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-node/publicipaddress (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/cluster-node (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.cluster-node/NodeRole :portkey.aws.redshift.cluster-node/PrivateIPAddress :portkey.aws.redshift.cluster-node/PublicIPAddress] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.reserved-node/currency-code (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.reserved-node/start-time (clojure.spec.alpha/and :portkey.aws.redshift/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.reserved-node/node-count (clojure.spec.alpha/and :portkey.aws.redshift/integer))
(clojure.spec.alpha/def :portkey.aws.redshift.reserved-node/fixed-price (clojure.spec.alpha/and :portkey.aws.redshift/double))
(clojure.spec.alpha/def :portkey.aws.redshift.reserved-node/reserved-node-offering-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.reserved-node/duration (clojure.spec.alpha/and :portkey.aws.redshift/integer))
(clojure.spec.alpha/def :portkey.aws.redshift.reserved-node/reserved-node-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.reserved-node/usage-price (clojure.spec.alpha/and :portkey.aws.redshift/double))
(clojure.spec.alpha/def :portkey.aws.redshift.reserved-node/state (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.reserved-node/recurring-charges (clojure.spec.alpha/and :portkey.aws.redshift/recurring-charge-list))
(clojure.spec.alpha/def :portkey.aws.redshift.reserved-node/offering-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.reserved-node/node-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/reserved-node (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.reserved-node/CurrencyCode :portkey.aws.redshift.reserved-node/StartTime :portkey.aws.redshift.reserved-node/NodeCount :portkey.aws.redshift.reserved-node/FixedPrice :portkey.aws.redshift/ReservedNodeOfferingType :portkey.aws.redshift.reserved-node/ReservedNodeOfferingId :portkey.aws.redshift.reserved-node/Duration :portkey.aws.redshift.reserved-node/ReservedNodeId :portkey.aws.redshift.reserved-node/UsagePrice :portkey.aws.redshift.reserved-node/State :portkey.aws.redshift.reserved-node/RecurringCharges :portkey.aws.redshift.reserved-node/OfferingType :portkey.aws.redshift.reserved-node/NodeType] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.enable-snapshot-copy-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.enable-snapshot-copy-message/destination-region (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.enable-snapshot-copy-message/retention-period (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.enable-snapshot-copy-message/snapshot-copy-grant-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/enable-snapshot-copy-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.enable-snapshot-copy-message/ClusterIdentifier :portkey.aws.redshift.enable-snapshot-copy-message/DestinationRegion] :opt-un [:portkey.aws.redshift.enable-snapshot-copy-message/RetentionPeriod :portkey.aws.redshift.enable-snapshot-copy-message/SnapshotCopyGrantName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/reserved-node-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.reserved-nodes-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.reserved-nodes-message/reserved-nodes (clojure.spec.alpha/and :portkey.aws.redshift/reserved-node-list))
(clojure.spec.alpha/def :portkey.aws.redshift/reserved-nodes-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.reserved-nodes-message/Marker :portkey.aws.redshift.reserved-nodes-message/ReservedNodes] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/double-optional clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.redshift/source-ids-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/string))

(clojure.spec.alpha/def :portkey.aws.redshift/number-of-nodes-per-cluster-limit-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/snsno-authorization-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.reserved-node-offerings-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.reserved-node-offerings-message/reserved-node-offerings (clojure.spec.alpha/and :portkey.aws.redshift/reserved-node-offering-list))
(clojure.spec.alpha/def :portkey.aws.redshift/reserved-node-offerings-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.reserved-node-offerings-message/Marker :portkey.aws.redshift.reserved-node-offerings-message/ReservedNodeOfferings] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-parameter-group-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/invalid-elastic-ip-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-parameter-status-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/cluster-parameter-status))

(clojure.spec.alpha/def :portkey.aws.redshift/disable-snapshot-copy-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/Cluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/authorize-snapshot-access-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/Snapshot] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.describe-clusters-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-clusters-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-clusters-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-clusters-message/tag-keys (clojure.spec.alpha/and :portkey.aws.redshift/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-clusters-message/tag-values (clojure.spec.alpha/and :portkey.aws.redshift/tag-value-list))
(clojure.spec.alpha/def :portkey.aws.redshift/describe-clusters-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.describe-clusters-message/ClusterIdentifier :portkey.aws.redshift.describe-clusters-message/MaxRecords :portkey.aws.redshift.describe-clusters-message/Marker :portkey.aws.redshift.describe-clusters-message/TagKeys :portkey.aws.redshift.describe-clusters-message/TagValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.revoke-snapshot-access-message/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.revoke-snapshot-access-message/snapshot-cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.revoke-snapshot-access-message/account-with-restore-access (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/revoke-snapshot-access-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.revoke-snapshot-access-message/SnapshotIdentifier :portkey.aws.redshift.revoke-snapshot-access-message/AccountWithRestoreAccess] :opt-un [:portkey.aws.redshift.revoke-snapshot-access-message/SnapshotClusterIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/snapshot-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/snapshot))

(clojure.spec.alpha/def :portkey.aws.redshift.describe-event-subscriptions-message/subscription-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-event-subscriptions-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-event-subscriptions-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-event-subscriptions-message/tag-keys (clojure.spec.alpha/and :portkey.aws.redshift/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-event-subscriptions-message/tag-values (clojure.spec.alpha/and :portkey.aws.redshift/tag-value-list))
(clojure.spec.alpha/def :portkey.aws.redshift/describe-event-subscriptions-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.describe-event-subscriptions-message/SubscriptionName :portkey.aws.redshift.describe-event-subscriptions-message/MaxRecords :portkey.aws.redshift.describe-event-subscriptions-message/Marker :portkey.aws.redshift.describe-event-subscriptions-message/TagKeys :portkey.aws.redshift.describe-event-subscriptions-message/TagValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.restore-from-cluster-snapshot-message/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-from-cluster-snapshot-message/enhanced-vpc-routing (clojure.spec.alpha/and :portkey.aws.redshift/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-from-cluster-snapshot-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.redshift/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-from-cluster-snapshot-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-from-cluster-snapshot-message/owner-account (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-from-cluster-snapshot-message/hsm-client-certificate-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-from-cluster-snapshot-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-from-cluster-snapshot-message/cluster-subnet-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-from-cluster-snapshot-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.redshift/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-from-cluster-snapshot-message/availability-zone (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-from-cluster-snapshot-message/cluster-security-groups (clojure.spec.alpha/and :portkey.aws.redshift/cluster-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-from-cluster-snapshot-message/additional-info (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-from-cluster-snapshot-message/elastic-ip (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-from-cluster-snapshot-message/hsm-configuration-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-from-cluster-snapshot-message/port (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-from-cluster-snapshot-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-from-cluster-snapshot-message/allow-version-upgrade (clojure.spec.alpha/and :portkey.aws.redshift/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-from-cluster-snapshot-message/automated-snapshot-retention-period (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-from-cluster-snapshot-message/iam-roles (clojure.spec.alpha/and :portkey.aws.redshift/iam-role-arn-list))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-from-cluster-snapshot-message/node-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-from-cluster-snapshot-message/snapshot-cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-from-cluster-snapshot-message/cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/restore-from-cluster-snapshot-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.restore-from-cluster-snapshot-message/ClusterIdentifier :portkey.aws.redshift.restore-from-cluster-snapshot-message/SnapshotIdentifier] :opt-un [:portkey.aws.redshift.restore-from-cluster-snapshot-message/EnhancedVpcRouting :portkey.aws.redshift.restore-from-cluster-snapshot-message/PubliclyAccessible :portkey.aws.redshift.restore-from-cluster-snapshot-message/PreferredMaintenanceWindow :portkey.aws.redshift.restore-from-cluster-snapshot-message/OwnerAccount :portkey.aws.redshift.restore-from-cluster-snapshot-message/HsmClientCertificateIdentifier :portkey.aws.redshift.restore-from-cluster-snapshot-message/ClusterSubnetGroupName :portkey.aws.redshift.restore-from-cluster-snapshot-message/VpcSecurityGroupIds :portkey.aws.redshift.restore-from-cluster-snapshot-message/AvailabilityZone :portkey.aws.redshift.restore-from-cluster-snapshot-message/ClusterSecurityGroups :portkey.aws.redshift.restore-from-cluster-snapshot-message/AdditionalInfo :portkey.aws.redshift.restore-from-cluster-snapshot-message/ElasticIp :portkey.aws.redshift.restore-from-cluster-snapshot-message/HsmConfigurationIdentifier :portkey.aws.redshift.restore-from-cluster-snapshot-message/Port :portkey.aws.redshift.restore-from-cluster-snapshot-message/KmsKeyId :portkey.aws.redshift.restore-from-cluster-snapshot-message/AllowVersionUpgrade :portkey.aws.redshift.restore-from-cluster-snapshot-message/AutomatedSnapshotRetentionPeriod :portkey.aws.redshift.restore-from-cluster-snapshot-message/IamRoles :portkey.aws.redshift.restore-from-cluster-snapshot-message/NodeType :portkey.aws.redshift.restore-from-cluster-snapshot-message/SnapshotClusterIdentifier :portkey.aws.redshift.restore-from-cluster-snapshot-message/ClusterParameterGroupName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.delete-cluster-parameter-group-message/parameter-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/delete-cluster-parameter-group-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.delete-cluster-parameter-group-message/ParameterGroupName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/hsm-client-certificate-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.subnet/subnet-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.subnet/subnet-availability-zone (clojure.spec.alpha/and :portkey.aws.redshift/availability-zone))
(clojure.spec.alpha/def :portkey.aws.redshift.subnet/subnet-status (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/subnet (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.subnet/SubnetIdentifier :portkey.aws.redshift.subnet/SubnetAvailabilityZone :portkey.aws.redshift.subnet/SubnetStatus] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.describe-hsm-configurations-message/hsm-configuration-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-hsm-configurations-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-hsm-configurations-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-hsm-configurations-message/tag-keys (clojure.spec.alpha/and :portkey.aws.redshift/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-hsm-configurations-message/tag-values (clojure.spec.alpha/and :portkey.aws.redshift/tag-value-list))
(clojure.spec.alpha/def :portkey.aws.redshift/describe-hsm-configurations-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.describe-hsm-configurations-message/HsmConfigurationIdentifier :portkey.aws.redshift.describe-hsm-configurations-message/MaxRecords :portkey.aws.redshift.describe-hsm-configurations-message/Marker :portkey.aws.redshift.describe-hsm-configurations-message/TagKeys :portkey.aws.redshift.describe-hsm-configurations-message/TagValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-parameter-groups-message/parameter-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-parameter-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-parameter-groups-message/tag-keys (clojure.spec.alpha/and :portkey.aws.redshift/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-parameter-groups-message/tag-values (clojure.spec.alpha/and :portkey.aws.redshift/tag-value-list))
(clojure.spec.alpha/def :portkey.aws.redshift/describe-cluster-parameter-groups-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.describe-cluster-parameter-groups-message/ParameterGroupName :portkey.aws.redshift.describe-cluster-parameter-groups-message/MaxRecords :portkey.aws.redshift.describe-cluster-parameter-groups-message/Marker :portkey.aws.redshift.describe-cluster-parameter-groups-message/TagKeys :portkey.aws.redshift.describe-cluster-parameter-groups-message/TagValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-subnet-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/create-cluster-parameter-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/ClusterParameterGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-parameter-group-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/reserved-node-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/event-info-map-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/event-info-map))

(clojure.spec.alpha/def :portkey.aws.redshift.authorize-cluster-security-group-ingress-message/cluster-security-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.authorize-cluster-security-group-ingress-message/cidrip (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.authorize-cluster-security-group-ingress-message/ec2-security-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.authorize-cluster-security-group-ingress-message/ec2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/authorize-cluster-security-group-ingress-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.authorize-cluster-security-group-ingress-message/ClusterSecurityGroupName] :opt-un [:portkey.aws.redshift.authorize-cluster-security-group-ingress-message/CIDRIP :portkey.aws.redshift.authorize-cluster-security-group-ingress-message/EC2SecurityGroupName :portkey.aws.redshift.authorize-cluster-security-group-ingress-message/EC2SecurityGroupOwnerId] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.hsm-configuration-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.hsm-configuration-message/hsm-configurations (clojure.spec.alpha/and :portkey.aws.redshift/hsm-configuration-list))
(clojure.spec.alpha/def :portkey.aws.redshift/hsm-configuration-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.hsm-configuration-message/Marker :portkey.aws.redshift.hsm-configuration-message/HsmConfigurations] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/invalid-hsm-configuration-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.describe-resize-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/describe-resize-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.describe-resize-message/ClusterIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/invalids3-bucket-name-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/supported-platforms-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/supported-platform))

(clojure.spec.alpha/def :portkey.aws.redshift.event-subscription/severity (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.event-subscription/customer-aws-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.event-subscription/tags (clojure.spec.alpha/and :portkey.aws.redshift/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.event-subscription/source-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.event-subscription/enabled (clojure.spec.alpha/and :portkey.aws.redshift/boolean))
(clojure.spec.alpha/def :portkey.aws.redshift.event-subscription/status (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.event-subscription/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.event-subscription/cust-subscription-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.event-subscription/subscription-creation-time (clojure.spec.alpha/and :portkey.aws.redshift/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift/event-subscription (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.event-subscription/Severity :portkey.aws.redshift/SourceIdsList :portkey.aws.redshift.event-subscription/CustomerAwsId :portkey.aws.redshift.event-subscription/Tags :portkey.aws.redshift.event-subscription/SourceType :portkey.aws.redshift.event-subscription/Enabled :portkey.aws.redshift.event-subscription/Status :portkey.aws.redshift.event-subscription/SnsTopicArn :portkey.aws.redshift/EventCategoriesList :portkey.aws.redshift.event-subscription/CustSubscriptionId :portkey.aws.redshift.event-subscription/SubscriptionCreationTime] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.cluster-snapshot-copy-status/destination-region (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-snapshot-copy-status/retention-period (clojure.spec.alpha/and :portkey.aws.redshift/long))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-snapshot-copy-status/snapshot-copy-grant-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/cluster-snapshot-copy-status (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.cluster-snapshot-copy-status/DestinationRegion :portkey.aws.redshift.cluster-snapshot-copy-status/RetentionPeriod :portkey.aws.redshift.cluster-snapshot-copy-status/SnapshotCopyGrantName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.describe-default-cluster-parameters-message/parameter-group-family (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-default-cluster-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-default-cluster-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/describe-default-cluster-parameters-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.describe-default-cluster-parameters-message/ParameterGroupFamily] :opt-un [:portkey.aws.redshift.describe-default-cluster-parameters-message/MaxRecords :portkey.aws.redshift.describe-default-cluster-parameters-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/describe-default-cluster-parameters-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/DefaultClusterParameters] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.snapshot-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot-message/snapshots (clojure.spec.alpha/and :portkey.aws.redshift/snapshot-list))
(clojure.spec.alpha/def :portkey.aws.redshift/snapshot-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.snapshot-message/Marker :portkey.aws.redshift.snapshot-message/Snapshots] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/subscription-severity-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/invalidvpcnetwork-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-subnet-group-message/cluster-subnet-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-subnet-group-message/description (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.redshift/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.redshift/modify-cluster-subnet-group-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.modify-cluster-subnet-group-message/ClusterSubnetGroupName :portkey.aws.redshift.modify-cluster-subnet-group-message/SubnetIds] :opt-un [:portkey.aws.redshift.modify-cluster-subnet-group-message/Description] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.disable-logging-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/disable-logging-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.disable-logging-message/ClusterIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.describe-reserved-node-offerings-message/reserved-node-offering-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-reserved-node-offerings-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-reserved-node-offerings-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/describe-reserved-node-offerings-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.describe-reserved-node-offerings-message/ReservedNodeOfferingId :portkey.aws.redshift.describe-reserved-node-offerings-message/MaxRecords :portkey.aws.redshift.describe-reserved-node-offerings-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/reserved-node-offering-type {"Regular" "Regular", :regular "Regular", "Upgradable" "Upgradable", :upgradable "Upgradable"})

(clojure.spec.alpha/def :portkey.aws.redshift/revoke-cluster-security-group-ingress-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/ClusterSecurityGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/invalid-table-restore-argument-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/orderable-cluster-options-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/orderable-cluster-option))

(clojure.spec.alpha/def :portkey.aws.redshift.logging-status/logging-enabled (clojure.spec.alpha/and :portkey.aws.redshift/boolean))
(clojure.spec.alpha/def :portkey.aws.redshift.logging-status/bucket-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.logging-status/s3-key-prefix (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.logging-status/last-successful-delivery-time (clojure.spec.alpha/and :portkey.aws.redshift/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.logging-status/last-failure-time (clojure.spec.alpha/and :portkey.aws.redshift/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.logging-status/last-failure-message (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/logging-status (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.logging-status/LoggingEnabled :portkey.aws.redshift.logging-status/BucketName :portkey.aws.redshift.logging-status/S3KeyPrefix :portkey.aws.redshift.logging-status/LastSuccessfulDeliveryTime :portkey.aws.redshift.logging-status/LastFailureTime :portkey.aws.redshift.logging-status/LastFailureMessage] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.cluster-security-group-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/cluster-security-group-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.cluster-security-group-message/Marker :portkey.aws.redshift/ClusterSecurityGroups] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/reserved-node-offering-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/reserved-node-offering))

(clojure.spec.alpha/def :portkey.aws.redshift/event-categories-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/EventCategoriesMapList] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/hsm-configuration-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.describe-events-message/source-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-events-message/start-time (clojure.spec.alpha/and :portkey.aws.redshift/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-events-message/end-time (clojure.spec.alpha/and :portkey.aws.redshift/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-events-message/duration (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-events-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-events-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/describe-events-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.describe-events-message/SourceIdentifier :portkey.aws.redshift/SourceType :portkey.aws.redshift.describe-events-message/StartTime :portkey.aws.redshift.describe-events-message/EndTime :portkey.aws.redshift.describe-events-message/Duration :portkey.aws.redshift.describe-events-message/MaxRecords :portkey.aws.redshift.describe-events-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/parameter-apply-type {"static" "static", :static "static", "dynamic" "dynamic", :dynamic "dynamic"})

(clojure.spec.alpha/def :portkey.aws.redshift/subscription-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/authorization-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/bucket-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/iprange-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/iprange))

(clojure.spec.alpha/def :portkey.aws.redshift/copy-to-region-disabled-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/snstopic-arn-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/event-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/event))

(clojure.spec.alpha/def :portkey.aws.redshift.hsm-client-certificate/hsm-client-certificate-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.hsm-client-certificate/hsm-client-certificate-public-key (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.hsm-client-certificate/tags (clojure.spec.alpha/and :portkey.aws.redshift/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift/hsm-client-certificate (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.hsm-client-certificate/HsmClientCertificateIdentifier :portkey.aws.redshift.hsm-client-certificate/HsmClientCertificatePublicKey :portkey.aws.redshift.hsm-client-certificate/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.events-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.events-message/events (clojure.spec.alpha/and :portkey.aws.redshift/event-list))
(clojure.spec.alpha/def :portkey.aws.redshift/events-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.events-message/Marker :portkey.aws.redshift.events-message/Events] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/source-type {"cluster" "cluster", :cluster "cluster", "cluster-parameter-group" "cluster-parameter-group", :cluster-parameter-group "cluster-parameter-group", "cluster-security-group" "cluster-security-group", :cluster-security-group "cluster-security-group", "cluster-snapshot" "cluster-snapshot", :cluster-snapshot "cluster-snapshot"})

(clojure.spec.alpha/def :portkey.aws.redshift/create-cluster-snapshot-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/Snapshot] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-security-group-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/unauthorized-operation (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/subscription-category-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.event/source-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.event/message (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.event/event-categories (clojure.spec.alpha/and :portkey.aws.redshift/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.redshift.event/severity (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.event/date (clojure.spec.alpha/and :portkey.aws.redshift/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.event/event-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/event (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.event/SourceIdentifier :portkey.aws.redshift/SourceType :portkey.aws.redshift.event/Message :portkey.aws.redshift.event/EventCategories :portkey.aws.redshift.event/Severity :portkey.aws.redshift.event/Date :portkey.aws.redshift.event/EventId] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.revoke-cluster-security-group-ingress-message/cluster-security-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.revoke-cluster-security-group-ingress-message/cidrip (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.revoke-cluster-security-group-ingress-message/ec2-security-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.revoke-cluster-security-group-ingress-message/ec2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/revoke-cluster-security-group-ingress-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.revoke-cluster-security-group-ingress-message/ClusterSecurityGroupName] :opt-un [:portkey.aws.redshift.revoke-cluster-security-group-ingress-message/CIDRIP :portkey.aws.redshift.revoke-cluster-security-group-ingress-message/EC2SecurityGroupName :portkey.aws.redshift.revoke-cluster-security-group-ingress-message/EC2SecurityGroupOwnerId] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/rotate-encryption-key-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/Cluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/invalid-hsm-client-certificate-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.disable-snapshot-copy-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/disable-snapshot-copy-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.disable-snapshot-copy-message/ClusterIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/availability-zone-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/availability-zone))

(clojure.spec.alpha/def :portkey.aws.redshift.availability-zone/name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.availability-zone/supported-platforms (clojure.spec.alpha/and :portkey.aws.redshift/supported-platforms-list))
(clojure.spec.alpha/def :portkey.aws.redshift/availability-zone (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.availability-zone/Name :portkey.aws.redshift.availability-zone/SupportedPlatforms] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.event-subscriptions-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/event-subscriptions-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.event-subscriptions-message/Marker :portkey.aws.redshift/EventSubscriptionsList] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/create-event-subscription-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/EventSubscription] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/restore-table-from-cluster-snapshot-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/TableRestoreStatus] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.delete-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/delete-event-subscription-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.delete-event-subscription-message/SubscriptionName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.supported-platform/name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/supported-platform (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.supported-platform/Name] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/sensitive-string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/cluster))

(clojure.spec.alpha/def :portkey.aws.redshift/invalid-subscription-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-security-groups-message/cluster-security-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-security-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-security-groups-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-security-groups-message/tag-keys (clojure.spec.alpha/and :portkey.aws.redshift/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-security-groups-message/tag-values (clojure.spec.alpha/and :portkey.aws.redshift/tag-value-list))
(clojure.spec.alpha/def :portkey.aws.redshift/describe-cluster-security-groups-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.describe-cluster-security-groups-message/ClusterSecurityGroupName :portkey.aws.redshift.describe-cluster-security-groups-message/MaxRecords :portkey.aws.redshift.describe-cluster-security-groups-message/Marker :portkey.aws.redshift.describe-cluster-security-groups-message/TagKeys :portkey.aws.redshift.describe-cluster-security-groups-message/TagValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-security-groups (clojure.spec.alpha/coll-of :portkey.aws.redshift/cluster-security-group))

(clojure.spec.alpha/def :portkey.aws.redshift.recurring-charge/recurring-charge-amount (clojure.spec.alpha/and :portkey.aws.redshift/double))
(clojure.spec.alpha/def :portkey.aws.redshift.recurring-charge/recurring-charge-frequency (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/recurring-charge (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.recurring-charge/RecurringChargeAmount :portkey.aws.redshift.recurring-charge/RecurringChargeFrequency] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/resize-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-parameter-group-message/parameter-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.redshift/parameters-list))
(clojure.spec.alpha/def :portkey.aws.redshift/modify-cluster-parameter-group-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.modify-cluster-parameter-group-message/ParameterGroupName :portkey.aws.redshift.modify-cluster-parameter-group-message/Parameters] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/restore-from-cluster-snapshot-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/Cluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/authorization-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-snapshot-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.create-tags-message/resource-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-tags-message/tags (clojure.spec.alpha/and :portkey.aws.redshift/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift/create-tags-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.create-tags-message/ResourceName :portkey.aws.redshift.create-tags-message/Tags] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/reboot-cluster-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/Cluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/subnet-already-in-use (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.cluster-security-group-membership/cluster-security-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-security-group-membership/status (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/cluster-security-group-membership (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.cluster-security-group-membership/ClusterSecurityGroupName :portkey.aws.redshift.cluster-security-group-membership/Status] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-subnet-group-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.cluster-iam-role/iam-role-arn (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-iam-role/apply-status (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/cluster-iam-role (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.cluster-iam-role/IamRoleArn :portkey.aws.redshift.cluster-iam-role/ApplyStatus] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/invalid-subnet (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/tag-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/tag))

(clojure.spec.alpha/def :portkey.aws.redshift/create-cluster-security-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/ClusterSecurityGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.hsm-client-certificate-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.hsm-client-certificate-message/hsm-client-certificates (clojure.spec.alpha/and :portkey.aws.redshift/hsm-client-certificate-list))
(clojure.spec.alpha/def :portkey.aws.redshift/hsm-client-certificate-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.hsm-client-certificate-message/Marker :portkey.aws.redshift.hsm-client-certificate-message/HsmClientCertificates] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-parameters-message/parameter-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-parameters-message/source (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/describe-cluster-parameters-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.describe-cluster-parameters-message/ParameterGroupName] :opt-un [:portkey.aws.redshift.describe-cluster-parameters-message/Source :portkey.aws.redshift.describe-cluster-parameters-message/MaxRecords :portkey.aws.redshift.describe-cluster-parameters-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-snapshot-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.describe-tags-message/resource-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-tags-message/resource-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-tags-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-tags-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-tags-message/tag-keys (clojure.spec.alpha/and :portkey.aws.redshift/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-tags-message/tag-values (clojure.spec.alpha/and :portkey.aws.redshift/tag-value-list))
(clojure.spec.alpha/def :portkey.aws.redshift/describe-tags-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.describe-tags-message/ResourceName :portkey.aws.redshift.describe-tags-message/ResourceType :portkey.aws.redshift.describe-tags-message/MaxRecords :portkey.aws.redshift.describe-tags-message/Marker :portkey.aws.redshift.describe-tags-message/TagKeys :portkey.aws.redshift.describe-tags-message/TagValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/reserved-node-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/hsm-client-certificate-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/tag-key-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/string))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-subnet-group-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-snapshots-message/tag-keys (clojure.spec.alpha/and :portkey.aws.redshift/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-snapshots-message/tag-values (clojure.spec.alpha/and :portkey.aws.redshift/tag-value-list))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-snapshots-message/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-snapshots-message/end-time (clojure.spec.alpha/and :portkey.aws.redshift/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-snapshots-message/start-time (clojure.spec.alpha/and :portkey.aws.redshift/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-snapshots-message/owner-account (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-snapshots-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-snapshots-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-snapshots-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-snapshots-message/snapshot-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-snapshots-message/cluster-exists (clojure.spec.alpha/and :portkey.aws.redshift/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift/describe-cluster-snapshots-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.describe-cluster-snapshots-message/TagKeys :portkey.aws.redshift.describe-cluster-snapshots-message/TagValues :portkey.aws.redshift.describe-cluster-snapshots-message/SnapshotIdentifier :portkey.aws.redshift.describe-cluster-snapshots-message/EndTime :portkey.aws.redshift.describe-cluster-snapshots-message/StartTime :portkey.aws.redshift.describe-cluster-snapshots-message/OwnerAccount :portkey.aws.redshift.describe-cluster-snapshots-message/ClusterIdentifier :portkey.aws.redshift.describe-cluster-snapshots-message/MaxRecords :portkey.aws.redshift.describe-cluster-snapshots-message/Marker :portkey.aws.redshift.describe-cluster-snapshots-message/SnapshotType :portkey.aws.redshift.describe-cluster-snapshots-message/ClusterExists] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/unsupported-option-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/hsm-configuration-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.describe-logging-status-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/describe-logging-status-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.describe-logging-status-message/ClusterIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/subscription-already-exist-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/invalids3-key-prefix-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.delete-snapshot-copy-grant-message/snapshot-copy-grant-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/delete-snapshot-copy-grant-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.delete-snapshot-copy-grant-message/SnapshotCopyGrantName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.cluster/cluster-public-key (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/enhanced-vpc-routing (clojure.spec.alpha/and :portkey.aws.redshift/boolean))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/publicly-accessible (clojure.spec.alpha/and :portkey.aws.redshift/boolean))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/encrypted (clojure.spec.alpha/and :portkey.aws.redshift/boolean))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/cluster-subnet-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/number-of-nodes (clojure.spec.alpha/and :portkey.aws.redshift/integer))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/tags (clojure.spec.alpha/and :portkey.aws.redshift/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/dbname (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/cluster-parameter-groups (clojure.spec.alpha/and :portkey.aws.redshift/cluster-parameter-group-status-list))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/availability-zone (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/cluster-security-groups (clojure.spec.alpha/and :portkey.aws.redshift/cluster-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/master-username (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/cluster-status (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/vpc-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/kms-key-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/cluster-create-time (clojure.spec.alpha/and :portkey.aws.redshift/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/cluster-revision-number (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/allow-version-upgrade (clojure.spec.alpha/and :portkey.aws.redshift/boolean))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/cluster-version (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/modify-status (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/automated-snapshot-retention-period (clojure.spec.alpha/and :portkey.aws.redshift/integer))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/iam-roles (clojure.spec.alpha/and :portkey.aws.redshift/cluster-iam-role-list))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/vpc-security-groups (clojure.spec.alpha/and :portkey.aws.redshift/vpc-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/cluster-nodes (clojure.spec.alpha/and :portkey.aws.redshift/cluster-nodes-list))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster/node-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/cluster (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.cluster/ClusterPublicKey :portkey.aws.redshift.cluster/EnhancedVpcRouting :portkey.aws.redshift.cluster/PubliclyAccessible :portkey.aws.redshift.cluster/PreferredMaintenanceWindow :portkey.aws.redshift.cluster/Encrypted :portkey.aws.redshift.cluster/ClusterIdentifier :portkey.aws.redshift/ClusterSnapshotCopyStatus :portkey.aws.redshift.cluster/ClusterSubnetGroupName :portkey.aws.redshift.cluster/NumberOfNodes :portkey.aws.redshift.cluster/Tags :portkey.aws.redshift.cluster/DBName :portkey.aws.redshift.cluster/ClusterParameterGroups :portkey.aws.redshift.cluster/AvailabilityZone :portkey.aws.redshift.cluster/ClusterSecurityGroups :portkey.aws.redshift.cluster/MasterUsername :portkey.aws.redshift.cluster/ClusterStatus :portkey.aws.redshift.cluster/VpcId :portkey.aws.redshift.cluster/KmsKeyId :portkey.aws.redshift/RestoreStatus :portkey.aws.redshift.cluster/ClusterCreateTime :portkey.aws.redshift.cluster/ClusterRevisionNumber :portkey.aws.redshift.cluster/AllowVersionUpgrade :portkey.aws.redshift.cluster/ClusterVersion :portkey.aws.redshift.cluster/ModifyStatus :portkey.aws.redshift/Endpoint :portkey.aws.redshift.cluster/AutomatedSnapshotRetentionPeriod :portkey.aws.redshift.cluster/IamRoles :portkey.aws.redshift.cluster/VpcSecurityGroups :portkey.aws.redshift.cluster/ClusterNodes :portkey.aws.redshift/HsmStatus :portkey.aws.redshift/ElasticIpStatus :portkey.aws.redshift.cluster/NodeType :portkey.aws.redshift/PendingModifiedValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/snapshot-copy-grant-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/in-progress-table-restore-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/hsm-client-certificate-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/hsm-client-certificate))

(clojure.spec.alpha/def :portkey.aws.redshift/invalid-snapshot-copy-grant-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.reserved-node-offering/currency-code (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.reserved-node-offering/fixed-price (clojure.spec.alpha/and :portkey.aws.redshift/double))
(clojure.spec.alpha/def :portkey.aws.redshift.reserved-node-offering/reserved-node-offering-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.reserved-node-offering/duration (clojure.spec.alpha/and :portkey.aws.redshift/integer))
(clojure.spec.alpha/def :portkey.aws.redshift.reserved-node-offering/usage-price (clojure.spec.alpha/and :portkey.aws.redshift/double))
(clojure.spec.alpha/def :portkey.aws.redshift.reserved-node-offering/recurring-charges (clojure.spec.alpha/and :portkey.aws.redshift/recurring-charge-list))
(clojure.spec.alpha/def :portkey.aws.redshift.reserved-node-offering/offering-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.reserved-node-offering/node-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/reserved-node-offering (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.reserved-node-offering/CurrencyCode :portkey.aws.redshift.reserved-node-offering/FixedPrice :portkey.aws.redshift/ReservedNodeOfferingType :portkey.aws.redshift.reserved-node-offering/ReservedNodeOfferingId :portkey.aws.redshift.reserved-node-offering/Duration :portkey.aws.redshift.reserved-node-offering/UsagePrice :portkey.aws.redshift.reserved-node-offering/RecurringCharges :portkey.aws.redshift.reserved-node-offering/OfferingType :portkey.aws.redshift.reserved-node-offering/NodeType] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-snapshot-message/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-snapshot-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.redshift/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift/create-cluster-snapshot-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.create-cluster-snapshot-message/SnapshotIdentifier :portkey.aws.redshift.create-cluster-snapshot-message/ClusterIdentifier] :opt-un [:portkey.aws.redshift.create-cluster-snapshot-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/invalid-cluster-subnet-group-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/modify-cluster-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/Cluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/limit-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.delete-cluster-security-group-message/cluster-security-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/delete-cluster-security-group-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.delete-cluster-security-group-message/ClusterSecurityGroupName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/accounts-with-restore-access-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/account-with-restore-access))

(clojure.spec.alpha/def :portkey.aws.redshift.vpc-security-group-membership/vpc-security-group-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.vpc-security-group-membership/status (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/vpc-security-group-membership (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.vpc-security-group-membership/VpcSecurityGroupId :portkey.aws.redshift.vpc-security-group-membership/Status] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/authorization-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.describe-reserved-nodes-message/reserved-node-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-reserved-nodes-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-reserved-nodes-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/describe-reserved-nodes-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.describe-reserved-nodes-message/ReservedNodeId :portkey.aws.redshift.describe-reserved-nodes-message/MaxRecords :portkey.aws.redshift.describe-reserved-nodes-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/invalid-cluster-security-group-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.event-info-map/event-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.event-info-map/event-categories (clojure.spec.alpha/and :portkey.aws.redshift/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.redshift.event-info-map/event-description (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.event-info-map/severity (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/event-info-map (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.event-info-map/EventId :portkey.aws.redshift.event-info-map/EventCategories :portkey.aws.redshift.event-info-map/EventDescription :portkey.aws.redshift.event-info-map/Severity] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-parameter-group-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/subscription-event-id-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.delete-cluster-subnet-group-message/cluster-subnet-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/delete-cluster-subnet-group-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.delete-cluster-subnet-group-message/ClusterSubnetGroupName] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/insufficients3-bucket-policy-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.cluster-credentials/db-user (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-credentials/db-password (clojure.spec.alpha/and :portkey.aws.redshift/sensitive-string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-credentials/expiration (clojure.spec.alpha/and :portkey.aws.redshift/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift/cluster-credentials (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.cluster-credentials/DbUser :portkey.aws.redshift.cluster-credentials/DbPassword :portkey.aws.redshift.cluster-credentials/Expiration] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/hsm-configuration-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/invalid-cluster-snapshot-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/snapshot-copy-already-enabled-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/resource-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.ec2-security-group/status (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.ec2-security-group/ec2-security-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.ec2-security-group/ec2-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.ec2-security-group/tags (clojure.spec.alpha/and :portkey.aws.redshift/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift/ec2-security-group (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.ec2-security-group/Status :portkey.aws.redshift.ec2-security-group/EC2SecurityGroupName :portkey.aws.redshift.ec2-security-group/EC2SecurityGroupOwnerId :portkey.aws.redshift.ec2-security-group/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-subnet-group-message/cluster-subnet-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-subnet-group-message/description (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.redshift/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-subnet-group-message/tags (clojure.spec.alpha/and :portkey.aws.redshift/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift/create-cluster-subnet-group-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.create-cluster-subnet-group-message/ClusterSubnetGroupName :portkey.aws.redshift.create-cluster-subnet-group-message/Description :portkey.aws.redshift.create-cluster-subnet-group-message/SubnetIds] :opt-un [:portkey.aws.redshift.create-cluster-subnet-group-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-message/enhanced-vpc-routing (clojure.spec.alpha/and :portkey.aws.redshift/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.redshift/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-message/hsm-client-certificate-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-message/number-of-nodes (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.redshift/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-message/cluster-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-message/master-user-password (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-message/cluster-security-groups (clojure.spec.alpha/and :portkey.aws.redshift/cluster-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-message/elastic-ip (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-message/hsm-configuration-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-message/allow-version-upgrade (clojure.spec.alpha/and :portkey.aws.redshift/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-message/cluster-version (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-message/automated-snapshot-retention-period (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-message/new-cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-message/node-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-message/cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/modify-cluster-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.modify-cluster-message/ClusterIdentifier] :opt-un [:portkey.aws.redshift.modify-cluster-message/EnhancedVpcRouting :portkey.aws.redshift.modify-cluster-message/PubliclyAccessible :portkey.aws.redshift.modify-cluster-message/PreferredMaintenanceWindow :portkey.aws.redshift.modify-cluster-message/HsmClientCertificateIdentifier :portkey.aws.redshift.modify-cluster-message/NumberOfNodes :portkey.aws.redshift.modify-cluster-message/VpcSecurityGroupIds :portkey.aws.redshift.modify-cluster-message/ClusterType :portkey.aws.redshift.modify-cluster-message/MasterUserPassword :portkey.aws.redshift.modify-cluster-message/ClusterSecurityGroups :portkey.aws.redshift.modify-cluster-message/ElasticIp :portkey.aws.redshift.modify-cluster-message/HsmConfigurationIdentifier :portkey.aws.redshift.modify-cluster-message/AllowVersionUpgrade :portkey.aws.redshift.modify-cluster-message/ClusterVersion :portkey.aws.redshift.modify-cluster-message/AutomatedSnapshotRetentionPeriod :portkey.aws.redshift.modify-cluster-message/NewClusterIdentifier :portkey.aws.redshift.modify-cluster-message/NodeType :portkey.aws.redshift.modify-cluster-message/ClusterParameterGroupName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/copy-cluster-snapshot-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/Snapshot] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/create-snapshot-copy-grant-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/SnapshotCopyGrant] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.delete-cluster-snapshot-message/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.delete-cluster-snapshot-message/snapshot-cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/delete-cluster-snapshot-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.delete-cluster-snapshot-message/SnapshotIdentifier] :opt-un [:portkey.aws.redshift.delete-cluster-snapshot-message/SnapshotClusterIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/event-categories-map-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/event-categories-map))

(clojure.spec.alpha/def :portkey.aws.redshift/integer clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.redshift/iam-role-arn-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/string))

(clojure.spec.alpha/def :portkey.aws.redshift/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.redshift/snapshot-copy-grant-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.parameter/data-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.parameter/parameter-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.parameter/source (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.parameter/minimum-engine-version (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.parameter/allowed-values (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.parameter/apply-type (clojure.spec.alpha/and :portkey.aws.redshift/parameter-apply-type))
(clojure.spec.alpha/def :portkey.aws.redshift.parameter/description (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.parameter/is-modifiable (clojure.spec.alpha/and :portkey.aws.redshift/boolean))
(clojure.spec.alpha/def :portkey.aws.redshift.parameter/parameter-value (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/parameter (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.parameter/DataType :portkey.aws.redshift.parameter/ParameterName :portkey.aws.redshift.parameter/Source :portkey.aws.redshift.parameter/MinimumEngineVersion :portkey.aws.redshift.parameter/AllowedValues :portkey.aws.redshift.parameter/ApplyType :portkey.aws.redshift.parameter/Description :portkey.aws.redshift.parameter/IsModifiable :portkey.aws.redshift.parameter/ParameterValue] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.cluster-parameter-status/parameter-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-parameter-status/parameter-apply-status (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-parameter-status/parameter-apply-error-description (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/cluster-parameter-status (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.cluster-parameter-status/ParameterName :portkey.aws.redshift.cluster-parameter-status/ParameterApplyStatus :portkey.aws.redshift.cluster-parameter-status/ParameterApplyErrorDescription] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/vpc-security-group-id-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/string))

(clojure.spec.alpha/def :portkey.aws.redshift/table-restore-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.cluster-parameter-group-status/parameter-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-parameter-group-status/parameter-apply-status (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/cluster-parameter-group-status (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.cluster-parameter-group-status/ParameterGroupName :portkey.aws.redshift.cluster-parameter-group-status/ParameterApplyStatus :portkey.aws.redshift/ClusterParameterStatusList] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/cluster-security-group-membership))

(clojure.spec.alpha/def :portkey.aws.redshift.restore-status/status (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-status/current-restore-rate-in-mega-bytes-per-second (clojure.spec.alpha/and :portkey.aws.redshift/double))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-status/snapshot-size-in-mega-bytes (clojure.spec.alpha/and :portkey.aws.redshift/long))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-status/progress-in-mega-bytes (clojure.spec.alpha/and :portkey.aws.redshift/long))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-status/elapsed-time-in-seconds (clojure.spec.alpha/and :portkey.aws.redshift/long))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-status/estimated-time-to-completion-in-seconds (clojure.spec.alpha/and :portkey.aws.redshift/long))
(clojure.spec.alpha/def :portkey.aws.redshift/restore-status (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.restore-status/Status :portkey.aws.redshift.restore-status/CurrentRestoreRateInMegaBytesPerSecond :portkey.aws.redshift.restore-status/SnapshotSizeInMegaBytes :portkey.aws.redshift.restore-status/ProgressInMegaBytes :portkey.aws.redshift.restore-status/ElapsedTimeInSeconds :portkey.aws.redshift.restore-status/EstimatedTimeToCompletionInSeconds] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.describe-snapshot-copy-grants-message/snapshot-copy-grant-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-snapshot-copy-grants-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-snapshot-copy-grants-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-snapshot-copy-grants-message/tag-keys (clojure.spec.alpha/and :portkey.aws.redshift/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-snapshot-copy-grants-message/tag-values (clojure.spec.alpha/and :portkey.aws.redshift/tag-value-list))
(clojure.spec.alpha/def :portkey.aws.redshift/describe-snapshot-copy-grants-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.describe-snapshot-copy-grants-message/SnapshotCopyGrantName :portkey.aws.redshift.describe-snapshot-copy-grants-message/MaxRecords :portkey.aws.redshift.describe-snapshot-copy-grants-message/Marker :portkey.aws.redshift.describe-snapshot-copy-grants-message/TagKeys :portkey.aws.redshift.describe-snapshot-copy-grants-message/TagValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.delete-cluster-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.delete-cluster-message/skip-final-cluster-snapshot (clojure.spec.alpha/and :portkey.aws.redshift/boolean))
(clojure.spec.alpha/def :portkey.aws.redshift.delete-cluster-message/final-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/delete-cluster-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.delete-cluster-message/ClusterIdentifier] :opt-un [:portkey.aws.redshift.delete-cluster-message/SkipFinalClusterSnapshot :portkey.aws.redshift.delete-cluster-message/FinalClusterSnapshotIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-security-group-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.reboot-cluster-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/reboot-cluster-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.reboot-cluster-message/ClusterIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/reserved-node-offering-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-security-group-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/incompatible-orderable-options (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/restorable-node-types (clojure.spec.alpha/and :portkey.aws.redshift/restorable-node-type-list))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/snapshot-create-time (clojure.spec.alpha/and :portkey.aws.redshift/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/enhanced-vpc-routing (clojure.spec.alpha/and :portkey.aws.redshift/boolean))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/source-region (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/encrypted-withhsm (clojure.spec.alpha/and :portkey.aws.redshift/boolean))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/encrypted (clojure.spec.alpha/and :portkey.aws.redshift/boolean))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/owner-account (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/number-of-nodes (clojure.spec.alpha/and :portkey.aws.redshift/integer))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/tags (clojure.spec.alpha/and :portkey.aws.redshift/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/dbname (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/estimated-seconds-to-completion (clojure.spec.alpha/and :portkey.aws.redshift/long))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/availability-zone (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/status (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/snapshot-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/actual-incremental-backup-size-in-mega-bytes (clojure.spec.alpha/and :portkey.aws.redshift/double))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/master-username (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/backup-progress-in-mega-bytes (clojure.spec.alpha/and :portkey.aws.redshift/double))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/accounts-with-restore-access (clojure.spec.alpha/and :portkey.aws.redshift/accounts-with-restore-access-list))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/port (clojure.spec.alpha/and :portkey.aws.redshift/integer))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/vpc-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/kms-key-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/cluster-create-time (clojure.spec.alpha/and :portkey.aws.redshift/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/cluster-version (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/elapsed-time-in-seconds (clojure.spec.alpha/and :portkey.aws.redshift/long))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/current-backup-rate-in-mega-bytes-per-second (clojure.spec.alpha/and :portkey.aws.redshift/double))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/node-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot/total-backup-size-in-mega-bytes (clojure.spec.alpha/and :portkey.aws.redshift/double))
(clojure.spec.alpha/def :portkey.aws.redshift/snapshot (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.snapshot/SnapshotIdentifier :portkey.aws.redshift.snapshot/RestorableNodeTypes :portkey.aws.redshift.snapshot/SnapshotCreateTime :portkey.aws.redshift.snapshot/EnhancedVpcRouting :portkey.aws.redshift.snapshot/SourceRegion :portkey.aws.redshift.snapshot/EncryptedWithHSM :portkey.aws.redshift.snapshot/Encrypted :portkey.aws.redshift.snapshot/OwnerAccount :portkey.aws.redshift.snapshot/ClusterIdentifier :portkey.aws.redshift.snapshot/NumberOfNodes :portkey.aws.redshift.snapshot/Tags :portkey.aws.redshift.snapshot/DBName :portkey.aws.redshift.snapshot/EstimatedSecondsToCompletion :portkey.aws.redshift.snapshot/AvailabilityZone :portkey.aws.redshift.snapshot/Status :portkey.aws.redshift.snapshot/SnapshotType :portkey.aws.redshift.snapshot/ActualIncrementalBackupSizeInMegaBytes :portkey.aws.redshift.snapshot/MasterUsername :portkey.aws.redshift.snapshot/BackupProgressInMegaBytes :portkey.aws.redshift.snapshot/AccountsWithRestoreAccess :portkey.aws.redshift.snapshot/Port :portkey.aws.redshift.snapshot/VpcId :portkey.aws.redshift.snapshot/KmsKeyId :portkey.aws.redshift.snapshot/ClusterCreateTime :portkey.aws.redshift.snapshot/ClusterVersion :portkey.aws.redshift.snapshot/ElapsedTimeInSeconds :portkey.aws.redshift.snapshot/CurrentBackupRateInMegaBytesPerSecond :portkey.aws.redshift.snapshot/NodeType :portkey.aws.redshift.snapshot/TotalBackupSizeInMegaBytes] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/tstamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.redshift/delete-cluster-snapshot-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/Snapshot] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-subnet-groups (clojure.spec.alpha/coll-of :portkey.aws.redshift/cluster-subnet-group))

(clojure.spec.alpha/def :portkey.aws.redshift.event-categories-map/source-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.event-categories-map/events (clojure.spec.alpha/and :portkey.aws.redshift/event-info-map-list))
(clojure.spec.alpha/def :portkey.aws.redshift/event-categories-map (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.event-categories-map/SourceType :portkey.aws.redshift.event-categories-map/Events] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/event-subscription-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.create-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-event-subscription-message/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-event-subscription-message/source-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-event-subscription-message/source-ids (clojure.spec.alpha/and :portkey.aws.redshift/source-ids-list))
(clojure.spec.alpha/def :portkey.aws.redshift.create-event-subscription-message/event-categories (clojure.spec.alpha/and :portkey.aws.redshift/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.redshift.create-event-subscription-message/severity (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-event-subscription-message/enabled (clojure.spec.alpha/and :portkey.aws.redshift/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.create-event-subscription-message/tags (clojure.spec.alpha/and :portkey.aws.redshift/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift/create-event-subscription-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.create-event-subscription-message/SubscriptionName :portkey.aws.redshift.create-event-subscription-message/SnsTopicArn] :opt-un [:portkey.aws.redshift.create-event-subscription-message/SourceType :portkey.aws.redshift.create-event-subscription-message/SourceIds :portkey.aws.redshift.create-event-subscription-message/EventCategories :portkey.aws.redshift.create-event-subscription-message/Severity :portkey.aws.redshift.create-event-subscription-message/Enabled :portkey.aws.redshift.create-event-subscription-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-parameter-group-status-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/cluster-parameter-group-status))

(clojure.spec.alpha/def :portkey.aws.redshift/create-cluster-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/Cluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/recurring-charge-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/recurring-charge))

(clojure.spec.alpha/def :portkey.aws.redshift.snapshot-copy-grant-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot-copy-grant-message/snapshot-copy-grants (clojure.spec.alpha/and :portkey.aws.redshift/snapshot-copy-grant-list))
(clojure.spec.alpha/def :portkey.aws.redshift/snapshot-copy-grant-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.snapshot-copy-grant-message/Marker :portkey.aws.redshift.snapshot-copy-grant-message/SnapshotCopyGrants] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.tagged-resource-list-message/tagged-resources (clojure.spec.alpha/and :portkey.aws.redshift/tagged-resource-list))
(clojure.spec.alpha/def :portkey.aws.redshift.tagged-resource-list-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/tagged-resource-list-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.tagged-resource-list-message/TaggedResources :portkey.aws.redshift.tagged-resource-list-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.describe-orderable-cluster-options-message/cluster-version (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-orderable-cluster-options-message/node-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-orderable-cluster-options-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-orderable-cluster-options-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/describe-orderable-cluster-options-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.describe-orderable-cluster-options-message/ClusterVersion :portkey.aws.redshift.describe-orderable-cluster-options-message/NodeType :portkey.aws.redshift.describe-orderable-cluster-options-message/MaxRecords :portkey.aws.redshift.describe-orderable-cluster-options-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/event-categories-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/string))

(clojure.spec.alpha/def :portkey.aws.redshift/invalid-tag-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/dependent-service-unavailable-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.account-with-restore-access/account-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.account-with-restore-access/account-alias (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/account-with-restore-access (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.account-with-restore-access/AccountId :portkey.aws.redshift.account-with-restore-access/AccountAlias] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-subnet-group-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/table-restore-status-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/table-restore-status))

(clojure.spec.alpha/def :portkey.aws.redshift.cluster-parameter-group-details/parameters (clojure.spec.alpha/and :portkey.aws.redshift/parameters-list))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-parameter-group-details/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/cluster-parameter-group-details (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.cluster-parameter-group-details/Parameters :portkey.aws.redshift.cluster-parameter-group-details/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.cluster-version/cluster-version (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-version/cluster-parameter-group-family (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-version/description (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/cluster-version (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.cluster-version/ClusterVersion :portkey.aws.redshift.cluster-version/ClusterParameterGroupFamily :portkey.aws.redshift.cluster-version/Description] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.orderable-cluster-options-message/orderable-cluster-options (clojure.spec.alpha/and :portkey.aws.redshift/orderable-cluster-options-list))
(clojure.spec.alpha/def :portkey.aws.redshift.orderable-cluster-options-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/orderable-cluster-options-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.orderable-cluster-options-message/OrderableClusterOptions :portkey.aws.redshift.orderable-cluster-options-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.rotate-encryption-key-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/rotate-encryption-key-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.rotate-encryption-key-message/ClusterIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.endpoint/address (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.endpoint/port (clojure.spec.alpha/and :portkey.aws.redshift/integer))
(clojure.spec.alpha/def :portkey.aws.redshift/endpoint (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.endpoint/Address :portkey.aws.redshift.endpoint/Port] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-parameter-group-message/parameter-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-parameter-group-message/parameter-group-family (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-parameter-group-message/description (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.redshift/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift/create-cluster-parameter-group-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.create-cluster-parameter-group-message/ParameterGroupName :portkey.aws.redshift.create-cluster-parameter-group-message/ParameterGroupFamily :portkey.aws.redshift.create-cluster-parameter-group-message/Description] :opt-un [:portkey.aws.redshift.create-cluster-parameter-group-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.table-restore-status/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.table-restore-status/target-schema-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.table-restore-status/source-schema-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.table-restore-status/total-data-in-mega-bytes (clojure.spec.alpha/and :portkey.aws.redshift/long-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.table-restore-status/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.table-restore-status/request-time (clojure.spec.alpha/and :portkey.aws.redshift/tstamp))
(clojure.spec.alpha/def :portkey.aws.redshift.table-restore-status/new-table-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.table-restore-status/progress-in-mega-bytes (clojure.spec.alpha/and :portkey.aws.redshift/long-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.table-restore-status/source-database-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.table-restore-status/status (clojure.spec.alpha/and :portkey.aws.redshift/table-restore-status-type))
(clojure.spec.alpha/def :portkey.aws.redshift.table-restore-status/message (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.table-restore-status/source-table-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.table-restore-status/table-restore-request-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.table-restore-status/target-database-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/table-restore-status (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.table-restore-status/SnapshotIdentifier :portkey.aws.redshift.table-restore-status/TargetSchemaName :portkey.aws.redshift.table-restore-status/SourceSchemaName :portkey.aws.redshift.table-restore-status/TotalDataInMegaBytes :portkey.aws.redshift.table-restore-status/ClusterIdentifier :portkey.aws.redshift.table-restore-status/RequestTime :portkey.aws.redshift.table-restore-status/NewTableName :portkey.aws.redshift.table-restore-status/ProgressInMegaBytes :portkey.aws.redshift.table-restore-status/SourceDatabaseName :portkey.aws.redshift.table-restore-status/Status :portkey.aws.redshift.table-restore-status/Message :portkey.aws.redshift.table-restore-status/SourceTableName :portkey.aws.redshift.table-restore-status/TableRestoreRequestId :portkey.aws.redshift.table-restore-status/TargetDatabaseName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.redshift/invalid-restore-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/import-tables-completed (clojure.spec.alpha/coll-of :portkey.aws.redshift/string))

(clojure.spec.alpha/def :portkey.aws.redshift/reserved-node-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/reserved-node))

(clojure.spec.alpha/def :portkey.aws.redshift/invalid-cluster-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/snapshot-copy-already-disabled-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.create-hsm-configuration-message/hsm-configuration-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-hsm-configuration-message/description (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-hsm-configuration-message/hsm-ip-address (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-hsm-configuration-message/hsm-partition-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-hsm-configuration-message/hsm-partition-password (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-hsm-configuration-message/hsm-server-public-certificate (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-hsm-configuration-message/tags (clojure.spec.alpha/and :portkey.aws.redshift/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift/create-hsm-configuration-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.create-hsm-configuration-message/HsmConfigurationIdentifier :portkey.aws.redshift.create-hsm-configuration-message/Description :portkey.aws.redshift.create-hsm-configuration-message/HsmIpAddress :portkey.aws.redshift.create-hsm-configuration-message/HsmPartitionName :portkey.aws.redshift.create-hsm-configuration-message/HsmPartitionPassword :portkey.aws.redshift.create-hsm-configuration-message/HsmServerPublicCertificate] :opt-un [:portkey.aws.redshift.create-hsm-configuration-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/import-tables-in-progress (clojure.spec.alpha/coll-of :portkey.aws.redshift/string))

(clojure.spec.alpha/def :portkey.aws.redshift/snapshot-copy-disabled-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-not-found-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.cluster-subnet-group-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/cluster-subnet-group-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.cluster-subnet-group-message/Marker :portkey.aws.redshift/ClusterSubnetGroups] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.delete-tags-message/resource-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.delete-tags-message/tag-keys (clojure.spec.alpha/and :portkey.aws.redshift/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.redshift/delete-tags-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.delete-tags-message/ResourceName :portkey.aws.redshift.delete-tags-message/TagKeys] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/number-of-nodes-quota-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/purchase-reserved-node-offering-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/ReservedNode] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.iprange/status (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.iprange/cidrip (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.iprange/tags (clojure.spec.alpha/and :portkey.aws.redshift/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift/iprange (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.iprange/Status :portkey.aws.redshift.iprange/CIDRIP :portkey.aws.redshift.iprange/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.clusters-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.clusters-message/clusters (clojure.spec.alpha/and :portkey.aws.redshift/cluster-list))
(clojure.spec.alpha/def :portkey.aws.redshift/clusters-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.clusters-message/Marker :portkey.aws.redshift.clusters-message/Clusters] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.cluster-subnet-group/cluster-subnet-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-subnet-group/description (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-subnet-group/vpc-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-subnet-group/subnet-group-status (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-subnet-group/subnets (clojure.spec.alpha/and :portkey.aws.redshift/subnet-list))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-subnet-group/tags (clojure.spec.alpha/and :portkey.aws.redshift/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift/cluster-subnet-group (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.cluster-subnet-group/ClusterSubnetGroupName :portkey.aws.redshift.cluster-subnet-group/Description :portkey.aws.redshift.cluster-subnet-group/VpcId :portkey.aws.redshift.cluster-subnet-group/SubnetGroupStatus :portkey.aws.redshift.cluster-subnet-group/Subnets :portkey.aws.redshift.cluster-subnet-group/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/create-hsm-client-certificate-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/HsmClientCertificate] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-nodes-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/cluster-node))

(clojure.spec.alpha/def :portkey.aws.redshift/revoke-snapshot-access-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/Snapshot] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/invalid-cluster-subnet-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/delete-cluster-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/Cluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.modify-snapshot-copy-retention-period-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-snapshot-copy-retention-period-message/retention-period (clojure.spec.alpha/and :portkey.aws.redshift/integer))
(clojure.spec.alpha/def :portkey.aws.redshift/modify-snapshot-copy-retention-period-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.modify-snapshot-copy-retention-period-message/ClusterIdentifier :portkey.aws.redshift.modify-snapshot-copy-retention-period-message/RetentionPeriod] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/modify-snapshot-copy-retention-period-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/Cluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.cluster-parameter-group-name-message/parameter-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-parameter-group-name-message/parameter-group-status (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/cluster-parameter-group-name-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.cluster-parameter-group-name-message/ParameterGroupName :portkey.aws.redshift.cluster-parameter-group-name-message/ParameterGroupStatus] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.delete-hsm-client-certificate-message/hsm-client-certificate-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/delete-hsm-client-certificate-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.delete-hsm-client-certificate-message/HsmClientCertificateIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/modify-event-subscription-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/EventSubscription] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.tag/key (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.tag/value (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/tag (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.tag/Key :portkey.aws.redshift.tag/Value] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.describe-event-categories-message/source-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/describe-event-categories-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.describe-event-categories-message/SourceType] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.cluster-versions-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-versions-message/cluster-versions (clojure.spec.alpha/and :portkey.aws.redshift/cluster-version-list))
(clojure.spec.alpha/def :portkey.aws.redshift/cluster-versions-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.cluster-versions-message/Marker :portkey.aws.redshift.cluster-versions-message/ClusterVersions] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/snapshot-copy-grant-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/boolean-optional clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.redshift/snsinvalid-topic-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-iam-role-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/cluster-iam-role))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-security-group-name-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/string))

(clojure.spec.alpha/def :portkey.aws.redshift.tagged-resource/resource-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.tagged-resource/resource-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/tagged-resource (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/Tag :portkey.aws.redshift.tagged-resource/ResourceName :portkey.aws.redshift.tagged-resource/ResourceType] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/unknown-snapshot-copy-region-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/modify-cluster-subnet-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/ClusterSubnetGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/access-to-snapshot-denied-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/restorable-node-type-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/string))

(clojure.spec.alpha/def :portkey.aws.redshift.copy-cluster-snapshot-message/source-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.copy-cluster-snapshot-message/source-snapshot-cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.copy-cluster-snapshot-message/target-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/copy-cluster-snapshot-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.copy-cluster-snapshot-message/SourceSnapshotIdentifier :portkey.aws.redshift.copy-cluster-snapshot-message/TargetSnapshotIdentifier] :opt-un [:portkey.aws.redshift.copy-cluster-snapshot-message/SourceSnapshotClusterIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/hsm-client-certificate-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/create-cluster-subnet-group-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/ClusterSubnetGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.cluster-parameter-group/parameter-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-parameter-group/parameter-group-family (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-parameter-group/description (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-parameter-group/tags (clojure.spec.alpha/and :portkey.aws.redshift/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift/cluster-parameter-group (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.cluster-parameter-group/ParameterGroupName :portkey.aws.redshift.cluster-parameter-group/ParameterGroupFamily :portkey.aws.redshift.cluster-parameter-group/Description :portkey.aws.redshift.cluster-parameter-group/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/invalid-cluster-parameter-group-state-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/event-subscriptions-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/event-subscription))

(clojure.spec.alpha/def :portkey.aws.redshift/hsm-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/hsm-configuration))

(clojure.spec.alpha/def :portkey.aws.redshift/authorize-cluster-security-group-ingress-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/ClusterSecurityGroup] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-subnet-groups-message/cluster-subnet-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-subnet-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-subnet-groups-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-subnet-groups-message/tag-keys (clojure.spec.alpha/and :portkey.aws.redshift/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-subnet-groups-message/tag-values (clojure.spec.alpha/and :portkey.aws.redshift/tag-value-list))
(clojure.spec.alpha/def :portkey.aws.redshift/describe-cluster-subnet-groups-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.describe-cluster-subnet-groups-message/ClusterSubnetGroupName :portkey.aws.redshift.describe-cluster-subnet-groups-message/MaxRecords :portkey.aws.redshift.describe-cluster-subnet-groups-message/Marker :portkey.aws.redshift.describe-cluster-subnet-groups-message/TagKeys :portkey.aws.redshift.describe-cluster-subnet-groups-message/TagValues] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/tag-limit-exceeded-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.create-hsm-client-certificate-message/hsm-client-certificate-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-hsm-client-certificate-message/tags (clojure.spec.alpha/and :portkey.aws.redshift/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift/create-hsm-client-certificate-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.create-hsm-client-certificate-message/HsmClientCertificateIdentifier] :opt-un [:portkey.aws.redshift.create-hsm-client-certificate-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/long-optional clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.redshift/modify-cluster-iam-roles-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/Cluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/db-group-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/string))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-version-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/cluster-version))

(clojure.spec.alpha/def :portkey.aws.redshift/integer-optional clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.redshift.hsm-status/hsm-client-certificate-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.hsm-status/hsm-configuration-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.hsm-status/status (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/hsm-status (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.hsm-status/HsmClientCertificateIdentifier :portkey.aws.redshift.hsm-status/HsmConfigurationIdentifier :portkey.aws.redshift.hsm-status/Status] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.elastic-ip-status/elastic-ip (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.elastic-ip-status/status (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/elastic-ip-status (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.elastic-ip-status/ElasticIp :portkey.aws.redshift.elastic-ip-status/Status] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.orderable-cluster-option/cluster-version (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.orderable-cluster-option/cluster-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.orderable-cluster-option/node-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.orderable-cluster-option/availability-zones (clojure.spec.alpha/and :portkey.aws.redshift/availability-zone-list))
(clojure.spec.alpha/def :portkey.aws.redshift/orderable-cluster-option (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.orderable-cluster-option/ClusterVersion :portkey.aws.redshift.orderable-cluster-option/ClusterType :portkey.aws.redshift.orderable-cluster-option/NodeType :portkey.aws.redshift.orderable-cluster-option/AvailabilityZones] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.restore-table-from-cluster-snapshot-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-table-from-cluster-snapshot-message/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-table-from-cluster-snapshot-message/source-database-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-table-from-cluster-snapshot-message/source-schema-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-table-from-cluster-snapshot-message/source-table-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-table-from-cluster-snapshot-message/target-database-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-table-from-cluster-snapshot-message/target-schema-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.restore-table-from-cluster-snapshot-message/new-table-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/restore-table-from-cluster-snapshot-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.restore-table-from-cluster-snapshot-message/ClusterIdentifier :portkey.aws.redshift.restore-table-from-cluster-snapshot-message/SnapshotIdentifier :portkey.aws.redshift.restore-table-from-cluster-snapshot-message/SourceDatabaseName :portkey.aws.redshift.restore-table-from-cluster-snapshot-message/SourceTableName :portkey.aws.redshift.restore-table-from-cluster-snapshot-message/NewTableName] :opt-un [:portkey.aws.redshift.restore-table-from-cluster-snapshot-message/SourceSchemaName :portkey.aws.redshift.restore-table-from-cluster-snapshot-message/TargetDatabaseName :portkey.aws.redshift.restore-table-from-cluster-snapshot-message/TargetSchemaName] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/cluster-snapshot-already-exists-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-iam-roles-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-iam-roles-message/add-iam-roles (clojure.spec.alpha/and :portkey.aws.redshift/iam-role-arn-list))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-cluster-iam-roles-message/remove-iam-roles (clojure.spec.alpha/and :portkey.aws.redshift/iam-role-arn-list))
(clojure.spec.alpha/def :portkey.aws.redshift/modify-cluster-iam-roles-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.modify-cluster-iam-roles-message/ClusterIdentifier] :opt-un [:portkey.aws.redshift.modify-cluster-iam-roles-message/AddIamRoles :portkey.aws.redshift.modify-cluster-iam-roles-message/RemoveIamRoles] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/unsupported-operation-fault (portkey.aws/json-keys :req-un [] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-versions-message/cluster-version (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-versions-message/cluster-parameter-group-family (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-versions-message/max-records (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.describe-cluster-versions-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/describe-cluster-versions-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.describe-cluster-versions-message/ClusterVersion :portkey.aws.redshift.describe-cluster-versions-message/ClusterParameterGroupFamily :portkey.aws.redshift.describe-cluster-versions-message/MaxRecords :portkey.aws.redshift.describe-cluster-versions-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.create-snapshot-copy-grant-message/snapshot-copy-grant-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-snapshot-copy-grant-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-snapshot-copy-grant-message/tags (clojure.spec.alpha/and :portkey.aws.redshift/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift/create-snapshot-copy-grant-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.create-snapshot-copy-grant-message/SnapshotCopyGrantName] :opt-un [:portkey.aws.redshift.create-snapshot-copy-grant-message/KmsKeyId :portkey.aws.redshift.create-snapshot-copy-grant-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/create-hsm-configuration-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/HsmConfiguration] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.purchase-reserved-node-offering-message/reserved-node-offering-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.purchase-reserved-node-offering-message/node-count (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift/purchase-reserved-node-offering-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.purchase-reserved-node-offering-message/ReservedNodeOfferingId] :opt-un [:portkey.aws.redshift.purchase-reserved-node-offering-message/NodeCount] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.cluster-security-group/cluster-security-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-security-group/description (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-security-group/ec2-security-groups (clojure.spec.alpha/and :portkey.aws.redshift/ec2-security-group-list))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-security-group/ipranges (clojure.spec.alpha/and :portkey.aws.redshift/iprange-list))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-security-group/tags (clojure.spec.alpha/and :portkey.aws.redshift/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift/cluster-security-group (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.cluster-security-group/ClusterSecurityGroupName :portkey.aws.redshift.cluster-security-group/Description :portkey.aws.redshift.cluster-security-group/EC2SecurityGroups :portkey.aws.redshift.cluster-security-group/IPRanges :portkey.aws.redshift.cluster-security-group/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.pending-modified-values/enhanced-vpc-routing (clojure.spec.alpha/and :portkey.aws.redshift/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.pending-modified-values/publicly-accessible (clojure.spec.alpha/and :portkey.aws.redshift/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.pending-modified-values/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.pending-modified-values/number-of-nodes (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.pending-modified-values/cluster-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.pending-modified-values/master-user-password (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.pending-modified-values/cluster-version (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.pending-modified-values/automated-snapshot-retention-period (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.pending-modified-values/node-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/pending-modified-values (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.pending-modified-values/EnhancedVpcRouting :portkey.aws.redshift.pending-modified-values/PubliclyAccessible :portkey.aws.redshift.pending-modified-values/ClusterIdentifier :portkey.aws.redshift.pending-modified-values/NumberOfNodes :portkey.aws.redshift.pending-modified-values/ClusterType :portkey.aws.redshift.pending-modified-values/MasterUserPassword :portkey.aws.redshift.pending-modified-values/ClusterVersion :portkey.aws.redshift.pending-modified-values/AutomatedSnapshotRetentionPeriod :portkey.aws.redshift.pending-modified-values/NodeType] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/subnet-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/subnet))

(clojure.spec.alpha/def :portkey.aws.redshift.authorize-snapshot-access-message/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.authorize-snapshot-access-message/snapshot-cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.authorize-snapshot-access-message/account-with-restore-access (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/authorize-snapshot-access-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.authorize-snapshot-access-message/SnapshotIdentifier :portkey.aws.redshift.authorize-snapshot-access-message/AccountWithRestoreAccess] :opt-un [:portkey.aws.redshift.authorize-snapshot-access-message/SnapshotClusterIdentifier] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.reset-cluster-parameter-group-message/parameter-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.reset-cluster-parameter-group-message/reset-all-parameters (clojure.spec.alpha/and :portkey.aws.redshift/boolean))
(clojure.spec.alpha/def :portkey.aws.redshift.reset-cluster-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.redshift/parameters-list))
(clojure.spec.alpha/def :portkey.aws.redshift/reset-cluster-parameter-group-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.reset-cluster-parameter-group-message/ParameterGroupName] :opt-un [:portkey.aws.redshift.reset-cluster-parameter-group-message/ResetAllParameters :portkey.aws.redshift.reset-cluster-parameter-group-message/Parameters] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/enable-snapshot-copy-result (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift/Cluster] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.cluster-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.cluster-parameter-groups-message/parameter-groups (clojure.spec.alpha/and :portkey.aws.redshift/parameter-group-list))
(clojure.spec.alpha/def :portkey.aws.redshift/cluster-parameter-groups-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.cluster-parameter-groups-message/Marker :portkey.aws.redshift.cluster-parameter-groups-message/ParameterGroups] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.snapshot-copy-grant/snapshot-copy-grant-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot-copy-grant/kms-key-id (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.snapshot-copy-grant/tags (clojure.spec.alpha/and :portkey.aws.redshift/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift/snapshot-copy-grant (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.snapshot-copy-grant/SnapshotCopyGrantName :portkey.aws.redshift.snapshot-copy-grant/KmsKeyId :portkey.aws.redshift.snapshot-copy-grant/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.delete-hsm-configuration-message/hsm-configuration-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/delete-hsm-configuration-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.delete-hsm-configuration-message/HsmConfigurationIdentifier] :opt-un [] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-security-group-message/cluster-security-group-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-security-group-message/description (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.create-cluster-security-group-message/tags (clojure.spec.alpha/and :portkey.aws.redshift/tag-list))
(clojure.spec.alpha/def :portkey.aws.redshift/create-cluster-security-group-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.create-cluster-security-group-message/ClusterSecurityGroupName :portkey.aws.redshift.create-cluster-security-group-message/Description] :opt-un [:portkey.aws.redshift.create-cluster-security-group-message/Tags] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/parameter-group-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/cluster-parameter-group))

(clojure.spec.alpha/def :portkey.aws.redshift/tagged-resource-list (clojure.spec.alpha/coll-of :portkey.aws.redshift/tagged-resource))

(clojure.spec.alpha/def :portkey.aws.redshift.table-restore-status-message/table-restore-status-details (clojure.spec.alpha/and :portkey.aws.redshift/table-restore-status-list))
(clojure.spec.alpha/def :portkey.aws.redshift.table-restore-status-message/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift/table-restore-status-message (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.table-restore-status-message/TableRestoreStatusDetails :portkey.aws.redshift.table-restore-status-message/Marker] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.get-cluster-credentials-message/db-user (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.get-cluster-credentials-message/db-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.get-cluster-credentials-message/cluster-identifier (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.get-cluster-credentials-message/duration-seconds (clojure.spec.alpha/and :portkey.aws.redshift/integer-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.get-cluster-credentials-message/auto-create (clojure.spec.alpha/and :portkey.aws.redshift/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift.get-cluster-credentials-message/db-groups (clojure.spec.alpha/and :portkey.aws.redshift/db-group-list))
(clojure.spec.alpha/def :portkey.aws.redshift/get-cluster-credentials-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.get-cluster-credentials-message/DbUser :portkey.aws.redshift.get-cluster-credentials-message/ClusterIdentifier] :opt-un [:portkey.aws.redshift.get-cluster-credentials-message/DbName :portkey.aws.redshift.get-cluster-credentials-message/DurationSeconds :portkey.aws.redshift.get-cluster-credentials-message/AutoCreate :portkey.aws.redshift.get-cluster-credentials-message/DbGroups] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift.modify-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-event-subscription-message/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-event-subscription-message/source-type (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-event-subscription-message/source-ids (clojure.spec.alpha/and :portkey.aws.redshift/source-ids-list))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-event-subscription-message/event-categories (clojure.spec.alpha/and :portkey.aws.redshift/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-event-subscription-message/severity (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.modify-event-subscription-message/enabled (clojure.spec.alpha/and :portkey.aws.redshift/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.redshift/modify-event-subscription-message (portkey.aws/json-keys :req-un [:portkey.aws.redshift.modify-event-subscription-message/SubscriptionName] :opt-un [:portkey.aws.redshift.modify-event-subscription-message/SnsTopicArn :portkey.aws.redshift.modify-event-subscription-message/SourceType :portkey.aws.redshift.modify-event-subscription-message/SourceIds :portkey.aws.redshift.modify-event-subscription-message/EventCategories :portkey.aws.redshift.modify-event-subscription-message/Severity :portkey.aws.redshift.modify-event-subscription-message/Enabled] :locations {}))

(clojure.spec.alpha/def :portkey.aws.redshift/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.redshift.default-cluster-parameters/parameter-group-family (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.default-cluster-parameters/marker (clojure.spec.alpha/and :portkey.aws.redshift/string))
(clojure.spec.alpha/def :portkey.aws.redshift.default-cluster-parameters/parameters (clojure.spec.alpha/and :portkey.aws.redshift/parameters-list))
(clojure.spec.alpha/def :portkey.aws.redshift/default-cluster-parameters (portkey.aws/json-keys :req-un [] :opt-un [:portkey.aws.redshift.default-cluster-parameters/ParameterGroupFamily :portkey.aws.redshift.default-cluster-parameters/Marker :portkey.aws.redshift.default-cluster-parameters/Parameters] :locations {}))

(clojure.core/defn describe-cluster-parameters "Returns a detailed list of parameters contained within the specified Amazon\nRedshift parameter group. For each parameter the response includes information\nsuch as parameter name, description, data type, value, whether the parameter\nvalue is modifiable, and so on.\n You can specify source filter to retrieve parameters of only specific type. For\nexample, to retrieve parameters that were modified by a user action such as from\nModifyClusterParameterGroup, you can specify source equal to user.\n For more information about parameters and parameter groups, go to Amazon\nRedshift Parameter Groups\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html)\nin the Amazon Redshift Cluster Management Guide." ([describe-cluster-parameters-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-cluster-parameters-message "DescribeClusterParameters" describe-cluster-parameters-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/describe-cluster-parameters-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/cluster-parameter-group-details {"ClusterParameterGroupNotFoundFault" :portkey.aws.redshift/cluster-parameter-group-not-found-fault}))))
(clojure.spec.alpha/fdef describe-cluster-parameters :args (clojure.spec.alpha/tuple :portkey.aws.redshift/describe-cluster-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/cluster-parameter-group-details))

(clojure.core/defn enable-snapshot-copy "Enables the automatic copy of snapshots from one region to another region for a\nspecified cluster." ([enable-snapshot-copy-message] (clojure.core/let [req<-input__36755__auto__ (req<-enable-snapshot-copy-message "EnableSnapshotCopy" enable-snapshot-copy-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/enable-snapshot-copy-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/enable-snapshot-copy-result {"DependentServiceRequestThrottlingFault" :portkey.aws.redshift/dependent-service-request-throttling-fault, "CopyToRegionDisabledFault" :portkey.aws.redshift/copy-to-region-disabled-fault, "UnauthorizedOperation" :portkey.aws.redshift/unauthorized-operation, "SnapshotCopyGrantNotFoundFault" :portkey.aws.redshift/snapshot-copy-grant-not-found-fault, "LimitExceededFault" :portkey.aws.redshift/limit-exceeded-fault, "SnapshotCopyAlreadyEnabledFault" :portkey.aws.redshift/snapshot-copy-already-enabled-fault, "IncompatibleOrderableOptions" :portkey.aws.redshift/incompatible-orderable-options, "InvalidClusterStateFault" :portkey.aws.redshift/invalid-cluster-state-fault, "ClusterNotFoundFault" :portkey.aws.redshift/cluster-not-found-fault, "UnknownSnapshotCopyRegionFault" :portkey.aws.redshift/unknown-snapshot-copy-region-fault}))))
(clojure.spec.alpha/fdef enable-snapshot-copy :args (clojure.spec.alpha/tuple :portkey.aws.redshift/enable-snapshot-copy-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/enable-snapshot-copy-result))

(clojure.core/defn disable-snapshot-copy "Disables the automatic copying of snapshots from one region to another region\nfor a specified cluster.\n If your cluster and its snapshots are encrypted using a customer master key\n(CMK) from AWS KMS, use DeleteSnapshotCopyGrant to delete the grant that grants\nAmazon Redshift permission to the CMK in the destination region." ([disable-snapshot-copy-message] (clojure.core/let [req<-input__36755__auto__ (req<-disable-snapshot-copy-message "DisableSnapshotCopy" disable-snapshot-copy-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/disable-snapshot-copy-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/disable-snapshot-copy-result {"ClusterNotFoundFault" :portkey.aws.redshift/cluster-not-found-fault, "SnapshotCopyAlreadyDisabledFault" :portkey.aws.redshift/snapshot-copy-already-disabled-fault, "InvalidClusterStateFault" :portkey.aws.redshift/invalid-cluster-state-fault, "UnauthorizedOperation" :portkey.aws.redshift/unauthorized-operation}))))
(clojure.spec.alpha/fdef disable-snapshot-copy :args (clojure.spec.alpha/tuple :portkey.aws.redshift/disable-snapshot-copy-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/disable-snapshot-copy-result))

(clojure.core/defn create-cluster "Creates a new cluster.\n To create the cluster in Virtual Private Cloud (VPC), you must provide a\ncluster subnet group name. The cluster subnet group identifies the subnets of\nyour VPC that Amazon Redshift uses when creating the cluster. For more\ninformation about managing clusters, go to Amazon Redshift Clusters\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html) in\nthe Amazon Redshift Cluster Management Guide." ([create-cluster-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-cluster-message "CreateCluster" create-cluster-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/create-cluster-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/create-cluster-result {"DependentServiceRequestThrottlingFault" :portkey.aws.redshift/dependent-service-request-throttling-fault, "InsufficientClusterCapacityFault" :portkey.aws.redshift/insufficient-cluster-capacity-fault, "NumberOfNodesPerClusterLimitExceededFault" :portkey.aws.redshift/number-of-nodes-per-cluster-limit-exceeded-fault, "InvalidElasticIpFault" :portkey.aws.redshift/invalid-elastic-ip-fault, "ClusterAlreadyExistsFault" :portkey.aws.redshift/cluster-already-exists-fault, "InvalidVPCNetworkStateFault" :portkey.aws.redshift/invalidvpcnetwork-state-fault, "UnauthorizedOperation" :portkey.aws.redshift/unauthorized-operation, "InvalidSubnet" :portkey.aws.redshift/invalid-subnet, "HsmClientCertificateNotFoundFault" :portkey.aws.redshift/hsm-client-certificate-not-found-fault, "ClusterSubnetGroupNotFoundFault" :portkey.aws.redshift/cluster-subnet-group-not-found-fault, "HsmConfigurationNotFoundFault" :portkey.aws.redshift/hsm-configuration-not-found-fault, "ClusterQuotaExceededFault" :portkey.aws.redshift/cluster-quota-exceeded-fault, "InvalidClusterSubnetGroupStateFault" :portkey.aws.redshift/invalid-cluster-subnet-group-state-fault, "LimitExceededFault" :portkey.aws.redshift/limit-exceeded-fault, "ClusterParameterGroupNotFoundFault" :portkey.aws.redshift/cluster-parameter-group-not-found-fault, "ClusterSecurityGroupNotFoundFault" :portkey.aws.redshift/cluster-security-group-not-found-fault, "InvalidTagFault" :portkey.aws.redshift/invalid-tag-fault, "NumberOfNodesQuotaExceededFault" :portkey.aws.redshift/number-of-nodes-quota-exceeded-fault, "TagLimitExceededFault" :portkey.aws.redshift/tag-limit-exceeded-fault}))))
(clojure.spec.alpha/fdef create-cluster :args (clojure.spec.alpha/tuple :portkey.aws.redshift/create-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/create-cluster-result))

(clojure.core/defn describe-cluster-snapshots "Returns one or more snapshot objects, which contain metadata about your cluster\nsnapshots. By default, this operation returns information about all snapshots of\nall clusters that are owned by you AWS customer account. No information is\nreturned for snapshots owned by inactive AWS customer accounts.\n If you specify both tag keys and tag values in the same request, Amazon\nRedshift returns all snapshots that match any combination of the specified keys\nand values. For example, if you have owner and environment for tag keys, and\nadmin and test for tag values, all snapshots that have any combination of those\nvalues are returned. Only snapshots that you own are returned in the response;\nshared snapshots are not returned with the tag key and tag value request\nparameters.\n If both tag keys and values are omitted from the request, snapshots are\nreturned regardless of whether they have tag keys or values associated with\nthem." ([] (describe-cluster-snapshots {})) ([describe-cluster-snapshots-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-cluster-snapshots-message "DescribeClusterSnapshots" describe-cluster-snapshots-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/describe-cluster-snapshots-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/snapshot-message {"ClusterNotFoundFault" :portkey.aws.redshift/cluster-not-found-fault, "ClusterSnapshotNotFoundFault" :portkey.aws.redshift/cluster-snapshot-not-found-fault, "InvalidTagFault" :portkey.aws.redshift/invalid-tag-fault}))))
(clojure.spec.alpha/fdef describe-cluster-snapshots :args (clojure.spec.alpha/? :portkey.aws.redshift/describe-cluster-snapshots-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/snapshot-message))

(clojure.core/defn create-hsm-client-certificate "Creates an HSM client certificate that an Amazon Redshift cluster will use to\nconnect to the client's HSM in order to store and retrieve the keys used to\nencrypt the cluster databases.\n The command returns a public key, which you must store in the HSM. In addition\nto creating the HSM certificate, you must create an Amazon Redshift HSM\nconfiguration that provides a cluster the information needed to store and use\nencryption keys in the HSM. For more information, go to Hardware Security\nModules (http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-HSM.html)\nin the Amazon Redshift Cluster Management Guide." ([create-hsm-client-certificate-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-hsm-client-certificate-message "CreateHsmClientCertificate" create-hsm-client-certificate-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/create-hsm-client-certificate-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/create-hsm-client-certificate-result {"HsmClientCertificateAlreadyExistsFault" :portkey.aws.redshift/hsm-client-certificate-already-exists-fault, "HsmClientCertificateQuotaExceededFault" :portkey.aws.redshift/hsm-client-certificate-quota-exceeded-fault, "TagLimitExceededFault" :portkey.aws.redshift/tag-limit-exceeded-fault, "InvalidTagFault" :portkey.aws.redshift/invalid-tag-fault}))))
(clojure.spec.alpha/fdef create-hsm-client-certificate :args (clojure.spec.alpha/tuple :portkey.aws.redshift/create-hsm-client-certificate-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/create-hsm-client-certificate-result))

(clojure.core/defn delete-tags "Deletes a tag or tags from a resource. You must provide the ARN of the resource\nfrom which you want to delete the tag or tags." ([delete-tags-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-tags-message "DeleteTags" delete-tags-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/delete-tags-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"ResourceNotFoundFault" :portkey.aws.redshift/resource-not-found-fault, "InvalidTagFault" :portkey.aws.redshift/invalid-tag-fault}))))
(clojure.spec.alpha/fdef delete-tags :args (clojure.spec.alpha/tuple :portkey.aws.redshift/delete-tags-message) :ret clojure.core/true?)

(clojure.core/defn describe-cluster-subnet-groups "Returns one or more cluster subnet group objects, which contain metadata about\nyour cluster subnet groups. By default, this operation returns information about\nall cluster subnet groups that are defined in you AWS account.\n If you specify both tag keys and tag values in the same request, Amazon\nRedshift returns all subnet groups that match any combination of the specified\nkeys and values. For example, if you have owner and environment for tag keys,\nand admin and test for tag values, all subnet groups that have any combination\nof those values are returned.\n If both tag keys and values are omitted from the request, subnet groups are\nreturned regardless of whether they have tag keys or values associated with\nthem." ([] (describe-cluster-subnet-groups {})) ([describe-cluster-subnet-groups-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-cluster-subnet-groups-message "DescribeClusterSubnetGroups" describe-cluster-subnet-groups-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/describe-cluster-subnet-groups-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/cluster-subnet-group-message {"ClusterSubnetGroupNotFoundFault" :portkey.aws.redshift/cluster-subnet-group-not-found-fault, "InvalidTagFault" :portkey.aws.redshift/invalid-tag-fault}))))
(clojure.spec.alpha/fdef describe-cluster-subnet-groups :args (clojure.spec.alpha/? :portkey.aws.redshift/describe-cluster-subnet-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/cluster-subnet-group-message))

(clojure.core/defn delete-cluster-subnet-group "Deletes the specified cluster subnet group." ([delete-cluster-subnet-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-cluster-subnet-group-message "DeleteClusterSubnetGroup" delete-cluster-subnet-group-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/delete-cluster-subnet-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"InvalidClusterSubnetGroupStateFault" :portkey.aws.redshift/invalid-cluster-subnet-group-state-fault, "InvalidClusterSubnetStateFault" :portkey.aws.redshift/invalid-cluster-subnet-state-fault, "ClusterSubnetGroupNotFoundFault" :portkey.aws.redshift/cluster-subnet-group-not-found-fault}))))
(clojure.spec.alpha/fdef delete-cluster-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.redshift/delete-cluster-subnet-group-message) :ret clojure.core/true?)

(clojure.core/defn describe-events "Returns events related to clusters, security groups, snapshots, and parameter\ngroups for the past 14 days. Events specific to a particular cluster, security\ngroup, snapshot or parameter group can be obtained by providing the name as a\nparameter. By default, the past hour of events are returned." ([] (describe-events {})) ([describe-events-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-events-message "DescribeEvents" describe-events-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/describe-events-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/events-message {}))))
(clojure.spec.alpha/fdef describe-events :args (clojure.spec.alpha/? :portkey.aws.redshift/describe-events-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/events-message))

(clojure.core/defn rotate-encryption-key "Rotates the encryption keys for a cluster." ([rotate-encryption-key-message] (clojure.core/let [req<-input__36755__auto__ (req<-rotate-encryption-key-message "RotateEncryptionKey" rotate-encryption-key-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/rotate-encryption-key-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/rotate-encryption-key-result {"ClusterNotFoundFault" :portkey.aws.redshift/cluster-not-found-fault, "InvalidClusterStateFault" :portkey.aws.redshift/invalid-cluster-state-fault, "DependentServiceRequestThrottlingFault" :portkey.aws.redshift/dependent-service-request-throttling-fault}))))
(clojure.spec.alpha/fdef rotate-encryption-key :args (clojure.spec.alpha/tuple :portkey.aws.redshift/rotate-encryption-key-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/rotate-encryption-key-result))

(clojure.core/defn describe-hsm-configurations "Returns information about the specified Amazon Redshift HSM configuration. If no\nconfiguration ID is specified, returns information about all the HSM\nconfigurations owned by your AWS customer account.\n If you specify both tag keys and tag values in the same request, Amazon\nRedshift returns all HSM connections that match any combination of the specified\nkeys and values. For example, if you have owner and environment for tag keys,\nand admin and test for tag values, all HSM connections that have any combination\nof those values are returned.\n If both tag keys and values are omitted from the request, HSM connections are\nreturned regardless of whether they have tag keys or values associated with\nthem." ([] (describe-hsm-configurations {})) ([describe-hsm-configurations-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-hsm-configurations-message "DescribeHsmConfigurations" describe-hsm-configurations-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/describe-hsm-configurations-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/hsm-configuration-message {"HsmConfigurationNotFoundFault" :portkey.aws.redshift/hsm-configuration-not-found-fault, "InvalidTagFault" :portkey.aws.redshift/invalid-tag-fault}))))
(clojure.spec.alpha/fdef describe-hsm-configurations :args (clojure.spec.alpha/? :portkey.aws.redshift/describe-hsm-configurations-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/hsm-configuration-message))

(clojure.core/defn revoke-snapshot-access "Removes the ability of the specified AWS customer account to restore the\nspecified snapshot. If the account is currently restoring the snapshot, the\nrestore will run to completion.\n For more information about working with snapshots, go to Amazon Redshift\nSnapshots\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html) in\nthe Amazon Redshift Cluster Management Guide." ([revoke-snapshot-access-message] (clojure.core/let [req<-input__36755__auto__ (req<-revoke-snapshot-access-message "RevokeSnapshotAccess" revoke-snapshot-access-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/revoke-snapshot-access-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/revoke-snapshot-access-result {"AccessToSnapshotDeniedFault" :portkey.aws.redshift/access-to-snapshot-denied-fault, "AuthorizationNotFoundFault" :portkey.aws.redshift/authorization-not-found-fault, "ClusterSnapshotNotFoundFault" :portkey.aws.redshift/cluster-snapshot-not-found-fault}))))
(clojure.spec.alpha/fdef revoke-snapshot-access :args (clojure.spec.alpha/tuple :portkey.aws.redshift/revoke-snapshot-access-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/revoke-snapshot-access-result))

(clojure.core/defn create-tags "Adds one or more tags to a specified resource.\n A resource can have up to 10 tags. If you try to create more than 10 tags for a\nresource, you will receive an error and the attempt will fail.\n If you specify a key that already exists for the resource, the value for that\nkey will be updated with the new value." ([create-tags-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-tags-message "CreateTags" create-tags-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/create-tags-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"TagLimitExceededFault" :portkey.aws.redshift/tag-limit-exceeded-fault, "ResourceNotFoundFault" :portkey.aws.redshift/resource-not-found-fault, "InvalidTagFault" :portkey.aws.redshift/invalid-tag-fault}))))
(clojure.spec.alpha/fdef create-tags :args (clojure.spec.alpha/tuple :portkey.aws.redshift/create-tags-message) :ret clojure.core/true?)

(clojure.core/defn restore-from-cluster-snapshot "Creates a new cluster from a snapshot. By default, Amazon Redshift creates the\nresulting cluster with the same configuration as the original cluster from which\nthe snapshot was created, except that the new cluster is created with the\ndefault cluster security and parameter groups. After Amazon Redshift creates the\ncluster, you can use the ModifyCluster API to associate a different security\ngroup and different parameter group with the restored cluster. If you are using\na DS node type, you can also choose to change to another DS node type of the\nsame size during restore.\n If you restore a cluster into a VPC, you must provide a cluster subnet group\nwhere you want the cluster restored.\n For more information about working with snapshots, go to Amazon Redshift\nSnapshots\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html) in\nthe Amazon Redshift Cluster Management Guide." ([restore-from-cluster-snapshot-message] (clojure.core/let [req<-input__36755__auto__ (req<-restore-from-cluster-snapshot-message "RestoreFromClusterSnapshot" restore-from-cluster-snapshot-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/restore-from-cluster-snapshot-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/restore-from-cluster-snapshot-result {"DependentServiceRequestThrottlingFault" :portkey.aws.redshift/dependent-service-request-throttling-fault, "InsufficientClusterCapacityFault" :portkey.aws.redshift/insufficient-cluster-capacity-fault, "NumberOfNodesPerClusterLimitExceededFault" :portkey.aws.redshift/number-of-nodes-per-cluster-limit-exceeded-fault, "InvalidElasticIpFault" :portkey.aws.redshift/invalid-elastic-ip-fault, "ClusterAlreadyExistsFault" :portkey.aws.redshift/cluster-already-exists-fault, "InvalidVPCNetworkStateFault" :portkey.aws.redshift/invalidvpcnetwork-state-fault, "UnauthorizedOperation" :portkey.aws.redshift/unauthorized-operation, "ClusterSnapshotNotFoundFault" :portkey.aws.redshift/cluster-snapshot-not-found-fault, "InvalidSubnet" :portkey.aws.redshift/invalid-subnet, "HsmClientCertificateNotFoundFault" :portkey.aws.redshift/hsm-client-certificate-not-found-fault, "ClusterSubnetGroupNotFoundFault" :portkey.aws.redshift/cluster-subnet-group-not-found-fault, "HsmConfigurationNotFoundFault" :portkey.aws.redshift/hsm-configuration-not-found-fault, "ClusterQuotaExceededFault" :portkey.aws.redshift/cluster-quota-exceeded-fault, "InvalidClusterSubnetGroupStateFault" :portkey.aws.redshift/invalid-cluster-subnet-group-state-fault, "LimitExceededFault" :portkey.aws.redshift/limit-exceeded-fault, "ClusterParameterGroupNotFoundFault" :portkey.aws.redshift/cluster-parameter-group-not-found-fault, "InvalidClusterSnapshotStateFault" :portkey.aws.redshift/invalid-cluster-snapshot-state-fault, "ClusterSecurityGroupNotFoundFault" :portkey.aws.redshift/cluster-security-group-not-found-fault, "InvalidRestoreFault" :portkey.aws.redshift/invalid-restore-fault, "NumberOfNodesQuotaExceededFault" :portkey.aws.redshift/number-of-nodes-quota-exceeded-fault, "AccessToSnapshotDeniedFault" :portkey.aws.redshift/access-to-snapshot-denied-fault}))))
(clojure.spec.alpha/fdef restore-from-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.redshift/restore-from-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/restore-from-cluster-snapshot-result))

(clojure.core/defn modify-cluster-parameter-group "Modifies the parameters of a parameter group.\n For more information about parameters and parameter groups, go to Amazon\nRedshift Parameter Groups\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html)\nin the Amazon Redshift Cluster Management Guide." ([modify-cluster-parameter-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-modify-cluster-parameter-group-message "ModifyClusterParameterGroup" modify-cluster-parameter-group-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/modify-cluster-parameter-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/cluster-parameter-group-name-message {"ClusterParameterGroupNotFoundFault" :portkey.aws.redshift/cluster-parameter-group-not-found-fault, "InvalidClusterParameterGroupStateFault" :portkey.aws.redshift/invalid-cluster-parameter-group-state-fault}))))
(clojure.spec.alpha/fdef modify-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.redshift/modify-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/cluster-parameter-group-name-message))

(clojure.core/defn describe-table-restore-status "Lists the status of one or more table restore requests made using the\nRestoreTableFromClusterSnapshot API action. If you don't specify a value for the\nTableRestoreRequestId parameter, then DescribeTableRestoreStatus returns the\nstatus of all table restore requests ordered by the date and time of the request\nin ascending order. Otherwise DescribeTableRestoreStatus returns the status of\nthe table specified by TableRestoreRequestId." ([] (describe-table-restore-status {})) ([describe-table-restore-status-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-table-restore-status-message "DescribeTableRestoreStatus" describe-table-restore-status-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/describe-table-restore-status-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/table-restore-status-message {"TableRestoreNotFoundFault" :portkey.aws.redshift/table-restore-not-found-fault, "ClusterNotFoundFault" :portkey.aws.redshift/cluster-not-found-fault}))))
(clojure.spec.alpha/fdef describe-table-restore-status :args (clojure.spec.alpha/? :portkey.aws.redshift/describe-table-restore-status-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/table-restore-status-message))

(clojure.core/defn revoke-cluster-security-group-ingress "Revokes an ingress rule in an Amazon Redshift security group for a previously\nauthorized IP range or Amazon EC2 security group. To add an ingress rule, see\nAuthorizeClusterSecurityGroupIngress. For information about managing security\ngroups, go to Amazon Redshift Cluster Security Groups\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html)\nin the Amazon Redshift Cluster Management Guide." ([revoke-cluster-security-group-ingress-message] (clojure.core/let [req<-input__36755__auto__ (req<-revoke-cluster-security-group-ingress-message "RevokeClusterSecurityGroupIngress" revoke-cluster-security-group-ingress-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/revoke-cluster-security-group-ingress-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/revoke-cluster-security-group-ingress-result {"ClusterSecurityGroupNotFoundFault" :portkey.aws.redshift/cluster-security-group-not-found-fault, "AuthorizationNotFoundFault" :portkey.aws.redshift/authorization-not-found-fault, "InvalidClusterSecurityGroupStateFault" :portkey.aws.redshift/invalid-cluster-security-group-state-fault}))))
(clojure.spec.alpha/fdef revoke-cluster-security-group-ingress :args (clojure.spec.alpha/tuple :portkey.aws.redshift/revoke-cluster-security-group-ingress-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/revoke-cluster-security-group-ingress-result))

(clojure.core/defn create-cluster-snapshot "Creates a manual snapshot of the specified cluster. The cluster must be in the\navailable state.\n For more information about working with snapshots, go to Amazon Redshift\nSnapshots\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html) in\nthe Amazon Redshift Cluster Management Guide." ([create-cluster-snapshot-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-cluster-snapshot-message "CreateClusterSnapshot" create-cluster-snapshot-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/create-cluster-snapshot-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/create-cluster-snapshot-result {"ClusterSnapshotAlreadyExistsFault" :portkey.aws.redshift/cluster-snapshot-already-exists-fault, "InvalidClusterStateFault" :portkey.aws.redshift/invalid-cluster-state-fault, "ClusterNotFoundFault" :portkey.aws.redshift/cluster-not-found-fault, "ClusterSnapshotQuotaExceededFault" :portkey.aws.redshift/cluster-snapshot-quota-exceeded-fault, "TagLimitExceededFault" :portkey.aws.redshift/tag-limit-exceeded-fault, "InvalidTagFault" :portkey.aws.redshift/invalid-tag-fault}))))
(clojure.spec.alpha/fdef create-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.redshift/create-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/create-cluster-snapshot-result))

(clojure.core/defn create-hsm-configuration "Creates an HSM configuration that contains the information required by an Amazon\nRedshift cluster to store and use database encryption keys in a Hardware\nSecurity Module (HSM). After creating the HSM configuration, you can specify it\nas a parameter when creating a cluster. The cluster will then store its\nencryption keys in the HSM.\n In addition to creating an HSM configuration, you must also create an HSM\nclient certificate. For more information, go to Hardware Security Modules\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-HSM.html) in the\nAmazon Redshift Cluster Management Guide." ([create-hsm-configuration-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-hsm-configuration-message "CreateHsmConfiguration" create-hsm-configuration-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/create-hsm-configuration-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/create-hsm-configuration-result {"HsmConfigurationAlreadyExistsFault" :portkey.aws.redshift/hsm-configuration-already-exists-fault, "HsmConfigurationQuotaExceededFault" :portkey.aws.redshift/hsm-configuration-quota-exceeded-fault, "TagLimitExceededFault" :portkey.aws.redshift/tag-limit-exceeded-fault, "InvalidTagFault" :portkey.aws.redshift/invalid-tag-fault}))))
(clojure.spec.alpha/fdef create-hsm-configuration :args (clojure.spec.alpha/tuple :portkey.aws.redshift/create-hsm-configuration-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/create-hsm-configuration-result))

(clojure.core/defn delete-hsm-client-certificate "Deletes the specified HSM client certificate." ([delete-hsm-client-certificate-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-hsm-client-certificate-message "DeleteHsmClientCertificate" delete-hsm-client-certificate-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/delete-hsm-client-certificate-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"InvalidHsmClientCertificateStateFault" :portkey.aws.redshift/invalid-hsm-client-certificate-state-fault, "HsmClientCertificateNotFoundFault" :portkey.aws.redshift/hsm-client-certificate-not-found-fault}))))
(clojure.spec.alpha/fdef delete-hsm-client-certificate :args (clojure.spec.alpha/tuple :portkey.aws.redshift/delete-hsm-client-certificate-message) :ret clojure.core/true?)

(clojure.core/defn describe-clusters "Returns properties of provisioned clusters including general cluster properties,\ncluster database properties, maintenance and backup properties, and security and\naccess properties. This operation supports pagination. For more information\nabout managing clusters, go to Amazon Redshift Clusters\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html) in\nthe Amazon Redshift Cluster Management Guide.\n If you specify both tag keys and tag values in the same request, Amazon\nRedshift returns all clusters that match any combination of the specified keys\nand values. For example, if you have owner and environment for tag keys, and\nadmin and test for tag values, all clusters that have any combination of those\nvalues are returned.\n If both tag keys and values are omitted from the request, clusters are returned\nregardless of whether they have tag keys or values associated with them." ([] (describe-clusters {})) ([describe-clusters-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-clusters-message "DescribeClusters" describe-clusters-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/describe-clusters-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/clusters-message {"ClusterNotFoundFault" :portkey.aws.redshift/cluster-not-found-fault, "InvalidTagFault" :portkey.aws.redshift/invalid-tag-fault}))))
(clojure.spec.alpha/fdef describe-clusters :args (clojure.spec.alpha/? :portkey.aws.redshift/describe-clusters-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/clusters-message))

(clojure.core/defn disable-logging "Stops logging information, such as queries and connection attempts, for the\nspecified Amazon Redshift cluster." ([disable-logging-message] (clojure.core/let [req<-input__36755__auto__ (req<-disable-logging-message "DisableLogging" disable-logging-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/disable-logging-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/logging-status {"ClusterNotFoundFault" :portkey.aws.redshift/cluster-not-found-fault}))))
(clojure.spec.alpha/fdef disable-logging :args (clojure.spec.alpha/tuple :portkey.aws.redshift/disable-logging-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/logging-status))

(clojure.core/defn delete-cluster-snapshot "Deletes the specified manual snapshot. The snapshot must be in the available\nstate, with no other users authorized to access the snapshot.\n Unlike automated snapshots, manual snapshots are retained even after you delete\nyour cluster. Amazon Redshift does not delete your manual snapshots. You must\ndelete manual snapshot explicitly to avoid getting charged. If other accounts\nare authorized to access the snapshot, you must revoke all of the authorizations\nbefore you can delete the snapshot." ([delete-cluster-snapshot-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-cluster-snapshot-message "DeleteClusterSnapshot" delete-cluster-snapshot-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/delete-cluster-snapshot-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/delete-cluster-snapshot-result {"InvalidClusterSnapshotStateFault" :portkey.aws.redshift/invalid-cluster-snapshot-state-fault, "ClusterSnapshotNotFoundFault" :portkey.aws.redshift/cluster-snapshot-not-found-fault}))))
(clojure.spec.alpha/fdef delete-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.redshift/delete-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/delete-cluster-snapshot-result))

(clojure.core/defn create-snapshot-copy-grant "Creates a snapshot copy grant that permits Amazon Redshift to use a customer\nmaster key (CMK) from AWS Key Management Service (AWS KMS) to encrypt copied\nsnapshots in a destination region.\n For more information about managing snapshot copy grants, go to Amazon Redshift\nDatabase Encryption\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html)\nin the Amazon Redshift Cluster Management Guide." ([create-snapshot-copy-grant-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-snapshot-copy-grant-message "CreateSnapshotCopyGrant" create-snapshot-copy-grant-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/create-snapshot-copy-grant-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/create-snapshot-copy-grant-result {"SnapshotCopyGrantAlreadyExistsFault" :portkey.aws.redshift/snapshot-copy-grant-already-exists-fault, "SnapshotCopyGrantQuotaExceededFault" :portkey.aws.redshift/snapshot-copy-grant-quota-exceeded-fault, "LimitExceededFault" :portkey.aws.redshift/limit-exceeded-fault, "TagLimitExceededFault" :portkey.aws.redshift/tag-limit-exceeded-fault, "InvalidTagFault" :portkey.aws.redshift/invalid-tag-fault, "DependentServiceRequestThrottlingFault" :portkey.aws.redshift/dependent-service-request-throttling-fault}))))
(clojure.spec.alpha/fdef create-snapshot-copy-grant :args (clojure.spec.alpha/tuple :portkey.aws.redshift/create-snapshot-copy-grant-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/create-snapshot-copy-grant-result))

(clojure.core/defn describe-tags "Returns a list of tags. You can return tags from a specific resource by\nspecifying an ARN, or you can return all tags for a given type of resource, such\nas clusters, snapshots, and so on.\n The following are limitations for DescribeTags:\n * You cannot specify an ARN and a resource-type value together in the same\nrequest.\n * You cannot use the MaxRecords and Marker parameters together with the ARN\nparameter.\n * The MaxRecords parameter can be a range from 10 to 50 results to return in a\nrequest.\n If you specify both tag keys and tag values in the same request, Amazon\nRedshift returns all resources that match any combination of the specified keys\nand values. For example, if you have owner and environment for tag keys, and\nadmin and test for tag values, all resources that have any combination of those\nvalues are returned.\n If both tag keys and values are omitted from the request, resources are\nreturned regardless of whether they have tag keys or values associated with\nthem." ([] (describe-tags {})) ([describe-tags-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-tags-message "DescribeTags" describe-tags-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/describe-tags-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/tagged-resource-list-message {"ResourceNotFoundFault" :portkey.aws.redshift/resource-not-found-fault, "InvalidTagFault" :portkey.aws.redshift/invalid-tag-fault}))))
(clojure.spec.alpha/fdef describe-tags :args (clojure.spec.alpha/? :portkey.aws.redshift/describe-tags-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/tagged-resource-list-message))

(clojure.core/defn modify-snapshot-copy-retention-period "Modifies the number of days to retain automated snapshots in the destination\nregion after they are copied from the source region." ([modify-snapshot-copy-retention-period-message] (clojure.core/let [req<-input__36755__auto__ (req<-modify-snapshot-copy-retention-period-message "ModifySnapshotCopyRetentionPeriod" modify-snapshot-copy-retention-period-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/modify-snapshot-copy-retention-period-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/modify-snapshot-copy-retention-period-result {"ClusterNotFoundFault" :portkey.aws.redshift/cluster-not-found-fault, "SnapshotCopyDisabledFault" :portkey.aws.redshift/snapshot-copy-disabled-fault, "UnauthorizedOperation" :portkey.aws.redshift/unauthorized-operation, "InvalidClusterStateFault" :portkey.aws.redshift/invalid-cluster-state-fault}))))
(clojure.spec.alpha/fdef modify-snapshot-copy-retention-period :args (clojure.spec.alpha/tuple :portkey.aws.redshift/modify-snapshot-copy-retention-period-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/modify-snapshot-copy-retention-period-result))

(clojure.core/defn delete-event-subscription "Deletes an Amazon Redshift event notification subscription." ([delete-event-subscription-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-event-subscription-message "DeleteEventSubscription" delete-event-subscription-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/delete-event-subscription-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"SubscriptionNotFoundFault" :portkey.aws.redshift/subscription-not-found-fault, "InvalidSubscriptionStateFault" :portkey.aws.redshift/invalid-subscription-state-fault}))))
(clojure.spec.alpha/fdef delete-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.redshift/delete-event-subscription-message) :ret clojure.core/true?)

(clojure.core/defn describe-default-cluster-parameters "Returns a list of parameter settings for the specified parameter group family.\n For more information about parameters and parameter groups, go to Amazon\nRedshift Parameter Groups\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html)\nin the Amazon Redshift Cluster Management Guide." ([describe-default-cluster-parameters-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-default-cluster-parameters-message "DescribeDefaultClusterParameters" describe-default-cluster-parameters-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/describe-default-cluster-parameters-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/describe-default-cluster-parameters-result {}))))
(clojure.spec.alpha/fdef describe-default-cluster-parameters :args (clojure.spec.alpha/tuple :portkey.aws.redshift/describe-default-cluster-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/describe-default-cluster-parameters-result))

(clojure.core/defn copy-cluster-snapshot "Copies the specified automated cluster snapshot to a new manual cluster\nsnapshot. The source must be an automated snapshot and it must be in the\navailable state.\n When you delete a cluster, Amazon Redshift deletes any automated snapshots of\nthe cluster. Also, when the retention period of the snapshot expires, Amazon\nRedshift automatically deletes it. If you want to keep an automated snapshot for\na longer period, you can make a manual copy of the snapshot. Manual snapshots\nare retained until you delete them.\n For more information about working with snapshots, go to Amazon Redshift\nSnapshots\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html) in\nthe Amazon Redshift Cluster Management Guide." ([copy-cluster-snapshot-message] (clojure.core/let [req<-input__36755__auto__ (req<-copy-cluster-snapshot-message "CopyClusterSnapshot" copy-cluster-snapshot-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/copy-cluster-snapshot-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/copy-cluster-snapshot-result {"ClusterSnapshotAlreadyExistsFault" :portkey.aws.redshift/cluster-snapshot-already-exists-fault, "ClusterSnapshotNotFoundFault" :portkey.aws.redshift/cluster-snapshot-not-found-fault, "InvalidClusterSnapshotStateFault" :portkey.aws.redshift/invalid-cluster-snapshot-state-fault, "ClusterSnapshotQuotaExceededFault" :portkey.aws.redshift/cluster-snapshot-quota-exceeded-fault}))))
(clojure.spec.alpha/fdef copy-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.redshift/copy-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/copy-cluster-snapshot-result))

(clojure.core/defn get-cluster-credentials "Returns a database user name and temporary password with temporary authorization\nto log on to an Amazon Redshift database. The action returns the database user\nname prefixed with IAM: if AutoCreate is False or IAMA: if AutoCreate is True.\nYou can optionally specify one or more database user groups that the user will\njoin at log on. By default, the temporary credentials expire in 900 seconds. You\ncan optionally specify a duration between 900 seconds (15 minutes) and 3600\nseconds (60 minutes). For more information, see Using IAM Authentication to\nGenerate Database User Credentials\n(http://docs.aws.amazon.com/redshift/latest/mgmt/generating-user-credentials.html)\nin the Amazon Redshift Cluster Management Guide.\n The AWS Identity and Access Management (IAM)user or role that executes\nGetClusterCredentials must have an IAM policy attached that allows access to all\nnecessary actions and resources. For more information about permissions, see\nResource Policies for GetClusterCredentials\n(http://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html#redshift-policy-resources.getclustercredentials-resources)\nin the Amazon Redshift Cluster Management Guide.\n If the DbGroups parameter is specified, the IAM policy must allow the\nredshift:JoinGroup action with access to the listed dbgroups.\n In addition, if the AutoCreate parameter is set to True, then the policy must\ninclude the redshift:CreateClusterUser privilege.\n If the DbName parameter is specified, the IAM policy must allow access to the\nresource dbname for the specified database name." ([get-cluster-credentials-message] (clojure.core/let [req<-input__36755__auto__ (req<-get-cluster-credentials-message "GetClusterCredentials" get-cluster-credentials-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/get-cluster-credentials-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/cluster-credentials {"ClusterNotFoundFault" :portkey.aws.redshift/cluster-not-found-fault, "UnsupportedOperationFault" :portkey.aws.redshift/unsupported-operation-fault}))))
(clojure.spec.alpha/fdef get-cluster-credentials :args (clojure.spec.alpha/tuple :portkey.aws.redshift/get-cluster-credentials-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/cluster-credentials))

(clojure.core/defn restore-table-from-cluster-snapshot "Creates a new table from a table in an Amazon Redshift cluster snapshot. You\nmust create the new table within the Amazon Redshift cluster that the snapshot\nwas taken from.\n You cannot use RestoreTableFromClusterSnapshot to restore a table with the same\nname as an existing table in an Amazon Redshift cluster. That is, you cannot\noverwrite an existing table in a cluster with a restored table. If you want to\nreplace your original table with a new, restored table, then rename or drop your\noriginal table before you call RestoreTableFromClusterSnapshot. When you have\nrenamed your original table, then you can pass the original name of the table as\nthe NewTableName parameter value in the call to RestoreTableFromClusterSnapshot.\nThis way, you can replace the original table with the table created from the\nsnapshot." ([restore-table-from-cluster-snapshot-message] (clojure.core/let [req<-input__36755__auto__ (req<-restore-table-from-cluster-snapshot-message "RestoreTableFromClusterSnapshot" restore-table-from-cluster-snapshot-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/restore-table-from-cluster-snapshot-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/restore-table-from-cluster-snapshot-result {"ClusterSnapshotNotFoundFault" :portkey.aws.redshift/cluster-snapshot-not-found-fault, "InProgressTableRestoreQuotaExceededFault" :portkey.aws.redshift/in-progress-table-restore-quota-exceeded-fault, "InvalidClusterSnapshotStateFault" :portkey.aws.redshift/invalid-cluster-snapshot-state-fault, "InvalidTableRestoreArgumentFault" :portkey.aws.redshift/invalid-table-restore-argument-fault, "ClusterNotFoundFault" :portkey.aws.redshift/cluster-not-found-fault, "InvalidClusterStateFault" :portkey.aws.redshift/invalid-cluster-state-fault, "UnsupportedOperationFault" :portkey.aws.redshift/unsupported-operation-fault}))))
(clojure.spec.alpha/fdef restore-table-from-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.redshift/restore-table-from-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/restore-table-from-cluster-snapshot-result))

(clojure.core/defn reset-cluster-parameter-group "Sets one or more parameters of the specified parameter group to their default\nvalues and sets the source values of the parameters to \"engine-default\". To\nreset the entire parameter group specify the ResetAllParameters parameter. For\nparameter changes to take effect you must reboot any associated clusters." ([reset-cluster-parameter-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-reset-cluster-parameter-group-message "ResetClusterParameterGroup" reset-cluster-parameter-group-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/reset-cluster-parameter-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/cluster-parameter-group-name-message {"InvalidClusterParameterGroupStateFault" :portkey.aws.redshift/invalid-cluster-parameter-group-state-fault, "ClusterParameterGroupNotFoundFault" :portkey.aws.redshift/cluster-parameter-group-not-found-fault}))))
(clojure.spec.alpha/fdef reset-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.redshift/reset-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/cluster-parameter-group-name-message))

(clojure.core/defn enable-logging "Starts logging information, such as queries and connection attempts, for the\nspecified Amazon Redshift cluster." ([enable-logging-message] (clojure.core/let [req<-input__36755__auto__ (req<-enable-logging-message "EnableLogging" enable-logging-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/enable-logging-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/logging-status {"ClusterNotFoundFault" :portkey.aws.redshift/cluster-not-found-fault, "BucketNotFoundFault" :portkey.aws.redshift/bucket-not-found-fault, "InsufficientS3BucketPolicyFault" :portkey.aws.redshift/insufficients3-bucket-policy-fault, "InvalidS3KeyPrefixFault" :portkey.aws.redshift/invalids3-key-prefix-fault, "InvalidS3BucketNameFault" :portkey.aws.redshift/invalids3-bucket-name-fault}))))
(clojure.spec.alpha/fdef enable-logging :args (clojure.spec.alpha/tuple :portkey.aws.redshift/enable-logging-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/logging-status))

(clojure.core/defn describe-event-categories "Displays a list of event categories for all event source types, or for a\nspecified source type. For a list of the event categories and source types, go\nto Amazon Redshift Event Notifications\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-event-notifications.html)." ([] (describe-event-categories {})) ([describe-event-categories-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-event-categories-message "DescribeEventCategories" describe-event-categories-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/describe-event-categories-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/event-categories-message {}))))
(clojure.spec.alpha/fdef describe-event-categories :args (clojure.spec.alpha/? :portkey.aws.redshift/describe-event-categories-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/event-categories-message))

(clojure.core/defn describe-cluster-versions "Returns descriptions of the available Amazon Redshift cluster versions. You can\ncall this operation even before creating any clusters to learn more about the\nAmazon Redshift versions. For more information about managing clusters, go to\nAmazon Redshift Clusters\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html) in\nthe Amazon Redshift Cluster Management Guide." ([] (describe-cluster-versions {})) ([describe-cluster-versions-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-cluster-versions-message "DescribeClusterVersions" describe-cluster-versions-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/describe-cluster-versions-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/cluster-versions-message {}))))
(clojure.spec.alpha/fdef describe-cluster-versions :args (clojure.spec.alpha/? :portkey.aws.redshift/describe-cluster-versions-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/cluster-versions-message))

(clojure.core/defn describe-reserved-nodes "Returns the descriptions of the reserved nodes." ([] (describe-reserved-nodes {})) ([describe-reserved-nodes-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-reserved-nodes-message "DescribeReservedNodes" describe-reserved-nodes-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/describe-reserved-nodes-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/reserved-nodes-message {"ReservedNodeNotFoundFault" :portkey.aws.redshift/reserved-node-not-found-fault, "DependentServiceUnavailableFault" :portkey.aws.redshift/dependent-service-unavailable-fault}))))
(clojure.spec.alpha/fdef describe-reserved-nodes :args (clojure.spec.alpha/? :portkey.aws.redshift/describe-reserved-nodes-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/reserved-nodes-message))

(clojure.core/defn modify-cluster "Modifies the settings for a cluster. For example, you can add another security\nor parameter group, update the preferred maintenance window, or change the\nmaster user password. Resetting a cluster password or modifying the security\ngroups associated with a cluster do not need a reboot. However, modifying a\nparameter group requires a reboot for parameters to take effect. For more\ninformation about managing clusters, go to Amazon Redshift Clusters\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html) in\nthe Amazon Redshift Cluster Management Guide.\n You can also change node type and the number of nodes to scale up or down the\ncluster. When resizing a cluster, you must specify both the number of nodes and\nthe node type even if one of the parameters does not change." ([modify-cluster-message] (clojure.core/let [req<-input__36755__auto__ (req<-modify-cluster-message "ModifyCluster" modify-cluster-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/modify-cluster-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/modify-cluster-result {"DependentServiceRequestThrottlingFault" :portkey.aws.redshift/dependent-service-request-throttling-fault, "InsufficientClusterCapacityFault" :portkey.aws.redshift/insufficient-cluster-capacity-fault, "NumberOfNodesPerClusterLimitExceededFault" :portkey.aws.redshift/number-of-nodes-per-cluster-limit-exceeded-fault, "InvalidElasticIpFault" :portkey.aws.redshift/invalid-elastic-ip-fault, "ClusterAlreadyExistsFault" :portkey.aws.redshift/cluster-already-exists-fault, "UnauthorizedOperation" :portkey.aws.redshift/unauthorized-operation, "HsmClientCertificateNotFoundFault" :portkey.aws.redshift/hsm-client-certificate-not-found-fault, "UnsupportedOptionFault" :portkey.aws.redshift/unsupported-option-fault, "HsmConfigurationNotFoundFault" :portkey.aws.redshift/hsm-configuration-not-found-fault, "LimitExceededFault" :portkey.aws.redshift/limit-exceeded-fault, "InvalidClusterSecurityGroupStateFault" :portkey.aws.redshift/invalid-cluster-security-group-state-fault, "ClusterParameterGroupNotFoundFault" :portkey.aws.redshift/cluster-parameter-group-not-found-fault, "ClusterSecurityGroupNotFoundFault" :portkey.aws.redshift/cluster-security-group-not-found-fault, "InvalidClusterStateFault" :portkey.aws.redshift/invalid-cluster-state-fault, "ClusterNotFoundFault" :portkey.aws.redshift/cluster-not-found-fault, "NumberOfNodesQuotaExceededFault" :portkey.aws.redshift/number-of-nodes-quota-exceeded-fault}))))
(clojure.spec.alpha/fdef modify-cluster :args (clojure.spec.alpha/tuple :portkey.aws.redshift/modify-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/modify-cluster-result))

(clojure.core/defn purchase-reserved-node-offering "Allows you to purchase reserved nodes. Amazon Redshift offers a predefined set\nof reserved node offerings. You can purchase one or more of the offerings. You\ncan call the DescribeReservedNodeOfferings API to obtain the available reserved\nnode offerings. You can call this API by providing a specific reserved node\noffering and the number of nodes you want to reserve.\n For more information about reserved node offerings, go to Purchasing Reserved\nNodes\n(http://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html)\nin the Amazon Redshift Cluster Management Guide." ([purchase-reserved-node-offering-message] (clojure.core/let [req<-input__36755__auto__ (req<-purchase-reserved-node-offering-message "PurchaseReservedNodeOffering" purchase-reserved-node-offering-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/purchase-reserved-node-offering-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/purchase-reserved-node-offering-result {"ReservedNodeOfferingNotFoundFault" :portkey.aws.redshift/reserved-node-offering-not-found-fault, "ReservedNodeAlreadyExistsFault" :portkey.aws.redshift/reserved-node-already-exists-fault, "ReservedNodeQuotaExceededFault" :portkey.aws.redshift/reserved-node-quota-exceeded-fault, "UnsupportedOperationFault" :portkey.aws.redshift/unsupported-operation-fault}))))
(clojure.spec.alpha/fdef purchase-reserved-node-offering :args (clojure.spec.alpha/tuple :portkey.aws.redshift/purchase-reserved-node-offering-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/purchase-reserved-node-offering-result))

(clojure.core/defn describe-reserved-node-offerings "Returns a list of the available reserved node offerings by Amazon Redshift with\ntheir descriptions including the node type, the fixed and recurring costs of\nreserving the node and duration the node will be reserved for you. These\ndescriptions help you determine which reserve node offering you want to\npurchase. You then use the unique offering ID in you call to\nPurchaseReservedNodeOffering to reserve one or more nodes for your Amazon\nRedshift cluster.\n For more information about reserved node offerings, go to Purchasing Reserved\nNodes\n(http://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html)\nin the Amazon Redshift Cluster Management Guide." ([] (describe-reserved-node-offerings {})) ([describe-reserved-node-offerings-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-reserved-node-offerings-message "DescribeReservedNodeOfferings" describe-reserved-node-offerings-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/describe-reserved-node-offerings-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/reserved-node-offerings-message {"ReservedNodeOfferingNotFoundFault" :portkey.aws.redshift/reserved-node-offering-not-found-fault, "UnsupportedOperationFault" :portkey.aws.redshift/unsupported-operation-fault, "DependentServiceUnavailableFault" :portkey.aws.redshift/dependent-service-unavailable-fault}))))
(clojure.spec.alpha/fdef describe-reserved-node-offerings :args (clojure.spec.alpha/? :portkey.aws.redshift/describe-reserved-node-offerings-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/reserved-node-offerings-message))

(clojure.core/defn delete-cluster-parameter-group "Deletes a specified Amazon Redshift parameter group.\n You cannot delete a parameter group if it is associated with a cluster." ([delete-cluster-parameter-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-cluster-parameter-group-message "DeleteClusterParameterGroup" delete-cluster-parameter-group-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/delete-cluster-parameter-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"InvalidClusterParameterGroupStateFault" :portkey.aws.redshift/invalid-cluster-parameter-group-state-fault, "ClusterParameterGroupNotFoundFault" :portkey.aws.redshift/cluster-parameter-group-not-found-fault}))))
(clojure.spec.alpha/fdef delete-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.redshift/delete-cluster-parameter-group-message) :ret clojure.core/true?)

(clojure.core/defn delete-snapshot-copy-grant "Deletes the specified snapshot copy grant." ([delete-snapshot-copy-grant-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-snapshot-copy-grant-message "DeleteSnapshotCopyGrant" delete-snapshot-copy-grant-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/delete-snapshot-copy-grant-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"InvalidSnapshotCopyGrantStateFault" :portkey.aws.redshift/invalid-snapshot-copy-grant-state-fault, "SnapshotCopyGrantNotFoundFault" :portkey.aws.redshift/snapshot-copy-grant-not-found-fault}))))
(clojure.spec.alpha/fdef delete-snapshot-copy-grant :args (clojure.spec.alpha/tuple :portkey.aws.redshift/delete-snapshot-copy-grant-message) :ret clojure.core/true?)

(clojure.core/defn delete-cluster "Deletes a previously provisioned cluster. A successful response from the web\nservice indicates that the request was received correctly. Use DescribeClusters\nto monitor the status of the deletion. The delete operation cannot be canceled\nor reverted once submitted. For more information about managing clusters, go to\nAmazon Redshift Clusters\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html) in\nthe Amazon Redshift Cluster Management Guide.\n If you want to shut down the cluster and retain it for future use, set\nSkipFinalClusterSnapshot to false and specify a name for\nFinalClusterSnapshotIdentifier. You can later restore this snapshot to resume\nusing the cluster. If a final cluster snapshot is requested, the status of the\ncluster will be \"final-snapshot\" while the snapshot is being taken, then it's\n\"deleting\" once Amazon Redshift begins deleting the cluster.\n For more information about managing clusters, go to Amazon Redshift Clusters\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html) in\nthe Amazon Redshift Cluster Management Guide." ([delete-cluster-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-cluster-message "DeleteCluster" delete-cluster-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/delete-cluster-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/delete-cluster-result {"ClusterNotFoundFault" :portkey.aws.redshift/cluster-not-found-fault, "InvalidClusterStateFault" :portkey.aws.redshift/invalid-cluster-state-fault, "ClusterSnapshotAlreadyExistsFault" :portkey.aws.redshift/cluster-snapshot-already-exists-fault, "ClusterSnapshotQuotaExceededFault" :portkey.aws.redshift/cluster-snapshot-quota-exceeded-fault}))))
(clojure.spec.alpha/fdef delete-cluster :args (clojure.spec.alpha/tuple :portkey.aws.redshift/delete-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/delete-cluster-result))

(clojure.core/defn modify-event-subscription "Modifies an existing Amazon Redshift event notification subscription." ([modify-event-subscription-message] (clojure.core/let [req<-input__36755__auto__ (req<-modify-event-subscription-message "ModifyEventSubscription" modify-event-subscription-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/modify-event-subscription-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/modify-event-subscription-result {"SourceNotFoundFault" :portkey.aws.redshift/source-not-found-fault, "SNSNoAuthorizationFault" :portkey.aws.redshift/snsno-authorization-fault, "SubscriptionSeverityNotFoundFault" :portkey.aws.redshift/subscription-severity-not-found-fault, "SubscriptionNotFoundFault" :portkey.aws.redshift/subscription-not-found-fault, "SNSTopicArnNotFoundFault" :portkey.aws.redshift/snstopic-arn-not-found-fault, "SubscriptionCategoryNotFoundFault" :portkey.aws.redshift/subscription-category-not-found-fault, "InvalidSubscriptionStateFault" :portkey.aws.redshift/invalid-subscription-state-fault, "SubscriptionEventIdNotFoundFault" :portkey.aws.redshift/subscription-event-id-not-found-fault, "SNSInvalidTopicFault" :portkey.aws.redshift/snsinvalid-topic-fault}))))
(clojure.spec.alpha/fdef modify-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.redshift/modify-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/modify-event-subscription-result))

(clojure.core/defn describe-hsm-client-certificates "Returns information about the specified HSM client certificate. If no\ncertificate ID is specified, returns information about all the HSM certificates\nowned by your AWS customer account.\n If you specify both tag keys and tag values in the same request, Amazon\nRedshift returns all HSM client certificates that match any combination of the\nspecified keys and values. For example, if you have owner and environment for\ntag keys, and admin and test for tag values, all HSM client certificates that\nhave any combination of those values are returned.\n If both tag keys and values are omitted from the request, HSM client\ncertificates are returned regardless of whether they have tag keys or values\nassociated with them." ([] (describe-hsm-client-certificates {})) ([describe-hsm-client-certificates-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-hsm-client-certificates-message "DescribeHsmClientCertificates" describe-hsm-client-certificates-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/describe-hsm-client-certificates-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/hsm-client-certificate-message {"HsmClientCertificateNotFoundFault" :portkey.aws.redshift/hsm-client-certificate-not-found-fault, "InvalidTagFault" :portkey.aws.redshift/invalid-tag-fault}))))
(clojure.spec.alpha/fdef describe-hsm-client-certificates :args (clojure.spec.alpha/? :portkey.aws.redshift/describe-hsm-client-certificates-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/hsm-client-certificate-message))

(clojure.core/defn create-event-subscription "Creates an Amazon Redshift event notification subscription. This action requires\nan ARN (Amazon Resource Name) of an Amazon SNS topic created by either the\nAmazon Redshift console, the Amazon SNS console, or the Amazon SNS API. To\nobtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and\nsubscribe to the topic. The ARN is displayed in the SNS console.\n You can specify the source type, and lists of Amazon Redshift source IDs, event\ncategories, and event severities. Notifications will be sent for all events you\nwant that match those criteria. For example, you can specify source type =\ncluster, source ID = my-cluster-1 and mycluster2, event categories =\nAvailability, Backup, and severity = ERROR. The subscription will only send\nnotifications for those ERROR events in the Availability and Backup categories\nfor the specified clusters.\n If you specify both the source type and source IDs, such as source type =\ncluster and source identifier = my-cluster-1, notifications will be sent for all\nthe cluster events for my-cluster-1. If you specify a source type but do not\nspecify a source identifier, you will receive notice of the events for the\nobjects of that type in your AWS account. If you do not specify either the\nSourceType nor the SourceIdentifier, you will be notified of events generated\nfrom all Amazon Redshift sources belonging to your AWS account. You must specify\na source type if you specify a source ID." ([create-event-subscription-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-event-subscription-message "CreateEventSubscription" create-event-subscription-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/create-event-subscription-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/create-event-subscription-result {"SourceNotFoundFault" :portkey.aws.redshift/source-not-found-fault, "SNSNoAuthorizationFault" :portkey.aws.redshift/snsno-authorization-fault, "SubscriptionSeverityNotFoundFault" :portkey.aws.redshift/subscription-severity-not-found-fault, "SNSTopicArnNotFoundFault" :portkey.aws.redshift/snstopic-arn-not-found-fault, "SubscriptionCategoryNotFoundFault" :portkey.aws.redshift/subscription-category-not-found-fault, "SubscriptionAlreadyExistFault" :portkey.aws.redshift/subscription-already-exist-fault, "SubscriptionEventIdNotFoundFault" :portkey.aws.redshift/subscription-event-id-not-found-fault, "EventSubscriptionQuotaExceededFault" :portkey.aws.redshift/event-subscription-quota-exceeded-fault, "InvalidTagFault" :portkey.aws.redshift/invalid-tag-fault, "SNSInvalidTopicFault" :portkey.aws.redshift/snsinvalid-topic-fault, "TagLimitExceededFault" :portkey.aws.redshift/tag-limit-exceeded-fault}))))
(clojure.spec.alpha/fdef create-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.redshift/create-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/create-event-subscription-result))

(clojure.core/defn create-cluster-security-group "Creates a new Amazon Redshift security group. You use security groups to control\naccess to non-VPC clusters.\n For information about managing security groups, go to Amazon Redshift Cluster\nSecurity Groups\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html)\nin the Amazon Redshift Cluster Management Guide." ([create-cluster-security-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-cluster-security-group-message "CreateClusterSecurityGroup" create-cluster-security-group-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/create-cluster-security-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/create-cluster-security-group-result {"ClusterSecurityGroupAlreadyExistsFault" :portkey.aws.redshift/cluster-security-group-already-exists-fault, "ClusterSecurityGroupQuotaExceededFault" :portkey.aws.redshift/cluster-security-group-quota-exceeded-fault, "TagLimitExceededFault" :portkey.aws.redshift/tag-limit-exceeded-fault, "InvalidTagFault" :portkey.aws.redshift/invalid-tag-fault}))))
(clojure.spec.alpha/fdef create-cluster-security-group :args (clojure.spec.alpha/tuple :portkey.aws.redshift/create-cluster-security-group-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/create-cluster-security-group-result))

(clojure.core/defn describe-snapshot-copy-grants "Returns a list of snapshot copy grants owned by the AWS account in the\ndestination region.\n For more information about managing snapshot copy grants, go to Amazon Redshift\nDatabase Encryption\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html)\nin the Amazon Redshift Cluster Management Guide." ([] (describe-snapshot-copy-grants {})) ([describe-snapshot-copy-grants-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-snapshot-copy-grants-message "DescribeSnapshotCopyGrants" describe-snapshot-copy-grants-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/describe-snapshot-copy-grants-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/snapshot-copy-grant-message {"SnapshotCopyGrantNotFoundFault" :portkey.aws.redshift/snapshot-copy-grant-not-found-fault, "InvalidTagFault" :portkey.aws.redshift/invalid-tag-fault}))))
(clojure.spec.alpha/fdef describe-snapshot-copy-grants :args (clojure.spec.alpha/? :portkey.aws.redshift/describe-snapshot-copy-grants-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/snapshot-copy-grant-message))

(clojure.core/defn authorize-cluster-security-group-ingress "Adds an inbound (ingress) rule to an Amazon Redshift security group. Depending\non whether the application accessing your cluster is running on the Internet or\nan Amazon EC2 instance, you can authorize inbound access to either a Classless\nInterdomain Routing (CIDR)/Internet Protocol (IP) range or to an Amazon EC2\nsecurity group. You can add as many as 20 ingress rules to an Amazon Redshift\nsecurity group.\n If you authorize access to an Amazon EC2 security group, specify\nEC2SecurityGroupName and EC2SecurityGroupOwnerId. The Amazon EC2 security group\nand Amazon Redshift cluster must be in the same AWS region.\n If you authorize access to a CIDR/IP address range, specify CIDRIP. For an\noverview of CIDR blocks, see the Wikipedia article on Classless Inter-Domain\nRouting (http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing).\n You must also associate the security group with a cluster so that clients\nrunning on these IP addresses or the EC2 instance are authorized to connect to\nthe cluster. For information about managing security groups, go to Working with\nSecurity Groups\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html)\nin the Amazon Redshift Cluster Management Guide." ([authorize-cluster-security-group-ingress-message] (clojure.core/let [req<-input__36755__auto__ (req<-authorize-cluster-security-group-ingress-message "AuthorizeClusterSecurityGroupIngress" authorize-cluster-security-group-ingress-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/authorize-cluster-security-group-ingress-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/authorize-cluster-security-group-ingress-result {"ClusterSecurityGroupNotFoundFault" :portkey.aws.redshift/cluster-security-group-not-found-fault, "InvalidClusterSecurityGroupStateFault" :portkey.aws.redshift/invalid-cluster-security-group-state-fault, "AuthorizationAlreadyExistsFault" :portkey.aws.redshift/authorization-already-exists-fault, "AuthorizationQuotaExceededFault" :portkey.aws.redshift/authorization-quota-exceeded-fault}))))
(clojure.spec.alpha/fdef authorize-cluster-security-group-ingress :args (clojure.spec.alpha/tuple :portkey.aws.redshift/authorize-cluster-security-group-ingress-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/authorize-cluster-security-group-ingress-result))

(clojure.core/defn modify-cluster-subnet-group "Modifies a cluster subnet group to include the specified list of VPC subnets.\nThe operation replaces the existing list of subnets with the new list of\nsubnets." ([modify-cluster-subnet-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-modify-cluster-subnet-group-message "ModifyClusterSubnetGroup" modify-cluster-subnet-group-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/modify-cluster-subnet-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/modify-cluster-subnet-group-result {"ClusterSubnetGroupNotFoundFault" :portkey.aws.redshift/cluster-subnet-group-not-found-fault, "ClusterSubnetQuotaExceededFault" :portkey.aws.redshift/cluster-subnet-quota-exceeded-fault, "SubnetAlreadyInUse" :portkey.aws.redshift/subnet-already-in-use, "InvalidSubnet" :portkey.aws.redshift/invalid-subnet, "UnauthorizedOperation" :portkey.aws.redshift/unauthorized-operation, "DependentServiceRequestThrottlingFault" :portkey.aws.redshift/dependent-service-request-throttling-fault}))))
(clojure.spec.alpha/fdef modify-cluster-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.redshift/modify-cluster-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/modify-cluster-subnet-group-result))

(clojure.core/defn delete-hsm-configuration "Deletes the specified Amazon Redshift HSM configuration." ([delete-hsm-configuration-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-hsm-configuration-message "DeleteHsmConfiguration" delete-hsm-configuration-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/delete-hsm-configuration-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"InvalidHsmConfigurationStateFault" :portkey.aws.redshift/invalid-hsm-configuration-state-fault, "HsmConfigurationNotFoundFault" :portkey.aws.redshift/hsm-configuration-not-found-fault}))))
(clojure.spec.alpha/fdef delete-hsm-configuration :args (clojure.spec.alpha/tuple :portkey.aws.redshift/delete-hsm-configuration-message) :ret clojure.core/true?)

(clojure.core/defn describe-event-subscriptions "Lists descriptions of all the Amazon Redshift event notification subscriptions\nfor a customer account. If you specify a subscription name, lists the\ndescription for that subscription.\n If you specify both tag keys and tag values in the same request, Amazon\nRedshift returns all event notification subscriptions that match any combination\nof the specified keys and values. For example, if you have owner and environment\nfor tag keys, and admin and test for tag values, all subscriptions that have any\ncombination of those values are returned.\n If both tag keys and values are omitted from the request, subscriptions are\nreturned regardless of whether they have tag keys or values associated with\nthem." ([] (describe-event-subscriptions {})) ([describe-event-subscriptions-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-event-subscriptions-message "DescribeEventSubscriptions" describe-event-subscriptions-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/describe-event-subscriptions-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/event-subscriptions-message {"SubscriptionNotFoundFault" :portkey.aws.redshift/subscription-not-found-fault, "InvalidTagFault" :portkey.aws.redshift/invalid-tag-fault}))))
(clojure.spec.alpha/fdef describe-event-subscriptions :args (clojure.spec.alpha/? :portkey.aws.redshift/describe-event-subscriptions-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/event-subscriptions-message))

(clojure.core/defn create-cluster-parameter-group "Creates an Amazon Redshift parameter group.\n Creating parameter groups is independent of creating clusters. You can\nassociate a cluster with a parameter group when you create the cluster. You can\nalso associate an existing cluster with a parameter group after the cluster is\ncreated by using ModifyCluster.\n Parameters in the parameter group define specific behavior that applies to the\ndatabases you create on the cluster. For more information about parameters and\nparameter groups, go to Amazon Redshift Parameter Groups\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html)\nin the Amazon Redshift Cluster Management Guide." ([create-cluster-parameter-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-cluster-parameter-group-message "CreateClusterParameterGroup" create-cluster-parameter-group-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/create-cluster-parameter-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/create-cluster-parameter-group-result {"ClusterParameterGroupQuotaExceededFault" :portkey.aws.redshift/cluster-parameter-group-quota-exceeded-fault, "ClusterParameterGroupAlreadyExistsFault" :portkey.aws.redshift/cluster-parameter-group-already-exists-fault, "TagLimitExceededFault" :portkey.aws.redshift/tag-limit-exceeded-fault, "InvalidTagFault" :portkey.aws.redshift/invalid-tag-fault}))))
(clojure.spec.alpha/fdef create-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.redshift/create-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/create-cluster-parameter-group-result))

(clojure.core/defn describe-cluster-parameter-groups "Returns a list of Amazon Redshift parameter groups, including parameter groups\nyou created and the default parameter group. For each parameter group, the\nresponse includes the parameter group name, description, and parameter group\nfamily name. You can optionally specify a name to retrieve the description of a\nspecific parameter group.\n For more information about parameters and parameter groups, go to Amazon\nRedshift Parameter Groups\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html)\nin the Amazon Redshift Cluster Management Guide.\n If you specify both tag keys and tag values in the same request, Amazon\nRedshift returns all parameter groups that match any combination of the\nspecified keys and values. For example, if you have owner and environment for\ntag keys, and admin and test for tag values, all parameter groups that have any\ncombination of those values are returned.\n If both tag keys and values are omitted from the request, parameter groups are\nreturned regardless of whether they have tag keys or values associated with\nthem." ([] (describe-cluster-parameter-groups {})) ([describe-cluster-parameter-groups-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-cluster-parameter-groups-message "DescribeClusterParameterGroups" describe-cluster-parameter-groups-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/describe-cluster-parameter-groups-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/cluster-parameter-groups-message {"ClusterParameterGroupNotFoundFault" :portkey.aws.redshift/cluster-parameter-group-not-found-fault, "InvalidTagFault" :portkey.aws.redshift/invalid-tag-fault}))))
(clojure.spec.alpha/fdef describe-cluster-parameter-groups :args (clojure.spec.alpha/? :portkey.aws.redshift/describe-cluster-parameter-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/cluster-parameter-groups-message))

(clojure.core/defn authorize-snapshot-access "Authorizes the specified AWS customer account to restore the specified snapshot.\n For more information about working with snapshots, go to Amazon Redshift\nSnapshots\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html) in\nthe Amazon Redshift Cluster Management Guide." ([authorize-snapshot-access-message] (clojure.core/let [req<-input__36755__auto__ (req<-authorize-snapshot-access-message "AuthorizeSnapshotAccess" authorize-snapshot-access-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/authorize-snapshot-access-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/authorize-snapshot-access-result {"ClusterSnapshotNotFoundFault" :portkey.aws.redshift/cluster-snapshot-not-found-fault, "AuthorizationAlreadyExistsFault" :portkey.aws.redshift/authorization-already-exists-fault, "AuthorizationQuotaExceededFault" :portkey.aws.redshift/authorization-quota-exceeded-fault, "DependentServiceRequestThrottlingFault" :portkey.aws.redshift/dependent-service-request-throttling-fault, "InvalidClusterSnapshotStateFault" :portkey.aws.redshift/invalid-cluster-snapshot-state-fault, "LimitExceededFault" :portkey.aws.redshift/limit-exceeded-fault}))))
(clojure.spec.alpha/fdef authorize-snapshot-access :args (clojure.spec.alpha/tuple :portkey.aws.redshift/authorize-snapshot-access-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/authorize-snapshot-access-result))

(clojure.core/defn describe-logging-status "Describes whether information, such as queries and connection attempts, is being\nlogged for the specified Amazon Redshift cluster." ([describe-logging-status-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-logging-status-message "DescribeLoggingStatus" describe-logging-status-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/describe-logging-status-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/logging-status {"ClusterNotFoundFault" :portkey.aws.redshift/cluster-not-found-fault}))))
(clojure.spec.alpha/fdef describe-logging-status :args (clojure.spec.alpha/tuple :portkey.aws.redshift/describe-logging-status-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/logging-status))

(clojure.core/defn describe-resize "Returns information about the last resize operation for the specified cluster.\nIf no resize operation has ever been initiated for the specified cluster, a HTTP\n404 error is returned. If a resize operation was initiated and completed, the\nstatus of the resize remains as SUCCEEDED until the next resize.\n A resize operation can be requested using ModifyCluster and specifying a\ndifferent number or type of nodes for the cluster." ([describe-resize-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-resize-message "DescribeResize" describe-resize-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/describe-resize-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/resize-progress-message {"ClusterNotFoundFault" :portkey.aws.redshift/cluster-not-found-fault, "ResizeNotFoundFault" :portkey.aws.redshift/resize-not-found-fault}))))
(clojure.spec.alpha/fdef describe-resize :args (clojure.spec.alpha/tuple :portkey.aws.redshift/describe-resize-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/resize-progress-message))

(clojure.core/defn reboot-cluster "Reboots a cluster. This action is taken as soon as possible. It results in a\nmomentary outage to the cluster, during which the cluster status is set to\nrebooting. A cluster event is created when the reboot is completed. Any pending\ncluster modifications (see ModifyCluster) are applied at this reboot. For more\ninformation about managing clusters, go to Amazon Redshift Clusters\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html) in\nthe Amazon Redshift Cluster Management Guide." ([reboot-cluster-message] (clojure.core/let [req<-input__36755__auto__ (req<-reboot-cluster-message "RebootCluster" reboot-cluster-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/reboot-cluster-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/reboot-cluster-result {"InvalidClusterStateFault" :portkey.aws.redshift/invalid-cluster-state-fault, "ClusterNotFoundFault" :portkey.aws.redshift/cluster-not-found-fault}))))
(clojure.spec.alpha/fdef reboot-cluster :args (clojure.spec.alpha/tuple :portkey.aws.redshift/reboot-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/reboot-cluster-result))

(clojure.core/defn describe-orderable-cluster-options "Returns a list of orderable cluster options. Before you create a new cluster you\ncan use this operation to find what options are available, such as the EC2\nAvailability Zones (AZ) in the specific AWS region that you can specify, and the\nnode types you can request. The node types differ by available storage, memory,\nCPU and price. With the cost involved you might want to obtain a list of cluster\noptions in the specific region and specify values when creating a cluster. For\nmore information about managing clusters, go to Amazon Redshift Clusters\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html) in\nthe Amazon Redshift Cluster Management Guide." ([] (describe-orderable-cluster-options {})) ([describe-orderable-cluster-options-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-orderable-cluster-options-message "DescribeOrderableClusterOptions" describe-orderable-cluster-options-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/describe-orderable-cluster-options-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/orderable-cluster-options-message {}))))
(clojure.spec.alpha/fdef describe-orderable-cluster-options :args (clojure.spec.alpha/? :portkey.aws.redshift/describe-orderable-cluster-options-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/orderable-cluster-options-message))

(clojure.core/defn create-cluster-subnet-group "Creates a new Amazon Redshift subnet group. You must provide a list of one or\nmore subnets in your existing Amazon Virtual Private Cloud (Amazon VPC) when\ncreating Amazon Redshift subnet group.\n For information about subnet groups, go to Amazon Redshift Cluster Subnet\nGroups\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-cluster-subnet-groups.html)\nin the Amazon Redshift Cluster Management Guide." ([create-cluster-subnet-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-create-cluster-subnet-group-message "CreateClusterSubnetGroup" create-cluster-subnet-group-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/create-cluster-subnet-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/create-cluster-subnet-group-result {"ClusterSubnetGroupAlreadyExistsFault" :portkey.aws.redshift/cluster-subnet-group-already-exists-fault, "ClusterSubnetGroupQuotaExceededFault" :portkey.aws.redshift/cluster-subnet-group-quota-exceeded-fault, "ClusterSubnetQuotaExceededFault" :portkey.aws.redshift/cluster-subnet-quota-exceeded-fault, "InvalidSubnet" :portkey.aws.redshift/invalid-subnet, "UnauthorizedOperation" :portkey.aws.redshift/unauthorized-operation, "TagLimitExceededFault" :portkey.aws.redshift/tag-limit-exceeded-fault, "InvalidTagFault" :portkey.aws.redshift/invalid-tag-fault, "DependentServiceRequestThrottlingFault" :portkey.aws.redshift/dependent-service-request-throttling-fault}))))
(clojure.spec.alpha/fdef create-cluster-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.redshift/create-cluster-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/create-cluster-subnet-group-result))

(clojure.core/defn modify-cluster-iam-roles "Modifies the list of AWS Identity and Access Management (IAM) roles that can be\nused by the cluster to access other AWS services.\n A cluster can have up to 10 IAM roles associated at any time." ([modify-cluster-iam-roles-message] (clojure.core/let [req<-input__36755__auto__ (req<-modify-cluster-iam-roles-message "ModifyClusterIamRoles" modify-cluster-iam-roles-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/modify-cluster-iam-roles-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/modify-cluster-iam-roles-result {"InvalidClusterStateFault" :portkey.aws.redshift/invalid-cluster-state-fault, "ClusterNotFoundFault" :portkey.aws.redshift/cluster-not-found-fault}))))
(clojure.spec.alpha/fdef modify-cluster-iam-roles :args (clojure.spec.alpha/tuple :portkey.aws.redshift/modify-cluster-iam-roles-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/modify-cluster-iam-roles-result))

(clojure.core/defn delete-cluster-security-group "Deletes an Amazon Redshift security group.\n You cannot delete a security group that is associated with any clusters. You\ncannot delete the default security group.\n For information about managing security groups, go to Amazon Redshift Cluster\nSecurity Groups\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html)\nin the Amazon Redshift Cluster Management Guide." ([delete-cluster-security-group-message] (clojure.core/let [req<-input__36755__auto__ (req<-delete-cluster-security-group-message "DeleteClusterSecurityGroup" delete-cluster-security-group-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/delete-cluster-security-group-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil nil {"InvalidClusterSecurityGroupStateFault" :portkey.aws.redshift/invalid-cluster-security-group-state-fault, "ClusterSecurityGroupNotFoundFault" :portkey.aws.redshift/cluster-security-group-not-found-fault}))))
(clojure.spec.alpha/fdef delete-cluster-security-group :args (clojure.spec.alpha/tuple :portkey.aws.redshift/delete-cluster-security-group-message) :ret clojure.core/true?)

(clojure.core/defn describe-cluster-security-groups "Returns information about Amazon Redshift security groups. If the name of a\nsecurity group is specified, the response will contain only information about\nonly that security group.\n For information about managing security groups, go to Amazon Redshift Cluster\nSecurity Groups\n(http://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html)\nin the Amazon Redshift Cluster Management Guide.\n If you specify both tag keys and tag values in the same request, Amazon\nRedshift returns all security groups that match any combination of the specified\nkeys and values. For example, if you have owner and environment for tag keys,\nand admin and test for tag values, all security groups that have any combination\nof those values are returned.\n If both tag keys and values are omitted from the request, security groups are\nreturned regardless of whether they have tag keys or values associated with\nthem." ([] (describe-cluster-security-groups {})) ([describe-cluster-security-groups-message] (clojure.core/let [req<-input__36755__auto__ (req<-describe-cluster-security-groups-message "DescribeClusterSecurityGroups" describe-cluster-security-groups-message)] (portkey.aws/-query-call portkey.aws.redshift/endpoints "POST" "/" req<-input__36755__auto__ :portkey.aws.redshift/describe-cluster-security-groups-message {:payload nil, :move {}, :headers {}, :uri {}, :querystring {}} nil :portkey.aws.redshift/cluster-security-group-message {"ClusterSecurityGroupNotFoundFault" :portkey.aws.redshift/cluster-security-group-not-found-fault, "InvalidTagFault" :portkey.aws.redshift/invalid-tag-fault}))))
(clojure.spec.alpha/fdef describe-cluster-security-groups :args (clojure.spec.alpha/? :portkey.aws.redshift/describe-cluster-security-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.redshift/cluster-security-group-message))
