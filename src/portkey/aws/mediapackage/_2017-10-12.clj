(ns portkey.aws.mediapackage.-2017-10-12 (:require [portkey.aws]))

(def
 endpoints
 '{"ap-northeast-1"
   {:credential-scope
    {:service "mediapackage", :region "ap-northeast-1"},
    :ssl-common-name "mediapackage.ap-northeast-1.amazonaws.com",
    :endpoint "https://mediapackage.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "mediapackage", :region "eu-west-1"},
    :ssl-common-name "mediapackage.eu-west-1.amazonaws.com",
    :endpoint "https://mediapackage.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope
    {:service "mediapackage", :region "ap-southeast-2"},
    :ssl-common-name "mediapackage.ap-southeast-2.amazonaws.com",
    :endpoint "https://mediapackage.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "mediapackage", :region "sa-east-1"},
    :ssl-common-name "mediapackage.sa-east-1.amazonaws.com",
    :endpoint "https://mediapackage.sa-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope
    {:service "mediapackage", :region "ap-southeast-1"},
    :ssl-common-name "mediapackage.ap-southeast-1.amazonaws.com",
    :endpoint "https://mediapackage.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope
    {:service "mediapackage", :region "ap-northeast-2"},
    :ssl-common-name "mediapackage.ap-northeast-2.amazonaws.com",
    :endpoint "https://mediapackage.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-west-3"
   {:credential-scope {:service "mediapackage", :region "eu-west-3"},
    :ssl-common-name "mediapackage.eu-west-3.amazonaws.com",
    :endpoint "https://mediapackage.eu-west-3.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope
    {:service "mediapackage", :region "eu-central-1"},
    :ssl-common-name "mediapackage.eu-central-1.amazonaws.com",
    :endpoint "https://mediapackage.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "mediapackage", :region "us-west-2"},
    :ssl-common-name "mediapackage.us-west-2.amazonaws.com",
    :endpoint "https://mediapackage.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "mediapackage", :region "us-east-1"},
    :ssl-common-name "mediapackage.us-east-1.amazonaws.com",
    :endpoint "https://mediapackage.us-east-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-cmaf-package-create-or-update-parameters)

(clojure.core/declare ser-ad-markers)

(clojure.core/declare ser-stream-selection)

(clojure.core/declare ser-string)

(clojure.core/declare ser-hls-package)

(clojure.core/declare ser-mss-package)

(clojure.core/declare ser-dash-encryption)

(clojure.core/declare ser-mss-encryption)

(clojure.core/declare ser-speke-key-provider)

(clojure.core/declare ser-list-of-hls-manifest-create-or-update-parameters)

(clojure.core/declare ser-list-of-string)

(clojure.core/declare ser-boolean)

(clojure.core/declare ser-profile)

(clojure.core/declare ser-hls-encryption)

(clojure.core/declare ser-stream-order)

(clojure.core/declare ser-dash-package)

(clojure.core/declare ser-max-results)

(clojure.core/declare ser-encryption-method)

(clojure.core/declare ser-list-of-period-triggers-element)

(clojure.core/declare ser-integer)

(clojure.core/declare ser-cmaf-encryption)

(clojure.core/declare ser-period-triggers-element)

(clojure.core/declare ser-hls-manifest-create-or-update-parameters)

(clojure.core/declare ser-playlist-type)

(clojure.core/defn- ser-cmaf-package-create-or-update-parameters [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "CmafPackageCreateOrUpdateParameters", :type "structure"} (clojure.core/contains? input :encryption) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cmaf-encryption (input :encryption)) #:http.request.field{:name "Encryption", :location-name "encryption", :shape "CmafEncryption"})) (clojure.core/contains? input :hls-manifests) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-hls-manifest-create-or-update-parameters (input :hls-manifests)) #:http.request.field{:name "HlsManifests", :location-name "hlsManifests", :shape "__listOfHlsManifestCreateOrUpdateParameters"})) (clojure.core/contains? input :segment-duration-seconds) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :segment-duration-seconds)) #:http.request.field{:name "SegmentDurationSeconds", :location-name "segmentDurationSeconds", :shape "__integer"})) (clojure.core/contains? input :segment-prefix) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :segment-prefix)) #:http.request.field{:name "SegmentPrefix", :location-name "segmentPrefix", :shape "__string"})) (clojure.core/contains? input :stream-selection) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-stream-selection (input :stream-selection)) #:http.request.field{:name "StreamSelection", :location-name "streamSelection", :shape "StreamSelection"}))))

(clojure.core/defn- ser-ad-markers [input] #:http.request.field{:value (clojure.core/get {"NONE" "NONE", :none "NONE", "SCTE35_ENHANCED" "SCTE35_ENHANCED", :scte-35-enhanced "SCTE35_ENHANCED", "PASSTHROUGH" "PASSTHROUGH", :passthrough "PASSTHROUGH"} input), :shape "AdMarkers"})

(clojure.core/defn- ser-stream-selection [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "StreamSelection", :type "structure"} (clojure.core/contains? input :max-video-bits-per-second) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-video-bits-per-second)) #:http.request.field{:name "MaxVideoBitsPerSecond", :location-name "maxVideoBitsPerSecond", :shape "__integer"})) (clojure.core/contains? input :min-video-bits-per-second) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :min-video-bits-per-second)) #:http.request.field{:name "MinVideoBitsPerSecond", :location-name "minVideoBitsPerSecond", :shape "__integer"})) (clojure.core/contains? input :stream-order) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-stream-order (input :stream-order)) #:http.request.field{:name "StreamOrder", :location-name "streamOrder", :shape "StreamOrder"}))))

(clojure.core/defn- ser-string [input] #:http.request.field{:value input, :shape "__string"})

(clojure.core/defn- ser-hls-package [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "HlsPackage", :type "structure"} (clojure.core/contains? input :ad-markers) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ad-markers (input :ad-markers)) #:http.request.field{:name "AdMarkers", :location-name "adMarkers", :shape "AdMarkers"})) (clojure.core/contains? input :stream-selection) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-stream-selection (input :stream-selection)) #:http.request.field{:name "StreamSelection", :location-name "streamSelection", :shape "StreamSelection"})) (clojure.core/contains? input :include-iframe-only-stream) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-iframe-only-stream)) #:http.request.field{:name "IncludeIframeOnlyStream", :location-name "includeIframeOnlyStream", :shape "__boolean"})) (clojure.core/contains? input :use-audio-rendition-group) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :use-audio-rendition-group)) #:http.request.field{:name "UseAudioRenditionGroup", :location-name "useAudioRenditionGroup", :shape "__boolean"})) (clojure.core/contains? input :program-date-time-interval-seconds) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :program-date-time-interval-seconds)) #:http.request.field{:name "ProgramDateTimeIntervalSeconds", :location-name "programDateTimeIntervalSeconds", :shape "__integer"})) (clojure.core/contains? input :encryption) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-hls-encryption (input :encryption)) #:http.request.field{:name "Encryption", :location-name "encryption", :shape "HlsEncryption"})) (clojure.core/contains? input :playlist-window-seconds) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :playlist-window-seconds)) #:http.request.field{:name "PlaylistWindowSeconds", :location-name "playlistWindowSeconds", :shape "__integer"})) (clojure.core/contains? input :segment-duration-seconds) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :segment-duration-seconds)) #:http.request.field{:name "SegmentDurationSeconds", :location-name "segmentDurationSeconds", :shape "__integer"})) (clojure.core/contains? input :playlist-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-playlist-type (input :playlist-type)) #:http.request.field{:name "PlaylistType", :location-name "playlistType", :shape "PlaylistType"}))))

(clojure.core/defn- ser-mss-package [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "MssPackage", :type "structure"} (clojure.core/contains? input :encryption) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-mss-encryption (input :encryption)) #:http.request.field{:name "Encryption", :location-name "encryption", :shape "MssEncryption"})) (clojure.core/contains? input :manifest-window-seconds) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :manifest-window-seconds)) #:http.request.field{:name "ManifestWindowSeconds", :location-name "manifestWindowSeconds", :shape "__integer"})) (clojure.core/contains? input :segment-duration-seconds) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :segment-duration-seconds)) #:http.request.field{:name "SegmentDurationSeconds", :location-name "segmentDurationSeconds", :shape "__integer"})) (clojure.core/contains? input :stream-selection) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-stream-selection (input :stream-selection)) #:http.request.field{:name "StreamSelection", :location-name "streamSelection", :shape "StreamSelection"}))))

(clojure.core/defn- ser-dash-encryption [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-speke-key-provider (:speke-key-provider input)) #:http.request.field{:name "SpekeKeyProvider", :location-name "spekeKeyProvider", :shape "SpekeKeyProvider"})], :shape "DashEncryption", :type "structure"} (clojure.core/contains? input :key-rotation-interval-seconds) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :key-rotation-interval-seconds)) #:http.request.field{:name "KeyRotationIntervalSeconds", :location-name "keyRotationIntervalSeconds", :shape "__integer"}))))

(clojure.core/defn- ser-mss-encryption [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-speke-key-provider (:speke-key-provider input)) #:http.request.field{:name "SpekeKeyProvider", :location-name "spekeKeyProvider", :shape "SpekeKeyProvider"})], :shape "MssEncryption", :type "structure"}))

(clojure.core/defn- ser-speke-key-provider [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:url input)) #:http.request.field{:name "Url", :location-name "url", :shape "__string"}) (clojure.core/into (ser-string (:resource-id input)) #:http.request.field{:name "ResourceId", :location-name "resourceId", :shape "__string"}) (clojure.core/into (ser-string (:role-arn input)) #:http.request.field{:name "RoleArn", :location-name "roleArn", :shape "__string"}) (clojure.core/into (ser-list-of-string (:system-ids input)) #:http.request.field{:name "SystemIds", :location-name "systemIds", :shape "__listOf__string"})], :shape "SpekeKeyProvider", :type "structure"}))

(clojure.core/defn- ser-list-of-hls-manifest-create-or-update-parameters [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-hls-manifest-create-or-update-parameters coll) #:http.request.field{:shape "HlsManifestCreateOrUpdateParameters"}))) input), :shape "__listOfHlsManifestCreateOrUpdateParameters", :type "list"})

(clojure.core/defn- ser-list-of-string [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "__string"}))) input), :shape "__listOf__string", :type "list"})

(clojure.core/defn- ser-boolean [input] #:http.request.field{:value input, :shape "__boolean"})

(clojure.core/defn- ser-profile [input] #:http.request.field{:value (clojure.core/get {"NONE" "NONE", :none "NONE", "HBBTV_1_5" "HBBTV_1_5", :hbbtv-1-5 "HBBTV_1_5"} input), :shape "Profile"})

(clojure.core/defn- ser-hls-encryption [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-speke-key-provider (:speke-key-provider input)) #:http.request.field{:name "SpekeKeyProvider", :location-name "spekeKeyProvider", :shape "SpekeKeyProvider"})], :shape "HlsEncryption", :type "structure"} (clojure.core/contains? input :constant-initialization-vector) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :constant-initialization-vector)) #:http.request.field{:name "ConstantInitializationVector", :location-name "constantInitializationVector", :shape "__string"})) (clojure.core/contains? input :encryption-method) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-encryption-method (input :encryption-method)) #:http.request.field{:name "EncryptionMethod", :location-name "encryptionMethod", :shape "EncryptionMethod"})) (clojure.core/contains? input :key-rotation-interval-seconds) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :key-rotation-interval-seconds)) #:http.request.field{:name "KeyRotationIntervalSeconds", :location-name "keyRotationIntervalSeconds", :shape "__integer"})) (clojure.core/contains? input :repeat-ext-x-key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :repeat-ext-x-key)) #:http.request.field{:name "RepeatExtXKey", :location-name "repeatExtXKey", :shape "__boolean"}))))

(clojure.core/defn- ser-stream-order [input] #:http.request.field{:value (clojure.core/get {"ORIGINAL" "ORIGINAL", :original "ORIGINAL", "VIDEO_BITRATE_ASCENDING" "VIDEO_BITRATE_ASCENDING", :video-bitrate-ascending "VIDEO_BITRATE_ASCENDING", "VIDEO_BITRATE_DESCENDING" "VIDEO_BITRATE_DESCENDING", :video-bitrate-descending "VIDEO_BITRATE_DESCENDING"} input), :shape "StreamOrder"})

(clojure.core/defn- ser-dash-package [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "DashPackage", :type "structure"} (clojure.core/contains? input :min-update-period-seconds) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :min-update-period-seconds)) #:http.request.field{:name "MinUpdatePeriodSeconds", :location-name "minUpdatePeriodSeconds", :shape "__integer"})) (clojure.core/contains? input :stream-selection) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-stream-selection (input :stream-selection)) #:http.request.field{:name "StreamSelection", :location-name "streamSelection", :shape "StreamSelection"})) (clojure.core/contains? input :manifest-window-seconds) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :manifest-window-seconds)) #:http.request.field{:name "ManifestWindowSeconds", :location-name "manifestWindowSeconds", :shape "__integer"})) (clojure.core/contains? input :profile) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-profile (input :profile)) #:http.request.field{:name "Profile", :location-name "profile", :shape "Profile"})) (clojure.core/contains? input :period-triggers) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-period-triggers-element (input :period-triggers)) #:http.request.field{:name "PeriodTriggers", :location-name "periodTriggers", :shape "__listOf__PeriodTriggersElement"})) (clojure.core/contains? input :min-buffer-time-seconds) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :min-buffer-time-seconds)) #:http.request.field{:name "MinBufferTimeSeconds", :location-name "minBufferTimeSeconds", :shape "__integer"})) (clojure.core/contains? input :encryption) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-dash-encryption (input :encryption)) #:http.request.field{:name "Encryption", :location-name "encryption", :shape "DashEncryption"})) (clojure.core/contains? input :segment-duration-seconds) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :segment-duration-seconds)) #:http.request.field{:name "SegmentDurationSeconds", :location-name "segmentDurationSeconds", :shape "__integer"})) (clojure.core/contains? input :suggested-presentation-delay-seconds) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :suggested-presentation-delay-seconds)) #:http.request.field{:name "SuggestedPresentationDelaySeconds", :location-name "suggestedPresentationDelaySeconds", :shape "__integer"}))))

(clojure.core/defn- ser-max-results [input] #:http.request.field{:value input, :shape "MaxResults"})

(clojure.core/defn- ser-encryption-method [input] #:http.request.field{:value (clojure.core/get {"AES_128" "AES_128", :aes-128 "AES_128", "SAMPLE_AES" "SAMPLE_AES", :sample-aes "SAMPLE_AES"} input), :shape "EncryptionMethod"})

(clojure.core/defn- ser-list-of-period-triggers-element [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-period-triggers-element coll) #:http.request.field{:shape "__PeriodTriggersElement"}))) input), :shape "__listOf__PeriodTriggersElement", :type "list"})

(clojure.core/defn- ser-integer [input] #:http.request.field{:value input, :shape "__integer"})

(clojure.core/defn- ser-cmaf-encryption [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-speke-key-provider (:speke-key-provider input)) #:http.request.field{:name "SpekeKeyProvider", :location-name "spekeKeyProvider", :shape "SpekeKeyProvider"})], :shape "CmafEncryption", :type "structure"} (clojure.core/contains? input :key-rotation-interval-seconds) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :key-rotation-interval-seconds)) #:http.request.field{:name "KeyRotationIntervalSeconds", :location-name "keyRotationIntervalSeconds", :shape "__integer"}))))

(clojure.core/defn- ser-period-triggers-element [input] #:http.request.field{:value (clojure.core/get {"ADS" "ADS", :ads "ADS"} input), :shape "__PeriodTriggersElement"})

(clojure.core/defn- ser-hls-manifest-create-or-update-parameters [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:id input)) #:http.request.field{:name "Id", :location-name "id", :shape "__string"})], :shape "HlsManifestCreateOrUpdateParameters", :type "structure"} (clojure.core/contains? input :ad-markers) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ad-markers (input :ad-markers)) #:http.request.field{:name "AdMarkers", :location-name "adMarkers", :shape "AdMarkers"})) (clojure.core/contains? input :include-iframe-only-stream) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-iframe-only-stream)) #:http.request.field{:name "IncludeIframeOnlyStream", :location-name "includeIframeOnlyStream", :shape "__boolean"})) (clojure.core/contains? input :manifest-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :manifest-name)) #:http.request.field{:name "ManifestName", :location-name "manifestName", :shape "__string"})) (clojure.core/contains? input :playlist-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-playlist-type (input :playlist-type)) #:http.request.field{:name "PlaylistType", :location-name "playlistType", :shape "PlaylistType"})) (clojure.core/contains? input :playlist-window-seconds) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :playlist-window-seconds)) #:http.request.field{:name "PlaylistWindowSeconds", :location-name "playlistWindowSeconds", :shape "__integer"})) (clojure.core/contains? input :program-date-time-interval-seconds) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :program-date-time-interval-seconds)) #:http.request.field{:name "ProgramDateTimeIntervalSeconds", :location-name "programDateTimeIntervalSeconds", :shape "__integer"}))))

(clojure.core/defn- ser-playlist-type [input] #:http.request.field{:value (clojure.core/get {"NONE" "NONE", :none "NONE", "EVENT" "EVENT", :event "EVENT", "VOD" "VOD", :vod "VOD"} input), :shape "PlaylistType"})

(clojure.core/defn- req-update-channel-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :location "uri", :location-name "id", :shape "__string"})]} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :location-name "description", :shape "__string"}))))

(clojure.core/defn- req-delete-origin-endpoint-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :location "uri", :location-name "id", :shape "__string"})]}))

(clojure.core/defn- req-list-origin-endpoints-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :channel-id) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :channel-id)) #:http.request.field{:name "ChannelId", :location "querystring", :location-name "channelId", :shape "__string"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-max-results (input :max-results)) #:http.request.field{:name "MaxResults", :location "querystring", :location-name "maxResults", :shape "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :location "querystring", :location-name "nextToken", :shape "__string"}))))

(clojure.core/defn- req-describe-origin-endpoint-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :location "uri", :location-name "id", :shape "__string"})]}))

(clojure.core/defn- req-rotate-ingest-endpoint-credentials-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :ingest-endpoint-id)) #:http.request.field{:name "IngestEndpointId", :location "uri", :location-name "ingest_endpoint_id", :shape "__string"}) (clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :location "uri", :location-name "id", :shape "__string"})]}))

(clojure.core/defn- req-create-channel-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :location-name "id", :shape "__string"})]} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :location-name "description", :shape "__string"}))))

(clojure.core/defn- req-create-origin-endpoint-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :channel-id)) #:http.request.field{:name "ChannelId", :location-name "channelId", :shape "__string"}) (clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :location-name "id", :shape "__string"})]} (clojure.core/contains? input :hls-package) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-hls-package (input :hls-package)) #:http.request.field{:name "HlsPackage", :location-name "hlsPackage", :shape "HlsPackage"})) (clojure.core/contains? input :mss-package) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-mss-package (input :mss-package)) #:http.request.field{:name "MssPackage", :location-name "mssPackage", :shape "MssPackage"})) (clojure.core/contains? input :cmaf-package) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cmaf-package-create-or-update-parameters (input :cmaf-package)) #:http.request.field{:name "CmafPackage", :location-name "cmafPackage", :shape "CmafPackageCreateOrUpdateParameters"})) (clojure.core/contains? input :time-delay-seconds) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :time-delay-seconds)) #:http.request.field{:name "TimeDelaySeconds", :location-name "timeDelaySeconds", :shape "__integer"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :location-name "description", :shape "__string"})) (clojure.core/contains? input :whitelist) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-string (input :whitelist)) #:http.request.field{:name "Whitelist", :location-name "whitelist", :shape "__listOf__string"})) (clojure.core/contains? input :dash-package) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-dash-package (input :dash-package)) #:http.request.field{:name "DashPackage", :location-name "dashPackage", :shape "DashPackage"})) (clojure.core/contains? input :manifest-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :manifest-name)) #:http.request.field{:name "ManifestName", :location-name "manifestName", :shape "__string"})) (clojure.core/contains? input :startover-window-seconds) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :startover-window-seconds)) #:http.request.field{:name "StartoverWindowSeconds", :location-name "startoverWindowSeconds", :shape "__integer"}))))

(clojure.core/defn- req-delete-channel-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :location "uri", :location-name "id", :shape "__string"})]}))

(clojure.core/defn- req-describe-channel-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :location "uri", :location-name "id", :shape "__string"})]}))

(clojure.core/defn- req-list-channels-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-max-results (input :max-results)) #:http.request.field{:name "MaxResults", :location "querystring", :location-name "maxResults", :shape "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/querystring] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :location "querystring", :location-name "nextToken", :shape "__string"}))))

(clojure.core/defn- req-rotate-channel-credentials-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :location "uri", :location-name "id", :shape "__string"})]}))

(clojure.core/defn- req-update-origin-endpoint-request [input] (clojure.core/cond-> #:http.request.configuration{:uri [(clojure.core/into (ser-string (input :id)) #:http.request.field{:name "Id", :location "uri", :location-name "id", :shape "__string"})]} (clojure.core/contains? input :hls-package) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-hls-package (input :hls-package)) #:http.request.field{:name "HlsPackage", :location-name "hlsPackage", :shape "HlsPackage"})) (clojure.core/contains? input :mss-package) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-mss-package (input :mss-package)) #:http.request.field{:name "MssPackage", :location-name "mssPackage", :shape "MssPackage"})) (clojure.core/contains? input :cmaf-package) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cmaf-package-create-or-update-parameters (input :cmaf-package)) #:http.request.field{:name "CmafPackage", :location-name "cmafPackage", :shape "CmafPackageCreateOrUpdateParameters"})) (clojure.core/contains? input :time-delay-seconds) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :time-delay-seconds)) #:http.request.field{:name "TimeDelaySeconds", :location-name "timeDelaySeconds", :shape "__integer"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :location-name "description", :shape "__string"})) (clojure.core/contains? input :whitelist) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-list-of-string (input :whitelist)) #:http.request.field{:name "Whitelist", :location-name "whitelist", :shape "__listOf__string"})) (clojure.core/contains? input :dash-package) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-dash-package (input :dash-package)) #:http.request.field{:name "DashPackage", :location-name "dashPackage", :shape "DashPackage"})) (clojure.core/contains? input :manifest-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :manifest-name)) #:http.request.field{:name "ManifestName", :location-name "manifestName", :shape "__string"})) (clojure.core/contains? input :startover-window-seconds) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :startover-window-seconds)) #:http.request.field{:name "StartoverWindowSeconds", :location-name "startoverWindowSeconds", :shape "__integer"}))))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.internal-server-error-exception/message (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/internal-server-error-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.internal-server-error-exception/message]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.cmaf-package-create-or-update-parameters/encryption (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/cmaf-encryption))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.cmaf-package-create-or-update-parameters/hls-manifests (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/list-of-hls-manifest-create-or-update-parameters))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.cmaf-package-create-or-update-parameters/segment-duration-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.cmaf-package-create-or-update-parameters/segment-prefix (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/cmaf-package-create-or-update-parameters (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.cmaf-package-create-or-update-parameters/encryption :portkey.aws.mediapackage.-2017-10-12.cmaf-package-create-or-update-parameters/hls-manifests :portkey.aws.mediapackage.-2017-10-12.cmaf-package-create-or-update-parameters/segment-duration-seconds :portkey.aws.mediapackage.-2017-10-12.cmaf-package-create-or-update-parameters/segment-prefix :portkey.aws.mediapackage.-2017-10-12/stream-selection]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.update-channel-request/description (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.update-channel-request/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/update-channel-request (clojure.spec.alpha/keys :req-un [:portkey.aws.mediapackage.-2017-10-12.update-channel-request/id] :opt-un [:portkey.aws.mediapackage.-2017-10-12.update-channel-request/description]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/list-of-ingest-endpoint (clojure.spec.alpha/coll-of :portkey.aws.mediapackage.-2017-10-12/ingest-endpoint))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-response/channel-id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-response/time-delay-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-response/url (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-response/description (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-response/whitelist (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/list-of-string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-response/arn (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-response/manifest-name (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-response/startover-window-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-response/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/create-origin-endpoint-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12/hls-package :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-response/channel-id :portkey.aws.mediapackage.-2017-10-12/mss-package :portkey.aws.mediapackage.-2017-10-12/cmaf-package :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-response/time-delay-seconds :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-response/url :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-response/description :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-response/whitelist :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-response/arn :portkey.aws.mediapackage.-2017-10-12/dash-package :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-response/manifest-name :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-response/startover-window-seconds :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-response/id]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.delete-origin-endpoint-request/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/delete-origin-endpoint-request (clojure.spec.alpha/keys :req-un [:portkey.aws.mediapackage.-2017-10-12.delete-origin-endpoint-request/id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/ad-markers #{"PASSTHROUGH" "NONE" :passthrough :scte-35-enhanced "SCTE35_ENHANCED" :none})

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.list-origin-endpoints-request/channel-id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.list-origin-endpoints-request/next-token (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/list-origin-endpoints-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.list-origin-endpoints-request/channel-id :portkey.aws.mediapackage.-2017-10-12/max-results :portkey.aws.mediapackage.-2017-10-12.list-origin-endpoints-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.forbidden-exception/message (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/forbidden-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.forbidden-exception/message]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.stream-selection/max-video-bits-per-second (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.stream-selection/min-video-bits-per-second (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/stream-selection (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.stream-selection/max-video-bits-per-second :portkey.aws.mediapackage.-2017-10-12.stream-selection/min-video-bits-per-second :portkey.aws.mediapackage.-2017-10-12/stream-order]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.create-channel-response/arn (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.create-channel-response/description (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.create-channel-response/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/create-channel-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.create-channel-response/arn :portkey.aws.mediapackage.-2017-10-12.create-channel-response/description :portkey.aws.mediapackage.-2017-10-12/hls-ingest :portkey.aws.mediapackage.-2017-10-12.create-channel-response/id]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.unprocessable-entity-exception/message (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/unprocessable-entity-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.unprocessable-entity-exception/message]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.describe-origin-endpoint-request/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/describe-origin-endpoint-request (clojure.spec.alpha/keys :req-un [:portkey.aws.mediapackage.-2017-10-12.describe-origin-endpoint-request/id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-update-parameters/cmaf-package (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/cmaf-package-create-or-update-parameters))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-update-parameters/time-delay-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-update-parameters/description (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-update-parameters/whitelist (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/list-of-string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-update-parameters/manifest-name (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-update-parameters/startover-window-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/origin-endpoint-update-parameters (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12/hls-package :portkey.aws.mediapackage.-2017-10-12/mss-package :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-update-parameters/cmaf-package :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-update-parameters/time-delay-seconds :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-update-parameters/description :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-update-parameters/whitelist :portkey.aws.mediapackage.-2017-10-12/dash-package :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-update-parameters/manifest-name :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-update-parameters/startover-window-seconds]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.hls-package/include-iframe-only-stream (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/boolean))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.hls-package/use-audio-rendition-group (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/boolean))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.hls-package/program-date-time-interval-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.hls-package/encryption (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/hls-encryption))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.hls-package/playlist-window-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.hls-package/segment-duration-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/hls-package (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12/ad-markers :portkey.aws.mediapackage.-2017-10-12/stream-selection :portkey.aws.mediapackage.-2017-10-12.hls-package/include-iframe-only-stream :portkey.aws.mediapackage.-2017-10-12.hls-package/use-audio-rendition-group :portkey.aws.mediapackage.-2017-10-12.hls-package/program-date-time-interval-seconds :portkey.aws.mediapackage.-2017-10-12.hls-package/encryption :portkey.aws.mediapackage.-2017-10-12.hls-package/playlist-window-seconds :portkey.aws.mediapackage.-2017-10-12.hls-package/segment-duration-seconds :portkey.aws.mediapackage.-2017-10-12/playlist-type]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.ingest-endpoint/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.ingest-endpoint/password (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.ingest-endpoint/url (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.ingest-endpoint/username (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/ingest-endpoint (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.ingest-endpoint/id :portkey.aws.mediapackage.-2017-10-12.ingest-endpoint/password :portkey.aws.mediapackage.-2017-10-12.ingest-endpoint/url :portkey.aws.mediapackage.-2017-10-12.ingest-endpoint/username]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.describe-channel-response/arn (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.describe-channel-response/description (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.describe-channel-response/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/describe-channel-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.describe-channel-response/arn :portkey.aws.mediapackage.-2017-10-12.describe-channel-response/description :portkey.aws.mediapackage.-2017-10-12/hls-ingest :portkey.aws.mediapackage.-2017-10-12.describe-channel-response/id]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.mss-package/encryption (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/mss-encryption))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.mss-package/manifest-window-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.mss-package/segment-duration-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/mss-package (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.mss-package/encryption :portkey.aws.mediapackage.-2017-10-12.mss-package/manifest-window-seconds :portkey.aws.mediapackage.-2017-10-12.mss-package/segment-duration-seconds :portkey.aws.mediapackage.-2017-10-12/stream-selection]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.dash-encryption/key-rotation-interval-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/dash-encryption (clojure.spec.alpha/keys :req-un [:portkey.aws.mediapackage.-2017-10-12/speke-key-provider] :opt-un [:portkey.aws.mediapackage.-2017-10-12.dash-encryption/key-rotation-interval-seconds]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.cmaf-package/encryption (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/cmaf-encryption))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.cmaf-package/hls-manifests (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/list-of-hls-manifest))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.cmaf-package/segment-duration-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.cmaf-package/segment-prefix (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/cmaf-package (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.cmaf-package/encryption :portkey.aws.mediapackage.-2017-10-12.cmaf-package/hls-manifests :portkey.aws.mediapackage.-2017-10-12.cmaf-package/segment-duration-seconds :portkey.aws.mediapackage.-2017-10-12.cmaf-package/segment-prefix :portkey.aws.mediapackage.-2017-10-12/stream-selection]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/mss-encryption (clojure.spec.alpha/keys :req-un [:portkey.aws.mediapackage.-2017-10-12/speke-key-provider] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.describe-origin-endpoint-response/channel-id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.describe-origin-endpoint-response/time-delay-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.describe-origin-endpoint-response/url (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.describe-origin-endpoint-response/description (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.describe-origin-endpoint-response/whitelist (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/list-of-string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.describe-origin-endpoint-response/arn (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.describe-origin-endpoint-response/manifest-name (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.describe-origin-endpoint-response/startover-window-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.describe-origin-endpoint-response/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/describe-origin-endpoint-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12/hls-package :portkey.aws.mediapackage.-2017-10-12.describe-origin-endpoint-response/channel-id :portkey.aws.mediapackage.-2017-10-12/mss-package :portkey.aws.mediapackage.-2017-10-12/cmaf-package :portkey.aws.mediapackage.-2017-10-12.describe-origin-endpoint-response/time-delay-seconds :portkey.aws.mediapackage.-2017-10-12.describe-origin-endpoint-response/url :portkey.aws.mediapackage.-2017-10-12.describe-origin-endpoint-response/description :portkey.aws.mediapackage.-2017-10-12.describe-origin-endpoint-response/whitelist :portkey.aws.mediapackage.-2017-10-12.describe-origin-endpoint-response/arn :portkey.aws.mediapackage.-2017-10-12/dash-package :portkey.aws.mediapackage.-2017-10-12.describe-origin-endpoint-response/manifest-name :portkey.aws.mediapackage.-2017-10-12.describe-origin-endpoint-response/startover-window-seconds :portkey.aws.mediapackage.-2017-10-12.describe-origin-endpoint-response/id]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-response/channel-id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-response/time-delay-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-response/url (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-response/description (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-response/whitelist (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/list-of-string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-response/arn (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-response/manifest-name (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-response/startover-window-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-response/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/update-origin-endpoint-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12/hls-package :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-response/channel-id :portkey.aws.mediapackage.-2017-10-12/mss-package :portkey.aws.mediapackage.-2017-10-12/cmaf-package :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-response/time-delay-seconds :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-response/url :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-response/description :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-response/whitelist :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-response/arn :portkey.aws.mediapackage.-2017-10-12/dash-package :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-response/manifest-name :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-response/startover-window-seconds :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-response/id]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.service-unavailable-exception/message (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/service-unavailable-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.service-unavailable-exception/message]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.hls-ingest/ingest-endpoints (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/list-of-ingest-endpoint))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/hls-ingest (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.hls-ingest/ingest-endpoints]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint/channel-id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint/time-delay-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint/url (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint/description (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint/whitelist (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/list-of-string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint/arn (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint/manifest-name (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint/startover-window-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/origin-endpoint (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12/hls-package :portkey.aws.mediapackage.-2017-10-12.origin-endpoint/channel-id :portkey.aws.mediapackage.-2017-10-12/mss-package :portkey.aws.mediapackage.-2017-10-12/cmaf-package :portkey.aws.mediapackage.-2017-10-12.origin-endpoint/time-delay-seconds :portkey.aws.mediapackage.-2017-10-12.origin-endpoint/url :portkey.aws.mediapackage.-2017-10-12.origin-endpoint/description :portkey.aws.mediapackage.-2017-10-12.origin-endpoint/whitelist :portkey.aws.mediapackage.-2017-10-12.origin-endpoint/arn :portkey.aws.mediapackage.-2017-10-12/dash-package :portkey.aws.mediapackage.-2017-10-12.origin-endpoint/manifest-name :portkey.aws.mediapackage.-2017-10-12.origin-endpoint/startover-window-seconds :portkey.aws.mediapackage.-2017-10-12.origin-endpoint/id]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.channel-create-parameters/description (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.channel-create-parameters/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/channel-create-parameters (clojure.spec.alpha/keys :req-un [:portkey.aws.mediapackage.-2017-10-12.channel-create-parameters/id] :opt-un [:portkey.aws.mediapackage.-2017-10-12.channel-create-parameters/description]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/delete-channel-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.speke-key-provider/resource-id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.speke-key-provider/role-arn (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.speke-key-provider/system-ids (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/list-of-string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.speke-key-provider/url (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/speke-key-provider (clojure.spec.alpha/keys :req-un [:portkey.aws.mediapackage.-2017-10-12.speke-key-provider/url :portkey.aws.mediapackage.-2017-10-12.speke-key-provider/resource-id :portkey.aws.mediapackage.-2017-10-12.speke-key-provider/role-arn :portkey.aws.mediapackage.-2017-10-12.speke-key-provider/system-ids] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.too-many-requests-exception/message (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/too-many-requests-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.too-many-requests-exception/message]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.rotate-ingest-endpoint-credentials-request/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.rotate-ingest-endpoint-credentials-request/ingest-endpoint-id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/rotate-ingest-endpoint-credentials-request (clojure.spec.alpha/keys :req-un [:portkey.aws.mediapackage.-2017-10-12.rotate-ingest-endpoint-credentials-request/ingest-endpoint-id :portkey.aws.mediapackage.-2017-10-12.rotate-ingest-endpoint-credentials-request/id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.create-channel-request/description (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.create-channel-request/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/create-channel-request (clojure.spec.alpha/keys :req-un [:portkey.aws.mediapackage.-2017-10-12.create-channel-request/id] :opt-un [:portkey.aws.mediapackage.-2017-10-12.create-channel-request/description]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/list-of-hls-manifest-create-or-update-parameters (clojure.spec.alpha/coll-of :portkey.aws.mediapackage.-2017-10-12/hls-manifest-create-or-update-parameters))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/list-of-hls-manifest (clojure.spec.alpha/coll-of :portkey.aws.mediapackage.-2017-10-12/hls-manifest))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.hls-manifest/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.hls-manifest/include-iframe-only-stream (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/boolean))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.hls-manifest/manifest-name (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.hls-manifest/playlist-window-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.hls-manifest/program-date-time-interval-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.hls-manifest/url (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/hls-manifest (clojure.spec.alpha/keys :req-un [:portkey.aws.mediapackage.-2017-10-12.hls-manifest/id] :opt-un [:portkey.aws.mediapackage.-2017-10-12/ad-markers :portkey.aws.mediapackage.-2017-10-12.hls-manifest/include-iframe-only-stream :portkey.aws.mediapackage.-2017-10-12.hls-manifest/manifest-name :portkey.aws.mediapackage.-2017-10-12/playlist-type :portkey.aws.mediapackage.-2017-10-12.hls-manifest/playlist-window-seconds :portkey.aws.mediapackage.-2017-10-12.hls-manifest/program-date-time-interval-seconds :portkey.aws.mediapackage.-2017-10-12.hls-manifest/url]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.list-channels-response/channels (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/list-of-channel))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.list-channels-response/next-token (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/list-channels-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.list-channels-response/channels :portkey.aws.mediapackage.-2017-10-12.list-channels-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/list-of-string (clojure.spec.alpha/coll-of :portkey.aws.mediapackage.-2017-10-12/string))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/profile #{:hbbtv-1-5 "HBBTV_1_5" "NONE" :none})

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.hls-encryption/constant-initialization-vector (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.hls-encryption/key-rotation-interval-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.hls-encryption/repeat-ext-x-key (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/boolean))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/hls-encryption (clojure.spec.alpha/keys :req-un [:portkey.aws.mediapackage.-2017-10-12/speke-key-provider] :opt-un [:portkey.aws.mediapackage.-2017-10-12.hls-encryption/constant-initialization-vector :portkey.aws.mediapackage.-2017-10-12/encryption-method :portkey.aws.mediapackage.-2017-10-12.hls-encryption/key-rotation-interval-seconds :portkey.aws.mediapackage.-2017-10-12.hls-encryption/repeat-ext-x-key]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/list-of-channel (clojure.spec.alpha/coll-of :portkey.aws.mediapackage.-2017-10-12/channel))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-request/channel-id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-request/cmaf-package (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/cmaf-package-create-or-update-parameters))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-request/time-delay-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-request/description (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-request/whitelist (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/list-of-string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-request/manifest-name (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-request/startover-window-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-request/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/create-origin-endpoint-request (clojure.spec.alpha/keys :req-un [:portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-request/channel-id :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-request/id] :opt-un [:portkey.aws.mediapackage.-2017-10-12/hls-package :portkey.aws.mediapackage.-2017-10-12/mss-package :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-request/cmaf-package :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-request/time-delay-seconds :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-request/description :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-request/whitelist :portkey.aws.mediapackage.-2017-10-12/dash-package :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-request/manifest-name :portkey.aws.mediapackage.-2017-10-12.create-origin-endpoint-request/startover-window-seconds]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.not-found-exception/message (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/not-found-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.not-found-exception/message]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.delete-channel-request/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/delete-channel-request (clojure.spec.alpha/keys :req-un [:portkey.aws.mediapackage.-2017-10-12.delete-channel-request/id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.describe-channel-request/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/describe-channel-request (clojure.spec.alpha/keys :req-un [:portkey.aws.mediapackage.-2017-10-12.describe-channel-request/id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/list-of-origin-endpoint (clojure.spec.alpha/coll-of :portkey.aws.mediapackage.-2017-10-12/origin-endpoint))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.rotate-channel-credentials-response/arn (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.rotate-channel-credentials-response/description (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.rotate-channel-credentials-response/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/rotate-channel-credentials-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.rotate-channel-credentials-response/arn :portkey.aws.mediapackage.-2017-10-12.rotate-channel-credentials-response/description :portkey.aws.mediapackage.-2017-10-12/hls-ingest :portkey.aws.mediapackage.-2017-10-12.rotate-channel-credentials-response/id]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.list-origin-endpoints-response/next-token (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.list-origin-endpoints-response/origin-endpoints (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/list-of-origin-endpoint))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/list-origin-endpoints-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.list-origin-endpoints-response/next-token :portkey.aws.mediapackage.-2017-10-12.list-origin-endpoints-response/origin-endpoints]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.list-channels-request/next-token (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/list-channels-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12/max-results :portkey.aws.mediapackage.-2017-10-12.list-channels-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/stream-order #{:video-bitrate-ascending :video-bitrate-descending :original "VIDEO_BITRATE_DESCENDING" "ORIGINAL" "VIDEO_BITRATE_ASCENDING"})

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.dash-package/min-update-period-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.dash-package/manifest-window-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.dash-package/period-triggers (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/list-of-period-triggers-element))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.dash-package/min-buffer-time-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.dash-package/encryption (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/dash-encryption))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.dash-package/segment-duration-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.dash-package/suggested-presentation-delay-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/dash-package (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.dash-package/min-update-period-seconds :portkey.aws.mediapackage.-2017-10-12/stream-selection :portkey.aws.mediapackage.-2017-10-12.dash-package/manifest-window-seconds :portkey.aws.mediapackage.-2017-10-12/profile :portkey.aws.mediapackage.-2017-10-12.dash-package/period-triggers :portkey.aws.mediapackage.-2017-10-12.dash-package/min-buffer-time-seconds :portkey.aws.mediapackage.-2017-10-12.dash-package/encryption :portkey.aws.mediapackage.-2017-10-12.dash-package/segment-duration-seconds :portkey.aws.mediapackage.-2017-10-12.dash-package/suggested-presentation-delay-seconds]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-list/next-token (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-list/origin-endpoints (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/list-of-origin-endpoint))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/origin-endpoint-list (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.origin-endpoint-list/next-token :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-list/origin-endpoints]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.channel/arn (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.channel/description (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.channel/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/channel (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.channel/arn :portkey.aws.mediapackage.-2017-10-12.channel/description :portkey.aws.mediapackage.-2017-10-12/hls-ingest :portkey.aws.mediapackage.-2017-10-12.channel/id]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/max-results (clojure.spec.alpha/int-in 1 1000))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.rotate-channel-credentials-request/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/rotate-channel-credentials-request (clojure.spec.alpha/keys :req-un [:portkey.aws.mediapackage.-2017-10-12.rotate-channel-credentials-request/id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/encryption-method #{:aes-128 "SAMPLE_AES" :sample-aes "AES_128"})

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/list-of-period-triggers-element (clojure.spec.alpha/coll-of :portkey.aws.mediapackage.-2017-10-12/period-triggers-element))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/delete-origin-endpoint-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/integer clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.rotate-ingest-endpoint-credentials-response/arn (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.rotate-ingest-endpoint-credentials-response/description (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.rotate-ingest-endpoint-credentials-response/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/rotate-ingest-endpoint-credentials-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.rotate-ingest-endpoint-credentials-response/arn :portkey.aws.mediapackage.-2017-10-12.rotate-ingest-endpoint-credentials-response/description :portkey.aws.mediapackage.-2017-10-12/hls-ingest :portkey.aws.mediapackage.-2017-10-12.rotate-ingest-endpoint-credentials-response/id]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-create-parameters/channel-id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-create-parameters/cmaf-package (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/cmaf-package-create-or-update-parameters))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-create-parameters/time-delay-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-create-parameters/description (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-create-parameters/whitelist (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/list-of-string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-create-parameters/manifest-name (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-create-parameters/startover-window-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-create-parameters/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/origin-endpoint-create-parameters (clojure.spec.alpha/keys :req-un [:portkey.aws.mediapackage.-2017-10-12.origin-endpoint-create-parameters/id :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-create-parameters/channel-id] :opt-un [:portkey.aws.mediapackage.-2017-10-12/hls-package :portkey.aws.mediapackage.-2017-10-12/mss-package :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-create-parameters/cmaf-package :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-create-parameters/time-delay-seconds :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-create-parameters/description :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-create-parameters/whitelist :portkey.aws.mediapackage.-2017-10-12/dash-package :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-create-parameters/manifest-name :portkey.aws.mediapackage.-2017-10-12.origin-endpoint-create-parameters/startover-window-seconds]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.channel-list/channels (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/list-of-channel))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.channel-list/next-token (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/channel-list (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.channel-list/channels :portkey.aws.mediapackage.-2017-10-12.channel-list/next-token]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.channel-update-parameters/description (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/channel-update-parameters (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.channel-update-parameters/description]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.cmaf-encryption/key-rotation-interval-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/cmaf-encryption (clojure.spec.alpha/keys :req-un [:portkey.aws.mediapackage.-2017-10-12/speke-key-provider] :opt-un [:portkey.aws.mediapackage.-2017-10-12.cmaf-encryption/key-rotation-interval-seconds]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/period-triggers-element #{:ads "ADS"})

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.update-channel-response/arn (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.update-channel-response/description (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.update-channel-response/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/update-channel-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.mediapackage.-2017-10-12.update-channel-response/arn :portkey.aws.mediapackage.-2017-10-12.update-channel-response/description :portkey.aws.mediapackage.-2017-10-12/hls-ingest :portkey.aws.mediapackage.-2017-10-12.update-channel-response/id]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.hls-manifest-create-or-update-parameters/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.hls-manifest-create-or-update-parameters/include-iframe-only-stream (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/boolean))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.hls-manifest-create-or-update-parameters/manifest-name (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.hls-manifest-create-or-update-parameters/playlist-window-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.hls-manifest-create-or-update-parameters/program-date-time-interval-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/hls-manifest-create-or-update-parameters (clojure.spec.alpha/keys :req-un [:portkey.aws.mediapackage.-2017-10-12.hls-manifest-create-or-update-parameters/id] :opt-un [:portkey.aws.mediapackage.-2017-10-12/ad-markers :portkey.aws.mediapackage.-2017-10-12.hls-manifest-create-or-update-parameters/include-iframe-only-stream :portkey.aws.mediapackage.-2017-10-12.hls-manifest-create-or-update-parameters/manifest-name :portkey.aws.mediapackage.-2017-10-12/playlist-type :portkey.aws.mediapackage.-2017-10-12.hls-manifest-create-or-update-parameters/playlist-window-seconds :portkey.aws.mediapackage.-2017-10-12.hls-manifest-create-or-update-parameters/program-date-time-interval-seconds]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-request/cmaf-package (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/cmaf-package-create-or-update-parameters))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-request/time-delay-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-request/description (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-request/whitelist (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/list-of-string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-request/manifest-name (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-request/startover-window-seconds (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/integer))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-request/id (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/string))
(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/update-origin-endpoint-request (clojure.spec.alpha/keys :req-un [:portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-request/id] :opt-un [:portkey.aws.mediapackage.-2017-10-12/hls-package :portkey.aws.mediapackage.-2017-10-12/mss-package :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-request/cmaf-package :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-request/time-delay-seconds :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-request/description :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-request/whitelist :portkey.aws.mediapackage.-2017-10-12/dash-package :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-request/manifest-name :portkey.aws.mediapackage.-2017-10-12.update-origin-endpoint-request/startover-window-seconds]))

(clojure.spec.alpha/def :portkey.aws.mediapackage.-2017-10-12/playlist-type #{"VOD" :vod "EVENT" "NONE" :event :none})

(clojure.core/defn delete-channel ([delete-channel-requestinput] (clojure.core/let [request-function-result__43533__auto__ (req-delete-channel-request delete-channel-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__43533__auto__ {:http.request.configuration/endpoints portkey.aws.mediapackage.-2017-10-12/endpoints, :http.request.spec/output-spec :portkey.aws.mediapackage.-2017-10-12/delete-channel-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/channels/{id}", :http.request.configuration/version "2017-10-12", :http.request.configuration/service-id "MediaPackage", :http.request.spec/input-spec :portkey.aws.mediapackage.-2017-10-12/delete-channel-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 202, :http.request.configuration/action "DeleteChannel", :http.request.spec/error-spec {"UnprocessableEntityException" :portkey.aws.mediapackage.-2017-10-12/unprocessable-entity-exception, "InternalServerErrorException" :portkey.aws.mediapackage.-2017-10-12/internal-server-error-exception, "ForbiddenException" :portkey.aws.mediapackage.-2017-10-12/forbidden-exception, "NotFoundException" :portkey.aws.mediapackage.-2017-10-12/not-found-exception, "ServiceUnavailableException" :portkey.aws.mediapackage.-2017-10-12/service-unavailable-exception, "TooManyRequestsException" :portkey.aws.mediapackage.-2017-10-12/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef delete-channel :args (clojure.spec.alpha/tuple :portkey.aws.mediapackage.-2017-10-12/delete-channel-request) :ret (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/delete-channel-response))

(clojure.core/defn create-origin-endpoint ([create-origin-endpoint-requestinput] (clojure.core/let [request-function-result__43533__auto__ (req-create-origin-endpoint-request create-origin-endpoint-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__43533__auto__ {:http.request.configuration/endpoints portkey.aws.mediapackage.-2017-10-12/endpoints, :http.request.spec/output-spec :portkey.aws.mediapackage.-2017-10-12/create-origin-endpoint-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/origin_endpoints", :http.request.configuration/version "2017-10-12", :http.request.configuration/service-id "MediaPackage", :http.request.spec/input-spec :portkey.aws.mediapackage.-2017-10-12/create-origin-endpoint-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/action "CreateOriginEndpoint", :http.request.spec/error-spec {"UnprocessableEntityException" :portkey.aws.mediapackage.-2017-10-12/unprocessable-entity-exception, "InternalServerErrorException" :portkey.aws.mediapackage.-2017-10-12/internal-server-error-exception, "ForbiddenException" :portkey.aws.mediapackage.-2017-10-12/forbidden-exception, "NotFoundException" :portkey.aws.mediapackage.-2017-10-12/not-found-exception, "ServiceUnavailableException" :portkey.aws.mediapackage.-2017-10-12/service-unavailable-exception, "TooManyRequestsException" :portkey.aws.mediapackage.-2017-10-12/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef create-origin-endpoint :args (clojure.spec.alpha/tuple :portkey.aws.mediapackage.-2017-10-12/create-origin-endpoint-request) :ret (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/create-origin-endpoint-response))

(clojure.core/defn list-origin-endpoints ([] (list-origin-endpoints {})) ([list-origin-endpoints-requestinput] (clojure.core/let [request-function-result__43533__auto__ (req-list-origin-endpoints-request list-origin-endpoints-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__43533__auto__ {:http.request.configuration/endpoints portkey.aws.mediapackage.-2017-10-12/endpoints, :http.request.spec/output-spec :portkey.aws.mediapackage.-2017-10-12/list-origin-endpoints-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/origin_endpoints", :http.request.configuration/version "2017-10-12", :http.request.configuration/service-id "MediaPackage", :http.request.spec/input-spec :portkey.aws.mediapackage.-2017-10-12/list-origin-endpoints-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "ListOriginEndpoints", :http.request.spec/error-spec {"UnprocessableEntityException" :portkey.aws.mediapackage.-2017-10-12/unprocessable-entity-exception, "InternalServerErrorException" :portkey.aws.mediapackage.-2017-10-12/internal-server-error-exception, "ForbiddenException" :portkey.aws.mediapackage.-2017-10-12/forbidden-exception, "NotFoundException" :portkey.aws.mediapackage.-2017-10-12/not-found-exception, "ServiceUnavailableException" :portkey.aws.mediapackage.-2017-10-12/service-unavailable-exception, "TooManyRequestsException" :portkey.aws.mediapackage.-2017-10-12/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef list-origin-endpoints :args (clojure.spec.alpha/? :portkey.aws.mediapackage.-2017-10-12/list-origin-endpoints-request) :ret (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/list-origin-endpoints-response))

(clojure.core/defn update-channel ([update-channel-requestinput] (clojure.core/let [request-function-result__43533__auto__ (req-update-channel-request update-channel-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__43533__auto__ {:http.request.configuration/endpoints portkey.aws.mediapackage.-2017-10-12/endpoints, :http.request.spec/output-spec :portkey.aws.mediapackage.-2017-10-12/update-channel-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/channels/{id}", :http.request.configuration/version "2017-10-12", :http.request.configuration/service-id "MediaPackage", :http.request.spec/input-spec :portkey.aws.mediapackage.-2017-10-12/update-channel-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/action "UpdateChannel", :http.request.spec/error-spec {"UnprocessableEntityException" :portkey.aws.mediapackage.-2017-10-12/unprocessable-entity-exception, "InternalServerErrorException" :portkey.aws.mediapackage.-2017-10-12/internal-server-error-exception, "ForbiddenException" :portkey.aws.mediapackage.-2017-10-12/forbidden-exception, "NotFoundException" :portkey.aws.mediapackage.-2017-10-12/not-found-exception, "ServiceUnavailableException" :portkey.aws.mediapackage.-2017-10-12/service-unavailable-exception, "TooManyRequestsException" :portkey.aws.mediapackage.-2017-10-12/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef update-channel :args (clojure.spec.alpha/tuple :portkey.aws.mediapackage.-2017-10-12/update-channel-request) :ret (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/update-channel-response))

(clojure.core/defn update-origin-endpoint ([update-origin-endpoint-requestinput] (clojure.core/let [request-function-result__43533__auto__ (req-update-origin-endpoint-request update-origin-endpoint-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__43533__auto__ {:http.request.configuration/endpoints portkey.aws.mediapackage.-2017-10-12/endpoints, :http.request.spec/output-spec :portkey.aws.mediapackage.-2017-10-12/update-origin-endpoint-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/origin_endpoints/{id}", :http.request.configuration/version "2017-10-12", :http.request.configuration/service-id "MediaPackage", :http.request.spec/input-spec :portkey.aws.mediapackage.-2017-10-12/update-origin-endpoint-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/action "UpdateOriginEndpoint", :http.request.spec/error-spec {"UnprocessableEntityException" :portkey.aws.mediapackage.-2017-10-12/unprocessable-entity-exception, "InternalServerErrorException" :portkey.aws.mediapackage.-2017-10-12/internal-server-error-exception, "ForbiddenException" :portkey.aws.mediapackage.-2017-10-12/forbidden-exception, "NotFoundException" :portkey.aws.mediapackage.-2017-10-12/not-found-exception, "ServiceUnavailableException" :portkey.aws.mediapackage.-2017-10-12/service-unavailable-exception, "TooManyRequestsException" :portkey.aws.mediapackage.-2017-10-12/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef update-origin-endpoint :args (clojure.spec.alpha/tuple :portkey.aws.mediapackage.-2017-10-12/update-origin-endpoint-request) :ret (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/update-origin-endpoint-response))

(clojure.core/defn rotate-channel-credentials ([rotate-channel-credentials-requestinput] (clojure.core/let [request-function-result__43533__auto__ (req-rotate-channel-credentials-request rotate-channel-credentials-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__43533__auto__ {:http.request.configuration/endpoints portkey.aws.mediapackage.-2017-10-12/endpoints, :http.request.spec/output-spec :portkey.aws.mediapackage.-2017-10-12/rotate-channel-credentials-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/channels/{id}/credentials", :http.request.configuration/version "2017-10-12", :http.request.configuration/service-id "MediaPackage", :http.request.spec/input-spec :portkey.aws.mediapackage.-2017-10-12/rotate-channel-credentials-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/action "RotateChannelCredentials", :http.request.spec/error-spec {"UnprocessableEntityException" :portkey.aws.mediapackage.-2017-10-12/unprocessable-entity-exception, "InternalServerErrorException" :portkey.aws.mediapackage.-2017-10-12/internal-server-error-exception, "ForbiddenException" :portkey.aws.mediapackage.-2017-10-12/forbidden-exception, "NotFoundException" :portkey.aws.mediapackage.-2017-10-12/not-found-exception, "ServiceUnavailableException" :portkey.aws.mediapackage.-2017-10-12/service-unavailable-exception, "TooManyRequestsException" :portkey.aws.mediapackage.-2017-10-12/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef rotate-channel-credentials :args (clojure.spec.alpha/tuple :portkey.aws.mediapackage.-2017-10-12/rotate-channel-credentials-request) :ret (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/rotate-channel-credentials-response))

(clojure.core/defn describe-origin-endpoint ([describe-origin-endpoint-requestinput] (clojure.core/let [request-function-result__43533__auto__ (req-describe-origin-endpoint-request describe-origin-endpoint-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__43533__auto__ {:http.request.configuration/endpoints portkey.aws.mediapackage.-2017-10-12/endpoints, :http.request.spec/output-spec :portkey.aws.mediapackage.-2017-10-12/describe-origin-endpoint-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/origin_endpoints/{id}", :http.request.configuration/version "2017-10-12", :http.request.configuration/service-id "MediaPackage", :http.request.spec/input-spec :portkey.aws.mediapackage.-2017-10-12/describe-origin-endpoint-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "DescribeOriginEndpoint", :http.request.spec/error-spec {"UnprocessableEntityException" :portkey.aws.mediapackage.-2017-10-12/unprocessable-entity-exception, "InternalServerErrorException" :portkey.aws.mediapackage.-2017-10-12/internal-server-error-exception, "ForbiddenException" :portkey.aws.mediapackage.-2017-10-12/forbidden-exception, "NotFoundException" :portkey.aws.mediapackage.-2017-10-12/not-found-exception, "ServiceUnavailableException" :portkey.aws.mediapackage.-2017-10-12/service-unavailable-exception, "TooManyRequestsException" :portkey.aws.mediapackage.-2017-10-12/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef describe-origin-endpoint :args (clojure.spec.alpha/tuple :portkey.aws.mediapackage.-2017-10-12/describe-origin-endpoint-request) :ret (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/describe-origin-endpoint-response))

(clojure.core/defn create-channel ([create-channel-requestinput] (clojure.core/let [request-function-result__43533__auto__ (req-create-channel-request create-channel-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__43533__auto__ {:http.request.configuration/endpoints portkey.aws.mediapackage.-2017-10-12/endpoints, :http.request.spec/output-spec :portkey.aws.mediapackage.-2017-10-12/create-channel-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/channels", :http.request.configuration/version "2017-10-12", :http.request.configuration/service-id "MediaPackage", :http.request.spec/input-spec :portkey.aws.mediapackage.-2017-10-12/create-channel-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :post, :http.request.configuration/response-code 200, :http.request.configuration/action "CreateChannel", :http.request.spec/error-spec {"UnprocessableEntityException" :portkey.aws.mediapackage.-2017-10-12/unprocessable-entity-exception, "InternalServerErrorException" :portkey.aws.mediapackage.-2017-10-12/internal-server-error-exception, "ForbiddenException" :portkey.aws.mediapackage.-2017-10-12/forbidden-exception, "NotFoundException" :portkey.aws.mediapackage.-2017-10-12/not-found-exception, "ServiceUnavailableException" :portkey.aws.mediapackage.-2017-10-12/service-unavailable-exception, "TooManyRequestsException" :portkey.aws.mediapackage.-2017-10-12/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef create-channel :args (clojure.spec.alpha/tuple :portkey.aws.mediapackage.-2017-10-12/create-channel-request) :ret (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/create-channel-response))

(clojure.core/defn describe-channel ([describe-channel-requestinput] (clojure.core/let [request-function-result__43533__auto__ (req-describe-channel-request describe-channel-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__43533__auto__ {:http.request.configuration/endpoints portkey.aws.mediapackage.-2017-10-12/endpoints, :http.request.spec/output-spec :portkey.aws.mediapackage.-2017-10-12/describe-channel-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/channels/{id}", :http.request.configuration/version "2017-10-12", :http.request.configuration/service-id "MediaPackage", :http.request.spec/input-spec :portkey.aws.mediapackage.-2017-10-12/describe-channel-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "DescribeChannel", :http.request.spec/error-spec {"UnprocessableEntityException" :portkey.aws.mediapackage.-2017-10-12/unprocessable-entity-exception, "InternalServerErrorException" :portkey.aws.mediapackage.-2017-10-12/internal-server-error-exception, "ForbiddenException" :portkey.aws.mediapackage.-2017-10-12/forbidden-exception, "NotFoundException" :portkey.aws.mediapackage.-2017-10-12/not-found-exception, "ServiceUnavailableException" :portkey.aws.mediapackage.-2017-10-12/service-unavailable-exception, "TooManyRequestsException" :portkey.aws.mediapackage.-2017-10-12/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef describe-channel :args (clojure.spec.alpha/tuple :portkey.aws.mediapackage.-2017-10-12/describe-channel-request) :ret (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/describe-channel-response))

(clojure.core/defn list-channels ([] (list-channels {})) ([list-channels-requestinput] (clojure.core/let [request-function-result__43533__auto__ (req-list-channels-request list-channels-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__43533__auto__ {:http.request.configuration/endpoints portkey.aws.mediapackage.-2017-10-12/endpoints, :http.request.spec/output-spec :portkey.aws.mediapackage.-2017-10-12/list-channels-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/channels", :http.request.configuration/version "2017-10-12", :http.request.configuration/service-id "MediaPackage", :http.request.spec/input-spec :portkey.aws.mediapackage.-2017-10-12/list-channels-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :get, :http.request.configuration/response-code 200, :http.request.configuration/action "ListChannels", :http.request.spec/error-spec {"UnprocessableEntityException" :portkey.aws.mediapackage.-2017-10-12/unprocessable-entity-exception, "InternalServerErrorException" :portkey.aws.mediapackage.-2017-10-12/internal-server-error-exception, "ForbiddenException" :portkey.aws.mediapackage.-2017-10-12/forbidden-exception, "NotFoundException" :portkey.aws.mediapackage.-2017-10-12/not-found-exception, "ServiceUnavailableException" :portkey.aws.mediapackage.-2017-10-12/service-unavailable-exception, "TooManyRequestsException" :portkey.aws.mediapackage.-2017-10-12/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef list-channels :args (clojure.spec.alpha/? :portkey.aws.mediapackage.-2017-10-12/list-channels-request) :ret (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/list-channels-response))

(clojure.core/defn rotate-ingest-endpoint-credentials ([rotate-ingest-endpoint-credentials-requestinput] (clojure.core/let [request-function-result__43533__auto__ (req-rotate-ingest-endpoint-credentials-request rotate-ingest-endpoint-credentials-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__43533__auto__ {:http.request.configuration/endpoints portkey.aws.mediapackage.-2017-10-12/endpoints, :http.request.spec/output-spec :portkey.aws.mediapackage.-2017-10-12/rotate-ingest-endpoint-credentials-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/channels/{id}/ingest_endpoints/{ingest_endpoint_id}/credentials", :http.request.configuration/version "2017-10-12", :http.request.configuration/service-id "MediaPackage", :http.request.spec/input-spec :portkey.aws.mediapackage.-2017-10-12/rotate-ingest-endpoint-credentials-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :put, :http.request.configuration/response-code 200, :http.request.configuration/action "RotateIngestEndpointCredentials", :http.request.spec/error-spec {"UnprocessableEntityException" :portkey.aws.mediapackage.-2017-10-12/unprocessable-entity-exception, "InternalServerErrorException" :portkey.aws.mediapackage.-2017-10-12/internal-server-error-exception, "ForbiddenException" :portkey.aws.mediapackage.-2017-10-12/forbidden-exception, "NotFoundException" :portkey.aws.mediapackage.-2017-10-12/not-found-exception, "ServiceUnavailableException" :portkey.aws.mediapackage.-2017-10-12/service-unavailable-exception, "TooManyRequestsException" :portkey.aws.mediapackage.-2017-10-12/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef rotate-ingest-endpoint-credentials :args (clojure.spec.alpha/tuple :portkey.aws.mediapackage.-2017-10-12/rotate-ingest-endpoint-credentials-request) :ret (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/rotate-ingest-endpoint-credentials-response))

(clojure.core/defn delete-origin-endpoint ([delete-origin-endpoint-requestinput] (clojure.core/let [request-function-result__43533__auto__ (req-delete-origin-endpoint-request delete-origin-endpoint-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__43533__auto__ {:http.request.configuration/endpoints portkey.aws.mediapackage.-2017-10-12/endpoints, :http.request.spec/output-spec :portkey.aws.mediapackage.-2017-10-12/delete-origin-endpoint-response, :http.request.configuration/mime-type {"content-type" "application/json"}, :http.request.configuration/request-uri "/origin_endpoints/{id}", :http.request.configuration/version "2017-10-12", :http.request.configuration/service-id "MediaPackage", :http.request.spec/input-spec :portkey.aws.mediapackage.-2017-10-12/delete-origin-endpoint-request, :http.request.configuration/protocol "rest-json", :http.request.configuration/method :delete, :http.request.configuration/response-code 202, :http.request.configuration/action "DeleteOriginEndpoint", :http.request.spec/error-spec {"UnprocessableEntityException" :portkey.aws.mediapackage.-2017-10-12/unprocessable-entity-exception, "InternalServerErrorException" :portkey.aws.mediapackage.-2017-10-12/internal-server-error-exception, "ForbiddenException" :portkey.aws.mediapackage.-2017-10-12/forbidden-exception, "NotFoundException" :portkey.aws.mediapackage.-2017-10-12/not-found-exception, "ServiceUnavailableException" :portkey.aws.mediapackage.-2017-10-12/service-unavailable-exception, "TooManyRequestsException" :portkey.aws.mediapackage.-2017-10-12/too-many-requests-exception}})))))
(clojure.spec.alpha/fdef delete-origin-endpoint :args (clojure.spec.alpha/tuple :portkey.aws.mediapackage.-2017-10-12/delete-origin-endpoint-request) :ret (clojure.spec.alpha/and :portkey.aws.mediapackage.-2017-10-12/delete-origin-endpoint-response))
