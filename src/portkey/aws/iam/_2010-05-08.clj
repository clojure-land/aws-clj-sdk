(ns portkey.aws.iam.-2010-05-08 (:require [portkey.aws]))

(def
 endpoints
 '{"us-gov-east-1"
   {:credential-scope {:service "iam", :region "us-gov-west-1"},
    :ssl-common-name "iam.us-gov.amazonaws.com",
    :endpoint "https://iam.us-gov.amazonaws.com",
    :signature-version :v4},
   "ap-northeast-1"
   {:credential-scope {:service "iam", :region "us-east-1"},
    :ssl-common-name "iam.amazonaws.com",
    :endpoint "https://iam.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "iam", :region "us-east-1"},
    :ssl-common-name "iam.amazonaws.com",
    :endpoint "https://iam.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "iam", :region "us-east-1"},
    :ssl-common-name "iam.amazonaws.com",
    :endpoint "https://iam.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope {:service "iam", :region "us-east-1"},
    :ssl-common-name "iam.amazonaws.com",
    :endpoint "https://iam.amazonaws.com",
    :signature-version :v4},
   "aws-cn-global"
   {:credential-scope {:service "iam", :region "cn-north-1"},
    :ssl-common-name "iam.cn-north-1.amazonaws.com.cn",
    :endpoint "https://iam.cn-north-1.amazonaws.com.cn",
    :signature-version :v4},
   "cn-north-1"
   {:credential-scope {:service "iam", :region "cn-north-1"},
    :ssl-common-name "iam.cn-north-1.amazonaws.com.cn",
    :endpoint "https://iam.cn-north-1.amazonaws.com.cn",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "iam", :region "us-east-1"},
    :ssl-common-name "iam.amazonaws.com",
    :endpoint "https://iam.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope {:service "iam", :region "us-east-1"},
    :ssl-common-name "iam.amazonaws.com",
    :endpoint "https://iam.amazonaws.com",
    :signature-version :v4},
   "cn-northwest-1"
   {:credential-scope {:service "iam", :region "cn-north-1"},
    :ssl-common-name "iam.cn-north-1.amazonaws.com.cn",
    :endpoint "https://iam.cn-north-1.amazonaws.com.cn",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope {:service "iam", :region "us-east-1"},
    :ssl-common-name "iam.amazonaws.com",
    :endpoint "https://iam.amazonaws.com",
    :signature-version :v4},
   "eu-west-3"
   {:credential-scope {:service "iam", :region "us-east-1"},
    :ssl-common-name "iam.amazonaws.com",
    :endpoint "https://iam.amazonaws.com",
    :signature-version :v4},
   "aws-us-gov-global"
   {:credential-scope {:service "iam", :region "us-gov-west-1"},
    :ssl-common-name "iam.us-gov.amazonaws.com",
    :endpoint "https://iam.us-gov.amazonaws.com",
    :signature-version :v4},
   "ca-central-1"
   {:credential-scope {:service "iam", :region "us-east-1"},
    :ssl-common-name "iam.amazonaws.com",
    :endpoint "https://iam.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "iam", :region "us-east-1"},
    :ssl-common-name "iam.amazonaws.com",
    :endpoint "https://iam.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "iam", :region "us-east-1"},
    :ssl-common-name "iam.amazonaws.com",
    :endpoint "https://iam.amazonaws.com",
    :signature-version :v4},
   "us-gov-west-1"
   {:credential-scope {:service "iam", :region "us-gov-west-1"},
    :ssl-common-name "iam.us-gov.amazonaws.com",
    :endpoint "https://iam.us-gov.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "iam", :region "us-east-1"},
    :ssl-common-name "iam.amazonaws.com",
    :endpoint "https://iam.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "iam", :region "us-east-1"},
    :ssl-common-name "iam.amazonaws.com",
    :endpoint "https://iam.amazonaws.com",
    :signature-version :v4},
   "us-west-1"
   {:credential-scope {:service "iam", :region "us-east-1"},
    :ssl-common-name "iam.amazonaws.com",
    :endpoint "https://iam.amazonaws.com",
    :signature-version :v4},
   "ap-south-1"
   {:credential-scope {:service "iam", :region "us-east-1"},
    :ssl-common-name "iam.amazonaws.com",
    :endpoint "https://iam.amazonaws.com",
    :signature-version :v4},
   "eu-north-1"
   {:credential-scope {:service "iam", :region "us-east-1"},
    :ssl-common-name "iam.amazonaws.com",
    :endpoint "https://iam.amazonaws.com",
    :signature-version :v4},
   "aws-global"
   {:credential-scope {:service "iam", :region "us-east-1"},
    :ssl-common-name "iam.amazonaws.com",
    :endpoint "https://iam.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-context-entry-list-type)

(clojure.core/declare serpublic-key-material-type)

(clojure.core/declare sercustom-suffix-type)

(clojure.core/declare serpath-prefix-type)

(clojure.core/declare ser-policy-usage-type)

(clojure.core/declare sermarker-type)

(clojure.core/declare ser-action-name-type)

(clojure.core/declare seruser-name-type)

(clojure.core/declare sergroup-name-type)

(clojure.core/declare sertag-key-list-type)

(clojure.core/declare ser-saml-provider-name-type)

(clojure.core/declare serservice-namespace-type)

(clojure.core/declare serclient-id-type)

(clojure.core/declare servirtual-mfa-device-name)

(clojure.core/declare serservice-namespace-list-type)

(clojure.core/declare ser-context-entry)

(clojure.core/declare sertag-list-type)

(clojure.core/declare serthumbprint-type)

(clojure.core/declare serencoding-type)

(clojure.core/declare serrole-max-session-duration-type)

(clojure.core/declare seraccount-alias-type)

(clojure.core/declare serpassword-reuse-prevention-type)

(clojure.core/declare sertag-key-type)

(clojure.core/declare ser-resource-handling-option-type)

(clojure.core/declare serpolicy-version-id-type)

(clojure.core/declare ser-context-key-value-type)

(clojure.core/declare serinstance-profile-name-type)

(clojure.core/declare ser-simulation-policy-list-type)

(clojure.core/declare serservice-specific-credential-id)

(clojure.core/declare sermax-password-age-type)

(clojure.core/declare serpolicy-scope-type)

(clojure.core/declare serpolicy-document-type)

(clojure.core/declare ser-action-name-list-type)

(clojure.core/declare serboolean-type)

(clojure.core/declare ser-resource-name-list-type)

(clojure.core/declare serstatus-type)

(clojure.core/declare serexisting-user-name-type)

(clojure.core/declare ser-open-id-connect-provider-url-type)

(clojure.core/declare serjob-id-type)

(clojure.core/declare seraccess-key-id-type)

(clojure.core/declare serpolicy-description-type)

(clojure.core/declare serservice-name)

(clojure.core/declare ser-context-key-value-list-type)

(clojure.core/declare ser-resource-name-type)

(clojure.core/declare serboolean-object-type)

(clojure.core/declare ser-deletion-task-id-type)

(clojure.core/declare ser-saml-metadata-document-type)

(clojure.core/declare serpolicy-name-type)

(clojure.core/declare serauthentication-code-type)

(clojure.core/declare sermax-items-type)

(clojure.core/declare ser-context-key-type-enum)

(clojure.core/declare serassignment-status-type)

(clojure.core/declare serclient-id-list-type)

(clojure.core/declare sercertificate-body-type)

(clojure.core/declare sercertificate-chain-type)

(clojure.core/declare sercertificate-id-type)

(clojure.core/declare serthumbprint-list-type)

(clojure.core/declare serarn-type)

(clojure.core/declare ser-context-key-name-type)

(clojure.core/declare serprivate-key-type)

(clojure.core/declare serserver-certificate-name-type)

(clojure.core/declare serserial-number-type)

(clojure.core/declare serrole-description-type)

(clojure.core/declare ser-tag)

(clojure.core/declare serpassword-type)

(clojure.core/declare serminimum-password-length-type)

(clojure.core/declare serpolicy-path-type)

(clojure.core/declare serentity-list-type)

(clojure.core/declare sertag-value-type)

(clojure.core/declare serpublic-key-id-type)

(clojure.core/declare serpath-type)

(clojure.core/declare ser-entity-type)

(clojure.core/declare serrole-name-type)

(clojure.core/defn- ser-context-entry-list-type [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-context-entry coll) #:http.request.field{:shape "ContextEntry"}))) input), :shape "ContextEntryListType", :type "list"})

(clojure.core/defn- serpublic-key-material-type [input] #:http.request.field{:value input, :shape "publicKeyMaterialType"})

(clojure.core/defn- sercustom-suffix-type [input] #:http.request.field{:value input, :shape "customSuffixType"})

(clojure.core/defn- serpath-prefix-type [input] #:http.request.field{:value input, :shape "pathPrefixType"})

(clojure.core/defn- ser-policy-usage-type [input] #:http.request.field{:value (clojure.core/get {"PermissionsPolicy" "PermissionsPolicy", :permissions-policy "PermissionsPolicy", "PermissionsBoundary" "PermissionsBoundary", :permissions-boundary "PermissionsBoundary"} input), :shape "PolicyUsageType"})

(clojure.core/defn- sermarker-type [input] #:http.request.field{:value input, :shape "markerType"})

(clojure.core/defn- ser-action-name-type [input] #:http.request.field{:value input, :shape "ActionNameType"})

(clojure.core/defn- seruser-name-type [input] #:http.request.field{:value input, :shape "userNameType"})

(clojure.core/defn- sergroup-name-type [input] #:http.request.field{:value input, :shape "groupNameType"})

(clojure.core/defn- sertag-key-list-type [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (sertag-key-type coll) #:http.request.field{:shape "tagKeyType"}))) input), :shape "tagKeyListType", :type "list", :max 50})

(clojure.core/defn- ser-saml-provider-name-type [input] #:http.request.field{:value input, :shape "SAMLProviderNameType"})

(clojure.core/defn- serservice-namespace-type [input] #:http.request.field{:value input, :shape "serviceNamespaceType"})

(clojure.core/defn- serclient-id-type [input] #:http.request.field{:value input, :shape "clientIDType"})

(clojure.core/defn- servirtual-mfa-device-name [input] #:http.request.field{:value input, :shape "virtualMFADeviceName"})

(clojure.core/defn- serservice-namespace-list-type [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (serservice-namespace-type coll) #:http.request.field{:shape "serviceNamespaceType"}))) input), :shape "serviceNamespaceListType", :type "list", :max 200, :min 1})

(clojure.core/defn- ser-context-entry [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ContextEntry", :type "structure"} (clojure.core/contains? input :context-key-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-context-key-name-type (input :context-key-name)) #:http.request.field{:name "ContextKeyName", :shape "ContextKeyNameType"})) (clojure.core/contains? input :context-key-values) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-context-key-value-list-type (input :context-key-values)) #:http.request.field{:name "ContextKeyValues", :shape "ContextKeyValueListType"})) (clojure.core/contains? input :context-key-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-context-key-type-enum (input :context-key-type)) #:http.request.field{:name "ContextKeyType", :shape "ContextKeyTypeEnum"}))))

(clojure.core/defn- sertag-list-type [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-tag coll) #:http.request.field{:shape "Tag"}))) input), :shape "tagListType", :type "list", :max 50})

(clojure.core/defn- serthumbprint-type [input] #:http.request.field{:value input, :shape "thumbprintType"})

(clojure.core/defn- serencoding-type [input] #:http.request.field{:value (clojure.core/get {"SSH" "SSH", :ssh "SSH", "PEM" "PEM", :pem "PEM"} input), :shape "encodingType"})

(clojure.core/defn- serrole-max-session-duration-type [input] #:http.request.field{:value input, :shape "roleMaxSessionDurationType"})

(clojure.core/defn- seraccount-alias-type [input] #:http.request.field{:value input, :shape "accountAliasType"})

(clojure.core/defn- serpassword-reuse-prevention-type [input] #:http.request.field{:value input, :shape "passwordReusePreventionType"})

(clojure.core/defn- sertag-key-type [input] #:http.request.field{:value input, :shape "tagKeyType"})

(clojure.core/defn- ser-resource-handling-option-type [input] #:http.request.field{:value input, :shape "ResourceHandlingOptionType"})

(clojure.core/defn- serpolicy-version-id-type [input] #:http.request.field{:value input, :shape "policyVersionIdType"})

(clojure.core/defn- ser-context-key-value-type [input] #:http.request.field{:value input, :shape "ContextKeyValueType"})

(clojure.core/defn- serinstance-profile-name-type [input] #:http.request.field{:value input, :shape "instanceProfileNameType"})

(clojure.core/defn- ser-simulation-policy-list-type [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (serpolicy-document-type coll) #:http.request.field{:shape "policyDocumentType"}))) input), :shape "SimulationPolicyListType", :type "list"})

(clojure.core/defn- serservice-specific-credential-id [input] #:http.request.field{:value input, :shape "serviceSpecificCredentialId"})

(clojure.core/defn- sermax-password-age-type [input] #:http.request.field{:value input, :shape "maxPasswordAgeType"})

(clojure.core/defn- serpolicy-scope-type [input] #:http.request.field{:value (clojure.core/get {"All" "All", :all "All", "AWS" "AWS", :aws "AWS", "Local" "Local", :local "Local"} input), :shape "policyScopeType"})

(clojure.core/defn- serpolicy-document-type [input] #:http.request.field{:value input, :shape "policyDocumentType"})

(clojure.core/defn- ser-action-name-list-type [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-action-name-type coll) #:http.request.field{:shape "ActionNameType"}))) input), :shape "ActionNameListType", :type "list"})

(clojure.core/defn- serboolean-type [input] #:http.request.field{:value input, :shape "booleanType"})

(clojure.core/defn- ser-resource-name-list-type [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-resource-name-type coll) #:http.request.field{:shape "ResourceNameType"}))) input), :shape "ResourceNameListType", :type "list"})

(clojure.core/defn- serstatus-type [input] #:http.request.field{:value (clojure.core/get {"Active" "Active", :active "Active", "Inactive" "Inactive", :inactive "Inactive"} input), :shape "statusType"})

(clojure.core/defn- serexisting-user-name-type [input] #:http.request.field{:value input, :shape "existingUserNameType"})

(clojure.core/defn- ser-open-id-connect-provider-url-type [input] #:http.request.field{:value input, :shape "OpenIDConnectProviderUrlType"})

(clojure.core/defn- serjob-id-type [input] #:http.request.field{:value input, :shape "jobIDType"})

(clojure.core/defn- seraccess-key-id-type [input] #:http.request.field{:value input, :shape "accessKeyIdType"})

(clojure.core/defn- serpolicy-description-type [input] #:http.request.field{:value input, :shape "policyDescriptionType"})

(clojure.core/defn- serservice-name [input] #:http.request.field{:value input, :shape "serviceName"})

(clojure.core/defn- ser-context-key-value-list-type [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-context-key-value-type coll) #:http.request.field{:shape "ContextKeyValueType"}))) input), :shape "ContextKeyValueListType", :type "list"})

(clojure.core/defn- ser-resource-name-type [input] #:http.request.field{:value input, :shape "ResourceNameType"})

(clojure.core/defn- serboolean-object-type [input] #:http.request.field{:value input, :shape "booleanObjectType"})

(clojure.core/defn- ser-deletion-task-id-type [input] #:http.request.field{:value input, :shape "DeletionTaskIdType"})

(clojure.core/defn- ser-saml-metadata-document-type [input] #:http.request.field{:value input, :shape "SAMLMetadataDocumentType"})

(clojure.core/defn- serpolicy-name-type [input] #:http.request.field{:value input, :shape "policyNameType"})

(clojure.core/defn- serauthentication-code-type [input] #:http.request.field{:value input, :shape "authenticationCodeType"})

(clojure.core/defn- sermax-items-type [input] #:http.request.field{:value input, :shape "maxItemsType"})

(clojure.core/defn- ser-context-key-type-enum [input] #:http.request.field{:value (clojure.core/get {"boolean" "boolean", :binary "binary", :date-list "dateList", :numeric-list "numericList", "numeric" "numeric", :date "date", "booleanList" "booleanList", :boolean-list "booleanList", "string" "string", :ip "ip", "binaryList" "binaryList", :numeric "numeric", "ipList" "ipList", "binary" "binary", :string-list "stringList", :string "string", "numericList" "numericList", "ip" "ip", :ip-list "ipList", "dateList" "dateList", "date" "date", "stringList" "stringList", :binary-list "binaryList", :boolean "boolean"} input), :shape "ContextKeyTypeEnum"})

(clojure.core/defn- serassignment-status-type [input] #:http.request.field{:value (clojure.core/get {"Assigned" "Assigned", :assigned "Assigned", "Unassigned" "Unassigned", :unassigned "Unassigned", "Any" "Any", :any "Any"} input), :shape "assignmentStatusType"})

(clojure.core/defn- serclient-id-list-type [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (serclient-id-type coll) #:http.request.field{:shape "clientIDType"}))) input), :shape "clientIDListType", :type "list"})

(clojure.core/defn- sercertificate-body-type [input] #:http.request.field{:value input, :shape "certificateBodyType"})

(clojure.core/defn- sercertificate-chain-type [input] #:http.request.field{:value input, :shape "certificateChainType"})

(clojure.core/defn- sercertificate-id-type [input] #:http.request.field{:value input, :shape "certificateIdType"})

(clojure.core/defn- serthumbprint-list-type [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (serthumbprint-type coll) #:http.request.field{:shape "thumbprintType"}))) input), :shape "thumbprintListType", :type "list"})

(clojure.core/defn- serarn-type [input] #:http.request.field{:value input, :shape "arnType"})

(clojure.core/defn- ser-context-key-name-type [input] #:http.request.field{:value input, :shape "ContextKeyNameType"})

(clojure.core/defn- serprivate-key-type [input] #:http.request.field{:value input, :shape "privateKeyType"})

(clojure.core/defn- serserver-certificate-name-type [input] #:http.request.field{:value input, :shape "serverCertificateNameType"})

(clojure.core/defn- serserial-number-type [input] #:http.request.field{:value input, :shape "serialNumberType"})

(clojure.core/defn- serrole-description-type [input] #:http.request.field{:value input, :shape "roleDescriptionType"})

(clojure.core/defn- ser-tag [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (sertag-key-type (:key input)) #:http.request.field{:name "Key", :shape "tagKeyType"}) (clojure.core/into (sertag-value-type (:value input)) #:http.request.field{:name "Value", :shape "tagValueType"})], :shape "Tag", :type "structure"}))

(clojure.core/defn- serpassword-type [input] #:http.request.field{:value input, :shape "passwordType"})

(clojure.core/defn- serminimum-password-length-type [input] #:http.request.field{:value input, :shape "minimumPasswordLengthType"})

(clojure.core/defn- serpolicy-path-type [input] #:http.request.field{:value input, :shape "policyPathType"})

(clojure.core/defn- serentity-list-type [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-entity-type coll) #:http.request.field{:shape "EntityType"}))) input), :shape "entityListType", :type "list"})

(clojure.core/defn- sertag-value-type [input] #:http.request.field{:value input, :shape "tagValueType"})

(clojure.core/defn- serpublic-key-id-type [input] #:http.request.field{:value input, :shape "publicKeyIdType"})

(clojure.core/defn- serpath-type [input] #:http.request.field{:value input, :shape "pathType"})

(clojure.core/defn- ser-entity-type [input] #:http.request.field{:value (clojure.core/get {:role "Role", :local-managed-policy "LocalManagedPolicy", :group "Group", "LocalManagedPolicy" "LocalManagedPolicy", "User" "User", "Role" "Role", "AWSManagedPolicy" "AWSManagedPolicy", "Group" "Group", :user "User", :aws-managed-policy "AWSManagedPolicy"} input), :shape "EntityType"})

(clojure.core/defn- serrole-name-type [input] #:http.request.field{:value input, :shape "roleNameType"})

(clojure.core/defn- req-list-virtual-mfa-devices-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :assignment-status) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serassignment-status-type (input :assignment-status)) #:http.request.field{:name "AssignmentStatus", :shape "assignmentStatusType"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-update-account-password-policy-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :minimum-password-length) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serminimum-password-length-type (input :minimum-password-length)) #:http.request.field{:name "MinimumPasswordLength", :shape "minimumPasswordLengthType"})) (clojure.core/contains? input :require-numbers) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serboolean-type (input :require-numbers)) #:http.request.field{:name "RequireNumbers", :shape "booleanType"})) (clojure.core/contains? input :require-uppercase-characters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serboolean-type (input :require-uppercase-characters)) #:http.request.field{:name "RequireUppercaseCharacters", :shape "booleanType"})) (clojure.core/contains? input :hard-expiry) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serboolean-object-type (input :hard-expiry)) #:http.request.field{:name "HardExpiry", :shape "booleanObjectType"})) (clojure.core/contains? input :require-lowercase-characters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serboolean-type (input :require-lowercase-characters)) #:http.request.field{:name "RequireLowercaseCharacters", :shape "booleanType"})) (clojure.core/contains? input :require-symbols) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serboolean-type (input :require-symbols)) #:http.request.field{:name "RequireSymbols", :shape "booleanType"})) (clojure.core/contains? input :allow-users-to-change-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serboolean-type (input :allow-users-to-change-password)) #:http.request.field{:name "AllowUsersToChangePassword", :shape "booleanType"})) (clojure.core/contains? input :max-password-age) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-password-age-type (input :max-password-age)) #:http.request.field{:name "MaxPasswordAge", :shape "maxPasswordAgeType"})) (clojure.core/contains? input :password-reuse-prevention) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpassword-reuse-prevention-type (input :password-reuse-prevention)) #:http.request.field{:name "PasswordReusePrevention", :shape "passwordReusePreventionType"}))))

(clojure.core/defn- req-get-open-id-connect-provider-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serarn-type (input :open-id-connect-provider-arn)) #:http.request.field{:name "OpenIDConnectProviderArn", :shape "arnType"})]}))

(clojure.core/defn- req-create-role-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serrole-name-type (input :role-name)) #:http.request.field{:name "RoleName", :shape "roleNameType"}) (clojure.core/into (serpolicy-document-type (input :assume-role-policy-document)) #:http.request.field{:name "AssumeRolePolicyDocument", :shape "policyDocumentType"})]} (clojure.core/contains? input :path) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpath-type (input :path)) #:http.request.field{:name "Path", :shape "pathType"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serrole-description-type (input :description)) #:http.request.field{:name "Description", :shape "roleDescriptionType"})) (clojure.core/contains? input :max-session-duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serrole-max-session-duration-type (input :max-session-duration)) #:http.request.field{:name "MaxSessionDuration", :shape "roleMaxSessionDurationType"})) (clojure.core/contains? input :permissions-boundary) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serarn-type (input :permissions-boundary)) #:http.request.field{:name "PermissionsBoundary", :shape "arnType"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sertag-list-type (input :tags)) #:http.request.field{:name "Tags", :shape "tagListType"}))))

(clojure.core/defn- req-delete-login-profile-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (seruser-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "userNameType"})]}))

(clojure.core/defn- req-update-user-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"})]} (clojure.core/contains? input :new-path) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpath-type (input :new-path)) #:http.request.field{:name "NewPath", :shape "pathType"})) (clojure.core/contains? input :new-user-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (seruser-name-type (input :new-user-name)) #:http.request.field{:name "NewUserName", :shape "userNameType"}))))

(clojure.core/defn- req-get-role-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serrole-name-type (input :role-name)) #:http.request.field{:name "RoleName", :shape "roleNameType"}) (clojure.core/into (serpolicy-name-type (input :policy-name)) #:http.request.field{:name "PolicyName", :shape "policyNameType"})]}))

(clojure.core/defn- req-get-user-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :user-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"}))))

(clojure.core/defn- req-get-login-profile-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (seruser-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "userNameType"})]}))

(clojure.core/defn- req-list-users-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :path-prefix) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpath-prefix-type (input :path-prefix)) #:http.request.field{:name "PathPrefix", :shape "pathPrefixType"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-list-attached-user-policies-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (seruser-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "userNameType"})]} (clojure.core/contains? input :path-prefix) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpolicy-path-type (input :path-prefix)) #:http.request.field{:name "PathPrefix", :shape "policyPathType"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-list-open-id-connect-providers-request [input] (clojure.core/cond-> {}))

(clojure.core/defn- req-list-roles-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :path-prefix) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpath-prefix-type (input :path-prefix)) #:http.request.field{:name "PathPrefix", :shape "pathPrefixType"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-get-server-certificate-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serserver-certificate-name-type (input :server-certificate-name)) #:http.request.field{:name "ServerCertificateName", :shape "serverCertificateNameType"})]}))

(clojure.core/defn- req-delete-signing-certificate-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (sercertificate-id-type (input :certificate-id)) #:http.request.field{:name "CertificateId", :shape "certificateIdType"})]} (clojure.core/contains? input :user-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"}))))

(clojure.core/defn- req-tag-user-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"}) (clojure.core/into (sertag-list-type (input :tags)) #:http.request.field{:name "Tags", :shape "tagListType"})]}))

(clojure.core/defn- req-set-default-policy-version-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serarn-type (input :policy-arn)) #:http.request.field{:name "PolicyArn", :shape "arnType"}) (clojure.core/into (serpolicy-version-id-type (input :version-id)) #:http.request.field{:name "VersionId", :shape "policyVersionIdType"})]}))

(clojure.core/defn- req-create-saml-provider-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-saml-metadata-document-type (input :saml-metadata-document)) #:http.request.field{:name "SAMLMetadataDocument", :shape "SAMLMetadataDocumentType"}) (clojure.core/into (ser-saml-provider-name-type (input :name)) #:http.request.field{:name "Name", :shape "SAMLProviderNameType"})]}))

(clojure.core/defn- req-get-service-last-accessed-details-with-entities-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serjob-id-type (input :job-id)) #:http.request.field{:name "JobId", :shape "jobIDType"}) (clojure.core/into (serservice-namespace-type (input :service-namespace)) #:http.request.field{:name "ServiceNamespace", :shape "serviceNamespaceType"})]} (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"}))))

(clojure.core/defn- req-get-context-keys-for-principal-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serarn-type (input :policy-source-arn)) #:http.request.field{:name "PolicySourceArn", :shape "arnType"})]} (clojure.core/contains? input :policy-input-list) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-simulation-policy-list-type (input :policy-input-list)) #:http.request.field{:name "PolicyInputList", :shape "SimulationPolicyListType"}))))

(clojure.core/defn- req-reset-service-specific-credential-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serservice-specific-credential-id (input :service-specific-credential-id)) #:http.request.field{:name "ServiceSpecificCredentialId", :shape "serviceSpecificCredentialId"})]} (clojure.core/contains? input :user-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (seruser-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "userNameType"}))))

(clojure.core/defn- req-delete-group-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (sergroup-name-type (input :group-name)) #:http.request.field{:name "GroupName", :shape "groupNameType"}) (clojure.core/into (serpolicy-name-type (input :policy-name)) #:http.request.field{:name "PolicyName", :shape "policyNameType"})]}))

(clojure.core/defn- req-list-attached-group-policies-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (sergroup-name-type (input :group-name)) #:http.request.field{:name "GroupName", :shape "groupNameType"})]} (clojure.core/contains? input :path-prefix) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpolicy-path-type (input :path-prefix)) #:http.request.field{:name "PathPrefix", :shape "policyPathType"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-remove-user-from-group-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (sergroup-name-type (input :group-name)) #:http.request.field{:name "GroupName", :shape "groupNameType"}) (clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"})]}))

(clojure.core/defn- req-remove-role-from-instance-profile-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serinstance-profile-name-type (input :instance-profile-name)) #:http.request.field{:name "InstanceProfileName", :shape "instanceProfileNameType"}) (clojure.core/into (serrole-name-type (input :role-name)) #:http.request.field{:name "RoleName", :shape "roleNameType"})]}))

(clojure.core/defn- req-get-context-keys-for-custom-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-simulation-policy-list-type (input :policy-input-list)) #:http.request.field{:name "PolicyInputList", :shape "SimulationPolicyListType"})]}))

(clojure.core/defn- req-list-server-certificates-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :path-prefix) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpath-prefix-type (input :path-prefix)) #:http.request.field{:name "PathPrefix", :shape "pathPrefixType"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-list-signing-certificates-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :user-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-delete-service-linked-role-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serrole-name-type (input :role-name)) #:http.request.field{:name "RoleName", :shape "roleNameType"})]}))

(clojure.core/defn- req-put-group-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (sergroup-name-type (input :group-name)) #:http.request.field{:name "GroupName", :shape "groupNameType"}) (clojure.core/into (serpolicy-name-type (input :policy-name)) #:http.request.field{:name "PolicyName", :shape "policyNameType"}) (clojure.core/into (serpolicy-document-type (input :policy-document)) #:http.request.field{:name "PolicyDocument", :shape "policyDocumentType"})]}))

(clojure.core/defn- req-list-saml-providers-request [input] (clojure.core/cond-> {}))

(clojure.core/defn- req-detach-user-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (seruser-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "userNameType"}) (clojure.core/into (serarn-type (input :policy-arn)) #:http.request.field{:name "PolicyArn", :shape "arnType"})]}))

(clojure.core/defn- req-create-service-linked-role-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (sergroup-name-type (input :aws-service-name)) #:http.request.field{:name "AWSServiceName", :shape "groupNameType"})]} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serrole-description-type (input :description)) #:http.request.field{:name "Description", :shape "roleDescriptionType"})) (clojure.core/contains? input :custom-suffix) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sercustom-suffix-type (input :custom-suffix)) #:http.request.field{:name "CustomSuffix", :shape "customSuffixType"}))))

(clojure.core/defn- req-delete-access-key-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (seraccess-key-id-type (input :access-key-id)) #:http.request.field{:name "AccessKeyId", :shape "accessKeyIdType"})]} (clojure.core/contains? input :user-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"}))))

(clojure.core/defn- req-delete-saml-provider-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serarn-type (input :saml-provider-arn)) #:http.request.field{:name "SAMLProviderArn", :shape "arnType"})]}))

(clojure.core/defn- req-detach-group-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (sergroup-name-type (input :group-name)) #:http.request.field{:name "GroupName", :shape "groupNameType"}) (clojure.core/into (serarn-type (input :policy-arn)) #:http.request.field{:name "PolicyArn", :shape "arnType"})]}))

(clojure.core/defn- req-update-role-description-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serrole-name-type (input :role-name)) #:http.request.field{:name "RoleName", :shape "roleNameType"}) (clojure.core/into (serrole-description-type (input :description)) #:http.request.field{:name "Description", :shape "roleDescriptionType"})]}))

(clojure.core/defn- req-upload-ssh-public-key-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (seruser-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "userNameType"}) (clojure.core/into (serpublic-key-material-type (input :ssh-public-key-body)) #:http.request.field{:name "SSHPublicKeyBody", :shape "publicKeyMaterialType"})]}))

(clojure.core/defn- req-create-access-key-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :user-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"}))))

(clojure.core/defn- req-list-group-policies-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (sergroup-name-type (input :group-name)) #:http.request.field{:name "GroupName", :shape "groupNameType"})]} (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-add-user-to-group-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (sergroup-name-type (input :group-name)) #:http.request.field{:name "GroupName", :shape "groupNameType"}) (clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"})]}))

(clojure.core/defn- req-create-login-profile-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (seruser-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "userNameType"}) (clojure.core/into (serpassword-type (input :password)) #:http.request.field{:name "Password", :shape "passwordType"})]} (clojure.core/contains? input :password-reset-required) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serboolean-type (input :password-reset-required)) #:http.request.field{:name "PasswordResetRequired", :shape "booleanType"}))))

(clojure.core/defn- req-list-access-keys-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :user-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-attach-group-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (sergroup-name-type (input :group-name)) #:http.request.field{:name "GroupName", :shape "groupNameType"}) (clojure.core/into (serarn-type (input :policy-arn)) #:http.request.field{:name "PolicyArn", :shape "arnType"})]}))

(clojure.core/defn- req-list-role-policies-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serrole-name-type (input :role-name)) #:http.request.field{:name "RoleName", :shape "roleNameType"})]} (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-create-account-alias-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (seraccount-alias-type (input :account-alias)) #:http.request.field{:name "AccountAlias", :shape "accountAliasType"})]}))

(clojure.core/defn- req-create-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serpolicy-name-type (input :policy-name)) #:http.request.field{:name "PolicyName", :shape "policyNameType"}) (clojure.core/into (serpolicy-document-type (input :policy-document)) #:http.request.field{:name "PolicyDocument", :shape "policyDocumentType"})]} (clojure.core/contains? input :path) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpolicy-path-type (input :path)) #:http.request.field{:name "Path", :shape "policyPathType"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpolicy-description-type (input :description)) #:http.request.field{:name "Description", :shape "policyDescriptionType"}))))

(clojure.core/defn- req-delete-server-certificate-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serserver-certificate-name-type (input :server-certificate-name)) #:http.request.field{:name "ServerCertificateName", :shape "serverCertificateNameType"})]}))

(clojure.core/defn- req-put-role-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serrole-name-type (input :role-name)) #:http.request.field{:name "RoleName", :shape "roleNameType"}) (clojure.core/into (serpolicy-name-type (input :policy-name)) #:http.request.field{:name "PolicyName", :shape "policyNameType"}) (clojure.core/into (serpolicy-document-type (input :policy-document)) #:http.request.field{:name "PolicyDocument", :shape "policyDocumentType"})]}))

(clojure.core/defn- req-list-entities-for-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serarn-type (input :policy-arn)) #:http.request.field{:name "PolicyArn", :shape "arnType"})]} (clojure.core/contains? input :entity-filter) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-entity-type (input :entity-filter)) #:http.request.field{:name "EntityFilter", :shape "EntityType"})) (clojure.core/contains? input :path-prefix) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpath-type (input :path-prefix)) #:http.request.field{:name "PathPrefix", :shape "pathType"})) (clojure.core/contains? input :policy-usage-filter) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-policy-usage-type (input :policy-usage-filter)) #:http.request.field{:name "PolicyUsageFilter", :shape "PolicyUsageType"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-deactivate-mfa-device-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"}) (clojure.core/into (serserial-number-type (input :serial-number)) #:http.request.field{:name "SerialNumber", :shape "serialNumberType"})]}))

(clojure.core/defn- req-get-service-linked-role-deletion-status-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-deletion-task-id-type (input :deletion-task-id)) #:http.request.field{:name "DeletionTaskId", :shape "DeletionTaskIdType"})]}))

(clojure.core/defn- req-add-role-to-instance-profile-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serinstance-profile-name-type (input :instance-profile-name)) #:http.request.field{:name "InstanceProfileName", :shape "instanceProfileNameType"}) (clojure.core/into (serrole-name-type (input :role-name)) #:http.request.field{:name "RoleName", :shape "roleNameType"})]}))

(clojure.core/defn- req-delete-user-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"}) (clojure.core/into (serpolicy-name-type (input :policy-name)) #:http.request.field{:name "PolicyName", :shape "policyNameType"})]}))

(clojure.core/defn- req-simulate-custom-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-simulation-policy-list-type (input :policy-input-list)) #:http.request.field{:name "PolicyInputList", :shape "SimulationPolicyListType"}) (clojure.core/into (ser-action-name-list-type (input :action-names)) #:http.request.field{:name "ActionNames", :shape "ActionNameListType"})]} (clojure.core/contains? input :resource-handling-option) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-resource-handling-option-type (input :resource-handling-option)) #:http.request.field{:name "ResourceHandlingOption", :shape "ResourceHandlingOptionType"})) (clojure.core/contains? input :resource-policy) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpolicy-document-type (input :resource-policy)) #:http.request.field{:name "ResourcePolicy", :shape "policyDocumentType"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :resource-arns) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-resource-name-list-type (input :resource-arns)) #:http.request.field{:name "ResourceArns", :shape "ResourceNameListType"})) (clojure.core/contains? input :context-entries) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-context-entry-list-type (input :context-entries)) #:http.request.field{:name "ContextEntries", :shape "ContextEntryListType"})) (clojure.core/contains? input :resource-owner) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-resource-name-type (input :resource-owner)) #:http.request.field{:name "ResourceOwner", :shape "ResourceNameType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"})) (clojure.core/contains? input :caller-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-resource-name-type (input :caller-arn)) #:http.request.field{:name "CallerArn", :shape "ResourceNameType"}))))

(clojure.core/defn- req-delete-account-alias-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (seraccount-alias-type (input :account-alias)) #:http.request.field{:name "AccountAlias", :shape "accountAliasType"})]}))

(clojure.core/defn- req-update-assume-role-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serrole-name-type (input :role-name)) #:http.request.field{:name "RoleName", :shape "roleNameType"}) (clojure.core/into (serpolicy-document-type (input :policy-document)) #:http.request.field{:name "PolicyDocument", :shape "policyDocumentType"})]}))

(clojure.core/defn- req-put-role-permissions-boundary-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serrole-name-type (input :role-name)) #:http.request.field{:name "RoleName", :shape "roleNameType"}) (clojure.core/into (serarn-type (input :permissions-boundary)) #:http.request.field{:name "PermissionsBoundary", :shape "arnType"})]}))

(clojure.core/defn- req-get-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serarn-type (input :policy-arn)) #:http.request.field{:name "PolicyArn", :shape "arnType"})]}))

(clojure.core/defn- req-create-virtual-mfa-device-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (servirtual-mfa-device-name (input :virtual-mfa-device-name)) #:http.request.field{:name "VirtualMFADeviceName", :shape "virtualMFADeviceName"})]} (clojure.core/contains? input :path) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpath-type (input :path)) #:http.request.field{:name "Path", :shape "pathType"}))))

(clojure.core/defn- req-list-mfa-devices-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :user-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-list-instance-profiles-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :path-prefix) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpath-prefix-type (input :path-prefix)) #:http.request.field{:name "PathPrefix", :shape "pathPrefixType"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-enable-mfa-device-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"}) (clojure.core/into (serserial-number-type (input :serial-number)) #:http.request.field{:name "SerialNumber", :shape "serialNumberType"}) (clojure.core/into (serauthentication-code-type (input :authentication-code-1)) #:http.request.field{:name "AuthenticationCode1", :shape "authenticationCodeType"}) (clojure.core/into (serauthentication-code-type (input :authentication-code-2)) #:http.request.field{:name "AuthenticationCode2", :shape "authenticationCodeType"})]}))

(clojure.core/defn- req-update-signing-certificate-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (sercertificate-id-type (input :certificate-id)) #:http.request.field{:name "CertificateId", :shape "certificateIdType"}) (clojure.core/into (serstatus-type (input :status)) #:http.request.field{:name "Status", :shape "statusType"})]} (clojure.core/contains? input :user-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"}))))

(clojure.core/defn- req-get-access-key-last-used-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (seraccess-key-id-type (input :access-key-id)) #:http.request.field{:name "AccessKeyId", :shape "accessKeyIdType"})]}))

(clojure.core/defn- req-delete-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serarn-type (input :policy-arn)) #:http.request.field{:name "PolicyArn", :shape "arnType"})]}))

(clojure.core/defn- req-create-service-specific-credential-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (seruser-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "userNameType"}) (clojure.core/into (serservice-name (input :service-name)) #:http.request.field{:name "ServiceName", :shape "serviceName"})]}))

(clojure.core/defn- req-delete-policy-version-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serarn-type (input :policy-arn)) #:http.request.field{:name "PolicyArn", :shape "arnType"}) (clojure.core/into (serpolicy-version-id-type (input :version-id)) #:http.request.field{:name "VersionId", :shape "policyVersionIdType"})]}))

(clojure.core/defn- req-delete-group-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (sergroup-name-type (input :group-name)) #:http.request.field{:name "GroupName", :shape "groupNameType"})]}))

(clojure.core/defn- req-delete-role-permissions-boundary-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serrole-name-type (input :role-name)) #:http.request.field{:name "RoleName", :shape "roleNameType"})]}))

(clojure.core/defn- req-delete-virtual-mfa-device-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serserial-number-type (input :serial-number)) #:http.request.field{:name "SerialNumber", :shape "serialNumberType"})]}))

(clojure.core/defn- req-list-policy-versions-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serarn-type (input :policy-arn)) #:http.request.field{:name "PolicyArn", :shape "arnType"})]} (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-get-policy-version-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serarn-type (input :policy-arn)) #:http.request.field{:name "PolicyArn", :shape "arnType"}) (clojure.core/into (serpolicy-version-id-type (input :version-id)) #:http.request.field{:name "VersionId", :shape "policyVersionIdType"})]}))

(clojure.core/defn- req-get-service-last-accessed-details-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serjob-id-type (input :job-id)) #:http.request.field{:name "JobId", :shape "jobIDType"})]} (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"}))))

(clojure.core/defn- req-detach-role-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serrole-name-type (input :role-name)) #:http.request.field{:name "RoleName", :shape "roleNameType"}) (clojure.core/into (serarn-type (input :policy-arn)) #:http.request.field{:name "PolicyArn", :shape "arnType"})]}))

(clojure.core/defn- req-get-saml-provider-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serarn-type (input :saml-provider-arn)) #:http.request.field{:name "SAMLProviderArn", :shape "arnType"})]}))

(clojure.core/defn- req-list-account-aliases-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-list-user-tags-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"})]} (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-get-account-authorization-details-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filter) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serentity-list-type (input :filter)) #:http.request.field{:name "Filter", :shape "entityListType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"}))))

(clojure.core/defn- req-list-ssh-public-keys-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :user-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (seruser-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "userNameType"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-update-login-profile-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (seruser-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "userNameType"})]} (clojure.core/contains? input :password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpassword-type (input :password)) #:http.request.field{:name "Password", :shape "passwordType"})) (clojure.core/contains? input :password-reset-required) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serboolean-object-type (input :password-reset-required)) #:http.request.field{:name "PasswordResetRequired", :shape "booleanObjectType"}))))

(clojure.core/defn- req-list-policies-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :scope) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpolicy-scope-type (input :scope)) #:http.request.field{:name "Scope", :shape "policyScopeType"})) (clojure.core/contains? input :only-attached) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serboolean-type (input :only-attached)) #:http.request.field{:name "OnlyAttached", :shape "booleanType"})) (clojure.core/contains? input :path-prefix) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpolicy-path-type (input :path-prefix)) #:http.request.field{:name "PathPrefix", :shape "policyPathType"})) (clojure.core/contains? input :policy-usage-filter) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-policy-usage-type (input :policy-usage-filter)) #:http.request.field{:name "PolicyUsageFilter", :shape "PolicyUsageType"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-change-password-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serpassword-type (input :old-password)) #:http.request.field{:name "OldPassword", :shape "passwordType"}) (clojure.core/into (serpassword-type (input :new-password)) #:http.request.field{:name "NewPassword", :shape "passwordType"})]}))

(clojure.core/defn- req-create-instance-profile-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serinstance-profile-name-type (input :instance-profile-name)) #:http.request.field{:name "InstanceProfileName", :shape "instanceProfileNameType"})]} (clojure.core/contains? input :path) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpath-type (input :path)) #:http.request.field{:name "Path", :shape "pathType"}))))

(clojure.core/defn- req-create-open-id-connect-provider-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-open-id-connect-provider-url-type (input :url)) #:http.request.field{:name "Url", :shape "OpenIDConnectProviderUrlType"}) (clojure.core/into (serthumbprint-list-type (input :thumbprint-list)) #:http.request.field{:name "ThumbprintList", :shape "thumbprintListType"})]} (clojure.core/contains? input :client-id-list) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serclient-id-list-type (input :client-id-list)) #:http.request.field{:name "ClientIDList", :shape "clientIDListType"}))))

(clojure.core/defn- req-resync-mfa-device-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"}) (clojure.core/into (serserial-number-type (input :serial-number)) #:http.request.field{:name "SerialNumber", :shape "serialNumberType"}) (clojure.core/into (serauthentication-code-type (input :authentication-code-1)) #:http.request.field{:name "AuthenticationCode1", :shape "authenticationCodeType"}) (clojure.core/into (serauthentication-code-type (input :authentication-code-2)) #:http.request.field{:name "AuthenticationCode2", :shape "authenticationCodeType"})]}))

(clojure.core/defn- req-delete-instance-profile-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serinstance-profile-name-type (input :instance-profile-name)) #:http.request.field{:name "InstanceProfileName", :shape "instanceProfileNameType"})]}))

(clojure.core/defn- req-list-groups-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :path-prefix) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpath-prefix-type (input :path-prefix)) #:http.request.field{:name "PathPrefix", :shape "pathPrefixType"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-create-user-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (seruser-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "userNameType"})]} (clojure.core/contains? input :path) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpath-type (input :path)) #:http.request.field{:name "Path", :shape "pathType"})) (clojure.core/contains? input :permissions-boundary) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serarn-type (input :permissions-boundary)) #:http.request.field{:name "PermissionsBoundary", :shape "arnType"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sertag-list-type (input :tags)) #:http.request.field{:name "Tags", :shape "tagListType"}))))

(clojure.core/defn- req-untag-role-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serrole-name-type (input :role-name)) #:http.request.field{:name "RoleName", :shape "roleNameType"}) (clojure.core/into (sertag-key-list-type (input :tag-keys)) #:http.request.field{:name "TagKeys", :shape "tagKeyListType"})]}))

(clojure.core/defn- req-list-groups-for-user-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"})]} (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-remove-client-id-from-open-id-connect-provider-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serarn-type (input :open-id-connect-provider-arn)) #:http.request.field{:name "OpenIDConnectProviderArn", :shape "arnType"}) (clojure.core/into (serclient-id-type (input :client-id)) #:http.request.field{:name "ClientID", :shape "clientIDType"})]}))

(clojure.core/defn- req-list-instance-profiles-for-role-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serrole-name-type (input :role-name)) #:http.request.field{:name "RoleName", :shape "roleNameType"})]} (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-get-user-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"}) (clojure.core/into (serpolicy-name-type (input :policy-name)) #:http.request.field{:name "PolicyName", :shape "policyNameType"})]}))

(clojure.core/defn- req-list-role-tags-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serrole-name-type (input :role-name)) #:http.request.field{:name "RoleName", :shape "roleNameType"})]} (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-put-user-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"}) (clojure.core/into (serpolicy-name-type (input :policy-name)) #:http.request.field{:name "PolicyName", :shape "policyNameType"}) (clojure.core/into (serpolicy-document-type (input :policy-document)) #:http.request.field{:name "PolicyDocument", :shape "policyDocumentType"})]}))

(clojure.core/defn- req-create-group-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (sergroup-name-type (input :group-name)) #:http.request.field{:name "GroupName", :shape "groupNameType"})]} (clojure.core/contains? input :path) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpath-type (input :path)) #:http.request.field{:name "Path", :shape "pathType"}))))

(clojure.core/defn- req-get-instance-profile-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serinstance-profile-name-type (input :instance-profile-name)) #:http.request.field{:name "InstanceProfileName", :shape "instanceProfileNameType"})]}))

(clojure.core/defn- req-attach-role-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serrole-name-type (input :role-name)) #:http.request.field{:name "RoleName", :shape "roleNameType"}) (clojure.core/into (serarn-type (input :policy-arn)) #:http.request.field{:name "PolicyArn", :shape "arnType"})]}))

(clojure.core/defn- req-generate-service-last-accessed-details-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serarn-type (input :arn)) #:http.request.field{:name "Arn", :shape "arnType"})]}))

(clojure.core/defn- req-delete-user-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"})]}))

(clojure.core/defn- req-list-service-specific-credentials-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :user-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (seruser-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "userNameType"})) (clojure.core/contains? input :service-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serservice-name (input :service-name)) #:http.request.field{:name "ServiceName", :shape "serviceName"}))))

(clojure.core/defn- req-add-client-id-to-open-id-connect-provider-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serarn-type (input :open-id-connect-provider-arn)) #:http.request.field{:name "OpenIDConnectProviderArn", :shape "arnType"}) (clojure.core/into (serclient-id-type (input :client-id)) #:http.request.field{:name "ClientID", :shape "clientIDType"})]}))

(clojure.core/defn- req-upload-server-certificate-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serserver-certificate-name-type (input :server-certificate-name)) #:http.request.field{:name "ServerCertificateName", :shape "serverCertificateNameType"}) (clojure.core/into (sercertificate-body-type (input :certificate-body)) #:http.request.field{:name "CertificateBody", :shape "certificateBodyType"}) (clojure.core/into (serprivate-key-type (input :private-key)) #:http.request.field{:name "PrivateKey", :shape "privateKeyType"})]} (clojure.core/contains? input :path) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpath-type (input :path)) #:http.request.field{:name "Path", :shape "pathType"})) (clojure.core/contains? input :certificate-chain) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sercertificate-chain-type (input :certificate-chain)) #:http.request.field{:name "CertificateChain", :shape "certificateChainType"}))))

(clojure.core/defn- req-get-group-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (sergroup-name-type (input :group-name)) #:http.request.field{:name "GroupName", :shape "groupNameType"}) (clojure.core/into (serpolicy-name-type (input :policy-name)) #:http.request.field{:name "PolicyName", :shape "policyNameType"})]}))

(clojure.core/defn- req-list-attached-role-policies-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serrole-name-type (input :role-name)) #:http.request.field{:name "RoleName", :shape "roleNameType"})]} (clojure.core/contains? input :path-prefix) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpolicy-path-type (input :path-prefix)) #:http.request.field{:name "PathPrefix", :shape "policyPathType"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-get-group-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (sergroup-name-type (input :group-name)) #:http.request.field{:name "GroupName", :shape "groupNameType"})]} (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-update-service-specific-credential-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serservice-specific-credential-id (input :service-specific-credential-id)) #:http.request.field{:name "ServiceSpecificCredentialId", :shape "serviceSpecificCredentialId"}) (clojure.core/into (serstatus-type (input :status)) #:http.request.field{:name "Status", :shape "statusType"})]} (clojure.core/contains? input :user-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (seruser-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "userNameType"}))))

(clojure.core/defn- req-untag-user-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"}) (clojure.core/into (sertag-key-list-type (input :tag-keys)) #:http.request.field{:name "TagKeys", :shape "tagKeyListType"})]}))

(clojure.core/defn- req-update-open-id-connect-provider-thumbprint-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serarn-type (input :open-id-connect-provider-arn)) #:http.request.field{:name "OpenIDConnectProviderArn", :shape "arnType"}) (clojure.core/into (serthumbprint-list-type (input :thumbprint-list)) #:http.request.field{:name "ThumbprintList", :shape "thumbprintListType"})]}))

(clojure.core/defn- req-delete-role-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serrole-name-type (input :role-name)) #:http.request.field{:name "RoleName", :shape "roleNameType"})]}))

(clojure.core/defn- req-get-ssh-public-key-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (seruser-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "userNameType"}) (clojure.core/into (serpublic-key-id-type (input :ssh-public-key-id)) #:http.request.field{:name "SSHPublicKeyId", :shape "publicKeyIdType"}) (clojure.core/into (serencoding-type (input :encoding)) #:http.request.field{:name "Encoding", :shape "encodingType"})]}))

(clojure.core/defn- req-tag-role-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serrole-name-type (input :role-name)) #:http.request.field{:name "RoleName", :shape "roleNameType"}) (clojure.core/into (sertag-list-type (input :tags)) #:http.request.field{:name "Tags", :shape "tagListType"})]}))

(clojure.core/defn- req-simulate-principal-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serarn-type (input :policy-source-arn)) #:http.request.field{:name "PolicySourceArn", :shape "arnType"}) (clojure.core/into (ser-action-name-list-type (input :action-names)) #:http.request.field{:name "ActionNames", :shape "ActionNameListType"})]} (clojure.core/contains? input :resource-handling-option) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-resource-handling-option-type (input :resource-handling-option)) #:http.request.field{:name "ResourceHandlingOption", :shape "ResourceHandlingOptionType"})) (clojure.core/contains? input :resource-policy) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpolicy-document-type (input :resource-policy)) #:http.request.field{:name "ResourcePolicy", :shape "policyDocumentType"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :resource-arns) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-resource-name-list-type (input :resource-arns)) #:http.request.field{:name "ResourceArns", :shape "ResourceNameListType"})) (clojure.core/contains? input :context-entries) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-context-entry-list-type (input :context-entries)) #:http.request.field{:name "ContextEntries", :shape "ContextEntryListType"})) (clojure.core/contains? input :policy-input-list) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-simulation-policy-list-type (input :policy-input-list)) #:http.request.field{:name "PolicyInputList", :shape "SimulationPolicyListType"})) (clojure.core/contains? input :resource-owner) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-resource-name-type (input :resource-owner)) #:http.request.field{:name "ResourceOwner", :shape "ResourceNameType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"})) (clojure.core/contains? input :caller-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-resource-name-type (input :caller-arn)) #:http.request.field{:name "CallerArn", :shape "ResourceNameType"}))))

(clojure.core/defn- req-update-access-key-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (seraccess-key-id-type (input :access-key-id)) #:http.request.field{:name "AccessKeyId", :shape "accessKeyIdType"}) (clojure.core/into (serstatus-type (input :status)) #:http.request.field{:name "Status", :shape "statusType"})]} (clojure.core/contains? input :user-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"}))))

(clojure.core/defn- req-delete-ssh-public-key-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (seruser-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "userNameType"}) (clojure.core/into (serpublic-key-id-type (input :ssh-public-key-id)) #:http.request.field{:name "SSHPublicKeyId", :shape "publicKeyIdType"})]}))

(clojure.core/defn- req-delete-user-permissions-boundary-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (seruser-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "userNameType"})]}))

(clojure.core/defn- req-update-ssh-public-key-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (seruser-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "userNameType"}) (clojure.core/into (serpublic-key-id-type (input :ssh-public-key-id)) #:http.request.field{:name "SSHPublicKeyId", :shape "publicKeyIdType"}) (clojure.core/into (serstatus-type (input :status)) #:http.request.field{:name "Status", :shape "statusType"})]}))

(clojure.core/defn- req-delete-open-id-connect-provider-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serarn-type (input :open-id-connect-provider-arn)) #:http.request.field{:name "OpenIDConnectProviderArn", :shape "arnType"})]}))

(clojure.core/defn- req-delete-service-specific-credential-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serservice-specific-credential-id (input :service-specific-credential-id)) #:http.request.field{:name "ServiceSpecificCredentialId", :shape "serviceSpecificCredentialId"})]} (clojure.core/contains? input :user-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (seruser-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "userNameType"}))))

(clojure.core/defn- req-update-server-certificate-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serserver-certificate-name-type (input :server-certificate-name)) #:http.request.field{:name "ServerCertificateName", :shape "serverCertificateNameType"})]} (clojure.core/contains? input :new-path) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpath-type (input :new-path)) #:http.request.field{:name "NewPath", :shape "pathType"})) (clojure.core/contains? input :new-server-certificate-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serserver-certificate-name-type (input :new-server-certificate-name)) #:http.request.field{:name "NewServerCertificateName", :shape "serverCertificateNameType"}))))

(clojure.core/defn- req-delete-role-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serrole-name-type (input :role-name)) #:http.request.field{:name "RoleName", :shape "roleNameType"}) (clojure.core/into (serpolicy-name-type (input :policy-name)) #:http.request.field{:name "PolicyName", :shape "policyNameType"})]}))

(clojure.core/defn- req-upload-signing-certificate-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (sercertificate-body-type (input :certificate-body)) #:http.request.field{:name "CertificateBody", :shape "certificateBodyType"})]} (clojure.core/contains? input :user-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"}))))

(clojure.core/defn- req-attach-user-policy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (seruser-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "userNameType"}) (clojure.core/into (serarn-type (input :policy-arn)) #:http.request.field{:name "PolicyArn", :shape "arnType"})]}))

(clojure.core/defn- req-list-user-policies-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serexisting-user-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "existingUserNameType"})]} (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"})) (clojure.core/contains? input :max-items) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermax-items-type (input :max-items)) #:http.request.field{:name "MaxItems", :shape "maxItemsType"}))))

(clojure.core/defn- req-get-role-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serrole-name-type (input :role-name)) #:http.request.field{:name "RoleName", :shape "roleNameType"})]}))

(clojure.core/defn- req-update-role-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serrole-name-type (input :role-name)) #:http.request.field{:name "RoleName", :shape "roleNameType"})]} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serrole-description-type (input :description)) #:http.request.field{:name "Description", :shape "roleDescriptionType"})) (clojure.core/contains? input :max-session-duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serrole-max-session-duration-type (input :max-session-duration)) #:http.request.field{:name "MaxSessionDuration", :shape "roleMaxSessionDurationType"}))))

(clojure.core/defn- req-update-saml-provider-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-saml-metadata-document-type (input :saml-metadata-document)) #:http.request.field{:name "SAMLMetadataDocument", :shape "SAMLMetadataDocumentType"}) (clojure.core/into (serarn-type (input :saml-provider-arn)) #:http.request.field{:name "SAMLProviderArn", :shape "arnType"})]}))

(clojure.core/defn- req-update-group-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (sergroup-name-type (input :group-name)) #:http.request.field{:name "GroupName", :shape "groupNameType"})]} (clojure.core/contains? input :new-path) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serpath-type (input :new-path)) #:http.request.field{:name "NewPath", :shape "pathType"})) (clojure.core/contains? input :new-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sergroup-name-type (input :new-group-name)) #:http.request.field{:name "NewGroupName", :shape "groupNameType"}))))

(clojure.core/defn- req-create-policy-version-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serarn-type (input :policy-arn)) #:http.request.field{:name "PolicyArn", :shape "arnType"}) (clojure.core/into (serpolicy-document-type (input :policy-document)) #:http.request.field{:name "PolicyDocument", :shape "policyDocumentType"})]} (clojure.core/contains? input :set-as-default) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serboolean-type (input :set-as-default)) #:http.request.field{:name "SetAsDefault", :shape "booleanType"}))))

(clojure.core/defn- req-put-user-permissions-boundary-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (seruser-name-type (input :user-name)) #:http.request.field{:name "UserName", :shape "userNameType"}) (clojure.core/into (serarn-type (input :permissions-boundary)) #:http.request.field{:name "PermissionsBoundary", :shape "arnType"})]}))

(clojure.core/defn- req-list-policies-granting-service-access-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (serarn-type (input :arn)) #:http.request.field{:name "Arn", :shape "arnType"}) (clojure.core/into (serservice-namespace-list-type (input :service-namespaces)) #:http.request.field{:name "ServiceNamespaces", :shape "serviceNamespaceListType"})]} (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (sermarker-type (input :marker)) #:http.request.field{:name "Marker", :shape "markerType"}))))

(clojure.core/declare deser-service-last-accessed)

(clojure.core/declare deser-saml-provider-list-type)

(clojure.core/declare deser-policy-source-type)

(clojure.core/declare deser-resource-specific-result)

(clojure.core/declare deserunrecognized-public-key-encoding-message)

(clojure.core/declare deserpublic-key-material-type)

(clojure.core/declare deser-server-certificate-metadata)

(clojure.core/declare deserentity-details-list-type)

(clojure.core/declare deserjob-status-type)

(clojure.core/declare deserkey-pair-mismatch-message)

(clojure.core/declare deserserver-certificate-metadata-list-type)

(clojure.core/declare deser-entity-details)

(clojure.core/declare deserpolicy-owner-entity-type)

(clojure.core/declare deser-report-state-type)

(clojure.core/declare deservirtual-mfa-device-list-type)

(clojure.core/declare desermarker-type)

(clojure.core/declare deser-deletion-task-status-type)

(clojure.core/declare deser-login-profile)

(clojure.core/declare deserdate-type)

(clojure.core/declare deser-server-certificate)

(clojure.core/declare desergroup-name-list-type)

(clojure.core/declare deser-saml-provider-list-entry)

(clojure.core/declare deser-action-name-type)

(clojure.core/declare deseruser-name-type)

(clojure.core/declare desergroup-name-type)

(clojure.core/declare deserpolicy-document-version-list-type)

(clojure.core/declare deser-role-usage-type)

(clojure.core/declare desercredential-report-expired-exception-message)

(clojure.core/declare deser-instance-profile)

(clojure.core/declare deserattached-policies-list-type)

(clojure.core/declare deserservice-namespace-type)

(clojure.core/declare deser-policy-identifier-type)

(clojure.core/declare deserid-type)

(clojure.core/declare deserclient-id-type)

(clojure.core/declare deserstring-type)

(clojure.core/declare deser-eval-decision-source-type)

(clojure.core/declare deser-password-policy)

(clojure.core/declare desersummary-map-type)

(clojure.core/declare deserlist-policy-granting-service-access-response-list-type)

(clojure.core/declare deser-services-last-accessed)

(clojure.core/declare deserno-such-entity-message)

(clojure.core/declare deseruser-list-type)

(clojure.core/declare desertag-list-type)

(clojure.core/declare deser-permissions-boundary-attachment-type)

(clojure.core/declare deserthumbprint-type)

(clojure.core/declare desersummary-key-type)

(clojure.core/declare deserinstance-profile-list-type)

(clojure.core/declare deserpassword-policy-violation-message)

(clojure.core/declare desermalformed-certificate-message)

(clojure.core/declare deser-statement-list-type)

(clojure.core/declare deserinvalid-certificate-message)

(clojure.core/declare deser-statement)

(clojure.core/declare deser-policy-user-list-type)

(clojure.core/declare deserrole-max-session-duration-type)

(clojure.core/declare deseraccount-alias-type)

(clojure.core/declare deseraccount-alias-list-type)

(clojure.core/declare deseraccess-key-secret-type)

(clojure.core/declare deserpolicy-evaluation-error-message)

(clojure.core/declare deserpassword-reuse-prevention-type)

(clojure.core/declare deser-line-number)

(clojure.core/declare deseruser-detail-list-type)

(clojure.core/declare desertag-key-type)

(clojure.core/declare deser-entity-info)

(clojure.core/declare deser-column-number)

(clojure.core/declare deser-user)

(clojure.core/declare deser-policy-role)

(clojure.core/declare deserattachment-count-type)

(clojure.core/declare deser-ssh-public-key-list-type)

(clojure.core/declare deser-service-specific-credential-metadata)

(clojure.core/declare deserpolicy-type)

(clojure.core/declare deserpolicy-version-id-type)

(clojure.core/declare deser-policy-version)

(clojure.core/declare deser-policy-role-list-type)

(clojure.core/declare deserinvalid-input-message)

(clojure.core/declare deserpublic-key-fingerprint-type)

(clojure.core/declare deserinstance-profile-name-type)

(clojure.core/declare deser-attached-permissions-boundary)

(clojure.core/declare deserservice-specific-credential-id)

(clojure.core/declare deser-evaluation-result)

(clojure.core/declare deser-attached-policy)

(clojure.core/declare desermax-password-age-type)

(clojure.core/declare deserentity-temporarily-unmodifiable-message)

(clojure.core/declare deser-policy-user)

(clojure.core/declare deser-access-key-last-used)

(clojure.core/declare deser-ssh-public-key)

(clojure.core/declare deserduplicate-certificate-message)

(clojure.core/declare deserpolicy-document-type)

(clojure.core/declare deserrole-detail-list-type)

(clojure.core/declare deser-bootstrap-datum)

(clojure.core/declare deser-role)

(clojure.core/declare deserinvalid-user-type-message)

(clojure.core/declare deserboolean-type)

(clojure.core/declare deser-virtual-mfa-device)

(clojure.core/declare deser-list-policies-granting-service-access-entry)

(clojure.core/declare deser-mfa-device)

(clojure.core/declare deserstatus-type)

(clojure.core/declare deserexisting-user-name-type)

(clojure.core/declare deserunmodifiable-entity-message)

(clojure.core/declare deser-open-id-connect-provider-url-type)

(clojure.core/declare deserjob-id-type)

(clojure.core/declare deseraccess-key-id-type)

(clojure.core/declare deser-role-usage-list-type)

(clojure.core/declare deserpolicy-description-type)

(clojure.core/declare deserentity-name-type)

(clojure.core/declare desercredential-report-not-present-exception-message)

(clojure.core/declare deserservice-name)

(clojure.core/declare deser-resource-name-type)

(clojure.core/declare deserboolean-object-type)

(clojure.core/declare deser-deletion-task-id-type)

(clojure.core/declare deser-user-detail)

(clojure.core/declare deser-managed-policy-detail-list-type)

(clojure.core/declare deser-saml-metadata-document-type)

(clojure.core/declare deserpolicy-name-type)

(clojure.core/declare deser-reason-type)

(clojure.core/declare deser-position)

(clojure.core/declare deserdelete-conflict-message)

(clojure.core/declare deserpolicy-name-list-type)

(clojure.core/declare deser-evaluation-results-list-type)

(clojure.core/declare desercertificate-list-type)

(clojure.core/declare deserclient-id-list-type)

(clojure.core/declare desercertificate-body-type)

(clojure.core/declare deser-policy-granting-service-access)

(clojure.core/declare desercredential-report-not-ready-exception-message)

(clojure.core/declare deserservice-name-type)

(clojure.core/declare deser-managed-policy-detail)

(clojure.core/declare deser-eval-decision-details-type)

(clojure.core/declare deser-access-key-metadata)

(clojure.core/declare deserpolicy-not-attachable-message)

(clojure.core/declare desercertificate-chain-type)

(clojure.core/declare deser-policy-group-list-type)

(clojure.core/declare desercertificate-id-type)

(clojure.core/declare deser-context-key-names-result-list-type)

(clojure.core/declare deserthumbprint-list-type)

(clojure.core/declare deserarn-type)

(clojure.core/declare deser-context-key-name-type)

(clojure.core/declare deserservice-not-supported-message)

(clojure.core/declare deser-policy-group)

(clojure.core/declare deserinvalid-public-key-message)

(clojure.core/declare deser-region-name-type)

(clojure.core/declare deser-error-details)

(clojure.core/declare desermalformed-policy-document-message)

(clojure.core/declare deser-signing-certificate)

(clojure.core/declare deser-report-state-description-type)

(clojure.core/declare deser-report-format-type)

(clojure.core/declare deserinteger-type)

(clojure.core/declare deser-role-detail)

(clojure.core/declare deser-service-specific-credentials-list-type)

(clojure.core/declare deserserver-certificate-name-type)

(clojure.core/declare deserserial-number-type)

(clojure.core/declare deserrole-description-type)

(clojure.core/declare deserpolicy-detail-list-type)

(clojure.core/declare deser-policy)

(clojure.core/declare deser-organizations-decision-detail)

(clojure.core/declare deser-tag)

(clojure.core/declare deseraccess-key-metadata-list-type)

(clojure.core/declare deserpolicy-granting-service-access-list-type)

(clojure.core/declare deser-arn-list-type)

(clojure.core/declare deserduplicate-ssh-public-key-message)

(clojure.core/declare deserservice-user-name)

(clojure.core/declare desermfa-device-list-type)

(clojure.core/declare deserminimum-password-length-type)

(clojure.core/declare deserpolicy-path-type)

(clojure.core/declare deser-policy-detail)

(clojure.core/declare desertag-value-type)

(clojure.core/declare deser-open-id-connect-provider-list-entry)

(clojure.core/declare desersummary-value-type)

(clojure.core/declare deserrole-list-type)

(clojure.core/declare deserpublic-key-id-type)

(clojure.core/declare deser-group)

(clojure.core/declare desergroup-detail-list-type)

(clojure.core/declare deser-deletion-task-failure-reason-type)

(clojure.core/declare deser-ssh-public-key-metadata)

(clojure.core/declare deserpath-type)

(clojure.core/declare desergroup-list-type)

(clojure.core/declare deser-policy-evaluation-decision-type)

(clojure.core/declare deserentity-already-exists-message)

(clojure.core/declare deser-open-id-connect-provider-list-type)

(clojure.core/declare deser-service-specific-credential)

(clojure.core/declare deserlimit-exceeded-message)

(clojure.core/declare deser-resource-specific-result-list-type)

(clojure.core/declare deser-access-key)

(clojure.core/declare deserinvalid-authentication-code-message)

(clojure.core/declare deserrole-name-type)

(clojure.core/declare deser-concurrent-modification-message)

(clojure.core/declare deserpolicy-list-type)

(clojure.core/declare deser-report-content-type)

(clojure.core/declare deserservice-password)

(clojure.core/declare deser-group-detail)

(clojure.core/declare deserservice-failure-exception-message)

(clojure.core/defn- deser-service-last-accessed [input] (clojure.core/let [letvar1073406 {"ServiceName" (portkey.aws/search-for-tag input "ServiceName" :flattened? nil :xmlAttribute? nil), "LastAuthenticated" (portkey.aws/search-for-tag input "LastAuthenticated" :flattened? nil :xmlAttribute? nil), "ServiceNamespace" (portkey.aws/search-for-tag input "ServiceNamespace" :flattened? nil :xmlAttribute? nil), "LastAuthenticatedEntity" (portkey.aws/search-for-tag input "LastAuthenticatedEntity" :flattened? nil :xmlAttribute? nil), "TotalAuthenticatedEntities" (portkey.aws/search-for-tag input "TotalAuthenticatedEntities" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:service-name (deserservice-name-type (clojure.core/get-in letvar1073406 ["ServiceName" :content])), :service-namespace (deserservice-namespace-type (clojure.core/get-in letvar1073406 ["ServiceNamespace" :content]))} (letvar1073406 "LastAuthenticated") (clojure.core/assoc :last-authenticated (deserdate-type (clojure.core/get-in letvar1073406 ["LastAuthenticated" :content]))) (letvar1073406 "LastAuthenticatedEntity") (clojure.core/assoc :last-authenticated-entity (deserarn-type (clojure.core/get-in letvar1073406 ["LastAuthenticatedEntity" :content]))) (letvar1073406 "TotalAuthenticatedEntities") (clojure.core/assoc :total-authenticated-entities (deserinteger-type (clojure.core/get-in letvar1073406 ["TotalAuthenticatedEntities" :content]))))))

(clojure.core/defn- deser-saml-provider-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-saml-provider-list-entry coll))) input))

(clojure.core/defn- deser-policy-source-type [input] (clojure.core/get {"user" :user, "group" :group, "role" :role, "aws-managed" :awsmanaged, "user-managed" :usermanaged, "resource" :resource, "none" :none} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-resource-specific-result [input] (clojure.core/let [letvar1073536 {"EvalResourceName" (portkey.aws/search-for-tag input "EvalResourceName" :flattened? nil :xmlAttribute? nil), "EvalResourceDecision" (portkey.aws/search-for-tag input "EvalResourceDecision" :flattened? nil :xmlAttribute? nil), "MatchedStatements" (portkey.aws/search-for-tag input "MatchedStatements" :flattened? nil :xmlAttribute? nil), "MissingContextValues" (portkey.aws/search-for-tag input "MissingContextValues" :flattened? nil :xmlAttribute? nil), "EvalDecisionDetails" (portkey.aws/search-for-tag input "EvalDecisionDetails" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:eval-resource-name (deser-resource-name-type (clojure.core/get-in letvar1073536 ["EvalResourceName" :content])), :eval-resource-decision (deser-policy-evaluation-decision-type (clojure.core/get-in letvar1073536 ["EvalResourceDecision" :content]))} (letvar1073536 "MatchedStatements") (clojure.core/assoc :matched-statements (deser-statement-list-type (clojure.core/get-in letvar1073536 ["MatchedStatements" :content]))) (letvar1073536 "MissingContextValues") (clojure.core/assoc :missing-context-values (deser-context-key-names-result-list-type (clojure.core/get-in letvar1073536 ["MissingContextValues" :content]))) (letvar1073536 "EvalDecisionDetails") (clojure.core/assoc :eval-decision-details (deser-eval-decision-details-type (clojure.core/get-in letvar1073536 ["EvalDecisionDetails" :content]))))))

(clojure.core/defn- deserunrecognized-public-key-encoding-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserpublic-key-material-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-server-certificate-metadata [input] (clojure.core/let [letvar1073654 {"Path" (portkey.aws/search-for-tag input "Path" :flattened? nil :xmlAttribute? nil), "ServerCertificateName" (portkey.aws/search-for-tag input "ServerCertificateName" :flattened? nil :xmlAttribute? nil), "ServerCertificateId" (portkey.aws/search-for-tag input "ServerCertificateId" :flattened? nil :xmlAttribute? nil), "Arn" (portkey.aws/search-for-tag input "Arn" :flattened? nil :xmlAttribute? nil), "UploadDate" (portkey.aws/search-for-tag input "UploadDate" :flattened? nil :xmlAttribute? nil), "Expiration" (portkey.aws/search-for-tag input "Expiration" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:path (deserpath-type (clojure.core/get-in letvar1073654 ["Path" :content])), :server-certificate-name (deserserver-certificate-name-type (clojure.core/get-in letvar1073654 ["ServerCertificateName" :content])), :server-certificate-id (deserid-type (clojure.core/get-in letvar1073654 ["ServerCertificateId" :content])), :arn (deserarn-type (clojure.core/get-in letvar1073654 ["Arn" :content]))} (letvar1073654 "UploadDate") (clojure.core/assoc :upload-date (deserdate-type (clojure.core/get-in letvar1073654 ["UploadDate" :content]))) (letvar1073654 "Expiration") (clojure.core/assoc :expiration (deserdate-type (clojure.core/get-in letvar1073654 ["Expiration" :content]))))))

(clojure.core/defn- deserentity-details-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-entity-details coll))) input))

(clojure.core/defn- deserjob-status-type [input] (clojure.core/get {"IN_PROGRESS" :in-progress, "COMPLETED" :completed, "FAILED" :failed} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deserkey-pair-mismatch-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserserver-certificate-metadata-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-server-certificate-metadata coll))) input))

(clojure.core/defn- deser-entity-details [input] (clojure.core/let [letvar1073806 {"EntityInfo" (portkey.aws/search-for-tag input "EntityInfo" :flattened? nil :xmlAttribute? nil), "LastAuthenticated" (portkey.aws/search-for-tag input "LastAuthenticated" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:entity-info (deser-entity-info (clojure.core/get-in letvar1073806 ["EntityInfo" :content]))} (letvar1073806 "LastAuthenticated") (clojure.core/assoc :last-authenticated (deserdate-type (clojure.core/get-in letvar1073806 ["LastAuthenticated" :content]))))))

(clojure.core/defn- deserpolicy-owner-entity-type [input] (clojure.core/get {"USER" :user, "ROLE" :role, "GROUP" :group} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-report-state-type [input] (clojure.core/get {"STARTED" :started, "INPROGRESS" :inprogress, "COMPLETE" :complete} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deservirtual-mfa-device-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-virtual-mfa-device coll))) input))

(clojure.core/defn- desermarker-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-deletion-task-status-type [input] (clojure.core/get {"SUCCEEDED" :succeeded, "IN_PROGRESS" :in-progress, "FAILED" :failed, "NOT_STARTED" :not-started} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-login-profile [input] (clojure.core/let [letvar1073951 {"UserName" (portkey.aws/search-for-tag input "UserName" :flattened? nil :xmlAttribute? nil), "CreateDate" (portkey.aws/search-for-tag input "CreateDate" :flattened? nil :xmlAttribute? nil), "PasswordResetRequired" (portkey.aws/search-for-tag input "PasswordResetRequired" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:user-name (deseruser-name-type (clojure.core/get-in letvar1073951 ["UserName" :content])), :create-date (deserdate-type (clojure.core/get-in letvar1073951 ["CreateDate" :content]))} (letvar1073951 "PasswordResetRequired") (clojure.core/assoc :password-reset-required (deserboolean-type (clojure.core/get-in letvar1073951 ["PasswordResetRequired" :content]))))))

(clojure.core/defn- deserdate-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-server-certificate [input] (clojure.core/let [letvar1074061 {"ServerCertificateMetadata" (portkey.aws/search-for-tag input "ServerCertificateMetadata" :flattened? nil :xmlAttribute? nil), "CertificateBody" (portkey.aws/search-for-tag input "CertificateBody" :flattened? nil :xmlAttribute? nil), "CertificateChain" (portkey.aws/search-for-tag input "CertificateChain" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:server-certificate-metadata (deser-server-certificate-metadata (clojure.core/get-in letvar1074061 ["ServerCertificateMetadata" :content])), :certificate-body (desercertificate-body-type (clojure.core/get-in letvar1074061 ["CertificateBody" :content]))} (letvar1074061 "CertificateChain") (clojure.core/assoc :certificate-chain (desercertificate-chain-type (clojure.core/get-in letvar1074061 ["CertificateChain" :content]))))))

(clojure.core/defn- desergroup-name-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (desergroup-name-type coll))) input))

(clojure.core/defn- deser-saml-provider-list-entry [input] (clojure.core/let [letvar1074186 {"Arn" (portkey.aws/search-for-tag input "Arn" :flattened? nil :xmlAttribute? nil), "ValidUntil" (portkey.aws/search-for-tag input "ValidUntil" :flattened? nil :xmlAttribute? nil), "CreateDate" (portkey.aws/search-for-tag input "CreateDate" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1074186 "Arn") (clojure.core/assoc :arn (deserarn-type (clojure.core/get-in letvar1074186 ["Arn" :content]))) (letvar1074186 "ValidUntil") (clojure.core/assoc :valid-until (deserdate-type (clojure.core/get-in letvar1074186 ["ValidUntil" :content]))) (letvar1074186 "CreateDate") (clojure.core/assoc :create-date (deserdate-type (clojure.core/get-in letvar1074186 ["CreateDate" :content]))))))

(clojure.core/defn- deser-action-name-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deseruser-name-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- desergroup-name-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserpolicy-document-version-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-policy-version coll))) input))

(clojure.core/defn- deser-role-usage-type [input] (clojure.core/let [letvar1074326 {"Region" (portkey.aws/search-for-tag input "Region" :flattened? nil :xmlAttribute? nil), "Resources" (portkey.aws/search-for-tag input "Resources" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1074326 "Region") (clojure.core/assoc :region (deser-region-name-type (clojure.core/get-in letvar1074326 ["Region" :content]))) (letvar1074326 "Resources") (clojure.core/assoc :resources (deser-arn-list-type (clojure.core/get-in letvar1074326 ["Resources" :content]))))))

(clojure.core/defn- desercredential-report-expired-exception-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-instance-profile [input] (clojure.core/let [letvar1074439 {"Path" (portkey.aws/search-for-tag input "Path" :flattened? nil :xmlAttribute? nil), "InstanceProfileName" (portkey.aws/search-for-tag input "InstanceProfileName" :flattened? nil :xmlAttribute? nil), "InstanceProfileId" (portkey.aws/search-for-tag input "InstanceProfileId" :flattened? nil :xmlAttribute? nil), "Arn" (portkey.aws/search-for-tag input "Arn" :flattened? nil :xmlAttribute? nil), "CreateDate" (portkey.aws/search-for-tag input "CreateDate" :flattened? nil :xmlAttribute? nil), "Roles" (portkey.aws/search-for-tag input "Roles" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:path (deserpath-type (clojure.core/get-in letvar1074439 ["Path" :content])), :instance-profile-name (deserinstance-profile-name-type (clojure.core/get-in letvar1074439 ["InstanceProfileName" :content])), :instance-profile-id (deserid-type (clojure.core/get-in letvar1074439 ["InstanceProfileId" :content])), :arn (deserarn-type (clojure.core/get-in letvar1074439 ["Arn" :content])), :create-date (deserdate-type (clojure.core/get-in letvar1074439 ["CreateDate" :content])), :roles (deserrole-list-type (clojure.core/get-in letvar1074439 ["Roles" :content]))})))

(clojure.core/defn- deserattached-policies-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-attached-policy coll))) input))

(clojure.core/defn- deserservice-namespace-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-policy-identifier-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserid-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserclient-id-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserstring-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-eval-decision-source-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-password-policy [input] (clojure.core/let [letvar1074594 {"MinimumPasswordLength" (portkey.aws/search-for-tag input "MinimumPasswordLength" :flattened? nil :xmlAttribute? nil), "RequireNumbers" (portkey.aws/search-for-tag input "RequireNumbers" :flattened? nil :xmlAttribute? nil), "RequireUppercaseCharacters" (portkey.aws/search-for-tag input "RequireUppercaseCharacters" :flattened? nil :xmlAttribute? nil), "HardExpiry" (portkey.aws/search-for-tag input "HardExpiry" :flattened? nil :xmlAttribute? nil), "ExpirePasswords" (portkey.aws/search-for-tag input "ExpirePasswords" :flattened? nil :xmlAttribute? nil), "RequireLowercaseCharacters" (portkey.aws/search-for-tag input "RequireLowercaseCharacters" :flattened? nil :xmlAttribute? nil), "RequireSymbols" (portkey.aws/search-for-tag input "RequireSymbols" :flattened? nil :xmlAttribute? nil), "AllowUsersToChangePassword" (portkey.aws/search-for-tag input "AllowUsersToChangePassword" :flattened? nil :xmlAttribute? nil), "MaxPasswordAge" (portkey.aws/search-for-tag input "MaxPasswordAge" :flattened? nil :xmlAttribute? nil), "PasswordReusePrevention" (portkey.aws/search-for-tag input "PasswordReusePrevention" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1074594 "MinimumPasswordLength") (clojure.core/assoc :minimum-password-length (deserminimum-password-length-type (clojure.core/get-in letvar1074594 ["MinimumPasswordLength" :content]))) (letvar1074594 "RequireNumbers") (clojure.core/assoc :require-numbers (deserboolean-type (clojure.core/get-in letvar1074594 ["RequireNumbers" :content]))) (letvar1074594 "RequireUppercaseCharacters") (clojure.core/assoc :require-uppercase-characters (deserboolean-type (clojure.core/get-in letvar1074594 ["RequireUppercaseCharacters" :content]))) (letvar1074594 "HardExpiry") (clojure.core/assoc :hard-expiry (deserboolean-object-type (clojure.core/get-in letvar1074594 ["HardExpiry" :content]))) (letvar1074594 "ExpirePasswords") (clojure.core/assoc :expire-passwords (deserboolean-type (clojure.core/get-in letvar1074594 ["ExpirePasswords" :content]))) (letvar1074594 "RequireLowercaseCharacters") (clojure.core/assoc :require-lowercase-characters (deserboolean-type (clojure.core/get-in letvar1074594 ["RequireLowercaseCharacters" :content]))) (letvar1074594 "RequireSymbols") (clojure.core/assoc :require-symbols (deserboolean-type (clojure.core/get-in letvar1074594 ["RequireSymbols" :content]))) (letvar1074594 "AllowUsersToChangePassword") (clojure.core/assoc :allow-users-to-change-password (deserboolean-type (clojure.core/get-in letvar1074594 ["AllowUsersToChangePassword" :content]))) (letvar1074594 "MaxPasswordAge") (clojure.core/assoc :max-password-age (desermax-password-age-type (clojure.core/get-in letvar1074594 ["MaxPasswordAge" :content]))) (letvar1074594 "PasswordReusePrevention") (clojure.core/assoc :password-reuse-prevention (deserpassword-reuse-prevention-type (clojure.core/get-in letvar1074594 ["PasswordReusePrevention" :content]))))))

(clojure.core/defn- desersummary-map-type [input] (clojure.core/let [x-flattened__21592__auto__ (clojure.core/map clojure.core/identity)] (clojure.core/into {} (clojure.core/comp x-flattened__21592__auto__ (clojure.core/map (clojure.core/fn [[k v]] [(desersummary-key-type k) (desersummary-value-type v)]))) input)))

(clojure.core/defn- deserlist-policy-granting-service-access-response-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-list-policies-granting-service-access-entry coll))) input))

(clojure.core/defn- deser-services-last-accessed [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-service-last-accessed coll))) input))

(clojure.core/defn- deserno-such-entity-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deseruser-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-user coll))) input))

(clojure.core/defn- desertag-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-tag coll))) input))

(clojure.core/defn- deser-permissions-boundary-attachment-type [input] (clojure.core/get {"PermissionsBoundaryPolicy" :permissions-boundary-policy} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deserthumbprint-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- desersummary-key-type [input] (clojure.core/get {"AccountMFAEnabled" :account-mfa-enabled, "VersionsPerPolicyQuota" :versions-per-policy-quota, "PolicySizeQuota" :policy-size-quota, "ServerCertificates" :server-certificates, "AccessKeysPerUserQuota" :access-keys-per-user-quota, "GroupsQuota" :groups-quota, "AttachedPoliciesPerRoleQuota" :attached-policies-per-role-quota, "SigningCertificatesPerUserQuota" :signing-certificates-per-user-quota, "GroupPolicySizeQuota" :group-policy-size-quota, "PolicyVersionsInUse" :policy-versions-in-use, "UserPolicySizeQuota" :user-policy-size-quota, "MFADevicesInUse" :mfa-devices-in-use, "Users" :users, "Groups" :groups, "AccountSigningCertificatesPresent" :account-signing-certificates-present, "Policies" :policies, "AttachedPoliciesPerGroupQuota" :attached-policies-per-group-quota, "UsersQuota" :users-quota, "PoliciesQuota" :policies-quota, "ServerCertificatesQuota" :server-certificates-quota, "AccountAccessKeysPresent" :account-access-keys-present, "GroupsPerUserQuota" :groups-per-user-quota, "MFADevices" :mfa-devices, "AttachedPoliciesPerUserQuota" :attached-policies-per-user-quota, "PolicyVersionsInUseQuota" :policy-versions-in-use-quota} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deserinstance-profile-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-profile coll))) input))

(clojure.core/defn- deserpassword-policy-violation-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- desermalformed-certificate-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-statement-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-statement coll))) input))

(clojure.core/defn- deserinvalid-certificate-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-statement [input] (clojure.core/let [letvar1074862 {"SourcePolicyId" (portkey.aws/search-for-tag input "SourcePolicyId" :flattened? nil :xmlAttribute? nil), "SourcePolicyType" (portkey.aws/search-for-tag input "SourcePolicyType" :flattened? nil :xmlAttribute? nil), "StartPosition" (portkey.aws/search-for-tag input "StartPosition" :flattened? nil :xmlAttribute? nil), "EndPosition" (portkey.aws/search-for-tag input "EndPosition" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1074862 "SourcePolicyId") (clojure.core/assoc :source-policy-id (deser-policy-identifier-type (clojure.core/get-in letvar1074862 ["SourcePolicyId" :content]))) (letvar1074862 "SourcePolicyType") (clojure.core/assoc :source-policy-type (deser-policy-source-type (clojure.core/get-in letvar1074862 ["SourcePolicyType" :content]))) (letvar1074862 "StartPosition") (clojure.core/assoc :start-position (deser-position (clojure.core/get-in letvar1074862 ["StartPosition" :content]))) (letvar1074862 "EndPosition") (clojure.core/assoc :end-position (deser-position (clojure.core/get-in letvar1074862 ["EndPosition" :content]))))))

(clojure.core/defn- deser-policy-user-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-policy-user coll))) input))

(clojure.core/defn- deserrole-max-session-duration-type [input] (java.lang.Integer. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deseraccount-alias-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deseraccount-alias-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deseraccount-alias-type coll))) input))

(clojure.core/defn- deseraccess-key-secret-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserpolicy-evaluation-error-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserpassword-reuse-prevention-type [input] (java.lang.Integer. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-line-number [input] (java.lang.Integer. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deseruser-detail-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-user-detail coll))) input))

(clojure.core/defn- desertag-key-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-entity-info [input] (clojure.core/let [letvar1075047 {"Arn" (portkey.aws/search-for-tag input "Arn" :flattened? nil :xmlAttribute? nil), "Name" (portkey.aws/search-for-tag input "Name" :flattened? nil :xmlAttribute? nil), "Type" (portkey.aws/search-for-tag input "Type" :flattened? nil :xmlAttribute? nil), "Id" (portkey.aws/search-for-tag input "Id" :flattened? nil :xmlAttribute? nil), "Path" (portkey.aws/search-for-tag input "Path" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:arn (deserarn-type (clojure.core/get-in letvar1075047 ["Arn" :content])), :name (deseruser-name-type (clojure.core/get-in letvar1075047 ["Name" :content])), :type (deserpolicy-owner-entity-type (clojure.core/get-in letvar1075047 ["Type" :content])), :id (deserid-type (clojure.core/get-in letvar1075047 ["Id" :content]))} (letvar1075047 "Path") (clojure.core/assoc :path (deserpath-type (clojure.core/get-in letvar1075047 ["Path" :content]))))))

(clojure.core/defn- deser-column-number [input] (java.lang.Integer. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-user [input] (clojure.core/let [letvar1075157 {"Path" (portkey.aws/search-for-tag input "Path" :flattened? nil :xmlAttribute? nil), "UserName" (portkey.aws/search-for-tag input "UserName" :flattened? nil :xmlAttribute? nil), "UserId" (portkey.aws/search-for-tag input "UserId" :flattened? nil :xmlAttribute? nil), "Arn" (portkey.aws/search-for-tag input "Arn" :flattened? nil :xmlAttribute? nil), "CreateDate" (portkey.aws/search-for-tag input "CreateDate" :flattened? nil :xmlAttribute? nil), "PasswordLastUsed" (portkey.aws/search-for-tag input "PasswordLastUsed" :flattened? nil :xmlAttribute? nil), "PermissionsBoundary" (portkey.aws/search-for-tag input "PermissionsBoundary" :flattened? nil :xmlAttribute? nil), "Tags" (portkey.aws/search-for-tag input "Tags" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:path (deserpath-type (clojure.core/get-in letvar1075157 ["Path" :content])), :user-name (deseruser-name-type (clojure.core/get-in letvar1075157 ["UserName" :content])), :user-id (deserid-type (clojure.core/get-in letvar1075157 ["UserId" :content])), :arn (deserarn-type (clojure.core/get-in letvar1075157 ["Arn" :content])), :create-date (deserdate-type (clojure.core/get-in letvar1075157 ["CreateDate" :content]))} (letvar1075157 "PasswordLastUsed") (clojure.core/assoc :password-last-used (deserdate-type (clojure.core/get-in letvar1075157 ["PasswordLastUsed" :content]))) (letvar1075157 "PermissionsBoundary") (clojure.core/assoc :permissions-boundary (deser-attached-permissions-boundary (clojure.core/get-in letvar1075157 ["PermissionsBoundary" :content]))) (letvar1075157 "Tags") (clojure.core/assoc :tags (desertag-list-type (clojure.core/get-in letvar1075157 ["Tags" :content]))))))

(clojure.core/defn- deser-policy-role [input] (clojure.core/let [letvar1075265 {"RoleName" (portkey.aws/search-for-tag input "RoleName" :flattened? nil :xmlAttribute? nil), "RoleId" (portkey.aws/search-for-tag input "RoleId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1075265 "RoleName") (clojure.core/assoc :role-name (deserrole-name-type (clojure.core/get-in letvar1075265 ["RoleName" :content]))) (letvar1075265 "RoleId") (clojure.core/assoc :role-id (deserid-type (clojure.core/get-in letvar1075265 ["RoleId" :content]))))))

(clojure.core/defn- deserattachment-count-type [input] (java.lang.Integer. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-ssh-public-key-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-ssh-public-key-metadata coll))) input))

(clojure.core/defn- deser-service-specific-credential-metadata [input] (clojure.core/let [letvar1075392 {"UserName" (portkey.aws/search-for-tag input "UserName" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "ServiceUserName" (portkey.aws/search-for-tag input "ServiceUserName" :flattened? nil :xmlAttribute? nil), "CreateDate" (portkey.aws/search-for-tag input "CreateDate" :flattened? nil :xmlAttribute? nil), "ServiceSpecificCredentialId" (portkey.aws/search-for-tag input "ServiceSpecificCredentialId" :flattened? nil :xmlAttribute? nil), "ServiceName" (portkey.aws/search-for-tag input "ServiceName" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:user-name (deseruser-name-type (clojure.core/get-in letvar1075392 ["UserName" :content])), :status (deserstatus-type (clojure.core/get-in letvar1075392 ["Status" :content])), :service-user-name (deserservice-user-name (clojure.core/get-in letvar1075392 ["ServiceUserName" :content])), :create-date (deserdate-type (clojure.core/get-in letvar1075392 ["CreateDate" :content])), :service-specific-credential-id (deserservice-specific-credential-id (clojure.core/get-in letvar1075392 ["ServiceSpecificCredentialId" :content])), :service-name (deserservice-name (clojure.core/get-in letvar1075392 ["ServiceName" :content]))})))

(clojure.core/defn- deserpolicy-type [input] (clojure.core/get {"INLINE" :inline, "MANAGED" :managed} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deserpolicy-version-id-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-policy-version [input] (clojure.core/let [letvar1075510 {"Document" (portkey.aws/search-for-tag input "Document" :flattened? nil :xmlAttribute? nil), "VersionId" (portkey.aws/search-for-tag input "VersionId" :flattened? nil :xmlAttribute? nil), "IsDefaultVersion" (portkey.aws/search-for-tag input "IsDefaultVersion" :flattened? nil :xmlAttribute? nil), "CreateDate" (portkey.aws/search-for-tag input "CreateDate" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1075510 "Document") (clojure.core/assoc :document (deserpolicy-document-type (clojure.core/get-in letvar1075510 ["Document" :content]))) (letvar1075510 "VersionId") (clojure.core/assoc :version-id (deserpolicy-version-id-type (clojure.core/get-in letvar1075510 ["VersionId" :content]))) (letvar1075510 "IsDefaultVersion") (clojure.core/assoc :is-default-version (deserboolean-type (clojure.core/get-in letvar1075510 ["IsDefaultVersion" :content]))) (letvar1075510 "CreateDate") (clojure.core/assoc :create-date (deserdate-type (clojure.core/get-in letvar1075510 ["CreateDate" :content]))))))

(clojure.core/defn- deser-policy-role-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-policy-role coll))) input))

(clojure.core/defn- deserinvalid-input-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserpublic-key-fingerprint-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserinstance-profile-name-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-attached-permissions-boundary [input] (clojure.core/let [letvar1075650 {"PermissionsBoundaryType" (portkey.aws/search-for-tag input "PermissionsBoundaryType" :flattened? nil :xmlAttribute? nil), "PermissionsBoundaryArn" (portkey.aws/search-for-tag input "PermissionsBoundaryArn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1075650 "PermissionsBoundaryType") (clojure.core/assoc :permissions-boundary-type (deser-permissions-boundary-attachment-type (clojure.core/get-in letvar1075650 ["PermissionsBoundaryType" :content]))) (letvar1075650 "PermissionsBoundaryArn") (clojure.core/assoc :permissions-boundary-arn (deserarn-type (clojure.core/get-in letvar1075650 ["PermissionsBoundaryArn" :content]))))))

(clojure.core/defn- deserservice-specific-credential-id [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-evaluation-result [input] (clojure.core/let [letvar1075763 {"EvalActionName" (portkey.aws/search-for-tag input "EvalActionName" :flattened? nil :xmlAttribute? nil), "EvalResourceName" (portkey.aws/search-for-tag input "EvalResourceName" :flattened? nil :xmlAttribute? nil), "EvalDecision" (portkey.aws/search-for-tag input "EvalDecision" :flattened? nil :xmlAttribute? nil), "MatchedStatements" (portkey.aws/search-for-tag input "MatchedStatements" :flattened? nil :xmlAttribute? nil), "MissingContextValues" (portkey.aws/search-for-tag input "MissingContextValues" :flattened? nil :xmlAttribute? nil), "OrganizationsDecisionDetail" (portkey.aws/search-for-tag input "OrganizationsDecisionDetail" :flattened? nil :xmlAttribute? nil), "EvalDecisionDetails" (portkey.aws/search-for-tag input "EvalDecisionDetails" :flattened? nil :xmlAttribute? nil), "ResourceSpecificResults" (portkey.aws/search-for-tag input "ResourceSpecificResults" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:eval-action-name (deser-action-name-type (clojure.core/get-in letvar1075763 ["EvalActionName" :content])), :eval-decision (deser-policy-evaluation-decision-type (clojure.core/get-in letvar1075763 ["EvalDecision" :content]))} (letvar1075763 "EvalResourceName") (clojure.core/assoc :eval-resource-name (deser-resource-name-type (clojure.core/get-in letvar1075763 ["EvalResourceName" :content]))) (letvar1075763 "MatchedStatements") (clojure.core/assoc :matched-statements (deser-statement-list-type (clojure.core/get-in letvar1075763 ["MatchedStatements" :content]))) (letvar1075763 "MissingContextValues") (clojure.core/assoc :missing-context-values (deser-context-key-names-result-list-type (clojure.core/get-in letvar1075763 ["MissingContextValues" :content]))) (letvar1075763 "OrganizationsDecisionDetail") (clojure.core/assoc :organizations-decision-detail (deser-organizations-decision-detail (clojure.core/get-in letvar1075763 ["OrganizationsDecisionDetail" :content]))) (letvar1075763 "EvalDecisionDetails") (clojure.core/assoc :eval-decision-details (deser-eval-decision-details-type (clojure.core/get-in letvar1075763 ["EvalDecisionDetails" :content]))) (letvar1075763 "ResourceSpecificResults") (clojure.core/assoc :resource-specific-results (deser-resource-specific-result-list-type (clojure.core/get-in letvar1075763 ["ResourceSpecificResults" :content]))))))

(clojure.core/defn- deser-attached-policy [input] (clojure.core/let [letvar1075871 {"PolicyName" (portkey.aws/search-for-tag input "PolicyName" :flattened? nil :xmlAttribute? nil), "PolicyArn" (portkey.aws/search-for-tag input "PolicyArn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1075871 "PolicyName") (clojure.core/assoc :policy-name (deserpolicy-name-type (clojure.core/get-in letvar1075871 ["PolicyName" :content]))) (letvar1075871 "PolicyArn") (clojure.core/assoc :policy-arn (deserarn-type (clojure.core/get-in letvar1075871 ["PolicyArn" :content]))))))

(clojure.core/defn- desermax-password-age-type [input] (java.lang.Integer. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deserentity-temporarily-unmodifiable-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-policy-user [input] (clojure.core/let [letvar1075986 {"UserName" (portkey.aws/search-for-tag input "UserName" :flattened? nil :xmlAttribute? nil), "UserId" (portkey.aws/search-for-tag input "UserId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1075986 "UserName") (clojure.core/assoc :user-name (deseruser-name-type (clojure.core/get-in letvar1075986 ["UserName" :content]))) (letvar1075986 "UserId") (clojure.core/assoc :user-id (deserid-type (clojure.core/get-in letvar1075986 ["UserId" :content]))))))

(clojure.core/defn- deser-access-key-last-used [input] (clojure.core/let [letvar1076094 {"LastUsedDate" (portkey.aws/search-for-tag input "LastUsedDate" :flattened? nil :xmlAttribute? nil), "ServiceName" (portkey.aws/search-for-tag input "ServiceName" :flattened? nil :xmlAttribute? nil), "Region" (portkey.aws/search-for-tag input "Region" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:last-used-date (deserdate-type (clojure.core/get-in letvar1076094 ["LastUsedDate" :content])), :service-name (deserstring-type (clojure.core/get-in letvar1076094 ["ServiceName" :content])), :region (deserstring-type (clojure.core/get-in letvar1076094 ["Region" :content]))})))

(clojure.core/defn- deser-ssh-public-key [input] (clojure.core/let [letvar1076202 {"UserName" (portkey.aws/search-for-tag input "UserName" :flattened? nil :xmlAttribute? nil), "SSHPublicKeyId" (portkey.aws/search-for-tag input "SSHPublicKeyId" :flattened? nil :xmlAttribute? nil), "Fingerprint" (portkey.aws/search-for-tag input "Fingerprint" :flattened? nil :xmlAttribute? nil), "SSHPublicKeyBody" (portkey.aws/search-for-tag input "SSHPublicKeyBody" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "UploadDate" (portkey.aws/search-for-tag input "UploadDate" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:user-name (deseruser-name-type (clojure.core/get-in letvar1076202 ["UserName" :content])), :ssh-public-key-id (deserpublic-key-id-type (clojure.core/get-in letvar1076202 ["SSHPublicKeyId" :content])), :fingerprint (deserpublic-key-fingerprint-type (clojure.core/get-in letvar1076202 ["Fingerprint" :content])), :ssh-public-key-body (deserpublic-key-material-type (clojure.core/get-in letvar1076202 ["SSHPublicKeyBody" :content])), :status (deserstatus-type (clojure.core/get-in letvar1076202 ["Status" :content]))} (letvar1076202 "UploadDate") (clojure.core/assoc :upload-date (deserdate-type (clojure.core/get-in letvar1076202 ["UploadDate" :content]))))))

(clojure.core/defn- deserduplicate-certificate-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserpolicy-document-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserrole-detail-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-role-detail coll))) input))

(clojure.core/defn- deser-bootstrap-datum [input] input)

(clojure.core/defn- deser-role [input] (clojure.core/let [letvar1076339 {"RoleId" (portkey.aws/search-for-tag input "RoleId" :flattened? nil :xmlAttribute? nil), "AssumeRolePolicyDocument" (portkey.aws/search-for-tag input "AssumeRolePolicyDocument" :flattened? nil :xmlAttribute? nil), "Path" (portkey.aws/search-for-tag input "Path" :flattened? nil :xmlAttribute? nil), "RoleName" (portkey.aws/search-for-tag input "RoleName" :flattened? nil :xmlAttribute? nil), "CreateDate" (portkey.aws/search-for-tag input "CreateDate" :flattened? nil :xmlAttribute? nil), "Tags" (portkey.aws/search-for-tag input "Tags" :flattened? nil :xmlAttribute? nil), "PermissionsBoundary" (portkey.aws/search-for-tag input "PermissionsBoundary" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "Arn" (portkey.aws/search-for-tag input "Arn" :flattened? nil :xmlAttribute? nil), "MaxSessionDuration" (portkey.aws/search-for-tag input "MaxSessionDuration" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:path (deserpath-type (clojure.core/get-in letvar1076339 ["Path" :content])), :role-name (deserrole-name-type (clojure.core/get-in letvar1076339 ["RoleName" :content])), :role-id (deserid-type (clojure.core/get-in letvar1076339 ["RoleId" :content])), :arn (deserarn-type (clojure.core/get-in letvar1076339 ["Arn" :content])), :create-date (deserdate-type (clojure.core/get-in letvar1076339 ["CreateDate" :content]))} (letvar1076339 "AssumeRolePolicyDocument") (clojure.core/assoc :assume-role-policy-document (deserpolicy-document-type (clojure.core/get-in letvar1076339 ["AssumeRolePolicyDocument" :content]))) (letvar1076339 "Tags") (clojure.core/assoc :tags (desertag-list-type (clojure.core/get-in letvar1076339 ["Tags" :content]))) (letvar1076339 "PermissionsBoundary") (clojure.core/assoc :permissions-boundary (deser-attached-permissions-boundary (clojure.core/get-in letvar1076339 ["PermissionsBoundary" :content]))) (letvar1076339 "Description") (clojure.core/assoc :description (deserrole-description-type (clojure.core/get-in letvar1076339 ["Description" :content]))) (letvar1076339 "MaxSessionDuration") (clojure.core/assoc :max-session-duration (deserrole-max-session-duration-type (clojure.core/get-in letvar1076339 ["MaxSessionDuration" :content]))))))

(clojure.core/defn- deserinvalid-user-type-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserboolean-type [input] (clojure.core/when-let [boolstr__21591__auto__ (portkey.aws/unbox-xml-primitive-value input)] (clojure.core/cond (clojure.core/= "true" boolstr__21591__auto__) true (clojure.core/= "false" boolstr__21591__auto__) false)))

(clojure.core/defn- deser-virtual-mfa-device [input] (clojure.core/let [letvar1076454 {"SerialNumber" (portkey.aws/search-for-tag input "SerialNumber" :flattened? nil :xmlAttribute? nil), "Base32StringSeed" (portkey.aws/search-for-tag input "Base32StringSeed" :flattened? nil :xmlAttribute? nil), "QRCodePNG" (portkey.aws/search-for-tag input "QRCodePNG" :flattened? nil :xmlAttribute? nil), "User" (portkey.aws/search-for-tag input "User" :flattened? nil :xmlAttribute? nil), "EnableDate" (portkey.aws/search-for-tag input "EnableDate" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:serial-number (deserserial-number-type (clojure.core/get-in letvar1076454 ["SerialNumber" :content]))} (letvar1076454 "Base32StringSeed") (clojure.core/assoc :base-32-string-seed (deser-bootstrap-datum (clojure.core/get-in letvar1076454 ["Base32StringSeed" :content]))) (letvar1076454 "QRCodePNG") (clojure.core/assoc :qr-code-png (deser-bootstrap-datum (clojure.core/get-in letvar1076454 ["QRCodePNG" :content]))) (letvar1076454 "User") (clojure.core/assoc :user (deser-user (clojure.core/get-in letvar1076454 ["User" :content]))) (letvar1076454 "EnableDate") (clojure.core/assoc :enable-date (deserdate-type (clojure.core/get-in letvar1076454 ["EnableDate" :content]))))))

(clojure.core/defn- deser-list-policies-granting-service-access-entry [input] (clojure.core/let [letvar1076562 {"ServiceNamespace" (portkey.aws/search-for-tag input "ServiceNamespace" :flattened? nil :xmlAttribute? nil), "Policies" (portkey.aws/search-for-tag input "Policies" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1076562 "ServiceNamespace") (clojure.core/assoc :service-namespace (deserservice-namespace-type (clojure.core/get-in letvar1076562 ["ServiceNamespace" :content]))) (letvar1076562 "Policies") (clojure.core/assoc :policies (deserpolicy-granting-service-access-list-type (clojure.core/get-in letvar1076562 ["Policies" :content]))))))

(clojure.core/defn- deser-mfa-device [input] (clojure.core/let [letvar1076670 {"UserName" (portkey.aws/search-for-tag input "UserName" :flattened? nil :xmlAttribute? nil), "SerialNumber" (portkey.aws/search-for-tag input "SerialNumber" :flattened? nil :xmlAttribute? nil), "EnableDate" (portkey.aws/search-for-tag input "EnableDate" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:user-name (deseruser-name-type (clojure.core/get-in letvar1076670 ["UserName" :content])), :serial-number (deserserial-number-type (clojure.core/get-in letvar1076670 ["SerialNumber" :content])), :enable-date (deserdate-type (clojure.core/get-in letvar1076670 ["EnableDate" :content]))})))

(clojure.core/defn- deserstatus-type [input] (clojure.core/get {"Active" :active, "Inactive" :inactive} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deserexisting-user-name-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserunmodifiable-entity-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-open-id-connect-provider-url-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserjob-id-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deseraccess-key-id-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-role-usage-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-role-usage-type coll))) input))

(clojure.core/defn- deserpolicy-description-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserentity-name-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- desercredential-report-not-present-exception-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserservice-name [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-resource-name-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserboolean-object-type [input] (clojure.core/when-let [boolstr__21591__auto__ (portkey.aws/unbox-xml-primitive-value input)] (clojure.core/cond (clojure.core/= "true" boolstr__21591__auto__) true (clojure.core/= "false" boolstr__21591__auto__) false)))

(clojure.core/defn- deser-deletion-task-id-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-user-detail [input] (clojure.core/let [letvar1076857 {"Path" (portkey.aws/search-for-tag input "Path" :flattened? nil :xmlAttribute? nil), "CreateDate" (portkey.aws/search-for-tag input "CreateDate" :flattened? nil :xmlAttribute? nil), "GroupList" (portkey.aws/search-for-tag input "GroupList" :flattened? nil :xmlAttribute? nil), "UserId" (portkey.aws/search-for-tag input "UserId" :flattened? nil :xmlAttribute? nil), "Tags" (portkey.aws/search-for-tag input "Tags" :flattened? nil :xmlAttribute? nil), "PermissionsBoundary" (portkey.aws/search-for-tag input "PermissionsBoundary" :flattened? nil :xmlAttribute? nil), "UserName" (portkey.aws/search-for-tag input "UserName" :flattened? nil :xmlAttribute? nil), "Arn" (portkey.aws/search-for-tag input "Arn" :flattened? nil :xmlAttribute? nil), "UserPolicyList" (portkey.aws/search-for-tag input "UserPolicyList" :flattened? nil :xmlAttribute? nil), "AttachedManagedPolicies" (portkey.aws/search-for-tag input "AttachedManagedPolicies" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1076857 "Path") (clojure.core/assoc :path (deserpath-type (clojure.core/get-in letvar1076857 ["Path" :content]))) (letvar1076857 "CreateDate") (clojure.core/assoc :create-date (deserdate-type (clojure.core/get-in letvar1076857 ["CreateDate" :content]))) (letvar1076857 "GroupList") (clojure.core/assoc :group-list (desergroup-name-list-type (clojure.core/get-in letvar1076857 ["GroupList" :content]))) (letvar1076857 "UserId") (clojure.core/assoc :user-id (deserid-type (clojure.core/get-in letvar1076857 ["UserId" :content]))) (letvar1076857 "Tags") (clojure.core/assoc :tags (desertag-list-type (clojure.core/get-in letvar1076857 ["Tags" :content]))) (letvar1076857 "PermissionsBoundary") (clojure.core/assoc :permissions-boundary (deser-attached-permissions-boundary (clojure.core/get-in letvar1076857 ["PermissionsBoundary" :content]))) (letvar1076857 "UserName") (clojure.core/assoc :user-name (deseruser-name-type (clojure.core/get-in letvar1076857 ["UserName" :content]))) (letvar1076857 "Arn") (clojure.core/assoc :arn (deserarn-type (clojure.core/get-in letvar1076857 ["Arn" :content]))) (letvar1076857 "UserPolicyList") (clojure.core/assoc :user-policy-list (deserpolicy-detail-list-type (clojure.core/get-in letvar1076857 ["UserPolicyList" :content]))) (letvar1076857 "AttachedManagedPolicies") (clojure.core/assoc :attached-managed-policies (deserattached-policies-list-type (clojure.core/get-in letvar1076857 ["AttachedManagedPolicies" :content]))))))

(clojure.core/defn- deser-managed-policy-detail-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-managed-policy-detail coll))) input))

(clojure.core/defn- deser-saml-metadata-document-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserpolicy-name-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-reason-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-position [input] (clojure.core/let [letvar1076997 {"Line" (portkey.aws/search-for-tag input "Line" :flattened? nil :xmlAttribute? nil), "Column" (portkey.aws/search-for-tag input "Column" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1076997 "Line") (clojure.core/assoc :line (deser-line-number (clojure.core/get-in letvar1076997 ["Line" :content]))) (letvar1076997 "Column") (clojure.core/assoc :column (deser-column-number (clojure.core/get-in letvar1076997 ["Column" :content]))))))

(clojure.core/defn- deserdelete-conflict-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserpolicy-name-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deserpolicy-name-type coll))) input))

(clojure.core/defn- deser-evaluation-results-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-evaluation-result coll))) input))

(clojure.core/defn- desercertificate-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-signing-certificate coll))) input))

(clojure.core/defn- deserclient-id-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deserclient-id-type coll))) input))

(clojure.core/defn- desercertificate-body-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-policy-granting-service-access [input] (clojure.core/let [letvar1077183 {"PolicyName" (portkey.aws/search-for-tag input "PolicyName" :flattened? nil :xmlAttribute? nil), "PolicyType" (portkey.aws/search-for-tag input "PolicyType" :flattened? nil :xmlAttribute? nil), "PolicyArn" (portkey.aws/search-for-tag input "PolicyArn" :flattened? nil :xmlAttribute? nil), "EntityType" (portkey.aws/search-for-tag input "EntityType" :flattened? nil :xmlAttribute? nil), "EntityName" (portkey.aws/search-for-tag input "EntityName" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:policy-name (deserpolicy-name-type (clojure.core/get-in letvar1077183 ["PolicyName" :content])), :policy-type (deserpolicy-type (clojure.core/get-in letvar1077183 ["PolicyType" :content]))} (letvar1077183 "PolicyArn") (clojure.core/assoc :policy-arn (deserarn-type (clojure.core/get-in letvar1077183 ["PolicyArn" :content]))) (letvar1077183 "EntityType") (clojure.core/assoc :entity-type (deserpolicy-owner-entity-type (clojure.core/get-in letvar1077183 ["EntityType" :content]))) (letvar1077183 "EntityName") (clojure.core/assoc :entity-name (deserentity-name-type (clojure.core/get-in letvar1077183 ["EntityName" :content]))))))

(clojure.core/defn- desercredential-report-not-ready-exception-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserservice-name-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-managed-policy-detail [input] (clojure.core/let [letvar1077301 {"PermissionsBoundaryUsageCount" (portkey.aws/search-for-tag input "PermissionsBoundaryUsageCount" :flattened? nil :xmlAttribute? nil), "PolicyName" (portkey.aws/search-for-tag input "PolicyName" :flattened? nil :xmlAttribute? nil), "Path" (portkey.aws/search-for-tag input "Path" :flattened? nil :xmlAttribute? nil), "CreateDate" (portkey.aws/search-for-tag input "CreateDate" :flattened? nil :xmlAttribute? nil), "AttachmentCount" (portkey.aws/search-for-tag input "AttachmentCount" :flattened? nil :xmlAttribute? nil), "IsAttachable" (portkey.aws/search-for-tag input "IsAttachable" :flattened? nil :xmlAttribute? nil), "DefaultVersionId" (portkey.aws/search-for-tag input "DefaultVersionId" :flattened? nil :xmlAttribute? nil), "PolicyId" (portkey.aws/search-for-tag input "PolicyId" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "UpdateDate" (portkey.aws/search-for-tag input "UpdateDate" :flattened? nil :xmlAttribute? nil), "Arn" (portkey.aws/search-for-tag input "Arn" :flattened? nil :xmlAttribute? nil), "PolicyVersionList" (portkey.aws/search-for-tag input "PolicyVersionList" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1077301 "PermissionsBoundaryUsageCount") (clojure.core/assoc :permissions-boundary-usage-count (deserattachment-count-type (clojure.core/get-in letvar1077301 ["PermissionsBoundaryUsageCount" :content]))) (letvar1077301 "PolicyName") (clojure.core/assoc :policy-name (deserpolicy-name-type (clojure.core/get-in letvar1077301 ["PolicyName" :content]))) (letvar1077301 "Path") (clojure.core/assoc :path (deserpolicy-path-type (clojure.core/get-in letvar1077301 ["Path" :content]))) (letvar1077301 "CreateDate") (clojure.core/assoc :create-date (deserdate-type (clojure.core/get-in letvar1077301 ["CreateDate" :content]))) (letvar1077301 "AttachmentCount") (clojure.core/assoc :attachment-count (deserattachment-count-type (clojure.core/get-in letvar1077301 ["AttachmentCount" :content]))) (letvar1077301 "IsAttachable") (clojure.core/assoc :is-attachable (deserboolean-type (clojure.core/get-in letvar1077301 ["IsAttachable" :content]))) (letvar1077301 "DefaultVersionId") (clojure.core/assoc :default-version-id (deserpolicy-version-id-type (clojure.core/get-in letvar1077301 ["DefaultVersionId" :content]))) (letvar1077301 "PolicyId") (clojure.core/assoc :policy-id (deserid-type (clojure.core/get-in letvar1077301 ["PolicyId" :content]))) (letvar1077301 "Description") (clojure.core/assoc :description (deserpolicy-description-type (clojure.core/get-in letvar1077301 ["Description" :content]))) (letvar1077301 "UpdateDate") (clojure.core/assoc :update-date (deserdate-type (clojure.core/get-in letvar1077301 ["UpdateDate" :content]))) (letvar1077301 "Arn") (clojure.core/assoc :arn (deserarn-type (clojure.core/get-in letvar1077301 ["Arn" :content]))) (letvar1077301 "PolicyVersionList") (clojure.core/assoc :policy-version-list (deserpolicy-document-version-list-type (clojure.core/get-in letvar1077301 ["PolicyVersionList" :content]))))))

(clojure.core/defn- deser-eval-decision-details-type [input] (clojure.core/let [x-flattened__21592__auto__ (clojure.core/map clojure.core/identity)] (clojure.core/into {} (clojure.core/comp x-flattened__21592__auto__ (clojure.core/map (clojure.core/fn [[k v]] [(deser-eval-decision-source-type k) (deser-policy-evaluation-decision-type v)]))) input)))

(clojure.core/defn- deser-access-key-metadata [input] (clojure.core/let [letvar1077432 {"UserName" (portkey.aws/search-for-tag input "UserName" :flattened? nil :xmlAttribute? nil), "AccessKeyId" (portkey.aws/search-for-tag input "AccessKeyId" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "CreateDate" (portkey.aws/search-for-tag input "CreateDate" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1077432 "UserName") (clojure.core/assoc :user-name (deseruser-name-type (clojure.core/get-in letvar1077432 ["UserName" :content]))) (letvar1077432 "AccessKeyId") (clojure.core/assoc :access-key-id (deseraccess-key-id-type (clojure.core/get-in letvar1077432 ["AccessKeyId" :content]))) (letvar1077432 "Status") (clojure.core/assoc :status (deserstatus-type (clojure.core/get-in letvar1077432 ["Status" :content]))) (letvar1077432 "CreateDate") (clojure.core/assoc :create-date (deserdate-type (clojure.core/get-in letvar1077432 ["CreateDate" :content]))))))

(clojure.core/defn- deserpolicy-not-attachable-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- desercertificate-chain-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-policy-group-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-policy-group coll))) input))

(clojure.core/defn- desercertificate-id-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-context-key-names-result-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-context-key-name-type coll))) input))

(clojure.core/defn- deserthumbprint-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deserthumbprint-type coll))) input))

(clojure.core/defn- deserarn-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-context-key-name-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserservice-not-supported-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-policy-group [input] (clojure.core/let [letvar1077621 {"GroupName" (portkey.aws/search-for-tag input "GroupName" :flattened? nil :xmlAttribute? nil), "GroupId" (portkey.aws/search-for-tag input "GroupId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1077621 "GroupName") (clojure.core/assoc :group-name (desergroup-name-type (clojure.core/get-in letvar1077621 ["GroupName" :content]))) (letvar1077621 "GroupId") (clojure.core/assoc :group-id (deserid-type (clojure.core/get-in letvar1077621 ["GroupId" :content]))))))

(clojure.core/defn- deserinvalid-public-key-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-region-name-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-error-details [input] (clojure.core/let [letvar1077739 {"Message" (portkey.aws/search-for-tag input "Message" :flattened? nil :xmlAttribute? nil), "Code" (portkey.aws/search-for-tag input "Code" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:message (deserstring-type (clojure.core/get-in letvar1077739 ["Message" :content])), :code (deserstring-type (clojure.core/get-in letvar1077739 ["Code" :content]))})))

(clojure.core/defn- desermalformed-policy-document-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-signing-certificate [input] (clojure.core/let [letvar1077852 {"UserName" (portkey.aws/search-for-tag input "UserName" :flattened? nil :xmlAttribute? nil), "CertificateId" (portkey.aws/search-for-tag input "CertificateId" :flattened? nil :xmlAttribute? nil), "CertificateBody" (portkey.aws/search-for-tag input "CertificateBody" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "UploadDate" (portkey.aws/search-for-tag input "UploadDate" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:user-name (deseruser-name-type (clojure.core/get-in letvar1077852 ["UserName" :content])), :certificate-id (desercertificate-id-type (clojure.core/get-in letvar1077852 ["CertificateId" :content])), :certificate-body (desercertificate-body-type (clojure.core/get-in letvar1077852 ["CertificateBody" :content])), :status (deserstatus-type (clojure.core/get-in letvar1077852 ["Status" :content]))} (letvar1077852 "UploadDate") (clojure.core/assoc :upload-date (deserdate-type (clojure.core/get-in letvar1077852 ["UploadDate" :content]))))))

(clojure.core/defn- deser-report-state-description-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-report-format-type [input] (clojure.core/get {"text/csv" :textcsv} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deserinteger-type [input] (java.lang.Integer. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-role-detail [input] (clojure.core/let [letvar1077972 {"RoleId" (portkey.aws/search-for-tag input "RoleId" :flattened? nil :xmlAttribute? nil), "InstanceProfileList" (portkey.aws/search-for-tag input "InstanceProfileList" :flattened? nil :xmlAttribute? nil), "AssumeRolePolicyDocument" (portkey.aws/search-for-tag input "AssumeRolePolicyDocument" :flattened? nil :xmlAttribute? nil), "Path" (portkey.aws/search-for-tag input "Path" :flattened? nil :xmlAttribute? nil), "RoleName" (portkey.aws/search-for-tag input "RoleName" :flattened? nil :xmlAttribute? nil), "CreateDate" (portkey.aws/search-for-tag input "CreateDate" :flattened? nil :xmlAttribute? nil), "RolePolicyList" (portkey.aws/search-for-tag input "RolePolicyList" :flattened? nil :xmlAttribute? nil), "Tags" (portkey.aws/search-for-tag input "Tags" :flattened? nil :xmlAttribute? nil), "PermissionsBoundary" (portkey.aws/search-for-tag input "PermissionsBoundary" :flattened? nil :xmlAttribute? nil), "Arn" (portkey.aws/search-for-tag input "Arn" :flattened? nil :xmlAttribute? nil), "AttachedManagedPolicies" (portkey.aws/search-for-tag input "AttachedManagedPolicies" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1077972 "RoleId") (clojure.core/assoc :role-id (deserid-type (clojure.core/get-in letvar1077972 ["RoleId" :content]))) (letvar1077972 "InstanceProfileList") (clojure.core/assoc :instance-profile-list (deserinstance-profile-list-type (clojure.core/get-in letvar1077972 ["InstanceProfileList" :content]))) (letvar1077972 "AssumeRolePolicyDocument") (clojure.core/assoc :assume-role-policy-document (deserpolicy-document-type (clojure.core/get-in letvar1077972 ["AssumeRolePolicyDocument" :content]))) (letvar1077972 "Path") (clojure.core/assoc :path (deserpath-type (clojure.core/get-in letvar1077972 ["Path" :content]))) (letvar1077972 "RoleName") (clojure.core/assoc :role-name (deserrole-name-type (clojure.core/get-in letvar1077972 ["RoleName" :content]))) (letvar1077972 "CreateDate") (clojure.core/assoc :create-date (deserdate-type (clojure.core/get-in letvar1077972 ["CreateDate" :content]))) (letvar1077972 "RolePolicyList") (clojure.core/assoc :role-policy-list (deserpolicy-detail-list-type (clojure.core/get-in letvar1077972 ["RolePolicyList" :content]))) (letvar1077972 "Tags") (clojure.core/assoc :tags (desertag-list-type (clojure.core/get-in letvar1077972 ["Tags" :content]))) (letvar1077972 "PermissionsBoundary") (clojure.core/assoc :permissions-boundary (deser-attached-permissions-boundary (clojure.core/get-in letvar1077972 ["PermissionsBoundary" :content]))) (letvar1077972 "Arn") (clojure.core/assoc :arn (deserarn-type (clojure.core/get-in letvar1077972 ["Arn" :content]))) (letvar1077972 "AttachedManagedPolicies") (clojure.core/assoc :attached-managed-policies (deserattached-policies-list-type (clojure.core/get-in letvar1077972 ["AttachedManagedPolicies" :content]))))))

(clojure.core/defn- deser-service-specific-credentials-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-service-specific-credential-metadata coll))) input))

(clojure.core/defn- deserserver-certificate-name-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserserial-number-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserrole-description-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserpolicy-detail-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-policy-detail coll))) input))

(clojure.core/defn- deser-policy [input] (clojure.core/let [letvar1078129 {"PermissionsBoundaryUsageCount" (portkey.aws/search-for-tag input "PermissionsBoundaryUsageCount" :flattened? nil :xmlAttribute? nil), "PolicyName" (portkey.aws/search-for-tag input "PolicyName" :flattened? nil :xmlAttribute? nil), "Path" (portkey.aws/search-for-tag input "Path" :flattened? nil :xmlAttribute? nil), "CreateDate" (portkey.aws/search-for-tag input "CreateDate" :flattened? nil :xmlAttribute? nil), "AttachmentCount" (portkey.aws/search-for-tag input "AttachmentCount" :flattened? nil :xmlAttribute? nil), "IsAttachable" (portkey.aws/search-for-tag input "IsAttachable" :flattened? nil :xmlAttribute? nil), "DefaultVersionId" (portkey.aws/search-for-tag input "DefaultVersionId" :flattened? nil :xmlAttribute? nil), "PolicyId" (portkey.aws/search-for-tag input "PolicyId" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "UpdateDate" (portkey.aws/search-for-tag input "UpdateDate" :flattened? nil :xmlAttribute? nil), "Arn" (portkey.aws/search-for-tag input "Arn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1078129 "PermissionsBoundaryUsageCount") (clojure.core/assoc :permissions-boundary-usage-count (deserattachment-count-type (clojure.core/get-in letvar1078129 ["PermissionsBoundaryUsageCount" :content]))) (letvar1078129 "PolicyName") (clojure.core/assoc :policy-name (deserpolicy-name-type (clojure.core/get-in letvar1078129 ["PolicyName" :content]))) (letvar1078129 "Path") (clojure.core/assoc :path (deserpolicy-path-type (clojure.core/get-in letvar1078129 ["Path" :content]))) (letvar1078129 "CreateDate") (clojure.core/assoc :create-date (deserdate-type (clojure.core/get-in letvar1078129 ["CreateDate" :content]))) (letvar1078129 "AttachmentCount") (clojure.core/assoc :attachment-count (deserattachment-count-type (clojure.core/get-in letvar1078129 ["AttachmentCount" :content]))) (letvar1078129 "IsAttachable") (clojure.core/assoc :is-attachable (deserboolean-type (clojure.core/get-in letvar1078129 ["IsAttachable" :content]))) (letvar1078129 "DefaultVersionId") (clojure.core/assoc :default-version-id (deserpolicy-version-id-type (clojure.core/get-in letvar1078129 ["DefaultVersionId" :content]))) (letvar1078129 "PolicyId") (clojure.core/assoc :policy-id (deserid-type (clojure.core/get-in letvar1078129 ["PolicyId" :content]))) (letvar1078129 "Description") (clojure.core/assoc :description (deserpolicy-description-type (clojure.core/get-in letvar1078129 ["Description" :content]))) (letvar1078129 "UpdateDate") (clojure.core/assoc :update-date (deserdate-type (clojure.core/get-in letvar1078129 ["UpdateDate" :content]))) (letvar1078129 "Arn") (clojure.core/assoc :arn (deserarn-type (clojure.core/get-in letvar1078129 ["Arn" :content]))))))

(clojure.core/defn- deser-organizations-decision-detail [input] (clojure.core/let [letvar1078237 {"AllowedByOrganizations" (portkey.aws/search-for-tag input "AllowedByOrganizations" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1078237 "AllowedByOrganizations") (clojure.core/assoc :allowed-by-organizations (deserboolean-type (clojure.core/get-in letvar1078237 ["AllowedByOrganizations" :content]))))))

(clojure.core/defn- deser-tag [input] (clojure.core/let [letvar1078345 {"Key" (portkey.aws/search-for-tag input "Key" :flattened? nil :xmlAttribute? nil), "Value" (portkey.aws/search-for-tag input "Value" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:key (desertag-key-type (clojure.core/get-in letvar1078345 ["Key" :content])), :value (desertag-value-type (clojure.core/get-in letvar1078345 ["Value" :content]))})))

(clojure.core/defn- deseraccess-key-metadata-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-access-key-metadata coll))) input))

(clojure.core/defn- deserpolicy-granting-service-access-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-policy-granting-service-access coll))) input))

(clojure.core/defn- deser-arn-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deserarn-type coll))) input))

(clojure.core/defn- deserduplicate-ssh-public-key-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserservice-user-name [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- desermfa-device-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-mfa-device coll))) input))

(clojure.core/defn- deserminimum-password-length-type [input] (java.lang.Integer. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deserpolicy-path-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-policy-detail [input] (clojure.core/let [letvar1078538 {"PolicyName" (portkey.aws/search-for-tag input "PolicyName" :flattened? nil :xmlAttribute? nil), "PolicyDocument" (portkey.aws/search-for-tag input "PolicyDocument" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1078538 "PolicyName") (clojure.core/assoc :policy-name (deserpolicy-name-type (clojure.core/get-in letvar1078538 ["PolicyName" :content]))) (letvar1078538 "PolicyDocument") (clojure.core/assoc :policy-document (deserpolicy-document-type (clojure.core/get-in letvar1078538 ["PolicyDocument" :content]))))))

(clojure.core/defn- desertag-value-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-open-id-connect-provider-list-entry [input] (clojure.core/let [letvar1078651 {"Arn" (portkey.aws/search-for-tag input "Arn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1078651 "Arn") (clojure.core/assoc :arn (deserarn-type (clojure.core/get-in letvar1078651 ["Arn" :content]))))))

(clojure.core/defn- desersummary-value-type [input] (java.lang.Integer. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deserrole-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-role coll))) input))

(clojure.core/defn- deserpublic-key-id-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-group [input] (clojure.core/let [letvar1078783 {"Path" (portkey.aws/search-for-tag input "Path" :flattened? nil :xmlAttribute? nil), "GroupName" (portkey.aws/search-for-tag input "GroupName" :flattened? nil :xmlAttribute? nil), "GroupId" (portkey.aws/search-for-tag input "GroupId" :flattened? nil :xmlAttribute? nil), "Arn" (portkey.aws/search-for-tag input "Arn" :flattened? nil :xmlAttribute? nil), "CreateDate" (portkey.aws/search-for-tag input "CreateDate" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:path (deserpath-type (clojure.core/get-in letvar1078783 ["Path" :content])), :group-name (desergroup-name-type (clojure.core/get-in letvar1078783 ["GroupName" :content])), :group-id (deserid-type (clojure.core/get-in letvar1078783 ["GroupId" :content])), :arn (deserarn-type (clojure.core/get-in letvar1078783 ["Arn" :content])), :create-date (deserdate-type (clojure.core/get-in letvar1078783 ["CreateDate" :content]))})))

(clojure.core/defn- desergroup-detail-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-group-detail coll))) input))

(clojure.core/defn- deser-deletion-task-failure-reason-type [input] (clojure.core/let [letvar1078908 {"Reason" (portkey.aws/search-for-tag input "Reason" :flattened? nil :xmlAttribute? nil), "RoleUsageList" (portkey.aws/search-for-tag input "RoleUsageList" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1078908 "Reason") (clojure.core/assoc :reason (deser-reason-type (clojure.core/get-in letvar1078908 ["Reason" :content]))) (letvar1078908 "RoleUsageList") (clojure.core/assoc :role-usage-list (deser-role-usage-list-type (clojure.core/get-in letvar1078908 ["RoleUsageList" :content]))))))

(clojure.core/defn- deser-ssh-public-key-metadata [input] (clojure.core/let [letvar1079016 {"UserName" (portkey.aws/search-for-tag input "UserName" :flattened? nil :xmlAttribute? nil), "SSHPublicKeyId" (portkey.aws/search-for-tag input "SSHPublicKeyId" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "UploadDate" (portkey.aws/search-for-tag input "UploadDate" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:user-name (deseruser-name-type (clojure.core/get-in letvar1079016 ["UserName" :content])), :ssh-public-key-id (deserpublic-key-id-type (clojure.core/get-in letvar1079016 ["SSHPublicKeyId" :content])), :status (deserstatus-type (clojure.core/get-in letvar1079016 ["Status" :content])), :upload-date (deserdate-type (clojure.core/get-in letvar1079016 ["UploadDate" :content]))})))

(clojure.core/defn- deserpath-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- desergroup-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-group coll))) input))

(clojure.core/defn- deser-policy-evaluation-decision-type [input] (clojure.core/get {"allowed" :allowed, "explicitDeny" :explicit-deny, "implicitDeny" :implicit-deny} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deserentity-already-exists-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-open-id-connect-provider-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-open-id-connect-provider-list-entry coll))) input))

(clojure.core/defn- deser-service-specific-credential [input] (clojure.core/let [letvar1079173 {"CreateDate" (portkey.aws/search-for-tag input "CreateDate" :flattened? nil :xmlAttribute? nil), "ServiceName" (portkey.aws/search-for-tag input "ServiceName" :flattened? nil :xmlAttribute? nil), "ServiceUserName" (portkey.aws/search-for-tag input "ServiceUserName" :flattened? nil :xmlAttribute? nil), "ServicePassword" (portkey.aws/search-for-tag input "ServicePassword" :flattened? nil :xmlAttribute? nil), "ServiceSpecificCredentialId" (portkey.aws/search-for-tag input "ServiceSpecificCredentialId" :flattened? nil :xmlAttribute? nil), "UserName" (portkey.aws/search-for-tag input "UserName" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:create-date (deserdate-type (clojure.core/get-in letvar1079173 ["CreateDate" :content])), :service-name (deserservice-name (clojure.core/get-in letvar1079173 ["ServiceName" :content])), :service-user-name (deserservice-user-name (clojure.core/get-in letvar1079173 ["ServiceUserName" :content])), :service-password (deserservice-password (clojure.core/get-in letvar1079173 ["ServicePassword" :content])), :service-specific-credential-id (deserservice-specific-credential-id (clojure.core/get-in letvar1079173 ["ServiceSpecificCredentialId" :content])), :user-name (deseruser-name-type (clojure.core/get-in letvar1079173 ["UserName" :content])), :status (deserstatus-type (clojure.core/get-in letvar1079173 ["Status" :content]))})))

(clojure.core/defn- deserlimit-exceeded-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-resource-specific-result-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-resource-specific-result coll))) input))

(clojure.core/defn- deser-access-key [input] (clojure.core/let [letvar1079303 {"UserName" (portkey.aws/search-for-tag input "UserName" :flattened? nil :xmlAttribute? nil), "AccessKeyId" (portkey.aws/search-for-tag input "AccessKeyId" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "SecretAccessKey" (portkey.aws/search-for-tag input "SecretAccessKey" :flattened? nil :xmlAttribute? nil), "CreateDate" (portkey.aws/search-for-tag input "CreateDate" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {:user-name (deseruser-name-type (clojure.core/get-in letvar1079303 ["UserName" :content])), :access-key-id (deseraccess-key-id-type (clojure.core/get-in letvar1079303 ["AccessKeyId" :content])), :status (deserstatus-type (clojure.core/get-in letvar1079303 ["Status" :content])), :secret-access-key (deseraccess-key-secret-type (clojure.core/get-in letvar1079303 ["SecretAccessKey" :content]))} (letvar1079303 "CreateDate") (clojure.core/assoc :create-date (deserdate-type (clojure.core/get-in letvar1079303 ["CreateDate" :content]))))))

(clojure.core/defn- deserinvalid-authentication-code-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserrole-name-type [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-concurrent-modification-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deserpolicy-list-type [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-policy coll))) input))

(clojure.core/defn- deser-report-content-type [input] input)

(clojure.core/defn- deserservice-password [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-group-detail [input] (clojure.core/let [letvar1079450 {"Path" (portkey.aws/search-for-tag input "Path" :flattened? nil :xmlAttribute? nil), "GroupName" (portkey.aws/search-for-tag input "GroupName" :flattened? nil :xmlAttribute? nil), "GroupId" (portkey.aws/search-for-tag input "GroupId" :flattened? nil :xmlAttribute? nil), "Arn" (portkey.aws/search-for-tag input "Arn" :flattened? nil :xmlAttribute? nil), "CreateDate" (portkey.aws/search-for-tag input "CreateDate" :flattened? nil :xmlAttribute? nil), "GroupPolicyList" (portkey.aws/search-for-tag input "GroupPolicyList" :flattened? nil :xmlAttribute? nil), "AttachedManagedPolicies" (portkey.aws/search-for-tag input "AttachedManagedPolicies" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar1079450 "Path") (clojure.core/assoc :path (deserpath-type (clojure.core/get-in letvar1079450 ["Path" :content]))) (letvar1079450 "GroupName") (clojure.core/assoc :group-name (desergroup-name-type (clojure.core/get-in letvar1079450 ["GroupName" :content]))) (letvar1079450 "GroupId") (clojure.core/assoc :group-id (deserid-type (clojure.core/get-in letvar1079450 ["GroupId" :content]))) (letvar1079450 "Arn") (clojure.core/assoc :arn (deserarn-type (clojure.core/get-in letvar1079450 ["Arn" :content]))) (letvar1079450 "CreateDate") (clojure.core/assoc :create-date (deserdate-type (clojure.core/get-in letvar1079450 ["CreateDate" :content]))) (letvar1079450 "GroupPolicyList") (clojure.core/assoc :group-policy-list (deserpolicy-detail-list-type (clojure.core/get-in letvar1079450 ["GroupPolicyList" :content]))) (letvar1079450 "AttachedManagedPolicies") (clojure.core/assoc :attached-managed-policies (deserattached-policies-list-type (clojure.core/get-in letvar1079450 ["AttachedManagedPolicies" :content]))))))

(clojure.core/defn- deserservice-failure-exception-message [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- response-list-policy-versions-response ([input] (response-list-policy-versions-response nil input)) ([resultWrapper1079457 input] (clojure.core/let [rawinput1079456 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079458 {"Versions" (portkey.aws/search-for-tag rawinput1079456 "Versions" :flattened? nil :result-wrapper resultWrapper1079457), "IsTruncated" (portkey.aws/search-for-tag rawinput1079456 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079457), "Marker" (portkey.aws/search-for-tag rawinput1079456 "Marker" :flattened? nil :result-wrapper resultWrapper1079457)}] (clojure.core/cond-> {} (letvar1079458 "Versions") (clojure.core/assoc :versions (deserpolicy-document-version-list-type (clojure.core/get-in letvar1079458 ["Versions" :content]))) (letvar1079458 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079458 ["IsTruncated" :content]))) (letvar1079458 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079458 ["Marker" :content])))))))

(clojure.core/defn- response-get-role-policy-response ([input] (response-get-role-policy-response nil input)) ([resultWrapper1079460 input] (clojure.core/let [rawinput1079459 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079461 {"RoleName" (portkey.aws/search-for-tag rawinput1079459 "RoleName" :flattened? nil :result-wrapper resultWrapper1079460), "PolicyName" (portkey.aws/search-for-tag rawinput1079459 "PolicyName" :flattened? nil :result-wrapper resultWrapper1079460), "PolicyDocument" (portkey.aws/search-for-tag rawinput1079459 "PolicyDocument" :flattened? nil :result-wrapper resultWrapper1079460)}] (clojure.core/cond-> {:role-name (deserrole-name-type (clojure.core/get-in letvar1079461 ["RoleName" :content])), :policy-name (deserpolicy-name-type (clojure.core/get-in letvar1079461 ["PolicyName" :content])), :policy-document (deserpolicy-document-type (clojure.core/get-in letvar1079461 ["PolicyDocument" :content]))}))))

(clojure.core/defn- response-create-user-response ([input] (response-create-user-response nil input)) ([resultWrapper1079463 input] (clojure.core/let [rawinput1079462 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079464 {"User" (portkey.aws/search-for-tag rawinput1079462 "User" :flattened? nil :result-wrapper resultWrapper1079463)}] (clojure.core/cond-> {} (letvar1079464 "User") (clojure.core/assoc :user (deser-user (clojure.core/get-in letvar1079464 ["User" :content])))))))

(clojure.core/defn- response-list-mfa-devices-response ([input] (response-list-mfa-devices-response nil input)) ([resultWrapper1079466 input] (clojure.core/let [rawinput1079465 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079467 {"MFADevices" (portkey.aws/search-for-tag rawinput1079465 "MFADevices" :flattened? nil :result-wrapper resultWrapper1079466), "IsTruncated" (portkey.aws/search-for-tag rawinput1079465 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079466), "Marker" (portkey.aws/search-for-tag rawinput1079465 "Marker" :flattened? nil :result-wrapper resultWrapper1079466)}] (clojure.core/cond-> {:mfa-devices (desermfa-device-list-type (clojure.core/get-in letvar1079467 ["MFADevices" :content]))} (letvar1079467 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079467 ["IsTruncated" :content]))) (letvar1079467 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079467 ["Marker" :content])))))))

(clojure.core/defn- response-get-service-last-accessed-details-with-entities-response ([input] (response-get-service-last-accessed-details-with-entities-response nil input)) ([resultWrapper1079469 input] (clojure.core/let [rawinput1079468 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079470 {"JobStatus" (portkey.aws/search-for-tag rawinput1079468 "JobStatus" :flattened? nil :result-wrapper resultWrapper1079469), "JobCreationDate" (portkey.aws/search-for-tag rawinput1079468 "JobCreationDate" :flattened? nil :result-wrapper resultWrapper1079469), "JobCompletionDate" (portkey.aws/search-for-tag rawinput1079468 "JobCompletionDate" :flattened? nil :result-wrapper resultWrapper1079469), "EntityDetailsList" (portkey.aws/search-for-tag rawinput1079468 "EntityDetailsList" :flattened? nil :result-wrapper resultWrapper1079469), "IsTruncated" (portkey.aws/search-for-tag rawinput1079468 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079469), "Marker" (portkey.aws/search-for-tag rawinput1079468 "Marker" :flattened? nil :result-wrapper resultWrapper1079469), "Error" (portkey.aws/search-for-tag rawinput1079468 "Error" :flattened? nil :result-wrapper resultWrapper1079469)}] (clojure.core/cond-> {:job-status (deserjob-status-type (clojure.core/get-in letvar1079470 ["JobStatus" :content])), :job-creation-date (deserdate-type (clojure.core/get-in letvar1079470 ["JobCreationDate" :content])), :job-completion-date (deserdate-type (clojure.core/get-in letvar1079470 ["JobCompletionDate" :content])), :entity-details-list (deserentity-details-list-type (clojure.core/get-in letvar1079470 ["EntityDetailsList" :content]))} (letvar1079470 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079470 ["IsTruncated" :content]))) (letvar1079470 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079470 ["Marker" :content]))) (letvar1079470 "Error") (clojure.core/assoc :error (deser-error-details (clojure.core/get-in letvar1079470 ["Error" :content])))))))

(clojure.core/defn- response-get-access-key-last-used-response ([input] (response-get-access-key-last-used-response nil input)) ([resultWrapper1079472 input] (clojure.core/let [rawinput1079471 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079473 {"UserName" (portkey.aws/search-for-tag rawinput1079471 "UserName" :flattened? nil :result-wrapper resultWrapper1079472), "AccessKeyLastUsed" (portkey.aws/search-for-tag rawinput1079471 "AccessKeyLastUsed" :flattened? nil :result-wrapper resultWrapper1079472)}] (clojure.core/cond-> {} (letvar1079473 "UserName") (clojure.core/assoc :user-name (deserexisting-user-name-type (clojure.core/get-in letvar1079473 ["UserName" :content]))) (letvar1079473 "AccessKeyLastUsed") (clojure.core/assoc :access-key-last-used (deser-access-key-last-used (clojure.core/get-in letvar1079473 ["AccessKeyLastUsed" :content])))))))

(clojure.core/defn- response-get-login-profile-response ([input] (response-get-login-profile-response nil input)) ([resultWrapper1079475 input] (clojure.core/let [rawinput1079474 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079476 {"LoginProfile" (portkey.aws/search-for-tag rawinput1079474 "LoginProfile" :flattened? nil :result-wrapper resultWrapper1079475)}] (clojure.core/cond-> {:login-profile (deser-login-profile (clojure.core/get-in letvar1079476 ["LoginProfile" :content]))}))))

(clojure.core/defn- response-get-account-summary-response ([input] (response-get-account-summary-response nil input)) ([resultWrapper1079478 input] (clojure.core/let [rawinput1079477 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079479 {"SummaryMap" (portkey.aws/search-for-tag rawinput1079477 "SummaryMap" :flattened? nil :result-wrapper resultWrapper1079478)}] (clojure.core/cond-> {} (letvar1079479 "SummaryMap") (clojure.core/assoc :summary-map (desersummary-map-type (clojure.core/get-in letvar1079479 ["SummaryMap" :content])))))))

(clojure.core/defn- response-list-server-certificates-response ([input] (response-list-server-certificates-response nil input)) ([resultWrapper1079481 input] (clojure.core/let [rawinput1079480 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079482 {"ServerCertificateMetadataList" (portkey.aws/search-for-tag rawinput1079480 "ServerCertificateMetadataList" :flattened? nil :result-wrapper resultWrapper1079481), "IsTruncated" (portkey.aws/search-for-tag rawinput1079480 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079481), "Marker" (portkey.aws/search-for-tag rawinput1079480 "Marker" :flattened? nil :result-wrapper resultWrapper1079481)}] (clojure.core/cond-> {:server-certificate-metadata-list (deserserver-certificate-metadata-list-type (clojure.core/get-in letvar1079482 ["ServerCertificateMetadataList" :content]))} (letvar1079482 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079482 ["IsTruncated" :content]))) (letvar1079482 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079482 ["Marker" :content])))))))

(clojure.core/defn- response-policy-not-attachable-exception ([input] (response-policy-not-attachable-exception nil input)) ([resultWrapper1079484 input] (clojure.core/let [rawinput1079483 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079485 {"message" (portkey.aws/search-for-tag rawinput1079483 "message" :flattened? nil :result-wrapper resultWrapper1079484)}] (clojure.core/cond-> {} (letvar1079485 "message") (clojure.core/assoc :message (deserpolicy-not-attachable-message (clojure.core/get-in letvar1079485 ["message" :content])))))))

(clojure.core/defn- response-create-instance-profile-response ([input] (response-create-instance-profile-response nil input)) ([resultWrapper1079487 input] (clojure.core/let [rawinput1079486 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079488 {"InstanceProfile" (portkey.aws/search-for-tag rawinput1079486 "InstanceProfile" :flattened? nil :result-wrapper resultWrapper1079487)}] (clojure.core/cond-> {:instance-profile (deser-instance-profile (clojure.core/get-in letvar1079488 ["InstanceProfile" :content]))}))))

(clojure.core/defn- response-credential-report-not-ready-exception ([input] (response-credential-report-not-ready-exception nil input)) ([resultWrapper1079490 input] (clojure.core/let [rawinput1079489 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079491 {"message" (portkey.aws/search-for-tag rawinput1079489 "message" :flattened? nil :result-wrapper resultWrapper1079490)}] (clojure.core/cond-> {} (letvar1079491 "message") (clojure.core/assoc :message (desercredential-report-not-ready-exception-message (clojure.core/get-in letvar1079491 ["message" :content])))))))

(clojure.core/defn- response-get-ssh-public-key-response ([input] (response-get-ssh-public-key-response nil input)) ([resultWrapper1079493 input] (clojure.core/let [rawinput1079492 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079494 {"SSHPublicKey" (portkey.aws/search-for-tag rawinput1079492 "SSHPublicKey" :flattened? nil :result-wrapper resultWrapper1079493)}] (clojure.core/cond-> {} (letvar1079494 "SSHPublicKey") (clojure.core/assoc :ssh-public-key (deser-ssh-public-key (clojure.core/get-in letvar1079494 ["SSHPublicKey" :content])))))))

(clojure.core/defn- response-update-role-response ([input] (response-update-role-response nil input)) ([resultWrapper1079496 input] (clojure.core/let [rawinput1079495 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079497 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-service-linked-role-response ([input] (response-create-service-linked-role-response nil input)) ([resultWrapper1079499 input] (clojure.core/let [rawinput1079498 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079500 {"Role" (portkey.aws/search-for-tag rawinput1079498 "Role" :flattened? nil :result-wrapper resultWrapper1079499)}] (clojure.core/cond-> {} (letvar1079500 "Role") (clojure.core/assoc :role (deser-role (clojure.core/get-in letvar1079500 ["Role" :content])))))))

(clojure.core/defn- response-invalid-public-key-exception ([input] (response-invalid-public-key-exception nil input)) ([resultWrapper1079502 input] (clojure.core/let [rawinput1079501 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079503 {"message" (portkey.aws/search-for-tag rawinput1079501 "message" :flattened? nil :result-wrapper resultWrapper1079502)}] (clojure.core/cond-> {} (letvar1079503 "message") (clojure.core/assoc :message (deserinvalid-public-key-message (clojure.core/get-in letvar1079503 ["message" :content])))))))

(clojure.core/defn- response-unrecognized-public-key-encoding-exception ([input] (response-unrecognized-public-key-encoding-exception nil input)) ([resultWrapper1079505 input] (clojure.core/let [rawinput1079504 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079506 {"message" (portkey.aws/search-for-tag rawinput1079504 "message" :flattened? nil :result-wrapper resultWrapper1079505)}] (clojure.core/cond-> {} (letvar1079506 "message") (clojure.core/assoc :message (deserunrecognized-public-key-encoding-message (clojure.core/get-in letvar1079506 ["message" :content])))))))

(clojure.core/defn- response-credential-report-expired-exception ([input] (response-credential-report-expired-exception nil input)) ([resultWrapper1079508 input] (clojure.core/let [rawinput1079507 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079509 {"message" (portkey.aws/search-for-tag rawinput1079507 "message" :flattened? nil :result-wrapper resultWrapper1079508)}] (clojure.core/cond-> {} (letvar1079509 "message") (clojure.core/assoc :message (desercredential-report-expired-exception-message (clojure.core/get-in letvar1079509 ["message" :content])))))))

(clojure.core/defn- response-update-saml-provider-response ([input] (response-update-saml-provider-response nil input)) ([resultWrapper1079511 input] (clojure.core/let [rawinput1079510 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079512 {"SAMLProviderArn" (portkey.aws/search-for-tag rawinput1079510 "SAMLProviderArn" :flattened? nil :result-wrapper resultWrapper1079511)}] (clojure.core/cond-> {} (letvar1079512 "SAMLProviderArn") (clojure.core/assoc :saml-provider-arn (deserarn-type (clojure.core/get-in letvar1079512 ["SAMLProviderArn" :content])))))))

(clojure.core/defn- response-create-service-specific-credential-response ([input] (response-create-service-specific-credential-response nil input)) ([resultWrapper1079514 input] (clojure.core/let [rawinput1079513 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079515 {"ServiceSpecificCredential" (portkey.aws/search-for-tag rawinput1079513 "ServiceSpecificCredential" :flattened? nil :result-wrapper resultWrapper1079514)}] (clojure.core/cond-> {} (letvar1079515 "ServiceSpecificCredential") (clojure.core/assoc :service-specific-credential (deser-service-specific-credential (clojure.core/get-in letvar1079515 ["ServiceSpecificCredential" :content])))))))

(clojure.core/defn- response-no-such-entity-exception ([input] (response-no-such-entity-exception nil input)) ([resultWrapper1079517 input] (clojure.core/let [rawinput1079516 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079518 {"message" (portkey.aws/search-for-tag rawinput1079516 "message" :flattened? nil :result-wrapper resultWrapper1079517)}] (clojure.core/cond-> {} (letvar1079518 "message") (clojure.core/assoc :message (deserno-such-entity-message (clojure.core/get-in letvar1079518 ["message" :content])))))))

(clojure.core/defn- response-get-group-policy-response ([input] (response-get-group-policy-response nil input)) ([resultWrapper1079520 input] (clojure.core/let [rawinput1079519 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079521 {"GroupName" (portkey.aws/search-for-tag rawinput1079519 "GroupName" :flattened? nil :result-wrapper resultWrapper1079520), "PolicyName" (portkey.aws/search-for-tag rawinput1079519 "PolicyName" :flattened? nil :result-wrapper resultWrapper1079520), "PolicyDocument" (portkey.aws/search-for-tag rawinput1079519 "PolicyDocument" :flattened? nil :result-wrapper resultWrapper1079520)}] (clojure.core/cond-> {:group-name (desergroup-name-type (clojure.core/get-in letvar1079521 ["GroupName" :content])), :policy-name (deserpolicy-name-type (clojure.core/get-in letvar1079521 ["PolicyName" :content])), :policy-document (deserpolicy-document-type (clojure.core/get-in letvar1079521 ["PolicyDocument" :content]))}))))

(clojure.core/defn- response-credential-report-not-present-exception ([input] (response-credential-report-not-present-exception nil input)) ([resultWrapper1079523 input] (clojure.core/let [rawinput1079522 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079524 {"message" (portkey.aws/search-for-tag rawinput1079522 "message" :flattened? nil :result-wrapper resultWrapper1079523)}] (clojure.core/cond-> {} (letvar1079524 "message") (clojure.core/assoc :message (desercredential-report-not-present-exception-message (clojure.core/get-in letvar1079524 ["message" :content])))))))

(clojure.core/defn- response-generate-credential-report-response ([input] (response-generate-credential-report-response nil input)) ([resultWrapper1079526 input] (clojure.core/let [rawinput1079525 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079527 {"State" (portkey.aws/search-for-tag rawinput1079525 "State" :flattened? nil :result-wrapper resultWrapper1079526), "Description" (portkey.aws/search-for-tag rawinput1079525 "Description" :flattened? nil :result-wrapper resultWrapper1079526)}] (clojure.core/cond-> {} (letvar1079527 "State") (clojure.core/assoc :state (deser-report-state-type (clojure.core/get-in letvar1079527 ["State" :content]))) (letvar1079527 "Description") (clojure.core/assoc :description (deser-report-state-description-type (clojure.core/get-in letvar1079527 ["Description" :content])))))))

(clojure.core/defn- response-invalid-certificate-exception ([input] (response-invalid-certificate-exception nil input)) ([resultWrapper1079529 input] (clojure.core/let [rawinput1079528 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079530 {"message" (portkey.aws/search-for-tag rawinput1079528 "message" :flattened? nil :result-wrapper resultWrapper1079529)}] (clojure.core/cond-> {} (letvar1079530 "message") (clojure.core/assoc :message (deserinvalid-certificate-message (clojure.core/get-in letvar1079530 ["message" :content])))))))

(clojure.core/defn- response-create-saml-provider-response ([input] (response-create-saml-provider-response nil input)) ([resultWrapper1079532 input] (clojure.core/let [rawinput1079531 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079533 {"SAMLProviderArn" (portkey.aws/search-for-tag rawinput1079531 "SAMLProviderArn" :flattened? nil :result-wrapper resultWrapper1079532)}] (clojure.core/cond-> {} (letvar1079533 "SAMLProviderArn") (clojure.core/assoc :saml-provider-arn (deserarn-type (clojure.core/get-in letvar1079533 ["SAMLProviderArn" :content])))))))

(clojure.core/defn- response-get-context-keys-for-policy-response ([input] (response-get-context-keys-for-policy-response nil input)) ([resultWrapper1079535 input] (clojure.core/let [rawinput1079534 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079536 {"ContextKeyNames" (portkey.aws/search-for-tag rawinput1079534 "ContextKeyNames" :flattened? nil :result-wrapper resultWrapper1079535)}] (clojure.core/cond-> {} (letvar1079536 "ContextKeyNames") (clojure.core/assoc :context-key-names (deser-context-key-names-result-list-type (clojure.core/get-in letvar1079536 ["ContextKeyNames" :content])))))))

(clojure.core/defn- response-list-instance-profiles-for-role-response ([input] (response-list-instance-profiles-for-role-response nil input)) ([resultWrapper1079538 input] (clojure.core/let [rawinput1079537 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079539 {"InstanceProfiles" (portkey.aws/search-for-tag rawinput1079537 "InstanceProfiles" :flattened? nil :result-wrapper resultWrapper1079538), "IsTruncated" (portkey.aws/search-for-tag rawinput1079537 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079538), "Marker" (portkey.aws/search-for-tag rawinput1079537 "Marker" :flattened? nil :result-wrapper resultWrapper1079538)}] (clojure.core/cond-> {:instance-profiles (deserinstance-profile-list-type (clojure.core/get-in letvar1079539 ["InstanceProfiles" :content]))} (letvar1079539 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079539 ["IsTruncated" :content]))) (letvar1079539 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079539 ["Marker" :content])))))))

(clojure.core/defn- response-malformed-certificate-exception ([input] (response-malformed-certificate-exception nil input)) ([resultWrapper1079541 input] (clojure.core/let [rawinput1079540 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079542 {"message" (portkey.aws/search-for-tag rawinput1079540 "message" :flattened? nil :result-wrapper resultWrapper1079541)}] (clojure.core/cond-> {} (letvar1079542 "message") (clojure.core/assoc :message (desermalformed-certificate-message (clojure.core/get-in letvar1079542 ["message" :content])))))))

(clojure.core/defn- response-list-attached-role-policies-response ([input] (response-list-attached-role-policies-response nil input)) ([resultWrapper1079544 input] (clojure.core/let [rawinput1079543 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079545 {"AttachedPolicies" (portkey.aws/search-for-tag rawinput1079543 "AttachedPolicies" :flattened? nil :result-wrapper resultWrapper1079544), "IsTruncated" (portkey.aws/search-for-tag rawinput1079543 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079544), "Marker" (portkey.aws/search-for-tag rawinput1079543 "Marker" :flattened? nil :result-wrapper resultWrapper1079544)}] (clojure.core/cond-> {} (letvar1079545 "AttachedPolicies") (clojure.core/assoc :attached-policies (deserattached-policies-list-type (clojure.core/get-in letvar1079545 ["AttachedPolicies" :content]))) (letvar1079545 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079545 ["IsTruncated" :content]))) (letvar1079545 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079545 ["Marker" :content])))))))

(clojure.core/defn- response-delete-conflict-exception ([input] (response-delete-conflict-exception nil input)) ([resultWrapper1079547 input] (clojure.core/let [rawinput1079546 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079548 {"message" (portkey.aws/search-for-tag rawinput1079546 "message" :flattened? nil :result-wrapper resultWrapper1079547)}] (clojure.core/cond-> {} (letvar1079548 "message") (clojure.core/assoc :message (deserdelete-conflict-message (clojure.core/get-in letvar1079548 ["message" :content])))))))

(clojure.core/defn- response-service-failure-exception ([input] (response-service-failure-exception nil input)) ([resultWrapper1079550 input] (clojure.core/let [rawinput1079549 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079551 {"message" (portkey.aws/search-for-tag rawinput1079549 "message" :flattened? nil :result-wrapper resultWrapper1079550)}] (clojure.core/cond-> {} (letvar1079551 "message") (clojure.core/assoc :message (deserservice-failure-exception-message (clojure.core/get-in letvar1079551 ["message" :content])))))))

(clojure.core/defn- response-create-role-response ([input] (response-create-role-response nil input)) ([resultWrapper1079553 input] (clojure.core/let [rawinput1079552 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079554 {"Role" (portkey.aws/search-for-tag rawinput1079552 "Role" :flattened? nil :result-wrapper resultWrapper1079553)}] (clojure.core/cond-> {:role (deser-role (clojure.core/get-in letvar1079554 ["Role" :content]))}))))

(clojure.core/defn- response-get-group-response ([input] (response-get-group-response nil input)) ([resultWrapper1079556 input] (clojure.core/let [rawinput1079555 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079557 {"Group" (portkey.aws/search-for-tag rawinput1079555 "Group" :flattened? nil :result-wrapper resultWrapper1079556), "Users" (portkey.aws/search-for-tag rawinput1079555 "Users" :flattened? nil :result-wrapper resultWrapper1079556), "IsTruncated" (portkey.aws/search-for-tag rawinput1079555 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079556), "Marker" (portkey.aws/search-for-tag rawinput1079555 "Marker" :flattened? nil :result-wrapper resultWrapper1079556)}] (clojure.core/cond-> {:group (deser-group (clojure.core/get-in letvar1079557 ["Group" :content])), :users (deseruser-list-type (clojure.core/get-in letvar1079557 ["Users" :content]))} (letvar1079557 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079557 ["IsTruncated" :content]))) (letvar1079557 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079557 ["Marker" :content])))))))

(clojure.core/defn- response-invalid-user-type-exception ([input] (response-invalid-user-type-exception nil input)) ([resultWrapper1079559 input] (clojure.core/let [rawinput1079558 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079560 {"message" (portkey.aws/search-for-tag rawinput1079558 "message" :flattened? nil :result-wrapper resultWrapper1079559)}] (clojure.core/cond-> {} (letvar1079560 "message") (clojure.core/assoc :message (deserinvalid-user-type-message (clojure.core/get-in letvar1079560 ["message" :content])))))))

(clojure.core/defn- response-limit-exceeded-exception ([input] (response-limit-exceeded-exception nil input)) ([resultWrapper1079562 input] (clojure.core/let [rawinput1079561 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079563 {"message" (portkey.aws/search-for-tag rawinput1079561 "message" :flattened? nil :result-wrapper resultWrapper1079562)}] (clojure.core/cond-> {} (letvar1079563 "message") (clojure.core/assoc :message (deserlimit-exceeded-message (clojure.core/get-in letvar1079563 ["message" :content])))))))

(clojure.core/defn- response-list-roles-response ([input] (response-list-roles-response nil input)) ([resultWrapper1079565 input] (clojure.core/let [rawinput1079564 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079566 {"Roles" (portkey.aws/search-for-tag rawinput1079564 "Roles" :flattened? nil :result-wrapper resultWrapper1079565), "IsTruncated" (portkey.aws/search-for-tag rawinput1079564 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079565), "Marker" (portkey.aws/search-for-tag rawinput1079564 "Marker" :flattened? nil :result-wrapper resultWrapper1079565)}] (clojure.core/cond-> {:roles (deserrole-list-type (clojure.core/get-in letvar1079566 ["Roles" :content]))} (letvar1079566 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079566 ["IsTruncated" :content]))) (letvar1079566 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079566 ["Marker" :content])))))))

(clojure.core/defn- response-create-open-id-connect-provider-response ([input] (response-create-open-id-connect-provider-response nil input)) ([resultWrapper1079568 input] (clojure.core/let [rawinput1079567 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079569 {"OpenIDConnectProviderArn" (portkey.aws/search-for-tag rawinput1079567 "OpenIDConnectProviderArn" :flattened? nil :result-wrapper resultWrapper1079568)}] (clojure.core/cond-> {} (letvar1079569 "OpenIDConnectProviderArn") (clojure.core/assoc :open-id-connect-provider-arn (deserarn-type (clojure.core/get-in letvar1079569 ["OpenIDConnectProviderArn" :content])))))))

(clojure.core/defn- response-list-groups-response ([input] (response-list-groups-response nil input)) ([resultWrapper1079571 input] (clojure.core/let [rawinput1079570 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079572 {"Groups" (portkey.aws/search-for-tag rawinput1079570 "Groups" :flattened? nil :result-wrapper resultWrapper1079571), "IsTruncated" (portkey.aws/search-for-tag rawinput1079570 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079571), "Marker" (portkey.aws/search-for-tag rawinput1079570 "Marker" :flattened? nil :result-wrapper resultWrapper1079571)}] (clojure.core/cond-> {:groups (desergroup-list-type (clojure.core/get-in letvar1079572 ["Groups" :content]))} (letvar1079572 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079572 ["IsTruncated" :content]))) (letvar1079572 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079572 ["Marker" :content])))))))

(clojure.core/defn- response-policy-evaluation-exception ([input] (response-policy-evaluation-exception nil input)) ([resultWrapper1079574 input] (clojure.core/let [rawinput1079573 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079575 {"message" (portkey.aws/search-for-tag rawinput1079573 "message" :flattened? nil :result-wrapper resultWrapper1079574)}] (clojure.core/cond-> {} (letvar1079575 "message") (clojure.core/assoc :message (deserpolicy-evaluation-error-message (clojure.core/get-in letvar1079575 ["message" :content])))))))

(clojure.core/defn- response-duplicate-certificate-exception ([input] (response-duplicate-certificate-exception nil input)) ([resultWrapper1079577 input] (clojure.core/let [rawinput1079576 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079578 {"message" (portkey.aws/search-for-tag rawinput1079576 "message" :flattened? nil :result-wrapper resultWrapper1079577)}] (clojure.core/cond-> {} (letvar1079578 "message") (clojure.core/assoc :message (deserduplicate-certificate-message (clojure.core/get-in letvar1079578 ["message" :content])))))))

(clojure.core/defn- response-list-role-tags-response ([input] (response-list-role-tags-response nil input)) ([resultWrapper1079580 input] (clojure.core/let [rawinput1079579 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079581 {"Tags" (portkey.aws/search-for-tag rawinput1079579 "Tags" :flattened? nil :result-wrapper resultWrapper1079580), "IsTruncated" (portkey.aws/search-for-tag rawinput1079579 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079580), "Marker" (portkey.aws/search-for-tag rawinput1079579 "Marker" :flattened? nil :result-wrapper resultWrapper1079580)}] (clojure.core/cond-> {:tags (desertag-list-type (clojure.core/get-in letvar1079581 ["Tags" :content]))} (letvar1079581 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079581 ["IsTruncated" :content]))) (letvar1079581 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079581 ["Marker" :content])))))))

(clojure.core/defn- response-entity-already-exists-exception ([input] (response-entity-already-exists-exception nil input)) ([resultWrapper1079583 input] (clojure.core/let [rawinput1079582 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079584 {"message" (portkey.aws/search-for-tag rawinput1079582 "message" :flattened? nil :result-wrapper resultWrapper1079583)}] (clojure.core/cond-> {} (letvar1079584 "message") (clojure.core/assoc :message (deserentity-already-exists-message (clojure.core/get-in letvar1079584 ["message" :content])))))))

(clojure.core/defn- response-get-role-response ([input] (response-get-role-response nil input)) ([resultWrapper1079586 input] (clojure.core/let [rawinput1079585 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079587 {"Role" (portkey.aws/search-for-tag rawinput1079585 "Role" :flattened? nil :result-wrapper resultWrapper1079586)}] (clojure.core/cond-> {:role (deser-role (clojure.core/get-in letvar1079587 ["Role" :content]))}))))

(clojure.core/defn- response-get-instance-profile-response ([input] (response-get-instance-profile-response nil input)) ([resultWrapper1079589 input] (clojure.core/let [rawinput1079588 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079590 {"InstanceProfile" (portkey.aws/search-for-tag rawinput1079588 "InstanceProfile" :flattened? nil :result-wrapper resultWrapper1079589)}] (clojure.core/cond-> {:instance-profile (deser-instance-profile (clojure.core/get-in letvar1079590 ["InstanceProfile" :content]))}))))

(clojure.core/defn- response-get-credential-report-response ([input] (response-get-credential-report-response nil input)) ([resultWrapper1079592 input] (clojure.core/let [rawinput1079591 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079593 {"Content" (portkey.aws/search-for-tag rawinput1079591 "Content" :flattened? nil :result-wrapper resultWrapper1079592), "ReportFormat" (portkey.aws/search-for-tag rawinput1079591 "ReportFormat" :flattened? nil :result-wrapper resultWrapper1079592), "GeneratedTime" (portkey.aws/search-for-tag rawinput1079591 "GeneratedTime" :flattened? nil :result-wrapper resultWrapper1079592)}] (clojure.core/cond-> {} (letvar1079593 "Content") (clojure.core/assoc :content (deser-report-content-type (clojure.core/get-in letvar1079593 ["Content" :content]))) (letvar1079593 "ReportFormat") (clojure.core/assoc :report-format (deser-report-format-type (clojure.core/get-in letvar1079593 ["ReportFormat" :content]))) (letvar1079593 "GeneratedTime") (clojure.core/assoc :generated-time (deserdate-type (clojure.core/get-in letvar1079593 ["GeneratedTime" :content])))))))

(clojure.core/defn- response-get-service-linked-role-deletion-status-response ([input] (response-get-service-linked-role-deletion-status-response nil input)) ([resultWrapper1079595 input] (clojure.core/let [rawinput1079594 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079596 {"Status" (portkey.aws/search-for-tag rawinput1079594 "Status" :flattened? nil :result-wrapper resultWrapper1079595), "Reason" (portkey.aws/search-for-tag rawinput1079594 "Reason" :flattened? nil :result-wrapper resultWrapper1079595)}] (clojure.core/cond-> {:status (deser-deletion-task-status-type (clojure.core/get-in letvar1079596 ["Status" :content]))} (letvar1079596 "Reason") (clojure.core/assoc :reason (deser-deletion-task-failure-reason-type (clojure.core/get-in letvar1079596 ["Reason" :content])))))))

(clojure.core/defn- response-list-access-keys-response ([input] (response-list-access-keys-response nil input)) ([resultWrapper1079598 input] (clojure.core/let [rawinput1079597 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079599 {"AccessKeyMetadata" (portkey.aws/search-for-tag rawinput1079597 "AccessKeyMetadata" :flattened? nil :result-wrapper resultWrapper1079598), "IsTruncated" (portkey.aws/search-for-tag rawinput1079597 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079598), "Marker" (portkey.aws/search-for-tag rawinput1079597 "Marker" :flattened? nil :result-wrapper resultWrapper1079598)}] (clojure.core/cond-> {:access-key-metadata (deseraccess-key-metadata-list-type (clojure.core/get-in letvar1079599 ["AccessKeyMetadata" :content]))} (letvar1079599 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079599 ["IsTruncated" :content]))) (letvar1079599 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079599 ["Marker" :content])))))))

(clojure.core/defn- response-get-policy-version-response ([input] (response-get-policy-version-response nil input)) ([resultWrapper1079601 input] (clojure.core/let [rawinput1079600 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079602 {"PolicyVersion" (portkey.aws/search-for-tag rawinput1079600 "PolicyVersion" :flattened? nil :result-wrapper resultWrapper1079601)}] (clojure.core/cond-> {} (letvar1079602 "PolicyVersion") (clojure.core/assoc :policy-version (deser-policy-version (clojure.core/get-in letvar1079602 ["PolicyVersion" :content])))))))

(clojure.core/defn- response-simulate-policy-response ([input] (response-simulate-policy-response nil input)) ([resultWrapper1079604 input] (clojure.core/let [rawinput1079603 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079605 {"EvaluationResults" (portkey.aws/search-for-tag rawinput1079603 "EvaluationResults" :flattened? nil :result-wrapper resultWrapper1079604), "IsTruncated" (portkey.aws/search-for-tag rawinput1079603 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079604), "Marker" (portkey.aws/search-for-tag rawinput1079603 "Marker" :flattened? nil :result-wrapper resultWrapper1079604)}] (clojure.core/cond-> {} (letvar1079605 "EvaluationResults") (clojure.core/assoc :evaluation-results (deser-evaluation-results-list-type (clojure.core/get-in letvar1079605 ["EvaluationResults" :content]))) (letvar1079605 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079605 ["IsTruncated" :content]))) (letvar1079605 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079605 ["Marker" :content])))))))

(clojure.core/defn- response-list-groups-for-user-response ([input] (response-list-groups-for-user-response nil input)) ([resultWrapper1079607 input] (clojure.core/let [rawinput1079606 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079608 {"Groups" (portkey.aws/search-for-tag rawinput1079606 "Groups" :flattened? nil :result-wrapper resultWrapper1079607), "IsTruncated" (portkey.aws/search-for-tag rawinput1079606 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079607), "Marker" (portkey.aws/search-for-tag rawinput1079606 "Marker" :flattened? nil :result-wrapper resultWrapper1079607)}] (clojure.core/cond-> {:groups (desergroup-list-type (clojure.core/get-in letvar1079608 ["Groups" :content]))} (letvar1079608 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079608 ["IsTruncated" :content]))) (letvar1079608 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079608 ["Marker" :content])))))))

(clojure.core/defn- response-list-signing-certificates-response ([input] (response-list-signing-certificates-response nil input)) ([resultWrapper1079610 input] (clojure.core/let [rawinput1079609 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079611 {"Certificates" (portkey.aws/search-for-tag rawinput1079609 "Certificates" :flattened? nil :result-wrapper resultWrapper1079610), "IsTruncated" (portkey.aws/search-for-tag rawinput1079609 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079610), "Marker" (portkey.aws/search-for-tag rawinput1079609 "Marker" :flattened? nil :result-wrapper resultWrapper1079610)}] (clojure.core/cond-> {:certificates (desercertificate-list-type (clojure.core/get-in letvar1079611 ["Certificates" :content]))} (letvar1079611 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079611 ["IsTruncated" :content]))) (letvar1079611 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079611 ["Marker" :content])))))))

(clojure.core/defn- response-duplicate-ssh-public-key-exception ([input] (response-duplicate-ssh-public-key-exception nil input)) ([resultWrapper1079613 input] (clojure.core/let [rawinput1079612 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079614 {"message" (portkey.aws/search-for-tag rawinput1079612 "message" :flattened? nil :result-wrapper resultWrapper1079613)}] (clojure.core/cond-> {} (letvar1079614 "message") (clojure.core/assoc :message (deserduplicate-ssh-public-key-message (clojure.core/get-in letvar1079614 ["message" :content])))))))

(clojure.core/defn- response-entity-temporarily-unmodifiable-exception ([input] (response-entity-temporarily-unmodifiable-exception nil input)) ([resultWrapper1079616 input] (clojure.core/let [rawinput1079615 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079617 {"message" (portkey.aws/search-for-tag rawinput1079615 "message" :flattened? nil :result-wrapper resultWrapper1079616)}] (clojure.core/cond-> {} (letvar1079617 "message") (clojure.core/assoc :message (deserentity-temporarily-unmodifiable-message (clojure.core/get-in letvar1079617 ["message" :content])))))))

(clojure.core/defn- response-unmodifiable-entity-exception ([input] (response-unmodifiable-entity-exception nil input)) ([resultWrapper1079619 input] (clojure.core/let [rawinput1079618 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079620 {"message" (portkey.aws/search-for-tag rawinput1079618 "message" :flattened? nil :result-wrapper resultWrapper1079619)}] (clojure.core/cond-> {} (letvar1079620 "message") (clojure.core/assoc :message (deserunmodifiable-entity-message (clojure.core/get-in letvar1079620 ["message" :content])))))))

(clojure.core/defn- response-generate-service-last-accessed-details-response ([input] (response-generate-service-last-accessed-details-response nil input)) ([resultWrapper1079622 input] (clojure.core/let [rawinput1079621 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079623 {"JobId" (portkey.aws/search-for-tag rawinput1079621 "JobId" :flattened? nil :result-wrapper resultWrapper1079622)}] (clojure.core/cond-> {} (letvar1079623 "JobId") (clojure.core/assoc :job-id (deserjob-id-type (clojure.core/get-in letvar1079623 ["JobId" :content])))))))

(clojure.core/defn- response-list-user-policies-response ([input] (response-list-user-policies-response nil input)) ([resultWrapper1079625 input] (clojure.core/let [rawinput1079624 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079626 {"PolicyNames" (portkey.aws/search-for-tag rawinput1079624 "PolicyNames" :flattened? nil :result-wrapper resultWrapper1079625), "IsTruncated" (portkey.aws/search-for-tag rawinput1079624 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079625), "Marker" (portkey.aws/search-for-tag rawinput1079624 "Marker" :flattened? nil :result-wrapper resultWrapper1079625)}] (clojure.core/cond-> {:policy-names (deserpolicy-name-list-type (clojure.core/get-in letvar1079626 ["PolicyNames" :content]))} (letvar1079626 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079626 ["IsTruncated" :content]))) (letvar1079626 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079626 ["Marker" :content])))))))

(clojure.core/defn- response-get-open-id-connect-provider-response ([input] (response-get-open-id-connect-provider-response nil input)) ([resultWrapper1079628 input] (clojure.core/let [rawinput1079627 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079629 {"Url" (portkey.aws/search-for-tag rawinput1079627 "Url" :flattened? nil :result-wrapper resultWrapper1079628), "ClientIDList" (portkey.aws/search-for-tag rawinput1079627 "ClientIDList" :flattened? nil :result-wrapper resultWrapper1079628), "ThumbprintList" (portkey.aws/search-for-tag rawinput1079627 "ThumbprintList" :flattened? nil :result-wrapper resultWrapper1079628), "CreateDate" (portkey.aws/search-for-tag rawinput1079627 "CreateDate" :flattened? nil :result-wrapper resultWrapper1079628)}] (clojure.core/cond-> {} (letvar1079629 "Url") (clojure.core/assoc :url (deser-open-id-connect-provider-url-type (clojure.core/get-in letvar1079629 ["Url" :content]))) (letvar1079629 "ClientIDList") (clojure.core/assoc :client-id-list (deserclient-id-list-type (clojure.core/get-in letvar1079629 ["ClientIDList" :content]))) (letvar1079629 "ThumbprintList") (clojure.core/assoc :thumbprint-list (deserthumbprint-list-type (clojure.core/get-in letvar1079629 ["ThumbprintList" :content]))) (letvar1079629 "CreateDate") (clojure.core/assoc :create-date (deserdate-type (clojure.core/get-in letvar1079629 ["CreateDate" :content])))))))

(clojure.core/defn- response-key-pair-mismatch-exception ([input] (response-key-pair-mismatch-exception nil input)) ([resultWrapper1079631 input] (clojure.core/let [rawinput1079630 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079632 {"message" (portkey.aws/search-for-tag rawinput1079630 "message" :flattened? nil :result-wrapper resultWrapper1079631)}] (clojure.core/cond-> {} (letvar1079632 "message") (clojure.core/assoc :message (deserkey-pair-mismatch-message (clojure.core/get-in letvar1079632 ["message" :content])))))))

(clojure.core/defn- response-list-group-policies-response ([input] (response-list-group-policies-response nil input)) ([resultWrapper1079634 input] (clojure.core/let [rawinput1079633 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079635 {"PolicyNames" (portkey.aws/search-for-tag rawinput1079633 "PolicyNames" :flattened? nil :result-wrapper resultWrapper1079634), "IsTruncated" (portkey.aws/search-for-tag rawinput1079633 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079634), "Marker" (portkey.aws/search-for-tag rawinput1079633 "Marker" :flattened? nil :result-wrapper resultWrapper1079634)}] (clojure.core/cond-> {:policy-names (deserpolicy-name-list-type (clojure.core/get-in letvar1079635 ["PolicyNames" :content]))} (letvar1079635 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079635 ["IsTruncated" :content]))) (letvar1079635 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079635 ["Marker" :content])))))))

(clojure.core/defn- response-get-server-certificate-response ([input] (response-get-server-certificate-response nil input)) ([resultWrapper1079637 input] (clojure.core/let [rawinput1079636 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079638 {"ServerCertificate" (portkey.aws/search-for-tag rawinput1079636 "ServerCertificate" :flattened? nil :result-wrapper resultWrapper1079637)}] (clojure.core/cond-> {:server-certificate (deser-server-certificate (clojure.core/get-in letvar1079638 ["ServerCertificate" :content]))}))))

(clojure.core/defn- response-malformed-policy-document-exception ([input] (response-malformed-policy-document-exception nil input)) ([resultWrapper1079640 input] (clojure.core/let [rawinput1079639 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079641 {"message" (portkey.aws/search-for-tag rawinput1079639 "message" :flattened? nil :result-wrapper resultWrapper1079640)}] (clojure.core/cond-> {} (letvar1079641 "message") (clojure.core/assoc :message (desermalformed-policy-document-message (clojure.core/get-in letvar1079641 ["message" :content])))))))

(clojure.core/defn- response-invalid-input-exception ([input] (response-invalid-input-exception nil input)) ([resultWrapper1079643 input] (clojure.core/let [rawinput1079642 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079644 {"message" (portkey.aws/search-for-tag rawinput1079642 "message" :flattened? nil :result-wrapper resultWrapper1079643)}] (clojure.core/cond-> {} (letvar1079644 "message") (clojure.core/assoc :message (deserinvalid-input-message (clojure.core/get-in letvar1079644 ["message" :content])))))))

(clojure.core/defn- response-get-policy-response ([input] (response-get-policy-response nil input)) ([resultWrapper1079646 input] (clojure.core/let [rawinput1079645 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079647 {"Policy" (portkey.aws/search-for-tag rawinput1079645 "Policy" :flattened? nil :result-wrapper resultWrapper1079646)}] (clojure.core/cond-> {} (letvar1079647 "Policy") (clojure.core/assoc :policy (deser-policy (clojure.core/get-in letvar1079647 ["Policy" :content])))))))

(clojure.core/defn- response-create-policy-response ([input] (response-create-policy-response nil input)) ([resultWrapper1079649 input] (clojure.core/let [rawinput1079648 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079650 {"Policy" (portkey.aws/search-for-tag rawinput1079648 "Policy" :flattened? nil :result-wrapper resultWrapper1079649)}] (clojure.core/cond-> {} (letvar1079650 "Policy") (clojure.core/assoc :policy (deser-policy (clojure.core/get-in letvar1079650 ["Policy" :content])))))))

(clojure.core/defn- response-list-attached-group-policies-response ([input] (response-list-attached-group-policies-response nil input)) ([resultWrapper1079652 input] (clojure.core/let [rawinput1079651 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079653 {"AttachedPolicies" (portkey.aws/search-for-tag rawinput1079651 "AttachedPolicies" :flattened? nil :result-wrapper resultWrapper1079652), "IsTruncated" (portkey.aws/search-for-tag rawinput1079651 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079652), "Marker" (portkey.aws/search-for-tag rawinput1079651 "Marker" :flattened? nil :result-wrapper resultWrapper1079652)}] (clojure.core/cond-> {} (letvar1079653 "AttachedPolicies") (clojure.core/assoc :attached-policies (deserattached-policies-list-type (clojure.core/get-in letvar1079653 ["AttachedPolicies" :content]))) (letvar1079653 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079653 ["IsTruncated" :content]))) (letvar1079653 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079653 ["Marker" :content])))))))

(clojure.core/defn- response-list-ssh-public-keys-response ([input] (response-list-ssh-public-keys-response nil input)) ([resultWrapper1079655 input] (clojure.core/let [rawinput1079654 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079656 {"SSHPublicKeys" (portkey.aws/search-for-tag rawinput1079654 "SSHPublicKeys" :flattened? nil :result-wrapper resultWrapper1079655), "IsTruncated" (portkey.aws/search-for-tag rawinput1079654 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079655), "Marker" (portkey.aws/search-for-tag rawinput1079654 "Marker" :flattened? nil :result-wrapper resultWrapper1079655)}] (clojure.core/cond-> {} (letvar1079656 "SSHPublicKeys") (clojure.core/assoc :ssh-public-keys (deser-ssh-public-key-list-type (clojure.core/get-in letvar1079656 ["SSHPublicKeys" :content]))) (letvar1079656 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079656 ["IsTruncated" :content]))) (letvar1079656 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079656 ["Marker" :content])))))))

(clojure.core/defn- response-upload-ssh-public-key-response ([input] (response-upload-ssh-public-key-response nil input)) ([resultWrapper1079658 input] (clojure.core/let [rawinput1079657 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079659 {"SSHPublicKey" (portkey.aws/search-for-tag rawinput1079657 "SSHPublicKey" :flattened? nil :result-wrapper resultWrapper1079658)}] (clojure.core/cond-> {} (letvar1079659 "SSHPublicKey") (clojure.core/assoc :ssh-public-key (deser-ssh-public-key (clojure.core/get-in letvar1079659 ["SSHPublicKey" :content])))))))

(clojure.core/defn- response-list-user-tags-response ([input] (response-list-user-tags-response nil input)) ([resultWrapper1079661 input] (clojure.core/let [rawinput1079660 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079662 {"Tags" (portkey.aws/search-for-tag rawinput1079660 "Tags" :flattened? nil :result-wrapper resultWrapper1079661), "IsTruncated" (portkey.aws/search-for-tag rawinput1079660 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079661), "Marker" (portkey.aws/search-for-tag rawinput1079660 "Marker" :flattened? nil :result-wrapper resultWrapper1079661)}] (clojure.core/cond-> {:tags (desertag-list-type (clojure.core/get-in letvar1079662 ["Tags" :content]))} (letvar1079662 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079662 ["IsTruncated" :content]))) (letvar1079662 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079662 ["Marker" :content])))))))

(clojure.core/defn- response-service-not-supported-exception ([input] (response-service-not-supported-exception nil input)) ([resultWrapper1079664 input] (clojure.core/let [rawinput1079663 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079665 {"message" (portkey.aws/search-for-tag rawinput1079663 "message" :flattened? nil :result-wrapper resultWrapper1079664)}] (clojure.core/cond-> {} (letvar1079665 "message") (clojure.core/assoc :message (deserservice-not-supported-message (clojure.core/get-in letvar1079665 ["message" :content])))))))

(clojure.core/defn- response-upload-server-certificate-response ([input] (response-upload-server-certificate-response nil input)) ([resultWrapper1079667 input] (clojure.core/let [rawinput1079666 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079668 {"ServerCertificateMetadata" (portkey.aws/search-for-tag rawinput1079666 "ServerCertificateMetadata" :flattened? nil :result-wrapper resultWrapper1079667)}] (clojure.core/cond-> {} (letvar1079668 "ServerCertificateMetadata") (clojure.core/assoc :server-certificate-metadata (deser-server-certificate-metadata (clojure.core/get-in letvar1079668 ["ServerCertificateMetadata" :content])))))))

(clojure.core/defn- response-get-service-last-accessed-details-response ([input] (response-get-service-last-accessed-details-response nil input)) ([resultWrapper1079670 input] (clojure.core/let [rawinput1079669 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079671 {"JobStatus" (portkey.aws/search-for-tag rawinput1079669 "JobStatus" :flattened? nil :result-wrapper resultWrapper1079670), "JobCreationDate" (portkey.aws/search-for-tag rawinput1079669 "JobCreationDate" :flattened? nil :result-wrapper resultWrapper1079670), "ServicesLastAccessed" (portkey.aws/search-for-tag rawinput1079669 "ServicesLastAccessed" :flattened? nil :result-wrapper resultWrapper1079670), "JobCompletionDate" (portkey.aws/search-for-tag rawinput1079669 "JobCompletionDate" :flattened? nil :result-wrapper resultWrapper1079670), "IsTruncated" (portkey.aws/search-for-tag rawinput1079669 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079670), "Marker" (portkey.aws/search-for-tag rawinput1079669 "Marker" :flattened? nil :result-wrapper resultWrapper1079670), "Error" (portkey.aws/search-for-tag rawinput1079669 "Error" :flattened? nil :result-wrapper resultWrapper1079670)}] (clojure.core/cond-> {:job-status (deserjob-status-type (clojure.core/get-in letvar1079671 ["JobStatus" :content])), :job-creation-date (deserdate-type (clojure.core/get-in letvar1079671 ["JobCreationDate" :content])), :services-last-accessed (deser-services-last-accessed (clojure.core/get-in letvar1079671 ["ServicesLastAccessed" :content])), :job-completion-date (deserdate-type (clojure.core/get-in letvar1079671 ["JobCompletionDate" :content]))} (letvar1079671 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079671 ["IsTruncated" :content]))) (letvar1079671 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079671 ["Marker" :content]))) (letvar1079671 "Error") (clojure.core/assoc :error (deser-error-details (clojure.core/get-in letvar1079671 ["Error" :content])))))))

(clojure.core/defn- response-list-open-id-connect-providers-response ([input] (response-list-open-id-connect-providers-response nil input)) ([resultWrapper1079673 input] (clojure.core/let [rawinput1079672 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079674 {"OpenIDConnectProviderList" (portkey.aws/search-for-tag rawinput1079672 "OpenIDConnectProviderList" :flattened? nil :result-wrapper resultWrapper1079673)}] (clojure.core/cond-> {} (letvar1079674 "OpenIDConnectProviderList") (clojure.core/assoc :open-id-connect-provider-list (deser-open-id-connect-provider-list-type (clojure.core/get-in letvar1079674 ["OpenIDConnectProviderList" :content])))))))

(clojure.core/defn- response-update-role-description-response ([input] (response-update-role-description-response nil input)) ([resultWrapper1079676 input] (clojure.core/let [rawinput1079675 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079677 {"Role" (portkey.aws/search-for-tag rawinput1079675 "Role" :flattened? nil :result-wrapper resultWrapper1079676)}] (clojure.core/cond-> {} (letvar1079677 "Role") (clojure.core/assoc :role (deser-role (clojure.core/get-in letvar1079677 ["Role" :content])))))))

(clojure.core/defn- response-list-account-aliases-response ([input] (response-list-account-aliases-response nil input)) ([resultWrapper1079679 input] (clojure.core/let [rawinput1079678 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079680 {"AccountAliases" (portkey.aws/search-for-tag rawinput1079678 "AccountAliases" :flattened? nil :result-wrapper resultWrapper1079679), "IsTruncated" (portkey.aws/search-for-tag rawinput1079678 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079679), "Marker" (portkey.aws/search-for-tag rawinput1079678 "Marker" :flattened? nil :result-wrapper resultWrapper1079679)}] (clojure.core/cond-> {:account-aliases (deseraccount-alias-list-type (clojure.core/get-in letvar1079680 ["AccountAliases" :content]))} (letvar1079680 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079680 ["IsTruncated" :content]))) (letvar1079680 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079680 ["Marker" :content])))))))

(clojure.core/defn- response-list-saml-providers-response ([input] (response-list-saml-providers-response nil input)) ([resultWrapper1079682 input] (clojure.core/let [rawinput1079681 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079683 {"SAMLProviderList" (portkey.aws/search-for-tag rawinput1079681 "SAMLProviderList" :flattened? nil :result-wrapper resultWrapper1079682)}] (clojure.core/cond-> {} (letvar1079683 "SAMLProviderList") (clojure.core/assoc :saml-provider-list (deser-saml-provider-list-type (clojure.core/get-in letvar1079683 ["SAMLProviderList" :content])))))))

(clojure.core/defn- response-get-account-password-policy-response ([input] (response-get-account-password-policy-response nil input)) ([resultWrapper1079685 input] (clojure.core/let [rawinput1079684 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079686 {"PasswordPolicy" (portkey.aws/search-for-tag rawinput1079684 "PasswordPolicy" :flattened? nil :result-wrapper resultWrapper1079685)}] (clojure.core/cond-> {:password-policy (deser-password-policy (clojure.core/get-in letvar1079686 ["PasswordPolicy" :content]))}))))

(clojure.core/defn- response-create-group-response ([input] (response-create-group-response nil input)) ([resultWrapper1079688 input] (clojure.core/let [rawinput1079687 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079689 {"Group" (portkey.aws/search-for-tag rawinput1079687 "Group" :flattened? nil :result-wrapper resultWrapper1079688)}] (clojure.core/cond-> {:group (deser-group (clojure.core/get-in letvar1079689 ["Group" :content]))}))))

(clojure.core/defn- response-upload-signing-certificate-response ([input] (response-upload-signing-certificate-response nil input)) ([resultWrapper1079691 input] (clojure.core/let [rawinput1079690 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079692 {"Certificate" (portkey.aws/search-for-tag rawinput1079690 "Certificate" :flattened? nil :result-wrapper resultWrapper1079691)}] (clojure.core/cond-> {:certificate (deser-signing-certificate (clojure.core/get-in letvar1079692 ["Certificate" :content]))}))))

(clojure.core/defn- response-list-role-policies-response ([input] (response-list-role-policies-response nil input)) ([resultWrapper1079694 input] (clojure.core/let [rawinput1079693 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079695 {"PolicyNames" (portkey.aws/search-for-tag rawinput1079693 "PolicyNames" :flattened? nil :result-wrapper resultWrapper1079694), "IsTruncated" (portkey.aws/search-for-tag rawinput1079693 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079694), "Marker" (portkey.aws/search-for-tag rawinput1079693 "Marker" :flattened? nil :result-wrapper resultWrapper1079694)}] (clojure.core/cond-> {:policy-names (deserpolicy-name-list-type (clojure.core/get-in letvar1079695 ["PolicyNames" :content]))} (letvar1079695 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079695 ["IsTruncated" :content]))) (letvar1079695 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079695 ["Marker" :content])))))))

(clojure.core/defn- response-reset-service-specific-credential-response ([input] (response-reset-service-specific-credential-response nil input)) ([resultWrapper1079697 input] (clojure.core/let [rawinput1079696 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079698 {"ServiceSpecificCredential" (portkey.aws/search-for-tag rawinput1079696 "ServiceSpecificCredential" :flattened? nil :result-wrapper resultWrapper1079697)}] (clojure.core/cond-> {} (letvar1079698 "ServiceSpecificCredential") (clojure.core/assoc :service-specific-credential (deser-service-specific-credential (clojure.core/get-in letvar1079698 ["ServiceSpecificCredential" :content])))))))

(clojure.core/defn- response-list-service-specific-credentials-response ([input] (response-list-service-specific-credentials-response nil input)) ([resultWrapper1079700 input] (clojure.core/let [rawinput1079699 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079701 {"ServiceSpecificCredentials" (portkey.aws/search-for-tag rawinput1079699 "ServiceSpecificCredentials" :flattened? nil :result-wrapper resultWrapper1079700)}] (clojure.core/cond-> {} (letvar1079701 "ServiceSpecificCredentials") (clojure.core/assoc :service-specific-credentials (deser-service-specific-credentials-list-type (clojure.core/get-in letvar1079701 ["ServiceSpecificCredentials" :content])))))))

(clojure.core/defn- response-create-access-key-response ([input] (response-create-access-key-response nil input)) ([resultWrapper1079703 input] (clojure.core/let [rawinput1079702 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079704 {"AccessKey" (portkey.aws/search-for-tag rawinput1079702 "AccessKey" :flattened? nil :result-wrapper resultWrapper1079703)}] (clojure.core/cond-> {:access-key (deser-access-key (clojure.core/get-in letvar1079704 ["AccessKey" :content]))}))))

(clojure.core/defn- response-create-login-profile-response ([input] (response-create-login-profile-response nil input)) ([resultWrapper1079706 input] (clojure.core/let [rawinput1079705 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079707 {"LoginProfile" (portkey.aws/search-for-tag rawinput1079705 "LoginProfile" :flattened? nil :result-wrapper resultWrapper1079706)}] (clojure.core/cond-> {:login-profile (deser-login-profile (clojure.core/get-in letvar1079707 ["LoginProfile" :content]))}))))

(clojure.core/defn- response-list-instance-profiles-response ([input] (response-list-instance-profiles-response nil input)) ([resultWrapper1079709 input] (clojure.core/let [rawinput1079708 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079710 {"InstanceProfiles" (portkey.aws/search-for-tag rawinput1079708 "InstanceProfiles" :flattened? nil :result-wrapper resultWrapper1079709), "IsTruncated" (portkey.aws/search-for-tag rawinput1079708 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079709), "Marker" (portkey.aws/search-for-tag rawinput1079708 "Marker" :flattened? nil :result-wrapper resultWrapper1079709)}] (clojure.core/cond-> {:instance-profiles (deserinstance-profile-list-type (clojure.core/get-in letvar1079710 ["InstanceProfiles" :content]))} (letvar1079710 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079710 ["IsTruncated" :content]))) (letvar1079710 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079710 ["Marker" :content])))))))

(clojure.core/defn- response-list-entities-for-policy-response ([input] (response-list-entities-for-policy-response nil input)) ([resultWrapper1079712 input] (clojure.core/let [rawinput1079711 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079713 {"PolicyGroups" (portkey.aws/search-for-tag rawinput1079711 "PolicyGroups" :flattened? nil :result-wrapper resultWrapper1079712), "PolicyUsers" (portkey.aws/search-for-tag rawinput1079711 "PolicyUsers" :flattened? nil :result-wrapper resultWrapper1079712), "PolicyRoles" (portkey.aws/search-for-tag rawinput1079711 "PolicyRoles" :flattened? nil :result-wrapper resultWrapper1079712), "IsTruncated" (portkey.aws/search-for-tag rawinput1079711 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079712), "Marker" (portkey.aws/search-for-tag rawinput1079711 "Marker" :flattened? nil :result-wrapper resultWrapper1079712)}] (clojure.core/cond-> {} (letvar1079713 "PolicyGroups") (clojure.core/assoc :policy-groups (deser-policy-group-list-type (clojure.core/get-in letvar1079713 ["PolicyGroups" :content]))) (letvar1079713 "PolicyUsers") (clojure.core/assoc :policy-users (deser-policy-user-list-type (clojure.core/get-in letvar1079713 ["PolicyUsers" :content]))) (letvar1079713 "PolicyRoles") (clojure.core/assoc :policy-roles (deser-policy-role-list-type (clojure.core/get-in letvar1079713 ["PolicyRoles" :content]))) (letvar1079713 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079713 ["IsTruncated" :content]))) (letvar1079713 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079713 ["Marker" :content])))))))

(clojure.core/defn- response-create-virtual-mfa-device-response ([input] (response-create-virtual-mfa-device-response nil input)) ([resultWrapper1079715 input] (clojure.core/let [rawinput1079714 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079716 {"VirtualMFADevice" (portkey.aws/search-for-tag rawinput1079714 "VirtualMFADevice" :flattened? nil :result-wrapper resultWrapper1079715)}] (clojure.core/cond-> {:virtual-mfa-device (deser-virtual-mfa-device (clojure.core/get-in letvar1079716 ["VirtualMFADevice" :content]))}))))

(clojure.core/defn- response-list-policies-response ([input] (response-list-policies-response nil input)) ([resultWrapper1079718 input] (clojure.core/let [rawinput1079717 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079719 {"Policies" (portkey.aws/search-for-tag rawinput1079717 "Policies" :flattened? nil :result-wrapper resultWrapper1079718), "IsTruncated" (portkey.aws/search-for-tag rawinput1079717 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079718), "Marker" (portkey.aws/search-for-tag rawinput1079717 "Marker" :flattened? nil :result-wrapper resultWrapper1079718)}] (clojure.core/cond-> {} (letvar1079719 "Policies") (clojure.core/assoc :policies (deserpolicy-list-type (clojure.core/get-in letvar1079719 ["Policies" :content]))) (letvar1079719 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079719 ["IsTruncated" :content]))) (letvar1079719 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079719 ["Marker" :content])))))))

(clojure.core/defn- response-password-policy-violation-exception ([input] (response-password-policy-violation-exception nil input)) ([resultWrapper1079721 input] (clojure.core/let [rawinput1079720 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079722 {"message" (portkey.aws/search-for-tag rawinput1079720 "message" :flattened? nil :result-wrapper resultWrapper1079721)}] (clojure.core/cond-> {} (letvar1079722 "message") (clojure.core/assoc :message (deserpassword-policy-violation-message (clojure.core/get-in letvar1079722 ["message" :content])))))))

(clojure.core/defn- response-concurrent-modification-exception ([input] (response-concurrent-modification-exception nil input)) ([resultWrapper1079724 input] (clojure.core/let [rawinput1079723 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079725 {"message" (portkey.aws/search-for-tag rawinput1079723 "message" :flattened? nil :result-wrapper resultWrapper1079724)}] (clojure.core/cond-> {} (letvar1079725 "message") (clojure.core/assoc :message (deser-concurrent-modification-message (clojure.core/get-in letvar1079725 ["message" :content])))))))

(clojure.core/defn- response-invalid-authentication-code-exception ([input] (response-invalid-authentication-code-exception nil input)) ([resultWrapper1079727 input] (clojure.core/let [rawinput1079726 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079728 {"message" (portkey.aws/search-for-tag rawinput1079726 "message" :flattened? nil :result-wrapper resultWrapper1079727)}] (clojure.core/cond-> {} (letvar1079728 "message") (clojure.core/assoc :message (deserinvalid-authentication-code-message (clojure.core/get-in letvar1079728 ["message" :content])))))))

(clojure.core/defn- response-get-saml-provider-response ([input] (response-get-saml-provider-response nil input)) ([resultWrapper1079730 input] (clojure.core/let [rawinput1079729 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079731 {"SAMLMetadataDocument" (portkey.aws/search-for-tag rawinput1079729 "SAMLMetadataDocument" :flattened? nil :result-wrapper resultWrapper1079730), "CreateDate" (portkey.aws/search-for-tag rawinput1079729 "CreateDate" :flattened? nil :result-wrapper resultWrapper1079730), "ValidUntil" (portkey.aws/search-for-tag rawinput1079729 "ValidUntil" :flattened? nil :result-wrapper resultWrapper1079730)}] (clojure.core/cond-> {} (letvar1079731 "SAMLMetadataDocument") (clojure.core/assoc :saml-metadata-document (deser-saml-metadata-document-type (clojure.core/get-in letvar1079731 ["SAMLMetadataDocument" :content]))) (letvar1079731 "CreateDate") (clojure.core/assoc :create-date (deserdate-type (clojure.core/get-in letvar1079731 ["CreateDate" :content]))) (letvar1079731 "ValidUntil") (clojure.core/assoc :valid-until (deserdate-type (clojure.core/get-in letvar1079731 ["ValidUntil" :content])))))))

(clojure.core/defn- response-list-policies-granting-service-access-response ([input] (response-list-policies-granting-service-access-response nil input)) ([resultWrapper1079733 input] (clojure.core/let [rawinput1079732 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079734 {"PoliciesGrantingServiceAccess" (portkey.aws/search-for-tag rawinput1079732 "PoliciesGrantingServiceAccess" :flattened? nil :result-wrapper resultWrapper1079733), "IsTruncated" (portkey.aws/search-for-tag rawinput1079732 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079733), "Marker" (portkey.aws/search-for-tag rawinput1079732 "Marker" :flattened? nil :result-wrapper resultWrapper1079733)}] (clojure.core/cond-> {:policies-granting-service-access (deserlist-policy-granting-service-access-response-list-type (clojure.core/get-in letvar1079734 ["PoliciesGrantingServiceAccess" :content]))} (letvar1079734 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079734 ["IsTruncated" :content]))) (letvar1079734 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079734 ["Marker" :content])))))))

(clojure.core/defn- response-list-attached-user-policies-response ([input] (response-list-attached-user-policies-response nil input)) ([resultWrapper1079736 input] (clojure.core/let [rawinput1079735 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079737 {"AttachedPolicies" (portkey.aws/search-for-tag rawinput1079735 "AttachedPolicies" :flattened? nil :result-wrapper resultWrapper1079736), "IsTruncated" (portkey.aws/search-for-tag rawinput1079735 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079736), "Marker" (portkey.aws/search-for-tag rawinput1079735 "Marker" :flattened? nil :result-wrapper resultWrapper1079736)}] (clojure.core/cond-> {} (letvar1079737 "AttachedPolicies") (clojure.core/assoc :attached-policies (deserattached-policies-list-type (clojure.core/get-in letvar1079737 ["AttachedPolicies" :content]))) (letvar1079737 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079737 ["IsTruncated" :content]))) (letvar1079737 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079737 ["Marker" :content])))))))

(clojure.core/defn- response-list-users-response ([input] (response-list-users-response nil input)) ([resultWrapper1079739 input] (clojure.core/let [rawinput1079738 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079740 {"Users" (portkey.aws/search-for-tag rawinput1079738 "Users" :flattened? nil :result-wrapper resultWrapper1079739), "IsTruncated" (portkey.aws/search-for-tag rawinput1079738 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079739), "Marker" (portkey.aws/search-for-tag rawinput1079738 "Marker" :flattened? nil :result-wrapper resultWrapper1079739)}] (clojure.core/cond-> {:users (deseruser-list-type (clojure.core/get-in letvar1079740 ["Users" :content]))} (letvar1079740 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079740 ["IsTruncated" :content]))) (letvar1079740 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079740 ["Marker" :content])))))))

(clojure.core/defn- response-create-policy-version-response ([input] (response-create-policy-version-response nil input)) ([resultWrapper1079742 input] (clojure.core/let [rawinput1079741 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079743 {"PolicyVersion" (portkey.aws/search-for-tag rawinput1079741 "PolicyVersion" :flattened? nil :result-wrapper resultWrapper1079742)}] (clojure.core/cond-> {} (letvar1079743 "PolicyVersion") (clojure.core/assoc :policy-version (deser-policy-version (clojure.core/get-in letvar1079743 ["PolicyVersion" :content])))))))

(clojure.core/defn- response-get-account-authorization-details-response ([input] (response-get-account-authorization-details-response nil input)) ([resultWrapper1079745 input] (clojure.core/let [rawinput1079744 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079746 {"UserDetailList" (portkey.aws/search-for-tag rawinput1079744 "UserDetailList" :flattened? nil :result-wrapper resultWrapper1079745), "GroupDetailList" (portkey.aws/search-for-tag rawinput1079744 "GroupDetailList" :flattened? nil :result-wrapper resultWrapper1079745), "RoleDetailList" (portkey.aws/search-for-tag rawinput1079744 "RoleDetailList" :flattened? nil :result-wrapper resultWrapper1079745), "Policies" (portkey.aws/search-for-tag rawinput1079744 "Policies" :flattened? nil :result-wrapper resultWrapper1079745), "IsTruncated" (portkey.aws/search-for-tag rawinput1079744 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079745), "Marker" (portkey.aws/search-for-tag rawinput1079744 "Marker" :flattened? nil :result-wrapper resultWrapper1079745)}] (clojure.core/cond-> {} (letvar1079746 "UserDetailList") (clojure.core/assoc :user-detail-list (deseruser-detail-list-type (clojure.core/get-in letvar1079746 ["UserDetailList" :content]))) (letvar1079746 "GroupDetailList") (clojure.core/assoc :group-detail-list (desergroup-detail-list-type (clojure.core/get-in letvar1079746 ["GroupDetailList" :content]))) (letvar1079746 "RoleDetailList") (clojure.core/assoc :role-detail-list (deserrole-detail-list-type (clojure.core/get-in letvar1079746 ["RoleDetailList" :content]))) (letvar1079746 "Policies") (clojure.core/assoc :policies (deser-managed-policy-detail-list-type (clojure.core/get-in letvar1079746 ["Policies" :content]))) (letvar1079746 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079746 ["IsTruncated" :content]))) (letvar1079746 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079746 ["Marker" :content])))))))

(clojure.core/defn- response-delete-service-linked-role-response ([input] (response-delete-service-linked-role-response nil input)) ([resultWrapper1079748 input] (clojure.core/let [rawinput1079747 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079749 {"DeletionTaskId" (portkey.aws/search-for-tag rawinput1079747 "DeletionTaskId" :flattened? nil :result-wrapper resultWrapper1079748)}] (clojure.core/cond-> {:deletion-task-id (deser-deletion-task-id-type (clojure.core/get-in letvar1079749 ["DeletionTaskId" :content]))}))))

(clojure.core/defn- response-list-virtual-mfa-devices-response ([input] (response-list-virtual-mfa-devices-response nil input)) ([resultWrapper1079751 input] (clojure.core/let [rawinput1079750 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079752 {"VirtualMFADevices" (portkey.aws/search-for-tag rawinput1079750 "VirtualMFADevices" :flattened? nil :result-wrapper resultWrapper1079751), "IsTruncated" (portkey.aws/search-for-tag rawinput1079750 "IsTruncated" :flattened? nil :result-wrapper resultWrapper1079751), "Marker" (portkey.aws/search-for-tag rawinput1079750 "Marker" :flattened? nil :result-wrapper resultWrapper1079751)}] (clojure.core/cond-> {:virtual-mfa-devices (deservirtual-mfa-device-list-type (clojure.core/get-in letvar1079752 ["VirtualMFADevices" :content]))} (letvar1079752 "IsTruncated") (clojure.core/assoc :is-truncated (deserboolean-type (clojure.core/get-in letvar1079752 ["IsTruncated" :content]))) (letvar1079752 "Marker") (clojure.core/assoc :marker (desermarker-type (clojure.core/get-in letvar1079752 ["Marker" :content])))))))

(clojure.core/defn- response-get-user-policy-response ([input] (response-get-user-policy-response nil input)) ([resultWrapper1079754 input] (clojure.core/let [rawinput1079753 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079755 {"UserName" (portkey.aws/search-for-tag rawinput1079753 "UserName" :flattened? nil :result-wrapper resultWrapper1079754), "PolicyName" (portkey.aws/search-for-tag rawinput1079753 "PolicyName" :flattened? nil :result-wrapper resultWrapper1079754), "PolicyDocument" (portkey.aws/search-for-tag rawinput1079753 "PolicyDocument" :flattened? nil :result-wrapper resultWrapper1079754)}] (clojure.core/cond-> {:user-name (deserexisting-user-name-type (clojure.core/get-in letvar1079755 ["UserName" :content])), :policy-name (deserpolicy-name-type (clojure.core/get-in letvar1079755 ["PolicyName" :content])), :policy-document (deserpolicy-document-type (clojure.core/get-in letvar1079755 ["PolicyDocument" :content]))}))))

(clojure.core/defn- response-get-user-response ([input] (response-get-user-response nil input)) ([resultWrapper1079757 input] (clojure.core/let [rawinput1079756 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar1079758 {"User" (portkey.aws/search-for-tag rawinput1079756 "User" :flattened? nil :result-wrapper resultWrapper1079757)}] (clojure.core/cond-> {:user (deser-user (clojure.core/get-in letvar1079758 ["User" :content]))}))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.service-last-accessed/service-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/service-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.service-last-accessed/last-authenticated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.service-last-accessed/service-namespace (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/service-namespace-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.service-last-accessed/last-authenticated-entity (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.service-last-accessed/total-authenticated-entities (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/integer-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/service-last-accessed (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.service-last-accessed/service-name :portkey.aws.iam.-2010-05-08.service-last-accessed/service-namespace] :opt-un [:portkey.aws.iam.-2010-05-08.service-last-accessed/last-authenticated :portkey.aws.iam.-2010-05-08.service-last-accessed/last-authenticated-entity :portkey.aws.iam.-2010-05-08.service-last-accessed/total-authenticated-entities]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/saml-provider-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/saml-provider-list-entry))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-policy-versions-response/versions (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-document-version-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-policy-versions-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-policy-versions-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-policy-versions-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.list-policy-versions-response/versions :portkey.aws.iam.-2010-05-08.list-policy-versions-response/is-truncated :portkey.aws.iam.-2010-05-08.list-policy-versions-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-virtual-mfa-devices-request/assignment-status (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/assignment-status-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-virtual-mfa-devices-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-virtual-mfa-devices-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-virtual-mfa-devices-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.list-virtual-mfa-devices-request/assignment-status :portkey.aws.iam.-2010-05-08.list-virtual-mfa-devices-request/marker :portkey.aws.iam.-2010-05-08.list-virtual-mfa-devices-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-role-policy-response/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-role-policy-response/policy-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-role-policy-response/policy-document (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-document-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-role-policy-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-role-policy-response/role-name :portkey.aws.iam.-2010-05-08.get-role-policy-response/policy-name :portkey.aws.iam.-2010-05-08.get-role-policy-response/policy-document] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-source-type #{"user-managed" :role "role" "resource" "none" :group "group" "user" :resource :usermanaged :awsmanaged "aws-managed" :user :none})

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-user-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08/user]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-mfa-devices-response/mfa-devices (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/mfa-device-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-mfa-devices-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-mfa-devices-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-mfa-devices-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-mfa-devices-response/mfa-devices] :opt-un [:portkey.aws.iam.-2010-05-08.list-mfa-devices-response/is-truncated :portkey.aws.iam.-2010-05-08.list-mfa-devices-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.resource-specific-result/eval-resource-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/resource-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.resource-specific-result/eval-resource-decision (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-evaluation-decision-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.resource-specific-result/matched-statements (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/statement-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.resource-specific-result/missing-context-values (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/context-key-names-result-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.resource-specific-result/eval-decision-details (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/eval-decision-details-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/resource-specific-result (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.resource-specific-result/eval-resource-name :portkey.aws.iam.-2010-05-08.resource-specific-result/eval-resource-decision] :opt-un [:portkey.aws.iam.-2010-05-08.resource-specific-result/matched-statements :portkey.aws.iam.-2010-05-08.resource-specific-result/missing-context-values :portkey.aws.iam.-2010-05-08.resource-specific-result/eval-decision-details]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-account-password-policy-request/minimum-password-length (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/minimum-password-length-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-account-password-policy-request/require-numbers (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-account-password-policy-request/require-uppercase-characters (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-account-password-policy-request/hard-expiry (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-object-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-account-password-policy-request/require-lowercase-characters (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-account-password-policy-request/require-symbols (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-account-password-policy-request/allow-users-to-change-password (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-account-password-policy-request/max-password-age (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-password-age-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-account-password-policy-request/password-reuse-prevention (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/password-reuse-prevention-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/update-account-password-policy-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.update-account-password-policy-request/minimum-password-length :portkey.aws.iam.-2010-05-08.update-account-password-policy-request/require-numbers :portkey.aws.iam.-2010-05-08.update-account-password-policy-request/require-uppercase-characters :portkey.aws.iam.-2010-05-08.update-account-password-policy-request/hard-expiry :portkey.aws.iam.-2010-05-08.update-account-password-policy-request/require-lowercase-characters :portkey.aws.iam.-2010-05-08.update-account-password-policy-request/require-symbols :portkey.aws.iam.-2010-05-08.update-account-password-policy-request/allow-users-to-change-password :portkey.aws.iam.-2010-05-08.update-account-password-policy-request/max-password-age :portkey.aws.iam.-2010-05-08.update-account-password-policy-request/password-reuse-prevention]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/unrecognized-public-key-encoding-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-with-entities-response/job-status (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/job-status-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-with-entities-response/job-creation-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-with-entities-response/job-completion-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-with-entities-response/entity-details-list (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/entity-details-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-with-entities-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-with-entities-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-with-entities-response/error (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/error-details))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-service-last-accessed-details-with-entities-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-with-entities-response/job-status :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-with-entities-response/job-creation-date :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-with-entities-response/job-completion-date :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-with-entities-response/entity-details-list] :opt-un [:portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-with-entities-response/is-truncated :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-with-entities-response/marker :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-with-entities-response/error]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-access-key-last-used-response/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-access-key-last-used-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.get-access-key-last-used-response/user-name :portkey.aws.iam.-2010-05-08/access-key-last-used]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-open-id-connect-provider-request/open-id-connect-provider-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-open-id-connect-provider-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-open-id-connect-provider-request/open-id-connect-provider-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-role-request/path (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-role-request/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-role-request/assume-role-policy-document (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-document-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-role-request/description (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-description-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-role-request/max-session-duration (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-max-session-duration-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-role-request/permissions-boundary (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-role-request/tags (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/tag-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-role-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.create-role-request/role-name :portkey.aws.iam.-2010-05-08.create-role-request/assume-role-policy-document] :opt-un [:portkey.aws.iam.-2010-05-08.create-role-request/path :portkey.aws.iam.-2010-05-08.create-role-request/description :portkey.aws.iam.-2010-05-08.create-role-request/max-session-duration :portkey.aws.iam.-2010-05-08.create-role-request/permissions-boundary :portkey.aws.iam.-2010-05-08.create-role-request/tags]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/context-entry-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/context-entry))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/public-key-material-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 16384)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\u0009\u000A\u000D\u0020-\u00FF]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.server-certificate-metadata/path (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.server-certificate-metadata/server-certificate-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/server-certificate-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.server-certificate-metadata/server-certificate-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.server-certificate-metadata/arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.server-certificate-metadata/upload-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.server-certificate-metadata/expiration (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/server-certificate-metadata (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.server-certificate-metadata/path :portkey.aws.iam.-2010-05-08.server-certificate-metadata/server-certificate-name :portkey.aws.iam.-2010-05-08.server-certificate-metadata/server-certificate-id :portkey.aws.iam.-2010-05-08.server-certificate-metadata/arn] :opt-un [:portkey.aws.iam.-2010-05-08.server-certificate-metadata/upload-date :portkey.aws.iam.-2010-05-08.server-certificate-metadata/expiration]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/entity-details-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/entity-details))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-login-profile-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-login-profile-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.delete-login-profile-request/user-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/job-status-type #{"COMPLETED" "IN_PROGRESS" :in-progress :completed "FAILED" :failed})

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-user-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-user-request/new-path (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-user-request/new-user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/update-user-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.update-user-request/user-name] :opt-un [:portkey.aws.iam.-2010-05-08.update-user-request/new-path :portkey.aws.iam.-2010-05-08.update-user-request/new-user-name]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-login-profile-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08/login-profile] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-role-policy-request/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-role-policy-request/policy-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-role-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-role-policy-request/role-name :portkey.aws.iam.-2010-05-08.get-role-policy-request/policy-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-user-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-user-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.get-user-request/user-name]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/key-pair-mismatch-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-login-profile-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-login-profile-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-login-profile-request/user-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/server-certificate-metadata-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/server-certificate-metadata))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.entity-details/last-authenticated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/entity-details (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08/entity-info] :opt-un [:portkey.aws.iam.-2010-05-08.entity-details/last-authenticated]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-owner-entity-type #{:role "USER" :group "ROLE" :user "GROUP"})

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/custom-suffix-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 64)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\w+=,.@-]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/path-prefix-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 512)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"\u002F[\u0021-\u007F]*" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-account-summary-response/summary-map (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/summary-map-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-account-summary-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.get-account-summary-response/summary-map]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-server-certificates-response/server-certificate-metadata-list (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/server-certificate-metadata-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-server-certificates-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-server-certificates-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-server-certificates-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-server-certificates-response/server-certificate-metadata-list] :opt-un [:portkey.aws.iam.-2010-05-08.list-server-certificates-response/is-truncated :portkey.aws.iam.-2010-05-08.list-server-certificates-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/report-state-type #{:started :inprogress "COMPLETE" :complete "INPROGRESS" "STARTED"})

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-users-request/path-prefix (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/path-prefix-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-users-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-users-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-users-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.list-users-request/path-prefix :portkey.aws.iam.-2010-05-08.list-users-request/marker :portkey.aws.iam.-2010-05-08.list-users-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-usage-type #{:permissions-policy "PermissionsPolicy" "PermissionsBoundary" :permissions-boundary})

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy-not-attachable-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-not-attachable-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-not-attachable-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.policy-not-attachable-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/virtual-mfa-device-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/virtual-mfa-device))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/marker-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 320)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\u0020-\u00FF]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-instance-profile-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08/instance-profile] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/deletion-task-status-type #{"IN_PROGRESS" :in-progress "NOT_STARTED" "SUCCEEDED" "FAILED" :not-started :failed :succeeded})

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.login-profile/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.login-profile/create-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.login-profile/password-reset-required (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/login-profile (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.login-profile/user-name :portkey.aws.iam.-2010-05-08.login-profile/create-date] :opt-un [:portkey.aws.iam.-2010-05-08.login-profile/password-reset-required]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/date-type clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.server-certificate/certificate-body (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/certificate-body-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.server-certificate/certificate-chain (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/certificate-chain-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/server-certificate (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08/server-certificate-metadata :portkey.aws.iam.-2010-05-08.server-certificate/certificate-body] :opt-un [:portkey.aws.iam.-2010-05-08.server-certificate/certificate-chain]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/group-name-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/group-name-type))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.saml-provider-list-entry/arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.saml-provider-list-entry/valid-until (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.saml-provider-list-entry/create-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/saml-provider-list-entry (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.saml-provider-list-entry/arn :portkey.aws.iam.-2010-05-08.saml-provider-list-entry/valid-until :portkey.aws.iam.-2010-05-08.saml-provider-list-entry/create-date]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/action-name-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 3 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 128))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.credential-report-not-ready-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/credential-report-not-ready-exception-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/credential-report-not-ready-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.credential-report-not-ready-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-ssh-public-key-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08/ssh-public-key]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/update-role-response (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/user-name-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 64)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\w+=,.@-]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-attached-user-policies-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-attached-user-policies-request/path-prefix (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-attached-user-policies-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-attached-user-policies-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-attached-user-policies-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-attached-user-policies-request/user-name] :opt-un [:portkey.aws.iam.-2010-05-08.list-attached-user-policies-request/path-prefix :portkey.aws.iam.-2010-05-08.list-attached-user-policies-request/marker :portkey.aws.iam.-2010-05-08.list-attached-user-policies-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-service-linked-role-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08/role]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/group-name-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 128)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\w+=,.@-]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-open-id-connect-providers-request (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-document-version-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/policy-version))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.invalid-public-key-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/invalid-public-key-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/invalid-public-key-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.invalid-public-key-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.role-usage-type/region (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/region-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.role-usage-type/resources (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/role-usage-type (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.role-usage-type/region :portkey.aws.iam.-2010-05-08.role-usage-type/resources]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/credential-report-expired-exception-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/tag-key-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/tag-key-type :max-count 50))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.instance-profile/path (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.instance-profile/instance-profile-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/instance-profile-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.instance-profile/instance-profile-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.instance-profile/arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.instance-profile/create-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.instance-profile/roles (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/instance-profile (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.instance-profile/path :portkey.aws.iam.-2010-05-08.instance-profile/instance-profile-name :portkey.aws.iam.-2010-05-08.instance-profile/instance-profile-id :portkey.aws.iam.-2010-05-08.instance-profile/arn :portkey.aws.iam.-2010-05-08.instance-profile/create-date :portkey.aws.iam.-2010-05-08.instance-profile/roles] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-roles-request/path-prefix (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/path-prefix-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-roles-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-roles-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-roles-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.list-roles-request/path-prefix :portkey.aws.iam.-2010-05-08.list-roles-request/marker :portkey.aws.iam.-2010-05-08.list-roles-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/saml-provider-name-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 128)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\w._-]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-server-certificate-request/server-certificate-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/server-certificate-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-server-certificate-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-server-certificate-request/server-certificate-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/attached-policies-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/attached-policy))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.unrecognized-public-key-encoding-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/unrecognized-public-key-encoding-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/unrecognized-public-key-encoding-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.unrecognized-public-key-encoding-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/service-namespace-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 64)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\w-]*" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-identifier-type (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/id-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 16 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 128)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\w]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.credential-report-expired-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/credential-report-expired-exception-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/credential-report-expired-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.credential-report-expired-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/client-id-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 255))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-signing-certificate-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-signing-certificate-request/certificate-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/certificate-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-signing-certificate-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.delete-signing-certificate-request/certificate-id] :opt-un [:portkey.aws.iam.-2010-05-08.delete-signing-certificate-request/user-name]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/string-type (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.tag-user-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.tag-user-request/tags (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/tag-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/tag-user-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.tag-user-request/user-name :portkey.aws.iam.-2010-05-08.tag-user-request/tags] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.set-default-policy-version-request/policy-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.set-default-policy-version-request/version-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-version-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/set-default-policy-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.set-default-policy-version-request/policy-arn :portkey.aws.iam.-2010-05-08.set-default-policy-version-request/version-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-saml-provider-request/saml-metadata-document (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/saml-metadata-document-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-saml-provider-request/name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/saml-provider-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-saml-provider-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.create-saml-provider-request/saml-metadata-document :portkey.aws.iam.-2010-05-08.create-saml-provider-request/name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/eval-decision-source-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 3 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 256))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.password-policy/minimum-password-length (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/minimum-password-length-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.password-policy/require-numbers (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.password-policy/require-uppercase-characters (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.password-policy/hard-expiry (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-object-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.password-policy/expire-passwords (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.password-policy/require-lowercase-characters (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.password-policy/require-symbols (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.password-policy/allow-users-to-change-password (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.password-policy/max-password-age (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-password-age-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.password-policy/password-reuse-prevention (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/password-reuse-prevention-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/password-policy (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.password-policy/minimum-password-length :portkey.aws.iam.-2010-05-08.password-policy/require-numbers :portkey.aws.iam.-2010-05-08.password-policy/require-uppercase-characters :portkey.aws.iam.-2010-05-08.password-policy/hard-expiry :portkey.aws.iam.-2010-05-08.password-policy/expire-passwords :portkey.aws.iam.-2010-05-08.password-policy/require-lowercase-characters :portkey.aws.iam.-2010-05-08.password-policy/require-symbols :portkey.aws.iam.-2010-05-08.password-policy/allow-users-to-change-password :portkey.aws.iam.-2010-05-08.password-policy/max-password-age :portkey.aws.iam.-2010-05-08.password-policy/password-reuse-prevention]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-with-entities-request/job-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/job-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-with-entities-request/service-namespace (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/service-namespace-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-with-entities-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-with-entities-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-service-last-accessed-details-with-entities-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-with-entities-request/job-id :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-with-entities-request/service-namespace] :opt-un [:portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-with-entities-request/max-items :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-with-entities-request/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-context-keys-for-principal-policy-request/policy-source-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-context-keys-for-principal-policy-request/policy-input-list (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/simulation-policy-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-context-keys-for-principal-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-context-keys-for-principal-policy-request/policy-source-arn] :opt-un [:portkey.aws.iam.-2010-05-08.get-context-keys-for-principal-policy-request/policy-input-list]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/summary-map-type (clojure.spec.alpha/map-of :portkey.aws.iam.-2010-05-08/summary-key-type :portkey.aws.iam.-2010-05-08/summary-value-type))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.reset-service-specific-credential-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.reset-service-specific-credential-request/service-specific-credential-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/service-specific-credential-id))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/reset-service-specific-credential-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.reset-service-specific-credential-request/service-specific-credential-id] :opt-un [:portkey.aws.iam.-2010-05-08.reset-service-specific-credential-request/user-name]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-group-policy-request/group-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/group-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-group-policy-request/policy-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-group-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.delete-group-policy-request/group-name :portkey.aws.iam.-2010-05-08.delete-group-policy-request/policy-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-saml-provider-response/saml-provider-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/update-saml-provider-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.update-saml-provider-response/saml-provider-arn]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-policy-granting-service-access-response-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/list-policies-granting-service-access-entry))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/virtual-mfa-device-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\w+=,.@-]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/service-namespace-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/service-namespace-type :min-count 1 :max-count 200))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/services-last-accessed (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/service-last-accessed))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/no-such-entity-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-service-specific-credential-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08/service-specific-credential]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-attached-group-policies-request/group-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/group-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-attached-group-policies-request/path-prefix (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-attached-group-policies-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-attached-group-policies-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-attached-group-policies-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-attached-group-policies-request/group-name] :opt-un [:portkey.aws.iam.-2010-05-08.list-attached-group-policies-request/path-prefix :portkey.aws.iam.-2010-05-08.list-attached-group-policies-request/marker :portkey.aws.iam.-2010-05-08.list-attached-group-policies-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.no-such-entity-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/no-such-entity-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/no-such-entity-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.no-such-entity-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.context-entry/context-key-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/context-key-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.context-entry/context-key-values (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/context-key-value-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.context-entry/context-key-type (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/context-key-type-enum))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/context-entry (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.context-entry/context-key-name :portkey.aws.iam.-2010-05-08.context-entry/context-key-values :portkey.aws.iam.-2010-05-08.context-entry/context-key-type]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.remove-user-from-group-request/group-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/group-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.remove-user-from-group-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/remove-user-from-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.remove-user-from-group-request/group-name :portkey.aws.iam.-2010-05-08.remove-user-from-group-request/user-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/user-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/user))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-group-policy-response/group-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/group-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-group-policy-response/policy-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-group-policy-response/policy-document (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-document-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-group-policy-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-group-policy-response/group-name :portkey.aws.iam.-2010-05-08.get-group-policy-response/policy-name :portkey.aws.iam.-2010-05-08.get-group-policy-response/policy-document] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.credential-report-not-present-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/credential-report-not-present-exception-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/credential-report-not-present-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.credential-report-not-present-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/tag-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/tag :max-count 50))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/permissions-boundary-attachment-type #{"PermissionsBoundaryPolicy" :permissions-boundary-policy})

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/thumbprint-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 40 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 40))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/summary-key-type #{"AccountMFAEnabled" "VersionsPerPolicyQuota" :account-access-keys-present :user-policy-size-quota :policy-size-quota "PolicySizeQuota" :attached-policies-per-role-quota :policies-quota :mfa-devices-in-use :policies :access-keys-per-user-quota "ServerCertificates" "AccessKeysPerUserQuota" :versions-per-policy-quota "GroupsQuota" :server-certificates :groups-quota "AttachedPoliciesPerRoleQuota" :group-policy-size-quota "SigningCertificatesPerUserQuota" "GroupPolicySizeQuota" "PolicyVersionsInUse" :mfa-devices "UserPolicySizeQuota" :signing-certificates-per-user-quota "MFADevicesInUse" "Users" "Groups" :groups-per-user-quota "AccountSigningCertificatesPresent" "Policies" "AttachedPoliciesPerGroupQuota" "UsersQuota" "PoliciesQuota" "ServerCertificatesQuota" :policy-versions-in-use-quota "AccountAccessKeysPresent" :users-quota :groups :attached-policies-per-user-quota "GroupsPerUserQuota" :attached-policies-per-group-quota :server-certificates-quota :account-mfa-enabled :policy-versions-in-use "MFADevices" :account-signing-certificates-present :users "AttachedPoliciesPerUserQuota" "PolicyVersionsInUseQuota"})

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/instance-profile-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/instance-profile))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.remove-role-from-instance-profile-request/instance-profile-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/instance-profile-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.remove-role-from-instance-profile-request/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/remove-role-from-instance-profile-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.remove-role-from-instance-profile-request/instance-profile-name :portkey.aws.iam.-2010-05-08.remove-role-from-instance-profile-request/role-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-context-keys-for-custom-policy-request/policy-input-list (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/simulation-policy-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-context-keys-for-custom-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-context-keys-for-custom-policy-request/policy-input-list] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-server-certificates-request/path-prefix (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/path-prefix-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-server-certificates-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-server-certificates-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-server-certificates-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.list-server-certificates-request/path-prefix :portkey.aws.iam.-2010-05-08.list-server-certificates-request/marker :portkey.aws.iam.-2010-05-08.list-server-certificates-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/password-policy-violation-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.generate-credential-report-response/state (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/report-state-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.generate-credential-report-response/description (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/report-state-description-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/generate-credential-report-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.generate-credential-report-response/state :portkey.aws.iam.-2010-05-08.generate-credential-report-response/description]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.invalid-certificate-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/invalid-certificate-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/invalid-certificate-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.invalid-certificate-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/malformed-certificate-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/statement-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/statement))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/invalid-certificate-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-saml-provider-response/saml-provider-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-saml-provider-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.create-saml-provider-response/saml-provider-arn]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-context-keys-for-policy-response/context-key-names (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/context-key-names-result-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-context-keys-for-policy-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.get-context-keys-for-policy-response/context-key-names]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-instance-profiles-for-role-response/instance-profiles (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/instance-profile-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-instance-profiles-for-role-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-instance-profiles-for-role-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-instance-profiles-for-role-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-instance-profiles-for-role-response/instance-profiles] :opt-un [:portkey.aws.iam.-2010-05-08.list-instance-profiles-for-role-response/is-truncated :portkey.aws.iam.-2010-05-08.list-instance-profiles-for-role-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-signing-certificates-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-signing-certificates-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-signing-certificates-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-signing-certificates-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.list-signing-certificates-request/user-name :portkey.aws.iam.-2010-05-08.list-signing-certificates-request/marker :portkey.aws.iam.-2010-05-08.list-signing-certificates-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.statement/source-policy-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-identifier-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.statement/source-policy-type (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-source-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.statement/start-position (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/position))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.statement/end-position (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/position))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/statement (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.statement/source-policy-id :portkey.aws.iam.-2010-05-08.statement/source-policy-type :portkey.aws.iam.-2010-05-08.statement/start-position :portkey.aws.iam.-2010-05-08.statement/end-position]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.malformed-certificate-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/malformed-certificate-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/malformed-certificate-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.malformed-certificate-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-attached-role-policies-response/attached-policies (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/attached-policies-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-attached-role-policies-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-attached-role-policies-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-attached-role-policies-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.list-attached-role-policies-response/attached-policies :portkey.aws.iam.-2010-05-08.list-attached-role-policies-response/is-truncated :portkey.aws.iam.-2010-05-08.list-attached-role-policies-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/encoding-type #{:pem :ssh "PEM" "SSH"})

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-user-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/policy-user))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/role-max-session-duration-type (clojure.spec.alpha/int-in 3600 43200))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-service-linked-role-request/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-service-linked-role-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.delete-service-linked-role-request/role-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-conflict-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/delete-conflict-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-conflict-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.delete-conflict-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.put-group-policy-request/group-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/group-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.put-group-policy-request/policy-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.put-group-policy-request/policy-document (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-document-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/put-group-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.put-group-policy-request/group-name :portkey.aws.iam.-2010-05-08.put-group-policy-request/policy-name :portkey.aws.iam.-2010-05-08.put-group-policy-request/policy-document] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/account-alias-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 3 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 63)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"^[a-z0-9](([a-z0-9]|-(?!-))*[a-z0-9])?$" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.service-failure-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/service-failure-exception-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/service-failure-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.service-failure-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-role-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08/role] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/account-alias-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/account-alias-type))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/access-key-secret-type (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-evaluation-error-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/password-reuse-prevention-type (clojure.spec.alpha/int-in 1 24))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/line-number clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-group-response/users (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-group-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-group-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-group-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08/group :portkey.aws.iam.-2010-05-08.get-group-response/users] :opt-un [:portkey.aws.iam.-2010-05-08.get-group-response/is-truncated :portkey.aws.iam.-2010-05-08.get-group-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.invalid-user-type-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/invalid-user-type-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/invalid-user-type-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.invalid-user-type-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/limit-exceeded-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/limit-exceeded-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.limit-exceeded-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/user-detail-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/user-detail))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-roles-response/roles (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-roles-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-roles-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-roles-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-roles-response/roles] :opt-un [:portkey.aws.iam.-2010-05-08.list-roles-response/is-truncated :portkey.aws.iam.-2010-05-08.list-roles-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/tag-key-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 128)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\p{L}\p{Z}\p{N}_.:/=+\-@]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-saml-providers-request (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-open-id-connect-provider-response/open-id-connect-provider-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-open-id-connect-provider-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.create-open-id-connect-provider-response/open-id-connect-provider-arn]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-groups-response/groups (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/group-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-groups-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-groups-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-groups-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-groups-response/groups] :opt-un [:portkey.aws.iam.-2010-05-08.list-groups-response/is-truncated :portkey.aws.iam.-2010-05-08.list-groups-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.detach-user-policy-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.detach-user-policy-request/policy-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/detach-user-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.detach-user-policy-request/user-name :portkey.aws.iam.-2010-05-08.detach-user-policy-request/policy-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.entity-info/arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.entity-info/name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.entity-info/type (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-owner-entity-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.entity-info/id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.entity-info/path (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/entity-info (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.entity-info/arn :portkey.aws.iam.-2010-05-08.entity-info/name :portkey.aws.iam.-2010-05-08.entity-info/type :portkey.aws.iam.-2010-05-08.entity-info/id] :opt-un [:portkey.aws.iam.-2010-05-08.entity-info/path]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/column-number clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy-evaluation-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-evaluation-error-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-evaluation-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.policy-evaluation-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-service-linked-role-request/aws-service-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/group-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-service-linked-role-request/description (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-description-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-service-linked-role-request/custom-suffix (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/custom-suffix-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-service-linked-role-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.create-service-linked-role-request/aws-service-name] :opt-un [:portkey.aws.iam.-2010-05-08.create-service-linked-role-request/description :portkey.aws.iam.-2010-05-08.create-service-linked-role-request/custom-suffix]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.user/path (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.user/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.user/user-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.user/arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.user/create-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.user/password-last-used (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.user/permissions-boundary (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/attached-permissions-boundary))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.user/tags (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/tag-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/user (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.user/path :portkey.aws.iam.-2010-05-08.user/user-name :portkey.aws.iam.-2010-05-08.user/user-id :portkey.aws.iam.-2010-05-08.user/arn :portkey.aws.iam.-2010-05-08.user/create-date] :opt-un [:portkey.aws.iam.-2010-05-08.user/password-last-used :portkey.aws.iam.-2010-05-08.user/permissions-boundary :portkey.aws.iam.-2010-05-08.user/tags]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-access-key-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-access-key-request/access-key-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/access-key-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-access-key-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.delete-access-key-request/access-key-id] :opt-un [:portkey.aws.iam.-2010-05-08.delete-access-key-request/user-name]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-saml-provider-request/saml-provider-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-saml-provider-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.delete-saml-provider-request/saml-provider-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy-role/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy-role/role-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-role (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.policy-role/role-name :portkey.aws.iam.-2010-05-08.policy-role/role-id]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/attachment-count-type clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/resource-handling-option-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 64))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/ssh-public-key-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/ssh-public-key-metadata))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.service-specific-credential-metadata/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.service-specific-credential-metadata/status (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/status-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.service-specific-credential-metadata/service-user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/service-user-name))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.service-specific-credential-metadata/create-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.service-specific-credential-metadata/service-specific-credential-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/service-specific-credential-id))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.service-specific-credential-metadata/service-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/service-name))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/service-specific-credential-metadata (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.service-specific-credential-metadata/user-name :portkey.aws.iam.-2010-05-08.service-specific-credential-metadata/status :portkey.aws.iam.-2010-05-08.service-specific-credential-metadata/service-user-name :portkey.aws.iam.-2010-05-08.service-specific-credential-metadata/create-date :portkey.aws.iam.-2010-05-08.service-specific-credential-metadata/service-specific-credential-id :portkey.aws.iam.-2010-05-08.service-specific-credential-metadata/service-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.detach-group-policy-request/group-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/group-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.detach-group-policy-request/policy-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/detach-group-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.detach-group-policy-request/group-name :portkey.aws.iam.-2010-05-08.detach-group-policy-request/policy-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-role-description-request/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-role-description-request/description (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-description-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/update-role-description-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.update-role-description-request/role-name :portkey.aws.iam.-2010-05-08.update-role-description-request/description] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.duplicate-certificate-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/duplicate-certificate-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/duplicate-certificate-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.duplicate-certificate-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.upload-ssh-public-key-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.upload-ssh-public-key-request/ssh-public-key-body (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/public-key-material-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/upload-ssh-public-key-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.upload-ssh-public-key-request/user-name :portkey.aws.iam.-2010-05-08.upload-ssh-public-key-request/ssh-public-key-body] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-type #{"MANAGED" :managed "INLINE" :inline})

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-access-key-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-access-key-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.create-access-key-request/user-name]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-version-id-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"v[1-9][0-9]*(\.[A-Za-z0-9-]*)?" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/context-key-value-type (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy-version/document (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-document-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy-version/version-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-version-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy-version/is-default-version (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy-version/create-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.policy-version/document :portkey.aws.iam.-2010-05-08.policy-version/version-id :portkey.aws.iam.-2010-05-08.policy-version/is-default-version :portkey.aws.iam.-2010-05-08.policy-version/create-date]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-role-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/policy-role))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/invalid-input-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/public-key-fingerprint-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 48 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 48)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[:\w]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-group-policies-request/group-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/group-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-group-policies-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-group-policies-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-group-policies-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-group-policies-request/group-name] :opt-un [:portkey.aws.iam.-2010-05-08.list-group-policies-request/marker :portkey.aws.iam.-2010-05-08.list-group-policies-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-role-tags-response/tags (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/tag-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-role-tags-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-role-tags-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-role-tags-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-role-tags-response/tags] :opt-un [:portkey.aws.iam.-2010-05-08.list-role-tags-response/is-truncated :portkey.aws.iam.-2010-05-08.list-role-tags-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.entity-already-exists-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/entity-already-exists-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/entity-already-exists-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.entity-already-exists-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-role-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08/role] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/instance-profile-name-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 128)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\w+=,.@-]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/simulation-policy-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/policy-document-type))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.attached-permissions-boundary/permissions-boundary-type (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/permissions-boundary-attachment-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.attached-permissions-boundary/permissions-boundary-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/attached-permissions-boundary (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.attached-permissions-boundary/permissions-boundary-type :portkey.aws.iam.-2010-05-08.attached-permissions-boundary/permissions-boundary-arn]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.add-user-to-group-request/group-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/group-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.add-user-to-group-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/add-user-to-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.add-user-to-group-request/group-name :portkey.aws.iam.-2010-05-08.add-user-to-group-request/user-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/service-specific-credential-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 20 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 128)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\w]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-login-profile-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-login-profile-request/password (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/password-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-login-profile-request/password-reset-required (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-login-profile-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.create-login-profile-request/user-name :portkey.aws.iam.-2010-05-08.create-login-profile-request/password] :opt-un [:portkey.aws.iam.-2010-05-08.create-login-profile-request/password-reset-required]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-access-keys-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-access-keys-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-access-keys-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-access-keys-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.list-access-keys-request/user-name :portkey.aws.iam.-2010-05-08.list-access-keys-request/marker :portkey.aws.iam.-2010-05-08.list-access-keys-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.attach-group-policy-request/group-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/group-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.attach-group-policy-request/policy-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/attach-group-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.attach-group-policy-request/group-name :portkey.aws.iam.-2010-05-08.attach-group-policy-request/policy-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-role-policies-request/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-role-policies-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-role-policies-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-role-policies-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-role-policies-request/role-name] :opt-un [:portkey.aws.iam.-2010-05-08.list-role-policies-request/marker :portkey.aws.iam.-2010-05-08.list-role-policies-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-account-alias-request/account-alias (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/account-alias-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-account-alias-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.create-account-alias-request/account-alias] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.evaluation-result/eval-action-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/action-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.evaluation-result/eval-resource-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/resource-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.evaluation-result/eval-decision (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-evaluation-decision-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.evaluation-result/matched-statements (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/statement-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.evaluation-result/missing-context-values (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/context-key-names-result-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.evaluation-result/eval-decision-details (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/eval-decision-details-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.evaluation-result/resource-specific-results (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/resource-specific-result-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/evaluation-result (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.evaluation-result/eval-action-name :portkey.aws.iam.-2010-05-08.evaluation-result/eval-decision] :opt-un [:portkey.aws.iam.-2010-05-08.evaluation-result/eval-resource-name :portkey.aws.iam.-2010-05-08.evaluation-result/matched-statements :portkey.aws.iam.-2010-05-08.evaluation-result/missing-context-values :portkey.aws.iam.-2010-05-08/organizations-decision-detail :portkey.aws.iam.-2010-05-08.evaluation-result/eval-decision-details :portkey.aws.iam.-2010-05-08.evaluation-result/resource-specific-results]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.attached-policy/policy-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.attached-policy/policy-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/attached-policy (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.attached-policy/policy-name :portkey.aws.iam.-2010-05-08.attached-policy/policy-arn]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-policy-request/policy-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-policy-request/path (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-policy-request/policy-document (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-document-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-policy-request/description (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-description-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.create-policy-request/policy-name :portkey.aws.iam.-2010-05-08.create-policy-request/policy-document] :opt-un [:portkey.aws.iam.-2010-05-08.create-policy-request/path :portkey.aws.iam.-2010-05-08.create-policy-request/description]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/max-password-age-type (clojure.spec.alpha/int-in 1 1095))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/entity-temporarily-unmodifiable-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-scope-type #{:aws "AWS" :all "Local" "All" :local})

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-server-certificate-request/server-certificate-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/server-certificate-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-server-certificate-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.delete-server-certificate-request/server-certificate-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-instance-profile-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08/instance-profile] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-credential-report-response/content (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/report-content-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-credential-report-response/report-format (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/report-format-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-credential-report-response/generated-time (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-credential-report-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.get-credential-report-response/content :portkey.aws.iam.-2010-05-08.get-credential-report-response/report-format :portkey.aws.iam.-2010-05-08.get-credential-report-response/generated-time]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy-user/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy-user/user-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-user (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.policy-user/user-name :portkey.aws.iam.-2010-05-08.policy-user/user-id]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.put-role-policy-request/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.put-role-policy-request/policy-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.put-role-policy-request/policy-document (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-document-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/put-role-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.put-role-policy-request/role-name :portkey.aws.iam.-2010-05-08.put-role-policy-request/policy-name :portkey.aws.iam.-2010-05-08.put-role-policy-request/policy-document] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-entities-for-policy-request/policy-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-entities-for-policy-request/entity-filter (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/entity-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-entities-for-policy-request/path-prefix (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-entities-for-policy-request/policy-usage-filter (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-usage-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-entities-for-policy-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-entities-for-policy-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-entities-for-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-entities-for-policy-request/policy-arn] :opt-un [:portkey.aws.iam.-2010-05-08.list-entities-for-policy-request/entity-filter :portkey.aws.iam.-2010-05-08.list-entities-for-policy-request/path-prefix :portkey.aws.iam.-2010-05-08.list-entities-for-policy-request/policy-usage-filter :portkey.aws.iam.-2010-05-08.list-entities-for-policy-request/marker :portkey.aws.iam.-2010-05-08.list-entities-for-policy-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.access-key-last-used/last-used-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.access-key-last-used/service-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/string-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.access-key-last-used/region (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/string-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/access-key-last-used (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.access-key-last-used/last-used-date :portkey.aws.iam.-2010-05-08.access-key-last-used/service-name :portkey.aws.iam.-2010-05-08.access-key-last-used/region] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.ssh-public-key/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.ssh-public-key/ssh-public-key-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/public-key-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.ssh-public-key/fingerprint (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/public-key-fingerprint-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.ssh-public-key/ssh-public-key-body (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/public-key-material-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.ssh-public-key/status (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/status-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.ssh-public-key/upload-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/ssh-public-key (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.ssh-public-key/user-name :portkey.aws.iam.-2010-05-08.ssh-public-key/ssh-public-key-id :portkey.aws.iam.-2010-05-08.ssh-public-key/fingerprint :portkey.aws.iam.-2010-05-08.ssh-public-key/ssh-public-key-body :portkey.aws.iam.-2010-05-08.ssh-public-key/status] :opt-un [:portkey.aws.iam.-2010-05-08.ssh-public-key/upload-date]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/duplicate-certificate-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-document-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 131072)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\u0009\u000A\u000D\u0020-\u00FF]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.deactivate-mfa-device-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.deactivate-mfa-device-request/serial-number (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/serial-number-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/deactivate-mfa-device-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.deactivate-mfa-device-request/user-name :portkey.aws.iam.-2010-05-08.deactivate-mfa-device-request/serial-number] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-service-linked-role-deletion-status-request/deletion-task-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/deletion-task-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-service-linked-role-deletion-status-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-service-linked-role-deletion-status-request/deletion-task-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.add-role-to-instance-profile-request/instance-profile-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/instance-profile-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.add-role-to-instance-profile-request/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/add-role-to-instance-profile-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.add-role-to-instance-profile-request/instance-profile-name :portkey.aws.iam.-2010-05-08.add-role-to-instance-profile-request/role-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-service-linked-role-deletion-status-response/status (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/deletion-task-status-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-service-linked-role-deletion-status-response/reason (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/deletion-task-failure-reason-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-service-linked-role-deletion-status-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-service-linked-role-deletion-status-response/status] :opt-un [:portkey.aws.iam.-2010-05-08.get-service-linked-role-deletion-status-response/reason]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/role-detail-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/role-detail))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-user-policy-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-user-policy-request/policy-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-user-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.delete-user-policy-request/user-name :portkey.aws.iam.-2010-05-08.delete-user-policy-request/policy-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/bootstrap-datum clojure.core/bytes?)

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.role/role-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.role/assume-role-policy-document (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-document-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.role/path (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.role/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.role/create-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.role/tags (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/tag-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.role/permissions-boundary (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/attached-permissions-boundary))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.role/description (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-description-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.role/arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.role/max-session-duration (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-max-session-duration-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/role (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.role/path :portkey.aws.iam.-2010-05-08.role/role-name :portkey.aws.iam.-2010-05-08.role/role-id :portkey.aws.iam.-2010-05-08.role/arn :portkey.aws.iam.-2010-05-08.role/create-date] :opt-un [:portkey.aws.iam.-2010-05-08.role/assume-role-policy-document :portkey.aws.iam.-2010-05-08.role/tags :portkey.aws.iam.-2010-05-08.role/permissions-boundary :portkey.aws.iam.-2010-05-08.role/description :portkey.aws.iam.-2010-05-08.role/max-session-duration]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.simulate-custom-policy-request/resource-handling-option (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/resource-handling-option-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.simulate-custom-policy-request/resource-policy (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-document-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.simulate-custom-policy-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.simulate-custom-policy-request/action-names (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/action-name-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.simulate-custom-policy-request/resource-arns (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/resource-name-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.simulate-custom-policy-request/context-entries (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/context-entry-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.simulate-custom-policy-request/policy-input-list (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/simulation-policy-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.simulate-custom-policy-request/resource-owner (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/resource-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.simulate-custom-policy-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.simulate-custom-policy-request/caller-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/resource-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/simulate-custom-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.simulate-custom-policy-request/policy-input-list :portkey.aws.iam.-2010-05-08.simulate-custom-policy-request/action-names] :opt-un [:portkey.aws.iam.-2010-05-08.simulate-custom-policy-request/resource-handling-option :portkey.aws.iam.-2010-05-08.simulate-custom-policy-request/resource-policy :portkey.aws.iam.-2010-05-08.simulate-custom-policy-request/marker :portkey.aws.iam.-2010-05-08.simulate-custom-policy-request/resource-arns :portkey.aws.iam.-2010-05-08.simulate-custom-policy-request/context-entries :portkey.aws.iam.-2010-05-08.simulate-custom-policy-request/resource-owner :portkey.aws.iam.-2010-05-08.simulate-custom-policy-request/max-items :portkey.aws.iam.-2010-05-08.simulate-custom-policy-request/caller-arn]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-access-keys-response/access-key-metadata (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/access-key-metadata-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-access-keys-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-access-keys-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-access-keys-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-access-keys-response/access-key-metadata] :opt-un [:portkey.aws.iam.-2010-05-08.list-access-keys-response/is-truncated :portkey.aws.iam.-2010-05-08.list-access-keys-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-policy-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08/policy-version]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/action-name-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/action-name-type))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-account-alias-request/account-alias (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/account-alias-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-account-alias-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.delete-account-alias-request/account-alias] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/invalid-user-type-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/boolean-type clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.simulate-policy-response/evaluation-results (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/evaluation-results-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.simulate-policy-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.simulate-policy-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/simulate-policy-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.simulate-policy-response/evaluation-results :portkey.aws.iam.-2010-05-08.simulate-policy-response/is-truncated :portkey.aws.iam.-2010-05-08.simulate-policy-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-groups-for-user-response/groups (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/group-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-groups-for-user-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-groups-for-user-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-groups-for-user-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-groups-for-user-response/groups] :opt-un [:portkey.aws.iam.-2010-05-08.list-groups-for-user-response/is-truncated :portkey.aws.iam.-2010-05-08.list-groups-for-user-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.virtual-mfa-device/serial-number (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/serial-number-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.virtual-mfa-device/base-32-string-seed (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/bootstrap-datum))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.virtual-mfa-device/qr-code-png (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/bootstrap-datum))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.virtual-mfa-device/enable-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/virtual-mfa-device (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.virtual-mfa-device/serial-number] :opt-un [:portkey.aws.iam.-2010-05-08.virtual-mfa-device/base-32-string-seed :portkey.aws.iam.-2010-05-08.virtual-mfa-device/qr-code-png :portkey.aws.iam.-2010-05-08/user :portkey.aws.iam.-2010-05-08.virtual-mfa-device/enable-date]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-signing-certificates-response/certificates (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/certificate-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-signing-certificates-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-signing-certificates-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-signing-certificates-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-signing-certificates-response/certificates] :opt-un [:portkey.aws.iam.-2010-05-08.list-signing-certificates-response/is-truncated :portkey.aws.iam.-2010-05-08.list-signing-certificates-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-assume-role-policy-request/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-assume-role-policy-request/policy-document (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-document-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/update-assume-role-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.update-assume-role-policy-request/role-name :portkey.aws.iam.-2010-05-08.update-assume-role-policy-request/policy-document] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-policies-granting-service-access-entry/service-namespace (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/service-namespace-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-policies-granting-service-access-entry/policies (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-granting-service-access-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-policies-granting-service-access-entry (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.list-policies-granting-service-access-entry/service-namespace :portkey.aws.iam.-2010-05-08.list-policies-granting-service-access-entry/policies]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.duplicate-ssh-public-key-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/duplicate-ssh-public-key-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/duplicate-ssh-public-key-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.duplicate-ssh-public-key-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.entity-temporarily-unmodifiable-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/entity-temporarily-unmodifiable-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/entity-temporarily-unmodifiable-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.entity-temporarily-unmodifiable-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.mfa-device/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.mfa-device/serial-number (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/serial-number-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.mfa-device/enable-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/mfa-device (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.mfa-device/user-name :portkey.aws.iam.-2010-05-08.mfa-device/serial-number :portkey.aws.iam.-2010-05-08.mfa-device/enable-date] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.put-role-permissions-boundary-request/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.put-role-permissions-boundary-request/permissions-boundary (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/put-role-permissions-boundary-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.put-role-permissions-boundary-request/role-name :portkey.aws.iam.-2010-05-08.put-role-permissions-boundary-request/permissions-boundary] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.unmodifiable-entity-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/unmodifiable-entity-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/unmodifiable-entity-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.unmodifiable-entity-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-policy-request/policy-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-policy-request/policy-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-virtual-mfa-device-request/path (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-virtual-mfa-device-request/virtual-mfa-device-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/virtual-mfa-device-name))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-virtual-mfa-device-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.create-virtual-mfa-device-request/virtual-mfa-device-name] :opt-un [:portkey.aws.iam.-2010-05-08.create-virtual-mfa-device-request/path]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/resource-name-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/resource-name-type))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/status-type #{:inactive "Active" "Inactive" :active})

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/existing-user-name-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 128)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\w+=,.@-]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/unmodifiable-entity-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/open-id-connect-provider-url-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 255))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-mfa-devices-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-mfa-devices-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-mfa-devices-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-mfa-devices-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.list-mfa-devices-request/user-name :portkey.aws.iam.-2010-05-08.list-mfa-devices-request/marker :portkey.aws.iam.-2010-05-08.list-mfa-devices-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/job-id-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 36 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 36))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-instance-profiles-request/path-prefix (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/path-prefix-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-instance-profiles-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-instance-profiles-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-instance-profiles-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.list-instance-profiles-request/path-prefix :portkey.aws.iam.-2010-05-08.list-instance-profiles-request/marker :portkey.aws.iam.-2010-05-08.list-instance-profiles-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.enable-mfa-device-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.enable-mfa-device-request/serial-number (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/serial-number-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.enable-mfa-device-request/authentication-code-1 (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/authentication-code-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.enable-mfa-device-request/authentication-code-2 (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/authentication-code-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/enable-mfa-device-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.enable-mfa-device-request/user-name :portkey.aws.iam.-2010-05-08.enable-mfa-device-request/serial-number :portkey.aws.iam.-2010-05-08.enable-mfa-device-request/authentication-code-1 :portkey.aws.iam.-2010-05-08.enable-mfa-device-request/authentication-code-2] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.generate-service-last-accessed-details-response/job-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/job-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/generate-service-last-accessed-details-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.generate-service-last-accessed-details-response/job-id]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-user-policies-response/policy-names (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-name-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-user-policies-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-user-policies-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-user-policies-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-user-policies-response/policy-names] :opt-un [:portkey.aws.iam.-2010-05-08.list-user-policies-response/is-truncated :portkey.aws.iam.-2010-05-08.list-user-policies-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/access-key-id-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 16 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 128)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\w]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-signing-certificate-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-signing-certificate-request/certificate-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/certificate-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-signing-certificate-request/status (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/status-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/update-signing-certificate-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.update-signing-certificate-request/certificate-id :portkey.aws.iam.-2010-05-08.update-signing-certificate-request/status] :opt-un [:portkey.aws.iam.-2010-05-08.update-signing-certificate-request/user-name]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-open-id-connect-provider-response/url (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/open-id-connect-provider-url-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-open-id-connect-provider-response/client-id-list (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/client-id-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-open-id-connect-provider-response/thumbprint-list (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/thumbprint-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-open-id-connect-provider-response/create-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-open-id-connect-provider-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.get-open-id-connect-provider-response/url :portkey.aws.iam.-2010-05-08.get-open-id-connect-provider-response/client-id-list :portkey.aws.iam.-2010-05-08.get-open-id-connect-provider-response/thumbprint-list :portkey.aws.iam.-2010-05-08.get-open-id-connect-provider-response/create-date]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/role-usage-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/role-usage-type))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-access-key-last-used-request/access-key-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/access-key-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-access-key-last-used-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-access-key-last-used-request/access-key-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.key-pair-mismatch-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/key-pair-mismatch-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/key-pair-mismatch-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.key-pair-mismatch-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-description-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 1000))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/entity-name-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 128)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\w+=,.@-]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-group-policies-response/policy-names (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-name-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-group-policies-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-group-policies-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-group-policies-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-group-policies-response/policy-names] :opt-un [:portkey.aws.iam.-2010-05-08.list-group-policies-response/is-truncated :portkey.aws.iam.-2010-05-08.list-group-policies-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-server-certificate-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08/server-certificate] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-policy-request/policy-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.delete-policy-request/policy-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.malformed-policy-document-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/malformed-policy-document-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/malformed-policy-document-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.malformed-policy-document-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-service-specific-credential-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-service-specific-credential-request/service-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/service-name))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-service-specific-credential-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.create-service-specific-credential-request/user-name :portkey.aws.iam.-2010-05-08.create-service-specific-credential-request/service-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-policy-version-request/policy-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-policy-version-request/version-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-version-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-policy-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.delete-policy-version-request/policy-arn :portkey.aws.iam.-2010-05-08.delete-policy-version-request/version-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.invalid-input-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/invalid-input-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/invalid-input-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.invalid-input-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-group-request/group-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/group-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.delete-group-request/group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/credential-report-not-present-exception-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/service-name (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-policy-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08/policy]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/context-key-value-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/context-key-value-type))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-policy-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08/policy]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-attached-group-policies-response/attached-policies (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/attached-policies-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-attached-group-policies-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-attached-group-policies-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-attached-group-policies-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.list-attached-group-policies-response/attached-policies :portkey.aws.iam.-2010-05-08.list-attached-group-policies-response/is-truncated :portkey.aws.iam.-2010-05-08.list-attached-group-policies-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/resource-name-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 2048))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-ssh-public-keys-response/ssh-public-keys (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/ssh-public-key-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-ssh-public-keys-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-ssh-public-keys-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-ssh-public-keys-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.list-ssh-public-keys-response/ssh-public-keys :portkey.aws.iam.-2010-05-08.list-ssh-public-keys-response/is-truncated :portkey.aws.iam.-2010-05-08.list-ssh-public-keys-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/boolean-object-type clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-role-permissions-boundary-request/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-role-permissions-boundary-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.delete-role-permissions-boundary-request/role-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/deletion-task-id-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 1000))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.user-detail/path (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.user-detail/create-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.user-detail/group-list (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/group-name-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.user-detail/user-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.user-detail/tags (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/tag-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.user-detail/permissions-boundary (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/attached-permissions-boundary))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.user-detail/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.user-detail/arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.user-detail/user-policy-list (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-detail-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.user-detail/attached-managed-policies (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/attached-policies-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/user-detail (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.user-detail/path :portkey.aws.iam.-2010-05-08.user-detail/create-date :portkey.aws.iam.-2010-05-08.user-detail/group-list :portkey.aws.iam.-2010-05-08.user-detail/user-id :portkey.aws.iam.-2010-05-08.user-detail/tags :portkey.aws.iam.-2010-05-08.user-detail/permissions-boundary :portkey.aws.iam.-2010-05-08.user-detail/user-name :portkey.aws.iam.-2010-05-08.user-detail/arn :portkey.aws.iam.-2010-05-08.user-detail/user-policy-list :portkey.aws.iam.-2010-05-08.user-detail/attached-managed-policies]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/upload-ssh-public-key-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08/ssh-public-key]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-virtual-mfa-device-request/serial-number (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/serial-number-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-virtual-mfa-device-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.delete-virtual-mfa-device-request/serial-number] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/managed-policy-detail-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/managed-policy-detail))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/saml-metadata-document-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1000 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 10000000))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-policy-versions-request/policy-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-policy-versions-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-policy-versions-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-policy-versions-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-policy-versions-request/policy-arn] :opt-un [:portkey.aws.iam.-2010-05-08.list-policy-versions-request/marker :portkey.aws.iam.-2010-05-08.list-policy-versions-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-policy-version-request/policy-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-policy-version-request/version-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-version-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-policy-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-policy-version-request/policy-arn :portkey.aws.iam.-2010-05-08.get-policy-version-request/version-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-user-tags-response/tags (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/tag-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-user-tags-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-user-tags-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-user-tags-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-user-tags-response/tags] :opt-un [:portkey.aws.iam.-2010-05-08.list-user-tags-response/is-truncated :portkey.aws.iam.-2010-05-08.list-user-tags-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-name-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 128)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\w+=,.@-]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-request/job-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/job-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-service-last-accessed-details-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-request/job-id] :opt-un [:portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-request/max-items :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-request/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.detach-role-policy-request/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.detach-role-policy-request/policy-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/detach-role-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.detach-role-policy-request/role-name :portkey.aws.iam.-2010-05-08.detach-role-policy-request/policy-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/reason-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 1000))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.position/line (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/line-number))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.position/column (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/column-number))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/position (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.position/line :portkey.aws.iam.-2010-05-08.position/column]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-conflict-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/authentication-code-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 6 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 6)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\d]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/max-items-type (clojure.spec.alpha/int-in 1 1000))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-saml-provider-request/saml-provider-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-saml-provider-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-saml-provider-request/saml-provider-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/context-key-type-enum #{"boolean" :binary :date-list :numeric-list "numeric" :date "booleanList" :boolean-list "string" :ip "binaryList" :numeric "ipList" "binary" :string-list :string "numericList" "ip" :ip-list "dateList" "date" "stringList" :binary-list :boolean})

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-account-aliases-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-account-aliases-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-account-aliases-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.list-account-aliases-request/marker :portkey.aws.iam.-2010-05-08.list-account-aliases-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-name-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/policy-name-type))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-user-tags-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-user-tags-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-user-tags-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-user-tags-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-user-tags-request/user-name] :opt-un [:portkey.aws.iam.-2010-05-08.list-user-tags-request/marker :portkey.aws.iam.-2010-05-08.list-user-tags-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-account-authorization-details-request/filter (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/entity-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-account-authorization-details-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-account-authorization-details-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-account-authorization-details-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.get-account-authorization-details-request/filter :portkey.aws.iam.-2010-05-08.get-account-authorization-details-request/max-items :portkey.aws.iam.-2010-05-08.get-account-authorization-details-request/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/evaluation-results-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/evaluation-result))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/assignment-status-type #{:assigned "Any" "Unassigned" :unassigned "Assigned" :any})

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-ssh-public-keys-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-ssh-public-keys-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-ssh-public-keys-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-ssh-public-keys-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.list-ssh-public-keys-request/user-name :portkey.aws.iam.-2010-05-08.list-ssh-public-keys-request/marker :portkey.aws.iam.-2010-05-08.list-ssh-public-keys-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/certificate-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/signing-certificate))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/client-id-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/client-id-type))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.service-not-supported-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/service-not-supported-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/service-not-supported-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.service-not-supported-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/certificate-body-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 16384)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\u0009\u000A\u000D\u0020-\u00FF]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/upload-server-certificate-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08/server-certificate-metadata]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-response/job-status (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/job-status-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-response/job-creation-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-response/job-completion-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-response/error (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/error-details))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-service-last-accessed-details-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-response/job-status :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-response/job-creation-date :portkey.aws.iam.-2010-05-08/services-last-accessed :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-response/job-completion-date] :opt-un [:portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-response/is-truncated :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-response/marker :portkey.aws.iam.-2010-05-08.get-service-last-accessed-details-response/error]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy-granting-service-access/policy-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy-granting-service-access/policy-type (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy-granting-service-access/policy-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy-granting-service-access/entity-type (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-owner-entity-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy-granting-service-access/entity-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/entity-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-granting-service-access (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.policy-granting-service-access/policy-name :portkey.aws.iam.-2010-05-08.policy-granting-service-access/policy-type] :opt-un [:portkey.aws.iam.-2010-05-08.policy-granting-service-access/policy-arn :portkey.aws.iam.-2010-05-08.policy-granting-service-access/entity-type :portkey.aws.iam.-2010-05-08.policy-granting-service-access/entity-name]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/credential-report-not-ready-exception-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/service-name-type (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-login-profile-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-login-profile-request/password (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/password-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-login-profile-request/password-reset-required (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-object-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/update-login-profile-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.update-login-profile-request/user-name] :opt-un [:portkey.aws.iam.-2010-05-08.update-login-profile-request/password :portkey.aws.iam.-2010-05-08.update-login-profile-request/password-reset-required]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.managed-policy-detail/permissions-boundary-usage-count (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/attachment-count-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.managed-policy-detail/policy-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.managed-policy-detail/path (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.managed-policy-detail/create-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.managed-policy-detail/attachment-count (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/attachment-count-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.managed-policy-detail/is-attachable (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.managed-policy-detail/default-version-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-version-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.managed-policy-detail/policy-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.managed-policy-detail/description (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-description-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.managed-policy-detail/update-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.managed-policy-detail/arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.managed-policy-detail/policy-version-list (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-document-version-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/managed-policy-detail (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.managed-policy-detail/permissions-boundary-usage-count :portkey.aws.iam.-2010-05-08.managed-policy-detail/policy-name :portkey.aws.iam.-2010-05-08.managed-policy-detail/path :portkey.aws.iam.-2010-05-08.managed-policy-detail/create-date :portkey.aws.iam.-2010-05-08.managed-policy-detail/attachment-count :portkey.aws.iam.-2010-05-08.managed-policy-detail/is-attachable :portkey.aws.iam.-2010-05-08.managed-policy-detail/default-version-id :portkey.aws.iam.-2010-05-08.managed-policy-detail/policy-id :portkey.aws.iam.-2010-05-08.managed-policy-detail/description :portkey.aws.iam.-2010-05-08.managed-policy-detail/update-date :portkey.aws.iam.-2010-05-08.managed-policy-detail/arn :portkey.aws.iam.-2010-05-08.managed-policy-detail/policy-version-list]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-open-id-connect-providers-response/open-id-connect-provider-list (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/open-id-connect-provider-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-open-id-connect-providers-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.list-open-id-connect-providers-response/open-id-connect-provider-list]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-policies-request/scope (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-scope-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-policies-request/only-attached (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-policies-request/path-prefix (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-policies-request/policy-usage-filter (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-usage-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-policies-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-policies-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-policies-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.list-policies-request/scope :portkey.aws.iam.-2010-05-08.list-policies-request/only-attached :portkey.aws.iam.-2010-05-08.list-policies-request/path-prefix :portkey.aws.iam.-2010-05-08.list-policies-request/policy-usage-filter :portkey.aws.iam.-2010-05-08.list-policies-request/marker :portkey.aws.iam.-2010-05-08.list-policies-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/eval-decision-details-type (clojure.spec.alpha/map-of :portkey.aws.iam.-2010-05-08/eval-decision-source-type :portkey.aws.iam.-2010-05-08/policy-evaluation-decision-type))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.access-key-metadata/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.access-key-metadata/access-key-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/access-key-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.access-key-metadata/status (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/status-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.access-key-metadata/create-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/access-key-metadata (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.access-key-metadata/user-name :portkey.aws.iam.-2010-05-08.access-key-metadata/access-key-id :portkey.aws.iam.-2010-05-08.access-key-metadata/status :portkey.aws.iam.-2010-05-08.access-key-metadata/create-date]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-not-attachable-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/certificate-chain-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 2097152)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\u0009\u000A\u000D\u0020-\u00FF]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-group-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/policy-group))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/update-role-description-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08/role]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.change-password-request/old-password (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/password-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.change-password-request/new-password (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/password-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/change-password-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.change-password-request/old-password :portkey.aws.iam.-2010-05-08.change-password-request/new-password] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-account-aliases-response/account-aliases (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/account-alias-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-account-aliases-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-account-aliases-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-account-aliases-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-account-aliases-response/account-aliases] :opt-un [:portkey.aws.iam.-2010-05-08.list-account-aliases-response/is-truncated :portkey.aws.iam.-2010-05-08.list-account-aliases-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/certificate-id-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 24 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 128)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\w]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-instance-profile-request/instance-profile-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/instance-profile-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-instance-profile-request/path (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-instance-profile-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.create-instance-profile-request/instance-profile-name] :opt-un [:portkey.aws.iam.-2010-05-08.create-instance-profile-request/path]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-saml-providers-response/saml-provider-list (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/saml-provider-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-saml-providers-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.list-saml-providers-response/saml-provider-list]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-open-id-connect-provider-request/url (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/open-id-connect-provider-url-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-open-id-connect-provider-request/client-id-list (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/client-id-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-open-id-connect-provider-request/thumbprint-list (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/thumbprint-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-open-id-connect-provider-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.create-open-id-connect-provider-request/url :portkey.aws.iam.-2010-05-08.create-open-id-connect-provider-request/thumbprint-list] :opt-un [:portkey.aws.iam.-2010-05-08.create-open-id-connect-provider-request/client-id-list]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/context-key-names-result-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/context-key-name-type))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.resync-mfa-device-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.resync-mfa-device-request/serial-number (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/serial-number-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.resync-mfa-device-request/authentication-code-1 (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/authentication-code-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.resync-mfa-device-request/authentication-code-2 (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/authentication-code-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/resync-mfa-device-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.resync-mfa-device-request/user-name :portkey.aws.iam.-2010-05-08.resync-mfa-device-request/serial-number :portkey.aws.iam.-2010-05-08.resync-mfa-device-request/authentication-code-1 :portkey.aws.iam.-2010-05-08.resync-mfa-device-request/authentication-code-2] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/thumbprint-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/thumbprint-type))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-instance-profile-request/instance-profile-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/instance-profile-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-instance-profile-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.delete-instance-profile-request/instance-profile-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/arn-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 20 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 2048))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/context-key-name-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 5 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 256))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-groups-request/path-prefix (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/path-prefix-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-groups-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-groups-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-groups-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.list-groups-request/path-prefix :portkey.aws.iam.-2010-05-08.list-groups-request/marker :portkey.aws.iam.-2010-05-08.list-groups-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-user-request/path (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-user-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-user-request/permissions-boundary (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-user-request/tags (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/tag-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-user-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.create-user-request/user-name] :opt-un [:portkey.aws.iam.-2010-05-08.create-user-request/path :portkey.aws.iam.-2010-05-08.create-user-request/permissions-boundary :portkey.aws.iam.-2010-05-08.create-user-request/tags]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/service-not-supported-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.untag-role-request/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.untag-role-request/tag-keys (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/tag-key-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/untag-role-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.untag-role-request/role-name :portkey.aws.iam.-2010-05-08.untag-role-request/tag-keys] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy-group/group-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/group-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy-group/group-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.policy-group/group-name :portkey.aws.iam.-2010-05-08.policy-group/group-id]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-groups-for-user-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-groups-for-user-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-groups-for-user-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-groups-for-user-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-groups-for-user-request/user-name] :opt-un [:portkey.aws.iam.-2010-05-08.list-groups-for-user-request/marker :portkey.aws.iam.-2010-05-08.list-groups-for-user-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/invalid-public-key-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.remove-client-id-from-open-id-connect-provider-request/open-id-connect-provider-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.remove-client-id-from-open-id-connect-provider-request/client-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/client-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/remove-client-id-from-open-id-connect-provider-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.remove-client-id-from-open-id-connect-provider-request/open-id-connect-provider-arn :portkey.aws.iam.-2010-05-08.remove-client-id-from-open-id-connect-provider-request/client-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/region-name-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 100))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-account-password-policy-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08/password-policy] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-group-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08/group] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-instance-profiles-for-role-request/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-instance-profiles-for-role-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-instance-profiles-for-role-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-instance-profiles-for-role-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-instance-profiles-for-role-request/role-name] :opt-un [:portkey.aws.iam.-2010-05-08.list-instance-profiles-for-role-request/marker :portkey.aws.iam.-2010-05-08.list-instance-profiles-for-role-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-user-policy-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-user-policy-request/policy-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-user-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-user-policy-request/user-name :portkey.aws.iam.-2010-05-08.get-user-policy-request/policy-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.error-details/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/string-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.error-details/code (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/string-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/error-details (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.error-details/message :portkey.aws.iam.-2010-05-08.error-details/code] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-role-tags-request/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-role-tags-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-role-tags-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-role-tags-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-role-tags-request/role-name] :opt-un [:portkey.aws.iam.-2010-05-08.list-role-tags-request/marker :portkey.aws.iam.-2010-05-08.list-role-tags-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/malformed-policy-document-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.signing-certificate/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.signing-certificate/certificate-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/certificate-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.signing-certificate/certificate-body (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/certificate-body-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.signing-certificate/status (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/status-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.signing-certificate/upload-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/signing-certificate (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.signing-certificate/user-name :portkey.aws.iam.-2010-05-08.signing-certificate/certificate-id :portkey.aws.iam.-2010-05-08.signing-certificate/certificate-body :portkey.aws.iam.-2010-05-08.signing-certificate/status] :opt-un [:portkey.aws.iam.-2010-05-08.signing-certificate/upload-date]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.put-user-policy-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.put-user-policy-request/policy-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.put-user-policy-request/policy-document (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-document-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/put-user-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.put-user-policy-request/user-name :portkey.aws.iam.-2010-05-08.put-user-policy-request/policy-name :portkey.aws.iam.-2010-05-08.put-user-policy-request/policy-document] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/report-state-description-type (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.upload-signing-certificate-response/certificate (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/signing-certificate))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/upload-signing-certificate-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.upload-signing-certificate-response/certificate] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-group-request/path (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-group-request/group-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/group-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.create-group-request/group-name] :opt-un [:portkey.aws.iam.-2010-05-08.create-group-request/path]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/private-key-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 16384)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\u0009\u000A\u000D\u0020-\u00FF]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/report-format-type #{:textcsv "text/csv"})

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-role-policies-response/policy-names (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-name-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-role-policies-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-role-policies-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-role-policies-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-role-policies-response/policy-names] :opt-un [:portkey.aws.iam.-2010-05-08.list-role-policies-response/is-truncated :portkey.aws.iam.-2010-05-08.list-role-policies-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-instance-profile-request/instance-profile-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/instance-profile-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-instance-profile-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-instance-profile-request/instance-profile-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/integer-type clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.role-detail/role-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.role-detail/instance-profile-list (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/instance-profile-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.role-detail/assume-role-policy-document (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-document-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.role-detail/path (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.role-detail/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.role-detail/create-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.role-detail/role-policy-list (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-detail-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.role-detail/tags (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/tag-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.role-detail/permissions-boundary (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/attached-permissions-boundary))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.role-detail/arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.role-detail/attached-managed-policies (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/attached-policies-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/role-detail (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.role-detail/role-id :portkey.aws.iam.-2010-05-08.role-detail/instance-profile-list :portkey.aws.iam.-2010-05-08.role-detail/assume-role-policy-document :portkey.aws.iam.-2010-05-08.role-detail/path :portkey.aws.iam.-2010-05-08.role-detail/role-name :portkey.aws.iam.-2010-05-08.role-detail/create-date :portkey.aws.iam.-2010-05-08.role-detail/role-policy-list :portkey.aws.iam.-2010-05-08.role-detail/tags :portkey.aws.iam.-2010-05-08.role-detail/permissions-boundary :portkey.aws.iam.-2010-05-08.role-detail/arn :portkey.aws.iam.-2010-05-08.role-detail/attached-managed-policies]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/reset-service-specific-credential-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08/service-specific-credential]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/service-specific-credentials-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/service-specific-credential-metadata))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/server-certificate-name-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 128)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\w+=,.@-]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.attach-role-policy-request/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.attach-role-policy-request/policy-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/attach-role-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.attach-role-policy-request/role-name :portkey.aws.iam.-2010-05-08.attach-role-policy-request/policy-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/serial-number-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 9 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 256)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\w+=/:,.@-]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/role-description-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 1000)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\p{L}\p{M}\p{Z}\p{S}\p{N}\p{P}]*" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.generate-service-last-accessed-details-request/arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/generate-service-last-accessed-details-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.generate-service-last-accessed-details-request/arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-detail-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/policy-detail))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-service-specific-credentials-response/service-specific-credentials (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/service-specific-credentials-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-service-specific-credentials-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.list-service-specific-credentials-response/service-specific-credentials]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-user-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-user-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.delete-user-request/user-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy/permissions-boundary-usage-count (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/attachment-count-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy/policy-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy/path (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy/create-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy/attachment-count (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/attachment-count-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy/is-attachable (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy/default-version-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-version-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy/policy-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy/description (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-description-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy/update-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy/arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.policy/permissions-boundary-usage-count :portkey.aws.iam.-2010-05-08.policy/policy-name :portkey.aws.iam.-2010-05-08.policy/path :portkey.aws.iam.-2010-05-08.policy/create-date :portkey.aws.iam.-2010-05-08.policy/attachment-count :portkey.aws.iam.-2010-05-08.policy/is-attachable :portkey.aws.iam.-2010-05-08.policy/default-version-id :portkey.aws.iam.-2010-05-08.policy/policy-id :portkey.aws.iam.-2010-05-08.policy/description :portkey.aws.iam.-2010-05-08.policy/update-date :portkey.aws.iam.-2010-05-08.policy/arn]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-service-specific-credentials-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-service-specific-credentials-request/service-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/service-name))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-service-specific-credentials-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.list-service-specific-credentials-request/user-name :portkey.aws.iam.-2010-05-08.list-service-specific-credentials-request/service-name]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.add-client-id-to-open-id-connect-provider-request/open-id-connect-provider-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.add-client-id-to-open-id-connect-provider-request/client-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/client-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/add-client-id-to-open-id-connect-provider-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.add-client-id-to-open-id-connect-provider-request/open-id-connect-provider-arn :portkey.aws.iam.-2010-05-08.add-client-id-to-open-id-connect-provider-request/client-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.organizations-decision-detail/allowed-by-organizations (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/organizations-decision-detail (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.organizations-decision-detail/allowed-by-organizations]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.upload-server-certificate-request/path (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.upload-server-certificate-request/server-certificate-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/server-certificate-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.upload-server-certificate-request/certificate-body (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/certificate-body-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.upload-server-certificate-request/private-key (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/private-key-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.upload-server-certificate-request/certificate-chain (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/certificate-chain-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/upload-server-certificate-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.upload-server-certificate-request/server-certificate-name :portkey.aws.iam.-2010-05-08.upload-server-certificate-request/certificate-body :portkey.aws.iam.-2010-05-08.upload-server-certificate-request/private-key] :opt-un [:portkey.aws.iam.-2010-05-08.upload-server-certificate-request/path :portkey.aws.iam.-2010-05-08.upload-server-certificate-request/certificate-chain]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.tag/key (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/tag-key-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.tag/value (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/tag-value-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/tag (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.tag/key :portkey.aws.iam.-2010-05-08.tag/value] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-access-key-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08/access-key] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/access-key-metadata-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/access-key-metadata))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-group-policy-request/group-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/group-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-group-policy-request/policy-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-group-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-group-policy-request/group-name :portkey.aws.iam.-2010-05-08.get-group-policy-request/policy-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-granting-service-access-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/policy-granting-service-access))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-login-profile-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08/login-profile] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/password-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 128)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\u0009\u000A\u000D\u0020-\u00FF]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-attached-role-policies-request/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-attached-role-policies-request/path-prefix (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-attached-role-policies-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-attached-role-policies-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-attached-role-policies-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-attached-role-policies-request/role-name] :opt-un [:portkey.aws.iam.-2010-05-08.list-attached-role-policies-request/path-prefix :portkey.aws.iam.-2010-05-08.list-attached-role-policies-request/marker :portkey.aws.iam.-2010-05-08.list-attached-role-policies-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/arn-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/arn-type))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-group-request/group-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/group-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-group-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-group-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-group-request/group-name] :opt-un [:portkey.aws.iam.-2010-05-08.get-group-request/marker :portkey.aws.iam.-2010-05-08.get-group-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/duplicate-ssh-public-key-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-instance-profiles-response/instance-profiles (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/instance-profile-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-instance-profiles-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-instance-profiles-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-instance-profiles-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-instance-profiles-response/instance-profiles] :opt-un [:portkey.aws.iam.-2010-05-08.list-instance-profiles-response/is-truncated :portkey.aws.iam.-2010-05-08.list-instance-profiles-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/service-user-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 17 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 200)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\w+=,.@-]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-entities-for-policy-response/policy-groups (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-group-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-entities-for-policy-response/policy-users (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-user-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-entities-for-policy-response/policy-roles (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-role-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-entities-for-policy-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-entities-for-policy-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-entities-for-policy-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.list-entities-for-policy-response/policy-groups :portkey.aws.iam.-2010-05-08.list-entities-for-policy-response/policy-users :portkey.aws.iam.-2010-05-08.list-entities-for-policy-response/policy-roles :portkey.aws.iam.-2010-05-08.list-entities-for-policy-response/is-truncated :portkey.aws.iam.-2010-05-08.list-entities-for-policy-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/mfa-device-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/mfa-device))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/minimum-password-length-type (clojure.spec.alpha/int-in 6 128))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-service-specific-credential-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-service-specific-credential-request/service-specific-credential-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/service-specific-credential-id))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-service-specific-credential-request/status (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/status-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/update-service-specific-credential-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.update-service-specific-credential-request/service-specific-credential-id :portkey.aws.iam.-2010-05-08.update-service-specific-credential-request/status] :opt-un [:portkey.aws.iam.-2010-05-08.update-service-specific-credential-request/user-name]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-path-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"((/[A-Za-z0-9\.,\+@=_-]+)*)/" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.untag-user-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.untag-user-request/tag-keys (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/tag-key-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/untag-user-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.untag-user-request/user-name :portkey.aws.iam.-2010-05-08.untag-user-request/tag-keys] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/entity-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/entity-type))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy-detail/policy-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.policy-detail/policy-document (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-document-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-detail (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.policy-detail/policy-name :portkey.aws.iam.-2010-05-08.policy-detail/policy-document]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-open-id-connect-provider-thumbprint-request/open-id-connect-provider-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-open-id-connect-provider-thumbprint-request/thumbprint-list (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/thumbprint-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/update-open-id-connect-provider-thumbprint-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.update-open-id-connect-provider-thumbprint-request/open-id-connect-provider-arn :portkey.aws.iam.-2010-05-08.update-open-id-connect-provider-thumbprint-request/thumbprint-list] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-virtual-mfa-device-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08/virtual-mfa-device] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-policies-response/policies (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-policies-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-policies-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-policies-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.list-policies-response/policies :portkey.aws.iam.-2010-05-08.list-policies-response/is-truncated :portkey.aws.iam.-2010-05-08.list-policies-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.password-policy-violation-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/password-policy-violation-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/password-policy-violation-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.password-policy-violation-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/tag-value-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 0 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 256)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\p{L}\p{Z}\p{N}_.:/=+\-@]*" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.concurrent-modification-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/concurrent-modification-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/concurrent-modification-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.concurrent-modification-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.open-id-connect-provider-list-entry/arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/open-id-connect-provider-list-entry (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.open-id-connect-provider-list-entry/arn]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/summary-value-type clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-role-request/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-role-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.delete-role-request/role-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-ssh-public-key-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-ssh-public-key-request/ssh-public-key-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/public-key-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-ssh-public-key-request/encoding (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/encoding-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-ssh-public-key-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-ssh-public-key-request/user-name :portkey.aws.iam.-2010-05-08.get-ssh-public-key-request/ssh-public-key-id :portkey.aws.iam.-2010-05-08.get-ssh-public-key-request/encoding] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.tag-role-request/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.tag-role-request/tags (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/tag-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/tag-role-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.tag-role-request/role-name :portkey.aws.iam.-2010-05-08.tag-role-request/tags] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.simulate-principal-policy-request/resource-handling-option (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/resource-handling-option-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.simulate-principal-policy-request/policy-source-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.simulate-principal-policy-request/resource-policy (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-document-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.simulate-principal-policy-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.simulate-principal-policy-request/action-names (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/action-name-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.simulate-principal-policy-request/resource-arns (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/resource-name-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.simulate-principal-policy-request/context-entries (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/context-entry-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.simulate-principal-policy-request/policy-input-list (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/simulation-policy-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.simulate-principal-policy-request/resource-owner (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/resource-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.simulate-principal-policy-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.simulate-principal-policy-request/caller-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/resource-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/simulate-principal-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.simulate-principal-policy-request/policy-source-arn :portkey.aws.iam.-2010-05-08.simulate-principal-policy-request/action-names] :opt-un [:portkey.aws.iam.-2010-05-08.simulate-principal-policy-request/resource-handling-option :portkey.aws.iam.-2010-05-08.simulate-principal-policy-request/resource-policy :portkey.aws.iam.-2010-05-08.simulate-principal-policy-request/marker :portkey.aws.iam.-2010-05-08.simulate-principal-policy-request/resource-arns :portkey.aws.iam.-2010-05-08.simulate-principal-policy-request/context-entries :portkey.aws.iam.-2010-05-08.simulate-principal-policy-request/policy-input-list :portkey.aws.iam.-2010-05-08.simulate-principal-policy-request/resource-owner :portkey.aws.iam.-2010-05-08.simulate-principal-policy-request/max-items :portkey.aws.iam.-2010-05-08.simulate-principal-policy-request/caller-arn]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-access-key-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-access-key-request/access-key-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/access-key-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-access-key-request/status (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/status-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/update-access-key-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.update-access-key-request/access-key-id :portkey.aws.iam.-2010-05-08.update-access-key-request/status] :opt-un [:portkey.aws.iam.-2010-05-08.update-access-key-request/user-name]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.invalid-authentication-code-exception/message (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/invalid-authentication-code-message))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/invalid-authentication-code-exception (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.invalid-authentication-code-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/role-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/role))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/public-key-id-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 20 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 128)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\w]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.group/path (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.group/group-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/group-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.group/group-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.group/arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.group/create-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/group (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.group/path :portkey.aws.iam.-2010-05-08.group/group-name :portkey.aws.iam.-2010-05-08.group/group-id :portkey.aws.iam.-2010-05-08.group/arn :portkey.aws.iam.-2010-05-08.group/create-date] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/group-detail-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/group-detail))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-saml-provider-response/saml-metadata-document (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/saml-metadata-document-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-saml-provider-response/create-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-saml-provider-response/valid-until (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-saml-provider-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.get-saml-provider-response/saml-metadata-document :portkey.aws.iam.-2010-05-08.get-saml-provider-response/create-date :portkey.aws.iam.-2010-05-08.get-saml-provider-response/valid-until]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.deletion-task-failure-reason-type/reason (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/reason-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.deletion-task-failure-reason-type/role-usage-list (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-usage-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/deletion-task-failure-reason-type (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.deletion-task-failure-reason-type/reason :portkey.aws.iam.-2010-05-08.deletion-task-failure-reason-type/role-usage-list]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.ssh-public-key-metadata/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.ssh-public-key-metadata/ssh-public-key-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/public-key-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.ssh-public-key-metadata/status (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/status-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.ssh-public-key-metadata/upload-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/ssh-public-key-metadata (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.ssh-public-key-metadata/user-name :portkey.aws.iam.-2010-05-08.ssh-public-key-metadata/ssh-public-key-id :portkey.aws.iam.-2010-05-08.ssh-public-key-metadata/status :portkey.aws.iam.-2010-05-08.ssh-public-key-metadata/upload-date] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-ssh-public-key-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-ssh-public-key-request/ssh-public-key-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/public-key-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-ssh-public-key-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.delete-ssh-public-key-request/user-name :portkey.aws.iam.-2010-05-08.delete-ssh-public-key-request/ssh-public-key-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/path-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 512)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"(\u002F)|(\u002F[\u0021-\u007F]+\u002F)" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-user-permissions-boundary-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-user-permissions-boundary-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.delete-user-permissions-boundary-request/user-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-ssh-public-key-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-ssh-public-key-request/ssh-public-key-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/public-key-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-ssh-public-key-request/status (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/status-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/update-ssh-public-key-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.update-ssh-public-key-request/user-name :portkey.aws.iam.-2010-05-08.update-ssh-public-key-request/ssh-public-key-id :portkey.aws.iam.-2010-05-08.update-ssh-public-key-request/status] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-policies-granting-service-access-response/policies-granting-service-access (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-policy-granting-service-access-response-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-policies-granting-service-access-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-policies-granting-service-access-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-policies-granting-service-access-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-policies-granting-service-access-response/policies-granting-service-access] :opt-un [:portkey.aws.iam.-2010-05-08.list-policies-granting-service-access-response/is-truncated :portkey.aws.iam.-2010-05-08.list-policies-granting-service-access-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-open-id-connect-provider-request/open-id-connect-provider-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-open-id-connect-provider-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.delete-open-id-connect-provider-request/open-id-connect-provider-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/group-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/group))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-service-specific-credential-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-service-specific-credential-request/service-specific-credential-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/service-specific-credential-id))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-service-specific-credential-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.delete-service-specific-credential-request/service-specific-credential-id] :opt-un [:portkey.aws.iam.-2010-05-08.delete-service-specific-credential-request/user-name]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-evaluation-decision-type #{"implicitDeny" "allowed" :explicit-deny "explicitDeny" :implicit-deny :allowed})

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/entity-already-exists-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/entity-type #{:role :local-managed-policy :group "LocalManagedPolicy" "User" "Role" "AWSManagedPolicy" "Group" :user :aws-managed-policy})

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/open-id-connect-provider-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/open-id-connect-provider-list-entry))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.service-specific-credential/create-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.service-specific-credential/service-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/service-name))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.service-specific-credential/service-user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/service-user-name))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.service-specific-credential/service-password (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/service-password))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.service-specific-credential/service-specific-credential-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/service-specific-credential-id))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.service-specific-credential/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.service-specific-credential/status (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/status-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/service-specific-credential (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.service-specific-credential/create-date :portkey.aws.iam.-2010-05-08.service-specific-credential/service-name :portkey.aws.iam.-2010-05-08.service-specific-credential/service-user-name :portkey.aws.iam.-2010-05-08.service-specific-credential/service-password :portkey.aws.iam.-2010-05-08.service-specific-credential/service-specific-credential-id :portkey.aws.iam.-2010-05-08.service-specific-credential/user-name :portkey.aws.iam.-2010-05-08.service-specific-credential/status] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-attached-user-policies-response/attached-policies (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/attached-policies-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-attached-user-policies-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-attached-user-policies-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-attached-user-policies-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.list-attached-user-policies-response/attached-policies :portkey.aws.iam.-2010-05-08.list-attached-user-policies-response/is-truncated :portkey.aws.iam.-2010-05-08.list-attached-user-policies-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/limit-exceeded-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-server-certificate-request/server-certificate-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/server-certificate-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-server-certificate-request/new-path (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-server-certificate-request/new-server-certificate-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/server-certificate-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/update-server-certificate-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.update-server-certificate-request/server-certificate-name] :opt-un [:portkey.aws.iam.-2010-05-08.update-server-certificate-request/new-path :portkey.aws.iam.-2010-05-08.update-server-certificate-request/new-server-certificate-name]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/resource-specific-result-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/resource-specific-result))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-role-policy-request/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-role-policy-request/policy-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-role-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.delete-role-policy-request/role-name :portkey.aws.iam.-2010-05-08.delete-role-policy-request/policy-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.upload-signing-certificate-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.upload-signing-certificate-request/certificate-body (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/certificate-body-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/upload-signing-certificate-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.upload-signing-certificate-request/certificate-body] :opt-un [:portkey.aws.iam.-2010-05-08.upload-signing-certificate-request/user-name]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.access-key/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.access-key/access-key-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/access-key-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.access-key/status (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/status-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.access-key/secret-access-key (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/access-key-secret-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.access-key/create-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/access-key (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.access-key/user-name :portkey.aws.iam.-2010-05-08.access-key/access-key-id :portkey.aws.iam.-2010-05-08.access-key/status :portkey.aws.iam.-2010-05-08.access-key/secret-access-key] :opt-un [:portkey.aws.iam.-2010-05-08.access-key/create-date]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-users-response/users (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-users-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-users-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-users-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-users-response/users] :opt-un [:portkey.aws.iam.-2010-05-08.list-users-response/is-truncated :portkey.aws.iam.-2010-05-08.list-users-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/invalid-authentication-code-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-policy-version-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08/policy-version]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/role-name-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__21076__auto__] (clojure.core/<= 1 (clojure.core/count s__21076__auto__))) (clojure.core/fn [s__21077__auto__] (clojure.core/< (clojure.core/count s__21077__auto__) 64)) (clojure.core/fn [s__21078__auto__] (clojure.core/re-matches #"[\w+=,.@-]+" s__21078__auto__))))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.attach-user-policy-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.attach-user-policy-request/policy-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/attach-user-policy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.attach-user-policy-request/user-name :portkey.aws.iam.-2010-05-08.attach-user-policy-request/policy-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-user-policies-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-user-policies-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-user-policies-request/max-items (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/max-items-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-user-policies-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-user-policies-request/user-name] :opt-un [:portkey.aws.iam.-2010-05-08.list-user-policies-request/marker :portkey.aws.iam.-2010-05-08.list-user-policies-request/max-items]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-account-authorization-details-response/user-detail-list (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-detail-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-account-authorization-details-response/group-detail-list (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/group-detail-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-account-authorization-details-response/role-detail-list (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-detail-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-account-authorization-details-response/policies (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/managed-policy-detail-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-account-authorization-details-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-account-authorization-details-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-account-authorization-details-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.get-account-authorization-details-response/user-detail-list :portkey.aws.iam.-2010-05-08.get-account-authorization-details-response/group-detail-list :portkey.aws.iam.-2010-05-08.get-account-authorization-details-response/role-detail-list :portkey.aws.iam.-2010-05-08.get-account-authorization-details-response/policies :portkey.aws.iam.-2010-05-08.get-account-authorization-details-response/is-truncated :portkey.aws.iam.-2010-05-08.get-account-authorization-details-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/concurrent-modification-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-role-request/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-role-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-role-request/role-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-role-request/role-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-role-request/description (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-description-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-role-request/max-session-duration (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/role-max-session-duration-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/update-role-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.update-role-request/role-name] :opt-un [:portkey.aws.iam.-2010-05-08.update-role-request/description :portkey.aws.iam.-2010-05-08.update-role-request/max-session-duration]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.delete-service-linked-role-response/deletion-task-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/deletion-task-id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/delete-service-linked-role-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.delete-service-linked-role-response/deletion-task-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-saml-provider-request/saml-metadata-document (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/saml-metadata-document-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-saml-provider-request/saml-provider-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/update-saml-provider-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.update-saml-provider-request/saml-metadata-document :portkey.aws.iam.-2010-05-08.update-saml-provider-request/saml-provider-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/policy-list-type (clojure.spec.alpha/coll-of :portkey.aws.iam.-2010-05-08/policy))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-virtual-mfa-devices-response/virtual-mfa-devices (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/virtual-mfa-device-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-virtual-mfa-devices-response/is-truncated (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-virtual-mfa-devices-response/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-virtual-mfa-devices-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-virtual-mfa-devices-response/virtual-mfa-devices] :opt-un [:portkey.aws.iam.-2010-05-08.list-virtual-mfa-devices-response/is-truncated :portkey.aws.iam.-2010-05-08.list-virtual-mfa-devices-response/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-group-request/group-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/group-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-group-request/new-path (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.update-group-request/new-group-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/group-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/update-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.update-group-request/group-name] :opt-un [:portkey.aws.iam.-2010-05-08.update-group-request/new-path :portkey.aws.iam.-2010-05-08.update-group-request/new-group-name]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-policy-version-request/policy-arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-policy-version-request/policy-document (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-document-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.create-policy-version-request/set-as-default (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/boolean-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/create-policy-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.create-policy-version-request/policy-arn :portkey.aws.iam.-2010-05-08.create-policy-version-request/policy-document] :opt-un [:portkey.aws.iam.-2010-05-08.create-policy-version-request/set-as-default]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/report-content-type clojure.core/bytes?)

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/service-password (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.put-user-permissions-boundary-request/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.put-user-permissions-boundary-request/permissions-boundary (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/put-user-permissions-boundary-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.put-user-permissions-boundary-request/user-name :portkey.aws.iam.-2010-05-08.put-user-permissions-boundary-request/permissions-boundary] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-user-policy-response/user-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/existing-user-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-user-policy-response/policy-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.get-user-policy-response/policy-document (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-document-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-user-policy-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.get-user-policy-response/user-name :portkey.aws.iam.-2010-05-08.get-user-policy-response/policy-name :portkey.aws.iam.-2010-05-08.get-user-policy-response/policy-document] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/get-user-response (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08/user] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.group-detail/path (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/path-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.group-detail/group-name (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/group-name-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.group-detail/group-id (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/id-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.group-detail/arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.group-detail/create-date (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/date-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.group-detail/group-policy-list (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/policy-detail-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.group-detail/attached-managed-policies (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/attached-policies-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/group-detail (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.iam.-2010-05-08.group-detail/path :portkey.aws.iam.-2010-05-08.group-detail/group-name :portkey.aws.iam.-2010-05-08.group-detail/group-id :portkey.aws.iam.-2010-05-08.group-detail/arn :portkey.aws.iam.-2010-05-08.group-detail/create-date :portkey.aws.iam.-2010-05-08.group-detail/group-policy-list :portkey.aws.iam.-2010-05-08.group-detail/attached-managed-policies]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-policies-granting-service-access-request/marker (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/marker-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-policies-granting-service-access-request/arn (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/arn-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08.list-policies-granting-service-access-request/service-namespaces (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/service-namespace-list-type))
(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/list-policies-granting-service-access-request (clojure.spec.alpha/keys :req-un [:portkey.aws.iam.-2010-05-08.list-policies-granting-service-access-request/arn :portkey.aws.iam.-2010-05-08.list-policies-granting-service-access-request/service-namespaces] :opt-un [:portkey.aws.iam.-2010-05-08.list-policies-granting-service-access-request/marker]))

(clojure.spec.alpha/def :portkey.aws.iam.-2010-05-08/service-failure-exception-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.core/defn list-attached-user-policies "Lists all managed policies that are attached to the specified IAM user.\n An IAM user can also have inline policies embedded with it. To list the inline\npolicies for a user, use the ListUserPolicies API. For information about\npolicies, see Managed Policies and Inline Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide.\n You can paginate the results using the MaxItems and Marker parameters. You can\nuse the PathPrefix parameter to limit the list of policies to only those\nmatching the specified path prefix. If there are no policies attached to the\nspecified group (or none that match the specified path prefix), the operation\nreturns an empty list." ([list-attached-user-policies-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-attached-user-policies-request list-attached-user-policies-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-attached-user-policies-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-attached-user-policies-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListAttachedUserPoliciesResult", :http.request.configuration/action "ListAttachedUserPolicies", :http.request.configuration/output-deser-fn response-list-attached-user-policies-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef list-attached-user-policies :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/list-attached-user-policies-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-attached-user-policies-response))

(clojure.core/defn get-ssh-public-key "Retrieves the specified SSH public key, including metadata about the key.\n The SSH public key retrieved by this operation is used only for authenticating\nthe associated IAM user to an AWS CodeCommit repository. For more information\nabout using SSH keys to authenticate to an AWS CodeCommit repository, see Set up\nAWS CodeCommit for SSH Connections\n(http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html)\nin the AWS CodeCommit User Guide." ([get-ssh-public-key-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-ssh-public-key-request get-ssh-public-key-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/get-ssh-public-key-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/get-ssh-public-key-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GetSSHPublicKeyResult", :http.request.configuration/action "GetSSHPublicKey", :http.request.configuration/output-deser-fn response-get-ssh-public-key-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "UnrecognizedPublicKeyEncodingException" :portkey.aws.iam.-2010-05-08/unrecognized-public-key-encoding-exception}})))))
(clojure.spec.alpha/fdef get-ssh-public-key :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/get-ssh-public-key-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/get-ssh-public-key-response))

(clojure.core/defn create-service-specific-credential "Generates a set of credentials consisting of a user name and password that can\nbe used to access the service specified in the request. These credentials are\ngenerated by IAM, and can be used only for the specified service.\n You can have a maximum of two sets of service-specific credentials for each\nsupported service per user.\n The only supported service at this time is AWS CodeCommit.\n You can reset the password to a new service-generated value by calling\nResetServiceSpecificCredential.\n For more information about service-specific credentials, see Using IAM with AWS\nCodeCommit: Git Credentials, SSH Keys, and AWS Access Keys\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html)\nin the IAM User Guide." ([create-service-specific-credential-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-service-specific-credential-request create-service-specific-credential-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/create-service-specific-credential-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/create-service-specific-credential-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateServiceSpecificCredentialResult", :http.request.configuration/action "CreateServiceSpecificCredential", :http.request.configuration/output-deser-fn response-create-service-specific-credential-response, :http.request.spec/error-spec {"LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceNotSupportedException" :portkey.aws.iam.-2010-05-08/service-not-supported-exception}})))))
(clojure.spec.alpha/fdef create-service-specific-credential :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/create-service-specific-credential-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/create-service-specific-credential-response))

(clojure.core/defn list-signing-certificates "Returns information about the signing certificates associated with the specified\nIAM user. If there none exists, the operation returns an empty list.\n Although each user is limited to a small number of signing certificates, you\ncan still paginate the results using the MaxItems and Marker parameters.\n If the UserName field is not specified, the user name is determined implicitly\nbased on the AWS access key ID used to sign the request for this API. This\noperation works for access keys under the AWS account. Consequently, you can use\nthis operation to manage AWS account root user credentials even if the AWS\naccount has no associated users." ([] (list-signing-certificates {})) ([list-signing-certificates-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-signing-certificates-request list-signing-certificates-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-signing-certificates-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-signing-certificates-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListSigningCertificatesResult", :http.request.configuration/action "ListSigningCertificates", :http.request.configuration/output-deser-fn response-list-signing-certificates-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef list-signing-certificates :args (clojure.spec.alpha/? :portkey.aws.iam.-2010-05-08/list-signing-certificates-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-signing-certificates-response))

(clojure.core/defn list-attached-group-policies "Lists all managed policies that are attached to the specified IAM group.\n An IAM group can also have inline policies embedded with it. To list the inline\npolicies for a group, use the ListGroupPolicies API. For information about\npolicies, see Managed Policies and Inline Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide.\n You can paginate the results using the MaxItems and Marker parameters. You can\nuse the PathPrefix parameter to limit the list of policies to only those\nmatching the specified path prefix. If there are no policies attached to the\nspecified group (or none that match the specified path prefix), the operation\nreturns an empty list." ([list-attached-group-policies-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-attached-group-policies-request list-attached-group-policies-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-attached-group-policies-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-attached-group-policies-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListAttachedGroupPoliciesResult", :http.request.configuration/action "ListAttachedGroupPolicies", :http.request.configuration/output-deser-fn response-list-attached-group-policies-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef list-attached-group-policies :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/list-attached-group-policies-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-attached-group-policies-response))

(clojure.core/defn detach-group-policy "Removes the specified managed policy from the specified IAM group.\n A group can also have inline policies embedded with it. To delete an inline\npolicy, use the DeleteGroupPolicy API. For information about policies, see\nManaged Policies and Inline Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide." ([detach-group-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-detach-group-policy-request detach-group-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/detach-group-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DetachGroupPolicy", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef detach-group-policy :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/detach-group-policy-request) :ret clojure.core/true?)

(clojure.core/defn list-policy-versions "Lists information about the versions of the specified managed policy, including\nthe version that is currently set as the policy's default version.\n For more information about managed policies, see Managed Policies and Inline\nPolicies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide." ([list-policy-versions-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-policy-versions-request list-policy-versions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-policy-versions-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-policy-versions-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListPolicyVersionsResult", :http.request.configuration/action "ListPolicyVersions", :http.request.configuration/output-deser-fn response-list-policy-versions-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef list-policy-versions :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/list-policy-versions-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-policy-versions-response))

(clojure.core/defn delete-policy-version "Deletes the specified version from the specified managed policy.\n You cannot delete the default version from a policy using this API. To delete\nthe default version from a policy, use DeletePolicy. To find out which version\nof a policy is marked as the default version, use ListPolicyVersions.\n For information about versions for managed policies, see Versioning for Managed\nPolicies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html)\nin the IAM User Guide." ([delete-policy-version-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-policy-version-request delete-policy-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/delete-policy-version-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeletePolicyVersion", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "DeleteConflictException" :portkey.aws.iam.-2010-05-08/delete-conflict-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef delete-policy-version :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/delete-policy-version-request) :ret clojure.core/true?)

(clojure.core/defn delete-account-alias " Deletes the specified AWS account alias. For information about using an AWS\naccount alias, see Using an Alias for Your AWS Account ID\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html) in the IAM\nUser Guide." ([delete-account-alias-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-account-alias-request delete-account-alias-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/delete-account-alias-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteAccountAlias", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef delete-account-alias :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/delete-account-alias-request) :ret clojure.core/true?)

(clojure.core/defn attach-role-policy "Attaches the specified managed policy to the specified IAM role. When you attach\na managed policy to a role, the managed policy becomes part of the role's\npermission (access) policy.\n You cannot use a managed policy as the role's trust policy. The role's trust\npolicy is created at the same time as the role, using CreateRole. You can update\na role's trust policy using UpdateAssumeRolePolicy.\n Use this API to attach a managed policy to a role. To embed an inline policy in\na role, use PutRolePolicy. For more information about policies, see Managed\nPolicies and Inline Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide." ([attach-role-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-attach-role-policy-request attach-role-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/attach-role-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AttachRolePolicy", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "UnmodifiableEntityException" :portkey.aws.iam.-2010-05-08/unmodifiable-entity-exception, "PolicyNotAttachableException" :portkey.aws.iam.-2010-05-08/policy-not-attachable-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef attach-role-policy :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/attach-role-policy-request) :ret clojure.core/true?)

(clojure.core/defn delete-server-certificate "Deletes the specified server certificate.\n For more information about working with server certificates, see Working with\nServer Certificates\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html)\nin the IAM User Guide. This topic also includes a list of AWS services that can\nuse the server certificates that you manage with IAM.\n If you are using a server certificate with Elastic Load Balancing, deleting the\ncertificate could have implications for your application. If Elastic Load\nBalancing doesn't detect the deletion of bound certificates, it may continue to\nuse the certificates. This could cause Elastic Load Balancing to stop accepting\ntraffic. We recommend that you remove the reference to the certificate from\nElastic Load Balancing before using this command to delete the certificate. For\nmore information, go to DeleteLoadBalancerListeners\n(http://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html)\nin the Elastic Load Balancing API Reference." ([delete-server-certificate-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-server-certificate-request delete-server-certificate-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/delete-server-certificate-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteServerCertificate", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "DeleteConflictException" :portkey.aws.iam.-2010-05-08/delete-conflict-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef delete-server-certificate :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/delete-server-certificate-request) :ret clojure.core/true?)

(clojure.core/defn update-saml-provider "Updates the metadata document for an existing SAML provider resource object.\n This operation requires Signature Version 4\n(http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html)." ([update-saml-provider-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-saml-provider-request update-saml-provider-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/update-saml-provider-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/update-saml-provider-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "UpdateSAMLProviderResult", :http.request.configuration/action "UpdateSAMLProvider", :http.request.configuration/output-deser-fn response-update-saml-provider-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef update-saml-provider :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/update-saml-provider-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/update-saml-provider-response))

(clojure.core/defn delete-group "Deletes the specified IAM group. The group must not contain any users or have\nany attached policies." ([delete-group-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-group-request delete-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/delete-group-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "DeleteConflictException" :portkey.aws.iam.-2010-05-08/delete-conflict-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef delete-group :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/delete-group-request) :ret clojure.core/true?)

(clojure.core/defn update-login-profile "Changes the password for the specified IAM user.\n IAM users can change their own passwords by calling ChangePassword. For more\ninformation about modifying passwords, see Managing Passwords\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html) in\nthe IAM User Guide." ([update-login-profile-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-login-profile-request update-login-profile-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/update-login-profile-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateLoginProfile", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"EntityTemporarilyUnmodifiableException" :portkey.aws.iam.-2010-05-08/entity-temporarily-unmodifiable-exception, "NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "PasswordPolicyViolationException" :portkey.aws.iam.-2010-05-08/password-policy-violation-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef update-login-profile :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/update-login-profile-request) :ret clojure.core/true?)

(clojure.core/defn update-account-password-policy "Updates the password policy settings for the AWS account.\n * This operation does not support partial updates. No parameters are required,\nbut if you do not specify a parameter, that parameter's value reverts to its\ndefault value. See the Request Parameters section for each parameter's default\nvalue. Also note that some parameters do not allow the default parameter to be\nexplicitly set. Instead, to invoke the default value, do not include that\nparameter when you invoke the operation.\n For more information about using a password policy, see Managing an IAM\nPassword Policy\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html)\nin the IAM User Guide." ([] (update-account-password-policy {})) ([update-account-password-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-account-password-policy-request update-account-password-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/update-account-password-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateAccountPasswordPolicy", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "MalformedPolicyDocumentException" :portkey.aws.iam.-2010-05-08/malformed-policy-document-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef update-account-password-policy :args (clojure.spec.alpha/? :portkey.aws.iam.-2010-05-08/update-account-password-policy-request) :ret clojure.core/true?)

(clojure.core/defn deactivate-mfa-device "Deactivates the specified MFA device and removes it from association with the\nuser name for which it was originally enabled.\n For more information about creating and working with virtual MFA devices, go to\nEnabling a Virtual Multi-factor Authentication (MFA) Device\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html) in the\nIAM User Guide." ([deactivate-mfa-device-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-deactivate-mfa-device-request deactivate-mfa-device-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/deactivate-mfa-device-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeactivateMFADevice", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"EntityTemporarilyUnmodifiableException" :portkey.aws.iam.-2010-05-08/entity-temporarily-unmodifiable-exception, "NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef deactivate-mfa-device :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/deactivate-mfa-device-request) :ret clojure.core/true?)

(clojure.core/defn get-policy-version "Retrieves information about the specified version of the specified managed\npolicy, including the policy document.\n Policies returned by this API are URL-encoded compliant with RFC 3986\n(https://tools.ietf.org/html/rfc3986). You can use a URL decoding method to\nconvert the policy back to plain JSON text. For example, if you use Java, you\ncan use the decode method of the java.net.URLDecoder utility class in the Java\nSDK. Other languages and SDKs provide similar functionality.\n To list the available versions for a policy, use ListPolicyVersions.\n This API retrieves information about managed policies. To retrieve information\nabout an inline policy that is embedded in a user, group, or role, use the\nGetUserPolicy, GetGroupPolicy, or GetRolePolicy API.\n For more information about the types of policies, see Managed Policies and\nInline Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide.\n For more information about managed policy versions, see Versioning for Managed\nPolicies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html)\nin the IAM User Guide." ([get-policy-version-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-policy-version-request get-policy-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/get-policy-version-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/get-policy-version-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GetPolicyVersionResult", :http.request.configuration/action "GetPolicyVersion", :http.request.configuration/output-deser-fn response-get-policy-version-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef get-policy-version :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/get-policy-version-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/get-policy-version-response))

(clojure.core/defn update-access-key "Changes the status of the specified access key from Active to Inactive, or vice\nversa. This operation can be used to disable a user's key as part of a key\nrotation workflow.\n If the UserName field is not specified, the user name is determined implicitly\nbased on the AWS access key ID used to sign the request. This operation works\nfor access keys under the AWS account. Consequently, you can use this operation\nto manage AWS account root user credentials even if the AWS account has no\nassociated users.\n For information about rotating keys, see Managing Keys and Certificates\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html) in\nthe IAM User Guide." ([update-access-key-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-access-key-request update-access-key-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/update-access-key-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateAccessKey", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef update-access-key :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/update-access-key-request) :ret clojure.core/true?)

(clojure.core/defn delete-login-profile "Deletes the password for the specified IAM user, which terminates the user's\nability to access AWS services through the AWS Management Console.\n Deleting a user's password does not prevent a user from accessing AWS through\nthe command line interface or the API. To prevent all user access, you must also\neither make any access keys inactive or delete them. For more information about\nmaking keys inactive or deleting them, see UpdateAccessKey and DeleteAccessKey." ([delete-login-profile-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-login-profile-request delete-login-profile-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/delete-login-profile-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteLoginProfile", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"EntityTemporarilyUnmodifiableException" :portkey.aws.iam.-2010-05-08/entity-temporarily-unmodifiable-exception, "NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef delete-login-profile :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/delete-login-profile-request) :ret clojure.core/true?)

(clojure.core/defn get-login-profile "Retrieves the user name and password-creation date for the specified IAM user.\nIf the user has not been assigned a password, the operation returns a 404\n(NoSuchEntity) error." ([get-login-profile-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-login-profile-request get-login-profile-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/get-login-profile-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/get-login-profile-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GetLoginProfileResult", :http.request.configuration/action "GetLoginProfile", :http.request.configuration/output-deser-fn response-get-login-profile-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef get-login-profile :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/get-login-profile-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/get-login-profile-response))

(clojure.core/defn update-open-id-connect-provider-thumbprint "Replaces the existing list of server certificate thumbprints associated with an\nOpenID Connect (OIDC) provider resource object with a new list of thumbprints.\n The list that you pass with this operation completely replaces the existing\nlist of thumbprints. (The lists are not merged.)\n Typically, you need to update a thumbprint only when the identity provider's\ncertificate changes, which occurs rarely. However, if the provider's certificate\ndoes change, any attempt to assume an IAM role that specifies the OIDC provider\nas a principal fails until the certificate thumbprint is updated.\n Trust for the OIDC provider is derived from the provider's certificate and is\nvalidated by the thumbprint. Therefore, it is best to limit access to the\nUpdateOpenIDConnectProviderThumbprint operation to highly privileged users." ([update-open-id-connect-provider-thumbprint-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-open-id-connect-provider-thumbprint-request update-open-id-connect-provider-thumbprint-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/update-open-id-connect-provider-thumbprint-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateOpenIDConnectProviderThumbprint", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef update-open-id-connect-provider-thumbprint :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/update-open-id-connect-provider-thumbprint-request) :ret clojure.core/true?)

(clojure.core/defn delete-service-specific-credential "Deletes the specified service-specific credential." ([delete-service-specific-credential-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-service-specific-credential-request delete-service-specific-credential-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/delete-service-specific-credential-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteServiceSpecificCredential", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception}})))))
(clojure.spec.alpha/fdef delete-service-specific-credential :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/delete-service-specific-credential-request) :ret clojure.core/true?)

(clojure.core/defn list-groups-for-user "Lists the IAM groups that the specified IAM user belongs to.\n You can paginate the results using the MaxItems and Marker parameters." ([list-groups-for-user-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-groups-for-user-request list-groups-for-user-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-groups-for-user-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-groups-for-user-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListGroupsForUserResult", :http.request.configuration/action "ListGroupsForUser", :http.request.configuration/output-deser-fn response-list-groups-for-user-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef list-groups-for-user :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/list-groups-for-user-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-groups-for-user-response))

(clojure.core/defn upload-ssh-public-key "Uploads an SSH public key and associates it with the specified IAM user.\n The SSH public key uploaded by this operation can be used only for\nauthenticating the associated IAM user to an AWS CodeCommit repository. For more\ninformation about using SSH keys to authenticate to an AWS CodeCommit\nrepository, see Set up AWS CodeCommit for SSH Connections\n(http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html)\nin the AWS CodeCommit User Guide." ([upload-ssh-public-key-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-upload-ssh-public-key-request upload-ssh-public-key-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/upload-ssh-public-key-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/upload-ssh-public-key-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "UploadSSHPublicKeyResult", :http.request.configuration/action "UploadSSHPublicKey", :http.request.configuration/output-deser-fn response-upload-ssh-public-key-response, :http.request.spec/error-spec {"LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "InvalidPublicKeyException" :portkey.aws.iam.-2010-05-08/invalid-public-key-exception, "DuplicateSSHPublicKeyException" :portkey.aws.iam.-2010-05-08/duplicate-ssh-public-key-exception, "UnrecognizedPublicKeyEncodingException" :portkey.aws.iam.-2010-05-08/unrecognized-public-key-encoding-exception}})))))
(clojure.spec.alpha/fdef upload-ssh-public-key :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/upload-ssh-public-key-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/upload-ssh-public-key-response))

(clojure.core/defn list-group-policies "Lists the names of the inline policies that are embedded in the specified IAM\ngroup.\n An IAM group can also have managed policies attached to it. To list the managed\npolicies that are attached to a group, use ListAttachedGroupPolicies. For more\ninformation about policies, see Managed Policies and Inline Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide.\n You can paginate the results using the MaxItems and Marker parameters. If there\nare no inline policies embedded with the specified group, the operation returns\nan empty list." ([list-group-policies-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-group-policies-request list-group-policies-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-group-policies-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-group-policies-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListGroupPoliciesResult", :http.request.configuration/action "ListGroupPolicies", :http.request.configuration/output-deser-fn response-list-group-policies-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef list-group-policies :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/list-group-policies-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-group-policies-response))

(clojure.core/defn delete-role "Deletes the specified role. The role must not have any policies attached. For\nmore information about roles, go to Working with Roles\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html).\n Make sure that you do not have any Amazon EC2 instances running with the role\nyou are about to delete. Deleting a role or instance profile that is associated\nwith a running instance will break any applications running on the instance." ([delete-role-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-role-request delete-role-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/delete-role-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteRole", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "DeleteConflictException" :portkey.aws.iam.-2010-05-08/delete-conflict-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "UnmodifiableEntityException" :portkey.aws.iam.-2010-05-08/unmodifiable-entity-exception, "ConcurrentModificationException" :portkey.aws.iam.-2010-05-08/concurrent-modification-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef delete-role :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/delete-role-request) :ret clojure.core/true?)

(clojure.core/defn get-service-last-accessed-details-with-entities "After you generate a group or policy report using the\nGenerateServiceLastAccessedDetails operation, you can use the JobId parameter in\nGetServiceLastAccessedDetailsWithEntities. This operation retrieves the status\nof your report job and a list of entities that could have used group or policy\npermissions to access the specified service.\n * Group – For a group report, this operation returns a list of users in the\ngroup that could have used the group’s policies in an attempt to access the\nservice.\n * Policy – For a policy report, this operation returns a list of entities\n(users or roles) that could have used the policy in an attempt to access the\nservice.\n You can also use this operation for user or role reports to retrieve details\nabout those entities.\n If the operation fails, the GetServiceLastAccessedDetailsWithEntities operation\nreturns the reason that it failed.\n By default, the list of associated entities is sorted by date, with the most\nrecent access listed first." ([get-service-last-accessed-details-with-entities-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-service-last-accessed-details-with-entities-request get-service-last-accessed-details-with-entities-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/get-service-last-accessed-details-with-entities-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/get-service-last-accessed-details-with-entities-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GetServiceLastAccessedDetailsWithEntitiesResult", :http.request.configuration/action "GetServiceLastAccessedDetailsWithEntities", :http.request.configuration/output-deser-fn response-get-service-last-accessed-details-with-entities-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception}})))))
(clojure.spec.alpha/fdef get-service-last-accessed-details-with-entities :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/get-service-last-accessed-details-with-entities-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/get-service-last-accessed-details-with-entities-response))

(clojure.core/defn delete-instance-profile "Deletes the specified instance profile. The instance profile must not have an\nassociated role.\n Make sure that you do not have any Amazon EC2 instances running with the\ninstance profile you are about to delete. Deleting a role or instance profile\nthat is associated with a running instance will break any applications running\non the instance.\n For more information about instance profiles, go to About Instance Profiles\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html)." ([delete-instance-profile-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-instance-profile-request delete-instance-profile-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/delete-instance-profile-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteInstanceProfile", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "DeleteConflictException" :portkey.aws.iam.-2010-05-08/delete-conflict-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef delete-instance-profile :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/delete-instance-profile-request) :ret clojure.core/true?)

(clojure.core/defn list-groups "Lists the IAM groups that have the specified path prefix.\n You can paginate the results using the MaxItems and Marker parameters." ([] (list-groups {})) ([list-groups-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-groups-request list-groups-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-groups-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-groups-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListGroupsResult", :http.request.configuration/action "ListGroups", :http.request.configuration/output-deser-fn response-list-groups-response, :http.request.spec/error-spec {"ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef list-groups :args (clojure.spec.alpha/? :portkey.aws.iam.-2010-05-08/list-groups-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-groups-response))

(clojure.core/defn get-account-summary "Retrieves information about IAM entity usage and IAM quotas in the AWS account.\n For information about limitations on IAM entities, see Limitations on IAM\nEntities\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in\nthe IAM User Guide." ([] (get-account-summary {})) ([_] (clojure.core/let [request-function-result__22119__auto__ {}] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/get-account-summary-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec nil, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GetAccountSummaryResult", :http.request.configuration/action "GetAccountSummary", :http.request.configuration/output-deser-fn response-get-account-summary-response, :http.request.spec/error-spec {"ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef get-account-summary :args clojure.core/empty? :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/get-account-summary-response))

(clojure.core/defn list-saml-providers "Lists the SAML provider resource objects defined in IAM in the account.\n This operation requires Signature Version 4\n(http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html)." ([] (list-saml-providers {})) ([list-saml-providers-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-saml-providers-request list-saml-providers-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-saml-providers-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-saml-providers-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListSAMLProvidersResult", :http.request.configuration/action "ListSAMLProviders", :http.request.configuration/output-deser-fn response-list-saml-providers-response, :http.request.spec/error-spec {"ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef list-saml-providers :args (clojure.spec.alpha/? :portkey.aws.iam.-2010-05-08/list-saml-providers-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-saml-providers-response))

(clojure.core/defn delete-saml-provider "Deletes a SAML provider resource in IAM.\n Deleting the provider resource from IAM does not update any roles that\nreference the SAML provider resource's ARN as a principal in their trust\npolicies. Any attempt to assume a role that references a non-existent provider\nresource ARN fails.\n This operation requires Signature Version 4\n(http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html)." ([delete-saml-provider-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-saml-provider-request delete-saml-provider-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/delete-saml-provider-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteSAMLProvider", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef delete-saml-provider :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/delete-saml-provider-request) :ret clojure.core/true?)

(clojure.core/defn get-saml-provider "Returns the SAML provider metadocument that was uploaded when the IAM SAML\nprovider resource object was created or updated.\n This operation requires Signature Version 4\n(http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html)." ([get-saml-provider-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-saml-provider-request get-saml-provider-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/get-saml-provider-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/get-saml-provider-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GetSAMLProviderResult", :http.request.configuration/action "GetSAMLProvider", :http.request.configuration/output-deser-fn response-get-saml-provider-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef get-saml-provider :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/get-saml-provider-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/get-saml-provider-response))

(clojure.core/defn update-assume-role-policy "Updates the policy that grants an IAM entity permission to assume a role. This\nis typically referred to as the \"role trust policy\". For more information about\nroles, go to Using Roles to Delegate Permissions and Federate Identities\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html)." ([update-assume-role-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-assume-role-policy-request update-assume-role-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/update-assume-role-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateAssumeRolePolicy", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "MalformedPolicyDocumentException" :portkey.aws.iam.-2010-05-08/malformed-policy-document-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "UnmodifiableEntityException" :portkey.aws.iam.-2010-05-08/unmodifiable-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef update-assume-role-policy :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/update-assume-role-policy-request) :ret clojure.core/true?)

(clojure.core/defn list-roles "Lists the IAM roles that have the specified path prefix. If there are none, the\noperation returns an empty list. For more information about roles, go to Working\nwith Roles\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html).\n You can paginate the results using the MaxItems and Marker parameters." ([] (list-roles {})) ([list-roles-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-roles-request list-roles-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-roles-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-roles-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListRolesResult", :http.request.configuration/action "ListRoles", :http.request.configuration/output-deser-fn response-list-roles-response, :http.request.spec/error-spec {"ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef list-roles :args (clojure.spec.alpha/? :portkey.aws.iam.-2010-05-08/list-roles-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-roles-response))

(clojure.core/defn list-policies "Lists all the managed policies that are available in your AWS account, including\nyour own customer-defined managed policies and all AWS managed policies.\n You can filter the list of policies that is returned using the optional\nOnlyAttached, Scope, and PathPrefix parameters. For example, to list only the\ncustomer managed policies in your AWS account, set Scope to Local. To list only\nAWS managed policies, set Scope to AWS.\n You can paginate the results using the MaxItems and Marker parameters.\n For more information about managed policies, see Managed Policies and Inline\nPolicies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide." ([] (list-policies {})) ([list-policies-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-policies-request list-policies-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-policies-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-policies-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListPoliciesResult", :http.request.configuration/action "ListPolicies", :http.request.configuration/output-deser-fn response-list-policies-response, :http.request.spec/error-spec {"ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef list-policies :args (clojure.spec.alpha/? :portkey.aws.iam.-2010-05-08/list-policies-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-policies-response))

(clojure.core/defn attach-group-policy "Attaches the specified managed policy to the specified IAM group.\n You use this API to attach a managed policy to a group. To embed an inline\npolicy in a group, use PutGroupPolicy.\n For more information about policies, see Managed Policies and Inline Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide." ([attach-group-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-attach-group-policy-request attach-group-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/attach-group-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AttachGroupPolicy", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "PolicyNotAttachableException" :portkey.aws.iam.-2010-05-08/policy-not-attachable-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef attach-group-policy :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/attach-group-policy-request) :ret clojure.core/true?)

(clojure.core/defn get-open-id-connect-provider "Returns information about the specified OpenID Connect (OIDC) provider resource\nobject in IAM." ([get-open-id-connect-provider-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-open-id-connect-provider-request get-open-id-connect-provider-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/get-open-id-connect-provider-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/get-open-id-connect-provider-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GetOpenIDConnectProviderResult", :http.request.configuration/action "GetOpenIDConnectProvider", :http.request.configuration/output-deser-fn response-get-open-id-connect-provider-response, :http.request.spec/error-spec {"InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef get-open-id-connect-provider :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/get-open-id-connect-provider-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/get-open-id-connect-provider-response))

(clojure.core/defn get-access-key-last-used "Retrieves information about when the specified access key was last used. The\ninformation includes the date and time of last use, along with the AWS service\nand region that were specified in the last request made with that key." ([get-access-key-last-used-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-access-key-last-used-request get-access-key-last-used-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/get-access-key-last-used-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/get-access-key-last-used-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GetAccessKeyLastUsedResult", :http.request.configuration/action "GetAccessKeyLastUsed", :http.request.configuration/output-deser-fn response-get-access-key-last-used-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception}})))))
(clojure.spec.alpha/fdef get-access-key-last-used :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/get-access-key-last-used-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/get-access-key-last-used-response))

(clojure.core/defn list-service-specific-credentials "Returns information about the service-specific credentials associated with the\nspecified IAM user. If none exists, the operation returns an empty list. The\nservice-specific credentials returned by this operation are used only for\nauthenticating the IAM user to a specific service. For more information about\nusing service-specific credentials to authenticate to an AWS service, see Set Up\nservice-specific credentials\n(http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html) in\nthe AWS CodeCommit User Guide." ([] (list-service-specific-credentials {})) ([list-service-specific-credentials-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-service-specific-credentials-request list-service-specific-credentials-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-service-specific-credentials-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-service-specific-credentials-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListServiceSpecificCredentialsResult", :http.request.configuration/action "ListServiceSpecificCredentials", :http.request.configuration/output-deser-fn response-list-service-specific-credentials-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceNotSupportedException" :portkey.aws.iam.-2010-05-08/service-not-supported-exception}})))))
(clojure.spec.alpha/fdef list-service-specific-credentials :args (clojure.spec.alpha/? :portkey.aws.iam.-2010-05-08/list-service-specific-credentials-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-service-specific-credentials-response))

(clojure.core/defn get-role-policy "Retrieves the specified inline policy document that is embedded with the\nspecified IAM role.\n Policies returned by this API are URL-encoded compliant with RFC 3986\n(https://tools.ietf.org/html/rfc3986). You can use a URL decoding method to\nconvert the policy back to plain JSON text. For example, if you use Java, you\ncan use the decode method of the java.net.URLDecoder utility class in the Java\nSDK. Other languages and SDKs provide similar functionality.\n An IAM role can also have managed policies attached to it. To retrieve a\nmanaged policy document that is attached to a role, use GetPolicy to determine\nthe policy's default version, then use GetPolicyVersion to retrieve the policy\ndocument.\n For more information about policies, see Managed Policies and Inline Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide.\n For more information about roles, see Using Roles to Delegate Permissions and\nFederate Identities\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html)." ([get-role-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-role-policy-request get-role-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/get-role-policy-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/get-role-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GetRolePolicyResult", :http.request.configuration/action "GetRolePolicy", :http.request.configuration/output-deser-fn response-get-role-policy-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef get-role-policy :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/get-role-policy-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/get-role-policy-response))

(clojure.core/defn remove-client-id-from-open-id-connect-provider "Removes the specified client ID (also known as audience) from the list of client\nIDs registered for the specified IAM OpenID Connect (OIDC) provider resource\nobject.\n This operation is idempotent; it does not fail or return an error if you try to\nremove a client ID that does not exist." ([remove-client-id-from-open-id-connect-provider-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-remove-client-id-from-open-id-connect-provider-request remove-client-id-from-open-id-connect-provider-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/remove-client-id-from-open-id-connect-provider-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RemoveClientIDFromOpenIDConnectProvider", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef remove-client-id-from-open-id-connect-provider :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/remove-client-id-from-open-id-connect-provider-request) :ret clojure.core/true?)

(clojure.core/defn get-context-keys-for-custom-policy "Gets a list of all of the context keys referenced in the input policies. The\npolicies are supplied as a list of one or more strings. To get the context keys\nfrom policies associated with an IAM user, group, or role, use\nGetContextKeysForPrincipalPolicy.\n Context keys are variables maintained by AWS and its services that provide\ndetails about the context of an API query request. Context keys can be evaluated\nby testing against a value specified in an IAM policy. Use\nGetContextKeysForCustomPolicy to understand what key names and values you must\nsupply when you call SimulateCustomPolicy. Note that all parameters are shown in\nunencoded form here for clarity but must be URL encoded to be included as a part\nof a real HTML request." ([get-context-keys-for-custom-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-context-keys-for-custom-policy-request get-context-keys-for-custom-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/get-context-keys-for-policy-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/get-context-keys-for-custom-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GetContextKeysForCustomPolicyResult", :http.request.configuration/action "GetContextKeysForCustomPolicy", :http.request.configuration/output-deser-fn response-get-context-keys-for-policy-response, :http.request.spec/error-spec {"InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception}})))))
(clojure.spec.alpha/fdef get-context-keys-for-custom-policy :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/get-context-keys-for-custom-policy-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/get-context-keys-for-policy-response))

(clojure.core/defn list-instance-profiles "Lists the instance profiles that have the specified path prefix. If there are\nnone, the operation returns an empty list. For more information about instance\nprofiles, go to About Instance Profiles\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html).\n You can paginate the results using the MaxItems and Marker parameters." ([] (list-instance-profiles {})) ([list-instance-profiles-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-instance-profiles-request list-instance-profiles-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-instance-profiles-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-instance-profiles-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListInstanceProfilesResult", :http.request.configuration/action "ListInstanceProfiles", :http.request.configuration/output-deser-fn response-list-instance-profiles-response, :http.request.spec/error-spec {"ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef list-instance-profiles :args (clojure.spec.alpha/? :portkey.aws.iam.-2010-05-08/list-instance-profiles-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-instance-profiles-response))

(clojure.core/defn get-credential-report " Retrieves a credential report for the AWS account. For more information about\nthe credential report, see Getting Credential Reports\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html) in the\nIAM User Guide." ([] (get-credential-report {})) ([_] (clojure.core/let [request-function-result__22119__auto__ {}] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/get-credential-report-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec nil, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GetCredentialReportResult", :http.request.configuration/action "GetCredentialReport", :http.request.configuration/output-deser-fn response-get-credential-report-response, :http.request.spec/error-spec {"CredentialReportNotPresentException" :portkey.aws.iam.-2010-05-08/credential-report-not-present-exception, "CredentialReportExpiredException" :portkey.aws.iam.-2010-05-08/credential-report-expired-exception, "CredentialReportNotReadyException" :portkey.aws.iam.-2010-05-08/credential-report-not-ready-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef get-credential-report :args clojure.core/empty? :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/get-credential-report-response))

(clojure.core/defn upload-server-certificate "Uploads a server certificate entity for the AWS account. The server certificate\nentity includes a public key certificate, a private key, and an optional\ncertificate chain, which should all be PEM-encoded.\n We recommend that you use AWS Certificate Manager\n(http://docs.aws.amazon.com/certificate-manager/) to provision, manage, and\ndeploy your server certificates. With ACM you can request a certificate, deploy\nit to AWS resources, and let ACM handle certificate renewals for you.\nCertificates provided by ACM are free. For more information about using ACM, see\nthe AWS Certificate Manager User Guide\n(http://docs.aws.amazon.com/acm/latest/userguide/).\n For more information about working with server certificates, see Working with\nServer Certificates\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html)\nin the IAM User Guide. This topic includes a list of AWS services that can use\nthe server certificates that you manage with IAM.\n For information about the number of server certificates you can upload, see\nLimitations on IAM Entities and Objects\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html) in\nthe IAM User Guide.\n Because the body of the public key certificate, private key, and the\ncertificate chain can be large, you should use POST rather than GET when calling\nUploadServerCertificate. For information about setting up signatures and\nauthorization through the API, go to Signing AWS API Requests\n(http://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html) in\nthe AWS General Reference. For general information about using the Query API\nwith IAM, go to Calling the API by Making HTTP Query Requests\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html) in the IAM\nUser Guide." ([upload-server-certificate-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-upload-server-certificate-request upload-server-certificate-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/upload-server-certificate-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/upload-server-certificate-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "UploadServerCertificateResult", :http.request.configuration/action "UploadServerCertificate", :http.request.configuration/output-deser-fn response-upload-server-certificate-response, :http.request.spec/error-spec {"LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "EntityAlreadyExistsException" :portkey.aws.iam.-2010-05-08/entity-already-exists-exception, "MalformedCertificateException" :portkey.aws.iam.-2010-05-08/malformed-certificate-exception, "KeyPairMismatchException" :portkey.aws.iam.-2010-05-08/key-pair-mismatch-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef upload-server-certificate :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/upload-server-certificate-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/upload-server-certificate-response))

(clojure.core/defn get-service-linked-role-deletion-status "Retrieves the status of your service-linked role deletion. After you use the\nDeleteServiceLinkedRole API operation to submit a service-linked role for\ndeletion, you can use the DeletionTaskId parameter in\nGetServiceLinkedRoleDeletionStatus to check the status of the deletion. If the\ndeletion fails, this operation returns the reason that it failed, if that\ninformation is returned by the service." ([get-service-linked-role-deletion-status-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-service-linked-role-deletion-status-request get-service-linked-role-deletion-status-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/get-service-linked-role-deletion-status-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/get-service-linked-role-deletion-status-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GetServiceLinkedRoleDeletionStatusResult", :http.request.configuration/action "GetServiceLinkedRoleDeletionStatus", :http.request.configuration/output-deser-fn response-get-service-linked-role-deletion-status-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef get-service-linked-role-deletion-status :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/get-service-linked-role-deletion-status-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/get-service-linked-role-deletion-status-response))

(clojure.core/defn delete-signing-certificate "Deletes a signing certificate associated with the specified IAM user.\n If you do not specify a user name, IAM determines the user name implicitly\nbased on the AWS access key ID signing the request. This operation works for\naccess keys under the AWS account. Consequently, you can use this operation to\nmanage AWS account root user credentials even if the AWS account has no\nassociated IAM users." ([delete-signing-certificate-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-signing-certificate-request delete-signing-certificate-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/delete-signing-certificate-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteSigningCertificate", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef delete-signing-certificate :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/delete-signing-certificate-request) :ret clojure.core/true?)

(clojure.core/defn add-role-to-instance-profile "Adds the specified IAM role to the specified instance profile. An instance\nprofile can contain only one role, and this limit cannot be increased. You can\nremove the existing role and then add a different role to an instance profile.\nYou must then wait for the change to appear across all of AWS because of\neventual consistency (https://en.wikipedia.org/wiki/Eventual_consistency). To\nforce the change, you must disassociate the instance profile\n(http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html)\nand then associate the instance profile\n(http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html),\nor you can stop your instance and then restart it.\n The caller of this API must be granted the PassRole permission on the IAM role\nby a permissions policy.\n For more information about roles, go to Working with Roles\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html). For\nmore information about instance profiles, go to About Instance Profiles\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html)." ([add-role-to-instance-profile-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-add-role-to-instance-profile-request add-role-to-instance-profile-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/add-role-to-instance-profile-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AddRoleToInstanceProfile", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "EntityAlreadyExistsException" :portkey.aws.iam.-2010-05-08/entity-already-exists-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "UnmodifiableEntityException" :portkey.aws.iam.-2010-05-08/unmodifiable-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef add-role-to-instance-profile :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/add-role-to-instance-profile-request) :ret clojure.core/true?)

(clojure.core/defn create-instance-profile " Creates a new instance profile. For information about instance profiles, go to\nAbout Instance Profiles\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html).\n For information about the number of instance profiles you can create, see\nLimitations on IAM Entities\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in\nthe IAM User Guide." ([create-instance-profile-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-instance-profile-request create-instance-profile-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/create-instance-profile-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/create-instance-profile-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateInstanceProfileResult", :http.request.configuration/action "CreateInstanceProfile", :http.request.configuration/output-deser-fn response-create-instance-profile-response, :http.request.spec/error-spec {"EntityAlreadyExistsException" :portkey.aws.iam.-2010-05-08/entity-already-exists-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef create-instance-profile :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/create-instance-profile-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/create-instance-profile-response))

(clojure.core/defn untag-role "Removes the specified tags from the role. For more information about tagging,\nsee Tagging IAM Identities\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User\nGuide." ([untag-role-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-untag-role-request untag-role-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/untag-role-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UntagRole", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ConcurrentModificationException" :portkey.aws.iam.-2010-05-08/concurrent-modification-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef untag-role :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/untag-role-request) :ret clojure.core/true?)

(clojure.core/defn detach-role-policy "Removes the specified managed policy from the specified role.\n A role can also have inline policies embedded with it. To delete an inline\npolicy, use the DeleteRolePolicy API. For information about policies, see\nManaged Policies and Inline Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide." ([detach-role-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-detach-role-policy-request detach-role-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/detach-role-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DetachRolePolicy", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "UnmodifiableEntityException" :portkey.aws.iam.-2010-05-08/unmodifiable-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef detach-role-policy :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/detach-role-policy-request) :ret clojure.core/true?)

(clojure.core/defn list-instance-profiles-for-role "Lists the instance profiles that have the specified associated IAM role. If\nthere are none, the operation returns an empty list. For more information about\ninstance profiles, go to About Instance Profiles\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html).\n You can paginate the results using the MaxItems and Marker parameters." ([list-instance-profiles-for-role-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-instance-profiles-for-role-request list-instance-profiles-for-role-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-instance-profiles-for-role-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-instance-profiles-for-role-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListInstanceProfilesForRoleResult", :http.request.configuration/action "ListInstanceProfilesForRole", :http.request.configuration/output-deser-fn response-list-instance-profiles-for-role-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef list-instance-profiles-for-role :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/list-instance-profiles-for-role-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-instance-profiles-for-role-response))

(clojure.core/defn upload-signing-certificate "Uploads an X.509 signing certificate and associates it with the specified IAM\nuser. Some AWS services use X.509 signing certificates to validate requests that\nare signed with a corresponding private key. When you upload the certificate,\nits default status is Active.\n If the UserName field is not specified, the IAM user name is determined\nimplicitly based on the AWS access key ID used to sign the request. This\noperation works for access keys under the AWS account. Consequently, you can use\nthis operation to manage AWS account root user credentials even if the AWS\naccount has no associated users.\n Because the body of an X.509 certificate can be large, you should use POST\nrather than GET when calling UploadSigningCertificate. For information about\nsetting up signatures and authorization through the API, go to Signing AWS API\nRequests\n(http://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html) in\nthe AWS General Reference. For general information about using the Query API\nwith IAM, go to Making Query Requests\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html) in the\nIAM User Guide." ([upload-signing-certificate-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-upload-signing-certificate-request upload-signing-certificate-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/upload-signing-certificate-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/upload-signing-certificate-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "UploadSigningCertificateResult", :http.request.configuration/action "UploadSigningCertificate", :http.request.configuration/output-deser-fn response-upload-signing-certificate-response, :http.request.spec/error-spec {"LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "EntityAlreadyExistsException" :portkey.aws.iam.-2010-05-08/entity-already-exists-exception, "MalformedCertificateException" :portkey.aws.iam.-2010-05-08/malformed-certificate-exception, "InvalidCertificateException" :portkey.aws.iam.-2010-05-08/invalid-certificate-exception, "DuplicateCertificateException" :portkey.aws.iam.-2010-05-08/duplicate-certificate-exception, "NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef upload-signing-certificate :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/upload-signing-certificate-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/upload-signing-certificate-response))

(clojure.core/defn update-service-specific-credential "Sets the status of a service-specific credential to Active or Inactive.\nService-specific credentials that are inactive cannot be used for authentication\nto the service. This operation can be used to disable a user's service-specific\ncredential as part of a credential rotation work flow." ([update-service-specific-credential-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-service-specific-credential-request update-service-specific-credential-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/update-service-specific-credential-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateServiceSpecificCredential", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception}})))))
(clojure.spec.alpha/fdef update-service-specific-credential :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/update-service-specific-credential-request) :ret clojure.core/true?)

(clojure.core/defn create-policy-version "Creates a new version of the specified managed policy. To update a managed\npolicy, you create a new policy version. A managed policy can have up to five\nversions. If the policy has five versions, you must delete an existing version\nusing DeletePolicyVersion before you create a new version.\n Optionally, you can set the new version as the policy's default version. The\ndefault version is the version that is in effect for the IAM users, groups, and\nroles to which the policy is attached.\n For more information about managed policy versions, see Versioning for Managed\nPolicies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html)\nin the IAM User Guide." ([create-policy-version-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-policy-version-request create-policy-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/create-policy-version-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/create-policy-version-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreatePolicyVersionResult", :http.request.configuration/action "CreatePolicyVersion", :http.request.configuration/output-deser-fn response-create-policy-version-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "MalformedPolicyDocumentException" :portkey.aws.iam.-2010-05-08/malformed-policy-document-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef create-policy-version :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/create-policy-version-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/create-policy-version-response))

(clojure.core/defn get-context-keys-for-principal-policy "Gets a list of all of the context keys referenced in all the IAM policies that\nare attached to the specified IAM entity. The entity can be an IAM user, group,\nor role. If you specify a user, then the request also includes all of the\npolicies attached to groups that the user is a member of.\n You can optionally include a list of one or more additional policies, specified\nas strings. If you want to include only a list of policies by string, use\nGetContextKeysForCustomPolicy instead.\n Note: This API discloses information about the permissions granted to other\nusers. If you do not want users to see other user's permissions, then consider\nallowing them to use GetContextKeysForCustomPolicy instead.\n Context keys are variables maintained by AWS and its services that provide\ndetails about the context of an API query request. Context keys can be evaluated\nby testing against a value in an IAM policy. Use\nGetContextKeysForPrincipalPolicy to understand what key names and values you\nmust supply when you call SimulatePrincipalPolicy." ([get-context-keys-for-principal-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-context-keys-for-principal-policy-request get-context-keys-for-principal-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/get-context-keys-for-policy-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/get-context-keys-for-principal-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GetContextKeysForPrincipalPolicyResult", :http.request.configuration/action "GetContextKeysForPrincipalPolicy", :http.request.configuration/output-deser-fn response-get-context-keys-for-policy-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception}})))))
(clojure.spec.alpha/fdef get-context-keys-for-principal-policy :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/get-context-keys-for-principal-policy-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/get-context-keys-for-policy-response))

(clojure.core/defn resync-mfa-device "Synchronizes the specified MFA device with its IAM resource object on the AWS\nservers.\n For more information about creating and working with virtual MFA devices, go to\nUsing a Virtual MFA Device\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html) in the\nIAM User Guide." ([resync-mfa-device-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-resync-mfa-device-request resync-mfa-device-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/resync-mfa-device-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ResyncMFADevice", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"InvalidAuthenticationCodeException" :portkey.aws.iam.-2010-05-08/invalid-authentication-code-exception, "NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef resync-mfa-device :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/resync-mfa-device-request) :ret clojure.core/true?)

(clojure.core/defn get-group " Returns a list of IAM users that are in the specified IAM group. You can\npaginate the results using the MaxItems and Marker parameters." ([get-group-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-group-request get-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/get-group-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/get-group-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GetGroupResult", :http.request.configuration/action "GetGroup", :http.request.configuration/output-deser-fn response-get-group-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef get-group :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/get-group-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/get-group-response))

(clojure.core/defn list-policies-granting-service-access "Retrieves a list of policies that the IAM identity (user, group, or role) can\nuse to access each specified service.\n This operation does not use other policy types when determining whether a\nresource could access a service. These other policy types include resource-based\npolicies, access control lists, AWS Organizations policies, IAM permissions\nboundaries, and AWS STS assume role policies. It only applies permissions policy\nlogic. For more about the evaluation of policy types, see Evaluating Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics)\nin the IAM User Guide.\n The list of policies returned by the operation depends on the ARN of the\nidentity that you provide.\n * User – The list of policies includes the managed and inline policies that are\nattached to the user directly. The list also includes any additional managed and\ninline policies that are attached to the group to which the user belongs.\n * Group – The list of policies includes only the managed and inline policies\nthat are attached to the group directly. Policies that are attached to the\ngroup’s user are not included.\n * Role – The list of policies includes only the managed and inline policies\nthat are attached to the role.\n For each managed policy, this operation returns the ARN and policy name. For\neach inline policy, it returns the policy name and the entity to which it is\nattached. Inline policies do not have an ARN. For more information about these\npolicy types, see Managed Policies and Inline Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html)\nin the IAM User Guide.\n Policies that are attached to users and roles as permissions boundaries are not\nreturned. To view which managed policy is currently used to set the permissions\nboundary for a user or role, use the GetUser or GetRole operations." ([list-policies-granting-service-access-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-policies-granting-service-access-request list-policies-granting-service-access-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-policies-granting-service-access-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-policies-granting-service-access-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListPoliciesGrantingServiceAccessResult", :http.request.configuration/action "ListPoliciesGrantingServiceAccess", :http.request.configuration/output-deser-fn response-list-policies-granting-service-access-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception}})))))
(clojure.spec.alpha/fdef list-policies-granting-service-access :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/list-policies-granting-service-access-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-policies-granting-service-access-response))

(clojure.core/defn update-group "Updates the name and/or the path of the specified IAM group.\n You should understand the implications of changing a group's path or name. For\nmore information, see Renaming Users and Groups\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html)\nin the IAM User Guide.\n The person making the request (the principal), must have permission to change\nthe role group with the old name and the new name. For example, to change the\ngroup named Managers to MGRs, the principal must have a policy that allows them\nto update both groups. If the principal has permission to update the Managers\ngroup, but not the MGRs group, then the update fails. For more information about\npermissions, see Access Management\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/access.html)." ([update-group-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-group-request update-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/update-group-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "EntityAlreadyExistsException" :portkey.aws.iam.-2010-05-08/entity-already-exists-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef update-group :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/update-group-request) :ret clojure.core/true?)

(clojure.core/defn create-role "Creates a new role for your AWS account. For more information about roles, go to\nIAM Roles\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html). For\ninformation about limitations on role names and the number of roles you can\ncreate, go to Limitations on IAM Entities\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in\nthe IAM User Guide." ([create-role-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-role-request create-role-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/create-role-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/create-role-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateRoleResult", :http.request.configuration/action "CreateRole", :http.request.configuration/output-deser-fn response-create-role-response, :http.request.spec/error-spec {"LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "EntityAlreadyExistsException" :portkey.aws.iam.-2010-05-08/entity-already-exists-exception, "MalformedPolicyDocumentException" :portkey.aws.iam.-2010-05-08/malformed-policy-document-exception, "ConcurrentModificationException" :portkey.aws.iam.-2010-05-08/concurrent-modification-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef create-role :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/create-role-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/create-role-response))

(clojure.core/defn delete-user "Deletes the specified IAM user. The user must not belong to any groups or have\nany access keys, signing certificates, MFA devices enabled for AWS, or attached\npolicies." ([delete-user-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-user-request delete-user-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/delete-user-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteUser", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "DeleteConflictException" :portkey.aws.iam.-2010-05-08/delete-conflict-exception, "ConcurrentModificationException" :portkey.aws.iam.-2010-05-08/concurrent-modification-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef delete-user :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/delete-user-request) :ret clojure.core/true?)

(clojure.core/defn create-user "Creates a new IAM user for your AWS account.\n For information about limitations on the number of IAM users you can create,\nsee Limitations on IAM Entities\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in\nthe IAM User Guide." ([create-user-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-user-request create-user-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/create-user-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/create-user-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateUserResult", :http.request.configuration/action "CreateUser", :http.request.configuration/output-deser-fn response-create-user-response, :http.request.spec/error-spec {"LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "EntityAlreadyExistsException" :portkey.aws.iam.-2010-05-08/entity-already-exists-exception, "NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "ConcurrentModificationException" :portkey.aws.iam.-2010-05-08/concurrent-modification-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef create-user :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/create-user-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/create-user-response))

(clojure.core/defn get-policy "Retrieves information about the specified managed policy, including the policy's\ndefault version and the total number of IAM users, groups, and roles to which\nthe policy is attached. To retrieve the list of the specific users, groups, and\nroles that the policy is attached to, use the ListEntitiesForPolicy API. This\nAPI returns metadata about the policy. To retrieve the actual policy document\nfor a specific version of the policy, use GetPolicyVersion.\n This API retrieves information about managed policies. To retrieve information\nabout an inline policy that is embedded with an IAM user, group, or role, use\nthe GetUserPolicy, GetGroupPolicy, or GetRolePolicy API.\n For more information about policies, see Managed Policies and Inline Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide." ([get-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-policy-request get-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/get-policy-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/get-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GetPolicyResult", :http.request.configuration/action "GetPolicy", :http.request.configuration/output-deser-fn response-get-policy-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef get-policy :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/get-policy-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/get-policy-response))

(clojure.core/defn enable-mfa-device "Enables the specified MFA device and associates it with the specified IAM user.\nWhen enabled, the MFA device is required for every subsequent login by the IAM\nuser associated with the device." ([enable-mfa-device-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-enable-mfa-device-request enable-mfa-device-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/enable-mfa-device-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "EnableMFADevice", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"EntityAlreadyExistsException" :portkey.aws.iam.-2010-05-08/entity-already-exists-exception, "EntityTemporarilyUnmodifiableException" :portkey.aws.iam.-2010-05-08/entity-temporarily-unmodifiable-exception, "InvalidAuthenticationCodeException" :portkey.aws.iam.-2010-05-08/invalid-authentication-code-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef enable-mfa-device :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/enable-mfa-device-request) :ret clojure.core/true?)

(clojure.core/defn put-role-policy "Adds or updates an inline policy document that is embedded in the specified IAM\nrole.\n When you embed an inline policy in a role, the inline policy is used as part of\nthe role's access (permissions) policy. The role's trust policy is created at\nthe same time as the role, using CreateRole. You can update a role's trust\npolicy using UpdateAssumeRolePolicy. For more information about IAM roles, go to\nUsing Roles to Delegate Permissions and Federate Identities\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html).\n A role can also have a managed policy attached to it. To attach a managed\npolicy to a role, use AttachRolePolicy. To create a new managed policy, use\nCreatePolicy. For information about policies, see Managed Policies and Inline\nPolicies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide.\n For information about limits on the number of inline policies that you can\nembed with a role, see Limitations on IAM Entities\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in\nthe IAM User Guide.\n Because policy documents can be large, you should use POST rather than GET when\ncalling PutRolePolicy. For general information about using the Query API with\nIAM, go to Making Query Requests\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html) in the\nIAM User Guide." ([put-role-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-put-role-policy-request put-role-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/put-role-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "PutRolePolicy", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "MalformedPolicyDocumentException" :portkey.aws.iam.-2010-05-08/malformed-policy-document-exception, "NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "UnmodifiableEntityException" :portkey.aws.iam.-2010-05-08/unmodifiable-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef put-role-policy :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/put-role-policy-request) :ret clojure.core/true?)

(clojure.core/defn delete-role-permissions-boundary "Deletes the permissions boundary for the specified IAM role.\n Deleting the permissions boundary for a role might increase its permissions by\nallowing anyone who assumes the role to perform all the actions granted in its\npermissions policies." ([delete-role-permissions-boundary-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-role-permissions-boundary-request delete-role-permissions-boundary-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/delete-role-permissions-boundary-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteRolePermissionsBoundary", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "UnmodifiableEntityException" :portkey.aws.iam.-2010-05-08/unmodifiable-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef delete-role-permissions-boundary :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/delete-role-permissions-boundary-request) :ret clojure.core/true?)

(clojure.core/defn list-mfa-devices "Lists the MFA devices for an IAM user. If the request includes a IAM user name,\nthen this operation lists all the MFA devices associated with the specified\nuser. If you do not specify a user name, IAM determines the user name implicitly\nbased on the AWS access key ID signing the request for this API.\n You can paginate the results using the MaxItems and Marker parameters." ([] (list-mfa-devices {})) ([list-mfa-devices-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-mfa-devices-request list-mfa-devices-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-mfa-devices-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-mfa-devices-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListMFADevicesResult", :http.request.configuration/action "ListMFADevices", :http.request.configuration/output-deser-fn response-list-mfa-devices-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef list-mfa-devices :args (clojure.spec.alpha/? :portkey.aws.iam.-2010-05-08/list-mfa-devices-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-mfa-devices-response))

(clojure.core/defn create-service-linked-role "Creates an IAM role that is linked to a specific AWS service. The service\ncontrols the attached policies and when the role can be deleted. This helps\nensure that the service is not broken by an unexpectedly changed or deleted\nrole, which could put your AWS resources into an unknown state. Allowing the\nservice to control the role helps improve service stability and proper cleanup\nwhen a service and its role are no longer needed. For more information, see\nUsing Service-Linked Roles\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html)\nin the IAM User Guide.\n To attach a policy to this service-linked role, you must make the request using\nthe AWS service that depends on this role." ([create-service-linked-role-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-service-linked-role-request create-service-linked-role-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/create-service-linked-role-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/create-service-linked-role-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateServiceLinkedRoleResult", :http.request.configuration/action "CreateServiceLinkedRole", :http.request.configuration/output-deser-fn response-create-service-linked-role-response, :http.request.spec/error-spec {"InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef create-service-linked-role :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/create-service-linked-role-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/create-service-linked-role-response))

(clojure.core/defn detach-user-policy "Removes the specified managed policy from the specified user.\n A user can also have inline policies embedded with it. To delete an inline\npolicy, use the DeleteUserPolicy API. For information about policies, see\nManaged Policies and Inline Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide." ([detach-user-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-detach-user-policy-request detach-user-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/detach-user-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DetachUserPolicy", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef detach-user-policy :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/detach-user-policy-request) :ret clojure.core/true?)

(clojure.core/defn put-user-policy "Adds or updates an inline policy document that is embedded in the specified IAM\nuser.\n An IAM user can also have a managed policy attached to it. To attach a managed\npolicy to a user, use AttachUserPolicy. To create a new managed policy, use\nCreatePolicy. For information about policies, see Managed Policies and Inline\nPolicies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide.\n For information about limits on the number of inline policies that you can\nembed in a user, see Limitations on IAM Entities\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in\nthe IAM User Guide.\n Because policy documents can be large, you should use POST rather than GET when\ncalling PutUserPolicy. For general information about using the Query API with\nIAM, go to Making Query Requests\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html) in the\nIAM User Guide." ([put-user-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-put-user-policy-request put-user-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/put-user-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "PutUserPolicy", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "MalformedPolicyDocumentException" :portkey.aws.iam.-2010-05-08/malformed-policy-document-exception, "NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef put-user-policy :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/put-user-policy-request) :ret clojure.core/true?)

(clojure.core/defn update-signing-certificate "Changes the status of the specified user signing certificate from active to\ndisabled, or vice versa. This operation can be used to disable an IAM user's\nsigning certificate as part of a certificate rotation work flow.\n If the UserName field is not specified, the user name is determined implicitly\nbased on the AWS access key ID used to sign the request. This operation works\nfor access keys under the AWS account. Consequently, you can use this operation\nto manage AWS account root user credentials even if the AWS account has no\nassociated users." ([update-signing-certificate-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-signing-certificate-request update-signing-certificate-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/update-signing-certificate-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateSigningCertificate", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef update-signing-certificate :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/update-signing-certificate-request) :ret clojure.core/true?)

(clojure.core/defn get-user-policy "Retrieves the specified inline policy document that is embedded in the specified\nIAM user.\n Policies returned by this API are URL-encoded compliant with RFC 3986\n(https://tools.ietf.org/html/rfc3986). You can use a URL decoding method to\nconvert the policy back to plain JSON text. For example, if you use Java, you\ncan use the decode method of the java.net.URLDecoder utility class in the Java\nSDK. Other languages and SDKs provide similar functionality.\n An IAM user can also have managed policies attached to it. To retrieve a\nmanaged policy document that is attached to a user, use GetPolicy to determine\nthe policy's default version, then use GetPolicyVersion to retrieve the policy\ndocument.\n For more information about policies, see Managed Policies and Inline Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide." ([get-user-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-user-policy-request get-user-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/get-user-policy-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/get-user-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GetUserPolicyResult", :http.request.configuration/action "GetUserPolicy", :http.request.configuration/output-deser-fn response-get-user-policy-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef get-user-policy :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/get-user-policy-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/get-user-policy-response))

(clojure.core/defn untag-user "Removes the specified tags from the user. For more information about tagging,\nsee Tagging IAM Identities\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User\nGuide." ([untag-user-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-untag-user-request untag-user-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/untag-user-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UntagUser", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ConcurrentModificationException" :portkey.aws.iam.-2010-05-08/concurrent-modification-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef untag-user :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/untag-user-request) :ret clojure.core/true?)

(clojure.core/defn generate-service-last-accessed-details "Generates a request for a report that includes details about when an IAM\nresource (user, group, role, or policy) was last used in an attempt to access\nAWS services. Recent activity usually appears within four hours. IAM reports\nactivity for the last 365 days, or less if your region began supporting this\nfeature within the last year. For more information, see Regions Where Data Is\nTracked\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period).\n The service last accessed data includes all attempts to access an AWS API, not\njust the successful ones. This includes all attempts that were made using the\nAWS Management Console, the AWS API through any of the SDKs, or any of the\ncommand line tools. An unexpected entry in the service last accessed data does\nnot mean that your account has been compromised, because the request might have\nbeen denied. Refer to your CloudTrail logs as the authoritative source for\ninformation about all API calls and whether they were successful or denied\naccess. For more information, see Logging IAM Events with CloudTrail\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html) in\nthe IAM User Guide.\n The GenerateServiceLastAccessedDetails operation returns a JobId. Use this\nparameter in the following operations to retrieve the following details from\nyour report:\n * GetServiceLastAccessedDetails – Use this operation for users, groups, roles,\nor policies to list every AWS service that the resource could access using\npermissions policies. For each service, the response includes information about\nthe most recent access attempt.\n * GetServiceLastAccessedDetailsWithEntities – Use this operation for groups and\npolicies to list information about the associated entities (users or roles) that\nattempted to access a specific AWS service.\n To check the status of the GenerateServiceLastAccessedDetails request, use the\nJobId parameter in the same operations and test the JobStatus response\nparameter.\n For additional information about the permissions policies that allow an\nidentity (user, group, or role) to access specific services, use the\nListPoliciesGrantingServiceAccess operation.\n Service last accessed data does not use other policy types when determining\nwhether a resource could access a service. These other policy types include\nresource-based policies, access control lists, AWS Organizations policies, IAM\npermissions boundaries, and AWS STS assume role policies. It only applies\npermissions policy logic. For more about the evaluation of policy types, see\nEvaluating Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics)\nin the IAM User Guide.\n For more information about service last accessed data, see Reducing Policy\nScope by Viewing User Activity\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html)\nin the IAM User Guide." ([generate-service-last-accessed-details-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-generate-service-last-accessed-details-request generate-service-last-accessed-details-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/generate-service-last-accessed-details-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/generate-service-last-accessed-details-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GenerateServiceLastAccessedDetailsResult", :http.request.configuration/action "GenerateServiceLastAccessedDetails", :http.request.configuration/output-deser-fn response-generate-service-last-accessed-details-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception}})))))
(clojure.spec.alpha/fdef generate-service-last-accessed-details :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/generate-service-last-accessed-details-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/generate-service-last-accessed-details-response))

(clojure.core/defn create-access-key " Creates a new AWS secret access key and corresponding AWS access key ID for the\nspecified user. The default status for new keys is Active.\n If you do not specify a user name, IAM determines the user name implicitly\nbased on the AWS access key ID signing the request. This operation works for\naccess keys under the AWS account. Consequently, you can use this operation to\nmanage AWS account root user credentials. This is true even if the AWS account\nhas no associated users.\n For information about limits on the number of keys you can create, see\nLimitations on IAM Entities\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in\nthe IAM User Guide.\n To ensure the security of your AWS account, the secret access key is accessible\nonly during key and user creation. You must save the key (for example, in a text\nfile) if you want to be able to access it again. If a secret key is lost, you\ncan delete the access keys for the associated user and then create new keys." ([] (create-access-key {})) ([create-access-key-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-access-key-request create-access-key-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/create-access-key-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/create-access-key-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateAccessKeyResult", :http.request.configuration/action "CreateAccessKey", :http.request.configuration/output-deser-fn response-create-access-key-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef create-access-key :args (clojure.spec.alpha/? :portkey.aws.iam.-2010-05-08/create-access-key-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/create-access-key-response))

(clojure.core/defn delete-user-permissions-boundary "Deletes the permissions boundary for the specified IAM user.\n Deleting the permissions boundary for a user might increase its permissions by\nallowing the user to perform all the actions granted in its permissions\npolicies." ([delete-user-permissions-boundary-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-user-permissions-boundary-request delete-user-permissions-boundary-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/delete-user-permissions-boundary-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteUserPermissionsBoundary", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef delete-user-permissions-boundary :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/delete-user-permissions-boundary-request) :ret clojure.core/true?)

(clojure.core/defn delete-account-password-policy "Deletes the password policy for the AWS account. There are no parameters." ([] (delete-account-password-policy {})) ([_] (clojure.core/let [request-function-result__22119__auto__ {}] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec nil, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteAccountPasswordPolicy", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef delete-account-password-policy :args clojure.core/empty? :ret clojure.core/true?)

(clojure.core/defn add-client-id-to-open-id-connect-provider "Adds a new client ID (also known as audience) to the list of client IDs already\nregistered for the specified IAM OpenID Connect (OIDC) provider resource.\n This operation is idempotent; it does not fail or return an error if you add an\nexisting client ID to the provider." ([add-client-id-to-open-id-connect-provider-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-add-client-id-to-open-id-connect-provider-request add-client-id-to-open-id-connect-provider-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/add-client-id-to-open-id-connect-provider-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AddClientIDToOpenIDConnectProvider", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef add-client-id-to-open-id-connect-provider :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/add-client-id-to-open-id-connect-provider-request) :ret clojure.core/true?)

(clojure.core/defn create-saml-provider "Creates an IAM resource that describes an identity provider (IdP) that supports\nSAML 2.0.\n The SAML provider resource that you create with this operation can be used as a\nprincipal in an IAM role's trust policy. Such a policy can enable federated\nusers who sign-in using the SAML IdP to assume the role. You can create an IAM\nrole that supports Web-based single sign-on (SSO) to the AWS Management Console\nor one that supports API access to AWS.\n When you create the SAML provider resource, you upload a SAML metadata document\nthat you get from your IdP. That document includes the issuer's name, expiration\ninformation, and keys that can be used to validate the SAML authentication\nresponse (assertions) that the IdP sends. You must generate the metadata\ndocument using the identity management software that is used as your\norganization's IdP.\n This operation requires Signature Version 4\n(http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html).\n For more information, see Enabling SAML 2.0 Federated Users to Access the AWS\nManagement Console\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html)\nand About SAML 2.0-based Federation\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html)\nin the IAM User Guide." ([create-saml-provider-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-saml-provider-request create-saml-provider-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/create-saml-provider-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/create-saml-provider-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateSAMLProviderResult", :http.request.configuration/action "CreateSAMLProvider", :http.request.configuration/output-deser-fn response-create-saml-provider-response, :http.request.spec/error-spec {"InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "EntityAlreadyExistsException" :portkey.aws.iam.-2010-05-08/entity-already-exists-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef create-saml-provider :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/create-saml-provider-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/create-saml-provider-response))

(clojure.core/defn delete-open-id-connect-provider "Deletes an OpenID Connect identity provider (IdP) resource object in IAM.\n Deleting an IAM OIDC provider resource does not update any roles that reference\nthe provider as a principal in their trust policies. Any attempt to assume a\nrole that references a deleted provider fails.\n This operation is idempotent; it does not fail or return an error if you call\nthe operation for a provider that does not exist." ([delete-open-id-connect-provider-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-open-id-connect-provider-request delete-open-id-connect-provider-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/delete-open-id-connect-provider-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteOpenIDConnectProvider", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef delete-open-id-connect-provider :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/delete-open-id-connect-provider-request) :ret clojure.core/true?)

(clojure.core/defn reset-service-specific-credential "Resets the password for a service-specific credential. The new password is AWS\ngenerated and cryptographically strong. It cannot be configured by the user.\nResetting the password immediately invalidates the previous password associated\nwith this user." ([reset-service-specific-credential-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-reset-service-specific-credential-request reset-service-specific-credential-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/reset-service-specific-credential-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/reset-service-specific-credential-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ResetServiceSpecificCredentialResult", :http.request.configuration/action "ResetServiceSpecificCredential", :http.request.configuration/output-deser-fn response-reset-service-specific-credential-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception}})))))
(clojure.spec.alpha/fdef reset-service-specific-credential :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/reset-service-specific-credential-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/reset-service-specific-credential-response))

(clojure.core/defn list-entities-for-policy "Lists all IAM users, groups, and roles that the specified managed policy is\nattached to.\n You can use the optional EntityFilter parameter to limit the results to a\nparticular type of entity (users, groups, or roles). For example, to list only\nthe roles that are attached to the specified policy, set EntityFilter to Role.\n You can paginate the results using the MaxItems and Marker parameters." ([list-entities-for-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-entities-for-policy-request list-entities-for-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-entities-for-policy-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-entities-for-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListEntitiesForPolicyResult", :http.request.configuration/action "ListEntitiesForPolicy", :http.request.configuration/output-deser-fn response-list-entities-for-policy-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef list-entities-for-policy :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/list-entities-for-policy-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-entities-for-policy-response))

(clojure.core/defn list-user-tags "Lists the tags that are attached to the specified user. The returned list of\ntags is sorted by tag key. For more information about tagging, see Tagging IAM\nIdentities (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the\nIAM User Guide." ([list-user-tags-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-user-tags-request list-user-tags-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-user-tags-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-user-tags-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListUserTagsResult", :http.request.configuration/action "ListUserTags", :http.request.configuration/output-deser-fn response-list-user-tags-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef list-user-tags :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/list-user-tags-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-user-tags-response))

(clojure.core/defn delete-ssh-public-key "Deletes the specified SSH public key.\n The SSH public key deleted by this operation is used only for authenticating\nthe associated IAM user to an AWS CodeCommit repository. For more information\nabout using SSH keys to authenticate to an AWS CodeCommit repository, see Set up\nAWS CodeCommit for SSH Connections\n(http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html)\nin the AWS CodeCommit User Guide." ([delete-ssh-public-key-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-ssh-public-key-request delete-ssh-public-key-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/delete-ssh-public-key-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteSSHPublicKey", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception}})))))
(clojure.spec.alpha/fdef delete-ssh-public-key :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/delete-ssh-public-key-request) :ret clojure.core/true?)

(clojure.core/defn delete-role-policy "Deletes the specified inline policy that is embedded in the specified IAM role.\n A role can also have managed policies attached to it. To detach a managed\npolicy from a role, use DetachRolePolicy. For more information about policies,\nrefer to Managed Policies and Inline Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide." ([delete-role-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-role-policy-request delete-role-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/delete-role-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteRolePolicy", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "UnmodifiableEntityException" :portkey.aws.iam.-2010-05-08/unmodifiable-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef delete-role-policy :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/delete-role-policy-request) :ret clojure.core/true?)

(clojure.core/defn change-password "Changes the password of the IAM user who is calling this operation. The AWS\naccount root user password is not affected by this operation.\n To change the password for a different user, see UpdateLoginProfile. For more\ninformation about modifying passwords, see Managing Passwords\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html) in\nthe IAM User Guide." ([change-password-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-change-password-request change-password-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/change-password-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "ChangePassword", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "InvalidUserTypeException" :portkey.aws.iam.-2010-05-08/invalid-user-type-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "EntityTemporarilyUnmodifiableException" :portkey.aws.iam.-2010-05-08/entity-temporarily-unmodifiable-exception, "PasswordPolicyViolationException" :portkey.aws.iam.-2010-05-08/password-policy-violation-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef change-password :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/change-password-request) :ret clojure.core/true?)

(clojure.core/defn update-ssh-public-key "Sets the status of an IAM user's SSH public key to active or inactive. SSH\npublic keys that are inactive cannot be used for authentication. This operation\ncan be used to disable a user's SSH public key as part of a key rotation work\nflow.\n The SSH public key affected by this operation is used only for authenticating\nthe associated IAM user to an AWS CodeCommit repository. For more information\nabout using SSH keys to authenticate to an AWS CodeCommit repository, see Set up\nAWS CodeCommit for SSH Connections\n(http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html)\nin the AWS CodeCommit User Guide." ([update-ssh-public-key-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-ssh-public-key-request update-ssh-public-key-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/update-ssh-public-key-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateSSHPublicKey", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception}})))))
(clojure.spec.alpha/fdef update-ssh-public-key :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/update-ssh-public-key-request) :ret clojure.core/true?)

(clojure.core/defn remove-role-from-instance-profile "Removes the specified IAM role from the specified EC2 instance profile.\n Make sure that you do not have any Amazon EC2 instances running with the role\nyou are about to remove from the instance profile. Removing a role from an\ninstance profile that is associated with a running instance might break any\napplications running on the instance.\n For more information about IAM roles, go to Working with Roles\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html). For\nmore information about instance profiles, go to About Instance Profiles\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html)." ([remove-role-from-instance-profile-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-remove-role-from-instance-profile-request remove-role-from-instance-profile-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/remove-role-from-instance-profile-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RemoveRoleFromInstanceProfile", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "UnmodifiableEntityException" :portkey.aws.iam.-2010-05-08/unmodifiable-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef remove-role-from-instance-profile :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/remove-role-from-instance-profile-request) :ret clojure.core/true?)

(clojure.core/defn get-server-certificate "Retrieves information about the specified server certificate stored in IAM.\n For more information about working with server certificates, see Working with\nServer Certificates\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html)\nin the IAM User Guide. This topic includes a list of AWS services that can use\nthe server certificates that you manage with IAM." ([get-server-certificate-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-server-certificate-request get-server-certificate-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/get-server-certificate-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/get-server-certificate-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GetServerCertificateResult", :http.request.configuration/action "GetServerCertificate", :http.request.configuration/output-deser-fn response-get-server-certificate-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef get-server-certificate :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/get-server-certificate-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/get-server-certificate-response))

(clojure.core/defn get-account-password-policy "Retrieves the password policy for the AWS account. For more information about\nusing a password policy, go to Managing an IAM Password Policy\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html)." ([] (get-account-password-policy {})) ([_] (clojure.core/let [request-function-result__22119__auto__ {}] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/get-account-password-policy-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec nil, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GetAccountPasswordPolicyResult", :http.request.configuration/action "GetAccountPasswordPolicy", :http.request.configuration/output-deser-fn response-get-account-password-policy-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef get-account-password-policy :args clojure.core/empty? :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/get-account-password-policy-response))

(clojure.core/defn list-attached-role-policies "Lists all managed policies that are attached to the specified IAM role.\n An IAM role can also have inline policies embedded with it. To list the inline\npolicies for a role, use the ListRolePolicies API. For information about\npolicies, see Managed Policies and Inline Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide.\n You can paginate the results using the MaxItems and Marker parameters. You can\nuse the PathPrefix parameter to limit the list of policies to only those\nmatching the specified path prefix. If there are no policies attached to the\nspecified role (or none that match the specified path prefix), the operation\nreturns an empty list." ([list-attached-role-policies-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-attached-role-policies-request list-attached-role-policies-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-attached-role-policies-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-attached-role-policies-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListAttachedRolePoliciesResult", :http.request.configuration/action "ListAttachedRolePolicies", :http.request.configuration/output-deser-fn response-list-attached-role-policies-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef list-attached-role-policies :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/list-attached-role-policies-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-attached-role-policies-response))

(clojure.core/defn set-default-policy-version "Sets the specified version of the specified policy as the policy's default\n(operative) version.\n This operation affects all users, groups, and roles that the policy is attached\nto. To list the users, groups, and roles that the policy is attached to, use the\nListEntitiesForPolicy API.\n For information about managed policies, see Managed Policies and Inline\nPolicies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide." ([set-default-policy-version-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-set-default-policy-version-request set-default-policy-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/set-default-policy-version-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "SetDefaultPolicyVersion", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef set-default-policy-version :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/set-default-policy-version-request) :ret clojure.core/true?)

(clojure.core/defn list-open-id-connect-providers "Lists information about the IAM OpenID Connect (OIDC) provider resource objects\ndefined in the AWS account." ([] (list-open-id-connect-providers {})) ([list-open-id-connect-providers-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-open-id-connect-providers-request list-open-id-connect-providers-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-open-id-connect-providers-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-open-id-connect-providers-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListOpenIDConnectProvidersResult", :http.request.configuration/action "ListOpenIDConnectProviders", :http.request.configuration/output-deser-fn response-list-open-id-connect-providers-response, :http.request.spec/error-spec {"ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef list-open-id-connect-providers :args (clojure.spec.alpha/? :portkey.aws.iam.-2010-05-08/list-open-id-connect-providers-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-open-id-connect-providers-response))

(clojure.core/defn list-access-keys "Returns information about the access key IDs associated with the specified IAM\nuser. If there is none, the operation returns an empty list.\n Although each user is limited to a small number of keys, you can still paginate\nthe results using the MaxItems and Marker parameters.\n If the UserName field is not specified, the user name is determined implicitly\nbased on the AWS access key ID used to sign the request. This operation works\nfor access keys under the AWS account. Consequently, you can use this operation\nto manage AWS account root user credentials even if the AWS account has no\nassociated users.\n To ensure the security of your AWS account, the secret access key is accessible\nonly during key and user creation." ([] (list-access-keys {})) ([list-access-keys-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-access-keys-request list-access-keys-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-access-keys-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-access-keys-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListAccessKeysResult", :http.request.configuration/action "ListAccessKeys", :http.request.configuration/output-deser-fn response-list-access-keys-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef list-access-keys :args (clojure.spec.alpha/? :portkey.aws.iam.-2010-05-08/list-access-keys-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-access-keys-response))

(clojure.core/defn delete-virtual-mfa-device "Deletes a virtual MFA device.\n You must deactivate a user's virtual MFA device before you can delete it. For\ninformation about deactivating MFA devices, see DeactivateMFADevice." ([delete-virtual-mfa-device-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-virtual-mfa-device-request delete-virtual-mfa-device-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/delete-virtual-mfa-device-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteVirtualMFADevice", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "DeleteConflictException" :portkey.aws.iam.-2010-05-08/delete-conflict-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef delete-virtual-mfa-device :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/delete-virtual-mfa-device-request) :ret clojure.core/true?)

(clojure.core/defn get-group-policy "Retrieves the specified inline policy document that is embedded in the specified\nIAM group.\n Policies returned by this API are URL-encoded compliant with RFC 3986\n(https://tools.ietf.org/html/rfc3986). You can use a URL decoding method to\nconvert the policy back to plain JSON text. For example, if you use Java, you\ncan use the decode method of the java.net.URLDecoder utility class in the Java\nSDK. Other languages and SDKs provide similar functionality.\n An IAM group can also have managed policies attached to it. To retrieve a\nmanaged policy document that is attached to a group, use GetPolicy to determine\nthe policy's default version, then use GetPolicyVersion to retrieve the policy\ndocument.\n For more information about policies, see Managed Policies and Inline Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide." ([get-group-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-group-policy-request get-group-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/get-group-policy-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/get-group-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GetGroupPolicyResult", :http.request.configuration/action "GetGroupPolicy", :http.request.configuration/output-deser-fn response-get-group-policy-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef get-group-policy :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/get-group-policy-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/get-group-policy-response))

(clojure.core/defn put-user-permissions-boundary "Adds or updates the policy that is specified as the IAM user's permissions\nboundary. You can use an AWS managed policy or a customer managed policy to set\nthe boundary for a user. Use the boundary to control the maximum permissions\nthat the user can have. Setting a permissions boundary is an advanced feature\nthat can affect the permissions for the user.\n Policies that are used as permissions boundaries do not provide permissions.\nYou must also attach a permissions policy to the user. To learn how the\neffective permissions for a user are evaluated, see IAM JSON Policy Evaluation\nLogic\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html)\nin the IAM User Guide." ([put-user-permissions-boundary-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-put-user-permissions-boundary-request put-user-permissions-boundary-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/put-user-permissions-boundary-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "PutUserPermissionsBoundary", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "PolicyNotAttachableException" :portkey.aws.iam.-2010-05-08/policy-not-attachable-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef put-user-permissions-boundary :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/put-user-permissions-boundary-request) :ret clojure.core/true?)

(clojure.core/defn create-policy "Creates a new managed policy for your AWS account.\n This operation creates a policy version with a version identifier of v1 and\nsets v1 as the policy's default version. For more information about policy\nversions, see Versioning for Managed Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html)\nin the IAM User Guide.\n For more information about managed policies in general, see Managed Policies\nand Inline Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide." ([create-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-policy-request create-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/create-policy-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/create-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreatePolicyResult", :http.request.configuration/action "CreatePolicy", :http.request.configuration/output-deser-fn response-create-policy-response, :http.request.spec/error-spec {"InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "EntityAlreadyExistsException" :portkey.aws.iam.-2010-05-08/entity-already-exists-exception, "MalformedPolicyDocumentException" :portkey.aws.iam.-2010-05-08/malformed-policy-document-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef create-policy :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/create-policy-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/create-policy-response))

(clojure.core/defn tag-user "Adds one or more tags to an IAM user. If a tag with the same key name already\nexists, then that tag is overwritten with the new value.\n A tag consists of a key name and an associated value. By assigning tags to your\nresources, you can do the following:\n * Administrative grouping and discovery - Attach tags to resources to aid in\norganization and search. For example, you could search for all resources with\nthe key name Project and the value MyImportantProject. Or search for all\nresources with the key name Cost Center and the value 41200.\n * Access control - Reference tags in IAM user-based and resource-based\npolicies. You can use tags to restrict access to only an IAM requesting user or\nto a role that has a specified tag attached. You can also restrict access to\nonly those resources that have a certain tag attached. For examples of policies\nthat show how to use tags to control access, see Control Access Using IAM Tags\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html) in the IAM\nUser Guide.\n * Cost allocation - Use tags to help track which individuals and teams are\nusing which AWS resources.\n * Make sure that you have no invalid tags and that you do not exceed the\nallowed number of tags per role. In either case, the entire request fails and no\ntags are added to the role.\n * AWS always interprets the tag Value as a single string. If you need to store\nan array, you can store comma-separated values in the string. However, you must\ninterpret the value in your code.\n For more information about tagging, see Tagging IAM Identities\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User\nGuide." ([tag-user-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-tag-user-request tag-user-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/tag-user-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "TagUser", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "ConcurrentModificationException" :portkey.aws.iam.-2010-05-08/concurrent-modification-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef tag-user :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/tag-user-request) :ret clojure.core/true?)

(clojure.core/defn list-users "Lists the IAM users that have the specified path prefix. If no path prefix is\nspecified, the operation returns all users in the AWS account. If there are\nnone, the operation returns an empty list.\n You can paginate the results using the MaxItems and Marker parameters." ([] (list-users {})) ([list-users-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-users-request list-users-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-users-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-users-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListUsersResult", :http.request.configuration/action "ListUsers", :http.request.configuration/output-deser-fn response-list-users-response, :http.request.spec/error-spec {"ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef list-users :args (clojure.spec.alpha/? :portkey.aws.iam.-2010-05-08/list-users-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-users-response))

(clojure.core/defn list-role-policies "Lists the names of the inline policies that are embedded in the specified IAM\nrole.\n An IAM role can also have managed policies attached to it. To list the managed\npolicies that are attached to a role, use ListAttachedRolePolicies. For more\ninformation about policies, see Managed Policies and Inline Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide.\n You can paginate the results using the MaxItems and Marker parameters. If there\nare no inline policies embedded with the specified role, the operation returns\nan empty list." ([list-role-policies-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-role-policies-request list-role-policies-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-role-policies-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-role-policies-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListRolePoliciesResult", :http.request.configuration/action "ListRolePolicies", :http.request.configuration/output-deser-fn response-list-role-policies-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef list-role-policies :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/list-role-policies-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-role-policies-response))

(clojure.core/defn delete-user-policy "Deletes the specified inline policy that is embedded in the specified IAM user.\n A user can also have managed policies attached to it. To detach a managed\npolicy from a user, use DetachUserPolicy. For more information about policies,\nrefer to Managed Policies and Inline Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide." ([delete-user-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-user-policy-request delete-user-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/delete-user-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteUserPolicy", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef delete-user-policy :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/delete-user-policy-request) :ret clojure.core/true?)

(clojure.core/defn create-account-alias "Creates an alias for your AWS account. For information about using an AWS\naccount alias, see Using an Alias for Your AWS Account ID\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html) in the IAM\nUser Guide." ([create-account-alias-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-account-alias-request create-account-alias-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/create-account-alias-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "CreateAccountAlias", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"EntityAlreadyExistsException" :portkey.aws.iam.-2010-05-08/entity-already-exists-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef create-account-alias :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/create-account-alias-request) :ret clojure.core/true?)

(clojure.core/defn delete-service-linked-role "Submits a service-linked role deletion request and returns a DeletionTaskId,\nwhich you can use to check the status of the deletion. Before you call this\noperation, confirm that the role has no active sessions and that any resources\nused by the role in the linked service are deleted. If you call this operation\nmore than once for the same service-linked role and an earlier deletion task is\nnot complete, then the DeletionTaskId of the earlier request is returned.\n If you submit a deletion request for a service-linked role whose linked service\nis still accessing a resource, then the deletion task fails. If it fails, the\nGetServiceLinkedRoleDeletionStatus API operation returns the reason for the\nfailure, usually including the resources that must be deleted. To delete the\nservice-linked role, you must first remove those resources from the linked\nservice and then submit the deletion request again. Resources are specific to\nthe service that is linked to the role. For more information about removing\nresources from a service, see the AWS documentation\n(http://docs.aws.amazon.com/) for your service.\n For more information about service-linked roles, see Roles Terms and Concepts:\nAWS Service-Linked Role\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role)\nin the IAM User Guide." ([delete-service-linked-role-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-service-linked-role-request delete-service-linked-role-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/delete-service-linked-role-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/delete-service-linked-role-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteServiceLinkedRoleResult", :http.request.configuration/action "DeleteServiceLinkedRole", :http.request.configuration/output-deser-fn response-delete-service-linked-role-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef delete-service-linked-role :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/delete-service-linked-role-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/delete-service-linked-role-response))

(clojure.core/defn update-server-certificate "Updates the name and/or the path of the specified server certificate stored in\nIAM.\n For more information about working with server certificates, see Working with\nServer Certificates\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html)\nin the IAM User Guide. This topic also includes a list of AWS services that can\nuse the server certificates that you manage with IAM.\n You should understand the implications of changing a server certificate's path\nor name. For more information, see Renaming a Server Certificate\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts)\nin the IAM User Guide.\n The person making the request (the principal), must have permission to change\nthe server certificate with the old name and the new name. For example, to\nchange the certificate named ProductionCert to ProdCert, the principal must have\na policy that allows them to update both certificates. If the principal has\npermission to update the ProductionCert group, but not the ProdCert certificate,\nthen the update fails. For more information about permissions, see Access\nManagement (http://docs.aws.amazon.com/IAM/latest/UserGuide/access.html) in the\nIAM User Guide." ([update-server-certificate-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-server-certificate-request update-server-certificate-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/update-server-certificate-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateServerCertificate", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "EntityAlreadyExistsException" :portkey.aws.iam.-2010-05-08/entity-already-exists-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef update-server-certificate :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/update-server-certificate-request) :ret clojure.core/true?)

(clojure.core/defn simulate-principal-policy "Simulate how a set of IAM policies attached to an IAM entity works with a list\nof API operations and AWS resources to determine the policies' effective\npermissions. The entity can be an IAM user, group, or role. If you specify a\nuser, then the simulation also includes all of the policies that are attached to\ngroups that the user belongs to.\n You can optionally include a list of one or more additional policies specified\nas strings to include in the simulation. If you want to simulate only policies\nspecified as strings, use SimulateCustomPolicy instead.\n You can also optionally include one resource-based policy to be evaluated with\neach of the resources included in the simulation.\n The simulation does not perform the API operations, it only checks the\nauthorization to determine if the simulated policies allow or deny the\noperations.\n Note: This API discloses information about the permissions granted to other\nusers. If you do not want users to see other user's permissions, then consider\nallowing them to use SimulateCustomPolicy instead.\n Context keys are variables maintained by AWS and its services that provide\ndetails about the context of an API query request. You can use the Condition\nelement of an IAM policy to evaluate context keys. To get the list of context\nkeys that the policies require for correct simulation, use\nGetContextKeysForPrincipalPolicy.\n If the output is long, you can use the MaxItems and Marker parameters to\npaginate the results." ([simulate-principal-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-simulate-principal-policy-request simulate-principal-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/simulate-policy-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/simulate-principal-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "SimulatePrincipalPolicyResult", :http.request.configuration/action "SimulatePrincipalPolicy", :http.request.configuration/output-deser-fn response-simulate-policy-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "PolicyEvaluationException" :portkey.aws.iam.-2010-05-08/policy-evaluation-exception}})))))
(clojure.spec.alpha/fdef simulate-principal-policy :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/simulate-principal-policy-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/simulate-policy-response))

(clojure.core/defn list-server-certificates "Lists the server certificates stored in IAM that have the specified path prefix.\nIf none exist, the operation returns an empty list.\n You can paginate the results using the MaxItems and Marker parameters.\n For more information about working with server certificates, see Working with\nServer Certificates\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html)\nin the IAM User Guide. This topic also includes a list of AWS services that can\nuse the server certificates that you manage with IAM." ([] (list-server-certificates {})) ([list-server-certificates-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-server-certificates-request list-server-certificates-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-server-certificates-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-server-certificates-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListServerCertificatesResult", :http.request.configuration/action "ListServerCertificates", :http.request.configuration/output-deser-fn response-list-server-certificates-response, :http.request.spec/error-spec {"ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef list-server-certificates :args (clojure.spec.alpha/? :portkey.aws.iam.-2010-05-08/list-server-certificates-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-server-certificates-response))

(clojure.core/defn get-role "Retrieves information about the specified role, including the role's path, GUID,\nARN, and the role's trust policy that grants permission to assume the role. For\nmore information about roles, see Working with Roles\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html).\n Policies returned by this API are URL-encoded compliant with RFC 3986\n(https://tools.ietf.org/html/rfc3986). You can use a URL decoding method to\nconvert the policy back to plain JSON text. For example, if you use Java, you\ncan use the decode method of the java.net.URLDecoder utility class in the Java\nSDK. Other languages and SDKs provide similar functionality." ([get-role-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-role-request get-role-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/get-role-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/get-role-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GetRoleResult", :http.request.configuration/action "GetRole", :http.request.configuration/output-deser-fn response-get-role-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef get-role :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/get-role-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/get-role-response))

(clojure.core/defn put-group-policy "Adds or updates an inline policy document that is embedded in the specified IAM\ngroup.\n A user can also have managed policies attached to it. To attach a managed\npolicy to a group, use AttachGroupPolicy. To create a new managed policy, use\nCreatePolicy. For information about policies, see Managed Policies and Inline\nPolicies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide.\n For information about limits on the number of inline policies that you can\nembed in a group, see Limitations on IAM Entities\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in\nthe IAM User Guide.\n Because policy documents can be large, you should use POST rather than GET when\ncalling PutGroupPolicy. For general information about using the Query API with\nIAM, go to Making Query Requests\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html) in the\nIAM User Guide." ([put-group-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-put-group-policy-request put-group-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/put-group-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "PutGroupPolicy", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "MalformedPolicyDocumentException" :portkey.aws.iam.-2010-05-08/malformed-policy-document-exception, "NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef put-group-policy :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/put-group-policy-request) :ret clojure.core/true?)

(clojure.core/defn list-virtual-mfa-devices "Lists the virtual MFA devices defined in the AWS account by assignment status.\nIf you do not specify an assignment status, the operation returns a list of all\nvirtual MFA devices. Assignment status can be Assigned, Unassigned, or Any.\n You can paginate the results using the MaxItems and Marker parameters." ([] (list-virtual-mfa-devices {})) ([list-virtual-mfa-devices-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-virtual-mfa-devices-request list-virtual-mfa-devices-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-virtual-mfa-devices-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-virtual-mfa-devices-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListVirtualMFADevicesResult", :http.request.configuration/action "ListVirtualMFADevices", :http.request.configuration/output-deser-fn response-list-virtual-mfa-devices-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef list-virtual-mfa-devices :args (clojure.spec.alpha/? :portkey.aws.iam.-2010-05-08/list-virtual-mfa-devices-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-virtual-mfa-devices-response))

(clojure.core/defn list-role-tags "Lists the tags that are attached to the specified role. The returned list of\ntags is sorted by tag key. For more information about tagging, see Tagging IAM\nIdentities (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the\nIAM User Guide." ([list-role-tags-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-role-tags-request list-role-tags-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-role-tags-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-role-tags-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListRoleTagsResult", :http.request.configuration/action "ListRoleTags", :http.request.configuration/output-deser-fn response-list-role-tags-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef list-role-tags :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/list-role-tags-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-role-tags-response))

(clojure.core/defn generate-credential-report " Generates a credential report for the AWS account. For more information about\nthe credential report, see Getting Credential Reports\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html) in the\nIAM User Guide." ([] (generate-credential-report {})) ([_] (clojure.core/let [request-function-result__22119__auto__ {}] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/generate-credential-report-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec nil, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GenerateCredentialReportResult", :http.request.configuration/action "GenerateCredentialReport", :http.request.configuration/output-deser-fn response-generate-credential-report-response, :http.request.spec/error-spec {"LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef generate-credential-report :args clojure.core/empty? :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/generate-credential-report-response))

(clojure.core/defn delete-access-key "Deletes the access key pair associated with the specified IAM user.\n If you do not specify a user name, IAM determines the user name implicitly\nbased on the AWS access key ID signing the request. This operation works for\naccess keys under the AWS account. Consequently, you can use this operation to\nmanage AWS account root user credentials even if the AWS account has no\nassociated users." ([delete-access-key-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-access-key-request delete-access-key-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/delete-access-key-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteAccessKey", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef delete-access-key :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/delete-access-key-request) :ret clojure.core/true?)

(clojure.core/defn get-service-last-accessed-details "After you generate a user, group, role, or policy report using the\nGenerateServiceLastAccessedDetails operation, you can use the JobId parameter in\nGetServiceLastAccessedDetails. This operation retrieves the status of your\nreport job and a list of AWS services that the resource (user, group, role, or\nmanaged policy) can access.\n Service last accessed data does not use other policy types when determining\nwhether a resource could access a service. These other policy types include\nresource-based policies, access control lists, AWS Organizations policies, IAM\npermissions boundaries, and AWS STS assume role policies. It only applies\npermissions policy logic. For more about the evaluation of policy types, see\nEvaluating Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics)\nin the IAM User Guide.\n For each service that the resource could access using permissions policies, the\noperation returns details about the most recent access attempt. If there was no\nattempt, the service is listed without details about the most recent attempt to\naccess the service. If the operation fails, the GetServiceLastAccessedDetails\noperation returns the reason that it failed.\n The GetServiceLastAccessedDetails operation returns a list of services that\nincludes the number of entities that have attempted to access the service and\nthe date and time of the last attempt. It also returns the ARN of the following\nentity, depending on the resource ARN that you used to generate the report:\n * User – Returns the user ARN that you used to generate the report\n * Group – Returns the ARN of the group member (user) that last attempted to\naccess the service\n * Role – Returns the role ARN that you used to generate the report\n * Policy – Returns the ARN of the user or role that last used the policy to\nattempt to access the service\n By default, the list is sorted by service namespace." ([get-service-last-accessed-details-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-service-last-accessed-details-request get-service-last-accessed-details-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/get-service-last-accessed-details-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/get-service-last-accessed-details-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GetServiceLastAccessedDetailsResult", :http.request.configuration/action "GetServiceLastAccessedDetails", :http.request.configuration/output-deser-fn response-get-service-last-accessed-details-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception}})))))
(clojure.spec.alpha/fdef get-service-last-accessed-details :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/get-service-last-accessed-details-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/get-service-last-accessed-details-response))

(clojure.core/defn create-login-profile " Creates a password for the specified user, giving the user the ability to\naccess AWS services through the AWS Management Console. For more information\nabout managing passwords, see Managing Passwords\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html) in\nthe IAM User Guide." ([create-login-profile-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-login-profile-request create-login-profile-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/create-login-profile-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/create-login-profile-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateLoginProfileResult", :http.request.configuration/action "CreateLoginProfile", :http.request.configuration/output-deser-fn response-create-login-profile-response, :http.request.spec/error-spec {"EntityAlreadyExistsException" :portkey.aws.iam.-2010-05-08/entity-already-exists-exception, "NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "PasswordPolicyViolationException" :portkey.aws.iam.-2010-05-08/password-policy-violation-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef create-login-profile :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/create-login-profile-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/create-login-profile-response))

(clojure.core/defn create-group "Creates a new group.\n For information about the number of groups you can create, see Limitations on\nIAM Entities\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in\nthe IAM User Guide." ([create-group-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-group-request create-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/create-group-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/create-group-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateGroupResult", :http.request.configuration/action "CreateGroup", :http.request.configuration/output-deser-fn response-create-group-response, :http.request.spec/error-spec {"LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "EntityAlreadyExistsException" :portkey.aws.iam.-2010-05-08/entity-already-exists-exception, "NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef create-group :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/create-group-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/create-group-response))

(clojure.core/defn attach-user-policy "Attaches the specified managed policy to the specified user.\n You use this API to attach a managed policy to a user. To embed an inline\npolicy in a user, use PutUserPolicy.\n For more information about policies, see Managed Policies and Inline Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide." ([attach-user-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-attach-user-policy-request attach-user-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/attach-user-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AttachUserPolicy", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "PolicyNotAttachableException" :portkey.aws.iam.-2010-05-08/policy-not-attachable-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef attach-user-policy :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/attach-user-policy-request) :ret clojure.core/true?)

(clojure.core/defn remove-user-from-group "Removes the specified user from the specified group." ([remove-user-from-group-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-remove-user-from-group-request remove-user-from-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/remove-user-from-group-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RemoveUserFromGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef remove-user-from-group :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/remove-user-from-group-request) :ret clojure.core/true?)

(clojure.core/defn list-account-aliases "Lists the account alias associated with the AWS account (Note: you can have only\none). For information about using an AWS account alias, see Using an Alias for\nYour AWS Account ID\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html) in the IAM\nUser Guide." ([] (list-account-aliases {})) ([list-account-aliases-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-account-aliases-request list-account-aliases-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-account-aliases-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-account-aliases-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListAccountAliasesResult", :http.request.configuration/action "ListAccountAliases", :http.request.configuration/output-deser-fn response-list-account-aliases-response, :http.request.spec/error-spec {"ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef list-account-aliases :args (clojure.spec.alpha/? :portkey.aws.iam.-2010-05-08/list-account-aliases-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-account-aliases-response))

(clojure.core/defn update-role-description "Use UpdateRole instead.\n Modifies only the description of a role. This operation performs the same\nfunction as the Description parameter in the UpdateRole operation." ([update-role-description-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-role-description-request update-role-description-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/update-role-description-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/update-role-description-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "UpdateRoleDescriptionResult", :http.request.configuration/action "UpdateRoleDescription", :http.request.configuration/output-deser-fn response-update-role-description-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "UnmodifiableEntityException" :portkey.aws.iam.-2010-05-08/unmodifiable-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef update-role-description :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/update-role-description-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/update-role-description-response))

(clojure.core/defn create-open-id-connect-provider "Creates an IAM entity to describe an identity provider (IdP) that supports\nOpenID Connect (OIDC) (http://openid.net/connect/).\n The OIDC provider that you create with this operation can be used as a\nprincipal in a role's trust policy. Such a policy establishes a trust\nrelationship between AWS and the OIDC provider.\n When you create the IAM OIDC provider, you specify the following:\n * The URL of the OIDC identity provider (IdP) to trust\n * A list of client IDs (also known as audiences) that identify the application\nor applications that are allowed to authenticate using the OIDC provider\n * A list of thumbprints of the server certificate(s) that the IdP uses.\n You get all of this information from the OIDC IdP that you want to use to\naccess AWS.\n Because trust for the OIDC provider is derived from the IAM provider that this\noperation creates, it is best to limit access to the CreateOpenIDConnectProvider\noperation to highly privileged users." ([create-open-id-connect-provider-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-open-id-connect-provider-request create-open-id-connect-provider-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/create-open-id-connect-provider-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/create-open-id-connect-provider-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateOpenIDConnectProviderResult", :http.request.configuration/action "CreateOpenIDConnectProvider", :http.request.configuration/output-deser-fn response-create-open-id-connect-provider-response, :http.request.spec/error-spec {"InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "EntityAlreadyExistsException" :portkey.aws.iam.-2010-05-08/entity-already-exists-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef create-open-id-connect-provider :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/create-open-id-connect-provider-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/create-open-id-connect-provider-response))

(clojure.core/defn delete-group-policy "Deletes the specified inline policy that is embedded in the specified IAM group.\n A group can also have managed policies attached to it. To detach a managed\npolicy from a group, use DetachGroupPolicy. For more information about policies,\nrefer to Managed Policies and Inline Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide." ([delete-group-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-group-policy-request delete-group-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/delete-group-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteGroupPolicy", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef delete-group-policy :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/delete-group-policy-request) :ret clojure.core/true?)

(clojure.core/defn tag-role "Adds one or more tags to an IAM role. The role can be a regular role or a\nservice-linked role. If a tag with the same key name already exists, then that\ntag is overwritten with the new value.\n A tag consists of a key name and an associated value. By assigning tags to your\nresources, you can do the following:\n * Administrative grouping and discovery - Attach tags to resources to aid in\norganization and search. For example, you could search for all resources with\nthe key name Project and the value MyImportantProject. Or search for all\nresources with the key name Cost Center and the value 41200.\n * Access control - Reference tags in IAM user-based and resource-based\npolicies. You can use tags to restrict access to only an IAM user or role that\nhas a specified tag attached. You can also restrict access to only those\nresources that have a certain tag attached. For examples of policies that show\nhow to use tags to control access, see Control Access Using IAM Tags\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html) in the IAM\nUser Guide.\n * Cost allocation - Use tags to help track which individuals and teams are\nusing which AWS resources.\n * Make sure that you have no invalid tags and that you do not exceed the\nallowed number of tags per role. In either case, the entire request fails and no\ntags are added to the role.\n * AWS always interprets the tag Value as a single string. If you need to store\nan array, you can store comma-separated values in the string. However, you must\ninterpret the value in your code.\n For more information about tagging, see Tagging IAM Identities\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User\nGuide." ([tag-role-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-tag-role-request tag-role-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/tag-role-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "TagRole", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "ConcurrentModificationException" :portkey.aws.iam.-2010-05-08/concurrent-modification-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef tag-role :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/tag-role-request) :ret clojure.core/true?)

(clojure.core/defn get-instance-profile " Retrieves information about the specified instance profile, including the\ninstance profile's path, GUID, ARN, and role. For more information about\ninstance profiles, see About Instance Profiles\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html) in\nthe IAM User Guide." ([get-instance-profile-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-instance-profile-request get-instance-profile-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/get-instance-profile-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/get-instance-profile-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GetInstanceProfileResult", :http.request.configuration/action "GetInstanceProfile", :http.request.configuration/output-deser-fn response-get-instance-profile-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef get-instance-profile :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/get-instance-profile-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/get-instance-profile-response))

(clojure.core/defn get-account-authorization-details "Retrieves information about all IAM users, groups, roles, and policies in your\nAWS account, including their relationships to one another. Use this API to\nobtain a snapshot of the configuration of IAM permissions (users, groups, roles,\nand policies) in your account.\n Policies returned by this API are URL-encoded compliant with RFC 3986\n(https://tools.ietf.org/html/rfc3986). You can use a URL decoding method to\nconvert the policy back to plain JSON text. For example, if you use Java, you\ncan use the decode method of the java.net.URLDecoder utility class in the Java\nSDK. Other languages and SDKs provide similar functionality.\n You can optionally filter the results using the Filter parameter. You can\npaginate the results using the MaxItems and Marker parameters." ([] (get-account-authorization-details {})) ([get-account-authorization-details-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-account-authorization-details-request get-account-authorization-details-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/get-account-authorization-details-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/get-account-authorization-details-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GetAccountAuthorizationDetailsResult", :http.request.configuration/action "GetAccountAuthorizationDetails", :http.request.configuration/output-deser-fn response-get-account-authorization-details-response, :http.request.spec/error-spec {"ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef get-account-authorization-details :args (clojure.spec.alpha/? :portkey.aws.iam.-2010-05-08/get-account-authorization-details-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/get-account-authorization-details-response))

(clojure.core/defn delete-policy "Deletes the specified managed policy.\n Before you can delete a managed policy, you must first detach the policy from\nall users, groups, and roles that it is attached to. In addition, you must\ndelete all the policy's versions. The following steps describe the process for\ndeleting a managed policy:\n * Detach the policy from all users, groups, and roles that the policy is\nattached to, using the DetachUserPolicy, DetachGroupPolicy, or DetachRolePolicy\nAPI operations. To list all the users, groups, and roles that a policy is\nattached to, use ListEntitiesForPolicy.\n * Delete all versions of the policy using DeletePolicyVersion. To list the\npolicy's versions, use ListPolicyVersions. You cannot use DeletePolicyVersion to\ndelete the version that is marked as the default version. You delete the\npolicy's default version in the next step of the process.\n * Delete the policy (this automatically deletes the policy's default version)\nusing this API.\n For information about managed policies, see Managed Policies and Inline\nPolicies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide." ([delete-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-delete-policy-request delete-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/delete-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeletePolicy", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "DeleteConflictException" :portkey.aws.iam.-2010-05-08/delete-conflict-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef delete-policy :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/delete-policy-request) :ret clojure.core/true?)

(clojure.core/defn update-user "Updates the name and/or the path of the specified IAM user.\n You should understand the implications of changing an IAM user's path or name.\nFor more information, see Renaming an IAM User\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming)\nand Renaming an IAM Group\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html)\nin the IAM User Guide.\n To change a user name, the requester must have appropriate permissions on both\nthe source object and the target object. For example, to change Bob to Robert,\nthe entity making the request must have permission on Bob and Robert, or must\nhave permission on all (*). For more information about permissions, see\nPermissions and Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html)." ([update-user-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-user-request update-user-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/update-user-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "UpdateUser", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "EntityAlreadyExistsException" :portkey.aws.iam.-2010-05-08/entity-already-exists-exception, "EntityTemporarilyUnmodifiableException" :portkey.aws.iam.-2010-05-08/entity-temporarily-unmodifiable-exception, "ConcurrentModificationException" :portkey.aws.iam.-2010-05-08/concurrent-modification-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef update-user :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/update-user-request) :ret clojure.core/true?)

(clojure.core/defn create-virtual-mfa-device "Creates a new virtual MFA device for the AWS account. After creating the virtual\nMFA, use EnableMFADevice to attach the MFA device to an IAM user. For more\ninformation about creating and working with virtual MFA devices, go to Using a\nVirtual MFA Device\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html) in the\nIAM User Guide.\n For information about limits on the number of MFA devices you can create, see\nLimitations on Entities\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in\nthe IAM User Guide.\n The seed information contained in the QR code and the Base32 string should be\ntreated like any other secret access information, such as your AWS access keys\nor your passwords. After you provision your virtual device, you should ensure\nthat the information is destroyed following secure procedures." ([create-virtual-mfa-device-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-create-virtual-mfa-device-request create-virtual-mfa-device-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/create-virtual-mfa-device-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/create-virtual-mfa-device-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateVirtualMFADeviceResult", :http.request.configuration/action "CreateVirtualMFADevice", :http.request.configuration/output-deser-fn response-create-virtual-mfa-device-response, :http.request.spec/error-spec {"LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "EntityAlreadyExistsException" :portkey.aws.iam.-2010-05-08/entity-already-exists-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef create-virtual-mfa-device :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/create-virtual-mfa-device-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/create-virtual-mfa-device-response))

(clojure.core/defn add-user-to-group "Adds the specified user to the specified group." ([add-user-to-group-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-add-user-to-group-request add-user-to-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/add-user-to-group-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AddUserToGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "LimitExceededException" :portkey.aws.iam.-2010-05-08/limit-exceeded-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef add-user-to-group :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/add-user-to-group-request) :ret clojure.core/true?)

(clojure.core/defn update-role "Updates the description or maximum session duration setting of a role." ([update-role-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-update-role-request update-role-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/update-role-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/update-role-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "UpdateRoleResult", :http.request.configuration/action "UpdateRole", :http.request.configuration/output-deser-fn response-update-role-response, :http.request.spec/error-spec {"UnmodifiableEntityException" :portkey.aws.iam.-2010-05-08/unmodifiable-entity-exception, "NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef update-role :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/update-role-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/update-role-response))

(clojure.core/defn put-role-permissions-boundary "Adds or updates the policy that is specified as the IAM role's permissions\nboundary. You can use an AWS managed policy or a customer managed policy to set\nthe boundary for a role. Use the boundary to control the maximum permissions\nthat the role can have. Setting a permissions boundary is an advanced feature\nthat can affect the permissions for the role.\n You cannot set the boundary for a service-linked role.\n Policies used as permissions boundaries do not provide permissions. You must\nalso attach a permissions policy to the role. To learn how the effective\npermissions for a role are evaluated, see IAM JSON Policy Evaluation Logic\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html)\nin the IAM User Guide." ([put-role-permissions-boundary-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-put-role-permissions-boundary-request put-role-permissions-boundary-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/put-role-permissions-boundary-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "PutRolePermissionsBoundary", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__22118__auto__] {}), :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "UnmodifiableEntityException" :portkey.aws.iam.-2010-05-08/unmodifiable-entity-exception, "PolicyNotAttachableException" :portkey.aws.iam.-2010-05-08/policy-not-attachable-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef put-role-permissions-boundary :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/put-role-permissions-boundary-request) :ret clojure.core/true?)

(clojure.core/defn list-user-policies "Lists the names of the inline policies embedded in the specified IAM user.\n An IAM user can also have managed policies attached to it. To list the managed\npolicies that are attached to a user, use ListAttachedUserPolicies. For more\ninformation about policies, see Managed Policies and Inline Policies\n(http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html)\nin the IAM User Guide.\n You can paginate the results using the MaxItems and Marker parameters. If there\nare no inline policies embedded with the specified user, the operation returns\nan empty list." ([list-user-policies-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-user-policies-request list-user-policies-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-user-policies-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-user-policies-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListUserPoliciesResult", :http.request.configuration/action "ListUserPolicies", :http.request.configuration/output-deser-fn response-list-user-policies-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef list-user-policies :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/list-user-policies-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-user-policies-response))

(clojure.core/defn simulate-custom-policy "Simulate how a set of IAM policies and optionally a resource-based policy works\nwith a list of API operations and AWS resources to determine the policies'\neffective permissions. The policies are provided as strings.\n The simulation does not perform the API operations; it only checks the\nauthorization to determine if the simulated policies allow or deny the\noperations.\n If you want to simulate existing policies attached to an IAM user, group, or\nrole, use SimulatePrincipalPolicy instead.\n Context keys are variables maintained by AWS and its services that provide\ndetails about the context of an API query request. You can use the Condition\nelement of an IAM policy to evaluate context keys. To get the list of context\nkeys that the policies require for correct simulation, use\nGetContextKeysForCustomPolicy.\n If the output is long, you can use MaxItems and Marker parameters to paginate\nthe results." ([simulate-custom-policy-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-simulate-custom-policy-request simulate-custom-policy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/simulate-policy-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/simulate-custom-policy-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "SimulateCustomPolicyResult", :http.request.configuration/action "SimulateCustomPolicy", :http.request.configuration/output-deser-fn response-simulate-policy-response, :http.request.spec/error-spec {"InvalidInputException" :portkey.aws.iam.-2010-05-08/invalid-input-exception, "PolicyEvaluationException" :portkey.aws.iam.-2010-05-08/policy-evaluation-exception}})))))
(clojure.spec.alpha/fdef simulate-custom-policy :args (clojure.spec.alpha/tuple :portkey.aws.iam.-2010-05-08/simulate-custom-policy-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/simulate-policy-response))

(clojure.core/defn list-ssh-public-keys "Returns information about the SSH public keys associated with the specified IAM\nuser. If there none exists, the operation returns an empty list.\n The SSH public keys returned by this operation are used only for authenticating\nthe IAM user to an AWS CodeCommit repository. For more information about using\nSSH keys to authenticate to an AWS CodeCommit repository, see Set up AWS\nCodeCommit for SSH Connections\n(http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html)\nin the AWS CodeCommit User Guide.\n Although each user is limited to a small number of keys, you can still paginate\nthe results using the MaxItems and Marker parameters." ([] (list-ssh-public-keys {})) ([list-ssh-public-keys-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-list-ssh-public-keys-request list-ssh-public-keys-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/list-ssh-public-keys-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/list-ssh-public-keys-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListSSHPublicKeysResult", :http.request.configuration/action "ListSSHPublicKeys", :http.request.configuration/output-deser-fn response-list-ssh-public-keys-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception}})))))
(clojure.spec.alpha/fdef list-ssh-public-keys :args (clojure.spec.alpha/? :portkey.aws.iam.-2010-05-08/list-ssh-public-keys-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/list-ssh-public-keys-response))

(clojure.core/defn get-user "Retrieves information about the specified IAM user, including the user's\ncreation date, path, unique ID, and ARN.\n If you do not specify a user name, IAM determines the user name implicitly\nbased on the AWS access key ID used to sign the request to this API." ([] (get-user {})) ([get-user-requestinput] (clojure.core/let [request-function-result__22119__auto__ (req-get-user-request get-user-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__22119__auto__ {:http.request.configuration/endpoints portkey.aws.iam.-2010-05-08/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.iam.-2010-05-08/get-user-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2010-05-08", :http.request.configuration/service-id "IAM", :http.request.spec/input-spec :portkey.aws.iam.-2010-05-08/get-user-request, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "GetUserResult", :http.request.configuration/action "GetUser", :http.request.configuration/output-deser-fn response-get-user-response, :http.request.spec/error-spec {"NoSuchEntityException" :portkey.aws.iam.-2010-05-08/no-such-entity-exception, "ServiceFailureException" :portkey.aws.iam.-2010-05-08/service-failure-exception}})))))
(clojure.spec.alpha/fdef get-user :args (clojure.spec.alpha/? :portkey.aws.iam.-2010-05-08/get-user-request) :ret (clojure.spec.alpha/and :portkey.aws.iam.-2010-05-08/get-user-response))
