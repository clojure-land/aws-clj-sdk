(ns portkey.aws.neptune (:require [portkey.aws]))

(def
 endpoints
 '{"ap-northeast-1"
   {:credential-scope {:service "rds", :region "ap-northeast-1"},
    :ssl-common-name "rds.ap-northeast-1.amazonaws.com",
    :endpoint "https://rds.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "rds", :region "eu-west-1"},
    :ssl-common-name "rds.eu-west-1.amazonaws.com",
    :endpoint "https://rds.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "rds", :region "us-east-2"},
    :ssl-common-name "rds.us-east-2.amazonaws.com",
    :endpoint "https://rds.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope {:service "rds", :region "ap-southeast-2"},
    :ssl-common-name "rds.ap-southeast-2.amazonaws.com",
    :endpoint "https://rds.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "cn-north-1"
   {:credential-scope {:service "rds", :region "cn-north-1"},
    :ssl-common-name "rds.cn-north-1.amazonaws.com.cn",
    :endpoint "https://rds.cn-north-1.amazonaws.com.cn",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "rds", :region "sa-east-1"},
    :ssl-common-name "rds.sa-east-1.amazonaws.com",
    :endpoint "https://rds.sa-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope {:service "rds", :region "ap-southeast-1"},
    :ssl-common-name "rds.ap-southeast-1.amazonaws.com",
    :endpoint "https://rds.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "cn-northwest-1"
   {:credential-scope {:service "rds", :region "cn-northwest-1"},
    :ssl-common-name "rds.cn-northwest-1.amazonaws.com.cn",
    :endpoint "https://rds.cn-northwest-1.amazonaws.com.cn",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope {:service "rds", :region "ap-northeast-2"},
    :ssl-common-name "rds.ap-northeast-2.amazonaws.com",
    :endpoint "https://rds.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-west-3"
   {:credential-scope {:service "rds", :region "eu-west-3"},
    :ssl-common-name "rds.eu-west-3.amazonaws.com",
    :endpoint "https://rds.eu-west-3.amazonaws.com",
    :signature-version :v4},
   "ca-central-1"
   {:credential-scope {:service "rds", :region "ca-central-1"},
    :ssl-common-name "rds.ca-central-1.amazonaws.com",
    :endpoint "https://rds.ca-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "rds", :region "eu-central-1"},
    :ssl-common-name "rds.eu-central-1.amazonaws.com",
    :endpoint "https://rds.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "rds", :region "eu-west-2"},
    :ssl-common-name "rds.eu-west-2.amazonaws.com",
    :endpoint "https://rds.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-gov-west-1"
   {:credential-scope {:service "rds", :region "us-gov-west-1"},
    :ssl-common-name "rds.us-gov-west-1.amazonaws.com",
    :endpoint "https://rds.us-gov-west-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "rds", :region "us-west-2"},
    :ssl-common-name "rds.us-west-2.amazonaws.com",
    :endpoint "https://rds.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "rds", :region "us-east-1"},
    :ssl-common-name "rds.amazonaws.com",
    :endpoint "https://rds.us-east-1.amazonaws.com",
    :signature-version :v4},
   "us-west-1"
   {:credential-scope {:service "rds", :region "us-west-1"},
    :ssl-common-name "rds.us-west-1.amazonaws.com",
    :endpoint "https://rds.us-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-south-1"
   {:credential-scope {:service "rds", :region "ap-south-1"},
    :ssl-common-name "rds.ap-south-1.amazonaws.com",
    :endpoint "https://rds.ap-south-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-subnet-identifier-list)

(clojure.core/declare ser-filter-value-list)

(clojure.core/declare ser-parameters-list)

(clojure.core/declare ser-filter)

(clojure.core/declare ser-source-ids-list)

(clojure.core/declare ser-key-list)

(clojure.core/declare ser-source-type)

(clojure.core/declare ser-tag-list)

(clojure.core/declare ser-string)

(clojure.core/declare ser-parameter)

(clojure.core/declare ser-vpc-security-group-id-list)

(clojure.core/declare ser-t-stamp)

(clojure.core/declare ser-event-categories-list)

(clojure.core/declare ser-db-security-group-name-list)

(clojure.core/declare ser-apply-method)

(clojure.core/declare ser-cloudwatch-logs-export-configuration)

(clojure.core/declare ser-log-type-list)

(clojure.core/declare ser-attribute-value-list)

(clojure.core/declare ser-tag)

(clojure.core/declare ser-boolean-optional)

(clojure.core/declare ser-availability-zones)

(clojure.core/declare ser-integer-optional)

(clojure.core/declare ser-filter-list)

(clojure.core/declare ser-boolean)

(clojure.core/defn- ser-subnet-identifier-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SubnetIdentifier"}))) input), :shape "SubnetIdentifierList", :type "list"})

(clojure.core/defn- ser-filter-value-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "Value"}))) input), :shape "FilterValueList", :type "list"})

(clojure.core/defn- ser-parameters-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-parameter coll) #:http.request.field{:shape "Parameter", :location-name "Parameter"}))) input), :shape "ParametersList", :type "list"})

(clojure.core/defn- ser-filter [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:name input)) #:http.request.field{:name "Name", :shape "String"}) (clojure.core/into (ser-filter-value-list (:values input)) #:http.request.field{:name "Values", :shape "FilterValueList"})], :shape "Filter", :type "structure"}))

(clojure.core/defn- ser-source-ids-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SourceId"}))) input), :shape "SourceIdsList", :type "list"})

(clojure.core/defn- ser-key-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "KeyList", :type "list"})

(clojure.core/defn- ser-source-type [input] #:http.request.field{:value (clojure.core/get {:dbcluster "db-cluster", "db-security-group" "db-security-group", "db-cluster" "db-cluster", :dbsecuritygroup "db-security-group", :dbclustersnapshot "db-cluster-snapshot", "db-instance" "db-instance", "db-cluster-snapshot" "db-cluster-snapshot", :dbparametergroup "db-parameter-group", "db-parameter-group" "db-parameter-group", "db-snapshot" "db-snapshot", :dbsnapshot "db-snapshot", :dbinstance "db-instance"} input), :shape "SourceType"})

(clojure.core/defn- ser-tag-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-tag coll) #:http.request.field{:shape "Tag", :location-name "Tag"}))) input), :shape "TagList", :type "list"})

(clojure.core/defn- ser-string [input] #:http.request.field{:value input, :shape "String"})

(clojure.core/defn- ser-parameter [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Parameter", :type "structure"} (clojure.core/contains? input :data-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :data-type)) #:http.request.field{:name "DataType", :shape "String"})) (clojure.core/contains? input :parameter-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :parameter-name)) #:http.request.field{:name "ParameterName", :shape "String"})) (clojure.core/contains? input :source) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source)) #:http.request.field{:name "Source", :shape "String"})) (clojure.core/contains? input :minimum-engine-version) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :minimum-engine-version)) #:http.request.field{:name "MinimumEngineVersion", :shape "String"})) (clojure.core/contains? input :allowed-values) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :allowed-values)) #:http.request.field{:name "AllowedValues", :shape "String"})) (clojure.core/contains? input :apply-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :apply-type)) #:http.request.field{:name "ApplyType", :shape "String"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :apply-method) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-apply-method (input :apply-method)) #:http.request.field{:name "ApplyMethod", :shape "ApplyMethod"})) (clojure.core/contains? input :is-modifiable) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :is-modifiable)) #:http.request.field{:name "IsModifiable", :shape "Boolean"})) (clojure.core/contains? input :parameter-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :parameter-value)) #:http.request.field{:name "ParameterValue", :shape "String"}))))

(clojure.core/defn- ser-vpc-security-group-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "VpcSecurityGroupId"}))) input), :shape "VpcSecurityGroupIdList", :type "list"})

(clojure.core/defn- ser-t-stamp [input] #:http.request.field{:value input, :shape "TStamp"})

(clojure.core/defn- ser-event-categories-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "EventCategory"}))) input), :shape "EventCategoriesList", :type "list"})

(clojure.core/defn- ser-db-security-group-name-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "DBSecurityGroupName"}))) input), :shape "DBSecurityGroupNameList", :type "list"})

(clojure.core/defn- ser-apply-method [input] #:http.request.field{:value (clojure.core/get {"immediate" "immediate", :immediate "immediate", "pending-reboot" "pending-reboot", :pendingreboot "pending-reboot"} input), :shape "ApplyMethod"})

(clojure.core/defn- ser-cloudwatch-logs-export-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "CloudwatchLogsExportConfiguration", :type "structure"} (clojure.core/contains? input :enable-log-types) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-log-types)) #:http.request.field{:name "EnableLogTypes", :shape "LogTypeList"})) (clojure.core/contains? input :disable-log-types) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :disable-log-types)) #:http.request.field{:name "DisableLogTypes", :shape "LogTypeList"}))))

(clojure.core/defn- ser-log-type-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "LogTypeList", :type "list"})

(clojure.core/defn- ser-attribute-value-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "AttributeValue"}))) input), :shape "AttributeValueList", :type "list"})

(clojure.core/defn- ser-tag [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Tag", :type "structure"} (clojure.core/contains? input :key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key)) #:http.request.field{:name "Key", :shape "String"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String"}))))

(clojure.core/defn- ser-boolean-optional [input] #:http.request.field{:value input, :shape "BooleanOptional"})

(clojure.core/defn- ser-availability-zones [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "AvailabilityZone"}))) input), :shape "AvailabilityZones", :type "list"})

(clojure.core/defn- ser-integer-optional [input] #:http.request.field{:value input, :shape "IntegerOptional"})

(clojure.core/defn- ser-filter-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-filter coll) #:http.request.field{:shape "Filter", :location-name "Filter"}))) input), :shape "FilterList", :type "list"})

(clojure.core/defn- ser-boolean [input] #:http.request.field{:value input, :shape "Boolean"})

(clojure.core/defn- req-describe-db-cluster-snapshots-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :db-cluster-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"})) (clojure.core/contains? input :snapshot-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-type)) #:http.request.field{:name "SnapshotType", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :include-shared) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-shared)) #:http.request.field{:name "IncludeShared", :shape "Boolean"})) (clojure.core/contains? input :include-public) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-public)) #:http.request.field{:name "IncludePublic", :shape "Boolean"}))))

(clojure.core/defn- req-copy-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-db-parameter-group-identifier)) #:http.request.field{:name "SourceDBParameterGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-parameter-group-identifier)) #:http.request.field{:name "TargetDBParameterGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-parameter-group-description)) #:http.request.field{:name "TargetDBParameterGroupDescription", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-copy-db-cluster-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-db-cluster-snapshot-identifier)) #:http.request.field{:name "SourceDBClusterSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-cluster-snapshot-identifier)) #:http.request.field{:name "TargetDBClusterSnapshotIdentifier", :shape "String"})]} (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :pre-signed-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :pre-signed-url)) #:http.request.field{:name "PreSignedUrl", :shape "String"})) (clojure.core/contains? input :copy-tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags)) #:http.request.field{:name "CopyTags", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-instances-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-reset-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})]} (clojure.core/contains? input :reset-all-parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :reset-all-parameters)) #:http.request.field{:name "ResetAllParameters", :shape "Boolean"})) (clojure.core/contains? input :parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-parameters-list (input :parameters)) #:http.request.field{:name "Parameters", :shape "ParametersList"}))))

(clojure.core/defn- req-copy-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-db-cluster-parameter-group-identifier)) #:http.request.field{:name "SourceDBClusterParameterGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-cluster-parameter-group-identifier)) #:http.request.field{:name "TargetDBClusterParameterGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-cluster-parameter-group-description)) #:http.request.field{:name "TargetDBClusterParameterGroupDescription", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-modify-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"}) (clojure.core/into (ser-parameters-list (input :parameters)) #:http.request.field{:name "Parameters", :shape "ParametersList"})]}))

(clojure.core/defn- req-delete-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})]}))

(clojure.core/defn- req-describe-engine-default-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"})]} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-db-engine-versions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :list-supported-character-sets) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :list-supported-character-sets)) #:http.request.field{:name "ListSupportedCharacterSets", :shape "BooleanOptional"})) (clojure.core/contains? input :default-only) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :default-only)) #:http.request.field{:name "DefaultOnly", :shape "Boolean"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :list-supported-timezones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :list-supported-timezones)) #:http.request.field{:name "ListSupportedTimezones", :shape "BooleanOptional"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :db-parameter-group-family) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"}))))

(clojure.core/defn- req-promote-read-replica-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]}))

(clojure.core/defn- req-describe-event-subscriptions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :subscription-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-db-subnet-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-restore-db-cluster-to-point-in-time-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :source-db-cluster-identifier)) #:http.request.field{:name "SourceDBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :restore-to-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :restore-to-time)) #:http.request.field{:name "RestoreToTime", :shape "TStamp"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :restore-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :restore-type)) #:http.request.field{:name "RestoreType", :shape "String"})) (clojure.core/contains? input :use-latest-restorable-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :use-latest-restorable-time)) #:http.request.field{:name "UseLatestRestorableTime", :shape "Boolean"}))))

(clojure.core/defn- req-restore-db-cluster-from-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :snapshot-identifier)) #:http.request.field{:name "SnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})]} (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :database-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :database-name)) #:http.request.field{:name "DatabaseName", :shape "String"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :availability-zones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-availability-zones (input :availability-zones)) #:http.request.field{:name "AvailabilityZones", :shape "AvailabilityZones"}))))

(clojure.core/defn- req-modify-db-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"}) (clojure.core/into (ser-subnet-identifier-list (input :subnet-ids)) #:http.request.field{:name "SubnetIds", :shape "SubnetIdentifierList"})]} (clojure.core/contains? input :db-subnet-group-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-description)) #:http.request.field{:name "DBSubnetGroupDescription", :shape "String"}))))

(clojure.core/defn- req-create-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})]} (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :db-security-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-db-security-group-name-list (input :db-security-groups)) #:http.request.field{:name "DBSecurityGroups", :shape "DBSecurityGroupNameList"})) (clojure.core/contains? input :promotion-tier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :promotion-tier)) #:http.request.field{:name "PromotionTier", :shape "IntegerOptional"})) (clojure.core/contains? input :character-set-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :character-set-name)) #:http.request.field{:name "CharacterSetName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional", :deprecated true})) (clojure.core/contains? input :domain-iam-role-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain-iam-role-name)) #:http.request.field{:name "DomainIAMRoleName", :shape "String"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :copy-tags-to-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags-to-snapshot)) #:http.request.field{:name "CopyTagsToSnapshot", :shape "BooleanOptional"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :db-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-name)) #:http.request.field{:name "DBName", :shape "String"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :domain) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain)) #:http.request.field{:name "Domain", :shape "String"})) (clojure.core/contains? input :allocated-storage) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :allocated-storage)) #:http.request.field{:name "AllocatedStorage", :shape "IntegerOptional"})) (clojure.core/contains? input :monitoring-interval) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :monitoring-interval)) #:http.request.field{:name "MonitoringInterval", :shape "IntegerOptional"})) (clojure.core/contains? input :timezone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :timezone)) #:http.request.field{:name "Timezone", :shape "String"})) (clojure.core/contains? input :master-username) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-username)) #:http.request.field{:name "MasterUsername", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :storage-encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :storage-encrypted)) #:http.request.field{:name "StorageEncrypted", :shape "BooleanOptional"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :tde-credential-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-password)) #:http.request.field{:name "TdeCredentialPassword", :shape "String"})) (clojure.core/contains? input :storage-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :storage-type)) #:http.request.field{:name "StorageType", :shape "String"})) (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :enable-performance-insights) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-performance-insights)) #:http.request.field{:name "EnablePerformanceInsights", :shape "BooleanOptional"})) (clojure.core/contains? input :monitoring-role-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :monitoring-role-arn)) #:http.request.field{:name "MonitoringRoleArn", :shape "String"})) (clojure.core/contains? input :tde-credential-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-arn)) #:http.request.field{:name "TdeCredentialArn", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"})) (clojure.core/contains? input :performance-insights-kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :performance-insights-kms-key-id)) #:http.request.field{:name "PerformanceInsightsKMSKeyId", :shape "String"})) (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-add-role-to-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :role-arn)) #:http.request.field{:name "RoleArn", :shape "String"})]}))

(clojure.core/defn- req-delete-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :skip-final-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :skip-final-snapshot)) #:http.request.field{:name "SkipFinalSnapshot", :shape "Boolean"})) (clojure.core/contains? input :final-db-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :final-db-snapshot-identifier)) #:http.request.field{:name "FinalDBSnapshotIdentifier", :shape "String"}))))

(clojure.core/defn- req-delete-db-cluster-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"})]}))

(clojure.core/defn- req-apply-pending-maintenance-action-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-identifier)) #:http.request.field{:name "ResourceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :apply-action)) #:http.request.field{:name "ApplyAction", :shape "String"}) (clojure.core/into (ser-string (input :opt-in-type)) #:http.request.field{:name "OptInType", :shape "String"})]}))

(clojure.core/defn- req-describe-events-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :end-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :end-time)) #:http.request.field{:name "EndTime", :shape "TStamp"})) (clojure.core/contains? input :start-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :start-time)) #:http.request.field{:name "StartTime", :shape "TStamp"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-source-type (input :source-type)) #:http.request.field{:name "SourceType", :shape "SourceType"})) (clojure.core/contains? input :duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :duration)) #:http.request.field{:name "Duration", :shape "IntegerOptional"})) (clojure.core/contains? input :event-categories) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-event-categories-list (input :event-categories)) #:http.request.field{:name "EventCategories", :shape "EventCategoriesList"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :source-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-identifier)) #:http.request.field{:name "SourceIdentifier", :shape "String"}))))

(clojure.core/defn- req-describe-pending-maintenance-actions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :resource-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :resource-identifier)) #:http.request.field{:name "ResourceIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"}))))

(clojure.core/defn- req-remove-role-from-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :role-arn)) #:http.request.field{:name "RoleArn", :shape "String"})]}))

(clojure.core/defn- req-describe-engine-default-cluster-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"})]} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-reset-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})]} (clojure.core/contains? input :reset-all-parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :reset-all-parameters)) #:http.request.field{:name "ResetAllParameters", :shape "Boolean"})) (clojure.core/contains? input :parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-parameters-list (input :parameters)) #:http.request.field{:name "Parameters", :shape "ParametersList"}))))

(clojure.core/defn- req-describe-db-cluster-parameter-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-orderable-db-instance-options-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})]} (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :vpc) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :vpc)) #:http.request.field{:name "Vpc", :shape "BooleanOptional"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-db-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"}) (clojure.core/into (ser-string (input :db-subnet-group-description)) #:http.request.field{:name "DBSubnetGroupDescription", :shape "String"}) (clojure.core/into (ser-subnet-identifier-list (input :subnet-ids)) #:http.request.field{:name "SubnetIds", :shape "SubnetIdentifierList"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-delete-event-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"})]}))

(clojure.core/defn- req-modify-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :new-db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :new-db-cluster-identifier)) #:http.request.field{:name "NewDBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :apply-immediately) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-describe-db-cluster-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})]} (clojure.core/contains? input :source) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source)) #:http.request.field{:name "Source", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-add-source-identifier-to-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"}) (clojure.core/into (ser-string (input :source-identifier)) #:http.request.field{:name "SourceIdentifier", :shape "String"})]}))

(clojure.core/defn- req-add-tags-to-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"}) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})]}))

(clojure.core/defn- req-create-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"}) (clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"}) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-modify-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"}) (clojure.core/into (ser-parameters-list (input :parameters)) #:http.request.field{:name "Parameters", :shape "ParametersList"})]}))

(clojure.core/defn- req-describe-valid-db-instance-modifications-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]}))

(clojure.core/defn- req-reboot-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :force-failover) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :force-failover)) #:http.request.field{:name "ForceFailover", :shape "BooleanOptional"}))))

(clojure.core/defn- req-remove-source-identifier-from-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"}) (clojure.core/into (ser-string (input :source-identifier)) #:http.request.field{:name "SourceIdentifier", :shape "String"})]}))

(clojure.core/defn- req-remove-tags-from-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"}) (clojure.core/into (ser-key-list (input :tag-keys)) #:http.request.field{:name "TagKeys", :shape "KeyList"})]}))

(clojure.core/defn- req-modify-db-cluster-snapshot-attribute-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :attribute-name)) #:http.request.field{:name "AttributeName", :shape "String"})]} (clojure.core/contains? input :values-to-add) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value-list (input :values-to-add)) #:http.request.field{:name "ValuesToAdd", :shape "AttributeValueList"})) (clojure.core/contains? input :values-to-remove) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value-list (input :values-to-remove)) #:http.request.field{:name "ValuesToRemove", :shape "AttributeValueList"}))))

(clojure.core/defn- req-create-event-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"}) (clojure.core/into (ser-string (input :sns-topic-arn)) #:http.request.field{:name "SnsTopicArn", :shape "String"})]} (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-type)) #:http.request.field{:name "SourceType", :shape "String"})) (clojure.core/contains? input :event-categories) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-event-categories-list (input :event-categories)) #:http.request.field{:name "EventCategories", :shape "EventCategoriesList"})) (clojure.core/contains? input :source-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-source-ids-list (input :source-ids)) #:http.request.field{:name "SourceIds", :shape "SourceIdsList"})) (clojure.core/contains? input :enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enabled)) #:http.request.field{:name "Enabled", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-cluster-snapshot-attributes-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"})]}))

(clojure.core/defn- req-describe-db-clusters-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-db-cluster-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-parameter-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-delete-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :skip-final-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :skip-final-snapshot)) #:http.request.field{:name "SkipFinalSnapshot", :shape "Boolean"})) (clojure.core/contains? input :final-db-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :final-db-snapshot-identifier)) #:http.request.field{:name "FinalDBSnapshotIdentifier", :shape "String"}))))

(clojure.core/defn- req-describe-event-categories-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-type)) #:http.request.field{:name "SourceType", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"}))))

(clojure.core/defn- req-delete-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})]}))

(clojure.core/defn- req-list-tags-for-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"})]} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"}))))

(clojure.core/defn- req-failover-db-cluster-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :target-db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :target-db-instance-identifier)) #:http.request.field{:name "TargetDBInstanceIdentifier", :shape "String"}))))

(clojure.core/defn- req-delete-db-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})]}))

(clojure.core/defn- req-create-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})]} (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :replication-source-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :replication-source-identifier)) #:http.request.field{:name "ReplicationSourceIdentifier", :shape "String"})) (clojure.core/contains? input :character-set-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :character-set-name)) #:http.request.field{:name "CharacterSetName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :pre-signed-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :pre-signed-url)) #:http.request.field{:name "PreSignedUrl", :shape "String"})) (clojure.core/contains? input :database-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :database-name)) #:http.request.field{:name "DatabaseName", :shape "String"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :master-username) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-username)) #:http.request.field{:name "MasterUsername", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :storage-encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :storage-encrypted)) #:http.request.field{:name "StorageEncrypted", :shape "BooleanOptional"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :availability-zones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-availability-zones (input :availability-zones)) #:http.request.field{:name "AvailabilityZones", :shape "AvailabilityZones"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-create-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"}) (clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"}) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})]} (clojure.core/contains? input :source) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source)) #:http.request.field{:name "Source", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-modify-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :db-security-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-db-security-group-name-list (input :db-security-groups)) #:http.request.field{:name "DBSecurityGroups", :shape "DBSecurityGroupNameList"})) (clojure.core/contains? input :promotion-tier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :promotion-tier)) #:http.request.field{:name "PromotionTier", :shape "IntegerOptional"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional", :deprecated true})) (clojure.core/contains? input :domain-iam-role-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain-iam-role-name)) #:http.request.field{:name "DomainIAMRoleName", :shape "String"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :copy-tags-to-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags-to-snapshot)) #:http.request.field{:name "CopyTagsToSnapshot", :shape "BooleanOptional"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :new-db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :new-db-instance-identifier)) #:http.request.field{:name "NewDBInstanceIdentifier", :shape "String"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :domain) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain)) #:http.request.field{:name "Domain", :shape "String"})) (clojure.core/contains? input :allow-major-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :allow-major-version-upgrade)) #:http.request.field{:name "AllowMajorVersionUpgrade", :shape "Boolean"})) (clojure.core/contains? input :allocated-storage) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :allocated-storage)) #:http.request.field{:name "AllocatedStorage", :shape "IntegerOptional"})) (clojure.core/contains? input :monitoring-interval) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :monitoring-interval)) #:http.request.field{:name "MonitoringInterval", :shape "IntegerOptional"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :db-port-number) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :db-port-number)) #:http.request.field{:name "DBPortNumber", :shape "IntegerOptional"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :tde-credential-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-password)) #:http.request.field{:name "TdeCredentialPassword", :shape "String"})) (clojure.core/contains? input :storage-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :storage-type)) #:http.request.field{:name "StorageType", :shape "String"})) (clojure.core/contains? input :apply-immediately) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})) (clojure.core/contains? input :ca-certificate-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ca-certificate-identifier)) #:http.request.field{:name "CACertificateIdentifier", :shape "String"})) (clojure.core/contains? input :cloudwatch-logs-export-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cloudwatch-logs-export-configuration (input :cloudwatch-logs-export-configuration)) #:http.request.field{:name "CloudwatchLogsExportConfiguration", :shape "CloudwatchLogsExportConfiguration"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :enable-performance-insights) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-performance-insights)) #:http.request.field{:name "EnablePerformanceInsights", :shape "BooleanOptional"})) (clojure.core/contains? input :monitoring-role-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :monitoring-role-arn)) #:http.request.field{:name "MonitoringRoleArn", :shape "String"})) (clojure.core/contains? input :tde-credential-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-arn)) #:http.request.field{:name "TdeCredentialArn", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"})) (clojure.core/contains? input :performance-insights-kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :performance-insights-kms-key-id)) #:http.request.field{:name "PerformanceInsightsKMSKeyId", :shape "String"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-modify-event-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"})]} (clojure.core/contains? input :sns-topic-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :sns-topic-arn)) #:http.request.field{:name "SnsTopicArn", :shape "String"})) (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-type)) #:http.request.field{:name "SourceType", :shape "String"})) (clojure.core/contains? input :event-categories) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-event-categories-list (input :event-categories)) #:http.request.field{:name "EventCategories", :shape "EventCategoriesList"})) (clojure.core/contains? input :enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enabled)) #:http.request.field{:name "Enabled", :shape "BooleanOptional"}))))

(clojure.spec.alpha/def :portkey.aws.neptune/source-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/vpc-security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/vpc-security-group-membership))

(clojure.spec.alpha/def :portkey.aws.neptune/subnet-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune/restore-db-cluster-to-point-in-time-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.neptune.pending-maintenance-action/action (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-maintenance-action/auto-applied-after-date (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-maintenance-action/forced-apply-date (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-maintenance-action/opt-in-status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-maintenance-action/current-apply-date (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-maintenance-action/description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/pending-maintenance-action (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.pending-maintenance-action/action :portkey.aws.neptune.pending-maintenance-action/auto-applied-after-date :portkey.aws.neptune.pending-maintenance-action/forced-apply-date :portkey.aws.neptune.pending-maintenance-action/opt-in-status :portkey.aws.neptune.pending-maintenance-action/current-apply-date :portkey.aws.neptune.pending-maintenance-action/description]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-instance-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/read-replica-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune/remove-source-identifier-from-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.neptune/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.neptune/snapshot-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/filter-value-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune/parameters-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/parameter))

(clojure.spec.alpha/def :portkey.aws.neptune/domain-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/copy-db-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.neptune.double-range/from (clojure.spec.alpha/and :portkey.aws.neptune/double))
(clojure.spec.alpha/def :portkey.aws.neptune.double-range/to (clojure.spec.alpha/and :portkey.aws.neptune/double))
(clojure.spec.alpha/def :portkey.aws.neptune/double-range (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.double-range/from :portkey.aws.neptune.double-range/to]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-snapshot-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-snapshots-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-snapshots-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-snapshots-message/snapshot-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-snapshots-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-snapshots-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-snapshots-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-snapshots-message/include-shared (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-snapshots-message/include-public (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-db-cluster-snapshots-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.describe-db-cluster-snapshots-message/db-cluster-identifier :portkey.aws.neptune.describe-db-cluster-snapshots-message/db-cluster-snapshot-identifier :portkey.aws.neptune.describe-db-cluster-snapshots-message/snapshot-type :portkey.aws.neptune.describe-db-cluster-snapshots-message/filters :portkey.aws.neptune.describe-db-cluster-snapshots-message/max-records :portkey.aws.neptune.describe-db-cluster-snapshots-message/marker :portkey.aws.neptune.describe-db-cluster-snapshots-message/include-shared :portkey.aws.neptune.describe-db-cluster-snapshots-message/include-public]))

(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-parameter-group-message/source-db-parameter-group-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-parameter-group-message/target-db-parameter-group-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-parameter-group-message/target-db-parameter-group-description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune/copy-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.copy-db-parameter-group-message/source-db-parameter-group-identifier :portkey.aws.neptune.copy-db-parameter-group-message/target-db-parameter-group-identifier :portkey.aws.neptune.copy-db-parameter-group-message/target-db-parameter-group-description] :opt-un [:portkey.aws.neptune.copy-db-parameter-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-role/role-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-role/status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-role (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster-role/role-arn :portkey.aws.neptune.db-cluster-role/status]))

(clojure.spec.alpha/def :portkey.aws.neptune.filter/name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.filter/values (clojure.spec.alpha/and :portkey.aws.neptune/filter-value-list))
(clojure.spec.alpha/def :portkey.aws.neptune/filter (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.filter/name :portkey.aws.neptune.filter/values] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/pending-maintenance-action-details (clojure.spec.alpha/coll-of :portkey.aws.neptune/pending-maintenance-action))

(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-cluster-snapshot-message/source-db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-cluster-snapshot-message/target-db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-cluster-snapshot-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-cluster-snapshot-message/pre-signed-url (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-cluster-snapshot-message/copy-tags (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-cluster-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune/copy-db-cluster-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.copy-db-cluster-snapshot-message/source-db-cluster-snapshot-identifier :portkey.aws.neptune.copy-db-cluster-snapshot-message/target-db-cluster-snapshot-identifier] :opt-un [:portkey.aws.neptune.copy-db-cluster-snapshot-message/kms-key-id :portkey.aws.neptune.copy-db-cluster-snapshot-message/pre-signed-url :portkey.aws.neptune.copy-db-cluster-snapshot-message/copy-tags :portkey.aws.neptune.copy-db-cluster-snapshot-message/tags]))

(clojure.spec.alpha/def :portkey.aws.neptune/promote-read-replica-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.neptune.db-parameter-group-status/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-parameter-group-status/parameter-apply-status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-parameter-group-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-parameter-group-status/db-parameter-group-name :portkey.aws.neptune.db-parameter-group-status/parameter-apply-status]))

(clojure.spec.alpha/def :portkey.aws.neptune/valid-storage-options-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/valid-storage-options))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-instances-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-instances-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-instances-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-instances-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-db-instances-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.describe-db-instances-message/db-instance-identifier :portkey.aws.neptune.describe-db-instances-message/filters :portkey.aws.neptune.describe-db-instances-message/max-records :portkey.aws.neptune.describe-db-instances-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune.reset-db-cluster-parameter-group-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.reset-db-cluster-parameter-group-message/reset-all-parameters (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.reset-db-cluster-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.neptune/parameters-list))
(clojure.spec.alpha/def :portkey.aws.neptune/reset-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.reset-db-cluster-parameter-group-message/db-cluster-parameter-group-name] :opt-un [:portkey.aws.neptune.reset-db-cluster-parameter-group-message/reset-all-parameters :portkey.aws.neptune.reset-db-cluster-parameter-group-message/parameters]))

(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-cluster-parameter-group-message/source-db-cluster-parameter-group-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-cluster-parameter-group-message/target-db-cluster-parameter-group-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-cluster-parameter-group-message/target-db-cluster-parameter-group-description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-cluster-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune/copy-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.copy-db-cluster-parameter-group-message/source-db-cluster-parameter-group-identifier :portkey.aws.neptune.copy-db-cluster-parameter-group-message/target-db-cluster-parameter-group-identifier :portkey.aws.neptune.copy-db-cluster-parameter-group-message/target-db-cluster-parameter-group-description] :opt-un [:portkey.aws.neptune.copy-db-cluster-parameter-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-parameter-group-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.neptune/parameters-list))
(clojure.spec.alpha/def :portkey.aws.neptune/modify-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.modify-db-cluster-parameter-group-message/db-cluster-parameter-group-name :portkey.aws.neptune.modify-db-cluster-parameter-group-message/parameters] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.db-parameter-group-details/parameters (clojure.spec.alpha/and :portkey.aws.neptune/parameters-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-parameter-group-details/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-parameter-group-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-parameter-group-details/parameters :portkey.aws.neptune.db-parameter-group-details/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune.delete-db-parameter-group-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/delete-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.delete-db-parameter-group-message/db-parameter-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/double-optional clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.neptune/source-ids-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-engine-default-parameters-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-engine-default-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-engine-default-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-engine-default-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-engine-default-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.describe-engine-default-parameters-message/db-parameter-group-family] :opt-un [:portkey.aws.neptune.describe-engine-default-parameters-message/filters :portkey.aws.neptune.describe-engine-default-parameters-message/max-records :portkey.aws.neptune.describe-engine-default-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/create-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.neptune/invalid-db-instance-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/sns-no-authorization-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-parameter-group-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-parameter-group))

(clojure.spec.alpha/def :portkey.aws.neptune/reboot-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-instance]))

(clojure.spec.alpha/def :portkey.aws.neptune/instance-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-parameter-group-status-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-parameter-group-status))

(clojure.spec.alpha/def :portkey.aws.neptune.db-parameter-group-name-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-parameter-group-name-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-parameter-group-name-message/db-parameter-group-name]))

(clojure.spec.alpha/def :portkey.aws.neptune/apply-pending-maintenance-action-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/resource-pending-maintenance-actions]))

(clojure.spec.alpha/def :portkey.aws.neptune/double-range-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/double-range))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-engine-versions-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-engine-versions-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-engine-versions-message/list-supported-character-sets (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-engine-versions-message/default-only (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-engine-versions-message/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-engine-versions-message/list-supported-timezones (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-engine-versions-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-engine-versions-message/engine (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-engine-versions-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-db-engine-versions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.describe-db-engine-versions-message/max-records :portkey.aws.neptune.describe-db-engine-versions-message/marker :portkey.aws.neptune.describe-db-engine-versions-message/list-supported-character-sets :portkey.aws.neptune.describe-db-engine-versions-message/default-only :portkey.aws.neptune.describe-db-engine-versions-message/engine-version :portkey.aws.neptune.describe-db-engine-versions-message/list-supported-timezones :portkey.aws.neptune.describe-db-engine-versions-message/filters :portkey.aws.neptune.describe-db-engine-versions-message/engine :portkey.aws.neptune.describe-db-engine-versions-message/db-parameter-group-family]))

(clojure.spec.alpha/def :portkey.aws.neptune.promote-read-replica-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/promote-read-replica-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.promote-read-replica-db-cluster-message/db-cluster-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-parameter-group-name-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-parameter-group-name-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster-parameter-group-name-message/db-cluster-parameter-group-name]))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-event-subscriptions-message/subscription-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-event-subscriptions-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-event-subscriptions-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-event-subscriptions-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-event-subscriptions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.describe-event-subscriptions-message/subscription-name :portkey.aws.neptune.describe-event-subscriptions-message/filters :portkey.aws.neptune.describe-event-subscriptions-message/max-records :portkey.aws.neptune.describe-event-subscriptions-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-subnet-groups-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-subnet-groups-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-subnet-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-subnet-groups-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-db-subnet-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.describe-db-subnet-groups-message/db-subnet-group-name :portkey.aws.neptune.describe-db-subnet-groups-message/filters :portkey.aws.neptune.describe-db-subnet-groups-message/max-records :portkey.aws.neptune.describe-db-subnet-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune/pending-maintenance-actions (clojure.spec.alpha/coll-of :portkey.aws.neptune/resource-pending-maintenance-actions))

(clojure.spec.alpha/def :portkey.aws.neptune/restore-db-cluster-from-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.neptune.subnet/subnet-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.subnet/subnet-availability-zone (clojure.spec.alpha/and :portkey.aws.neptune/availability-zone))
(clojure.spec.alpha/def :portkey.aws.neptune.subnet/subnet-status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/subnet (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.subnet/subnet-identifier :portkey.aws.neptune.subnet/subnet-availability-zone :portkey.aws.neptune.subnet/subnet-status]))

(clojure.spec.alpha/def :portkey.aws.neptune/option-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.db-subnet-group-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-subnet-group-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-subnet-group-message/marker :portkey.aws.neptune/db-subnet-groups]))

(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/option-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/restore-to-time (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.neptune/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/source-db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/port (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/restore-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/use-latest-restorable-time (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune/restore-db-cluster-to-point-in-time-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/db-cluster-identifier :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/source-db-cluster-identifier] :opt-un [:portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/option-group-name :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/enable-iam-database-authentication :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/restore-to-time :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/tags :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/vpc-security-group-ids :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/db-subnet-group-name :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/port :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/kms-key-id :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/restore-type :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/use-latest-restorable-time]))

(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/option-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/database-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.neptune/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/port (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/engine (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/restore-db-cluster-from-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.restore-db-cluster-from-snapshot-message/db-cluster-identifier :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/snapshot-identifier :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/engine] :opt-un [:portkey.aws.neptune.restore-db-cluster-from-snapshot-message/option-group-name :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/enable-iam-database-authentication :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/database-name :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/tags :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/vpc-security-group-ids :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/engine-version :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/db-subnet-group-name :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/port :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/kms-key-id :portkey.aws.neptune/availability-zones]))

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/snapshot-create-time (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/snapshot-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/license-model (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/allocated-storage (clojure.spec.alpha/and :portkey.aws.neptune/integer))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/master-username (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/storage-encrypted (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/port (clojure.spec.alpha/and :portkey.aws.neptune/integer))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/vpc-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/kms-key-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/cluster-create-time (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/iam-database-authentication-enabled (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/engine (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/source-db-cluster-snapshot-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/db-cluster-snapshot-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/percent-progress (clojure.spec.alpha/and :portkey.aws.neptune/integer))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-snapshot (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster-snapshot/snapshot-create-time :portkey.aws.neptune.db-cluster-snapshot/db-cluster-snapshot-identifier :portkey.aws.neptune.db-cluster-snapshot/status :portkey.aws.neptune.db-cluster-snapshot/snapshot-type :portkey.aws.neptune.db-cluster-snapshot/license-model :portkey.aws.neptune.db-cluster-snapshot/allocated-storage :portkey.aws.neptune.db-cluster-snapshot/master-username :portkey.aws.neptune.db-cluster-snapshot/engine-version :portkey.aws.neptune.db-cluster-snapshot/storage-encrypted :portkey.aws.neptune.db-cluster-snapshot/port :portkey.aws.neptune.db-cluster-snapshot/vpc-id :portkey.aws.neptune.db-cluster-snapshot/kms-key-id :portkey.aws.neptune.db-cluster-snapshot/cluster-create-time :portkey.aws.neptune.db-cluster-snapshot/iam-database-authentication-enabled :portkey.aws.neptune.db-cluster-snapshot/engine :portkey.aws.neptune.db-cluster-snapshot/source-db-cluster-snapshot-arn :portkey.aws.neptune/availability-zones :portkey.aws.neptune.db-cluster-snapshot/db-cluster-identifier :portkey.aws.neptune.db-cluster-snapshot/db-cluster-snapshot-arn :portkey.aws.neptune.db-cluster-snapshot/percent-progress]))

(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-subnet-group-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-subnet-group-message/db-subnet-group-description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.neptune/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.neptune/modify-db-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.modify-db-subnet-group-message/db-subnet-group-name :portkey.aws.neptune.modify-db-subnet-group-message/subnet-ids] :opt-un [:portkey.aws.neptune.modify-db-subnet-group-message/db-subnet-group-description]))

(clojure.spec.alpha/def :portkey.aws.neptune.pending-cloudwatch-logs-exports/log-types-to-enable (clojure.spec.alpha/and :portkey.aws.neptune/log-type-list))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-cloudwatch-logs-exports/log-types-to-disable (clojure.spec.alpha/and :portkey.aws.neptune/log-type-list))
(clojure.spec.alpha/def :portkey.aws.neptune/pending-cloudwatch-logs-exports (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.pending-cloudwatch-logs-exports/log-types-to-enable :portkey.aws.neptune.pending-cloudwatch-logs-exports/log-types-to-disable]))

(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/option-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/db-security-groups (clojure.spec.alpha/and :portkey.aws.neptune/db-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/promotion-tier (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/character-set-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/domain-iam-role-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.neptune/log-type-list))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/db-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.neptune/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/availability-zone (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/master-user-password (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/license-model (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/domain (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/allocated-storage (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/monitoring-interval (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/timezone (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/master-username (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/storage-encrypted (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/port (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/iops (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/tde-credential-password (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/storage-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/engine (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/enable-performance-insights (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/multi-az (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/performance-insights-kms-key-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/create-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.create-db-instance-message/db-instance-identifier :portkey.aws.neptune.create-db-instance-message/db-instance-class :portkey.aws.neptune.create-db-instance-message/engine] :opt-un [:portkey.aws.neptune.create-db-instance-message/backup-retention-period :portkey.aws.neptune.create-db-instance-message/option-group-name :portkey.aws.neptune.create-db-instance-message/db-security-groups :portkey.aws.neptune.create-db-instance-message/promotion-tier :portkey.aws.neptune.create-db-instance-message/character-set-name :portkey.aws.neptune.create-db-instance-message/enable-iam-database-authentication :portkey.aws.neptune.create-db-instance-message/publicly-accessible :portkey.aws.neptune.create-db-instance-message/domain-iam-role-name :portkey.aws.neptune.create-db-instance-message/preferred-maintenance-window :portkey.aws.neptune.create-db-instance-message/copy-tags-to-snapshot :portkey.aws.neptune.create-db-instance-message/enable-cloudwatch-logs-exports :portkey.aws.neptune.create-db-instance-message/auto-minor-version-upgrade :portkey.aws.neptune.create-db-instance-message/tags :portkey.aws.neptune.create-db-instance-message/db-name :portkey.aws.neptune.create-db-instance-message/vpc-security-group-ids :portkey.aws.neptune.create-db-instance-message/availability-zone :portkey.aws.neptune.create-db-instance-message/master-user-password :portkey.aws.neptune.create-db-instance-message/license-model :portkey.aws.neptune.create-db-instance-message/domain :portkey.aws.neptune.create-db-instance-message/allocated-storage :portkey.aws.neptune.create-db-instance-message/monitoring-interval :portkey.aws.neptune.create-db-instance-message/timezone :portkey.aws.neptune.create-db-instance-message/master-username :portkey.aws.neptune.create-db-instance-message/engine-version :portkey.aws.neptune.create-db-instance-message/storage-encrypted :portkey.aws.neptune.create-db-instance-message/db-subnet-group-name :portkey.aws.neptune.create-db-instance-message/port :portkey.aws.neptune.create-db-instance-message/kms-key-id :portkey.aws.neptune.create-db-instance-message/iops :portkey.aws.neptune.create-db-instance-message/tde-credential-password :portkey.aws.neptune.create-db-instance-message/storage-type :portkey.aws.neptune.create-db-instance-message/db-parameter-group-name :portkey.aws.neptune.create-db-instance-message/enable-performance-insights :portkey.aws.neptune.create-db-instance-message/monitoring-role-arn :portkey.aws.neptune.create-db-instance-message/tde-credential-arn :portkey.aws.neptune.create-db-instance-message/multi-az :portkey.aws.neptune.create-db-instance-message/performance-insights-kms-key-id :portkey.aws.neptune.create-db-instance-message/db-cluster-identifier :portkey.aws.neptune.create-db-instance-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.neptune/key-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-cluster))

(clojure.spec.alpha/def :portkey.aws.neptune/db-engine-version-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-engine-version))

(clojure.spec.alpha/def :portkey.aws.neptune.event-subscription/event-subscription-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.event-subscription/customer-aws-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.event-subscription/source-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.event-subscription/enabled (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.event-subscription/status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.event-subscription/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.event-subscription/cust-subscription-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.event-subscription/subscription-creation-time (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/event-subscription (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/source-ids-list :portkey.aws.neptune.event-subscription/event-subscription-arn :portkey.aws.neptune.event-subscription/customer-aws-id :portkey.aws.neptune.event-subscription/source-type :portkey.aws.neptune.event-subscription/enabled :portkey.aws.neptune.event-subscription/status :portkey.aws.neptune.event-subscription/sns-topic-arn :portkey.aws.neptune/event-categories-list :portkey.aws.neptune.event-subscription/cust-subscription-id :portkey.aws.neptune.event-subscription/subscription-creation-time]))

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-member/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-member/is-cluster-writer (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-member/db-cluster-parameter-group-status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-member/promotion-tier (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-member (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster-member/db-instance-identifier :portkey.aws.neptune.db-cluster-member/is-cluster-writer :portkey.aws.neptune.db-cluster-member/db-cluster-parameter-group-status :portkey.aws.neptune.db-cluster-member/promotion-tier]))

(clojure.spec.alpha/def :portkey.aws.neptune/invalid-vpc-network-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-role-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-instance-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.add-role-to-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.add-role-to-db-cluster-message/role-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/add-role-to-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.add-role-to-db-cluster-message/db-cluster-identifier :portkey.aws.neptune.add-role-to-db-cluster-message/role-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.delete-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.delete-db-instance-message/skip-final-snapshot (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.delete-db-instance-message/final-db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/delete-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.delete-db-instance-message/db-instance-identifier] :opt-un [:portkey.aws.neptune.delete-db-instance-message/skip-final-snapshot :portkey.aws.neptune.delete-db-instance-message/final-db-snapshot-identifier]))

(clojure.spec.alpha/def :portkey.aws.neptune/shared-snapshot-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/certificate-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/delete-db-cluster-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster-snapshot]))

(clojure.spec.alpha/def :portkey.aws.neptune/copy-db-cluster-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster-snapshot]))

(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-options-message/orderable-db-instance-options (clojure.spec.alpha/and :portkey.aws.neptune/orderable-db-instance-options-list))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-options-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/orderable-db-instance-options-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.orderable-db-instance-options-message/orderable-db-instance-options :portkey.aws.neptune.orderable-db-instance-options-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune/event-categories-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/event-categories-map-list]))

(clojure.spec.alpha/def :portkey.aws.neptune.resource-pending-maintenance-actions/resource-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/resource-pending-maintenance-actions (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.resource-pending-maintenance-actions/resource-identifier :portkey.aws.neptune/pending-maintenance-action-details]))

(clojure.spec.alpha/def :portkey.aws.neptune.delete-db-cluster-snapshot-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/delete-db-cluster-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.delete-db-cluster-snapshot-message/db-cluster-snapshot-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.apply-pending-maintenance-action-message/resource-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.apply-pending-maintenance-action-message/apply-action (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.apply-pending-maintenance-action-message/opt-in-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/apply-pending-maintenance-action-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.apply-pending-maintenance-action-message/resource-identifier :portkey.aws.neptune.apply-pending-maintenance-action-message/apply-action :portkey.aws.neptune.apply-pending-maintenance-action-message/opt-in-type] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-events-message/end-time (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-events-message/start-time (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-events-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-events-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-events-message/duration (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-events-message/event-categories (clojure.spec.alpha/and :portkey.aws.neptune/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-events-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-events-message/source-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-events-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.describe-events-message/end-time :portkey.aws.neptune.describe-events-message/start-time :portkey.aws.neptune.describe-events-message/max-records :portkey.aws.neptune.describe-events-message/marker :portkey.aws.neptune/source-type :portkey.aws.neptune.describe-events-message/duration :portkey.aws.neptune.describe-events-message/event-categories :portkey.aws.neptune.describe-events-message/filters :portkey.aws.neptune.describe-events-message/source-identifier]))

(clojure.spec.alpha/def :portkey.aws.neptune/subscription-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/backup-retention-period (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/replication-source-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/earliest-restorable-time (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/character-set-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/database-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/clone-group-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/allocated-storage (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/master-username (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/hosted-zone-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/storage-encrypted (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/port (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/db-cluster-resource-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/db-cluster-members (clojure.spec.alpha/and :portkey.aws.neptune/db-cluster-member-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/kms-key-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/cluster-create-time (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/read-replica-identifiers (clojure.spec.alpha/and :portkey.aws.neptune/read-replica-identifier-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/db-cluster-parameter-group (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/endpoint (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/iam-database-authentication-enabled (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/db-cluster-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/vpc-security-groups (clojure.spec.alpha/and :portkey.aws.neptune/vpc-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/engine (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/reader-endpoint (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/associated-roles (clojure.spec.alpha/and :portkey.aws.neptune/db-cluster-roles))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/multi-az (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/percent-progress (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/latest-restorable-time (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/db-subnet-group (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster/backup-retention-period :portkey.aws.neptune.db-cluster/replication-source-identifier :portkey.aws.neptune.db-cluster/earliest-restorable-time :portkey.aws.neptune.db-cluster/character-set-name :portkey.aws.neptune.db-cluster/database-name :portkey.aws.neptune.db-cluster/preferred-maintenance-window :portkey.aws.neptune.db-cluster/clone-group-id :portkey.aws.neptune.db-cluster/status :portkey.aws.neptune.db-cluster/allocated-storage :portkey.aws.neptune.db-cluster/master-username :portkey.aws.neptune.db-cluster/engine-version :portkey.aws.neptune.db-cluster/hosted-zone-id :portkey.aws.neptune.db-cluster/storage-encrypted :portkey.aws.neptune.db-cluster/port :portkey.aws.neptune.db-cluster/db-cluster-resource-id :portkey.aws.neptune.db-cluster/db-cluster-members :portkey.aws.neptune.db-cluster/kms-key-id :portkey.aws.neptune.db-cluster/cluster-create-time :portkey.aws.neptune.db-cluster/read-replica-identifiers :portkey.aws.neptune.db-cluster/db-cluster-parameter-group :portkey.aws.neptune.db-cluster/endpoint :portkey.aws.neptune.db-cluster/iam-database-authentication-enabled :portkey.aws.neptune.db-cluster/db-cluster-arn :portkey.aws.neptune.db-cluster/vpc-security-groups :portkey.aws.neptune.db-cluster/engine :portkey.aws.neptune/db-cluster-option-group-memberships :portkey.aws.neptune/availability-zones :portkey.aws.neptune.db-cluster/reader-endpoint :portkey.aws.neptune.db-cluster/associated-roles :portkey.aws.neptune.db-cluster/multi-az :portkey.aws.neptune.db-cluster/db-cluster-identifier :portkey.aws.neptune.db-cluster/preferred-backup-window :portkey.aws.neptune.db-cluster/percent-progress :portkey.aws.neptune.db-cluster/latest-restorable-time :portkey.aws.neptune.db-cluster/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-pending-maintenance-actions-message/resource-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-pending-maintenance-actions-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-pending-maintenance-actions-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-pending-maintenance-actions-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-pending-maintenance-actions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.describe-pending-maintenance-actions-message/resource-identifier :portkey.aws.neptune.describe-pending-maintenance-actions-message/filters :portkey.aws.neptune.describe-pending-maintenance-actions-message/marker :portkey.aws.neptune.describe-pending-maintenance-actions-message/max-records]))

(clojure.spec.alpha/def :portkey.aws.neptune/invalid-db-subnet-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.db-instance-status-info/status-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance-status-info/normal (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance-status-info/status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance-status-info/message (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-instance-status-info (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-instance-status-info/status-type :portkey.aws.neptune.db-instance-status-info/normal :portkey.aws.neptune.db-instance-status-info/status :portkey.aws.neptune.db-instance-status-info/message]))

(clojure.spec.alpha/def :portkey.aws.neptune/sns-topic-arn-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.remove-role-from-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.remove-role-from-db-cluster-message/role-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/remove-role-from-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.remove-role-from-db-cluster-message/db-cluster-identifier :portkey.aws.neptune.remove-role-from-db-cluster-message/role-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/event-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/event))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-engine-default-cluster-parameters-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-engine-default-cluster-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-engine-default-cluster-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-engine-default-cluster-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-engine-default-cluster-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.describe-engine-default-cluster-parameters-message/db-parameter-group-family] :opt-un [:portkey.aws.neptune.describe-engine-default-cluster-parameters-message/filters :portkey.aws.neptune.describe-engine-default-cluster-parameters-message/max-records :portkey.aws.neptune.describe-engine-default-cluster-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.events-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.events-message/events (clojure.spec.alpha/and :portkey.aws.neptune/event-list))
(clojure.spec.alpha/def :portkey.aws.neptune/events-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.events-message/marker :portkey.aws.neptune.events-message/events]))

(clojure.spec.alpha/def :portkey.aws.neptune/source-type #{:dbcluster "db-security-group" "db-cluster" :dbsecuritygroup :dbclustersnapshot "db-instance" "db-cluster-snapshot" :dbparametergroup "db-parameter-group" "db-snapshot" :dbsnapshot :dbinstance})

(clojure.spec.alpha/def :portkey.aws.neptune/orderable-db-instance-options-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/orderable-db-instance-option))

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot-message/db-cluster-snapshots (clojure.spec.alpha/and :portkey.aws.neptune/db-cluster-snapshot-list))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-snapshot-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster-snapshot-message/marker :portkey.aws.neptune.db-cluster-snapshot-message/db-cluster-snapshots]))

(clojure.spec.alpha/def :portkey.aws.neptune/subscription-category-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.event/source-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.event/message (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.event/event-categories (clojure.spec.alpha/and :portkey.aws.neptune/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.neptune.event/date (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.event/source-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/event (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.event/source-identifier :portkey.aws.neptune/source-type :portkey.aws.neptune.event/message :portkey.aws.neptune.event/event-categories :portkey.aws.neptune.event/date :portkey.aws.neptune.event/source-arn]))

(clojure.spec.alpha/def :portkey.aws.neptune/availability-zone-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/availability-zone))

(clojure.spec.alpha/def :portkey.aws.neptune.reset-db-parameter-group-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.reset-db-parameter-group-message/reset-all-parameters (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.reset-db-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.neptune/parameters-list))
(clojure.spec.alpha/def :portkey.aws.neptune/reset-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.reset-db-parameter-group-message/db-parameter-group-name] :opt-un [:portkey.aws.neptune.reset-db-parameter-group-message/reset-all-parameters :portkey.aws.neptune.reset-db-parameter-group-message/parameters]))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-parameter-groups-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-parameter-groups-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-parameter-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-db-cluster-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.describe-db-cluster-parameter-groups-message/db-cluster-parameter-group-name :portkey.aws.neptune.describe-db-cluster-parameter-groups-message/filters :portkey.aws.neptune.describe-db-cluster-parameter-groups-message/max-records :portkey.aws.neptune.describe-db-cluster-parameter-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune.availability-zone/name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/availability-zone (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.availability-zone/name]))

(clojure.spec.alpha/def :portkey.aws.neptune.event-subscriptions-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/event-subscriptions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.event-subscriptions-message/marker :portkey.aws.neptune/event-subscriptions-list]))

(clojure.spec.alpha/def :portkey.aws.neptune/create-db-subnet-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.neptune/create-event-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-parameter-group-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-cluster-parameter-group))

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-parameter-group-details/parameters (clojure.spec.alpha/and :portkey.aws.neptune/parameters-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-parameter-group-details/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-parameter-group-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster-parameter-group-details/parameters :portkey.aws.neptune.db-cluster-parameter-group-details/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-orderable-db-instance-options-message/engine (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-orderable-db-instance-options-message/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-orderable-db-instance-options-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-orderable-db-instance-options-message/license-model (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-orderable-db-instance-options-message/vpc (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-orderable-db-instance-options-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-orderable-db-instance-options-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-orderable-db-instance-options-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-orderable-db-instance-options-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.describe-orderable-db-instance-options-message/engine] :opt-un [:portkey.aws.neptune.describe-orderable-db-instance-options-message/engine-version :portkey.aws.neptune.describe-orderable-db-instance-options-message/db-instance-class :portkey.aws.neptune.describe-orderable-db-instance-options-message/license-model :portkey.aws.neptune.describe-orderable-db-instance-options-message/vpc :portkey.aws.neptune.describe-orderable-db-instance-options-message/filters :portkey.aws.neptune.describe-orderable-db-instance-options-message/max-records :portkey.aws.neptune.describe-orderable-db-instance-options-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune.create-db-subnet-group-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-subnet-group-message/db-subnet-group-description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.neptune/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-subnet-group-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune/create-db-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.create-db-subnet-group-message/db-subnet-group-name :portkey.aws.neptune.create-db-subnet-group-message/db-subnet-group-description :portkey.aws.neptune.create-db-subnet-group-message/subnet-ids] :opt-un [:portkey.aws.neptune.create-db-subnet-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.neptune/invalid-db-security-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-member-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-cluster-member))

(clojure.spec.alpha/def :portkey.aws.neptune.delete-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/delete-event-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.delete-event-subscription-message/subscription-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/storage-type-not-supported-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-role-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/read-replica-db-instance-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-parameter-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-subnet-group-does-not-cover-enough-a-zs (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.db-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-parameter-groups-message/db-parameter-groups (clojure.spec.alpha/and :portkey.aws.neptune/db-parameter-group-list))
(clojure.spec.alpha/def :portkey.aws.neptune/db-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-parameter-groups-message/marker :portkey.aws.neptune.db-parameter-groups-message/db-parameter-groups]))

(clojure.spec.alpha/def :portkey.aws.neptune/describe-engine-default-parameters-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/engine-defaults]))

(clojure.spec.alpha/def :portkey.aws.neptune/valid-upgrade-target-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/upgrade-target))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-snapshot-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/authorization-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-role-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.range/from (clojure.spec.alpha/and :portkey.aws.neptune/integer))
(clojure.spec.alpha/def :portkey.aws.neptune.range/to (clojure.spec.alpha/and :portkey.aws.neptune/integer))
(clojure.spec.alpha/def :portkey.aws.neptune.range/step (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune/range (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.range/from :portkey.aws.neptune.range/to :portkey.aws.neptune.range/step]))

(clojure.spec.alpha/def :portkey.aws.neptune/create-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-instance]))

(clojure.spec.alpha/def :portkey.aws.neptune/copy-db-cluster-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.neptune/subnet-already-in-use (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/insufficient-storage-cluster-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-snapshot-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/invalid-db-cluster-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-roles (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-cluster-role))

(clojure.spec.alpha/def :portkey.aws.neptune/modify-db-subnet-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.neptune/invalid-subnet (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/tag-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/tag))

(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/option-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/new-db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.neptune/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/master-user-password (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/port (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/modify-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.modify-db-cluster-message/db-cluster-identifier] :opt-un [:portkey.aws.neptune.modify-db-cluster-message/backup-retention-period :portkey.aws.neptune.modify-db-cluster-message/option-group-name :portkey.aws.neptune.modify-db-cluster-message/enable-iam-database-authentication :portkey.aws.neptune.modify-db-cluster-message/new-db-cluster-identifier :portkey.aws.neptune.modify-db-cluster-message/preferred-maintenance-window :portkey.aws.neptune.modify-db-cluster-message/vpc-security-group-ids :portkey.aws.neptune.modify-db-cluster-message/db-cluster-parameter-group-name :portkey.aws.neptune.modify-db-cluster-message/master-user-password :portkey.aws.neptune.modify-db-cluster-message/engine-version :portkey.aws.neptune.modify-db-cluster-message/port :portkey.aws.neptune.modify-db-cluster-message/apply-immediately :portkey.aws.neptune.modify-db-cluster-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.neptune.timezone/timezone-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/timezone (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.timezone/timezone-name]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-snapshot-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-cluster-snapshot))

(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version/default-character-set (clojure.spec.alpha/and :portkey.aws.neptune/character-set))
(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version/db-engine-description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version/supported-timezones (clojure.spec.alpha/and :portkey.aws.neptune/supported-timezones-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version/supports-read-replica (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version/db-engine-version-description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version/valid-upgrade-target (clojure.spec.alpha/and :portkey.aws.neptune/valid-upgrade-target-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version/supported-character-sets (clojure.spec.alpha/and :portkey.aws.neptune/supported-character-sets-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version/supports-log-exports-to-cloudwatch-logs (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version/engine (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version/exportable-log-types (clojure.spec.alpha/and :portkey.aws.neptune/log-type-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-engine-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-engine-version/default-character-set :portkey.aws.neptune.db-engine-version/db-engine-description :portkey.aws.neptune.db-engine-version/supported-timezones :portkey.aws.neptune.db-engine-version/supports-read-replica :portkey.aws.neptune.db-engine-version/db-engine-version-description :portkey.aws.neptune.db-engine-version/valid-upgrade-target :portkey.aws.neptune.db-engine-version/engine-version :portkey.aws.neptune.db-engine-version/supported-character-sets :portkey.aws.neptune.db-engine-version/supports-log-exports-to-cloudwatch-logs :portkey.aws.neptune.db-engine-version/engine :portkey.aws.neptune.db-engine-version/exportable-log-types :portkey.aws.neptune.db-engine-version/db-parameter-group-family]))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-parameters-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-parameters-message/source (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-db-cluster-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.describe-db-cluster-parameters-message/db-cluster-parameter-group-name] :opt-un [:portkey.aws.neptune.describe-db-cluster-parameters-message/source :portkey.aws.neptune.describe-db-cluster-parameters-message/filters :portkey.aws.neptune.describe-db-cluster-parameters-message/max-records :portkey.aws.neptune.describe-db-cluster-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune/subscription-already-exist-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-upgrade-dependency-failure-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.add-source-identifier-to-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.add-source-identifier-to-subscription-message/source-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/add-source-identifier-to-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.add-source-identifier-to-subscription-message/subscription-name :portkey.aws.neptune.add-source-identifier-to-subscription-message/source-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/domain-membership-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/domain-membership))

(clojure.spec.alpha/def :portkey.aws.neptune.add-tags-to-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.add-tags-to-resource-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune/add-tags-to-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.add-tags-to-resource-message/resource-name :portkey.aws.neptune.add-tags-to-resource-message/tags] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.valid-storage-options/storage-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.valid-storage-options/storage-size (clojure.spec.alpha/and :portkey.aws.neptune/range-list))
(clojure.spec.alpha/def :portkey.aws.neptune.valid-storage-options/provisioned-iops (clojure.spec.alpha/and :portkey.aws.neptune/range-list))
(clojure.spec.alpha/def :portkey.aws.neptune.valid-storage-options/iops-to-storage-ratio (clojure.spec.alpha/and :portkey.aws.neptune/double-range-list))
(clojure.spec.alpha/def :portkey.aws.neptune/valid-storage-options (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.valid-storage-options/storage-type :portkey.aws.neptune.valid-storage-options/storage-size :portkey.aws.neptune.valid-storage-options/provisioned-iops :portkey.aws.neptune.valid-storage-options/iops-to-storage-ratio]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/invalid-event-subscription-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/tag-list-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/tag-list]))

(clojure.spec.alpha/def :portkey.aws.neptune.create-db-parameter-group-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-parameter-group-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-parameter-group-message/description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune/create-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.create-db-parameter-group-message/db-parameter-group-name :portkey.aws.neptune.create-db-parameter-group-message/db-parameter-group-family :portkey.aws.neptune.create-db-parameter-group-message/description] :opt-un [:portkey.aws.neptune.create-db-parameter-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.neptune.vpc-security-group-membership/vpc-security-group-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.vpc-security-group-membership/status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/vpc-security-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.vpc-security-group-membership/vpc-security-group-id :portkey.aws.neptune.vpc-security-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.neptune.valid-db-instance-modifications-message/storage (clojure.spec.alpha/and :portkey.aws.neptune/valid-storage-options-list))
(clojure.spec.alpha/def :portkey.aws.neptune/valid-db-instance-modifications-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.valid-db-instance-modifications-message/storage]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-subnet-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/provisioned-iops-not-available-in-az-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-parameter-group-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.neptune/parameters-list))
(clojure.spec.alpha/def :portkey.aws.neptune/modify-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.modify-db-parameter-group-message/db-parameter-group-name :portkey.aws.neptune.modify-db-parameter-group-message/parameters] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-valid-db-instance-modifications-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-valid-db-instance-modifications-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.describe-valid-db-instance-modifications-message/db-instance-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-snapshot-attribute-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-cluster-snapshot-attribute))

(clojure.spec.alpha/def :portkey.aws.neptune/modify-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-instance]))

(clojure.spec.alpha/def :portkey.aws.neptune.reboot-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.reboot-db-instance-message/force-failover (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune/reboot-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.reboot-db-instance-message/db-instance-identifier] :opt-un [:portkey.aws.neptune.reboot-db-instance-message/force-failover]))

(clojure.spec.alpha/def :portkey.aws.neptune/resource-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/option-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/option-group-membership))

(clojure.spec.alpha/def :portkey.aws.neptune.remove-source-identifier-from-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.remove-source-identifier-from-subscription-message/source-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/remove-source-identifier-from-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.remove-source-identifier-from-subscription-message/subscription-name :portkey.aws.neptune.remove-source-identifier-from-subscription-message/source-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/create-db-cluster-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.neptune.remove-tags-from-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.remove-tags-from-resource-message/tag-keys (clojure.spec.alpha/and :portkey.aws.neptune/key-list))
(clojure.spec.alpha/def :portkey.aws.neptune/remove-tags-from-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.remove-tags-from-resource-message/resource-name :portkey.aws.neptune.remove-tags-from-resource-message/tag-keys] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/event-categories-map-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/event-categories-map))

(clojure.spec.alpha/def :portkey.aws.neptune/integer clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.neptune/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-snapshot-attribute-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-snapshot-attribute-message/attribute-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-snapshot-attribute-message/values-to-add (clojure.spec.alpha/and :portkey.aws.neptune/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-snapshot-attribute-message/values-to-remove (clojure.spec.alpha/and :portkey.aws.neptune/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.neptune/modify-db-cluster-snapshot-attribute-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.modify-db-cluster-snapshot-attribute-message/db-cluster-snapshot-identifier :portkey.aws.neptune.modify-db-cluster-snapshot-attribute-message/attribute-name] :opt-un [:portkey.aws.neptune.modify-db-cluster-snapshot-attribute-message/values-to-add :portkey.aws.neptune.modify-db-cluster-snapshot-attribute-message/values-to-remove]))

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot-attribute/attribute-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot-attribute/attribute-values (clojure.spec.alpha/and :portkey.aws.neptune/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-snapshot-attribute (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster-snapshot-attribute/attribute-name :portkey.aws.neptune.db-cluster-snapshot-attribute/attribute-values]))

(clojure.spec.alpha/def :portkey.aws.neptune.parameter/data-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.parameter/parameter-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.parameter/source (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.parameter/minimum-engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.parameter/allowed-values (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.parameter/apply-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.parameter/description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.parameter/is-modifiable (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.parameter/parameter-value (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/parameter (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.parameter/data-type :portkey.aws.neptune.parameter/parameter-name :portkey.aws.neptune.parameter/source :portkey.aws.neptune.parameter/minimum-engine-version :portkey.aws.neptune.parameter/allowed-values :portkey.aws.neptune.parameter/apply-type :portkey.aws.neptune.parameter/description :portkey.aws.neptune/apply-method :portkey.aws.neptune.parameter/is-modifiable :portkey.aws.neptune.parameter/parameter-value]))

(clojure.spec.alpha/def :portkey.aws.neptune/vpc-security-group-id-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune.db-security-group-membership/db-security-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-security-group-membership/status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-security-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-security-group-membership/db-security-group-name :portkey.aws.neptune.db-security-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.neptune/read-replica-db-cluster-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot-attributes-result/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot-attributes-result/db-cluster-snapshot-attributes (clojure.spec.alpha/and :portkey.aws.neptune/db-cluster-snapshot-attribute-list))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-snapshot-attributes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster-snapshot-attributes-result/db-cluster-snapshot-identifier :portkey.aws.neptune.db-cluster-snapshot-attributes-result/db-cluster-snapshot-attributes]))

(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/backup-retention-period (clojure.spec.alpha/and :portkey.aws.neptune/integer))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/db-security-groups (clojure.spec.alpha/and :portkey.aws.neptune/db-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/secondary-availability-zone (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/promotion-tier (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/character-set-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/publicly-accessible (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/read-replica-db-cluster-identifiers (clojure.spec.alpha/and :portkey.aws.neptune/read-replica-db-cluster-identifier-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/read-replica-db-instance-identifiers (clojure.spec.alpha/and :portkey.aws.neptune/read-replica-db-instance-identifier-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/domain-memberships (clojure.spec.alpha/and :portkey.aws.neptune/domain-membership-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/enabled-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.neptune/log-type-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/db-instance-port (clojure.spec.alpha/and :portkey.aws.neptune/integer))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/db-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/db-instance-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/instance-create-time (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/availability-zone (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/read-replica-source-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/license-model (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/allocated-storage (clojure.spec.alpha/and :portkey.aws.neptune/integer))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/monitoring-interval (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/timezone (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/master-username (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/performance-insights-enabled (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/storage-encrypted (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/kms-key-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/dbi-resource-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/iops (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/storage-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/ca-certificate-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/option-group-memberships (clojure.spec.alpha/and :portkey.aws.neptune/option-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/iam-database-authentication-enabled (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/db-instance-class (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/db-parameter-groups (clojure.spec.alpha/and :portkey.aws.neptune/db-parameter-group-status-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/vpc-security-groups (clojure.spec.alpha/and :portkey.aws.neptune/vpc-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/engine (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/db-instance-status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/status-infos (clojure.spec.alpha/and :portkey.aws.neptune/db-instance-status-info-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/enhanced-monitoring-resource-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/multi-az (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/performance-insights-kms-key-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/latest-restorable-time (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune/db-instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-instance/backup-retention-period :portkey.aws.neptune.db-instance/db-security-groups :portkey.aws.neptune.db-instance/secondary-availability-zone :portkey.aws.neptune.db-instance/promotion-tier :portkey.aws.neptune.db-instance/character-set-name :portkey.aws.neptune.db-instance/publicly-accessible :portkey.aws.neptune.db-instance/read-replica-db-cluster-identifiers :portkey.aws.neptune.db-instance/read-replica-db-instance-identifiers :portkey.aws.neptune.db-instance/domain-memberships :portkey.aws.neptune.db-instance/preferred-maintenance-window :portkey.aws.neptune.db-instance/copy-tags-to-snapshot :portkey.aws.neptune.db-instance/db-instance-identifier :portkey.aws.neptune.db-instance/enabled-cloudwatch-logs-exports :portkey.aws.neptune.db-instance/auto-minor-version-upgrade :portkey.aws.neptune.db-instance/db-instance-port :portkey.aws.neptune.db-instance/db-name :portkey.aws.neptune.db-instance/db-instance-arn :portkey.aws.neptune.db-instance/instance-create-time :portkey.aws.neptune.db-instance/availability-zone :portkey.aws.neptune.db-instance/read-replica-source-db-instance-identifier :portkey.aws.neptune.db-instance/license-model :portkey.aws.neptune.db-instance/allocated-storage :portkey.aws.neptune.db-instance/monitoring-interval :portkey.aws.neptune.db-instance/timezone :portkey.aws.neptune.db-instance/master-username :portkey.aws.neptune.db-instance/engine-version :portkey.aws.neptune.db-instance/performance-insights-enabled :portkey.aws.neptune.db-instance/storage-encrypted :portkey.aws.neptune.db-instance/kms-key-id :portkey.aws.neptune.db-instance/dbi-resource-id :portkey.aws.neptune.db-instance/iops :portkey.aws.neptune.db-instance/storage-type :portkey.aws.neptune.db-instance/ca-certificate-identifier :portkey.aws.neptune/endpoint :portkey.aws.neptune.db-instance/option-group-memberships :portkey.aws.neptune.db-instance/iam-database-authentication-enabled :portkey.aws.neptune.db-instance/db-instance-class :portkey.aws.neptune.db-instance/db-parameter-groups :portkey.aws.neptune.db-instance/vpc-security-groups :portkey.aws.neptune.db-instance/engine :portkey.aws.neptune.db-instance/db-instance-status :portkey.aws.neptune.db-instance/status-infos :portkey.aws.neptune.db-instance/monitoring-role-arn :portkey.aws.neptune.db-instance/tde-credential-arn :portkey.aws.neptune.db-instance/enhanced-monitoring-resource-arn :portkey.aws.neptune.db-instance/multi-az :portkey.aws.neptune.db-instance/performance-insights-kms-key-id :portkey.aws.neptune.db-instance/db-cluster-identifier :portkey.aws.neptune.db-instance/preferred-backup-window :portkey.aws.neptune/pending-modified-values :portkey.aws.neptune.db-instance/latest-restorable-time :portkey.aws.neptune/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.neptune/create-db-cluster-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster-snapshot]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-parameter-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/t-stamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-message/db-clusters (clojure.spec.alpha/and :portkey.aws.neptune/db-cluster-list))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster-message/marker :portkey.aws.neptune.db-cluster-message/db-clusters]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-security-group-membership))

(clojure.spec.alpha/def :portkey.aws.neptune.event-categories-map/source-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.event-categories-map/event-categories (clojure.spec.alpha/and :portkey.aws.neptune/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.neptune/event-categories-map (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.event-categories-map/source-type :portkey.aws.neptune.event-categories-map/event-categories]))

(clojure.spec.alpha/def :portkey.aws.neptune/event-subscription-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/describe-db-cluster-snapshot-attributes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster-snapshot-attributes-result]))

(clojure.spec.alpha/def :portkey.aws.neptune/kms-key-not-accessible-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.create-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-event-subscription-message/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-event-subscription-message/source-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-event-subscription-message/event-categories (clojure.spec.alpha/and :portkey.aws.neptune/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.neptune.create-event-subscription-message/source-ids (clojure.spec.alpha/and :portkey.aws.neptune/source-ids-list))
(clojure.spec.alpha/def :portkey.aws.neptune.create-event-subscription-message/enabled (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-event-subscription-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune/create-event-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.create-event-subscription-message/subscription-name :portkey.aws.neptune.create-event-subscription-message/sns-topic-arn] :opt-un [:portkey.aws.neptune.create-event-subscription-message/source-type :portkey.aws.neptune.create-event-subscription-message/event-categories :portkey.aws.neptune.create-event-subscription-message/source-ids :portkey.aws.neptune.create-event-subscription-message/enabled :portkey.aws.neptune.create-event-subscription-message/tags]))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-snapshot-attributes-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-db-cluster-snapshot-attributes-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.describe-db-cluster-snapshot-attributes-message/db-cluster-snapshot-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/event-categories-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version-message/db-engine-versions (clojure.spec.alpha/and :portkey.aws.neptune/db-engine-version-list))
(clojure.spec.alpha/def :portkey.aws.neptune/db-engine-version-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-engine-version-message/marker :portkey.aws.neptune.db-engine-version-message/db-engine-versions]))

(clojure.spec.alpha/def :portkey.aws.neptune/modify-db-cluster-snapshot-attribute-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster-snapshot-attributes-result]))

(clojure.spec.alpha/def :portkey.aws.neptune.db-instance-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance-message/db-instances (clojure.spec.alpha/and :portkey.aws.neptune/db-instance-list))
(clojure.spec.alpha/def :portkey.aws.neptune/db-instance-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-instance-message/marker :portkey.aws.neptune.db-instance-message/db-instances]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-security-group-name-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-clusters-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-clusters-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-clusters-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-clusters-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-db-clusters-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.describe-db-clusters-message/db-cluster-identifier :portkey.aws.neptune.describe-db-clusters-message/filters :portkey.aws.neptune.describe-db-clusters-message/max-records :portkey.aws.neptune.describe-db-clusters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune/create-db-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-parameter-group/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-parameter-group/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-parameter-group/description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-parameter-group/db-cluster-parameter-group-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-parameter-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster-parameter-group/db-cluster-parameter-group-name :portkey.aws.neptune.db-cluster-parameter-group/db-parameter-group-family :portkey.aws.neptune.db-cluster-parameter-group/description :portkey.aws.neptune.db-cluster-parameter-group/db-cluster-parameter-group-arn]))

(clojure.spec.alpha/def :portkey.aws.neptune/apply-method #{"immediate" :pendingreboot :immediate "pending-reboot"})

(clojure.spec.alpha/def :portkey.aws.neptune/describe-engine-default-cluster-parameters-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/engine-defaults]))

(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-snapshot-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-snapshot-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune/create-db-cluster-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.create-db-cluster-snapshot-message/db-cluster-snapshot-identifier :portkey.aws.neptune.create-db-cluster-snapshot-message/db-cluster-identifier] :opt-un [:portkey.aws.neptune.create-db-cluster-snapshot-message/tags]))

(clojure.spec.alpha/def :portkey.aws.neptune.endpoint/address (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.endpoint/port (clojure.spec.alpha/and :portkey.aws.neptune/integer))
(clojure.spec.alpha/def :portkey.aws.neptune.endpoint/hosted-zone-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/endpoint (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.endpoint/address :portkey.aws.neptune.endpoint/port :portkey.aws.neptune.endpoint/hosted-zone-id]))

(clojure.spec.alpha/def :portkey.aws.neptune/invalid-db-cluster-snapshot-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.db-parameter-group/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-parameter-group/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-parameter-group/description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-parameter-group/db-parameter-group-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-parameter-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-parameter-group/db-parameter-group-name :portkey.aws.neptune.db-parameter-group/db-parameter-group-family :portkey.aws.neptune.db-parameter-group/description :portkey.aws.neptune.db-parameter-group/db-parameter-group-arn]))

(clojure.spec.alpha/def :portkey.aws.neptune/supported-character-sets-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/character-set))

(clojure.spec.alpha/def :portkey.aws.neptune/storage-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.cloudwatch-logs-export-configuration/enable-log-types (clojure.spec.alpha/and :portkey.aws.neptune/log-type-list))
(clojure.spec.alpha/def :portkey.aws.neptune.cloudwatch-logs-export-configuration/disable-log-types (clojure.spec.alpha/and :portkey.aws.neptune/log-type-list))
(clojure.spec.alpha/def :portkey.aws.neptune/cloudwatch-logs-export-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.cloudwatch-logs-export-configuration/enable-log-types :portkey.aws.neptune.cloudwatch-logs-export-configuration/disable-log-types]))

(clojure.spec.alpha/def :portkey.aws.neptune/invalid-restore-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/log-type-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune/insufficient-db-cluster-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-option-group-status/db-cluster-option-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-option-group-status/status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-option-group-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster-option-group-status/db-cluster-option-group-name :portkey.aws.neptune.db-cluster-option-group-status/status]))

(clojure.spec.alpha/def :portkey.aws.neptune.option-group-membership/option-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.option-group-membership/status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/option-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.option-group-membership/option-group-name :portkey.aws.neptune.option-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.neptune.upgrade-target/engine (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.upgrade-target/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.upgrade-target/description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.upgrade-target/auto-upgrade (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.upgrade-target/is-major-version-upgrade (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune/upgrade-target (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.upgrade-target/engine :portkey.aws.neptune.upgrade-target/engine-version :portkey.aws.neptune.upgrade-target/description :portkey.aws.neptune.upgrade-target/auto-upgrade :portkey.aws.neptune.upgrade-target/is-major-version-upgrade]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-parameter-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/attribute-value-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-parameter-groups-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-parameter-groups-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-parameter-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-db-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.describe-db-parameter-groups-message/db-parameter-group-name :portkey.aws.neptune.describe-db-parameter-groups-message/filters :portkey.aws.neptune.describe-db-parameter-groups-message/max-records :portkey.aws.neptune.describe-db-parameter-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune/invalid-db-subnet-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.character-set/character-set-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.character-set/character-set-description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/character-set (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.character-set/character-set-name :portkey.aws.neptune.character-set/character-set-description]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-parameter-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.delete-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.delete-db-cluster-message/skip-final-snapshot (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.delete-db-cluster-message/final-db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/delete-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.delete-db-cluster-message/db-cluster-identifier] :opt-un [:portkey.aws.neptune.delete-db-cluster-message/skip-final-snapshot :portkey.aws.neptune.delete-db-cluster-message/final-db-snapshot-identifier]))

(clojure.spec.alpha/def :portkey.aws.neptune/describe-valid-db-instance-modifications-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/valid-db-instance-modifications-message]))

(clojure.spec.alpha/def :portkey.aws.neptune/modify-event-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.neptune.tag/key (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.tag/value (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/tag (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.tag/key :portkey.aws.neptune.tag/value]))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-event-categories-message/source-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-event-categories-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-event-categories-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.describe-event-categories-message/source-type :portkey.aws.neptune.describe-event-categories-message/filters]))

(clojure.spec.alpha/def :portkey.aws.neptune/insufficient-db-instance-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/boolean-optional clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.neptune/failover-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.neptune/sns-invalid-topic-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.delete-db-cluster-parameter-group-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/delete-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.delete-db-cluster-parameter-group-message/db-cluster-parameter-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.list-tags-for-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.list-tags-for-resource-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune/list-tags-for-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.list-tags-for-resource-message/resource-name] :opt-un [:portkey.aws.neptune.list-tags-for-resource-message/filters]))

(clojure.spec.alpha/def :portkey.aws.neptune.failover-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.failover-db-cluster-message/target-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/failover-db-cluster-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.failover-db-cluster-message/db-cluster-identifier :portkey.aws.neptune.failover-db-cluster-message/target-db-instance-identifier]))

(clojure.spec.alpha/def :portkey.aws.neptune.delete-db-subnet-group-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/delete-db-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.delete-db-subnet-group-message/db-subnet-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-instance-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-instance))

(clojure.spec.alpha/def :portkey.aws.neptune/delete-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-instance]))

(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/option-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/replication-source-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/character-set-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/pre-signed-url (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/database-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.neptune/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/master-user-password (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/master-username (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/storage-encrypted (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/port (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/engine (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/create-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.create-db-cluster-message/db-cluster-identifier :portkey.aws.neptune.create-db-cluster-message/engine] :opt-un [:portkey.aws.neptune.create-db-cluster-message/backup-retention-period :portkey.aws.neptune.create-db-cluster-message/option-group-name :portkey.aws.neptune.create-db-cluster-message/replication-source-identifier :portkey.aws.neptune.create-db-cluster-message/character-set-name :portkey.aws.neptune.create-db-cluster-message/enable-iam-database-authentication :portkey.aws.neptune.create-db-cluster-message/pre-signed-url :portkey.aws.neptune.create-db-cluster-message/database-name :portkey.aws.neptune.create-db-cluster-message/preferred-maintenance-window :portkey.aws.neptune.create-db-cluster-message/tags :portkey.aws.neptune.create-db-cluster-message/vpc-security-group-ids :portkey.aws.neptune.create-db-cluster-message/db-cluster-parameter-group-name :portkey.aws.neptune.create-db-cluster-message/master-user-password :portkey.aws.neptune.create-db-cluster-message/master-username :portkey.aws.neptune.create-db-cluster-message/engine-version :portkey.aws.neptune.create-db-cluster-message/storage-encrypted :portkey.aws.neptune.create-db-cluster-message/db-subnet-group-name :portkey.aws.neptune.create-db-cluster-message/port :portkey.aws.neptune.create-db-cluster-message/kms-key-id :portkey.aws.neptune/availability-zones :portkey.aws.neptune.create-db-cluster-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.neptune/delete-event-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.neptune.pending-maintenance-actions-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/pending-maintenance-actions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/pending-maintenance-actions :portkey.aws.neptune.pending-maintenance-actions-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-subnet-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/add-source-identifier-to-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-parameter-groups-message/db-cluster-parameter-groups (clojure.spec.alpha/and :portkey.aws.neptune/db-cluster-parameter-group-list))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster-parameter-groups-message/marker :portkey.aws.neptune.db-cluster-parameter-groups-message/db-cluster-parameter-groups]))

(clojure.spec.alpha/def :portkey.aws.neptune/event-subscriptions-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/event-subscription))

(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-parameter-group-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-parameter-group-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-parameter-group-message/description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune/create-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.create-db-cluster-parameter-group-message/db-cluster-parameter-group-name :portkey.aws.neptune.create-db-cluster-parameter-group-message/db-parameter-group-family :portkey.aws.neptune.create-db-cluster-parameter-group-message/description] :opt-un [:portkey.aws.neptune.create-db-cluster-parameter-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-option-group-memberships (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-cluster-option-group-status))

(clojure.spec.alpha/def :portkey.aws.neptune.engine-defaults/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.engine-defaults/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.engine-defaults/parameters (clojure.spec.alpha/and :portkey.aws.neptune/parameters-list))
(clojure.spec.alpha/def :portkey.aws.neptune/engine-defaults (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.engine-defaults/db-parameter-group-family :portkey.aws.neptune.engine-defaults/marker :portkey.aws.neptune.engine-defaults/parameters]))

(clojure.spec.alpha/def :portkey.aws.neptune/availability-zones (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune/db-subnet-groups (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-subnet-group))

(clojure.spec.alpha/def :portkey.aws.neptune/delete-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-subnet-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/invalid-db-snapshot-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/integer-optional clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.neptune/supported-timezones-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/timezone))

(clojure.spec.alpha/def :portkey.aws.neptune/range-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/range))

(clojure.spec.alpha/def :portkey.aws.neptune/db-instance-status-info-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-instance-status-info))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-parameters-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-parameters-message/source (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-db-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.describe-db-parameters-message/db-parameter-group-name] :opt-un [:portkey.aws.neptune.describe-db-parameters-message/source :portkey.aws.neptune.describe-db-parameters-message/filters :portkey.aws.neptune.describe-db-parameters-message/max-records :portkey.aws.neptune.describe-db-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune.domain-membership/domain (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.domain-membership/status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.domain-membership/fqdn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.domain-membership/iam-role-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/domain-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.domain-membership/domain :portkey.aws.neptune.domain-membership/status :portkey.aws.neptune.domain-membership/fqdn :portkey.aws.neptune.domain-membership/iam-role-name]))

(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/supports-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/supports-iops (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/multi-az-capable (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/min-storage-size (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/max-iops-per-gib (clojure.spec.alpha/and :portkey.aws.neptune/double-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/min-iops-per-db-instance (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/license-model (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/vpc (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/supports-performance-insights (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/storage-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/max-storage-size (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/min-iops-per-gib (clojure.spec.alpha/and :portkey.aws.neptune/double-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/read-replica-capable (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/db-instance-class (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/supports-storage-encryption (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/engine (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/availability-zones (clojure.spec.alpha/and :portkey.aws.neptune/availability-zone-list))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/supports-enhanced-monitoring (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/max-iops-per-db-instance (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune/orderable-db-instance-option (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.orderable-db-instance-option/supports-iam-database-authentication :portkey.aws.neptune.orderable-db-instance-option/supports-iops :portkey.aws.neptune.orderable-db-instance-option/multi-az-capable :portkey.aws.neptune.orderable-db-instance-option/min-storage-size :portkey.aws.neptune.orderable-db-instance-option/max-iops-per-gib :portkey.aws.neptune.orderable-db-instance-option/min-iops-per-db-instance :portkey.aws.neptune.orderable-db-instance-option/license-model :portkey.aws.neptune.orderable-db-instance-option/engine-version :portkey.aws.neptune.orderable-db-instance-option/vpc :portkey.aws.neptune.orderable-db-instance-option/supports-performance-insights :portkey.aws.neptune.orderable-db-instance-option/storage-type :portkey.aws.neptune.orderable-db-instance-option/max-storage-size :portkey.aws.neptune.orderable-db-instance-option/min-iops-per-gib :portkey.aws.neptune.orderable-db-instance-option/read-replica-capable :portkey.aws.neptune.orderable-db-instance-option/db-instance-class :portkey.aws.neptune.orderable-db-instance-option/supports-storage-encryption :portkey.aws.neptune.orderable-db-instance-option/engine :portkey.aws.neptune.orderable-db-instance-option/availability-zones :portkey.aws.neptune.orderable-db-instance-option/supports-enhanced-monitoring :portkey.aws.neptune.orderable-db-instance-option/max-iops-per-db-instance]))

(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/backup-retention-period (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/master-user-password (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/license-model (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/allocated-storage (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/port (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/iops (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/storage-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/ca-certificate-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/db-instance-class (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/multi-az (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune/pending-modified-values (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.pending-modified-values/backup-retention-period :portkey.aws.neptune/pending-cloudwatch-logs-exports :portkey.aws.neptune.pending-modified-values/db-instance-identifier :portkey.aws.neptune.pending-modified-values/master-user-password :portkey.aws.neptune.pending-modified-values/license-model :portkey.aws.neptune.pending-modified-values/allocated-storage :portkey.aws.neptune.pending-modified-values/engine-version :portkey.aws.neptune.pending-modified-values/db-subnet-group-name :portkey.aws.neptune.pending-modified-values/port :portkey.aws.neptune.pending-modified-values/iops :portkey.aws.neptune.pending-modified-values/storage-type :portkey.aws.neptune.pending-modified-values/ca-certificate-identifier :portkey.aws.neptune.pending-modified-values/db-instance-class :portkey.aws.neptune.pending-modified-values/multi-az]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-subnet-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/subnet-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/subnet))

(clojure.spec.alpha/def :portkey.aws.neptune/filter-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/filter))

(clojure.spec.alpha/def :portkey.aws.neptune/db-snapshot-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/invalid-db-parameter-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/option-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/db-security-groups (clojure.spec.alpha/and :portkey.aws.neptune/db-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/promotion-tier (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/domain-iam-role-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/new-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.neptune/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/master-user-password (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/license-model (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/domain (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/allow-major-version-upgrade (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/allocated-storage (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/monitoring-interval (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/db-port-number (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/iops (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/tde-credential-password (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/storage-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/ca-certificate-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/enable-performance-insights (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/multi-az (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/performance-insights-kms-key-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/modify-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.modify-db-instance-message/db-instance-identifier] :opt-un [:portkey.aws.neptune.modify-db-instance-message/backup-retention-period :portkey.aws.neptune.modify-db-instance-message/option-group-name :portkey.aws.neptune.modify-db-instance-message/db-security-groups :portkey.aws.neptune.modify-db-instance-message/promotion-tier :portkey.aws.neptune.modify-db-instance-message/enable-iam-database-authentication :portkey.aws.neptune.modify-db-instance-message/publicly-accessible :portkey.aws.neptune.modify-db-instance-message/domain-iam-role-name :portkey.aws.neptune.modify-db-instance-message/preferred-maintenance-window :portkey.aws.neptune.modify-db-instance-message/copy-tags-to-snapshot :portkey.aws.neptune.modify-db-instance-message/auto-minor-version-upgrade :portkey.aws.neptune.modify-db-instance-message/new-db-instance-identifier :portkey.aws.neptune.modify-db-instance-message/vpc-security-group-ids :portkey.aws.neptune.modify-db-instance-message/master-user-password :portkey.aws.neptune.modify-db-instance-message/license-model :portkey.aws.neptune.modify-db-instance-message/domain :portkey.aws.neptune.modify-db-instance-message/allow-major-version-upgrade :portkey.aws.neptune.modify-db-instance-message/allocated-storage :portkey.aws.neptune.modify-db-instance-message/monitoring-interval :portkey.aws.neptune.modify-db-instance-message/engine-version :portkey.aws.neptune.modify-db-instance-message/db-subnet-group-name :portkey.aws.neptune.modify-db-instance-message/db-port-number :portkey.aws.neptune.modify-db-instance-message/iops :portkey.aws.neptune.modify-db-instance-message/tde-credential-password :portkey.aws.neptune.modify-db-instance-message/storage-type :portkey.aws.neptune.modify-db-instance-message/apply-immediately :portkey.aws.neptune.modify-db-instance-message/ca-certificate-identifier :portkey.aws.neptune/cloudwatch-logs-export-configuration :portkey.aws.neptune.modify-db-instance-message/db-instance-class :portkey.aws.neptune.modify-db-instance-message/db-parameter-group-name :portkey.aws.neptune.modify-db-instance-message/enable-performance-insights :portkey.aws.neptune.modify-db-instance-message/monitoring-role-arn :portkey.aws.neptune.modify-db-instance-message/tde-credential-arn :portkey.aws.neptune.modify-db-instance-message/multi-az :portkey.aws.neptune.modify-db-instance-message/performance-insights-kms-key-id :portkey.aws.neptune.modify-db-instance-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.neptune/modify-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-security-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.db-subnet-group/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-subnet-group/db-subnet-group-description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-subnet-group/vpc-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-subnet-group/subnet-group-status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-subnet-group/subnets (clojure.spec.alpha/and :portkey.aws.neptune/subnet-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-subnet-group/db-subnet-group-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-subnet-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-subnet-group/db-subnet-group-name :portkey.aws.neptune.db-subnet-group/db-subnet-group-description :portkey.aws.neptune.db-subnet-group/vpc-id :portkey.aws.neptune.db-subnet-group/subnet-group-status :portkey.aws.neptune.db-subnet-group/subnets :portkey.aws.neptune.db-subnet-group/db-subnet-group-arn]))

(clojure.spec.alpha/def :portkey.aws.neptune.modify-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-event-subscription-message/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-event-subscription-message/source-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-event-subscription-message/event-categories (clojure.spec.alpha/and :portkey.aws.neptune/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-event-subscription-message/enabled (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune/modify-event-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.modify-event-subscription-message/subscription-name] :opt-un [:portkey.aws.neptune.modify-event-subscription-message/sns-topic-arn :portkey.aws.neptune.modify-event-subscription-message/source-type :portkey.aws.neptune.modify-event-subscription-message/event-categories :portkey.aws.neptune.modify-event-subscription-message/enabled]))

(clojure.spec.alpha/def :portkey.aws.neptune/boolean clojure.core/boolean?)

(clojure.core/defn add-source-identifier-to-subscription ([add-source-identifier-to-subscription-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-add-source-identifier-to-subscription-message add-source-identifier-to-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/add-source-identifier-to-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/add-source-identifier-to-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AddSourceIdentifierToSubscription", :http.request.spec/error-spec {"SubscriptionNotFoundFault" :portkey.aws.neptune/subscription-not-found-fault, "SourceNotFoundFault" :portkey.aws.neptune/source-not-found-fault}})))))
(clojure.spec.alpha/fdef add-source-identifier-to-subscription :args (clojure.spec.alpha/tuple :portkey.aws.neptune/add-source-identifier-to-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/add-source-identifier-to-subscription-result))

(clojure.core/defn delete-db-subnet-group ([delete-db-subnet-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-delete-db-subnet-group-message delete-db-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/delete-db-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteDBSubnetGroup", :http.request.spec/error-spec {"InvalidDBSubnetGroupStateFault" :portkey.aws.neptune/invalid-db-subnet-group-state-fault, "InvalidDBSubnetStateFault" :portkey.aws.neptune/invalid-db-subnet-state-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.neptune/db-subnet-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/delete-db-subnet-group-message) :ret clojure.core/true?)

(clojure.core/defn describe-orderable-db-instance-options ([describe-orderable-db-instance-options-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-orderable-db-instance-options-message describe-orderable-db-instance-options-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/orderable-db-instance-options-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-orderable-db-instance-options-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeOrderableDBInstanceOptions", :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-orderable-db-instance-options :args (clojure.spec.alpha/tuple :portkey.aws.neptune/describe-orderable-db-instance-options-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/orderable-db-instance-options-message))

(clojure.core/defn copy-db-cluster-parameter-group ([copy-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-copy-db-cluster-parameter-group-message copy-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/copy-db-cluster-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/copy-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CopyDBClusterParameterGroup", :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault, "DBParameterGroupQuotaExceededFault" :portkey.aws.neptune/db-parameter-group-quota-exceeded-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.neptune/db-parameter-group-already-exists-fault}})))))
(clojure.spec.alpha/fdef copy-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/copy-db-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/copy-db-cluster-parameter-group-result))

(clojure.core/defn modify-db-subnet-group ([modify-db-subnet-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-modify-db-subnet-group-message modify-db-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/modify-db-subnet-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/modify-db-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyDBSubnetGroup", :http.request.spec/error-spec {"DBSubnetGroupNotFoundFault" :portkey.aws.neptune/db-subnet-group-not-found-fault, "DBSubnetQuotaExceededFault" :portkey.aws.neptune/db-subnet-quota-exceeded-fault, "SubnetAlreadyInUse" :portkey.aws.neptune/subnet-already-in-use, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.neptune/db-subnet-group-does-not-cover-enough-a-zs, "InvalidSubnet" :portkey.aws.neptune/invalid-subnet}})))))
(clojure.spec.alpha/fdef modify-db-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/modify-db-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/modify-db-subnet-group-result))

(clojure.core/defn restore-db-cluster-to-point-in-time ([restore-db-cluster-to-point-in-time-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-restore-db-cluster-to-point-in-time-message restore-db-cluster-to-point-in-time-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/restore-db-cluster-to-point-in-time-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/restore-db-cluster-to-point-in-time-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RestoreDBClusterToPointInTime", :http.request.spec/error-spec {"DBClusterAlreadyExistsFault" :portkey.aws.neptune/db-cluster-already-exists-fault, "OptionGroupNotFoundFault" :portkey.aws.neptune/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.neptune/invalid-vpc-network-state-fault, "DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault, "InsufficientStorageClusterCapacityFault" :portkey.aws.neptune/insufficient-storage-cluster-capacity-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.neptune/db-cluster-snapshot-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.neptune/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.neptune/invalid-subnet, "DBClusterQuotaExceededFault" :portkey.aws.neptune/db-cluster-quota-exceeded-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.neptune/db-subnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.neptune/kms-key-not-accessible-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.neptune/invalid-db-cluster-snapshot-state-fault, "StorageQuotaExceededFault" :portkey.aws.neptune/storage-quota-exceeded-fault, "InvalidRestoreFault" :portkey.aws.neptune/invalid-restore-fault, "InsufficientDBClusterCapacityFault" :portkey.aws.neptune/insufficient-db-cluster-capacity-fault, "InvalidDBSnapshotStateFault" :portkey.aws.neptune/invalid-db-snapshot-state-fault}})))))
(clojure.spec.alpha/fdef restore-db-cluster-to-point-in-time :args (clojure.spec.alpha/tuple :portkey.aws.neptune/restore-db-cluster-to-point-in-time-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/restore-db-cluster-to-point-in-time-result))

(clojure.core/defn describe-events ([] (describe-events {})) ([describe-events-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-events-message describe-events-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/events-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-events-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeEvents", :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-events :args (clojure.spec.alpha/? :portkey.aws.neptune/describe-events-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/events-message))

(clojure.core/defn reset-db-parameter-group ([reset-db-parameter-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-reset-db-parameter-group-message reset-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/reset-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ResetDBParameterGroup", :http.request.spec/error-spec {"InvalidDBParameterGroupStateFault" :portkey.aws.neptune/invalid-db-parameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef reset-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/reset-db-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-parameter-group-name-message))

(clojure.core/defn remove-role-from-db-cluster ([remove-role-from-db-cluster-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-remove-role-from-db-cluster-message remove-role-from-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/remove-role-from-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RemoveRoleFromDBCluster", :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault, "DBClusterRoleNotFoundFault" :portkey.aws.neptune/db-cluster-role-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.neptune/invalid-db-cluster-state-fault}})))))
(clojure.spec.alpha/fdef remove-role-from-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.neptune/remove-role-from-db-cluster-message) :ret clojure.core/true?)

(clojure.core/defn delete-db-cluster-snapshot ([delete-db-cluster-snapshot-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-delete-db-cluster-snapshot-message delete-db-cluster-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/delete-db-cluster-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/delete-db-cluster-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteDBClusterSnapshot", :http.request.spec/error-spec {"InvalidDBClusterSnapshotStateFault" :portkey.aws.neptune/invalid-db-cluster-snapshot-state-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.neptune/db-cluster-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.neptune/delete-db-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/delete-db-cluster-snapshot-result))

(clojure.core/defn reboot-db-instance ([reboot-db-instance-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-reboot-db-instance-message reboot-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/reboot-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/reboot-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RebootDBInstance", :http.request.spec/error-spec {"InvalidDBInstanceStateFault" :portkey.aws.neptune/invalid-db-instance-state-fault, "DBInstanceNotFoundFault" :portkey.aws.neptune/db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef reboot-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.neptune/reboot-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/reboot-db-instance-result))

(clojure.core/defn create-db-cluster-parameter-group ([create-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-db-cluster-parameter-group-message create-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/create-db-cluster-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/create-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateDBClusterParameterGroup", :http.request.spec/error-spec {"DBParameterGroupQuotaExceededFault" :portkey.aws.neptune/db-parameter-group-quota-exceeded-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.neptune/db-parameter-group-already-exists-fault}})))))
(clojure.spec.alpha/fdef create-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/create-db-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/create-db-cluster-parameter-group-result))

(clojure.core/defn copy-db-parameter-group ([copy-db-parameter-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-copy-db-parameter-group-message copy-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/copy-db-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/copy-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CopyDBParameterGroup", :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.neptune/db-parameter-group-already-exists-fault, "DBParameterGroupQuotaExceededFault" :portkey.aws.neptune/db-parameter-group-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef copy-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/copy-db-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/copy-db-parameter-group-result))

(clojure.core/defn list-tags-for-resource ([list-tags-for-resource-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-list-tags-for-resource-message list-tags-for-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/tag-list-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/list-tags-for-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ListTagsForResource", :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.neptune/db-instance-not-found-fault, "DBSnapshotNotFoundFault" :portkey.aws.neptune/db-snapshot-not-found-fault, "DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef list-tags-for-resource :args (clojure.spec.alpha/tuple :portkey.aws.neptune/list-tags-for-resource-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/tag-list-message))

(clojure.core/defn describe-engine-default-parameters ([describe-engine-default-parameters-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-engine-default-parameters-message describe-engine-default-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/describe-engine-default-parameters-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-engine-default-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeEngineDefaultParameters", :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-engine-default-parameters :args (clojure.spec.alpha/tuple :portkey.aws.neptune/describe-engine-default-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/describe-engine-default-parameters-result))

(clojure.core/defn delete-db-instance ([delete-db-instance-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-delete-db-instance-message delete-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/delete-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/delete-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteDBInstance", :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.neptune/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.neptune/invalid-db-instance-state-fault, "DBSnapshotAlreadyExistsFault" :portkey.aws.neptune/db-snapshot-already-exists-fault, "SnapshotQuotaExceededFault" :portkey.aws.neptune/snapshot-quota-exceeded-fault, "InvalidDBClusterStateFault" :portkey.aws.neptune/invalid-db-cluster-state-fault}})))))
(clojure.spec.alpha/fdef delete-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.neptune/delete-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/delete-db-instance-result))

(clojure.core/defn describe-db-subnet-groups ([] (describe-db-subnet-groups {})) ([describe-db-subnet-groups-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-subnet-groups-message describe-db-subnet-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-subnet-group-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-db-subnet-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBSubnetGroups", :http.request.spec/error-spec {"DBSubnetGroupNotFoundFault" :portkey.aws.neptune/db-subnet-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-subnet-groups :args (clojure.spec.alpha/? :portkey.aws.neptune/describe-db-subnet-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-subnet-group-message))

(clojure.core/defn describe-db-clusters ([] (describe-db-clusters {})) ([describe-db-clusters-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-clusters-message describe-db-clusters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-cluster-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-db-clusters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBClusters", :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-clusters :args (clojure.spec.alpha/? :portkey.aws.neptune/describe-db-clusters-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-cluster-message))

(clojure.core/defn create-db-cluster ([create-db-cluster-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-db-cluster-message create-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/create-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/create-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateDBCluster", :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.neptune/db-instance-not-found-fault, "DBClusterAlreadyExistsFault" :portkey.aws.neptune/db-cluster-already-exists-fault, "InvalidDBInstanceStateFault" :portkey.aws.neptune/invalid-db-instance-state-fault, "InvalidVPCNetworkStateFault" :portkey.aws.neptune/invalid-vpc-network-state-fault, "InvalidDBSubnetGroupStateFault" :portkey.aws.neptune/invalid-db-subnet-group-state-fault, "DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault, "DBClusterParameterGroupNotFoundFault" :portkey.aws.neptune/db-cluster-parameter-group-not-found-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.neptune/db-subnet-group-does-not-cover-enough-a-zs, "InsufficientStorageClusterCapacityFault" :portkey.aws.neptune/insufficient-storage-cluster-capacity-fault, "InvalidDBClusterStateFault" :portkey.aws.neptune/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.neptune/invalid-subnet, "DBClusterQuotaExceededFault" :portkey.aws.neptune/db-cluster-quota-exceeded-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.neptune/db-subnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.neptune/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.neptune/storage-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef create-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.neptune/create-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/create-db-cluster-result))

(clojure.core/defn failover-db-cluster ([] (failover-db-cluster {})) ([failover-db-cluster-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-failover-db-cluster-message failover-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/failover-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/failover-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "FailoverDBCluster", :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.neptune/invalid-db-cluster-state-fault, "InvalidDBInstanceStateFault" :portkey.aws.neptune/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef failover-db-cluster :args (clojure.spec.alpha/? :portkey.aws.neptune/failover-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/failover-db-cluster-result))

(clojure.core/defn reset-db-cluster-parameter-group ([reset-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-reset-db-cluster-parameter-group-message reset-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-cluster-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/reset-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ResetDBClusterParameterGroup", :http.request.spec/error-spec {"InvalidDBParameterGroupStateFault" :portkey.aws.neptune/invalid-db-parameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef reset-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/reset-db-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-cluster-parameter-group-name-message))

(clojure.core/defn create-db-instance ([create-db-instance-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-db-instance-message create-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/create-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/create-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateDBInstance", :http.request.spec/error-spec {"DomainNotFoundFault" :portkey.aws.neptune/domain-not-found-fault, "InstanceQuotaExceededFault" :portkey.aws.neptune/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.neptune/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.neptune/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.neptune/db-instance-already-exists-fault, "DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault, "StorageTypeNotSupportedFault" :portkey.aws.neptune/storage-type-not-supported-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.neptune/db-subnet-group-does-not-cover-enough-a-zs, "AuthorizationNotFoundFault" :portkey.aws.neptune/authorization-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.neptune/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.neptune/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.neptune/db-subnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.neptune/provisioned-iops-not-available-in-az-fault, "DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.neptune/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.neptune/storage-quota-exceeded-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.neptune/insufficient-db-instance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.neptune/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef create-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.neptune/create-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/create-db-instance-result))

(clojure.core/defn delete-event-subscription ([delete-event-subscription-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-delete-event-subscription-message delete-event-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/delete-event-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/delete-event-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteEventSubscription", :http.request.spec/error-spec {"SubscriptionNotFoundFault" :portkey.aws.neptune/subscription-not-found-fault, "InvalidEventSubscriptionStateFault" :portkey.aws.neptune/invalid-event-subscription-state-fault}})))))
(clojure.spec.alpha/fdef delete-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.neptune/delete-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/delete-event-subscription-result))

(clojure.core/defn apply-pending-maintenance-action ([apply-pending-maintenance-action-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-apply-pending-maintenance-action-message apply-pending-maintenance-action-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/apply-pending-maintenance-action-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/apply-pending-maintenance-action-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ApplyPendingMaintenanceAction", :http.request.spec/error-spec {"ResourceNotFoundFault" :portkey.aws.neptune/resource-not-found-fault}})))))
(clojure.spec.alpha/fdef apply-pending-maintenance-action :args (clojure.spec.alpha/tuple :portkey.aws.neptune/apply-pending-maintenance-action-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/apply-pending-maintenance-action-result))

(clojure.core/defn delete-db-cluster ([delete-db-cluster-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-delete-db-cluster-message delete-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/delete-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/delete-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteDBCluster", :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.neptune/invalid-db-cluster-state-fault, "DBClusterSnapshotAlreadyExistsFault" :portkey.aws.neptune/db-cluster-snapshot-already-exists-fault, "SnapshotQuotaExceededFault" :portkey.aws.neptune/snapshot-quota-exceeded-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.neptune/invalid-db-cluster-snapshot-state-fault}})))))
(clojure.spec.alpha/fdef delete-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.neptune/delete-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/delete-db-cluster-result))

(clojure.core/defn create-db-subnet-group ([create-db-subnet-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-db-subnet-group-message create-db-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/create-db-subnet-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/create-db-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateDBSubnetGroup", :http.request.spec/error-spec {"DBSubnetGroupAlreadyExistsFault" :portkey.aws.neptune/db-subnet-group-already-exists-fault, "DBSubnetGroupQuotaExceededFault" :portkey.aws.neptune/db-subnet-group-quota-exceeded-fault, "DBSubnetQuotaExceededFault" :portkey.aws.neptune/db-subnet-quota-exceeded-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.neptune/db-subnet-group-does-not-cover-enough-a-zs, "InvalidSubnet" :portkey.aws.neptune/invalid-subnet}})))))
(clojure.spec.alpha/fdef create-db-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/create-db-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/create-db-subnet-group-result))

(clojure.core/defn remove-source-identifier-from-subscription ([remove-source-identifier-from-subscription-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-remove-source-identifier-from-subscription-message remove-source-identifier-from-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/remove-source-identifier-from-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/remove-source-identifier-from-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RemoveSourceIdentifierFromSubscription", :http.request.spec/error-spec {"SubscriptionNotFoundFault" :portkey.aws.neptune/subscription-not-found-fault, "SourceNotFoundFault" :portkey.aws.neptune/source-not-found-fault}})))))
(clojure.spec.alpha/fdef remove-source-identifier-from-subscription :args (clojure.spec.alpha/tuple :portkey.aws.neptune/remove-source-identifier-from-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/remove-source-identifier-from-subscription-result))

(clojure.core/defn describe-db-cluster-parameters ([describe-db-cluster-parameters-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-cluster-parameters-message describe-db-cluster-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-cluster-parameter-group-details, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-db-cluster-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBClusterParameters", :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-parameters :args (clojure.spec.alpha/tuple :portkey.aws.neptune/describe-db-cluster-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-cluster-parameter-group-details))

(clojure.core/defn describe-event-categories ([] (describe-event-categories {})) ([describe-event-categories-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-event-categories-message describe-event-categories-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/event-categories-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-event-categories-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeEventCategories", :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-event-categories :args (clojure.spec.alpha/? :portkey.aws.neptune/describe-event-categories-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/event-categories-message))

(clojure.core/defn describe-engine-default-cluster-parameters ([describe-engine-default-cluster-parameters-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-engine-default-cluster-parameters-message describe-engine-default-cluster-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/describe-engine-default-cluster-parameters-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-engine-default-cluster-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeEngineDefaultClusterParameters", :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-engine-default-cluster-parameters :args (clojure.spec.alpha/tuple :portkey.aws.neptune/describe-engine-default-cluster-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/describe-engine-default-cluster-parameters-result))

(clojure.core/defn modify-db-cluster ([modify-db-cluster-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-modify-db-cluster-message modify-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/modify-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/modify-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyDBCluster", :http.request.spec/error-spec {"DBClusterAlreadyExistsFault" :portkey.aws.neptune/db-cluster-already-exists-fault, "InvalidDBInstanceStateFault" :portkey.aws.neptune/invalid-db-instance-state-fault, "InvalidVPCNetworkStateFault" :portkey.aws.neptune/invalid-vpc-network-state-fault, "InvalidDBSubnetGroupStateFault" :portkey.aws.neptune/invalid-db-subnet-group-state-fault, "DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.neptune/invalid-db-security-group-state-fault, "DBClusterParameterGroupNotFoundFault" :portkey.aws.neptune/db-cluster-parameter-group-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.neptune/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.neptune/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.neptune/db-subnet-group-not-found-fault, "StorageQuotaExceededFault" :portkey.aws.neptune/storage-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef modify-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.neptune/modify-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/modify-db-cluster-result))

(clojure.core/defn describe-pending-maintenance-actions ([] (describe-pending-maintenance-actions {})) ([describe-pending-maintenance-actions-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-pending-maintenance-actions-message describe-pending-maintenance-actions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/pending-maintenance-actions-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-pending-maintenance-actions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribePendingMaintenanceActions", :http.request.spec/error-spec {"ResourceNotFoundFault" :portkey.aws.neptune/resource-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-pending-maintenance-actions :args (clojure.spec.alpha/? :portkey.aws.neptune/describe-pending-maintenance-actions-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/pending-maintenance-actions-message))

(clojure.core/defn describe-db-instances ([] (describe-db-instances {})) ([describe-db-instances-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-instances-message describe-db-instances-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-instance-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-db-instances-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBInstances", :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.neptune/db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-instances :args (clojure.spec.alpha/? :portkey.aws.neptune/describe-db-instances-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-instance-message))

(clojure.core/defn modify-event-subscription ([modify-event-subscription-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-modify-event-subscription-message modify-event-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/modify-event-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/modify-event-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyEventSubscription", :http.request.spec/error-spec {"EventSubscriptionQuotaExceededFault" :portkey.aws.neptune/event-subscription-quota-exceeded-fault, "SubscriptionNotFoundFault" :portkey.aws.neptune/subscription-not-found-fault, "SNSInvalidTopicFault" :portkey.aws.neptune/sns-invalid-topic-fault, "SNSNoAuthorizationFault" :portkey.aws.neptune/sns-no-authorization-fault, "SNSTopicArnNotFoundFault" :portkey.aws.neptune/sns-topic-arn-not-found-fault, "SubscriptionCategoryNotFoundFault" :portkey.aws.neptune/subscription-category-not-found-fault}})))))
(clojure.spec.alpha/fdef modify-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.neptune/modify-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/modify-event-subscription-result))

(clojure.core/defn describe-db-engine-versions ([] (describe-db-engine-versions {})) ([describe-db-engine-versions-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-engine-versions-message describe-db-engine-versions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-engine-version-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-db-engine-versions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBEngineVersions", :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-db-engine-versions :args (clojure.spec.alpha/? :portkey.aws.neptune/describe-db-engine-versions-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-engine-version-message))

(clojure.core/defn modify-db-cluster-parameter-group ([modify-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-modify-db-cluster-parameter-group-message modify-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-cluster-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/modify-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyDBClusterParameterGroup", :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault, "InvalidDBParameterGroupStateFault" :portkey.aws.neptune/invalid-db-parameter-group-state-fault}})))))
(clojure.spec.alpha/fdef modify-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/modify-db-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-cluster-parameter-group-name-message))

(clojure.core/defn create-event-subscription ([create-event-subscription-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-event-subscription-message create-event-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/create-event-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/create-event-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateEventSubscription", :http.request.spec/error-spec {"EventSubscriptionQuotaExceededFault" :portkey.aws.neptune/event-subscription-quota-exceeded-fault, "SubscriptionAlreadyExistFault" :portkey.aws.neptune/subscription-already-exist-fault, "SNSInvalidTopicFault" :portkey.aws.neptune/sns-invalid-topic-fault, "SNSNoAuthorizationFault" :portkey.aws.neptune/sns-no-authorization-fault, "SNSTopicArnNotFoundFault" :portkey.aws.neptune/sns-topic-arn-not-found-fault, "SubscriptionCategoryNotFoundFault" :portkey.aws.neptune/subscription-category-not-found-fault, "SourceNotFoundFault" :portkey.aws.neptune/source-not-found-fault}})))))
(clojure.spec.alpha/fdef create-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.neptune/create-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/create-event-subscription-result))

(clojure.core/defn modify-db-cluster-snapshot-attribute ([modify-db-cluster-snapshot-attribute-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-modify-db-cluster-snapshot-attribute-message modify-db-cluster-snapshot-attribute-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/modify-db-cluster-snapshot-attribute-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/modify-db-cluster-snapshot-attribute-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyDBClusterSnapshotAttribute", :http.request.spec/error-spec {"DBClusterSnapshotNotFoundFault" :portkey.aws.neptune/db-cluster-snapshot-not-found-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.neptune/invalid-db-cluster-snapshot-state-fault, "SharedSnapshotQuotaExceededFault" :portkey.aws.neptune/shared-snapshot-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef modify-db-cluster-snapshot-attribute :args (clojure.spec.alpha/tuple :portkey.aws.neptune/modify-db-cluster-snapshot-attribute-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/modify-db-cluster-snapshot-attribute-result))

(clojure.core/defn create-db-parameter-group ([create-db-parameter-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-db-parameter-group-message create-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/create-db-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/create-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateDBParameterGroup", :http.request.spec/error-spec {"DBParameterGroupQuotaExceededFault" :portkey.aws.neptune/db-parameter-group-quota-exceeded-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.neptune/db-parameter-group-already-exists-fault}})))))
(clojure.spec.alpha/fdef create-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/create-db-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/create-db-parameter-group-result))

(clojure.core/defn describe-valid-db-instance-modifications ([describe-valid-db-instance-modifications-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-valid-db-instance-modifications-message describe-valid-db-instance-modifications-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/describe-valid-db-instance-modifications-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-valid-db-instance-modifications-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeValidDBInstanceModifications", :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.neptune/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.neptune/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef describe-valid-db-instance-modifications :args (clojure.spec.alpha/tuple :portkey.aws.neptune/describe-valid-db-instance-modifications-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/describe-valid-db-instance-modifications-result))

(clojure.core/defn describe-db-cluster-snapshots ([] (describe-db-cluster-snapshots {})) ([describe-db-cluster-snapshots-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-cluster-snapshots-message describe-db-cluster-snapshots-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-cluster-snapshot-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-db-cluster-snapshots-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBClusterSnapshots", :http.request.spec/error-spec {"DBClusterSnapshotNotFoundFault" :portkey.aws.neptune/db-cluster-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-snapshots :args (clojure.spec.alpha/? :portkey.aws.neptune/describe-db-cluster-snapshots-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-cluster-snapshot-message))

(clojure.core/defn delete-db-parameter-group ([delete-db-parameter-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-delete-db-parameter-group-message delete-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/delete-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteDBParameterGroup", :http.request.spec/error-spec {"InvalidDBParameterGroupStateFault" :portkey.aws.neptune/invalid-db-parameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/delete-db-parameter-group-message) :ret clojure.core/true?)

(clojure.core/defn describe-event-subscriptions ([] (describe-event-subscriptions {})) ([describe-event-subscriptions-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-event-subscriptions-message describe-event-subscriptions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/event-subscriptions-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-event-subscriptions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeEventSubscriptions", :http.request.spec/error-spec {"SubscriptionNotFoundFault" :portkey.aws.neptune/subscription-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-event-subscriptions :args (clojure.spec.alpha/? :portkey.aws.neptune/describe-event-subscriptions-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/event-subscriptions-message))

(clojure.core/defn modify-db-instance ([modify-db-instance-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-modify-db-instance-message modify-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/modify-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/modify-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyDBInstance", :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.neptune/db-instance-not-found-fault, "DomainNotFoundFault" :portkey.aws.neptune/domain-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.neptune/invalid-db-instance-state-fault, "OptionGroupNotFoundFault" :portkey.aws.neptune/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.neptune/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.neptune/db-instance-already-exists-fault, "CertificateNotFoundFault" :portkey.aws.neptune/certificate-not-found-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.neptune/invalid-db-security-group-state-fault, "StorageTypeNotSupportedFault" :portkey.aws.neptune/storage-type-not-supported-fault, "AuthorizationNotFoundFault" :portkey.aws.neptune/authorization-not-found-fault, "DBUpgradeDependencyFailureFault" :portkey.aws.neptune/db-upgrade-dependency-failure-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.neptune/provisioned-iops-not-available-in-az-fault, "DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault, "StorageQuotaExceededFault" :portkey.aws.neptune/storage-quota-exceeded-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.neptune/insufficient-db-instance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.neptune/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef modify-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.neptune/modify-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/modify-db-instance-result))

(clojure.core/defn describe-db-cluster-parameter-groups ([] (describe-db-cluster-parameter-groups {})) ([describe-db-cluster-parameter-groups-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-cluster-parameter-groups-message describe-db-cluster-parameter-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-cluster-parameter-groups-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-db-cluster-parameter-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBClusterParameterGroups", :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-parameter-groups :args (clojure.spec.alpha/? :portkey.aws.neptune/describe-db-cluster-parameter-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-cluster-parameter-groups-message))

(clojure.core/defn create-db-cluster-snapshot ([create-db-cluster-snapshot-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-create-db-cluster-snapshot-message create-db-cluster-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/create-db-cluster-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/create-db-cluster-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateDBClusterSnapshot", :http.request.spec/error-spec {"DBClusterSnapshotAlreadyExistsFault" :portkey.aws.neptune/db-cluster-snapshot-already-exists-fault, "InvalidDBClusterStateFault" :portkey.aws.neptune/invalid-db-cluster-state-fault, "DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault, "SnapshotQuotaExceededFault" :portkey.aws.neptune/snapshot-quota-exceeded-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.neptune/invalid-db-cluster-snapshot-state-fault}})))))
(clojure.spec.alpha/fdef create-db-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.neptune/create-db-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/create-db-cluster-snapshot-result))

(clojure.core/defn describe-db-parameters ([describe-db-parameters-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-parameters-message describe-db-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-parameter-group-details, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-db-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBParameters", :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-parameters :args (clojure.spec.alpha/tuple :portkey.aws.neptune/describe-db-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-parameter-group-details))

(clojure.core/defn describe-db-parameter-groups ([] (describe-db-parameter-groups {})) ([describe-db-parameter-groups-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-parameter-groups-message describe-db-parameter-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-parameter-groups-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-db-parameter-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBParameterGroups", :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-parameter-groups :args (clojure.spec.alpha/? :portkey.aws.neptune/describe-db-parameter-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-parameter-groups-message))

(clojure.core/defn remove-tags-from-resource ([remove-tags-from-resource-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-remove-tags-from-resource-message remove-tags-from-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/remove-tags-from-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RemoveTagsFromResource", :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.neptune/db-instance-not-found-fault, "DBSnapshotNotFoundFault" :portkey.aws.neptune/db-snapshot-not-found-fault, "DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef remove-tags-from-resource :args (clojure.spec.alpha/tuple :portkey.aws.neptune/remove-tags-from-resource-message) :ret clojure.core/true?)

(clojure.core/defn copy-db-cluster-snapshot ([copy-db-cluster-snapshot-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-copy-db-cluster-snapshot-message copy-db-cluster-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/copy-db-cluster-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/copy-db-cluster-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CopyDBClusterSnapshot", :http.request.spec/error-spec {"DBClusterSnapshotAlreadyExistsFault" :portkey.aws.neptune/db-cluster-snapshot-already-exists-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.neptune/db-cluster-snapshot-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.neptune/invalid-db-cluster-state-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.neptune/invalid-db-cluster-snapshot-state-fault, "SnapshotQuotaExceededFault" :portkey.aws.neptune/snapshot-quota-exceeded-fault, "KMSKeyNotAccessibleFault" :portkey.aws.neptune/kms-key-not-accessible-fault}})))))
(clojure.spec.alpha/fdef copy-db-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.neptune/copy-db-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/copy-db-cluster-snapshot-result))

(clojure.core/defn delete-db-cluster-parameter-group ([delete-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-delete-db-cluster-parameter-group-message delete-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/delete-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteDBClusterParameterGroup", :http.request.spec/error-spec {"InvalidDBParameterGroupStateFault" :portkey.aws.neptune/invalid-db-parameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/delete-db-cluster-parameter-group-message) :ret clojure.core/true?)

(clojure.core/defn add-role-to-db-cluster ([add-role-to-db-cluster-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-add-role-to-db-cluster-message add-role-to-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/add-role-to-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AddRoleToDBCluster", :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault, "DBClusterRoleAlreadyExistsFault" :portkey.aws.neptune/db-cluster-role-already-exists-fault, "InvalidDBClusterStateFault" :portkey.aws.neptune/invalid-db-cluster-state-fault, "DBClusterRoleQuotaExceededFault" :portkey.aws.neptune/db-cluster-role-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef add-role-to-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.neptune/add-role-to-db-cluster-message) :ret clojure.core/true?)

(clojure.core/defn promote-read-replica-db-cluster ([promote-read-replica-db-cluster-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-promote-read-replica-db-cluster-message promote-read-replica-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/promote-read-replica-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/promote-read-replica-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "PromoteReadReplicaDBCluster", :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.neptune/invalid-db-cluster-state-fault}})))))
(clojure.spec.alpha/fdef promote-read-replica-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.neptune/promote-read-replica-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/promote-read-replica-db-cluster-result))

(clojure.core/defn add-tags-to-resource ([add-tags-to-resource-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-add-tags-to-resource-message add-tags-to-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/add-tags-to-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AddTagsToResource", :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.neptune/db-instance-not-found-fault, "DBSnapshotNotFoundFault" :portkey.aws.neptune/db-snapshot-not-found-fault, "DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef add-tags-to-resource :args (clojure.spec.alpha/tuple :portkey.aws.neptune/add-tags-to-resource-message) :ret clojure.core/true?)

(clojure.core/defn restore-db-cluster-from-snapshot ([restore-db-cluster-from-snapshot-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-restore-db-cluster-from-snapshot-message restore-db-cluster-from-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/restore-db-cluster-from-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/restore-db-cluster-from-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RestoreDBClusterFromSnapshot", :http.request.spec/error-spec {"DBClusterAlreadyExistsFault" :portkey.aws.neptune/db-cluster-already-exists-fault, "OptionGroupNotFoundFault" :portkey.aws.neptune/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.neptune/invalid-vpc-network-state-fault, "InsufficientStorageClusterCapacityFault" :portkey.aws.neptune/insufficient-storage-cluster-capacity-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.neptune/db-cluster-snapshot-not-found-fault, "InvalidSubnet" :portkey.aws.neptune/invalid-subnet, "DBClusterQuotaExceededFault" :portkey.aws.neptune/db-cluster-quota-exceeded-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.neptune/db-subnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.neptune/kms-key-not-accessible-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.neptune/invalid-db-cluster-snapshot-state-fault, "StorageQuotaExceededFault" :portkey.aws.neptune/storage-quota-exceeded-fault, "InvalidRestoreFault" :portkey.aws.neptune/invalid-restore-fault, "InsufficientDBClusterCapacityFault" :portkey.aws.neptune/insufficient-db-cluster-capacity-fault, "InvalidDBSnapshotStateFault" :portkey.aws.neptune/invalid-db-snapshot-state-fault, "DBSnapshotNotFoundFault" :portkey.aws.neptune/db-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef restore-db-cluster-from-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.neptune/restore-db-cluster-from-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/restore-db-cluster-from-snapshot-result))

(clojure.core/defn modify-db-parameter-group ([modify-db-parameter-group-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-modify-db-parameter-group-message modify-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/modify-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyDBParameterGroup", :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault, "InvalidDBParameterGroupStateFault" :portkey.aws.neptune/invalid-db-parameter-group-state-fault}})))))
(clojure.spec.alpha/fdef modify-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/modify-db-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-parameter-group-name-message))

(clojure.core/defn describe-db-cluster-snapshot-attributes ([describe-db-cluster-snapshot-attributes-messageinput] (clojure.core/let [request-function-result__28521__auto__ (req-describe-db-cluster-snapshot-attributes-message describe-db-cluster-snapshot-attributes-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28521__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/describe-db-cluster-snapshot-attributes-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-db-cluster-snapshot-attributes-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDBClusterSnapshotAttributes", :http.request.spec/error-spec {"DBClusterSnapshotNotFoundFault" :portkey.aws.neptune/db-cluster-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-snapshot-attributes :args (clojure.spec.alpha/tuple :portkey.aws.neptune/describe-db-cluster-snapshot-attributes-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/describe-db-cluster-snapshot-attributes-result))
