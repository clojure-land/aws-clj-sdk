(ns portkey.aws.neptune (:require [portkey.aws]))

(def
 endpoints
 '{"us-gov-east-1"
   {:credential-scope {:service "rds", :region "us-gov-east-1"},
    :ssl-common-name "rds.us-gov-east-1.amazonaws.com",
    :endpoint "https://rds.us-gov-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-northeast-1"
   {:credential-scope {:service "rds", :region "ap-northeast-1"},
    :ssl-common-name "rds.ap-northeast-1.amazonaws.com",
    :endpoint "https://rds.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "rds", :region "eu-west-1"},
    :ssl-common-name "rds.eu-west-1.amazonaws.com",
    :endpoint "https://rds.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "rds", :region "us-east-2"},
    :ssl-common-name "rds.us-east-2.amazonaws.com",
    :endpoint "https://rds.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope {:service "rds", :region "ap-southeast-2"},
    :ssl-common-name "rds.ap-southeast-2.amazonaws.com",
    :endpoint "https://rds.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "cn-north-1"
   {:credential-scope {:service "rds", :region "cn-north-1"},
    :ssl-common-name "rds.cn-north-1.amazonaws.com.cn",
    :endpoint "https://rds.cn-north-1.amazonaws.com.cn",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "rds", :region "sa-east-1"},
    :ssl-common-name "rds.sa-east-1.amazonaws.com",
    :endpoint "https://rds.sa-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope {:service "rds", :region "ap-southeast-1"},
    :ssl-common-name "rds.ap-southeast-1.amazonaws.com",
    :endpoint "https://rds.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "cn-northwest-1"
   {:credential-scope {:service "rds", :region "cn-northwest-1"},
    :ssl-common-name "rds.cn-northwest-1.amazonaws.com.cn",
    :endpoint "https://rds.cn-northwest-1.amazonaws.com.cn",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope {:service "rds", :region "ap-northeast-2"},
    :ssl-common-name "rds.ap-northeast-2.amazonaws.com",
    :endpoint "https://rds.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-west-3"
   {:credential-scope {:service "rds", :region "eu-west-3"},
    :ssl-common-name "rds.eu-west-3.amazonaws.com",
    :endpoint "https://rds.eu-west-3.amazonaws.com",
    :signature-version :v4},
   "ca-central-1"
   {:credential-scope {:service "rds", :region "ca-central-1"},
    :ssl-common-name "rds.ca-central-1.amazonaws.com",
    :endpoint "https://rds.ca-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "rds", :region "eu-central-1"},
    :ssl-common-name "rds.eu-central-1.amazonaws.com",
    :endpoint "https://rds.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "rds", :region "eu-west-2"},
    :ssl-common-name "rds.eu-west-2.amazonaws.com",
    :endpoint "https://rds.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-gov-west-1"
   {:credential-scope {:service "rds", :region "us-gov-west-1"},
    :ssl-common-name "rds.us-gov-west-1.amazonaws.com",
    :endpoint "https://rds.us-gov-west-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "rds", :region "us-west-2"},
    :ssl-common-name "rds.us-west-2.amazonaws.com",
    :endpoint "https://rds.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "rds", :region "us-east-1"},
    :ssl-common-name "rds.amazonaws.com",
    :endpoint "https://rds.us-east-1.amazonaws.com",
    :signature-version :v4},
   "us-west-1"
   {:credential-scope {:service "rds", :region "us-west-1"},
    :ssl-common-name "rds.us-west-1.amazonaws.com",
    :endpoint "https://rds.us-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-south-1"
   {:credential-scope {:service "rds", :region "ap-south-1"},
    :ssl-common-name "rds.ap-south-1.amazonaws.com",
    :endpoint "https://rds.ap-south-1.amazonaws.com",
    :signature-version :v4},
   "eu-north-1"
   {:credential-scope {:service "rds", :region "eu-north-1"},
    :ssl-common-name "rds.eu-north-1.amazonaws.com",
    :endpoint "https://rds.eu-north-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-subnet-identifier-list)

(clojure.core/declare ser-filter-value-list)

(clojure.core/declare ser-parameters-list)

(clojure.core/declare ser-filter)

(clojure.core/declare ser-source-ids-list)

(clojure.core/declare ser-key-list)

(clojure.core/declare ser-source-type)

(clojure.core/declare ser-tag-list)

(clojure.core/declare ser-string)

(clojure.core/declare ser-parameter)

(clojure.core/declare ser-vpc-security-group-id-list)

(clojure.core/declare ser-t-stamp)

(clojure.core/declare ser-event-categories-list)

(clojure.core/declare ser-db-security-group-name-list)

(clojure.core/declare ser-apply-method)

(clojure.core/declare ser-cloudwatch-logs-export-configuration)

(clojure.core/declare ser-log-type-list)

(clojure.core/declare ser-attribute-value-list)

(clojure.core/declare ser-tag)

(clojure.core/declare ser-boolean-optional)

(clojure.core/declare ser-availability-zones)

(clojure.core/declare ser-integer-optional)

(clojure.core/declare ser-filter-list)

(clojure.core/declare ser-boolean)

(clojure.core/defn- ser-subnet-identifier-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SubnetIdentifier"}))) input), :shape "SubnetIdentifierList", :type "list"})

(clojure.core/defn- ser-filter-value-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "Value"}))) input), :shape "FilterValueList", :type "list"})

(clojure.core/defn- ser-parameters-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-parameter coll) #:http.request.field{:shape "Parameter", :location-name "Parameter"}))) input), :shape "ParametersList", :type "list"})

(clojure.core/defn- ser-filter [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:name input)) #:http.request.field{:name "Name", :shape "String"}) (clojure.core/into (ser-filter-value-list (:values input)) #:http.request.field{:name "Values", :shape "FilterValueList"})], :shape "Filter", :type "structure"}))

(clojure.core/defn- ser-source-ids-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SourceId"}))) input), :shape "SourceIdsList", :type "list"})

(clojure.core/defn- ser-key-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "KeyList", :type "list"})

(clojure.core/defn- ser-source-type [input] #:http.request.field{:value (clojure.core/get {:dbcluster "db-cluster", "db-security-group" "db-security-group", "db-cluster" "db-cluster", :dbsecuritygroup "db-security-group", :dbclustersnapshot "db-cluster-snapshot", "db-instance" "db-instance", "db-cluster-snapshot" "db-cluster-snapshot", :dbparametergroup "db-parameter-group", "db-parameter-group" "db-parameter-group", "db-snapshot" "db-snapshot", :dbsnapshot "db-snapshot", :dbinstance "db-instance"} input), :shape "SourceType"})

(clojure.core/defn- ser-tag-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-tag coll) #:http.request.field{:shape "Tag", :location-name "Tag"}))) input), :shape "TagList", :type "list"})

(clojure.core/defn- ser-string [input] #:http.request.field{:value input, :shape "String"})

(clojure.core/defn- ser-parameter [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Parameter", :type "structure"} (clojure.core/contains? input :data-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :data-type)) #:http.request.field{:name "DataType", :shape "String"})) (clojure.core/contains? input :parameter-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :parameter-name)) #:http.request.field{:name "ParameterName", :shape "String"})) (clojure.core/contains? input :source) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source)) #:http.request.field{:name "Source", :shape "String"})) (clojure.core/contains? input :minimum-engine-version) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :minimum-engine-version)) #:http.request.field{:name "MinimumEngineVersion", :shape "String"})) (clojure.core/contains? input :allowed-values) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :allowed-values)) #:http.request.field{:name "AllowedValues", :shape "String"})) (clojure.core/contains? input :apply-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :apply-type)) #:http.request.field{:name "ApplyType", :shape "String"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :apply-method) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-apply-method (input :apply-method)) #:http.request.field{:name "ApplyMethod", :shape "ApplyMethod"})) (clojure.core/contains? input :is-modifiable) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :is-modifiable)) #:http.request.field{:name "IsModifiable", :shape "Boolean"})) (clojure.core/contains? input :parameter-value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :parameter-value)) #:http.request.field{:name "ParameterValue", :shape "String"}))))

(clojure.core/defn- ser-vpc-security-group-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "VpcSecurityGroupId"}))) input), :shape "VpcSecurityGroupIdList", :type "list"})

(clojure.core/defn- ser-t-stamp [input] #:http.request.field{:value input, :shape "TStamp"})

(clojure.core/defn- ser-event-categories-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "EventCategory"}))) input), :shape "EventCategoriesList", :type "list"})

(clojure.core/defn- ser-db-security-group-name-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "DBSecurityGroupName"}))) input), :shape "DBSecurityGroupNameList", :type "list"})

(clojure.core/defn- ser-apply-method [input] #:http.request.field{:value (clojure.core/get {"immediate" "immediate", :immediate "immediate", "pending-reboot" "pending-reboot", :pendingreboot "pending-reboot"} input), :shape "ApplyMethod"})

(clojure.core/defn- ser-cloudwatch-logs-export-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "CloudwatchLogsExportConfiguration", :type "structure"} (clojure.core/contains? input :enable-log-types) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-log-types)) #:http.request.field{:name "EnableLogTypes", :shape "LogTypeList"})) (clojure.core/contains? input :disable-log-types) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :disable-log-types)) #:http.request.field{:name "DisableLogTypes", :shape "LogTypeList"}))))

(clojure.core/defn- ser-log-type-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "LogTypeList", :type "list"})

(clojure.core/defn- ser-attribute-value-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "AttributeValue"}))) input), :shape "AttributeValueList", :type "list"})

(clojure.core/defn- ser-tag [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Tag", :type "structure"} (clojure.core/contains? input :key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key)) #:http.request.field{:name "Key", :shape "String"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String"}))))

(clojure.core/defn- ser-boolean-optional [input] #:http.request.field{:value input, :shape "BooleanOptional"})

(clojure.core/defn- ser-availability-zones [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "AvailabilityZone"}))) input), :shape "AvailabilityZones", :type "list"})

(clojure.core/defn- ser-integer-optional [input] #:http.request.field{:value input, :shape "IntegerOptional"})

(clojure.core/defn- ser-filter-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-filter coll) #:http.request.field{:shape "Filter", :location-name "Filter"}))) input), :shape "FilterList", :type "list"})

(clojure.core/defn- ser-boolean [input] #:http.request.field{:value input, :shape "Boolean"})

(clojure.core/defn- req-describe-db-cluster-snapshots-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :db-cluster-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"})) (clojure.core/contains? input :snapshot-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-type)) #:http.request.field{:name "SnapshotType", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :include-shared) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-shared)) #:http.request.field{:name "IncludeShared", :shape "Boolean"})) (clojure.core/contains? input :include-public) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-public)) #:http.request.field{:name "IncludePublic", :shape "Boolean"}))))

(clojure.core/defn- req-copy-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-db-parameter-group-identifier)) #:http.request.field{:name "SourceDBParameterGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-parameter-group-identifier)) #:http.request.field{:name "TargetDBParameterGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-parameter-group-description)) #:http.request.field{:name "TargetDBParameterGroupDescription", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-copy-db-cluster-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-db-cluster-snapshot-identifier)) #:http.request.field{:name "SourceDBClusterSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-cluster-snapshot-identifier)) #:http.request.field{:name "TargetDBClusterSnapshotIdentifier", :shape "String"})]} (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :pre-signed-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :pre-signed-url)) #:http.request.field{:name "PreSignedUrl", :shape "String"})) (clojure.core/contains? input :copy-tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags)) #:http.request.field{:name "CopyTags", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-instances-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-reset-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})]} (clojure.core/contains? input :reset-all-parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :reset-all-parameters)) #:http.request.field{:name "ResetAllParameters", :shape "Boolean"})) (clojure.core/contains? input :parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-parameters-list (input :parameters)) #:http.request.field{:name "Parameters", :shape "ParametersList"}))))

(clojure.core/defn- req-copy-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-db-cluster-parameter-group-identifier)) #:http.request.field{:name "SourceDBClusterParameterGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-cluster-parameter-group-identifier)) #:http.request.field{:name "TargetDBClusterParameterGroupIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :target-db-cluster-parameter-group-description)) #:http.request.field{:name "TargetDBClusterParameterGroupDescription", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-modify-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"}) (clojure.core/into (ser-parameters-list (input :parameters)) #:http.request.field{:name "Parameters", :shape "ParametersList"})]}))

(clojure.core/defn- req-delete-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})]}))

(clojure.core/defn- req-describe-engine-default-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"})]} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-db-engine-versions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :list-supported-character-sets) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :list-supported-character-sets)) #:http.request.field{:name "ListSupportedCharacterSets", :shape "BooleanOptional"})) (clojure.core/contains? input :default-only) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :default-only)) #:http.request.field{:name "DefaultOnly", :shape "Boolean"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :list-supported-timezones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :list-supported-timezones)) #:http.request.field{:name "ListSupportedTimezones", :shape "BooleanOptional"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :engine) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})) (clojure.core/contains? input :db-parameter-group-family) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"}))))

(clojure.core/defn- req-promote-read-replica-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]}))

(clojure.core/defn- req-describe-event-subscriptions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :subscription-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-db-subnet-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-restore-db-cluster-to-point-in-time-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :source-db-cluster-identifier)) #:http.request.field{:name "SourceDBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :restore-to-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :restore-to-time)) #:http.request.field{:name "RestoreToTime", :shape "TStamp"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :restore-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :restore-type)) #:http.request.field{:name "RestoreType", :shape "String"})) (clojure.core/contains? input :use-latest-restorable-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :use-latest-restorable-time)) #:http.request.field{:name "UseLatestRestorableTime", :shape "Boolean"}))))

(clojure.core/defn- req-restore-db-cluster-from-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :snapshot-identifier)) #:http.request.field{:name "SnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})]} (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :database-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :database-name)) #:http.request.field{:name "DatabaseName", :shape "String"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :availability-zones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-availability-zones (input :availability-zones)) #:http.request.field{:name "AvailabilityZones", :shape "AvailabilityZones"}))))

(clojure.core/defn- req-modify-db-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"}) (clojure.core/into (ser-subnet-identifier-list (input :subnet-ids)) #:http.request.field{:name "SubnetIds", :shape "SubnetIdentifierList"})]} (clojure.core/contains? input :db-subnet-group-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-description)) #:http.request.field{:name "DBSubnetGroupDescription", :shape "String"}))))

(clojure.core/defn- req-create-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})]} (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :db-security-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-db-security-group-name-list (input :db-security-groups)) #:http.request.field{:name "DBSecurityGroups", :shape "DBSecurityGroupNameList"})) (clojure.core/contains? input :promotion-tier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :promotion-tier)) #:http.request.field{:name "PromotionTier", :shape "IntegerOptional"})) (clojure.core/contains? input :character-set-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :character-set-name)) #:http.request.field{:name "CharacterSetName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional", :deprecated true})) (clojure.core/contains? input :domain-iam-role-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain-iam-role-name)) #:http.request.field{:name "DomainIAMRoleName", :shape "String"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :copy-tags-to-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags-to-snapshot)) #:http.request.field{:name "CopyTagsToSnapshot", :shape "BooleanOptional"})) (clojure.core/contains? input :enable-cloudwatch-logs-exports) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-type-list (input :enable-cloudwatch-logs-exports)) #:http.request.field{:name "EnableCloudwatchLogsExports", :shape "LogTypeList"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :db-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-name)) #:http.request.field{:name "DBName", :shape "String"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :domain) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain)) #:http.request.field{:name "Domain", :shape "String"})) (clojure.core/contains? input :allocated-storage) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :allocated-storage)) #:http.request.field{:name "AllocatedStorage", :shape "IntegerOptional"})) (clojure.core/contains? input :monitoring-interval) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :monitoring-interval)) #:http.request.field{:name "MonitoringInterval", :shape "IntegerOptional"})) (clojure.core/contains? input :timezone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :timezone)) #:http.request.field{:name "Timezone", :shape "String"})) (clojure.core/contains? input :master-username) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-username)) #:http.request.field{:name "MasterUsername", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :storage-encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :storage-encrypted)) #:http.request.field{:name "StorageEncrypted", :shape "BooleanOptional"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :tde-credential-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-password)) #:http.request.field{:name "TdeCredentialPassword", :shape "String"})) (clojure.core/contains? input :storage-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :storage-type)) #:http.request.field{:name "StorageType", :shape "String"})) (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :enable-performance-insights) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-performance-insights)) #:http.request.field{:name "EnablePerformanceInsights", :shape "BooleanOptional"})) (clojure.core/contains? input :monitoring-role-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :monitoring-role-arn)) #:http.request.field{:name "MonitoringRoleArn", :shape "String"})) (clojure.core/contains? input :tde-credential-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-arn)) #:http.request.field{:name "TdeCredentialArn", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"})) (clojure.core/contains? input :performance-insights-kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :performance-insights-kms-key-id)) #:http.request.field{:name "PerformanceInsightsKMSKeyId", :shape "String"})) (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-add-role-to-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :role-arn)) #:http.request.field{:name "RoleArn", :shape "String"})]}))

(clojure.core/defn- req-delete-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :skip-final-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :skip-final-snapshot)) #:http.request.field{:name "SkipFinalSnapshot", :shape "Boolean"})) (clojure.core/contains? input :final-db-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :final-db-snapshot-identifier)) #:http.request.field{:name "FinalDBSnapshotIdentifier", :shape "String"}))))

(clojure.core/defn- req-delete-db-cluster-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"})]}))

(clojure.core/defn- req-apply-pending-maintenance-action-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-identifier)) #:http.request.field{:name "ResourceIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :apply-action)) #:http.request.field{:name "ApplyAction", :shape "String"}) (clojure.core/into (ser-string (input :opt-in-type)) #:http.request.field{:name "OptInType", :shape "String"})]}))

(clojure.core/defn- req-describe-events-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :end-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :end-time)) #:http.request.field{:name "EndTime", :shape "TStamp"})) (clojure.core/contains? input :start-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-t-stamp (input :start-time)) #:http.request.field{:name "StartTime", :shape "TStamp"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-source-type (input :source-type)) #:http.request.field{:name "SourceType", :shape "SourceType"})) (clojure.core/contains? input :duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :duration)) #:http.request.field{:name "Duration", :shape "IntegerOptional"})) (clojure.core/contains? input :event-categories) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-event-categories-list (input :event-categories)) #:http.request.field{:name "EventCategories", :shape "EventCategoriesList"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :source-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-identifier)) #:http.request.field{:name "SourceIdentifier", :shape "String"}))))

(clojure.core/defn- req-describe-pending-maintenance-actions-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :resource-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :resource-identifier)) #:http.request.field{:name "ResourceIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"}))))

(clojure.core/defn- req-remove-role-from-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :role-arn)) #:http.request.field{:name "RoleArn", :shape "String"})]}))

(clojure.core/defn- req-describe-engine-default-cluster-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"})]} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-reset-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})]} (clojure.core/contains? input :reset-all-parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :reset-all-parameters)) #:http.request.field{:name "ResetAllParameters", :shape "Boolean"})) (clojure.core/contains? input :parameters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-parameters-list (input :parameters)) #:http.request.field{:name "Parameters", :shape "ParametersList"}))))

(clojure.core/defn- req-describe-db-cluster-parameter-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-describe-orderable-db-instance-options-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})]} (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :vpc) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :vpc)) #:http.request.field{:name "Vpc", :shape "BooleanOptional"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-db-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"}) (clojure.core/into (ser-string (input :db-subnet-group-description)) #:http.request.field{:name "DBSubnetGroupDescription", :shape "String"}) (clojure.core/into (ser-subnet-identifier-list (input :subnet-ids)) #:http.request.field{:name "SubnetIds", :shape "SubnetIdentifierList"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-delete-event-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"})]}))

(clojure.core/defn- req-modify-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :new-db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :new-db-cluster-identifier)) #:http.request.field{:name "NewDBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :apply-immediately) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-describe-db-cluster-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})]} (clojure.core/contains? input :source) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source)) #:http.request.field{:name "Source", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-add-source-identifier-to-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"}) (clojure.core/into (ser-string (input :source-identifier)) #:http.request.field{:name "SourceIdentifier", :shape "String"})]}))

(clojure.core/defn- req-add-tags-to-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"}) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})]}))

(clojure.core/defn- req-create-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"}) (clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"}) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-modify-db-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"}) (clojure.core/into (ser-parameters-list (input :parameters)) #:http.request.field{:name "Parameters", :shape "ParametersList"})]}))

(clojure.core/defn- req-describe-valid-db-instance-modifications-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]}))

(clojure.core/defn- req-reboot-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :force-failover) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :force-failover)) #:http.request.field{:name "ForceFailover", :shape "BooleanOptional"}))))

(clojure.core/defn- req-remove-source-identifier-from-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"}) (clojure.core/into (ser-string (input :source-identifier)) #:http.request.field{:name "SourceIdentifier", :shape "String"})]}))

(clojure.core/defn- req-remove-tags-from-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"}) (clojure.core/into (ser-key-list (input :tag-keys)) #:http.request.field{:name "TagKeys", :shape "KeyList"})]}))

(clojure.core/defn- req-modify-db-cluster-snapshot-attribute-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :attribute-name)) #:http.request.field{:name "AttributeName", :shape "String"})]} (clojure.core/contains? input :values-to-add) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value-list (input :values-to-add)) #:http.request.field{:name "ValuesToAdd", :shape "AttributeValueList"})) (clojure.core/contains? input :values-to-remove) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value-list (input :values-to-remove)) #:http.request.field{:name "ValuesToRemove", :shape "AttributeValueList"}))))

(clojure.core/defn- req-create-event-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"}) (clojure.core/into (ser-string (input :sns-topic-arn)) #:http.request.field{:name "SnsTopicArn", :shape "String"})]} (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-type)) #:http.request.field{:name "SourceType", :shape "String"})) (clojure.core/contains? input :event-categories) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-event-categories-list (input :event-categories)) #:http.request.field{:name "EventCategories", :shape "EventCategoriesList"})) (clojure.core/contains? input :source-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-source-ids-list (input :source-ids)) #:http.request.field{:name "SourceIds", :shape "SourceIdsList"})) (clojure.core/contains? input :enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enabled)) #:http.request.field{:name "Enabled", :shape "BooleanOptional"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-cluster-snapshot-attributes-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"})]}))

(clojure.core/defn- req-describe-db-clusters-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-create-db-cluster-snapshot-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-snapshot-identifier)) #:http.request.field{:name "DBClusterSnapshotIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-parameter-groups-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-delete-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})]} (clojure.core/contains? input :skip-final-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :skip-final-snapshot)) #:http.request.field{:name "SkipFinalSnapshot", :shape "Boolean"})) (clojure.core/contains? input :final-db-snapshot-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :final-db-snapshot-identifier)) #:http.request.field{:name "FinalDBSnapshotIdentifier", :shape "String"}))))

(clojure.core/defn- req-describe-event-categories-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-type)) #:http.request.field{:name "SourceType", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"}))))

(clojure.core/defn- req-delete-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})]}))

(clojure.core/defn- req-list-tags-for-resource-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource-name)) #:http.request.field{:name "ResourceName", :shape "String"})]} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"}))))

(clojure.core/defn- req-failover-db-cluster-message [input] (clojure.core/cond-> {} (clojure.core/contains? input :db-cluster-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"})) (clojure.core/contains? input :target-db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :target-db-instance-identifier)) #:http.request.field{:name "TargetDBInstanceIdentifier", :shape "String"}))))

(clojure.core/defn- req-delete-db-subnet-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})]}))

(clojure.core/defn- req-create-db-cluster-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-identifier)) #:http.request.field{:name "DBClusterIdentifier", :shape "String"}) (clojure.core/into (ser-string (input :engine)) #:http.request.field{:name "Engine", :shape "String"})]} (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :replication-source-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :replication-source-identifier)) #:http.request.field{:name "ReplicationSourceIdentifier", :shape "String"})) (clojure.core/contains? input :character-set-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :character-set-name)) #:http.request.field{:name "CharacterSetName", :shape "String"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :pre-signed-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :pre-signed-url)) #:http.request.field{:name "PreSignedUrl", :shape "String"})) (clojure.core/contains? input :database-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :database-name)) #:http.request.field{:name "DatabaseName", :shape "String"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :db-cluster-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :master-username) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-username)) #:http.request.field{:name "MasterUsername", :shape "String"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :storage-encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :storage-encrypted)) #:http.request.field{:name "StorageEncrypted", :shape "BooleanOptional"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :port)) #:http.request.field{:name "Port", :shape "IntegerOptional"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :availability-zones) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-availability-zones (input :availability-zones)) #:http.request.field{:name "AvailabilityZones", :shape "AvailabilityZones"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-create-db-cluster-parameter-group-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-cluster-parameter-group-name)) #:http.request.field{:name "DBClusterParameterGroupName", :shape "String"}) (clojure.core/into (ser-string (input :db-parameter-group-family)) #:http.request.field{:name "DBParameterGroupFamily", :shape "String"}) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})]} (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList"}))))

(clojure.core/defn- req-describe-db-parameters-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})]} (clojure.core/contains? input :source) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source)) #:http.request.field{:name "Source", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :max-records) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :max-records)) #:http.request.field{:name "MaxRecords", :shape "IntegerOptional"})) (clojure.core/contains? input :marker) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :marker)) #:http.request.field{:name "Marker", :shape "String"}))))

(clojure.core/defn- req-modify-db-instance-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :db-instance-identifier)) #:http.request.field{:name "DBInstanceIdentifier", :shape "String"})]} (clojure.core/contains? input :backup-retention-period) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :backup-retention-period)) #:http.request.field{:name "BackupRetentionPeriod", :shape "IntegerOptional"})) (clojure.core/contains? input :option-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :option-group-name)) #:http.request.field{:name "OptionGroupName", :shape "String"})) (clojure.core/contains? input :db-security-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-db-security-group-name-list (input :db-security-groups)) #:http.request.field{:name "DBSecurityGroups", :shape "DBSecurityGroupNameList"})) (clojure.core/contains? input :promotion-tier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :promotion-tier)) #:http.request.field{:name "PromotionTier", :shape "IntegerOptional"})) (clojure.core/contains? input :enable-iam-database-authentication) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-iam-database-authentication)) #:http.request.field{:name "EnableIAMDatabaseAuthentication", :shape "BooleanOptional"})) (clojure.core/contains? input :publicly-accessible) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :publicly-accessible)) #:http.request.field{:name "PubliclyAccessible", :shape "BooleanOptional", :deprecated true})) (clojure.core/contains? input :domain-iam-role-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain-iam-role-name)) #:http.request.field{:name "DomainIAMRoleName", :shape "String"})) (clojure.core/contains? input :preferred-maintenance-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-maintenance-window)) #:http.request.field{:name "PreferredMaintenanceWindow", :shape "String"})) (clojure.core/contains? input :copy-tags-to-snapshot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :copy-tags-to-snapshot)) #:http.request.field{:name "CopyTagsToSnapshot", :shape "BooleanOptional"})) (clojure.core/contains? input :auto-minor-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :auto-minor-version-upgrade)) #:http.request.field{:name "AutoMinorVersionUpgrade", :shape "BooleanOptional"})) (clojure.core/contains? input :new-db-instance-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :new-db-instance-identifier)) #:http.request.field{:name "NewDBInstanceIdentifier", :shape "String"})) (clojure.core/contains? input :vpc-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-security-group-id-list (input :vpc-security-group-ids)) #:http.request.field{:name "VpcSecurityGroupIds", :shape "VpcSecurityGroupIdList"})) (clojure.core/contains? input :master-user-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :master-user-password)) #:http.request.field{:name "MasterUserPassword", :shape "String"})) (clojure.core/contains? input :license-model) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-model)) #:http.request.field{:name "LicenseModel", :shape "String"})) (clojure.core/contains? input :domain) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :domain)) #:http.request.field{:name "Domain", :shape "String"})) (clojure.core/contains? input :allow-major-version-upgrade) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :allow-major-version-upgrade)) #:http.request.field{:name "AllowMajorVersionUpgrade", :shape "Boolean"})) (clojure.core/contains? input :allocated-storage) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :allocated-storage)) #:http.request.field{:name "AllocatedStorage", :shape "IntegerOptional"})) (clojure.core/contains? input :monitoring-interval) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :monitoring-interval)) #:http.request.field{:name "MonitoringInterval", :shape "IntegerOptional"})) (clojure.core/contains? input :engine-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :engine-version)) #:http.request.field{:name "EngineVersion", :shape "String"})) (clojure.core/contains? input :db-subnet-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-subnet-group-name)) #:http.request.field{:name "DBSubnetGroupName", :shape "String"})) (clojure.core/contains? input :db-port-number) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :db-port-number)) #:http.request.field{:name "DBPortNumber", :shape "IntegerOptional"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer-optional (input :iops)) #:http.request.field{:name "Iops", :shape "IntegerOptional"})) (clojure.core/contains? input :tde-credential-password) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-password)) #:http.request.field{:name "TdeCredentialPassword", :shape "String"})) (clojure.core/contains? input :storage-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :storage-type)) #:http.request.field{:name "StorageType", :shape "String"})) (clojure.core/contains? input :apply-immediately) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :apply-immediately)) #:http.request.field{:name "ApplyImmediately", :shape "Boolean"})) (clojure.core/contains? input :ca-certificate-identifier) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ca-certificate-identifier)) #:http.request.field{:name "CACertificateIdentifier", :shape "String"})) (clojure.core/contains? input :cloudwatch-logs-export-configuration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cloudwatch-logs-export-configuration (input :cloudwatch-logs-export-configuration)) #:http.request.field{:name "CloudwatchLogsExportConfiguration", :shape "CloudwatchLogsExportConfiguration"})) (clojure.core/contains? input :db-instance-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-instance-class)) #:http.request.field{:name "DBInstanceClass", :shape "String"})) (clojure.core/contains? input :db-parameter-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :db-parameter-group-name)) #:http.request.field{:name "DBParameterGroupName", :shape "String"})) (clojure.core/contains? input :enable-performance-insights) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enable-performance-insights)) #:http.request.field{:name "EnablePerformanceInsights", :shape "BooleanOptional"})) (clojure.core/contains? input :monitoring-role-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :monitoring-role-arn)) #:http.request.field{:name "MonitoringRoleArn", :shape "String"})) (clojure.core/contains? input :tde-credential-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tde-credential-arn)) #:http.request.field{:name "TdeCredentialArn", :shape "String"})) (clojure.core/contains? input :multi-az) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :multi-az)) #:http.request.field{:name "MultiAZ", :shape "BooleanOptional"})) (clojure.core/contains? input :performance-insights-kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :performance-insights-kms-key-id)) #:http.request.field{:name "PerformanceInsightsKMSKeyId", :shape "String"})) (clojure.core/contains? input :preferred-backup-window) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :preferred-backup-window)) #:http.request.field{:name "PreferredBackupWindow", :shape "String"}))))

(clojure.core/defn- req-modify-event-subscription-message [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subscription-name)) #:http.request.field{:name "SubscriptionName", :shape "String"})]} (clojure.core/contains? input :sns-topic-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :sns-topic-arn)) #:http.request.field{:name "SnsTopicArn", :shape "String"})) (clojure.core/contains? input :source-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-type)) #:http.request.field{:name "SourceType", :shape "String"})) (clojure.core/contains? input :event-categories) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-event-categories-list (input :event-categories)) #:http.request.field{:name "EventCategories", :shape "EventCategoriesList"})) (clojure.core/contains? input :enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean-optional (input :enabled)) #:http.request.field{:name "Enabled", :shape "BooleanOptional"}))))

(clojure.core/declare deser-vpc-security-group-membership-list)

(clojure.core/declare deser-pending-maintenance-action)

(clojure.core/declare deser-read-replica-identifier-list)

(clojure.core/declare deser-double)

(clojure.core/declare deser-parameters-list)

(clojure.core/declare deser-double-range)

(clojure.core/declare deser-db-cluster-role)

(clojure.core/declare deser-pending-maintenance-action-details)

(clojure.core/declare deser-db-parameter-group-status)

(clojure.core/declare deser-valid-storage-options-list)

(clojure.core/declare deser-double-optional)

(clojure.core/declare deser-source-ids-list)

(clojure.core/declare deser-db-parameter-group-list)

(clojure.core/declare deser-db-parameter-group-status-list)

(clojure.core/declare deser-double-range-list)

(clojure.core/declare deser-pending-maintenance-actions)

(clojure.core/declare deser-subnet)

(clojure.core/declare deser-db-cluster-snapshot)

(clojure.core/declare deser-pending-cloudwatch-logs-exports)

(clojure.core/declare deser-db-cluster-list)

(clojure.core/declare deser-db-engine-version-list)

(clojure.core/declare deser-event-subscription)

(clojure.core/declare deser-db-cluster-member)

(clojure.core/declare deser-resource-pending-maintenance-actions)

(clojure.core/declare deser-db-cluster)

(clojure.core/declare deser-db-instance-status-info)

(clojure.core/declare deser-event-list)

(clojure.core/declare deser-source-type)

(clojure.core/declare deser-orderable-db-instance-options-list)

(clojure.core/declare deser-event)

(clojure.core/declare deser-availability-zone-list)

(clojure.core/declare deser-availability-zone)

(clojure.core/declare deser-db-cluster-parameter-group-list)

(clojure.core/declare deser-db-cluster-member-list)

(clojure.core/declare deser-read-replica-db-instance-identifier-list)

(clojure.core/declare deser-valid-upgrade-target-list)

(clojure.core/declare deser-range)

(clojure.core/declare deser-db-cluster-roles)

(clojure.core/declare deser-tag-list)

(clojure.core/declare deser-timezone)

(clojure.core/declare deser-db-cluster-snapshot-list)

(clojure.core/declare deser-db-engine-version)

(clojure.core/declare deser-domain-membership-list)

(clojure.core/declare deser-valid-storage-options)

(clojure.core/declare deser-vpc-security-group-membership)

(clojure.core/declare deser-valid-db-instance-modifications-message)

(clojure.core/declare deser-db-cluster-snapshot-attribute-list)

(clojure.core/declare deser-option-group-membership-list)

(clojure.core/declare deser-event-categories-map-list)

(clojure.core/declare deser-integer)

(clojure.core/declare deser-string)

(clojure.core/declare deser-db-cluster-snapshot-attribute)

(clojure.core/declare deser-parameter)

(clojure.core/declare deser-db-security-group-membership)

(clojure.core/declare deser-read-replica-db-cluster-identifier-list)

(clojure.core/declare deser-db-cluster-snapshot-attributes-result)

(clojure.core/declare deser-db-instance)

(clojure.core/declare deser-t-stamp)

(clojure.core/declare deser-db-security-group-membership-list)

(clojure.core/declare deser-event-categories-map)

(clojure.core/declare deser-event-categories-list)

(clojure.core/declare deser-db-cluster-parameter-group)

(clojure.core/declare deser-apply-method)

(clojure.core/declare deser-endpoint)

(clojure.core/declare deser-db-parameter-group)

(clojure.core/declare deser-supported-character-sets-list)

(clojure.core/declare deser-log-type-list)

(clojure.core/declare deser-db-cluster-option-group-status)

(clojure.core/declare deser-option-group-membership)

(clojure.core/declare deser-upgrade-target)

(clojure.core/declare deser-attribute-value-list)

(clojure.core/declare deser-character-set)

(clojure.core/declare deser-tag)

(clojure.core/declare deser-boolean-optional)

(clojure.core/declare deser-db-instance-list)

(clojure.core/declare deser-event-subscriptions-list)

(clojure.core/declare deser-db-cluster-option-group-memberships)

(clojure.core/declare deser-engine-defaults)

(clojure.core/declare deser-availability-zones)

(clojure.core/declare deser-db-subnet-groups)

(clojure.core/declare deser-integer-optional)

(clojure.core/declare deser-supported-timezones-list)

(clojure.core/declare deser-range-list)

(clojure.core/declare deser-db-instance-status-info-list)

(clojure.core/declare deser-domain-membership)

(clojure.core/declare deser-orderable-db-instance-option)

(clojure.core/declare deser-pending-modified-values)

(clojure.core/declare deser-subnet-list)

(clojure.core/declare deser-db-subnet-group)

(clojure.core/declare deser-boolean)

(clojure.core/defn- deser-vpc-security-group-membership-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpc-security-group-membership coll))) input))

(clojure.core/defn- deser-pending-maintenance-action [input] (clojure.core/let [letvar437431 {"Action" (portkey.aws/search-for-tag input "Action" :flattened? nil :xmlAttribute? nil), "AutoAppliedAfterDate" (portkey.aws/search-for-tag input "AutoAppliedAfterDate" :flattened? nil :xmlAttribute? nil), "ForcedApplyDate" (portkey.aws/search-for-tag input "ForcedApplyDate" :flattened? nil :xmlAttribute? nil), "OptInStatus" (portkey.aws/search-for-tag input "OptInStatus" :flattened? nil :xmlAttribute? nil), "CurrentApplyDate" (portkey.aws/search-for-tag input "CurrentApplyDate" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar437431 "Action") (clojure.core/assoc :action (deser-string (clojure.core/get-in letvar437431 ["Action" :content]))) (letvar437431 "AutoAppliedAfterDate") (clojure.core/assoc :auto-applied-after-date (deser-t-stamp (clojure.core/get-in letvar437431 ["AutoAppliedAfterDate" :content]))) (letvar437431 "ForcedApplyDate") (clojure.core/assoc :forced-apply-date (deser-t-stamp (clojure.core/get-in letvar437431 ["ForcedApplyDate" :content]))) (letvar437431 "OptInStatus") (clojure.core/assoc :opt-in-status (deser-string (clojure.core/get-in letvar437431 ["OptInStatus" :content]))) (letvar437431 "CurrentApplyDate") (clojure.core/assoc :current-apply-date (deser-t-stamp (clojure.core/get-in letvar437431 ["CurrentApplyDate" :content]))) (letvar437431 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar437431 ["Description" :content]))))))

(clojure.core/defn- deser-read-replica-identifier-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-double [input] (java.lang.Double. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-parameters-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-parameter coll))) input))

(clojure.core/defn- deser-double-range [input] (clojure.core/let [letvar437575 {"From" (portkey.aws/search-for-tag input "From" :flattened? nil :xmlAttribute? nil), "To" (portkey.aws/search-for-tag input "To" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar437575 "From") (clojure.core/assoc :from (deser-double (clojure.core/get-in letvar437575 ["From" :content]))) (letvar437575 "To") (clojure.core/assoc :to (deser-double (clojure.core/get-in letvar437575 ["To" :content]))))))

(clojure.core/defn- deser-db-cluster-role [input] (clojure.core/let [letvar437683 {"RoleArn" (portkey.aws/search-for-tag input "RoleArn" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar437683 "RoleArn") (clojure.core/assoc :role-arn (deser-string (clojure.core/get-in letvar437683 ["RoleArn" :content]))) (letvar437683 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar437683 ["Status" :content]))))))

(clojure.core/defn- deser-pending-maintenance-action-details [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-pending-maintenance-action coll))) input))

(clojure.core/defn- deser-db-parameter-group-status [input] (clojure.core/let [letvar437808 {"DBParameterGroupName" (portkey.aws/search-for-tag input "DBParameterGroupName" :flattened? nil :xmlAttribute? nil), "ParameterApplyStatus" (portkey.aws/search-for-tag input "ParameterApplyStatus" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar437808 "DBParameterGroupName") (clojure.core/assoc :db-parameter-group-name (deser-string (clojure.core/get-in letvar437808 ["DBParameterGroupName" :content]))) (letvar437808 "ParameterApplyStatus") (clojure.core/assoc :parameter-apply-status (deser-string (clojure.core/get-in letvar437808 ["ParameterApplyStatus" :content]))))))

(clojure.core/defn- deser-valid-storage-options-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-valid-storage-options coll))) input))

(clojure.core/defn- deser-double-optional [input] (java.lang.Double. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-source-ids-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-db-parameter-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-parameter-group coll))) input))

(clojure.core/defn- deser-db-parameter-group-status-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-parameter-group-status coll))) input))

(clojure.core/defn- deser-double-range-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-double-range coll))) input))

(clojure.core/defn- deser-pending-maintenance-actions [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-resource-pending-maintenance-actions coll))) input))

(clojure.core/defn- deser-subnet [input] (clojure.core/let [letvar438020 {"SubnetIdentifier" (portkey.aws/search-for-tag input "SubnetIdentifier" :flattened? nil :xmlAttribute? nil), "SubnetAvailabilityZone" (portkey.aws/search-for-tag input "SubnetAvailabilityZone" :flattened? nil :xmlAttribute? nil), "SubnetStatus" (portkey.aws/search-for-tag input "SubnetStatus" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar438020 "SubnetIdentifier") (clojure.core/assoc :subnet-identifier (deser-string (clojure.core/get-in letvar438020 ["SubnetIdentifier" :content]))) (letvar438020 "SubnetAvailabilityZone") (clojure.core/assoc :subnet-availability-zone (deser-availability-zone (clojure.core/get-in letvar438020 ["SubnetAvailabilityZone" :content]))) (letvar438020 "SubnetStatus") (clojure.core/assoc :subnet-status (deser-string (clojure.core/get-in letvar438020 ["SubnetStatus" :content]))))))

(clojure.core/defn- deser-db-cluster-snapshot [input] (clojure.core/let [letvar438128 {"SnapshotCreateTime" (portkey.aws/search-for-tag input "SnapshotCreateTime" :flattened? nil :xmlAttribute? nil), "DBClusterSnapshotIdentifier" (portkey.aws/search-for-tag input "DBClusterSnapshotIdentifier" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "SnapshotType" (portkey.aws/search-for-tag input "SnapshotType" :flattened? nil :xmlAttribute? nil), "LicenseModel" (portkey.aws/search-for-tag input "LicenseModel" :flattened? nil :xmlAttribute? nil), "AllocatedStorage" (portkey.aws/search-for-tag input "AllocatedStorage" :flattened? nil :xmlAttribute? nil), "MasterUsername" (portkey.aws/search-for-tag input "MasterUsername" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "StorageEncrypted" (portkey.aws/search-for-tag input "StorageEncrypted" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "VpcId" (portkey.aws/search-for-tag input "VpcId" :flattened? nil :xmlAttribute? nil), "KmsKeyId" (portkey.aws/search-for-tag input "KmsKeyId" :flattened? nil :xmlAttribute? nil), "ClusterCreateTime" (portkey.aws/search-for-tag input "ClusterCreateTime" :flattened? nil :xmlAttribute? nil), "IAMDatabaseAuthenticationEnabled" (portkey.aws/search-for-tag input "IAMDatabaseAuthenticationEnabled" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "SourceDBClusterSnapshotArn" (portkey.aws/search-for-tag input "SourceDBClusterSnapshotArn" :flattened? nil :xmlAttribute? nil), "AvailabilityZones" (portkey.aws/search-for-tag input "AvailabilityZones" :flattened? nil :xmlAttribute? nil), "DBClusterIdentifier" (portkey.aws/search-for-tag input "DBClusterIdentifier" :flattened? nil :xmlAttribute? nil), "DBClusterSnapshotArn" (portkey.aws/search-for-tag input "DBClusterSnapshotArn" :flattened? nil :xmlAttribute? nil), "PercentProgress" (portkey.aws/search-for-tag input "PercentProgress" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar438128 "SnapshotCreateTime") (clojure.core/assoc :snapshot-create-time (deser-t-stamp (clojure.core/get-in letvar438128 ["SnapshotCreateTime" :content]))) (letvar438128 "DBClusterSnapshotIdentifier") (clojure.core/assoc :db-cluster-snapshot-identifier (deser-string (clojure.core/get-in letvar438128 ["DBClusterSnapshotIdentifier" :content]))) (letvar438128 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar438128 ["Status" :content]))) (letvar438128 "SnapshotType") (clojure.core/assoc :snapshot-type (deser-string (clojure.core/get-in letvar438128 ["SnapshotType" :content]))) (letvar438128 "LicenseModel") (clojure.core/assoc :license-model (deser-string (clojure.core/get-in letvar438128 ["LicenseModel" :content]))) (letvar438128 "AllocatedStorage") (clojure.core/assoc :allocated-storage (deser-integer (clojure.core/get-in letvar438128 ["AllocatedStorage" :content]))) (letvar438128 "MasterUsername") (clojure.core/assoc :master-username (deser-string (clojure.core/get-in letvar438128 ["MasterUsername" :content]))) (letvar438128 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar438128 ["EngineVersion" :content]))) (letvar438128 "StorageEncrypted") (clojure.core/assoc :storage-encrypted (deser-boolean (clojure.core/get-in letvar438128 ["StorageEncrypted" :content]))) (letvar438128 "Port") (clojure.core/assoc :port (deser-integer (clojure.core/get-in letvar438128 ["Port" :content]))) (letvar438128 "VpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar438128 ["VpcId" :content]))) (letvar438128 "KmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar438128 ["KmsKeyId" :content]))) (letvar438128 "ClusterCreateTime") (clojure.core/assoc :cluster-create-time (deser-t-stamp (clojure.core/get-in letvar438128 ["ClusterCreateTime" :content]))) (letvar438128 "IAMDatabaseAuthenticationEnabled") (clojure.core/assoc :iam-database-authentication-enabled (deser-boolean (clojure.core/get-in letvar438128 ["IAMDatabaseAuthenticationEnabled" :content]))) (letvar438128 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar438128 ["Engine" :content]))) (letvar438128 "SourceDBClusterSnapshotArn") (clojure.core/assoc :source-db-cluster-snapshot-arn (deser-string (clojure.core/get-in letvar438128 ["SourceDBClusterSnapshotArn" :content]))) (letvar438128 "AvailabilityZones") (clojure.core/assoc :availability-zones (deser-availability-zones (clojure.core/get-in letvar438128 ["AvailabilityZones" :content]))) (letvar438128 "DBClusterIdentifier") (clojure.core/assoc :db-cluster-identifier (deser-string (clojure.core/get-in letvar438128 ["DBClusterIdentifier" :content]))) (letvar438128 "DBClusterSnapshotArn") (clojure.core/assoc :db-cluster-snapshot-arn (deser-string (clojure.core/get-in letvar438128 ["DBClusterSnapshotArn" :content]))) (letvar438128 "PercentProgress") (clojure.core/assoc :percent-progress (deser-integer (clojure.core/get-in letvar438128 ["PercentProgress" :content]))))))

(clojure.core/defn- deser-pending-cloudwatch-logs-exports [input] (clojure.core/let [letvar438236 {"LogTypesToEnable" (portkey.aws/search-for-tag input "LogTypesToEnable" :flattened? nil :xmlAttribute? nil), "LogTypesToDisable" (portkey.aws/search-for-tag input "LogTypesToDisable" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar438236 "LogTypesToEnable") (clojure.core/assoc :log-types-to-enable (deser-log-type-list (clojure.core/get-in letvar438236 ["LogTypesToEnable" :content]))) (letvar438236 "LogTypesToDisable") (clojure.core/assoc :log-types-to-disable (deser-log-type-list (clojure.core/get-in letvar438236 ["LogTypesToDisable" :content]))))))

(clojure.core/defn- deser-db-cluster-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster coll))) input))

(clojure.core/defn- deser-db-engine-version-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-engine-version coll))) input))

(clojure.core/defn- deser-event-subscription [input] (clojure.core/let [letvar438378 {"SourceIdsList" (portkey.aws/search-for-tag input "SourceIdsList" :flattened? nil :xmlAttribute? nil), "EventSubscriptionArn" (portkey.aws/search-for-tag input "EventSubscriptionArn" :flattened? nil :xmlAttribute? nil), "CustomerAwsId" (portkey.aws/search-for-tag input "CustomerAwsId" :flattened? nil :xmlAttribute? nil), "SourceType" (portkey.aws/search-for-tag input "SourceType" :flattened? nil :xmlAttribute? nil), "Enabled" (portkey.aws/search-for-tag input "Enabled" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "SnsTopicArn" (portkey.aws/search-for-tag input "SnsTopicArn" :flattened? nil :xmlAttribute? nil), "EventCategoriesList" (portkey.aws/search-for-tag input "EventCategoriesList" :flattened? nil :xmlAttribute? nil), "CustSubscriptionId" (portkey.aws/search-for-tag input "CustSubscriptionId" :flattened? nil :xmlAttribute? nil), "SubscriptionCreationTime" (portkey.aws/search-for-tag input "SubscriptionCreationTime" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar438378 "SourceIdsList") (clojure.core/assoc :source-ids-list (deser-source-ids-list (clojure.core/get-in letvar438378 ["SourceIdsList" :content]))) (letvar438378 "EventSubscriptionArn") (clojure.core/assoc :event-subscription-arn (deser-string (clojure.core/get-in letvar438378 ["EventSubscriptionArn" :content]))) (letvar438378 "CustomerAwsId") (clojure.core/assoc :customer-aws-id (deser-string (clojure.core/get-in letvar438378 ["CustomerAwsId" :content]))) (letvar438378 "SourceType") (clojure.core/assoc :source-type (deser-string (clojure.core/get-in letvar438378 ["SourceType" :content]))) (letvar438378 "Enabled") (clojure.core/assoc :enabled (deser-boolean (clojure.core/get-in letvar438378 ["Enabled" :content]))) (letvar438378 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar438378 ["Status" :content]))) (letvar438378 "SnsTopicArn") (clojure.core/assoc :sns-topic-arn (deser-string (clojure.core/get-in letvar438378 ["SnsTopicArn" :content]))) (letvar438378 "EventCategoriesList") (clojure.core/assoc :event-categories-list (deser-event-categories-list (clojure.core/get-in letvar438378 ["EventCategoriesList" :content]))) (letvar438378 "CustSubscriptionId") (clojure.core/assoc :cust-subscription-id (deser-string (clojure.core/get-in letvar438378 ["CustSubscriptionId" :content]))) (letvar438378 "SubscriptionCreationTime") (clojure.core/assoc :subscription-creation-time (deser-string (clojure.core/get-in letvar438378 ["SubscriptionCreationTime" :content]))))))

(clojure.core/defn- deser-db-cluster-member [input] (clojure.core/let [letvar438486 {"DBInstanceIdentifier" (portkey.aws/search-for-tag input "DBInstanceIdentifier" :flattened? nil :xmlAttribute? nil), "IsClusterWriter" (portkey.aws/search-for-tag input "IsClusterWriter" :flattened? nil :xmlAttribute? nil), "DBClusterParameterGroupStatus" (portkey.aws/search-for-tag input "DBClusterParameterGroupStatus" :flattened? nil :xmlAttribute? nil), "PromotionTier" (portkey.aws/search-for-tag input "PromotionTier" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar438486 "DBInstanceIdentifier") (clojure.core/assoc :db-instance-identifier (deser-string (clojure.core/get-in letvar438486 ["DBInstanceIdentifier" :content]))) (letvar438486 "IsClusterWriter") (clojure.core/assoc :is-cluster-writer (deser-boolean (clojure.core/get-in letvar438486 ["IsClusterWriter" :content]))) (letvar438486 "DBClusterParameterGroupStatus") (clojure.core/assoc :db-cluster-parameter-group-status (deser-string (clojure.core/get-in letvar438486 ["DBClusterParameterGroupStatus" :content]))) (letvar438486 "PromotionTier") (clojure.core/assoc :promotion-tier (deser-integer-optional (clojure.core/get-in letvar438486 ["PromotionTier" :content]))))))

(clojure.core/defn- deser-resource-pending-maintenance-actions [input] (clojure.core/let [letvar438594 {"ResourceIdentifier" (portkey.aws/search-for-tag input "ResourceIdentifier" :flattened? nil :xmlAttribute? nil), "PendingMaintenanceActionDetails" (portkey.aws/search-for-tag input "PendingMaintenanceActionDetails" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar438594 "ResourceIdentifier") (clojure.core/assoc :resource-identifier (deser-string (clojure.core/get-in letvar438594 ["ResourceIdentifier" :content]))) (letvar438594 "PendingMaintenanceActionDetails") (clojure.core/assoc :pending-maintenance-action-details (deser-pending-maintenance-action-details (clojure.core/get-in letvar438594 ["PendingMaintenanceActionDetails" :content]))))))

(clojure.core/defn- deser-db-cluster [input] (clojure.core/let [letvar438702 {"BackupRetentionPeriod" (portkey.aws/search-for-tag input "BackupRetentionPeriod" :flattened? nil :xmlAttribute? nil), "ReplicationSourceIdentifier" (portkey.aws/search-for-tag input "ReplicationSourceIdentifier" :flattened? nil :xmlAttribute? nil), "EarliestRestorableTime" (portkey.aws/search-for-tag input "EarliestRestorableTime" :flattened? nil :xmlAttribute? nil), "CharacterSetName" (portkey.aws/search-for-tag input "CharacterSetName" :flattened? nil :xmlAttribute? nil), "DatabaseName" (portkey.aws/search-for-tag input "DatabaseName" :flattened? nil :xmlAttribute? nil), "PreferredMaintenanceWindow" (portkey.aws/search-for-tag input "PreferredMaintenanceWindow" :flattened? nil :xmlAttribute? nil), "CloneGroupId" (portkey.aws/search-for-tag input "CloneGroupId" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "AllocatedStorage" (portkey.aws/search-for-tag input "AllocatedStorage" :flattened? nil :xmlAttribute? nil), "MasterUsername" (portkey.aws/search-for-tag input "MasterUsername" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "HostedZoneId" (portkey.aws/search-for-tag input "HostedZoneId" :flattened? nil :xmlAttribute? nil), "StorageEncrypted" (portkey.aws/search-for-tag input "StorageEncrypted" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "DbClusterResourceId" (portkey.aws/search-for-tag input "DbClusterResourceId" :flattened? nil :xmlAttribute? nil), "DBClusterMembers" (portkey.aws/search-for-tag input "DBClusterMembers" :flattened? nil :xmlAttribute? nil), "KmsKeyId" (portkey.aws/search-for-tag input "KmsKeyId" :flattened? nil :xmlAttribute? nil), "ClusterCreateTime" (portkey.aws/search-for-tag input "ClusterCreateTime" :flattened? nil :xmlAttribute? nil), "ReadReplicaIdentifiers" (portkey.aws/search-for-tag input "ReadReplicaIdentifiers" :flattened? nil :xmlAttribute? nil), "DBClusterParameterGroup" (portkey.aws/search-for-tag input "DBClusterParameterGroup" :flattened? nil :xmlAttribute? nil), "Endpoint" (portkey.aws/search-for-tag input "Endpoint" :flattened? nil :xmlAttribute? nil), "IAMDatabaseAuthenticationEnabled" (portkey.aws/search-for-tag input "IAMDatabaseAuthenticationEnabled" :flattened? nil :xmlAttribute? nil), "DBClusterArn" (portkey.aws/search-for-tag input "DBClusterArn" :flattened? nil :xmlAttribute? nil), "VpcSecurityGroups" (portkey.aws/search-for-tag input "VpcSecurityGroups" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "DBClusterOptionGroupMemberships" (portkey.aws/search-for-tag input "DBClusterOptionGroupMemberships" :flattened? nil :xmlAttribute? nil), "AvailabilityZones" (portkey.aws/search-for-tag input "AvailabilityZones" :flattened? nil :xmlAttribute? nil), "ReaderEndpoint" (portkey.aws/search-for-tag input "ReaderEndpoint" :flattened? nil :xmlAttribute? nil), "AssociatedRoles" (portkey.aws/search-for-tag input "AssociatedRoles" :flattened? nil :xmlAttribute? nil), "MultiAZ" (portkey.aws/search-for-tag input "MultiAZ" :flattened? nil :xmlAttribute? nil), "DBClusterIdentifier" (portkey.aws/search-for-tag input "DBClusterIdentifier" :flattened? nil :xmlAttribute? nil), "PreferredBackupWindow" (portkey.aws/search-for-tag input "PreferredBackupWindow" :flattened? nil :xmlAttribute? nil), "PercentProgress" (portkey.aws/search-for-tag input "PercentProgress" :flattened? nil :xmlAttribute? nil), "LatestRestorableTime" (portkey.aws/search-for-tag input "LatestRestorableTime" :flattened? nil :xmlAttribute? nil), "DBSubnetGroup" (portkey.aws/search-for-tag input "DBSubnetGroup" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar438702 "BackupRetentionPeriod") (clojure.core/assoc :backup-retention-period (deser-integer-optional (clojure.core/get-in letvar438702 ["BackupRetentionPeriod" :content]))) (letvar438702 "ReplicationSourceIdentifier") (clojure.core/assoc :replication-source-identifier (deser-string (clojure.core/get-in letvar438702 ["ReplicationSourceIdentifier" :content]))) (letvar438702 "EarliestRestorableTime") (clojure.core/assoc :earliest-restorable-time (deser-t-stamp (clojure.core/get-in letvar438702 ["EarliestRestorableTime" :content]))) (letvar438702 "CharacterSetName") (clojure.core/assoc :character-set-name (deser-string (clojure.core/get-in letvar438702 ["CharacterSetName" :content]))) (letvar438702 "DatabaseName") (clojure.core/assoc :database-name (deser-string (clojure.core/get-in letvar438702 ["DatabaseName" :content]))) (letvar438702 "PreferredMaintenanceWindow") (clojure.core/assoc :preferred-maintenance-window (deser-string (clojure.core/get-in letvar438702 ["PreferredMaintenanceWindow" :content]))) (letvar438702 "CloneGroupId") (clojure.core/assoc :clone-group-id (deser-string (clojure.core/get-in letvar438702 ["CloneGroupId" :content]))) (letvar438702 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar438702 ["Status" :content]))) (letvar438702 "AllocatedStorage") (clojure.core/assoc :allocated-storage (deser-integer-optional (clojure.core/get-in letvar438702 ["AllocatedStorage" :content]))) (letvar438702 "MasterUsername") (clojure.core/assoc :master-username (deser-string (clojure.core/get-in letvar438702 ["MasterUsername" :content]))) (letvar438702 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar438702 ["EngineVersion" :content]))) (letvar438702 "HostedZoneId") (clojure.core/assoc :hosted-zone-id (deser-string (clojure.core/get-in letvar438702 ["HostedZoneId" :content]))) (letvar438702 "StorageEncrypted") (clojure.core/assoc :storage-encrypted (deser-boolean (clojure.core/get-in letvar438702 ["StorageEncrypted" :content]))) (letvar438702 "Port") (clojure.core/assoc :port (deser-integer-optional (clojure.core/get-in letvar438702 ["Port" :content]))) (letvar438702 "DbClusterResourceId") (clojure.core/assoc :db-cluster-resource-id (deser-string (clojure.core/get-in letvar438702 ["DbClusterResourceId" :content]))) (letvar438702 "DBClusterMembers") (clojure.core/assoc :db-cluster-members (deser-db-cluster-member-list (clojure.core/get-in letvar438702 ["DBClusterMembers" :content]))) (letvar438702 "KmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar438702 ["KmsKeyId" :content]))) (letvar438702 "ClusterCreateTime") (clojure.core/assoc :cluster-create-time (deser-t-stamp (clojure.core/get-in letvar438702 ["ClusterCreateTime" :content]))) (letvar438702 "ReadReplicaIdentifiers") (clojure.core/assoc :read-replica-identifiers (deser-read-replica-identifier-list (clojure.core/get-in letvar438702 ["ReadReplicaIdentifiers" :content]))) (letvar438702 "DBClusterParameterGroup") (clojure.core/assoc :db-cluster-parameter-group (deser-string (clojure.core/get-in letvar438702 ["DBClusterParameterGroup" :content]))) (letvar438702 "Endpoint") (clojure.core/assoc :endpoint (deser-string (clojure.core/get-in letvar438702 ["Endpoint" :content]))) (letvar438702 "IAMDatabaseAuthenticationEnabled") (clojure.core/assoc :iam-database-authentication-enabled (deser-boolean (clojure.core/get-in letvar438702 ["IAMDatabaseAuthenticationEnabled" :content]))) (letvar438702 "DBClusterArn") (clojure.core/assoc :db-cluster-arn (deser-string (clojure.core/get-in letvar438702 ["DBClusterArn" :content]))) (letvar438702 "VpcSecurityGroups") (clojure.core/assoc :vpc-security-groups (deser-vpc-security-group-membership-list (clojure.core/get-in letvar438702 ["VpcSecurityGroups" :content]))) (letvar438702 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar438702 ["Engine" :content]))) (letvar438702 "DBClusterOptionGroupMemberships") (clojure.core/assoc :db-cluster-option-group-memberships (deser-db-cluster-option-group-memberships (clojure.core/get-in letvar438702 ["DBClusterOptionGroupMemberships" :content]))) (letvar438702 "AvailabilityZones") (clojure.core/assoc :availability-zones (deser-availability-zones (clojure.core/get-in letvar438702 ["AvailabilityZones" :content]))) (letvar438702 "ReaderEndpoint") (clojure.core/assoc :reader-endpoint (deser-string (clojure.core/get-in letvar438702 ["ReaderEndpoint" :content]))) (letvar438702 "AssociatedRoles") (clojure.core/assoc :associated-roles (deser-db-cluster-roles (clojure.core/get-in letvar438702 ["AssociatedRoles" :content]))) (letvar438702 "MultiAZ") (clojure.core/assoc :multi-az (deser-boolean (clojure.core/get-in letvar438702 ["MultiAZ" :content]))) (letvar438702 "DBClusterIdentifier") (clojure.core/assoc :db-cluster-identifier (deser-string (clojure.core/get-in letvar438702 ["DBClusterIdentifier" :content]))) (letvar438702 "PreferredBackupWindow") (clojure.core/assoc :preferred-backup-window (deser-string (clojure.core/get-in letvar438702 ["PreferredBackupWindow" :content]))) (letvar438702 "PercentProgress") (clojure.core/assoc :percent-progress (deser-string (clojure.core/get-in letvar438702 ["PercentProgress" :content]))) (letvar438702 "LatestRestorableTime") (clojure.core/assoc :latest-restorable-time (deser-t-stamp (clojure.core/get-in letvar438702 ["LatestRestorableTime" :content]))) (letvar438702 "DBSubnetGroup") (clojure.core/assoc :db-subnet-group (deser-string (clojure.core/get-in letvar438702 ["DBSubnetGroup" :content]))))))

(clojure.core/defn- deser-db-instance-status-info [input] (clojure.core/let [letvar438810 {"StatusType" (portkey.aws/search-for-tag input "StatusType" :flattened? nil :xmlAttribute? nil), "Normal" (portkey.aws/search-for-tag input "Normal" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "Message" (portkey.aws/search-for-tag input "Message" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar438810 "StatusType") (clojure.core/assoc :status-type (deser-string (clojure.core/get-in letvar438810 ["StatusType" :content]))) (letvar438810 "Normal") (clojure.core/assoc :normal (deser-boolean (clojure.core/get-in letvar438810 ["Normal" :content]))) (letvar438810 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar438810 ["Status" :content]))) (letvar438810 "Message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar438810 ["Message" :content]))))))

(clojure.core/defn- deser-event-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-event coll))) input))

(clojure.core/defn- deser-source-type [input] (clojure.core/get {"db-instance" :dbinstance, "db-parameter-group" :dbparametergroup, "db-security-group" :dbsecuritygroup, "db-snapshot" :dbsnapshot, "db-cluster" :dbcluster, "db-cluster-snapshot" :dbclustersnapshot} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-orderable-db-instance-options-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-orderable-db-instance-option coll))) input))

(clojure.core/defn- deser-event [input] (clojure.core/let [letvar438957 {"SourceIdentifier" (portkey.aws/search-for-tag input "SourceIdentifier" :flattened? nil :xmlAttribute? nil), "SourceType" (portkey.aws/search-for-tag input "SourceType" :flattened? nil :xmlAttribute? nil), "Message" (portkey.aws/search-for-tag input "Message" :flattened? nil :xmlAttribute? nil), "EventCategories" (portkey.aws/search-for-tag input "EventCategories" :flattened? nil :xmlAttribute? nil), "Date" (portkey.aws/search-for-tag input "Date" :flattened? nil :xmlAttribute? nil), "SourceArn" (portkey.aws/search-for-tag input "SourceArn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar438957 "SourceIdentifier") (clojure.core/assoc :source-identifier (deser-string (clojure.core/get-in letvar438957 ["SourceIdentifier" :content]))) (letvar438957 "SourceType") (clojure.core/assoc :source-type (deser-source-type (clojure.core/get-in letvar438957 ["SourceType" :content]))) (letvar438957 "Message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar438957 ["Message" :content]))) (letvar438957 "EventCategories") (clojure.core/assoc :event-categories (deser-event-categories-list (clojure.core/get-in letvar438957 ["EventCategories" :content]))) (letvar438957 "Date") (clojure.core/assoc :date (deser-t-stamp (clojure.core/get-in letvar438957 ["Date" :content]))) (letvar438957 "SourceArn") (clojure.core/assoc :source-arn (deser-string (clojure.core/get-in letvar438957 ["SourceArn" :content]))))))

(clojure.core/defn- deser-availability-zone-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-availability-zone coll))) input))

(clojure.core/defn- deser-availability-zone [input] (clojure.core/let [letvar439082 {"Name" (portkey.aws/search-for-tag input "Name" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar439082 "Name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar439082 ["Name" :content]))))))

(clojure.core/defn- deser-db-cluster-parameter-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-parameter-group coll))) input))

(clojure.core/defn- deser-db-cluster-member-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-member coll))) input))

(clojure.core/defn- deser-read-replica-db-instance-identifier-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-valid-upgrade-target-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-upgrade-target coll))) input))

(clojure.core/defn- deser-range [input] (clojure.core/let [letvar439258 {"From" (portkey.aws/search-for-tag input "From" :flattened? nil :xmlAttribute? nil), "To" (portkey.aws/search-for-tag input "To" :flattened? nil :xmlAttribute? nil), "Step" (portkey.aws/search-for-tag input "Step" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar439258 "From") (clojure.core/assoc :from (deser-integer (clojure.core/get-in letvar439258 ["From" :content]))) (letvar439258 "To") (clojure.core/assoc :to (deser-integer (clojure.core/get-in letvar439258 ["To" :content]))) (letvar439258 "Step") (clojure.core/assoc :step (deser-integer-optional (clojure.core/get-in letvar439258 ["Step" :content]))))))

(clojure.core/defn- deser-db-cluster-roles [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-role coll))) input))

(clojure.core/defn- deser-tag-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-tag coll))) input))

(clojure.core/defn- deser-timezone [input] (clojure.core/let [letvar439400 {"TimezoneName" (portkey.aws/search-for-tag input "TimezoneName" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar439400 "TimezoneName") (clojure.core/assoc :timezone-name (deser-string (clojure.core/get-in letvar439400 ["TimezoneName" :content]))))))

(clojure.core/defn- deser-db-cluster-snapshot-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-snapshot coll))) input))

(clojure.core/defn- deser-db-engine-version [input] (clojure.core/let [letvar439525 {"DefaultCharacterSet" (portkey.aws/search-for-tag input "DefaultCharacterSet" :flattened? nil :xmlAttribute? nil), "DBEngineDescription" (portkey.aws/search-for-tag input "DBEngineDescription" :flattened? nil :xmlAttribute? nil), "SupportedTimezones" (portkey.aws/search-for-tag input "SupportedTimezones" :flattened? nil :xmlAttribute? nil), "SupportsReadReplica" (portkey.aws/search-for-tag input "SupportsReadReplica" :flattened? nil :xmlAttribute? nil), "DBEngineVersionDescription" (portkey.aws/search-for-tag input "DBEngineVersionDescription" :flattened? nil :xmlAttribute? nil), "ValidUpgradeTarget" (portkey.aws/search-for-tag input "ValidUpgradeTarget" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "SupportedCharacterSets" (portkey.aws/search-for-tag input "SupportedCharacterSets" :flattened? nil :xmlAttribute? nil), "SupportsLogExportsToCloudwatchLogs" (portkey.aws/search-for-tag input "SupportsLogExportsToCloudwatchLogs" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "ExportableLogTypes" (portkey.aws/search-for-tag input "ExportableLogTypes" :flattened? nil :xmlAttribute? nil), "DBParameterGroupFamily" (portkey.aws/search-for-tag input "DBParameterGroupFamily" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar439525 "DefaultCharacterSet") (clojure.core/assoc :default-character-set (deser-character-set (clojure.core/get-in letvar439525 ["DefaultCharacterSet" :content]))) (letvar439525 "DBEngineDescription") (clojure.core/assoc :db-engine-description (deser-string (clojure.core/get-in letvar439525 ["DBEngineDescription" :content]))) (letvar439525 "SupportedTimezones") (clojure.core/assoc :supported-timezones (deser-supported-timezones-list (clojure.core/get-in letvar439525 ["SupportedTimezones" :content]))) (letvar439525 "SupportsReadReplica") (clojure.core/assoc :supports-read-replica (deser-boolean (clojure.core/get-in letvar439525 ["SupportsReadReplica" :content]))) (letvar439525 "DBEngineVersionDescription") (clojure.core/assoc :db-engine-version-description (deser-string (clojure.core/get-in letvar439525 ["DBEngineVersionDescription" :content]))) (letvar439525 "ValidUpgradeTarget") (clojure.core/assoc :valid-upgrade-target (deser-valid-upgrade-target-list (clojure.core/get-in letvar439525 ["ValidUpgradeTarget" :content]))) (letvar439525 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar439525 ["EngineVersion" :content]))) (letvar439525 "SupportedCharacterSets") (clojure.core/assoc :supported-character-sets (deser-supported-character-sets-list (clojure.core/get-in letvar439525 ["SupportedCharacterSets" :content]))) (letvar439525 "SupportsLogExportsToCloudwatchLogs") (clojure.core/assoc :supports-log-exports-to-cloudwatch-logs (deser-boolean (clojure.core/get-in letvar439525 ["SupportsLogExportsToCloudwatchLogs" :content]))) (letvar439525 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar439525 ["Engine" :content]))) (letvar439525 "ExportableLogTypes") (clojure.core/assoc :exportable-log-types (deser-log-type-list (clojure.core/get-in letvar439525 ["ExportableLogTypes" :content]))) (letvar439525 "DBParameterGroupFamily") (clojure.core/assoc :db-parameter-group-family (deser-string (clojure.core/get-in letvar439525 ["DBParameterGroupFamily" :content]))))))

(clojure.core/defn- deser-domain-membership-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-domain-membership coll))) input))

(clojure.core/defn- deser-valid-storage-options [input] (clojure.core/let [letvar439650 {"StorageType" (portkey.aws/search-for-tag input "StorageType" :flattened? nil :xmlAttribute? nil), "StorageSize" (portkey.aws/search-for-tag input "StorageSize" :flattened? nil :xmlAttribute? nil), "ProvisionedIops" (portkey.aws/search-for-tag input "ProvisionedIops" :flattened? nil :xmlAttribute? nil), "IopsToStorageRatio" (portkey.aws/search-for-tag input "IopsToStorageRatio" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar439650 "StorageType") (clojure.core/assoc :storage-type (deser-string (clojure.core/get-in letvar439650 ["StorageType" :content]))) (letvar439650 "StorageSize") (clojure.core/assoc :storage-size (deser-range-list (clojure.core/get-in letvar439650 ["StorageSize" :content]))) (letvar439650 "ProvisionedIops") (clojure.core/assoc :provisioned-iops (deser-range-list (clojure.core/get-in letvar439650 ["ProvisionedIops" :content]))) (letvar439650 "IopsToStorageRatio") (clojure.core/assoc :iops-to-storage-ratio (deser-double-range-list (clojure.core/get-in letvar439650 ["IopsToStorageRatio" :content]))))))

(clojure.core/defn- deser-vpc-security-group-membership [input] (clojure.core/let [letvar439758 {"VpcSecurityGroupId" (portkey.aws/search-for-tag input "VpcSecurityGroupId" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar439758 "VpcSecurityGroupId") (clojure.core/assoc :vpc-security-group-id (deser-string (clojure.core/get-in letvar439758 ["VpcSecurityGroupId" :content]))) (letvar439758 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar439758 ["Status" :content]))))))

(clojure.core/defn- deser-valid-db-instance-modifications-message [input] (clojure.core/let [letvar439866 {"Storage" (portkey.aws/search-for-tag input "Storage" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar439866 "Storage") (clojure.core/assoc :storage (deser-valid-storage-options-list (clojure.core/get-in letvar439866 ["Storage" :content]))))))

(clojure.core/defn- deser-db-cluster-snapshot-attribute-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-snapshot-attribute coll))) input))

(clojure.core/defn- deser-option-group-membership-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-option-group-membership coll))) input))

(clojure.core/defn- deser-event-categories-map-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-event-categories-map coll))) input))

(clojure.core/defn- deser-integer [input] (java.lang.Integer. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-string [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-db-cluster-snapshot-attribute [input] (clojure.core/let [letvar440032 {"AttributeName" (portkey.aws/search-for-tag input "AttributeName" :flattened? nil :xmlAttribute? nil), "AttributeValues" (portkey.aws/search-for-tag input "AttributeValues" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar440032 "AttributeName") (clojure.core/assoc :attribute-name (deser-string (clojure.core/get-in letvar440032 ["AttributeName" :content]))) (letvar440032 "AttributeValues") (clojure.core/assoc :attribute-values (deser-attribute-value-list (clojure.core/get-in letvar440032 ["AttributeValues" :content]))))))

(clojure.core/defn- deser-parameter [input] (clojure.core/let [letvar440140 {"DataType" (portkey.aws/search-for-tag input "DataType" :flattened? nil :xmlAttribute? nil), "ParameterName" (portkey.aws/search-for-tag input "ParameterName" :flattened? nil :xmlAttribute? nil), "Source" (portkey.aws/search-for-tag input "Source" :flattened? nil :xmlAttribute? nil), "MinimumEngineVersion" (portkey.aws/search-for-tag input "MinimumEngineVersion" :flattened? nil :xmlAttribute? nil), "AllowedValues" (portkey.aws/search-for-tag input "AllowedValues" :flattened? nil :xmlAttribute? nil), "ApplyType" (portkey.aws/search-for-tag input "ApplyType" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "ApplyMethod" (portkey.aws/search-for-tag input "ApplyMethod" :flattened? nil :xmlAttribute? nil), "IsModifiable" (portkey.aws/search-for-tag input "IsModifiable" :flattened? nil :xmlAttribute? nil), "ParameterValue" (portkey.aws/search-for-tag input "ParameterValue" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar440140 "DataType") (clojure.core/assoc :data-type (deser-string (clojure.core/get-in letvar440140 ["DataType" :content]))) (letvar440140 "ParameterName") (clojure.core/assoc :parameter-name (deser-string (clojure.core/get-in letvar440140 ["ParameterName" :content]))) (letvar440140 "Source") (clojure.core/assoc :source (deser-string (clojure.core/get-in letvar440140 ["Source" :content]))) (letvar440140 "MinimumEngineVersion") (clojure.core/assoc :minimum-engine-version (deser-string (clojure.core/get-in letvar440140 ["MinimumEngineVersion" :content]))) (letvar440140 "AllowedValues") (clojure.core/assoc :allowed-values (deser-string (clojure.core/get-in letvar440140 ["AllowedValues" :content]))) (letvar440140 "ApplyType") (clojure.core/assoc :apply-type (deser-string (clojure.core/get-in letvar440140 ["ApplyType" :content]))) (letvar440140 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar440140 ["Description" :content]))) (letvar440140 "ApplyMethod") (clojure.core/assoc :apply-method (deser-apply-method (clojure.core/get-in letvar440140 ["ApplyMethod" :content]))) (letvar440140 "IsModifiable") (clojure.core/assoc :is-modifiable (deser-boolean (clojure.core/get-in letvar440140 ["IsModifiable" :content]))) (letvar440140 "ParameterValue") (clojure.core/assoc :parameter-value (deser-string (clojure.core/get-in letvar440140 ["ParameterValue" :content]))))))

(clojure.core/defn- deser-db-security-group-membership [input] (clojure.core/let [letvar440248 {"DBSecurityGroupName" (portkey.aws/search-for-tag input "DBSecurityGroupName" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar440248 "DBSecurityGroupName") (clojure.core/assoc :db-security-group-name (deser-string (clojure.core/get-in letvar440248 ["DBSecurityGroupName" :content]))) (letvar440248 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar440248 ["Status" :content]))))))

(clojure.core/defn- deser-read-replica-db-cluster-identifier-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-db-cluster-snapshot-attributes-result [input] (clojure.core/let [letvar440373 {"DBClusterSnapshotIdentifier" (portkey.aws/search-for-tag input "DBClusterSnapshotIdentifier" :flattened? nil :xmlAttribute? nil), "DBClusterSnapshotAttributes" (portkey.aws/search-for-tag input "DBClusterSnapshotAttributes" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar440373 "DBClusterSnapshotIdentifier") (clojure.core/assoc :db-cluster-snapshot-identifier (deser-string (clojure.core/get-in letvar440373 ["DBClusterSnapshotIdentifier" :content]))) (letvar440373 "DBClusterSnapshotAttributes") (clojure.core/assoc :db-cluster-snapshot-attributes (deser-db-cluster-snapshot-attribute-list (clojure.core/get-in letvar440373 ["DBClusterSnapshotAttributes" :content]))))))

(clojure.core/defn- deser-db-instance [input] (clojure.core/let [letvar440481 {"BackupRetentionPeriod" (portkey.aws/search-for-tag input "BackupRetentionPeriod" :flattened? nil :xmlAttribute? nil), "DBSecurityGroups" (portkey.aws/search-for-tag input "DBSecurityGroups" :flattened? nil :xmlAttribute? nil), "SecondaryAvailabilityZone" (portkey.aws/search-for-tag input "SecondaryAvailabilityZone" :flattened? nil :xmlAttribute? nil), "PromotionTier" (portkey.aws/search-for-tag input "PromotionTier" :flattened? nil :xmlAttribute? nil), "CharacterSetName" (portkey.aws/search-for-tag input "CharacterSetName" :flattened? nil :xmlAttribute? nil), "PubliclyAccessible" (portkey.aws/search-for-tag input "PubliclyAccessible" :flattened? nil :xmlAttribute? nil), "ReadReplicaDBClusterIdentifiers" (portkey.aws/search-for-tag input "ReadReplicaDBClusterIdentifiers" :flattened? nil :xmlAttribute? nil), "ReadReplicaDBInstanceIdentifiers" (portkey.aws/search-for-tag input "ReadReplicaDBInstanceIdentifiers" :flattened? nil :xmlAttribute? nil), "DomainMemberships" (portkey.aws/search-for-tag input "DomainMemberships" :flattened? nil :xmlAttribute? nil), "PreferredMaintenanceWindow" (portkey.aws/search-for-tag input "PreferredMaintenanceWindow" :flattened? nil :xmlAttribute? nil), "CopyTagsToSnapshot" (portkey.aws/search-for-tag input "CopyTagsToSnapshot" :flattened? nil :xmlAttribute? nil), "DBInstanceIdentifier" (portkey.aws/search-for-tag input "DBInstanceIdentifier" :flattened? nil :xmlAttribute? nil), "EnabledCloudwatchLogsExports" (portkey.aws/search-for-tag input "EnabledCloudwatchLogsExports" :flattened? nil :xmlAttribute? nil), "AutoMinorVersionUpgrade" (portkey.aws/search-for-tag input "AutoMinorVersionUpgrade" :flattened? nil :xmlAttribute? nil), "DbInstancePort" (portkey.aws/search-for-tag input "DbInstancePort" :flattened? nil :xmlAttribute? nil), "DBName" (portkey.aws/search-for-tag input "DBName" :flattened? nil :xmlAttribute? nil), "DBInstanceArn" (portkey.aws/search-for-tag input "DBInstanceArn" :flattened? nil :xmlAttribute? nil), "InstanceCreateTime" (portkey.aws/search-for-tag input "InstanceCreateTime" :flattened? nil :xmlAttribute? nil), "AvailabilityZone" (portkey.aws/search-for-tag input "AvailabilityZone" :flattened? nil :xmlAttribute? nil), "ReadReplicaSourceDBInstanceIdentifier" (portkey.aws/search-for-tag input "ReadReplicaSourceDBInstanceIdentifier" :flattened? nil :xmlAttribute? nil), "LicenseModel" (portkey.aws/search-for-tag input "LicenseModel" :flattened? nil :xmlAttribute? nil), "AllocatedStorage" (portkey.aws/search-for-tag input "AllocatedStorage" :flattened? nil :xmlAttribute? nil), "MonitoringInterval" (portkey.aws/search-for-tag input "MonitoringInterval" :flattened? nil :xmlAttribute? nil), "Timezone" (portkey.aws/search-for-tag input "Timezone" :flattened? nil :xmlAttribute? nil), "MasterUsername" (portkey.aws/search-for-tag input "MasterUsername" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "PerformanceInsightsEnabled" (portkey.aws/search-for-tag input "PerformanceInsightsEnabled" :flattened? nil :xmlAttribute? nil), "StorageEncrypted" (portkey.aws/search-for-tag input "StorageEncrypted" :flattened? nil :xmlAttribute? nil), "KmsKeyId" (portkey.aws/search-for-tag input "KmsKeyId" :flattened? nil :xmlAttribute? nil), "DbiResourceId" (portkey.aws/search-for-tag input "DbiResourceId" :flattened? nil :xmlAttribute? nil), "Iops" (portkey.aws/search-for-tag input "Iops" :flattened? nil :xmlAttribute? nil), "StorageType" (portkey.aws/search-for-tag input "StorageType" :flattened? nil :xmlAttribute? nil), "CACertificateIdentifier" (portkey.aws/search-for-tag input "CACertificateIdentifier" :flattened? nil :xmlAttribute? nil), "Endpoint" (portkey.aws/search-for-tag input "Endpoint" :flattened? nil :xmlAttribute? nil), "OptionGroupMemberships" (portkey.aws/search-for-tag input "OptionGroupMemberships" :flattened? nil :xmlAttribute? nil), "IAMDatabaseAuthenticationEnabled" (portkey.aws/search-for-tag input "IAMDatabaseAuthenticationEnabled" :flattened? nil :xmlAttribute? nil), "DBInstanceClass" (portkey.aws/search-for-tag input "DBInstanceClass" :flattened? nil :xmlAttribute? nil), "DBParameterGroups" (portkey.aws/search-for-tag input "DBParameterGroups" :flattened? nil :xmlAttribute? nil), "VpcSecurityGroups" (portkey.aws/search-for-tag input "VpcSecurityGroups" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "DBInstanceStatus" (portkey.aws/search-for-tag input "DBInstanceStatus" :flattened? nil :xmlAttribute? nil), "StatusInfos" (portkey.aws/search-for-tag input "StatusInfos" :flattened? nil :xmlAttribute? nil), "MonitoringRoleArn" (portkey.aws/search-for-tag input "MonitoringRoleArn" :flattened? nil :xmlAttribute? nil), "TdeCredentialArn" (portkey.aws/search-for-tag input "TdeCredentialArn" :flattened? nil :xmlAttribute? nil), "EnhancedMonitoringResourceArn" (portkey.aws/search-for-tag input "EnhancedMonitoringResourceArn" :flattened? nil :xmlAttribute? nil), "MultiAZ" (portkey.aws/search-for-tag input "MultiAZ" :flattened? nil :xmlAttribute? nil), "PerformanceInsightsKMSKeyId" (portkey.aws/search-for-tag input "PerformanceInsightsKMSKeyId" :flattened? nil :xmlAttribute? nil), "DBClusterIdentifier" (portkey.aws/search-for-tag input "DBClusterIdentifier" :flattened? nil :xmlAttribute? nil), "PreferredBackupWindow" (portkey.aws/search-for-tag input "PreferredBackupWindow" :flattened? nil :xmlAttribute? nil), "PendingModifiedValues" (portkey.aws/search-for-tag input "PendingModifiedValues" :flattened? nil :xmlAttribute? nil), "LatestRestorableTime" (portkey.aws/search-for-tag input "LatestRestorableTime" :flattened? nil :xmlAttribute? nil), "DBSubnetGroup" (portkey.aws/search-for-tag input "DBSubnetGroup" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar440481 "BackupRetentionPeriod") (clojure.core/assoc :backup-retention-period (deser-integer (clojure.core/get-in letvar440481 ["BackupRetentionPeriod" :content]))) (letvar440481 "DBSecurityGroups") (clojure.core/assoc :db-security-groups (deser-db-security-group-membership-list (clojure.core/get-in letvar440481 ["DBSecurityGroups" :content]))) (letvar440481 "SecondaryAvailabilityZone") (clojure.core/assoc :secondary-availability-zone (deser-string (clojure.core/get-in letvar440481 ["SecondaryAvailabilityZone" :content]))) (letvar440481 "PromotionTier") (clojure.core/assoc :promotion-tier (deser-integer-optional (clojure.core/get-in letvar440481 ["PromotionTier" :content]))) (letvar440481 "CharacterSetName") (clojure.core/assoc :character-set-name (deser-string (clojure.core/get-in letvar440481 ["CharacterSetName" :content]))) (letvar440481 "PubliclyAccessible") (clojure.core/assoc :publicly-accessible (deser-boolean (clojure.core/get-in letvar440481 ["PubliclyAccessible" :content]))) (letvar440481 "ReadReplicaDBClusterIdentifiers") (clojure.core/assoc :read-replica-db-cluster-identifiers (deser-read-replica-db-cluster-identifier-list (clojure.core/get-in letvar440481 ["ReadReplicaDBClusterIdentifiers" :content]))) (letvar440481 "ReadReplicaDBInstanceIdentifiers") (clojure.core/assoc :read-replica-db-instance-identifiers (deser-read-replica-db-instance-identifier-list (clojure.core/get-in letvar440481 ["ReadReplicaDBInstanceIdentifiers" :content]))) (letvar440481 "DomainMemberships") (clojure.core/assoc :domain-memberships (deser-domain-membership-list (clojure.core/get-in letvar440481 ["DomainMemberships" :content]))) (letvar440481 "PreferredMaintenanceWindow") (clojure.core/assoc :preferred-maintenance-window (deser-string (clojure.core/get-in letvar440481 ["PreferredMaintenanceWindow" :content]))) (letvar440481 "CopyTagsToSnapshot") (clojure.core/assoc :copy-tags-to-snapshot (deser-boolean (clojure.core/get-in letvar440481 ["CopyTagsToSnapshot" :content]))) (letvar440481 "DBInstanceIdentifier") (clojure.core/assoc :db-instance-identifier (deser-string (clojure.core/get-in letvar440481 ["DBInstanceIdentifier" :content]))) (letvar440481 "EnabledCloudwatchLogsExports") (clojure.core/assoc :enabled-cloudwatch-logs-exports (deser-log-type-list (clojure.core/get-in letvar440481 ["EnabledCloudwatchLogsExports" :content]))) (letvar440481 "AutoMinorVersionUpgrade") (clojure.core/assoc :auto-minor-version-upgrade (deser-boolean (clojure.core/get-in letvar440481 ["AutoMinorVersionUpgrade" :content]))) (letvar440481 "DbInstancePort") (clojure.core/assoc :db-instance-port (deser-integer (clojure.core/get-in letvar440481 ["DbInstancePort" :content]))) (letvar440481 "DBName") (clojure.core/assoc :db-name (deser-string (clojure.core/get-in letvar440481 ["DBName" :content]))) (letvar440481 "DBInstanceArn") (clojure.core/assoc :db-instance-arn (deser-string (clojure.core/get-in letvar440481 ["DBInstanceArn" :content]))) (letvar440481 "InstanceCreateTime") (clojure.core/assoc :instance-create-time (deser-t-stamp (clojure.core/get-in letvar440481 ["InstanceCreateTime" :content]))) (letvar440481 "AvailabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar440481 ["AvailabilityZone" :content]))) (letvar440481 "ReadReplicaSourceDBInstanceIdentifier") (clojure.core/assoc :read-replica-source-db-instance-identifier (deser-string (clojure.core/get-in letvar440481 ["ReadReplicaSourceDBInstanceIdentifier" :content]))) (letvar440481 "LicenseModel") (clojure.core/assoc :license-model (deser-string (clojure.core/get-in letvar440481 ["LicenseModel" :content]))) (letvar440481 "AllocatedStorage") (clojure.core/assoc :allocated-storage (deser-integer (clojure.core/get-in letvar440481 ["AllocatedStorage" :content]))) (letvar440481 "MonitoringInterval") (clojure.core/assoc :monitoring-interval (deser-integer-optional (clojure.core/get-in letvar440481 ["MonitoringInterval" :content]))) (letvar440481 "Timezone") (clojure.core/assoc :timezone (deser-string (clojure.core/get-in letvar440481 ["Timezone" :content]))) (letvar440481 "MasterUsername") (clojure.core/assoc :master-username (deser-string (clojure.core/get-in letvar440481 ["MasterUsername" :content]))) (letvar440481 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar440481 ["EngineVersion" :content]))) (letvar440481 "PerformanceInsightsEnabled") (clojure.core/assoc :performance-insights-enabled (deser-boolean-optional (clojure.core/get-in letvar440481 ["PerformanceInsightsEnabled" :content]))) (letvar440481 "StorageEncrypted") (clojure.core/assoc :storage-encrypted (deser-boolean (clojure.core/get-in letvar440481 ["StorageEncrypted" :content]))) (letvar440481 "KmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar440481 ["KmsKeyId" :content]))) (letvar440481 "DbiResourceId") (clojure.core/assoc :dbi-resource-id (deser-string (clojure.core/get-in letvar440481 ["DbiResourceId" :content]))) (letvar440481 "Iops") (clojure.core/assoc :iops (deser-integer-optional (clojure.core/get-in letvar440481 ["Iops" :content]))) (letvar440481 "StorageType") (clojure.core/assoc :storage-type (deser-string (clojure.core/get-in letvar440481 ["StorageType" :content]))) (letvar440481 "CACertificateIdentifier") (clojure.core/assoc :ca-certificate-identifier (deser-string (clojure.core/get-in letvar440481 ["CACertificateIdentifier" :content]))) (letvar440481 "Endpoint") (clojure.core/assoc :endpoint (deser-endpoint (clojure.core/get-in letvar440481 ["Endpoint" :content]))) (letvar440481 "OptionGroupMemberships") (clojure.core/assoc :option-group-memberships (deser-option-group-membership-list (clojure.core/get-in letvar440481 ["OptionGroupMemberships" :content]))) (letvar440481 "IAMDatabaseAuthenticationEnabled") (clojure.core/assoc :iam-database-authentication-enabled (deser-boolean (clojure.core/get-in letvar440481 ["IAMDatabaseAuthenticationEnabled" :content]))) (letvar440481 "DBInstanceClass") (clojure.core/assoc :db-instance-class (deser-string (clojure.core/get-in letvar440481 ["DBInstanceClass" :content]))) (letvar440481 "DBParameterGroups") (clojure.core/assoc :db-parameter-groups (deser-db-parameter-group-status-list (clojure.core/get-in letvar440481 ["DBParameterGroups" :content]))) (letvar440481 "VpcSecurityGroups") (clojure.core/assoc :vpc-security-groups (deser-vpc-security-group-membership-list (clojure.core/get-in letvar440481 ["VpcSecurityGroups" :content]))) (letvar440481 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar440481 ["Engine" :content]))) (letvar440481 "DBInstanceStatus") (clojure.core/assoc :db-instance-status (deser-string (clojure.core/get-in letvar440481 ["DBInstanceStatus" :content]))) (letvar440481 "StatusInfos") (clojure.core/assoc :status-infos (deser-db-instance-status-info-list (clojure.core/get-in letvar440481 ["StatusInfos" :content]))) (letvar440481 "MonitoringRoleArn") (clojure.core/assoc :monitoring-role-arn (deser-string (clojure.core/get-in letvar440481 ["MonitoringRoleArn" :content]))) (letvar440481 "TdeCredentialArn") (clojure.core/assoc :tde-credential-arn (deser-string (clojure.core/get-in letvar440481 ["TdeCredentialArn" :content]))) (letvar440481 "EnhancedMonitoringResourceArn") (clojure.core/assoc :enhanced-monitoring-resource-arn (deser-string (clojure.core/get-in letvar440481 ["EnhancedMonitoringResourceArn" :content]))) (letvar440481 "MultiAZ") (clojure.core/assoc :multi-az (deser-boolean (clojure.core/get-in letvar440481 ["MultiAZ" :content]))) (letvar440481 "PerformanceInsightsKMSKeyId") (clojure.core/assoc :performance-insights-kms-key-id (deser-string (clojure.core/get-in letvar440481 ["PerformanceInsightsKMSKeyId" :content]))) (letvar440481 "DBClusterIdentifier") (clojure.core/assoc :db-cluster-identifier (deser-string (clojure.core/get-in letvar440481 ["DBClusterIdentifier" :content]))) (letvar440481 "PreferredBackupWindow") (clojure.core/assoc :preferred-backup-window (deser-string (clojure.core/get-in letvar440481 ["PreferredBackupWindow" :content]))) (letvar440481 "PendingModifiedValues") (clojure.core/assoc :pending-modified-values (deser-pending-modified-values (clojure.core/get-in letvar440481 ["PendingModifiedValues" :content]))) (letvar440481 "LatestRestorableTime") (clojure.core/assoc :latest-restorable-time (deser-t-stamp (clojure.core/get-in letvar440481 ["LatestRestorableTime" :content]))) (letvar440481 "DBSubnetGroup") (clojure.core/assoc :db-subnet-group (deser-db-subnet-group (clojure.core/get-in letvar440481 ["DBSubnetGroup" :content]))))))

(clojure.core/defn- deser-t-stamp [input] (portkey.aws/unbox-xml-primitive-value input))

(clojure.core/defn- deser-db-security-group-membership-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-security-group-membership coll))) input))

(clojure.core/defn- deser-event-categories-map [input] (clojure.core/let [letvar440608 {"SourceType" (portkey.aws/search-for-tag input "SourceType" :flattened? nil :xmlAttribute? nil), "EventCategories" (portkey.aws/search-for-tag input "EventCategories" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar440608 "SourceType") (clojure.core/assoc :source-type (deser-string (clojure.core/get-in letvar440608 ["SourceType" :content]))) (letvar440608 "EventCategories") (clojure.core/assoc :event-categories (deser-event-categories-list (clojure.core/get-in letvar440608 ["EventCategories" :content]))))))

(clojure.core/defn- deser-event-categories-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-db-cluster-parameter-group [input] (clojure.core/let [letvar440733 {"DBClusterParameterGroupName" (portkey.aws/search-for-tag input "DBClusterParameterGroupName" :flattened? nil :xmlAttribute? nil), "DBParameterGroupFamily" (portkey.aws/search-for-tag input "DBParameterGroupFamily" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "DBClusterParameterGroupArn" (portkey.aws/search-for-tag input "DBClusterParameterGroupArn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar440733 "DBClusterParameterGroupName") (clojure.core/assoc :db-cluster-parameter-group-name (deser-string (clojure.core/get-in letvar440733 ["DBClusterParameterGroupName" :content]))) (letvar440733 "DBParameterGroupFamily") (clojure.core/assoc :db-parameter-group-family (deser-string (clojure.core/get-in letvar440733 ["DBParameterGroupFamily" :content]))) (letvar440733 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar440733 ["Description" :content]))) (letvar440733 "DBClusterParameterGroupArn") (clojure.core/assoc :db-cluster-parameter-group-arn (deser-string (clojure.core/get-in letvar440733 ["DBClusterParameterGroupArn" :content]))))))

(clojure.core/defn- deser-apply-method [input] (clojure.core/get {"immediate" :immediate, "pending-reboot" :pendingreboot} (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-endpoint [input] (clojure.core/let [letvar440846 {"Address" (portkey.aws/search-for-tag input "Address" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "HostedZoneId" (portkey.aws/search-for-tag input "HostedZoneId" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar440846 "Address") (clojure.core/assoc :address (deser-string (clojure.core/get-in letvar440846 ["Address" :content]))) (letvar440846 "Port") (clojure.core/assoc :port (deser-integer (clojure.core/get-in letvar440846 ["Port" :content]))) (letvar440846 "HostedZoneId") (clojure.core/assoc :hosted-zone-id (deser-string (clojure.core/get-in letvar440846 ["HostedZoneId" :content]))))))

(clojure.core/defn- deser-db-parameter-group [input] (clojure.core/let [letvar440954 {"DBParameterGroupName" (portkey.aws/search-for-tag input "DBParameterGroupName" :flattened? nil :xmlAttribute? nil), "DBParameterGroupFamily" (portkey.aws/search-for-tag input "DBParameterGroupFamily" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "DBParameterGroupArn" (portkey.aws/search-for-tag input "DBParameterGroupArn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar440954 "DBParameterGroupName") (clojure.core/assoc :db-parameter-group-name (deser-string (clojure.core/get-in letvar440954 ["DBParameterGroupName" :content]))) (letvar440954 "DBParameterGroupFamily") (clojure.core/assoc :db-parameter-group-family (deser-string (clojure.core/get-in letvar440954 ["DBParameterGroupFamily" :content]))) (letvar440954 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar440954 ["Description" :content]))) (letvar440954 "DBParameterGroupArn") (clojure.core/assoc :db-parameter-group-arn (deser-string (clojure.core/get-in letvar440954 ["DBParameterGroupArn" :content]))))))

(clojure.core/defn- deser-supported-character-sets-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-character-set coll))) input))

(clojure.core/defn- deser-log-type-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-db-cluster-option-group-status [input] (clojure.core/let [letvar441096 {"DBClusterOptionGroupName" (portkey.aws/search-for-tag input "DBClusterOptionGroupName" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar441096 "DBClusterOptionGroupName") (clojure.core/assoc :db-cluster-option-group-name (deser-string (clojure.core/get-in letvar441096 ["DBClusterOptionGroupName" :content]))) (letvar441096 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar441096 ["Status" :content]))))))

(clojure.core/defn- deser-option-group-membership [input] (clojure.core/let [letvar441204 {"OptionGroupName" (portkey.aws/search-for-tag input "OptionGroupName" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar441204 "OptionGroupName") (clojure.core/assoc :option-group-name (deser-string (clojure.core/get-in letvar441204 ["OptionGroupName" :content]))) (letvar441204 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar441204 ["Status" :content]))))))

(clojure.core/defn- deser-upgrade-target [input] (clojure.core/let [letvar441312 {"Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "Description" (portkey.aws/search-for-tag input "Description" :flattened? nil :xmlAttribute? nil), "AutoUpgrade" (portkey.aws/search-for-tag input "AutoUpgrade" :flattened? nil :xmlAttribute? nil), "IsMajorVersionUpgrade" (portkey.aws/search-for-tag input "IsMajorVersionUpgrade" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar441312 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar441312 ["Engine" :content]))) (letvar441312 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar441312 ["EngineVersion" :content]))) (letvar441312 "Description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar441312 ["Description" :content]))) (letvar441312 "AutoUpgrade") (clojure.core/assoc :auto-upgrade (deser-boolean (clojure.core/get-in letvar441312 ["AutoUpgrade" :content]))) (letvar441312 "IsMajorVersionUpgrade") (clojure.core/assoc :is-major-version-upgrade (deser-boolean (clojure.core/get-in letvar441312 ["IsMajorVersionUpgrade" :content]))))))

(clojure.core/defn- deser-attribute-value-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-character-set [input] (clojure.core/let [letvar441437 {"CharacterSetName" (portkey.aws/search-for-tag input "CharacterSetName" :flattened? nil :xmlAttribute? nil), "CharacterSetDescription" (portkey.aws/search-for-tag input "CharacterSetDescription" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar441437 "CharacterSetName") (clojure.core/assoc :character-set-name (deser-string (clojure.core/get-in letvar441437 ["CharacterSetName" :content]))) (letvar441437 "CharacterSetDescription") (clojure.core/assoc :character-set-description (deser-string (clojure.core/get-in letvar441437 ["CharacterSetDescription" :content]))))))

(clojure.core/defn- deser-tag [input] (clojure.core/let [letvar441545 {"Key" (portkey.aws/search-for-tag input "Key" :flattened? nil :xmlAttribute? nil), "Value" (portkey.aws/search-for-tag input "Value" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar441545 "Key") (clojure.core/assoc :key (deser-string (clojure.core/get-in letvar441545 ["Key" :content]))) (letvar441545 "Value") (clojure.core/assoc :value (deser-string (clojure.core/get-in letvar441545 ["Value" :content]))))))

(clojure.core/defn- deser-boolean-optional [input] (clojure.core/when-let [boolstr__283693__auto__ (portkey.aws/unbox-xml-primitive-value input)] (clojure.core/cond (clojure.core/= "true" boolstr__283693__auto__) true (clojure.core/= "false" boolstr__283693__auto__) false)))

(clojure.core/defn- deser-db-instance-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-instance coll))) input))

(clojure.core/defn- deser-event-subscriptions-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-event-subscription coll))) input))

(clojure.core/defn- deser-db-cluster-option-group-memberships [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-cluster-option-group-status coll))) input))

(clojure.core/defn- deser-engine-defaults [input] (clojure.core/let [letvar441706 {"DBParameterGroupFamily" (portkey.aws/search-for-tag input "DBParameterGroupFamily" :flattened? nil :xmlAttribute? nil), "Marker" (portkey.aws/search-for-tag input "Marker" :flattened? nil :xmlAttribute? nil), "Parameters" (portkey.aws/search-for-tag input "Parameters" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar441706 "DBParameterGroupFamily") (clojure.core/assoc :db-parameter-group-family (deser-string (clojure.core/get-in letvar441706 ["DBParameterGroupFamily" :content]))) (letvar441706 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar441706 ["Marker" :content]))) (letvar441706 "Parameters") (clojure.core/assoc :parameters (deser-parameters-list (clojure.core/get-in letvar441706 ["Parameters" :content]))))))

(clojure.core/defn- deser-availability-zones [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-db-subnet-groups [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-subnet-group coll))) input))

(clojure.core/defn- deser-integer-optional [input] (java.lang.Integer. (portkey.aws/unbox-xml-primitive-value input)))

(clojure.core/defn- deser-supported-timezones-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-timezone coll))) input))

(clojure.core/defn- deser-range-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-range coll))) input))

(clojure.core/defn- deser-db-instance-status-info-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-db-instance-status-info coll))) input))

(clojure.core/defn- deser-domain-membership [input] (clojure.core/let [letvar441901 {"Domain" (portkey.aws/search-for-tag input "Domain" :flattened? nil :xmlAttribute? nil), "Status" (portkey.aws/search-for-tag input "Status" :flattened? nil :xmlAttribute? nil), "FQDN" (portkey.aws/search-for-tag input "FQDN" :flattened? nil :xmlAttribute? nil), "IAMRoleName" (portkey.aws/search-for-tag input "IAMRoleName" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar441901 "Domain") (clojure.core/assoc :domain (deser-string (clojure.core/get-in letvar441901 ["Domain" :content]))) (letvar441901 "Status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar441901 ["Status" :content]))) (letvar441901 "FQDN") (clojure.core/assoc :fqdn (deser-string (clojure.core/get-in letvar441901 ["FQDN" :content]))) (letvar441901 "IAMRoleName") (clojure.core/assoc :iam-role-name (deser-string (clojure.core/get-in letvar441901 ["IAMRoleName" :content]))))))

(clojure.core/defn- deser-orderable-db-instance-option [input] (clojure.core/let [letvar442009 {"SupportsIAMDatabaseAuthentication" (portkey.aws/search-for-tag input "SupportsIAMDatabaseAuthentication" :flattened? nil :xmlAttribute? nil), "SupportsIops" (portkey.aws/search-for-tag input "SupportsIops" :flattened? nil :xmlAttribute? nil), "MultiAZCapable" (portkey.aws/search-for-tag input "MultiAZCapable" :flattened? nil :xmlAttribute? nil), "MinStorageSize" (portkey.aws/search-for-tag input "MinStorageSize" :flattened? nil :xmlAttribute? nil), "MaxIopsPerGib" (portkey.aws/search-for-tag input "MaxIopsPerGib" :flattened? nil :xmlAttribute? nil), "MinIopsPerDbInstance" (portkey.aws/search-for-tag input "MinIopsPerDbInstance" :flattened? nil :xmlAttribute? nil), "LicenseModel" (portkey.aws/search-for-tag input "LicenseModel" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "Vpc" (portkey.aws/search-for-tag input "Vpc" :flattened? nil :xmlAttribute? nil), "SupportsPerformanceInsights" (portkey.aws/search-for-tag input "SupportsPerformanceInsights" :flattened? nil :xmlAttribute? nil), "StorageType" (portkey.aws/search-for-tag input "StorageType" :flattened? nil :xmlAttribute? nil), "MaxStorageSize" (portkey.aws/search-for-tag input "MaxStorageSize" :flattened? nil :xmlAttribute? nil), "MinIopsPerGib" (portkey.aws/search-for-tag input "MinIopsPerGib" :flattened? nil :xmlAttribute? nil), "ReadReplicaCapable" (portkey.aws/search-for-tag input "ReadReplicaCapable" :flattened? nil :xmlAttribute? nil), "DBInstanceClass" (portkey.aws/search-for-tag input "DBInstanceClass" :flattened? nil :xmlAttribute? nil), "SupportsStorageEncryption" (portkey.aws/search-for-tag input "SupportsStorageEncryption" :flattened? nil :xmlAttribute? nil), "Engine" (portkey.aws/search-for-tag input "Engine" :flattened? nil :xmlAttribute? nil), "AvailabilityZones" (portkey.aws/search-for-tag input "AvailabilityZones" :flattened? nil :xmlAttribute? nil), "SupportsEnhancedMonitoring" (portkey.aws/search-for-tag input "SupportsEnhancedMonitoring" :flattened? nil :xmlAttribute? nil), "MaxIopsPerDbInstance" (portkey.aws/search-for-tag input "MaxIopsPerDbInstance" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar442009 "SupportsIAMDatabaseAuthentication") (clojure.core/assoc :supports-iam-database-authentication (deser-boolean (clojure.core/get-in letvar442009 ["SupportsIAMDatabaseAuthentication" :content]))) (letvar442009 "SupportsIops") (clojure.core/assoc :supports-iops (deser-boolean (clojure.core/get-in letvar442009 ["SupportsIops" :content]))) (letvar442009 "MultiAZCapable") (clojure.core/assoc :multi-az-capable (deser-boolean (clojure.core/get-in letvar442009 ["MultiAZCapable" :content]))) (letvar442009 "MinStorageSize") (clojure.core/assoc :min-storage-size (deser-integer-optional (clojure.core/get-in letvar442009 ["MinStorageSize" :content]))) (letvar442009 "MaxIopsPerGib") (clojure.core/assoc :max-iops-per-gib (deser-double-optional (clojure.core/get-in letvar442009 ["MaxIopsPerGib" :content]))) (letvar442009 "MinIopsPerDbInstance") (clojure.core/assoc :min-iops-per-db-instance (deser-integer-optional (clojure.core/get-in letvar442009 ["MinIopsPerDbInstance" :content]))) (letvar442009 "LicenseModel") (clojure.core/assoc :license-model (deser-string (clojure.core/get-in letvar442009 ["LicenseModel" :content]))) (letvar442009 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar442009 ["EngineVersion" :content]))) (letvar442009 "Vpc") (clojure.core/assoc :vpc (deser-boolean (clojure.core/get-in letvar442009 ["Vpc" :content]))) (letvar442009 "SupportsPerformanceInsights") (clojure.core/assoc :supports-performance-insights (deser-boolean (clojure.core/get-in letvar442009 ["SupportsPerformanceInsights" :content]))) (letvar442009 "StorageType") (clojure.core/assoc :storage-type (deser-string (clojure.core/get-in letvar442009 ["StorageType" :content]))) (letvar442009 "MaxStorageSize") (clojure.core/assoc :max-storage-size (deser-integer-optional (clojure.core/get-in letvar442009 ["MaxStorageSize" :content]))) (letvar442009 "MinIopsPerGib") (clojure.core/assoc :min-iops-per-gib (deser-double-optional (clojure.core/get-in letvar442009 ["MinIopsPerGib" :content]))) (letvar442009 "ReadReplicaCapable") (clojure.core/assoc :read-replica-capable (deser-boolean (clojure.core/get-in letvar442009 ["ReadReplicaCapable" :content]))) (letvar442009 "DBInstanceClass") (clojure.core/assoc :db-instance-class (deser-string (clojure.core/get-in letvar442009 ["DBInstanceClass" :content]))) (letvar442009 "SupportsStorageEncryption") (clojure.core/assoc :supports-storage-encryption (deser-boolean (clojure.core/get-in letvar442009 ["SupportsStorageEncryption" :content]))) (letvar442009 "Engine") (clojure.core/assoc :engine (deser-string (clojure.core/get-in letvar442009 ["Engine" :content]))) (letvar442009 "AvailabilityZones") (clojure.core/assoc :availability-zones (deser-availability-zone-list (clojure.core/get-in letvar442009 ["AvailabilityZones" :content]))) (letvar442009 "SupportsEnhancedMonitoring") (clojure.core/assoc :supports-enhanced-monitoring (deser-boolean (clojure.core/get-in letvar442009 ["SupportsEnhancedMonitoring" :content]))) (letvar442009 "MaxIopsPerDbInstance") (clojure.core/assoc :max-iops-per-db-instance (deser-integer-optional (clojure.core/get-in letvar442009 ["MaxIopsPerDbInstance" :content]))))))

(clojure.core/defn- deser-pending-modified-values [input] (clojure.core/let [letvar442117 {"BackupRetentionPeriod" (portkey.aws/search-for-tag input "BackupRetentionPeriod" :flattened? nil :xmlAttribute? nil), "PendingCloudwatchLogsExports" (portkey.aws/search-for-tag input "PendingCloudwatchLogsExports" :flattened? nil :xmlAttribute? nil), "DBInstanceIdentifier" (portkey.aws/search-for-tag input "DBInstanceIdentifier" :flattened? nil :xmlAttribute? nil), "MasterUserPassword" (portkey.aws/search-for-tag input "MasterUserPassword" :flattened? nil :xmlAttribute? nil), "LicenseModel" (portkey.aws/search-for-tag input "LicenseModel" :flattened? nil :xmlAttribute? nil), "AllocatedStorage" (portkey.aws/search-for-tag input "AllocatedStorage" :flattened? nil :xmlAttribute? nil), "EngineVersion" (portkey.aws/search-for-tag input "EngineVersion" :flattened? nil :xmlAttribute? nil), "DBSubnetGroupName" (portkey.aws/search-for-tag input "DBSubnetGroupName" :flattened? nil :xmlAttribute? nil), "Port" (portkey.aws/search-for-tag input "Port" :flattened? nil :xmlAttribute? nil), "Iops" (portkey.aws/search-for-tag input "Iops" :flattened? nil :xmlAttribute? nil), "StorageType" (portkey.aws/search-for-tag input "StorageType" :flattened? nil :xmlAttribute? nil), "CACertificateIdentifier" (portkey.aws/search-for-tag input "CACertificateIdentifier" :flattened? nil :xmlAttribute? nil), "DBInstanceClass" (portkey.aws/search-for-tag input "DBInstanceClass" :flattened? nil :xmlAttribute? nil), "MultiAZ" (portkey.aws/search-for-tag input "MultiAZ" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar442117 "BackupRetentionPeriod") (clojure.core/assoc :backup-retention-period (deser-integer-optional (clojure.core/get-in letvar442117 ["BackupRetentionPeriod" :content]))) (letvar442117 "PendingCloudwatchLogsExports") (clojure.core/assoc :pending-cloudwatch-logs-exports (deser-pending-cloudwatch-logs-exports (clojure.core/get-in letvar442117 ["PendingCloudwatchLogsExports" :content]))) (letvar442117 "DBInstanceIdentifier") (clojure.core/assoc :db-instance-identifier (deser-string (clojure.core/get-in letvar442117 ["DBInstanceIdentifier" :content]))) (letvar442117 "MasterUserPassword") (clojure.core/assoc :master-user-password (deser-string (clojure.core/get-in letvar442117 ["MasterUserPassword" :content]))) (letvar442117 "LicenseModel") (clojure.core/assoc :license-model (deser-string (clojure.core/get-in letvar442117 ["LicenseModel" :content]))) (letvar442117 "AllocatedStorage") (clojure.core/assoc :allocated-storage (deser-integer-optional (clojure.core/get-in letvar442117 ["AllocatedStorage" :content]))) (letvar442117 "EngineVersion") (clojure.core/assoc :engine-version (deser-string (clojure.core/get-in letvar442117 ["EngineVersion" :content]))) (letvar442117 "DBSubnetGroupName") (clojure.core/assoc :db-subnet-group-name (deser-string (clojure.core/get-in letvar442117 ["DBSubnetGroupName" :content]))) (letvar442117 "Port") (clojure.core/assoc :port (deser-integer-optional (clojure.core/get-in letvar442117 ["Port" :content]))) (letvar442117 "Iops") (clojure.core/assoc :iops (deser-integer-optional (clojure.core/get-in letvar442117 ["Iops" :content]))) (letvar442117 "StorageType") (clojure.core/assoc :storage-type (deser-string (clojure.core/get-in letvar442117 ["StorageType" :content]))) (letvar442117 "CACertificateIdentifier") (clojure.core/assoc :ca-certificate-identifier (deser-string (clojure.core/get-in letvar442117 ["CACertificateIdentifier" :content]))) (letvar442117 "DBInstanceClass") (clojure.core/assoc :db-instance-class (deser-string (clojure.core/get-in letvar442117 ["DBInstanceClass" :content]))) (letvar442117 "MultiAZ") (clojure.core/assoc :multi-az (deser-boolean-optional (clojure.core/get-in letvar442117 ["MultiAZ" :content]))))))

(clojure.core/defn- deser-subnet-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-subnet coll))) input))

(clojure.core/defn- deser-db-subnet-group [input] (clojure.core/let [letvar442242 {"DBSubnetGroupName" (portkey.aws/search-for-tag input "DBSubnetGroupName" :flattened? nil :xmlAttribute? nil), "DBSubnetGroupDescription" (portkey.aws/search-for-tag input "DBSubnetGroupDescription" :flattened? nil :xmlAttribute? nil), "VpcId" (portkey.aws/search-for-tag input "VpcId" :flattened? nil :xmlAttribute? nil), "SubnetGroupStatus" (portkey.aws/search-for-tag input "SubnetGroupStatus" :flattened? nil :xmlAttribute? nil), "Subnets" (portkey.aws/search-for-tag input "Subnets" :flattened? nil :xmlAttribute? nil), "DBSubnetGroupArn" (portkey.aws/search-for-tag input "DBSubnetGroupArn" :flattened? nil :xmlAttribute? nil)}] (clojure.core/cond-> {} (letvar442242 "DBSubnetGroupName") (clojure.core/assoc :db-subnet-group-name (deser-string (clojure.core/get-in letvar442242 ["DBSubnetGroupName" :content]))) (letvar442242 "DBSubnetGroupDescription") (clojure.core/assoc :db-subnet-group-description (deser-string (clojure.core/get-in letvar442242 ["DBSubnetGroupDescription" :content]))) (letvar442242 "VpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar442242 ["VpcId" :content]))) (letvar442242 "SubnetGroupStatus") (clojure.core/assoc :subnet-group-status (deser-string (clojure.core/get-in letvar442242 ["SubnetGroupStatus" :content]))) (letvar442242 "Subnets") (clojure.core/assoc :subnets (deser-subnet-list (clojure.core/get-in letvar442242 ["Subnets" :content]))) (letvar442242 "DBSubnetGroupArn") (clojure.core/assoc :db-subnet-group-arn (deser-string (clojure.core/get-in letvar442242 ["DBSubnetGroupArn" :content]))))))

(clojure.core/defn- deser-boolean [input] (clojure.core/when-let [boolstr__283693__auto__ (portkey.aws/unbox-xml-primitive-value input)] (clojure.core/cond (clojure.core/= "true" boolstr__283693__auto__) true (clojure.core/= "false" boolstr__283693__auto__) false)))

(clojure.core/defn- response-source-not-found-fault ([input] (response-source-not-found-fault nil input)) ([resultWrapper442246 input] (clojure.core/let [rawinput442245 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442247 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-restore-db-cluster-to-point-in-time-result ([input] (response-restore-db-cluster-to-point-in-time-result nil input)) ([resultWrapper442249 input] (clojure.core/let [rawinput442248 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442250 {"DBCluster" (portkey.aws/search-for-tag rawinput442248 "DBCluster" :flattened? nil :result-wrapper resultWrapper442249)}] (clojure.core/cond-> {} (letvar442250 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar442250 ["DBCluster" :content])))))))

(clojure.core/defn- response-db-instance-not-found-fault ([input] (response-db-instance-not-found-fault nil input)) ([resultWrapper442252 input] (clojure.core/let [rawinput442251 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442253 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-remove-source-identifier-from-subscription-result ([input] (response-remove-source-identifier-from-subscription-result nil input)) ([resultWrapper442255 input] (clojure.core/let [rawinput442254 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442256 {"EventSubscription" (portkey.aws/search-for-tag rawinput442254 "EventSubscription" :flattened? nil :result-wrapper resultWrapper442255)}] (clojure.core/cond-> {} (letvar442256 "EventSubscription") (clojure.core/assoc :event-subscription (deser-event-subscription (clojure.core/get-in letvar442256 ["EventSubscription" :content])))))))

(clojure.core/defn- response-snapshot-quota-exceeded-fault ([input] (response-snapshot-quota-exceeded-fault nil input)) ([resultWrapper442258 input] (clojure.core/let [rawinput442257 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442259 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-domain-not-found-fault ([input] (response-domain-not-found-fault nil input)) ([resultWrapper442261 input] (clojure.core/let [rawinput442260 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442262 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-copy-db-parameter-group-result ([input] (response-copy-db-parameter-group-result nil input)) ([resultWrapper442264 input] (clojure.core/let [rawinput442263 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442265 {"DBParameterGroup" (portkey.aws/search-for-tag rawinput442263 "DBParameterGroup" :flattened? nil :result-wrapper resultWrapper442264)}] (clojure.core/cond-> {} (letvar442265 "DBParameterGroup") (clojure.core/assoc :db-parameter-group (deser-db-parameter-group (clojure.core/get-in letvar442265 ["DBParameterGroup" :content])))))))

(clojure.core/defn- response-db-snapshot-already-exists-fault ([input] (response-db-snapshot-already-exists-fault nil input)) ([resultWrapper442267 input] (clojure.core/let [rawinput442266 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442268 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-promote-read-replica-db-cluster-result ([input] (response-promote-read-replica-db-cluster-result nil input)) ([resultWrapper442270 input] (clojure.core/let [rawinput442269 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442271 {"DBCluster" (portkey.aws/search-for-tag rawinput442269 "DBCluster" :flattened? nil :result-wrapper resultWrapper442270)}] (clojure.core/cond-> {} (letvar442271 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar442271 ["DBCluster" :content])))))))

(clojure.core/defn- response-db-parameter-group-details ([input] (response-db-parameter-group-details nil input)) ([resultWrapper442273 input] (clojure.core/let [rawinput442272 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442274 {"Parameters" (portkey.aws/search-for-tag rawinput442272 "Parameters" :flattened? nil :result-wrapper resultWrapper442273), "Marker" (portkey.aws/search-for-tag rawinput442272 "Marker" :flattened? nil :result-wrapper resultWrapper442273)}] (clojure.core/cond-> {} (letvar442274 "Parameters") (clojure.core/assoc :parameters (deser-parameters-list (clojure.core/get-in letvar442274 ["Parameters" :content]))) (letvar442274 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar442274 ["Marker" :content])))))))

(clojure.core/defn- response-db-cluster-already-exists-fault ([input] (response-db-cluster-already-exists-fault nil input)) ([resultWrapper442276 input] (clojure.core/let [rawinput442275 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442277 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-db-cluster-result ([input] (response-create-db-cluster-result nil input)) ([resultWrapper442279 input] (clojure.core/let [rawinput442278 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442280 {"DBCluster" (portkey.aws/search-for-tag rawinput442278 "DBCluster" :flattened? nil :result-wrapper resultWrapper442279)}] (clojure.core/cond-> {} (letvar442280 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar442280 ["DBCluster" :content])))))))

(clojure.core/defn- response-invalid-db-instance-state-fault ([input] (response-invalid-db-instance-state-fault nil input)) ([resultWrapper442282 input] (clojure.core/let [rawinput442281 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442283 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-sns-no-authorization-fault ([input] (response-sns-no-authorization-fault nil input)) ([resultWrapper442285 input] (clojure.core/let [rawinput442284 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442286 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-reboot-db-instance-result ([input] (response-reboot-db-instance-result nil input)) ([resultWrapper442288 input] (clojure.core/let [rawinput442287 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442289 {"DBInstance" (portkey.aws/search-for-tag rawinput442287 "DBInstance" :flattened? nil :result-wrapper resultWrapper442288)}] (clojure.core/cond-> {} (letvar442289 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar442289 ["DBInstance" :content])))))))

(clojure.core/defn- response-instance-quota-exceeded-fault ([input] (response-instance-quota-exceeded-fault nil input)) ([resultWrapper442291 input] (clojure.core/let [rawinput442290 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442292 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-parameter-group-name-message ([input] (response-db-parameter-group-name-message nil input)) ([resultWrapper442294 input] (clojure.core/let [rawinput442293 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442295 {"DBParameterGroupName" (portkey.aws/search-for-tag rawinput442293 "DBParameterGroupName" :flattened? nil :result-wrapper resultWrapper442294)}] (clojure.core/cond-> {} (letvar442295 "DBParameterGroupName") (clojure.core/assoc :db-parameter-group-name (deser-string (clojure.core/get-in letvar442295 ["DBParameterGroupName" :content])))))))

(clojure.core/defn- response-apply-pending-maintenance-action-result ([input] (response-apply-pending-maintenance-action-result nil input)) ([resultWrapper442297 input] (clojure.core/let [rawinput442296 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442298 {"ResourcePendingMaintenanceActions" (portkey.aws/search-for-tag rawinput442296 "ResourcePendingMaintenanceActions" :flattened? nil :result-wrapper resultWrapper442297)}] (clojure.core/cond-> {} (letvar442298 "ResourcePendingMaintenanceActions") (clojure.core/assoc :resource-pending-maintenance-actions (deser-resource-pending-maintenance-actions (clojure.core/get-in letvar442298 ["ResourcePendingMaintenanceActions" :content])))))))

(clojure.core/defn- response-db-cluster-parameter-group-name-message ([input] (response-db-cluster-parameter-group-name-message nil input)) ([resultWrapper442300 input] (clojure.core/let [rawinput442299 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442301 {"DBClusterParameterGroupName" (portkey.aws/search-for-tag rawinput442299 "DBClusterParameterGroupName" :flattened? nil :result-wrapper resultWrapper442300)}] (clojure.core/cond-> {} (letvar442301 "DBClusterParameterGroupName") (clojure.core/assoc :db-cluster-parameter-group-name (deser-string (clojure.core/get-in letvar442301 ["DBClusterParameterGroupName" :content])))))))

(clojure.core/defn- response-restore-db-cluster-from-snapshot-result ([input] (response-restore-db-cluster-from-snapshot-result nil input)) ([resultWrapper442303 input] (clojure.core/let [rawinput442302 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442304 {"DBCluster" (portkey.aws/search-for-tag rawinput442302 "DBCluster" :flattened? nil :result-wrapper resultWrapper442303)}] (clojure.core/cond-> {} (letvar442304 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar442304 ["DBCluster" :content])))))))

(clojure.core/defn- response-option-group-not-found-fault ([input] (response-option-group-not-found-fault nil input)) ([resultWrapper442306 input] (clojure.core/let [rawinput442305 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442307 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-subnet-group-message ([input] (response-db-subnet-group-message nil input)) ([resultWrapper442309 input] (clojure.core/let [rawinput442308 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442310 {"Marker" (portkey.aws/search-for-tag rawinput442308 "Marker" :flattened? nil :result-wrapper resultWrapper442309), "DBSubnetGroups" (portkey.aws/search-for-tag rawinput442308 "DBSubnetGroups" :flattened? nil :result-wrapper resultWrapper442309)}] (clojure.core/cond-> {} (letvar442310 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar442310 ["Marker" :content]))) (letvar442310 "DBSubnetGroups") (clojure.core/assoc :db-subnet-groups (deser-db-subnet-groups (clojure.core/get-in letvar442310 ["DBSubnetGroups" :content])))))))

(clojure.core/defn- response-invalid-vpc-network-state-fault ([input] (response-invalid-vpc-network-state-fault nil input)) ([resultWrapper442312 input] (clojure.core/let [rawinput442311 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442313 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-role-already-exists-fault ([input] (response-db-cluster-role-already-exists-fault nil input)) ([resultWrapper442315 input] (clojure.core/let [rawinput442314 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442316 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-instance-already-exists-fault ([input] (response-db-instance-already-exists-fault nil input)) ([resultWrapper442318 input] (clojure.core/let [rawinput442317 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442319 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-shared-snapshot-quota-exceeded-fault ([input] (response-shared-snapshot-quota-exceeded-fault nil input)) ([resultWrapper442321 input] (clojure.core/let [rawinput442320 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442322 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-certificate-not-found-fault ([input] (response-certificate-not-found-fault nil input)) ([resultWrapper442324 input] (clojure.core/let [rawinput442323 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442325 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-delete-db-cluster-snapshot-result ([input] (response-delete-db-cluster-snapshot-result nil input)) ([resultWrapper442327 input] (clojure.core/let [rawinput442326 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442328 {"DBClusterSnapshot" (portkey.aws/search-for-tag rawinput442326 "DBClusterSnapshot" :flattened? nil :result-wrapper resultWrapper442327)}] (clojure.core/cond-> {} (letvar442328 "DBClusterSnapshot") (clojure.core/assoc :db-cluster-snapshot (deser-db-cluster-snapshot (clojure.core/get-in letvar442328 ["DBClusterSnapshot" :content])))))))

(clojure.core/defn- response-copy-db-cluster-snapshot-result ([input] (response-copy-db-cluster-snapshot-result nil input)) ([resultWrapper442330 input] (clojure.core/let [rawinput442329 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442331 {"DBClusterSnapshot" (portkey.aws/search-for-tag rawinput442329 "DBClusterSnapshot" :flattened? nil :result-wrapper resultWrapper442330)}] (clojure.core/cond-> {} (letvar442331 "DBClusterSnapshot") (clojure.core/assoc :db-cluster-snapshot (deser-db-cluster-snapshot (clojure.core/get-in letvar442331 ["DBClusterSnapshot" :content])))))))

(clojure.core/defn- response-orderable-db-instance-options-message ([input] (response-orderable-db-instance-options-message nil input)) ([resultWrapper442333 input] (clojure.core/let [rawinput442332 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442334 {"OrderableDBInstanceOptions" (portkey.aws/search-for-tag rawinput442332 "OrderableDBInstanceOptions" :flattened? nil :result-wrapper resultWrapper442333), "Marker" (portkey.aws/search-for-tag rawinput442332 "Marker" :flattened? nil :result-wrapper resultWrapper442333)}] (clojure.core/cond-> {} (letvar442334 "OrderableDBInstanceOptions") (clojure.core/assoc :orderable-db-instance-options (deser-orderable-db-instance-options-list (clojure.core/get-in letvar442334 ["OrderableDBInstanceOptions" :content]))) (letvar442334 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar442334 ["Marker" :content])))))))

(clojure.core/defn- response-event-categories-message ([input] (response-event-categories-message nil input)) ([resultWrapper442336 input] (clojure.core/let [rawinput442335 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442337 {"EventCategoriesMapList" (portkey.aws/search-for-tag rawinput442335 "EventCategoriesMapList" :flattened? nil :result-wrapper resultWrapper442336)}] (clojure.core/cond-> {} (letvar442337 "EventCategoriesMapList") (clojure.core/assoc :event-categories-map-list (deser-event-categories-map-list (clojure.core/get-in letvar442337 ["EventCategoriesMapList" :content])))))))

(clojure.core/defn- response-subscription-not-found-fault ([input] (response-subscription-not-found-fault nil input)) ([resultWrapper442339 input] (clojure.core/let [rawinput442338 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442340 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-subnet-group-state-fault ([input] (response-invalid-db-subnet-group-state-fault nil input)) ([resultWrapper442342 input] (clojure.core/let [rawinput442341 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442343 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-sns-topic-arn-not-found-fault ([input] (response-sns-topic-arn-not-found-fault nil input)) ([resultWrapper442345 input] (clojure.core/let [rawinput442344 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442346 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-not-found-fault ([input] (response-db-cluster-not-found-fault nil input)) ([resultWrapper442348 input] (clojure.core/let [rawinput442347 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442349 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-events-message ([input] (response-events-message nil input)) ([resultWrapper442351 input] (clojure.core/let [rawinput442350 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442352 {"Marker" (portkey.aws/search-for-tag rawinput442350 "Marker" :flattened? nil :result-wrapper resultWrapper442351), "Events" (portkey.aws/search-for-tag rawinput442350 "Events" :flattened? nil :result-wrapper resultWrapper442351)}] (clojure.core/cond-> {} (letvar442352 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar442352 ["Marker" :content]))) (letvar442352 "Events") (clojure.core/assoc :events (deser-event-list (clojure.core/get-in letvar442352 ["Events" :content])))))))

(clojure.core/defn- response-db-cluster-snapshot-message ([input] (response-db-cluster-snapshot-message nil input)) ([resultWrapper442354 input] (clojure.core/let [rawinput442353 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442355 {"Marker" (portkey.aws/search-for-tag rawinput442353 "Marker" :flattened? nil :result-wrapper resultWrapper442354), "DBClusterSnapshots" (portkey.aws/search-for-tag rawinput442353 "DBClusterSnapshots" :flattened? nil :result-wrapper resultWrapper442354)}] (clojure.core/cond-> {} (letvar442355 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar442355 ["Marker" :content]))) (letvar442355 "DBClusterSnapshots") (clojure.core/assoc :db-cluster-snapshots (deser-db-cluster-snapshot-list (clojure.core/get-in letvar442355 ["DBClusterSnapshots" :content])))))))

(clojure.core/defn- response-subscription-category-not-found-fault ([input] (response-subscription-category-not-found-fault nil input)) ([resultWrapper442357 input] (clojure.core/let [rawinput442356 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442358 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-event-subscriptions-message ([input] (response-event-subscriptions-message nil input)) ([resultWrapper442360 input] (clojure.core/let [rawinput442359 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442361 {"Marker" (portkey.aws/search-for-tag rawinput442359 "Marker" :flattened? nil :result-wrapper resultWrapper442360), "EventSubscriptionsList" (portkey.aws/search-for-tag rawinput442359 "EventSubscriptionsList" :flattened? nil :result-wrapper resultWrapper442360)}] (clojure.core/cond-> {} (letvar442361 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar442361 ["Marker" :content]))) (letvar442361 "EventSubscriptionsList") (clojure.core/assoc :event-subscriptions-list (deser-event-subscriptions-list (clojure.core/get-in letvar442361 ["EventSubscriptionsList" :content])))))))

(clojure.core/defn- response-create-db-subnet-group-result ([input] (response-create-db-subnet-group-result nil input)) ([resultWrapper442363 input] (clojure.core/let [rawinput442362 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442364 {"DBSubnetGroup" (portkey.aws/search-for-tag rawinput442362 "DBSubnetGroup" :flattened? nil :result-wrapper resultWrapper442363)}] (clojure.core/cond-> {} (letvar442364 "DBSubnetGroup") (clojure.core/assoc :db-subnet-group (deser-db-subnet-group (clojure.core/get-in letvar442364 ["DBSubnetGroup" :content])))))))

(clojure.core/defn- response-create-event-subscription-result ([input] (response-create-event-subscription-result nil input)) ([resultWrapper442366 input] (clojure.core/let [rawinput442365 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442367 {"EventSubscription" (portkey.aws/search-for-tag rawinput442365 "EventSubscription" :flattened? nil :result-wrapper resultWrapper442366)}] (clojure.core/cond-> {} (letvar442367 "EventSubscription") (clojure.core/assoc :event-subscription (deser-event-subscription (clojure.core/get-in letvar442367 ["EventSubscription" :content])))))))

(clojure.core/defn- response-db-cluster-parameter-group-details ([input] (response-db-cluster-parameter-group-details nil input)) ([resultWrapper442369 input] (clojure.core/let [rawinput442368 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442370 {"Parameters" (portkey.aws/search-for-tag rawinput442368 "Parameters" :flattened? nil :result-wrapper resultWrapper442369), "Marker" (portkey.aws/search-for-tag rawinput442368 "Marker" :flattened? nil :result-wrapper resultWrapper442369)}] (clojure.core/cond-> {} (letvar442370 "Parameters") (clojure.core/assoc :parameters (deser-parameters-list (clojure.core/get-in letvar442370 ["Parameters" :content]))) (letvar442370 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar442370 ["Marker" :content])))))))

(clojure.core/defn- response-invalid-db-security-group-state-fault ([input] (response-invalid-db-security-group-state-fault nil input)) ([resultWrapper442372 input] (clojure.core/let [rawinput442371 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442373 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-storage-type-not-supported-fault ([input] (response-storage-type-not-supported-fault nil input)) ([resultWrapper442375 input] (clojure.core/let [rawinput442374 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442376 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-role-not-found-fault ([input] (response-db-cluster-role-not-found-fault nil input)) ([resultWrapper442378 input] (clojure.core/let [rawinput442377 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442379 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-parameter-group-not-found-fault ([input] (response-db-cluster-parameter-group-not-found-fault nil input)) ([resultWrapper442381 input] (clojure.core/let [rawinput442380 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442382 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-subnet-group-does-not-cover-enough-a-zs ([input] (response-db-subnet-group-does-not-cover-enough-a-zs nil input)) ([resultWrapper442384 input] (clojure.core/let [rawinput442383 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442385 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-parameter-groups-message ([input] (response-db-parameter-groups-message nil input)) ([resultWrapper442387 input] (clojure.core/let [rawinput442386 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442388 {"Marker" (portkey.aws/search-for-tag rawinput442386 "Marker" :flattened? nil :result-wrapper resultWrapper442387), "DBParameterGroups" (portkey.aws/search-for-tag rawinput442386 "DBParameterGroups" :flattened? nil :result-wrapper resultWrapper442387)}] (clojure.core/cond-> {} (letvar442388 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar442388 ["Marker" :content]))) (letvar442388 "DBParameterGroups") (clojure.core/assoc :db-parameter-groups (deser-db-parameter-group-list (clojure.core/get-in letvar442388 ["DBParameterGroups" :content])))))))

(clojure.core/defn- response-describe-engine-default-parameters-result ([input] (response-describe-engine-default-parameters-result nil input)) ([resultWrapper442390 input] (clojure.core/let [rawinput442389 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442391 {"EngineDefaults" (portkey.aws/search-for-tag rawinput442389 "EngineDefaults" :flattened? nil :result-wrapper resultWrapper442390)}] (clojure.core/cond-> {} (letvar442391 "EngineDefaults") (clojure.core/assoc :engine-defaults (deser-engine-defaults (clojure.core/get-in letvar442391 ["EngineDefaults" :content])))))))

(clojure.core/defn- response-db-cluster-snapshot-already-exists-fault ([input] (response-db-cluster-snapshot-already-exists-fault nil input)) ([resultWrapper442393 input] (clojure.core/let [rawinput442392 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442394 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-authorization-not-found-fault ([input] (response-authorization-not-found-fault nil input)) ([resultWrapper442396 input] (clojure.core/let [rawinput442395 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442397 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-role-quota-exceeded-fault ([input] (response-db-cluster-role-quota-exceeded-fault nil input)) ([resultWrapper442399 input] (clojure.core/let [rawinput442398 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442400 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-db-instance-result ([input] (response-create-db-instance-result nil input)) ([resultWrapper442402 input] (clojure.core/let [rawinput442401 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442403 {"DBInstance" (portkey.aws/search-for-tag rawinput442401 "DBInstance" :flattened? nil :result-wrapper resultWrapper442402)}] (clojure.core/cond-> {} (letvar442403 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar442403 ["DBInstance" :content])))))))

(clojure.core/defn- response-copy-db-cluster-parameter-group-result ([input] (response-copy-db-cluster-parameter-group-result nil input)) ([resultWrapper442405 input] (clojure.core/let [rawinput442404 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442406 {"DBClusterParameterGroup" (portkey.aws/search-for-tag rawinput442404 "DBClusterParameterGroup" :flattened? nil :result-wrapper resultWrapper442405)}] (clojure.core/cond-> {} (letvar442406 "DBClusterParameterGroup") (clojure.core/assoc :db-cluster-parameter-group (deser-db-cluster-parameter-group (clojure.core/get-in letvar442406 ["DBClusterParameterGroup" :content])))))))

(clojure.core/defn- response-subnet-already-in-use ([input] (response-subnet-already-in-use nil input)) ([resultWrapper442408 input] (clojure.core/let [rawinput442407 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442409 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-insufficient-storage-cluster-capacity-fault ([input] (response-insufficient-storage-cluster-capacity-fault nil input)) ([resultWrapper442411 input] (clojure.core/let [rawinput442410 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442412 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-snapshot-not-found-fault ([input] (response-db-cluster-snapshot-not-found-fault nil input)) ([resultWrapper442414 input] (clojure.core/let [rawinput442413 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442415 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-cluster-state-fault ([input] (response-invalid-db-cluster-state-fault nil input)) ([resultWrapper442417 input] (clojure.core/let [rawinput442416 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442418 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-modify-db-subnet-group-result ([input] (response-modify-db-subnet-group-result nil input)) ([resultWrapper442420 input] (clojure.core/let [rawinput442419 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442421 {"DBSubnetGroup" (portkey.aws/search-for-tag rawinput442419 "DBSubnetGroup" :flattened? nil :result-wrapper resultWrapper442420)}] (clojure.core/cond-> {} (letvar442421 "DBSubnetGroup") (clojure.core/assoc :db-subnet-group (deser-db-subnet-group (clojure.core/get-in letvar442421 ["DBSubnetGroup" :content])))))))

(clojure.core/defn- response-invalid-subnet ([input] (response-invalid-subnet nil input)) ([resultWrapper442423 input] (clojure.core/let [rawinput442422 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442424 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-subscription-already-exist-fault ([input] (response-subscription-already-exist-fault nil input)) ([resultWrapper442426 input] (clojure.core/let [rawinput442425 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442427 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-upgrade-dependency-failure-fault ([input] (response-db-upgrade-dependency-failure-fault nil input)) ([resultWrapper442429 input] (clojure.core/let [rawinput442428 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442430 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-quota-exceeded-fault ([input] (response-db-cluster-quota-exceeded-fault nil input)) ([resultWrapper442432 input] (clojure.core/let [rawinput442431 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442433 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-event-subscription-state-fault ([input] (response-invalid-event-subscription-state-fault nil input)) ([resultWrapper442435 input] (clojure.core/let [rawinput442434 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442436 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-tag-list-message ([input] (response-tag-list-message nil input)) ([resultWrapper442438 input] (clojure.core/let [rawinput442437 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442439 {"TagList" (portkey.aws/search-for-tag rawinput442437 "TagList" :flattened? nil :result-wrapper resultWrapper442438)}] (clojure.core/cond-> {} (letvar442439 "TagList") (clojure.core/assoc :tag-list (deser-tag-list (clojure.core/get-in letvar442439 ["TagList" :content])))))))

(clojure.core/defn- response-db-subnet-group-not-found-fault ([input] (response-db-subnet-group-not-found-fault nil input)) ([resultWrapper442441 input] (clojure.core/let [rawinput442440 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442442 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-provisioned-iops-not-available-in-az-fault ([input] (response-provisioned-iops-not-available-in-az-fault nil input)) ([resultWrapper442444 input] (clojure.core/let [rawinput442443 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442445 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-modify-db-instance-result ([input] (response-modify-db-instance-result nil input)) ([resultWrapper442447 input] (clojure.core/let [rawinput442446 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442448 {"DBInstance" (portkey.aws/search-for-tag rawinput442446 "DBInstance" :flattened? nil :result-wrapper resultWrapper442447)}] (clojure.core/cond-> {} (letvar442448 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar442448 ["DBInstance" :content])))))))

(clojure.core/defn- response-resource-not-found-fault ([input] (response-resource-not-found-fault nil input)) ([resultWrapper442450 input] (clojure.core/let [rawinput442449 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442451 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-create-db-cluster-parameter-group-result ([input] (response-create-db-cluster-parameter-group-result nil input)) ([resultWrapper442453 input] (clojure.core/let [rawinput442452 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442454 {"DBClusterParameterGroup" (portkey.aws/search-for-tag rawinput442452 "DBClusterParameterGroup" :flattened? nil :result-wrapper resultWrapper442453)}] (clojure.core/cond-> {} (letvar442454 "DBClusterParameterGroup") (clojure.core/assoc :db-cluster-parameter-group (deser-db-cluster-parameter-group (clojure.core/get-in letvar442454 ["DBClusterParameterGroup" :content])))))))

(clojure.core/defn- response-create-db-cluster-snapshot-result ([input] (response-create-db-cluster-snapshot-result nil input)) ([resultWrapper442456 input] (clojure.core/let [rawinput442455 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442457 {"DBClusterSnapshot" (portkey.aws/search-for-tag rawinput442455 "DBClusterSnapshot" :flattened? nil :result-wrapper resultWrapper442456)}] (clojure.core/cond-> {} (letvar442457 "DBClusterSnapshot") (clojure.core/assoc :db-cluster-snapshot (deser-db-cluster-snapshot (clojure.core/get-in letvar442457 ["DBClusterSnapshot" :content])))))))

(clojure.core/defn- response-db-parameter-group-not-found-fault ([input] (response-db-parameter-group-not-found-fault nil input)) ([resultWrapper442459 input] (clojure.core/let [rawinput442458 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442460 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-cluster-message ([input] (response-db-cluster-message nil input)) ([resultWrapper442462 input] (clojure.core/let [rawinput442461 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442463 {"Marker" (portkey.aws/search-for-tag rawinput442461 "Marker" :flattened? nil :result-wrapper resultWrapper442462), "DBClusters" (portkey.aws/search-for-tag rawinput442461 "DBClusters" :flattened? nil :result-wrapper resultWrapper442462)}] (clojure.core/cond-> {} (letvar442463 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar442463 ["Marker" :content]))) (letvar442463 "DBClusters") (clojure.core/assoc :db-clusters (deser-db-cluster-list (clojure.core/get-in letvar442463 ["DBClusters" :content])))))))

(clojure.core/defn- response-event-subscription-quota-exceeded-fault ([input] (response-event-subscription-quota-exceeded-fault nil input)) ([resultWrapper442465 input] (clojure.core/let [rawinput442464 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442466 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-describe-db-cluster-snapshot-attributes-result ([input] (response-describe-db-cluster-snapshot-attributes-result nil input)) ([resultWrapper442468 input] (clojure.core/let [rawinput442467 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442469 {"DBClusterSnapshotAttributesResult" (portkey.aws/search-for-tag rawinput442467 "DBClusterSnapshotAttributesResult" :flattened? nil :result-wrapper resultWrapper442468)}] (clojure.core/cond-> {} (letvar442469 "DBClusterSnapshotAttributesResult") (clojure.core/assoc :db-cluster-snapshot-attributes-result (deser-db-cluster-snapshot-attributes-result (clojure.core/get-in letvar442469 ["DBClusterSnapshotAttributesResult" :content])))))))

(clojure.core/defn- response-kms-key-not-accessible-fault ([input] (response-kms-key-not-accessible-fault nil input)) ([resultWrapper442471 input] (clojure.core/let [rawinput442470 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442472 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-engine-version-message ([input] (response-db-engine-version-message nil input)) ([resultWrapper442474 input] (clojure.core/let [rawinput442473 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442475 {"Marker" (portkey.aws/search-for-tag rawinput442473 "Marker" :flattened? nil :result-wrapper resultWrapper442474), "DBEngineVersions" (portkey.aws/search-for-tag rawinput442473 "DBEngineVersions" :flattened? nil :result-wrapper resultWrapper442474)}] (clojure.core/cond-> {} (letvar442475 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar442475 ["Marker" :content]))) (letvar442475 "DBEngineVersions") (clojure.core/assoc :db-engine-versions (deser-db-engine-version-list (clojure.core/get-in letvar442475 ["DBEngineVersions" :content])))))))

(clojure.core/defn- response-modify-db-cluster-snapshot-attribute-result ([input] (response-modify-db-cluster-snapshot-attribute-result nil input)) ([resultWrapper442477 input] (clojure.core/let [rawinput442476 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442478 {"DBClusterSnapshotAttributesResult" (portkey.aws/search-for-tag rawinput442476 "DBClusterSnapshotAttributesResult" :flattened? nil :result-wrapper resultWrapper442477)}] (clojure.core/cond-> {} (letvar442478 "DBClusterSnapshotAttributesResult") (clojure.core/assoc :db-cluster-snapshot-attributes-result (deser-db-cluster-snapshot-attributes-result (clojure.core/get-in letvar442478 ["DBClusterSnapshotAttributesResult" :content])))))))

(clojure.core/defn- response-db-instance-message ([input] (response-db-instance-message nil input)) ([resultWrapper442480 input] (clojure.core/let [rawinput442479 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442481 {"Marker" (portkey.aws/search-for-tag rawinput442479 "Marker" :flattened? nil :result-wrapper resultWrapper442480), "DBInstances" (portkey.aws/search-for-tag rawinput442479 "DBInstances" :flattened? nil :result-wrapper resultWrapper442480)}] (clojure.core/cond-> {} (letvar442481 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar442481 ["Marker" :content]))) (letvar442481 "DBInstances") (clojure.core/assoc :db-instances (deser-db-instance-list (clojure.core/get-in letvar442481 ["DBInstances" :content])))))))

(clojure.core/defn- response-create-db-parameter-group-result ([input] (response-create-db-parameter-group-result nil input)) ([resultWrapper442483 input] (clojure.core/let [rawinput442482 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442484 {"DBParameterGroup" (portkey.aws/search-for-tag rawinput442482 "DBParameterGroup" :flattened? nil :result-wrapper resultWrapper442483)}] (clojure.core/cond-> {} (letvar442484 "DBParameterGroup") (clojure.core/assoc :db-parameter-group (deser-db-parameter-group (clojure.core/get-in letvar442484 ["DBParameterGroup" :content])))))))

(clojure.core/defn- response-describe-engine-default-cluster-parameters-result ([input] (response-describe-engine-default-cluster-parameters-result nil input)) ([resultWrapper442486 input] (clojure.core/let [rawinput442485 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442487 {"EngineDefaults" (portkey.aws/search-for-tag rawinput442485 "EngineDefaults" :flattened? nil :result-wrapper resultWrapper442486)}] (clojure.core/cond-> {} (letvar442487 "EngineDefaults") (clojure.core/assoc :engine-defaults (deser-engine-defaults (clojure.core/get-in letvar442487 ["EngineDefaults" :content])))))))

(clojure.core/defn- response-invalid-db-cluster-snapshot-state-fault ([input] (response-invalid-db-cluster-snapshot-state-fault nil input)) ([resultWrapper442489 input] (clojure.core/let [rawinput442488 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442490 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-storage-quota-exceeded-fault ([input] (response-storage-quota-exceeded-fault nil input)) ([resultWrapper442492 input] (clojure.core/let [rawinput442491 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442493 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-restore-fault ([input] (response-invalid-restore-fault nil input)) ([resultWrapper442495 input] (clojure.core/let [rawinput442494 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442496 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-insufficient-db-cluster-capacity-fault ([input] (response-insufficient-db-cluster-capacity-fault nil input)) ([resultWrapper442498 input] (clojure.core/let [rawinput442497 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442499 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-parameter-group-already-exists-fault ([input] (response-db-parameter-group-already-exists-fault nil input)) ([resultWrapper442501 input] (clojure.core/let [rawinput442500 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442502 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-subnet-state-fault ([input] (response-invalid-db-subnet-state-fault nil input)) ([resultWrapper442504 input] (clojure.core/let [rawinput442503 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442505 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-parameter-group-quota-exceeded-fault ([input] (response-db-parameter-group-quota-exceeded-fault nil input)) ([resultWrapper442507 input] (clojure.core/let [rawinput442506 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442508 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-describe-valid-db-instance-modifications-result ([input] (response-describe-valid-db-instance-modifications-result nil input)) ([resultWrapper442510 input] (clojure.core/let [rawinput442509 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442511 {"ValidDBInstanceModificationsMessage" (portkey.aws/search-for-tag rawinput442509 "ValidDBInstanceModificationsMessage" :flattened? nil :result-wrapper resultWrapper442510)}] (clojure.core/cond-> {} (letvar442511 "ValidDBInstanceModificationsMessage") (clojure.core/assoc :valid-db-instance-modifications-message (deser-valid-db-instance-modifications-message (clojure.core/get-in letvar442511 ["ValidDBInstanceModificationsMessage" :content])))))))

(clojure.core/defn- response-modify-event-subscription-result ([input] (response-modify-event-subscription-result nil input)) ([resultWrapper442513 input] (clojure.core/let [rawinput442512 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442514 {"EventSubscription" (portkey.aws/search-for-tag rawinput442512 "EventSubscription" :flattened? nil :result-wrapper resultWrapper442513)}] (clojure.core/cond-> {} (letvar442514 "EventSubscription") (clojure.core/assoc :event-subscription (deser-event-subscription (clojure.core/get-in letvar442514 ["EventSubscription" :content])))))))

(clojure.core/defn- response-insufficient-db-instance-capacity-fault ([input] (response-insufficient-db-instance-capacity-fault nil input)) ([resultWrapper442516 input] (clojure.core/let [rawinput442515 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442517 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-failover-db-cluster-result ([input] (response-failover-db-cluster-result nil input)) ([resultWrapper442519 input] (clojure.core/let [rawinput442518 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442520 {"DBCluster" (portkey.aws/search-for-tag rawinput442518 "DBCluster" :flattened? nil :result-wrapper resultWrapper442519)}] (clojure.core/cond-> {} (letvar442520 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar442520 ["DBCluster" :content])))))))

(clojure.core/defn- response-sns-invalid-topic-fault ([input] (response-sns-invalid-topic-fault nil input)) ([resultWrapper442522 input] (clojure.core/let [rawinput442521 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442523 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-delete-db-instance-result ([input] (response-delete-db-instance-result nil input)) ([resultWrapper442525 input] (clojure.core/let [rawinput442524 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442526 {"DBInstance" (portkey.aws/search-for-tag rawinput442524 "DBInstance" :flattened? nil :result-wrapper resultWrapper442525)}] (clojure.core/cond-> {} (letvar442526 "DBInstance") (clojure.core/assoc :db-instance (deser-db-instance (clojure.core/get-in letvar442526 ["DBInstance" :content])))))))

(clojure.core/defn- response-delete-event-subscription-result ([input] (response-delete-event-subscription-result nil input)) ([resultWrapper442528 input] (clojure.core/let [rawinput442527 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442529 {"EventSubscription" (portkey.aws/search-for-tag rawinput442527 "EventSubscription" :flattened? nil :result-wrapper resultWrapper442528)}] (clojure.core/cond-> {} (letvar442529 "EventSubscription") (clojure.core/assoc :event-subscription (deser-event-subscription (clojure.core/get-in letvar442529 ["EventSubscription" :content])))))))

(clojure.core/defn- response-pending-maintenance-actions-message ([input] (response-pending-maintenance-actions-message nil input)) ([resultWrapper442531 input] (clojure.core/let [rawinput442530 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442532 {"PendingMaintenanceActions" (portkey.aws/search-for-tag rawinput442530 "PendingMaintenanceActions" :flattened? nil :result-wrapper resultWrapper442531), "Marker" (portkey.aws/search-for-tag rawinput442530 "Marker" :flattened? nil :result-wrapper resultWrapper442531)}] (clojure.core/cond-> {} (letvar442532 "PendingMaintenanceActions") (clojure.core/assoc :pending-maintenance-actions (deser-pending-maintenance-actions (clojure.core/get-in letvar442532 ["PendingMaintenanceActions" :content]))) (letvar442532 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar442532 ["Marker" :content])))))))

(clojure.core/defn- response-db-subnet-group-quota-exceeded-fault ([input] (response-db-subnet-group-quota-exceeded-fault nil input)) ([resultWrapper442534 input] (clojure.core/let [rawinput442533 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442535 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-add-source-identifier-to-subscription-result ([input] (response-add-source-identifier-to-subscription-result nil input)) ([resultWrapper442537 input] (clojure.core/let [rawinput442536 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442538 {"EventSubscription" (portkey.aws/search-for-tag rawinput442536 "EventSubscription" :flattened? nil :result-wrapper resultWrapper442537)}] (clojure.core/cond-> {} (letvar442538 "EventSubscription") (clojure.core/assoc :event-subscription (deser-event-subscription (clojure.core/get-in letvar442538 ["EventSubscription" :content])))))))

(clojure.core/defn- response-db-cluster-parameter-groups-message ([input] (response-db-cluster-parameter-groups-message nil input)) ([resultWrapper442540 input] (clojure.core/let [rawinput442539 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442541 {"Marker" (portkey.aws/search-for-tag rawinput442539 "Marker" :flattened? nil :result-wrapper resultWrapper442540), "DBClusterParameterGroups" (portkey.aws/search-for-tag rawinput442539 "DBClusterParameterGroups" :flattened? nil :result-wrapper resultWrapper442540)}] (clojure.core/cond-> {} (letvar442541 "Marker") (clojure.core/assoc :marker (deser-string (clojure.core/get-in letvar442541 ["Marker" :content]))) (letvar442541 "DBClusterParameterGroups") (clojure.core/assoc :db-cluster-parameter-groups (deser-db-cluster-parameter-group-list (clojure.core/get-in letvar442541 ["DBClusterParameterGroups" :content])))))))

(clojure.core/defn- response-delete-db-cluster-result ([input] (response-delete-db-cluster-result nil input)) ([resultWrapper442543 input] (clojure.core/let [rawinput442542 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442544 {"DBCluster" (portkey.aws/search-for-tag rawinput442542 "DBCluster" :flattened? nil :result-wrapper resultWrapper442543)}] (clojure.core/cond-> {} (letvar442544 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar442544 ["DBCluster" :content])))))))

(clojure.core/defn- response-db-subnet-quota-exceeded-fault ([input] (response-db-subnet-quota-exceeded-fault nil input)) ([resultWrapper442546 input] (clojure.core/let [rawinput442545 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442547 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-snapshot-state-fault ([input] (response-invalid-db-snapshot-state-fault nil input)) ([resultWrapper442549 input] (clojure.core/let [rawinput442548 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442550 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-subnet-group-already-exists-fault ([input] (response-db-subnet-group-already-exists-fault nil input)) ([resultWrapper442552 input] (clojure.core/let [rawinput442551 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442553 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-db-snapshot-not-found-fault ([input] (response-db-snapshot-not-found-fault nil input)) ([resultWrapper442555 input] (clojure.core/let [rawinput442554 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442556 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-invalid-db-parameter-group-state-fault ([input] (response-invalid-db-parameter-group-state-fault nil input)) ([resultWrapper442558 input] (clojure.core/let [rawinput442557 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442559 {}] (clojure.core/cond-> {}))))

(clojure.core/defn- response-modify-db-cluster-result ([input] (response-modify-db-cluster-result nil input)) ([resultWrapper442561 input] (clojure.core/let [rawinput442560 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442562 {"DBCluster" (portkey.aws/search-for-tag rawinput442560 "DBCluster" :flattened? nil :result-wrapper resultWrapper442561)}] (clojure.core/cond-> {} (letvar442562 "DBCluster") (clojure.core/assoc :db-cluster (deser-db-cluster (clojure.core/get-in letvar442562 ["DBCluster" :content])))))))

(clojure.core/defn- response-db-security-group-not-found-fault ([input] (response-db-security-group-not-found-fault nil input)) ([resultWrapper442564 input] (clojure.core/let [rawinput442563 (clojure.core/some-> input :body portkey.aws/parse-xml-body) letvar442565 {}] (clojure.core/cond-> {}))))

(clojure.spec.alpha/def :portkey.aws.neptune/source-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/vpc-security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/vpc-security-group-membership))

(clojure.spec.alpha/def :portkey.aws.neptune/subnet-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune/restore-db-cluster-to-point-in-time-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.neptune.pending-maintenance-action/action (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-maintenance-action/auto-applied-after-date (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-maintenance-action/forced-apply-date (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-maintenance-action/opt-in-status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-maintenance-action/current-apply-date (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-maintenance-action/description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/pending-maintenance-action (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.pending-maintenance-action/action :portkey.aws.neptune.pending-maintenance-action/auto-applied-after-date :portkey.aws.neptune.pending-maintenance-action/forced-apply-date :portkey.aws.neptune.pending-maintenance-action/opt-in-status :portkey.aws.neptune.pending-maintenance-action/current-apply-date :portkey.aws.neptune.pending-maintenance-action/description]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-instance-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/read-replica-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune/remove-source-identifier-from-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.neptune/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.neptune/snapshot-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/filter-value-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune/parameters-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/parameter))

(clojure.spec.alpha/def :portkey.aws.neptune/domain-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/copy-db-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.neptune.double-range/from (clojure.spec.alpha/and :portkey.aws.neptune/double))
(clojure.spec.alpha/def :portkey.aws.neptune.double-range/to (clojure.spec.alpha/and :portkey.aws.neptune/double))
(clojure.spec.alpha/def :portkey.aws.neptune/double-range (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.double-range/from :portkey.aws.neptune.double-range/to]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-snapshot-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-snapshots-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-snapshots-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-snapshots-message/snapshot-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-snapshots-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-snapshots-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-snapshots-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-snapshots-message/include-shared (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-snapshots-message/include-public (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-db-cluster-snapshots-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.describe-db-cluster-snapshots-message/db-cluster-identifier :portkey.aws.neptune.describe-db-cluster-snapshots-message/db-cluster-snapshot-identifier :portkey.aws.neptune.describe-db-cluster-snapshots-message/snapshot-type :portkey.aws.neptune.describe-db-cluster-snapshots-message/filters :portkey.aws.neptune.describe-db-cluster-snapshots-message/max-records :portkey.aws.neptune.describe-db-cluster-snapshots-message/marker :portkey.aws.neptune.describe-db-cluster-snapshots-message/include-shared :portkey.aws.neptune.describe-db-cluster-snapshots-message/include-public]))

(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-parameter-group-message/source-db-parameter-group-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-parameter-group-message/target-db-parameter-group-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-parameter-group-message/target-db-parameter-group-description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune/copy-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.copy-db-parameter-group-message/source-db-parameter-group-identifier :portkey.aws.neptune.copy-db-parameter-group-message/target-db-parameter-group-identifier :portkey.aws.neptune.copy-db-parameter-group-message/target-db-parameter-group-description] :opt-un [:portkey.aws.neptune.copy-db-parameter-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-role/role-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-role/status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-role (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster-role/role-arn :portkey.aws.neptune.db-cluster-role/status]))

(clojure.spec.alpha/def :portkey.aws.neptune.filter/name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.filter/values (clojure.spec.alpha/and :portkey.aws.neptune/filter-value-list))
(clojure.spec.alpha/def :portkey.aws.neptune/filter (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.filter/name :portkey.aws.neptune.filter/values] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/pending-maintenance-action-details (clojure.spec.alpha/coll-of :portkey.aws.neptune/pending-maintenance-action))

(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-cluster-snapshot-message/source-db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-cluster-snapshot-message/target-db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-cluster-snapshot-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-cluster-snapshot-message/pre-signed-url (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-cluster-snapshot-message/copy-tags (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-cluster-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune/copy-db-cluster-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.copy-db-cluster-snapshot-message/source-db-cluster-snapshot-identifier :portkey.aws.neptune.copy-db-cluster-snapshot-message/target-db-cluster-snapshot-identifier] :opt-un [:portkey.aws.neptune.copy-db-cluster-snapshot-message/kms-key-id :portkey.aws.neptune.copy-db-cluster-snapshot-message/pre-signed-url :portkey.aws.neptune.copy-db-cluster-snapshot-message/copy-tags :portkey.aws.neptune.copy-db-cluster-snapshot-message/tags]))

(clojure.spec.alpha/def :portkey.aws.neptune/promote-read-replica-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.neptune.db-parameter-group-status/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-parameter-group-status/parameter-apply-status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-parameter-group-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-parameter-group-status/db-parameter-group-name :portkey.aws.neptune.db-parameter-group-status/parameter-apply-status]))

(clojure.spec.alpha/def :portkey.aws.neptune/valid-storage-options-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/valid-storage-options))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-instances-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-instances-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-instances-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-instances-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-db-instances-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.describe-db-instances-message/db-instance-identifier :portkey.aws.neptune.describe-db-instances-message/filters :portkey.aws.neptune.describe-db-instances-message/max-records :portkey.aws.neptune.describe-db-instances-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune.reset-db-cluster-parameter-group-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.reset-db-cluster-parameter-group-message/reset-all-parameters (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.reset-db-cluster-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.neptune/parameters-list))
(clojure.spec.alpha/def :portkey.aws.neptune/reset-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.reset-db-cluster-parameter-group-message/db-cluster-parameter-group-name] :opt-un [:portkey.aws.neptune.reset-db-cluster-parameter-group-message/reset-all-parameters :portkey.aws.neptune.reset-db-cluster-parameter-group-message/parameters]))

(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-cluster-parameter-group-message/source-db-cluster-parameter-group-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-cluster-parameter-group-message/target-db-cluster-parameter-group-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-cluster-parameter-group-message/target-db-cluster-parameter-group-description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.copy-db-cluster-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune/copy-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.copy-db-cluster-parameter-group-message/source-db-cluster-parameter-group-identifier :portkey.aws.neptune.copy-db-cluster-parameter-group-message/target-db-cluster-parameter-group-identifier :portkey.aws.neptune.copy-db-cluster-parameter-group-message/target-db-cluster-parameter-group-description] :opt-un [:portkey.aws.neptune.copy-db-cluster-parameter-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-parameter-group-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.neptune/parameters-list))
(clojure.spec.alpha/def :portkey.aws.neptune/modify-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.modify-db-cluster-parameter-group-message/db-cluster-parameter-group-name :portkey.aws.neptune.modify-db-cluster-parameter-group-message/parameters] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.db-parameter-group-details/parameters (clojure.spec.alpha/and :portkey.aws.neptune/parameters-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-parameter-group-details/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-parameter-group-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-parameter-group-details/parameters :portkey.aws.neptune.db-parameter-group-details/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune.delete-db-parameter-group-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/delete-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.delete-db-parameter-group-message/db-parameter-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/double-optional clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.neptune/source-ids-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-engine-default-parameters-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-engine-default-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-engine-default-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-engine-default-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-engine-default-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.describe-engine-default-parameters-message/db-parameter-group-family] :opt-un [:portkey.aws.neptune.describe-engine-default-parameters-message/filters :portkey.aws.neptune.describe-engine-default-parameters-message/max-records :portkey.aws.neptune.describe-engine-default-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/create-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.neptune/invalid-db-instance-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/sns-no-authorization-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-parameter-group-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-parameter-group))

(clojure.spec.alpha/def :portkey.aws.neptune/reboot-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-instance]))

(clojure.spec.alpha/def :portkey.aws.neptune/instance-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-parameter-group-status-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-parameter-group-status))

(clojure.spec.alpha/def :portkey.aws.neptune.db-parameter-group-name-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-parameter-group-name-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-parameter-group-name-message/db-parameter-group-name]))

(clojure.spec.alpha/def :portkey.aws.neptune/apply-pending-maintenance-action-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/resource-pending-maintenance-actions]))

(clojure.spec.alpha/def :portkey.aws.neptune/double-range-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/double-range))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-engine-versions-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-engine-versions-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-engine-versions-message/list-supported-character-sets (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-engine-versions-message/default-only (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-engine-versions-message/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-engine-versions-message/list-supported-timezones (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-engine-versions-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-engine-versions-message/engine (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-engine-versions-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-db-engine-versions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.describe-db-engine-versions-message/max-records :portkey.aws.neptune.describe-db-engine-versions-message/marker :portkey.aws.neptune.describe-db-engine-versions-message/list-supported-character-sets :portkey.aws.neptune.describe-db-engine-versions-message/default-only :portkey.aws.neptune.describe-db-engine-versions-message/engine-version :portkey.aws.neptune.describe-db-engine-versions-message/list-supported-timezones :portkey.aws.neptune.describe-db-engine-versions-message/filters :portkey.aws.neptune.describe-db-engine-versions-message/engine :portkey.aws.neptune.describe-db-engine-versions-message/db-parameter-group-family]))

(clojure.spec.alpha/def :portkey.aws.neptune.promote-read-replica-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/promote-read-replica-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.promote-read-replica-db-cluster-message/db-cluster-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-parameter-group-name-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-parameter-group-name-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster-parameter-group-name-message/db-cluster-parameter-group-name]))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-event-subscriptions-message/subscription-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-event-subscriptions-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-event-subscriptions-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-event-subscriptions-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-event-subscriptions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.describe-event-subscriptions-message/subscription-name :portkey.aws.neptune.describe-event-subscriptions-message/filters :portkey.aws.neptune.describe-event-subscriptions-message/max-records :portkey.aws.neptune.describe-event-subscriptions-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-subnet-groups-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-subnet-groups-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-subnet-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-subnet-groups-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-db-subnet-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.describe-db-subnet-groups-message/db-subnet-group-name :portkey.aws.neptune.describe-db-subnet-groups-message/filters :portkey.aws.neptune.describe-db-subnet-groups-message/max-records :portkey.aws.neptune.describe-db-subnet-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune/pending-maintenance-actions (clojure.spec.alpha/coll-of :portkey.aws.neptune/resource-pending-maintenance-actions))

(clojure.spec.alpha/def :portkey.aws.neptune/restore-db-cluster-from-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.neptune.subnet/subnet-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.subnet/subnet-availability-zone (clojure.spec.alpha/and :portkey.aws.neptune/availability-zone))
(clojure.spec.alpha/def :portkey.aws.neptune.subnet/subnet-status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/subnet (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.subnet/subnet-identifier :portkey.aws.neptune.subnet/subnet-availability-zone :portkey.aws.neptune.subnet/subnet-status]))

(clojure.spec.alpha/def :portkey.aws.neptune/option-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.db-subnet-group-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-subnet-group-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-subnet-group-message/marker :portkey.aws.neptune/db-subnet-groups]))

(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/option-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/restore-to-time (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.neptune/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/source-db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/port (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/restore-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/use-latest-restorable-time (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune/restore-db-cluster-to-point-in-time-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/db-cluster-identifier :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/source-db-cluster-identifier] :opt-un [:portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/option-group-name :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/enable-iam-database-authentication :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/restore-to-time :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/tags :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/vpc-security-group-ids :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/db-subnet-group-name :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/port :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/kms-key-id :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/restore-type :portkey.aws.neptune.restore-db-cluster-to-point-in-time-message/use-latest-restorable-time]))

(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/snapshot-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/option-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/database-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.neptune/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/port (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/engine (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/restore-db-cluster-from-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.restore-db-cluster-from-snapshot-message/db-cluster-identifier :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/snapshot-identifier :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/engine] :opt-un [:portkey.aws.neptune.restore-db-cluster-from-snapshot-message/option-group-name :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/enable-iam-database-authentication :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/database-name :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/tags :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/vpc-security-group-ids :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/engine-version :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/db-subnet-group-name :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/port :portkey.aws.neptune.restore-db-cluster-from-snapshot-message/kms-key-id :portkey.aws.neptune/availability-zones]))

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/snapshot-create-time (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/snapshot-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/license-model (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/allocated-storage (clojure.spec.alpha/and :portkey.aws.neptune/integer))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/master-username (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/storage-encrypted (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/port (clojure.spec.alpha/and :portkey.aws.neptune/integer))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/vpc-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/kms-key-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/cluster-create-time (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/iam-database-authentication-enabled (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/engine (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/source-db-cluster-snapshot-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/db-cluster-snapshot-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot/percent-progress (clojure.spec.alpha/and :portkey.aws.neptune/integer))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-snapshot (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster-snapshot/snapshot-create-time :portkey.aws.neptune.db-cluster-snapshot/db-cluster-snapshot-identifier :portkey.aws.neptune.db-cluster-snapshot/status :portkey.aws.neptune.db-cluster-snapshot/snapshot-type :portkey.aws.neptune.db-cluster-snapshot/license-model :portkey.aws.neptune.db-cluster-snapshot/allocated-storage :portkey.aws.neptune.db-cluster-snapshot/master-username :portkey.aws.neptune.db-cluster-snapshot/engine-version :portkey.aws.neptune.db-cluster-snapshot/storage-encrypted :portkey.aws.neptune.db-cluster-snapshot/port :portkey.aws.neptune.db-cluster-snapshot/vpc-id :portkey.aws.neptune.db-cluster-snapshot/kms-key-id :portkey.aws.neptune.db-cluster-snapshot/cluster-create-time :portkey.aws.neptune.db-cluster-snapshot/iam-database-authentication-enabled :portkey.aws.neptune.db-cluster-snapshot/engine :portkey.aws.neptune.db-cluster-snapshot/source-db-cluster-snapshot-arn :portkey.aws.neptune/availability-zones :portkey.aws.neptune.db-cluster-snapshot/db-cluster-identifier :portkey.aws.neptune.db-cluster-snapshot/db-cluster-snapshot-arn :portkey.aws.neptune.db-cluster-snapshot/percent-progress]))

(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-subnet-group-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-subnet-group-message/db-subnet-group-description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.neptune/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.neptune/modify-db-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.modify-db-subnet-group-message/db-subnet-group-name :portkey.aws.neptune.modify-db-subnet-group-message/subnet-ids] :opt-un [:portkey.aws.neptune.modify-db-subnet-group-message/db-subnet-group-description]))

(clojure.spec.alpha/def :portkey.aws.neptune.pending-cloudwatch-logs-exports/log-types-to-enable (clojure.spec.alpha/and :portkey.aws.neptune/log-type-list))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-cloudwatch-logs-exports/log-types-to-disable (clojure.spec.alpha/and :portkey.aws.neptune/log-type-list))
(clojure.spec.alpha/def :portkey.aws.neptune/pending-cloudwatch-logs-exports (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.pending-cloudwatch-logs-exports/log-types-to-enable :portkey.aws.neptune.pending-cloudwatch-logs-exports/log-types-to-disable]))

(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/option-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/db-security-groups (clojure.spec.alpha/and :portkey.aws.neptune/db-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/promotion-tier (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/character-set-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/domain-iam-role-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/enable-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.neptune/log-type-list))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/db-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.neptune/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/availability-zone (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/master-user-password (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/license-model (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/domain (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/allocated-storage (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/monitoring-interval (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/timezone (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/master-username (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/storage-encrypted (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/port (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/iops (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/tde-credential-password (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/storage-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/engine (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/enable-performance-insights (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/multi-az (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/performance-insights-kms-key-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-instance-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/create-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.create-db-instance-message/db-instance-identifier :portkey.aws.neptune.create-db-instance-message/db-instance-class :portkey.aws.neptune.create-db-instance-message/engine] :opt-un [:portkey.aws.neptune.create-db-instance-message/backup-retention-period :portkey.aws.neptune.create-db-instance-message/option-group-name :portkey.aws.neptune.create-db-instance-message/db-security-groups :portkey.aws.neptune.create-db-instance-message/promotion-tier :portkey.aws.neptune.create-db-instance-message/character-set-name :portkey.aws.neptune.create-db-instance-message/enable-iam-database-authentication :portkey.aws.neptune.create-db-instance-message/publicly-accessible :portkey.aws.neptune.create-db-instance-message/domain-iam-role-name :portkey.aws.neptune.create-db-instance-message/preferred-maintenance-window :portkey.aws.neptune.create-db-instance-message/copy-tags-to-snapshot :portkey.aws.neptune.create-db-instance-message/enable-cloudwatch-logs-exports :portkey.aws.neptune.create-db-instance-message/auto-minor-version-upgrade :portkey.aws.neptune.create-db-instance-message/tags :portkey.aws.neptune.create-db-instance-message/db-name :portkey.aws.neptune.create-db-instance-message/vpc-security-group-ids :portkey.aws.neptune.create-db-instance-message/availability-zone :portkey.aws.neptune.create-db-instance-message/master-user-password :portkey.aws.neptune.create-db-instance-message/license-model :portkey.aws.neptune.create-db-instance-message/domain :portkey.aws.neptune.create-db-instance-message/allocated-storage :portkey.aws.neptune.create-db-instance-message/monitoring-interval :portkey.aws.neptune.create-db-instance-message/timezone :portkey.aws.neptune.create-db-instance-message/master-username :portkey.aws.neptune.create-db-instance-message/engine-version :portkey.aws.neptune.create-db-instance-message/storage-encrypted :portkey.aws.neptune.create-db-instance-message/db-subnet-group-name :portkey.aws.neptune.create-db-instance-message/port :portkey.aws.neptune.create-db-instance-message/kms-key-id :portkey.aws.neptune.create-db-instance-message/iops :portkey.aws.neptune.create-db-instance-message/tde-credential-password :portkey.aws.neptune.create-db-instance-message/storage-type :portkey.aws.neptune.create-db-instance-message/db-parameter-group-name :portkey.aws.neptune.create-db-instance-message/enable-performance-insights :portkey.aws.neptune.create-db-instance-message/monitoring-role-arn :portkey.aws.neptune.create-db-instance-message/tde-credential-arn :portkey.aws.neptune.create-db-instance-message/multi-az :portkey.aws.neptune.create-db-instance-message/performance-insights-kms-key-id :portkey.aws.neptune.create-db-instance-message/db-cluster-identifier :portkey.aws.neptune.create-db-instance-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.neptune/key-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-cluster))

(clojure.spec.alpha/def :portkey.aws.neptune/db-engine-version-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-engine-version))

(clojure.spec.alpha/def :portkey.aws.neptune.event-subscription/event-subscription-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.event-subscription/customer-aws-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.event-subscription/source-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.event-subscription/enabled (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.event-subscription/status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.event-subscription/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.event-subscription/cust-subscription-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.event-subscription/subscription-creation-time (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/event-subscription (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/source-ids-list :portkey.aws.neptune.event-subscription/event-subscription-arn :portkey.aws.neptune.event-subscription/customer-aws-id :portkey.aws.neptune.event-subscription/source-type :portkey.aws.neptune.event-subscription/enabled :portkey.aws.neptune.event-subscription/status :portkey.aws.neptune.event-subscription/sns-topic-arn :portkey.aws.neptune/event-categories-list :portkey.aws.neptune.event-subscription/cust-subscription-id :portkey.aws.neptune.event-subscription/subscription-creation-time]))

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-member/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-member/is-cluster-writer (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-member/db-cluster-parameter-group-status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-member/promotion-tier (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-member (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster-member/db-instance-identifier :portkey.aws.neptune.db-cluster-member/is-cluster-writer :portkey.aws.neptune.db-cluster-member/db-cluster-parameter-group-status :portkey.aws.neptune.db-cluster-member/promotion-tier]))

(clojure.spec.alpha/def :portkey.aws.neptune/invalid-vpc-network-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-role-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-instance-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.add-role-to-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.add-role-to-db-cluster-message/role-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/add-role-to-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.add-role-to-db-cluster-message/db-cluster-identifier :portkey.aws.neptune.add-role-to-db-cluster-message/role-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.delete-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.delete-db-instance-message/skip-final-snapshot (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.delete-db-instance-message/final-db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/delete-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.delete-db-instance-message/db-instance-identifier] :opt-un [:portkey.aws.neptune.delete-db-instance-message/skip-final-snapshot :portkey.aws.neptune.delete-db-instance-message/final-db-snapshot-identifier]))

(clojure.spec.alpha/def :portkey.aws.neptune/shared-snapshot-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/certificate-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/delete-db-cluster-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster-snapshot]))

(clojure.spec.alpha/def :portkey.aws.neptune/copy-db-cluster-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster-snapshot]))

(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-options-message/orderable-db-instance-options (clojure.spec.alpha/and :portkey.aws.neptune/orderable-db-instance-options-list))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-options-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/orderable-db-instance-options-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.orderable-db-instance-options-message/orderable-db-instance-options :portkey.aws.neptune.orderable-db-instance-options-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune/event-categories-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/event-categories-map-list]))

(clojure.spec.alpha/def :portkey.aws.neptune.resource-pending-maintenance-actions/resource-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/resource-pending-maintenance-actions (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.resource-pending-maintenance-actions/resource-identifier :portkey.aws.neptune/pending-maintenance-action-details]))

(clojure.spec.alpha/def :portkey.aws.neptune.delete-db-cluster-snapshot-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/delete-db-cluster-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.delete-db-cluster-snapshot-message/db-cluster-snapshot-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.apply-pending-maintenance-action-message/resource-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.apply-pending-maintenance-action-message/apply-action (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.apply-pending-maintenance-action-message/opt-in-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/apply-pending-maintenance-action-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.apply-pending-maintenance-action-message/resource-identifier :portkey.aws.neptune.apply-pending-maintenance-action-message/apply-action :portkey.aws.neptune.apply-pending-maintenance-action-message/opt-in-type] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-events-message/end-time (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-events-message/start-time (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-events-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-events-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-events-message/duration (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-events-message/event-categories (clojure.spec.alpha/and :portkey.aws.neptune/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-events-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-events-message/source-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-events-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.describe-events-message/end-time :portkey.aws.neptune.describe-events-message/start-time :portkey.aws.neptune.describe-events-message/max-records :portkey.aws.neptune.describe-events-message/marker :portkey.aws.neptune/source-type :portkey.aws.neptune.describe-events-message/duration :portkey.aws.neptune.describe-events-message/event-categories :portkey.aws.neptune.describe-events-message/filters :portkey.aws.neptune.describe-events-message/source-identifier]))

(clojure.spec.alpha/def :portkey.aws.neptune/subscription-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/backup-retention-period (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/replication-source-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/earliest-restorable-time (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/character-set-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/database-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/clone-group-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/allocated-storage (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/master-username (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/hosted-zone-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/storage-encrypted (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/port (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/db-cluster-resource-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/db-cluster-members (clojure.spec.alpha/and :portkey.aws.neptune/db-cluster-member-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/kms-key-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/cluster-create-time (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/read-replica-identifiers (clojure.spec.alpha/and :portkey.aws.neptune/read-replica-identifier-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/db-cluster-parameter-group (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/endpoint (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/iam-database-authentication-enabled (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/db-cluster-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/vpc-security-groups (clojure.spec.alpha/and :portkey.aws.neptune/vpc-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/engine (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/reader-endpoint (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/associated-roles (clojure.spec.alpha/and :portkey.aws.neptune/db-cluster-roles))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/multi-az (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/percent-progress (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/latest-restorable-time (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster/db-subnet-group (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster/backup-retention-period :portkey.aws.neptune.db-cluster/replication-source-identifier :portkey.aws.neptune.db-cluster/earliest-restorable-time :portkey.aws.neptune.db-cluster/character-set-name :portkey.aws.neptune.db-cluster/database-name :portkey.aws.neptune.db-cluster/preferred-maintenance-window :portkey.aws.neptune.db-cluster/clone-group-id :portkey.aws.neptune.db-cluster/status :portkey.aws.neptune.db-cluster/allocated-storage :portkey.aws.neptune.db-cluster/master-username :portkey.aws.neptune.db-cluster/engine-version :portkey.aws.neptune.db-cluster/hosted-zone-id :portkey.aws.neptune.db-cluster/storage-encrypted :portkey.aws.neptune.db-cluster/port :portkey.aws.neptune.db-cluster/db-cluster-resource-id :portkey.aws.neptune.db-cluster/db-cluster-members :portkey.aws.neptune.db-cluster/kms-key-id :portkey.aws.neptune.db-cluster/cluster-create-time :portkey.aws.neptune.db-cluster/read-replica-identifiers :portkey.aws.neptune.db-cluster/db-cluster-parameter-group :portkey.aws.neptune.db-cluster/endpoint :portkey.aws.neptune.db-cluster/iam-database-authentication-enabled :portkey.aws.neptune.db-cluster/db-cluster-arn :portkey.aws.neptune.db-cluster/vpc-security-groups :portkey.aws.neptune.db-cluster/engine :portkey.aws.neptune/db-cluster-option-group-memberships :portkey.aws.neptune/availability-zones :portkey.aws.neptune.db-cluster/reader-endpoint :portkey.aws.neptune.db-cluster/associated-roles :portkey.aws.neptune.db-cluster/multi-az :portkey.aws.neptune.db-cluster/db-cluster-identifier :portkey.aws.neptune.db-cluster/preferred-backup-window :portkey.aws.neptune.db-cluster/percent-progress :portkey.aws.neptune.db-cluster/latest-restorable-time :portkey.aws.neptune.db-cluster/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-pending-maintenance-actions-message/resource-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-pending-maintenance-actions-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-pending-maintenance-actions-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-pending-maintenance-actions-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-pending-maintenance-actions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.describe-pending-maintenance-actions-message/resource-identifier :portkey.aws.neptune.describe-pending-maintenance-actions-message/filters :portkey.aws.neptune.describe-pending-maintenance-actions-message/marker :portkey.aws.neptune.describe-pending-maintenance-actions-message/max-records]))

(clojure.spec.alpha/def :portkey.aws.neptune/invalid-db-subnet-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.db-instance-status-info/status-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance-status-info/normal (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance-status-info/status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance-status-info/message (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-instance-status-info (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-instance-status-info/status-type :portkey.aws.neptune.db-instance-status-info/normal :portkey.aws.neptune.db-instance-status-info/status :portkey.aws.neptune.db-instance-status-info/message]))

(clojure.spec.alpha/def :portkey.aws.neptune/sns-topic-arn-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.remove-role-from-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.remove-role-from-db-cluster-message/role-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/remove-role-from-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.remove-role-from-db-cluster-message/db-cluster-identifier :portkey.aws.neptune.remove-role-from-db-cluster-message/role-arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/event-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/event))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-engine-default-cluster-parameters-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-engine-default-cluster-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-engine-default-cluster-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-engine-default-cluster-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-engine-default-cluster-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.describe-engine-default-cluster-parameters-message/db-parameter-group-family] :opt-un [:portkey.aws.neptune.describe-engine-default-cluster-parameters-message/filters :portkey.aws.neptune.describe-engine-default-cluster-parameters-message/max-records :portkey.aws.neptune.describe-engine-default-cluster-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.events-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.events-message/events (clojure.spec.alpha/and :portkey.aws.neptune/event-list))
(clojure.spec.alpha/def :portkey.aws.neptune/events-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.events-message/marker :portkey.aws.neptune.events-message/events]))

(clojure.spec.alpha/def :portkey.aws.neptune/source-type #{:dbcluster "db-security-group" "db-cluster" :dbsecuritygroup :dbclustersnapshot "db-instance" "db-cluster-snapshot" :dbparametergroup "db-parameter-group" "db-snapshot" :dbsnapshot :dbinstance})

(clojure.spec.alpha/def :portkey.aws.neptune/orderable-db-instance-options-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/orderable-db-instance-option))

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot-message/db-cluster-snapshots (clojure.spec.alpha/and :portkey.aws.neptune/db-cluster-snapshot-list))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-snapshot-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster-snapshot-message/marker :portkey.aws.neptune.db-cluster-snapshot-message/db-cluster-snapshots]))

(clojure.spec.alpha/def :portkey.aws.neptune/subscription-category-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.event/source-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.event/message (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.event/event-categories (clojure.spec.alpha/and :portkey.aws.neptune/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.neptune.event/date (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.event/source-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/event (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.event/source-identifier :portkey.aws.neptune/source-type :portkey.aws.neptune.event/message :portkey.aws.neptune.event/event-categories :portkey.aws.neptune.event/date :portkey.aws.neptune.event/source-arn]))

(clojure.spec.alpha/def :portkey.aws.neptune/availability-zone-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/availability-zone))

(clojure.spec.alpha/def :portkey.aws.neptune.reset-db-parameter-group-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.reset-db-parameter-group-message/reset-all-parameters (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.reset-db-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.neptune/parameters-list))
(clojure.spec.alpha/def :portkey.aws.neptune/reset-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.reset-db-parameter-group-message/db-parameter-group-name] :opt-un [:portkey.aws.neptune.reset-db-parameter-group-message/reset-all-parameters :portkey.aws.neptune.reset-db-parameter-group-message/parameters]))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-parameter-groups-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-parameter-groups-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-parameter-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-db-cluster-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.describe-db-cluster-parameter-groups-message/db-cluster-parameter-group-name :portkey.aws.neptune.describe-db-cluster-parameter-groups-message/filters :portkey.aws.neptune.describe-db-cluster-parameter-groups-message/max-records :portkey.aws.neptune.describe-db-cluster-parameter-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune.availability-zone/name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/availability-zone (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.availability-zone/name]))

(clojure.spec.alpha/def :portkey.aws.neptune.event-subscriptions-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/event-subscriptions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.event-subscriptions-message/marker :portkey.aws.neptune/event-subscriptions-list]))

(clojure.spec.alpha/def :portkey.aws.neptune/create-db-subnet-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.neptune/create-event-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-parameter-group-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-cluster-parameter-group))

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-parameter-group-details/parameters (clojure.spec.alpha/and :portkey.aws.neptune/parameters-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-parameter-group-details/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-parameter-group-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster-parameter-group-details/parameters :portkey.aws.neptune.db-cluster-parameter-group-details/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-orderable-db-instance-options-message/engine (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-orderable-db-instance-options-message/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-orderable-db-instance-options-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-orderable-db-instance-options-message/license-model (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-orderable-db-instance-options-message/vpc (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-orderable-db-instance-options-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-orderable-db-instance-options-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-orderable-db-instance-options-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-orderable-db-instance-options-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.describe-orderable-db-instance-options-message/engine] :opt-un [:portkey.aws.neptune.describe-orderable-db-instance-options-message/engine-version :portkey.aws.neptune.describe-orderable-db-instance-options-message/db-instance-class :portkey.aws.neptune.describe-orderable-db-instance-options-message/license-model :portkey.aws.neptune.describe-orderable-db-instance-options-message/vpc :portkey.aws.neptune.describe-orderable-db-instance-options-message/filters :portkey.aws.neptune.describe-orderable-db-instance-options-message/max-records :portkey.aws.neptune.describe-orderable-db-instance-options-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune.create-db-subnet-group-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-subnet-group-message/db-subnet-group-description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-subnet-group-message/subnet-ids (clojure.spec.alpha/and :portkey.aws.neptune/subnet-identifier-list))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-subnet-group-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune/create-db-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.create-db-subnet-group-message/db-subnet-group-name :portkey.aws.neptune.create-db-subnet-group-message/db-subnet-group-description :portkey.aws.neptune.create-db-subnet-group-message/subnet-ids] :opt-un [:portkey.aws.neptune.create-db-subnet-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.neptune/invalid-db-security-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-member-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-cluster-member))

(clojure.spec.alpha/def :portkey.aws.neptune.delete-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/delete-event-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.delete-event-subscription-message/subscription-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/storage-type-not-supported-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-role-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/read-replica-db-instance-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-parameter-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-subnet-group-does-not-cover-enough-a-zs (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.db-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-parameter-groups-message/db-parameter-groups (clojure.spec.alpha/and :portkey.aws.neptune/db-parameter-group-list))
(clojure.spec.alpha/def :portkey.aws.neptune/db-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-parameter-groups-message/marker :portkey.aws.neptune.db-parameter-groups-message/db-parameter-groups]))

(clojure.spec.alpha/def :portkey.aws.neptune/describe-engine-default-parameters-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/engine-defaults]))

(clojure.spec.alpha/def :portkey.aws.neptune/valid-upgrade-target-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/upgrade-target))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-snapshot-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/authorization-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-role-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.range/from (clojure.spec.alpha/and :portkey.aws.neptune/integer))
(clojure.spec.alpha/def :portkey.aws.neptune.range/to (clojure.spec.alpha/and :portkey.aws.neptune/integer))
(clojure.spec.alpha/def :portkey.aws.neptune.range/step (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune/range (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.range/from :portkey.aws.neptune.range/to :portkey.aws.neptune.range/step]))

(clojure.spec.alpha/def :portkey.aws.neptune/create-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-instance]))

(clojure.spec.alpha/def :portkey.aws.neptune/copy-db-cluster-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.neptune/subnet-already-in-use (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/insufficient-storage-cluster-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-snapshot-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/invalid-db-cluster-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-roles (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-cluster-role))

(clojure.spec.alpha/def :portkey.aws.neptune/modify-db-subnet-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.neptune/invalid-subnet (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/tag-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/tag))

(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/option-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/new-db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.neptune/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/master-user-password (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/port (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/modify-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.modify-db-cluster-message/db-cluster-identifier] :opt-un [:portkey.aws.neptune.modify-db-cluster-message/backup-retention-period :portkey.aws.neptune.modify-db-cluster-message/option-group-name :portkey.aws.neptune.modify-db-cluster-message/enable-iam-database-authentication :portkey.aws.neptune.modify-db-cluster-message/new-db-cluster-identifier :portkey.aws.neptune.modify-db-cluster-message/preferred-maintenance-window :portkey.aws.neptune.modify-db-cluster-message/vpc-security-group-ids :portkey.aws.neptune.modify-db-cluster-message/db-cluster-parameter-group-name :portkey.aws.neptune.modify-db-cluster-message/master-user-password :portkey.aws.neptune.modify-db-cluster-message/engine-version :portkey.aws.neptune.modify-db-cluster-message/port :portkey.aws.neptune.modify-db-cluster-message/apply-immediately :portkey.aws.neptune.modify-db-cluster-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.neptune.timezone/timezone-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/timezone (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.timezone/timezone-name]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-snapshot-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-cluster-snapshot))

(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version/default-character-set (clojure.spec.alpha/and :portkey.aws.neptune/character-set))
(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version/db-engine-description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version/supported-timezones (clojure.spec.alpha/and :portkey.aws.neptune/supported-timezones-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version/supports-read-replica (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version/db-engine-version-description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version/valid-upgrade-target (clojure.spec.alpha/and :portkey.aws.neptune/valid-upgrade-target-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version/supported-character-sets (clojure.spec.alpha/and :portkey.aws.neptune/supported-character-sets-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version/supports-log-exports-to-cloudwatch-logs (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version/engine (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version/exportable-log-types (clojure.spec.alpha/and :portkey.aws.neptune/log-type-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-engine-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-engine-version/default-character-set :portkey.aws.neptune.db-engine-version/db-engine-description :portkey.aws.neptune.db-engine-version/supported-timezones :portkey.aws.neptune.db-engine-version/supports-read-replica :portkey.aws.neptune.db-engine-version/db-engine-version-description :portkey.aws.neptune.db-engine-version/valid-upgrade-target :portkey.aws.neptune.db-engine-version/engine-version :portkey.aws.neptune.db-engine-version/supported-character-sets :portkey.aws.neptune.db-engine-version/supports-log-exports-to-cloudwatch-logs :portkey.aws.neptune.db-engine-version/engine :portkey.aws.neptune.db-engine-version/exportable-log-types :portkey.aws.neptune.db-engine-version/db-parameter-group-family]))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-parameters-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-parameters-message/source (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-db-cluster-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.describe-db-cluster-parameters-message/db-cluster-parameter-group-name] :opt-un [:portkey.aws.neptune.describe-db-cluster-parameters-message/source :portkey.aws.neptune.describe-db-cluster-parameters-message/filters :portkey.aws.neptune.describe-db-cluster-parameters-message/max-records :portkey.aws.neptune.describe-db-cluster-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune/subscription-already-exist-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-upgrade-dependency-failure-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.add-source-identifier-to-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.add-source-identifier-to-subscription-message/source-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/add-source-identifier-to-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.add-source-identifier-to-subscription-message/subscription-name :portkey.aws.neptune.add-source-identifier-to-subscription-message/source-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/domain-membership-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/domain-membership))

(clojure.spec.alpha/def :portkey.aws.neptune.add-tags-to-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.add-tags-to-resource-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune/add-tags-to-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.add-tags-to-resource-message/resource-name :portkey.aws.neptune.add-tags-to-resource-message/tags] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.valid-storage-options/storage-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.valid-storage-options/storage-size (clojure.spec.alpha/and :portkey.aws.neptune/range-list))
(clojure.spec.alpha/def :portkey.aws.neptune.valid-storage-options/provisioned-iops (clojure.spec.alpha/and :portkey.aws.neptune/range-list))
(clojure.spec.alpha/def :portkey.aws.neptune.valid-storage-options/iops-to-storage-ratio (clojure.spec.alpha/and :portkey.aws.neptune/double-range-list))
(clojure.spec.alpha/def :portkey.aws.neptune/valid-storage-options (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.valid-storage-options/storage-type :portkey.aws.neptune.valid-storage-options/storage-size :portkey.aws.neptune.valid-storage-options/provisioned-iops :portkey.aws.neptune.valid-storage-options/iops-to-storage-ratio]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/invalid-event-subscription-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/tag-list-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/tag-list]))

(clojure.spec.alpha/def :portkey.aws.neptune.create-db-parameter-group-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-parameter-group-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-parameter-group-message/description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune/create-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.create-db-parameter-group-message/db-parameter-group-name :portkey.aws.neptune.create-db-parameter-group-message/db-parameter-group-family :portkey.aws.neptune.create-db-parameter-group-message/description] :opt-un [:portkey.aws.neptune.create-db-parameter-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.neptune.vpc-security-group-membership/vpc-security-group-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.vpc-security-group-membership/status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/vpc-security-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.vpc-security-group-membership/vpc-security-group-id :portkey.aws.neptune.vpc-security-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.neptune.valid-db-instance-modifications-message/storage (clojure.spec.alpha/and :portkey.aws.neptune/valid-storage-options-list))
(clojure.spec.alpha/def :portkey.aws.neptune/valid-db-instance-modifications-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.valid-db-instance-modifications-message/storage]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-subnet-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/provisioned-iops-not-available-in-az-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-parameter-group-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-parameter-group-message/parameters (clojure.spec.alpha/and :portkey.aws.neptune/parameters-list))
(clojure.spec.alpha/def :portkey.aws.neptune/modify-db-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.modify-db-parameter-group-message/db-parameter-group-name :portkey.aws.neptune.modify-db-parameter-group-message/parameters] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-valid-db-instance-modifications-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-valid-db-instance-modifications-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.describe-valid-db-instance-modifications-message/db-instance-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-snapshot-attribute-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-cluster-snapshot-attribute))

(clojure.spec.alpha/def :portkey.aws.neptune/modify-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-instance]))

(clojure.spec.alpha/def :portkey.aws.neptune.reboot-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.reboot-db-instance-message/force-failover (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune/reboot-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.reboot-db-instance-message/db-instance-identifier] :opt-un [:portkey.aws.neptune.reboot-db-instance-message/force-failover]))

(clojure.spec.alpha/def :portkey.aws.neptune/resource-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/option-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/option-group-membership))

(clojure.spec.alpha/def :portkey.aws.neptune.remove-source-identifier-from-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.remove-source-identifier-from-subscription-message/source-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/remove-source-identifier-from-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.remove-source-identifier-from-subscription-message/subscription-name :portkey.aws.neptune.remove-source-identifier-from-subscription-message/source-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/create-db-cluster-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.neptune.remove-tags-from-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.remove-tags-from-resource-message/tag-keys (clojure.spec.alpha/and :portkey.aws.neptune/key-list))
(clojure.spec.alpha/def :portkey.aws.neptune/remove-tags-from-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.remove-tags-from-resource-message/resource-name :portkey.aws.neptune.remove-tags-from-resource-message/tag-keys] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/event-categories-map-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/event-categories-map))

(clojure.spec.alpha/def :portkey.aws.neptune/integer clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.neptune/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-snapshot-attribute-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-snapshot-attribute-message/attribute-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-snapshot-attribute-message/values-to-add (clojure.spec.alpha/and :portkey.aws.neptune/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-cluster-snapshot-attribute-message/values-to-remove (clojure.spec.alpha/and :portkey.aws.neptune/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.neptune/modify-db-cluster-snapshot-attribute-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.modify-db-cluster-snapshot-attribute-message/db-cluster-snapshot-identifier :portkey.aws.neptune.modify-db-cluster-snapshot-attribute-message/attribute-name] :opt-un [:portkey.aws.neptune.modify-db-cluster-snapshot-attribute-message/values-to-add :portkey.aws.neptune.modify-db-cluster-snapshot-attribute-message/values-to-remove]))

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot-attribute/attribute-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot-attribute/attribute-values (clojure.spec.alpha/and :portkey.aws.neptune/attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-snapshot-attribute (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster-snapshot-attribute/attribute-name :portkey.aws.neptune.db-cluster-snapshot-attribute/attribute-values]))

(clojure.spec.alpha/def :portkey.aws.neptune.parameter/data-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.parameter/parameter-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.parameter/source (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.parameter/minimum-engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.parameter/allowed-values (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.parameter/apply-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.parameter/description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.parameter/is-modifiable (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.parameter/parameter-value (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/parameter (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.parameter/data-type :portkey.aws.neptune.parameter/parameter-name :portkey.aws.neptune.parameter/source :portkey.aws.neptune.parameter/minimum-engine-version :portkey.aws.neptune.parameter/allowed-values :portkey.aws.neptune.parameter/apply-type :portkey.aws.neptune.parameter/description :portkey.aws.neptune/apply-method :portkey.aws.neptune.parameter/is-modifiable :portkey.aws.neptune.parameter/parameter-value]))

(clojure.spec.alpha/def :portkey.aws.neptune/vpc-security-group-id-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune.db-security-group-membership/db-security-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-security-group-membership/status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-security-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-security-group-membership/db-security-group-name :portkey.aws.neptune.db-security-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.neptune/read-replica-db-cluster-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot-attributes-result/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-snapshot-attributes-result/db-cluster-snapshot-attributes (clojure.spec.alpha/and :portkey.aws.neptune/db-cluster-snapshot-attribute-list))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-snapshot-attributes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster-snapshot-attributes-result/db-cluster-snapshot-identifier :portkey.aws.neptune.db-cluster-snapshot-attributes-result/db-cluster-snapshot-attributes]))

(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/backup-retention-period (clojure.spec.alpha/and :portkey.aws.neptune/integer))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/db-security-groups (clojure.spec.alpha/and :portkey.aws.neptune/db-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/secondary-availability-zone (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/promotion-tier (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/character-set-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/publicly-accessible (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/read-replica-db-cluster-identifiers (clojure.spec.alpha/and :portkey.aws.neptune/read-replica-db-cluster-identifier-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/read-replica-db-instance-identifiers (clojure.spec.alpha/and :portkey.aws.neptune/read-replica-db-instance-identifier-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/domain-memberships (clojure.spec.alpha/and :portkey.aws.neptune/domain-membership-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/enabled-cloudwatch-logs-exports (clojure.spec.alpha/and :portkey.aws.neptune/log-type-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/db-instance-port (clojure.spec.alpha/and :portkey.aws.neptune/integer))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/db-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/db-instance-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/instance-create-time (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/availability-zone (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/read-replica-source-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/license-model (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/allocated-storage (clojure.spec.alpha/and :portkey.aws.neptune/integer))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/monitoring-interval (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/timezone (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/master-username (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/performance-insights-enabled (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/storage-encrypted (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/kms-key-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/dbi-resource-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/iops (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/storage-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/ca-certificate-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/option-group-memberships (clojure.spec.alpha/and :portkey.aws.neptune/option-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/iam-database-authentication-enabled (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/db-instance-class (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/db-parameter-groups (clojure.spec.alpha/and :portkey.aws.neptune/db-parameter-group-status-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/vpc-security-groups (clojure.spec.alpha/and :portkey.aws.neptune/vpc-security-group-membership-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/engine (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/db-instance-status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/status-infos (clojure.spec.alpha/and :portkey.aws.neptune/db-instance-status-info-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/enhanced-monitoring-resource-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/multi-az (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/performance-insights-kms-key-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance/latest-restorable-time (clojure.spec.alpha/and :portkey.aws.neptune/t-stamp))
(clojure.spec.alpha/def :portkey.aws.neptune/db-instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-instance/backup-retention-period :portkey.aws.neptune.db-instance/db-security-groups :portkey.aws.neptune.db-instance/secondary-availability-zone :portkey.aws.neptune.db-instance/promotion-tier :portkey.aws.neptune.db-instance/character-set-name :portkey.aws.neptune.db-instance/publicly-accessible :portkey.aws.neptune.db-instance/read-replica-db-cluster-identifiers :portkey.aws.neptune.db-instance/read-replica-db-instance-identifiers :portkey.aws.neptune.db-instance/domain-memberships :portkey.aws.neptune.db-instance/preferred-maintenance-window :portkey.aws.neptune.db-instance/copy-tags-to-snapshot :portkey.aws.neptune.db-instance/db-instance-identifier :portkey.aws.neptune.db-instance/enabled-cloudwatch-logs-exports :portkey.aws.neptune.db-instance/auto-minor-version-upgrade :portkey.aws.neptune.db-instance/db-instance-port :portkey.aws.neptune.db-instance/db-name :portkey.aws.neptune.db-instance/db-instance-arn :portkey.aws.neptune.db-instance/instance-create-time :portkey.aws.neptune.db-instance/availability-zone :portkey.aws.neptune.db-instance/read-replica-source-db-instance-identifier :portkey.aws.neptune.db-instance/license-model :portkey.aws.neptune.db-instance/allocated-storage :portkey.aws.neptune.db-instance/monitoring-interval :portkey.aws.neptune.db-instance/timezone :portkey.aws.neptune.db-instance/master-username :portkey.aws.neptune.db-instance/engine-version :portkey.aws.neptune.db-instance/performance-insights-enabled :portkey.aws.neptune.db-instance/storage-encrypted :portkey.aws.neptune.db-instance/kms-key-id :portkey.aws.neptune.db-instance/dbi-resource-id :portkey.aws.neptune.db-instance/iops :portkey.aws.neptune.db-instance/storage-type :portkey.aws.neptune.db-instance/ca-certificate-identifier :portkey.aws.neptune/endpoint :portkey.aws.neptune.db-instance/option-group-memberships :portkey.aws.neptune.db-instance/iam-database-authentication-enabled :portkey.aws.neptune.db-instance/db-instance-class :portkey.aws.neptune.db-instance/db-parameter-groups :portkey.aws.neptune.db-instance/vpc-security-groups :portkey.aws.neptune.db-instance/engine :portkey.aws.neptune.db-instance/db-instance-status :portkey.aws.neptune.db-instance/status-infos :portkey.aws.neptune.db-instance/monitoring-role-arn :portkey.aws.neptune.db-instance/tde-credential-arn :portkey.aws.neptune.db-instance/enhanced-monitoring-resource-arn :portkey.aws.neptune.db-instance/multi-az :portkey.aws.neptune.db-instance/performance-insights-kms-key-id :portkey.aws.neptune.db-instance/db-cluster-identifier :portkey.aws.neptune.db-instance/preferred-backup-window :portkey.aws.neptune/pending-modified-values :portkey.aws.neptune.db-instance/latest-restorable-time :portkey.aws.neptune/db-subnet-group]))

(clojure.spec.alpha/def :portkey.aws.neptune/create-db-cluster-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster-snapshot]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-parameter-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/t-stamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-message/db-clusters (clojure.spec.alpha/and :portkey.aws.neptune/db-cluster-list))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster-message/marker :portkey.aws.neptune.db-cluster-message/db-clusters]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-security-group-membership-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-security-group-membership))

(clojure.spec.alpha/def :portkey.aws.neptune.event-categories-map/source-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.event-categories-map/event-categories (clojure.spec.alpha/and :portkey.aws.neptune/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.neptune/event-categories-map (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.event-categories-map/source-type :portkey.aws.neptune.event-categories-map/event-categories]))

(clojure.spec.alpha/def :portkey.aws.neptune/event-subscription-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/describe-db-cluster-snapshot-attributes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster-snapshot-attributes-result]))

(clojure.spec.alpha/def :portkey.aws.neptune/kms-key-not-accessible-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.create-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-event-subscription-message/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-event-subscription-message/source-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-event-subscription-message/event-categories (clojure.spec.alpha/and :portkey.aws.neptune/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.neptune.create-event-subscription-message/source-ids (clojure.spec.alpha/and :portkey.aws.neptune/source-ids-list))
(clojure.spec.alpha/def :portkey.aws.neptune.create-event-subscription-message/enabled (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-event-subscription-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune/create-event-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.create-event-subscription-message/subscription-name :portkey.aws.neptune.create-event-subscription-message/sns-topic-arn] :opt-un [:portkey.aws.neptune.create-event-subscription-message/source-type :portkey.aws.neptune.create-event-subscription-message/event-categories :portkey.aws.neptune.create-event-subscription-message/source-ids :portkey.aws.neptune.create-event-subscription-message/enabled :portkey.aws.neptune.create-event-subscription-message/tags]))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-cluster-snapshot-attributes-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-db-cluster-snapshot-attributes-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.describe-db-cluster-snapshot-attributes-message/db-cluster-snapshot-identifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/event-categories-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-engine-version-message/db-engine-versions (clojure.spec.alpha/and :portkey.aws.neptune/db-engine-version-list))
(clojure.spec.alpha/def :portkey.aws.neptune/db-engine-version-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-engine-version-message/marker :portkey.aws.neptune.db-engine-version-message/db-engine-versions]))

(clojure.spec.alpha/def :portkey.aws.neptune/modify-db-cluster-snapshot-attribute-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster-snapshot-attributes-result]))

(clojure.spec.alpha/def :portkey.aws.neptune.db-instance-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-instance-message/db-instances (clojure.spec.alpha/and :portkey.aws.neptune/db-instance-list))
(clojure.spec.alpha/def :portkey.aws.neptune/db-instance-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-instance-message/marker :portkey.aws.neptune.db-instance-message/db-instances]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-security-group-name-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-clusters-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-clusters-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-clusters-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-clusters-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-db-clusters-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.describe-db-clusters-message/db-cluster-identifier :portkey.aws.neptune.describe-db-clusters-message/filters :portkey.aws.neptune.describe-db-clusters-message/max-records :portkey.aws.neptune.describe-db-clusters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune/create-db-parameter-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-parameter-group]))

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-parameter-group/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-parameter-group/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-parameter-group/description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-parameter-group/db-cluster-parameter-group-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-parameter-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster-parameter-group/db-cluster-parameter-group-name :portkey.aws.neptune.db-cluster-parameter-group/db-parameter-group-family :portkey.aws.neptune.db-cluster-parameter-group/description :portkey.aws.neptune.db-cluster-parameter-group/db-cluster-parameter-group-arn]))

(clojure.spec.alpha/def :portkey.aws.neptune/apply-method #{"immediate" :pendingreboot :immediate "pending-reboot"})

(clojure.spec.alpha/def :portkey.aws.neptune/describe-engine-default-cluster-parameters-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/engine-defaults]))

(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-snapshot-message/db-cluster-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-snapshot-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-snapshot-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune/create-db-cluster-snapshot-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.create-db-cluster-snapshot-message/db-cluster-snapshot-identifier :portkey.aws.neptune.create-db-cluster-snapshot-message/db-cluster-identifier] :opt-un [:portkey.aws.neptune.create-db-cluster-snapshot-message/tags]))

(clojure.spec.alpha/def :portkey.aws.neptune.endpoint/address (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.endpoint/port (clojure.spec.alpha/and :portkey.aws.neptune/integer))
(clojure.spec.alpha/def :portkey.aws.neptune.endpoint/hosted-zone-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/endpoint (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.endpoint/address :portkey.aws.neptune.endpoint/port :portkey.aws.neptune.endpoint/hosted-zone-id]))

(clojure.spec.alpha/def :portkey.aws.neptune/invalid-db-cluster-snapshot-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.db-parameter-group/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-parameter-group/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-parameter-group/description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-parameter-group/db-parameter-group-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-parameter-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-parameter-group/db-parameter-group-name :portkey.aws.neptune.db-parameter-group/db-parameter-group-family :portkey.aws.neptune.db-parameter-group/description :portkey.aws.neptune.db-parameter-group/db-parameter-group-arn]))

(clojure.spec.alpha/def :portkey.aws.neptune/supported-character-sets-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/character-set))

(clojure.spec.alpha/def :portkey.aws.neptune/storage-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.cloudwatch-logs-export-configuration/enable-log-types (clojure.spec.alpha/and :portkey.aws.neptune/log-type-list))
(clojure.spec.alpha/def :portkey.aws.neptune.cloudwatch-logs-export-configuration/disable-log-types (clojure.spec.alpha/and :portkey.aws.neptune/log-type-list))
(clojure.spec.alpha/def :portkey.aws.neptune/cloudwatch-logs-export-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.cloudwatch-logs-export-configuration/enable-log-types :portkey.aws.neptune.cloudwatch-logs-export-configuration/disable-log-types]))

(clojure.spec.alpha/def :portkey.aws.neptune/invalid-restore-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/log-type-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune/insufficient-db-cluster-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-option-group-status/db-cluster-option-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-option-group-status/status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-option-group-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster-option-group-status/db-cluster-option-group-name :portkey.aws.neptune.db-cluster-option-group-status/status]))

(clojure.spec.alpha/def :portkey.aws.neptune.option-group-membership/option-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.option-group-membership/status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/option-group-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.option-group-membership/option-group-name :portkey.aws.neptune.option-group-membership/status]))

(clojure.spec.alpha/def :portkey.aws.neptune.upgrade-target/engine (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.upgrade-target/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.upgrade-target/description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.upgrade-target/auto-upgrade (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.upgrade-target/is-major-version-upgrade (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune/upgrade-target (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.upgrade-target/engine :portkey.aws.neptune.upgrade-target/engine-version :portkey.aws.neptune.upgrade-target/description :portkey.aws.neptune.upgrade-target/auto-upgrade :portkey.aws.neptune.upgrade-target/is-major-version-upgrade]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-parameter-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/attribute-value-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-parameter-groups-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-parameter-groups-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-parameter-groups-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-db-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.describe-db-parameter-groups-message/db-parameter-group-name :portkey.aws.neptune.describe-db-parameter-groups-message/filters :portkey.aws.neptune.describe-db-parameter-groups-message/max-records :portkey.aws.neptune.describe-db-parameter-groups-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune/invalid-db-subnet-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.character-set/character-set-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.character-set/character-set-description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/character-set (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.character-set/character-set-name :portkey.aws.neptune.character-set/character-set-description]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-parameter-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.delete-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.delete-db-cluster-message/skip-final-snapshot (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.delete-db-cluster-message/final-db-snapshot-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/delete-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.delete-db-cluster-message/db-cluster-identifier] :opt-un [:portkey.aws.neptune.delete-db-cluster-message/skip-final-snapshot :portkey.aws.neptune.delete-db-cluster-message/final-db-snapshot-identifier]))

(clojure.spec.alpha/def :portkey.aws.neptune/describe-valid-db-instance-modifications-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/valid-db-instance-modifications-message]))

(clojure.spec.alpha/def :portkey.aws.neptune/modify-event-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.neptune.tag/key (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.tag/value (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/tag (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.tag/key :portkey.aws.neptune.tag/value]))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-event-categories-message/source-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-event-categories-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-event-categories-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.describe-event-categories-message/source-type :portkey.aws.neptune.describe-event-categories-message/filters]))

(clojure.spec.alpha/def :portkey.aws.neptune/insufficient-db-instance-capacity-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/boolean-optional clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.neptune/failover-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.neptune/sns-invalid-topic-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.delete-db-cluster-parameter-group-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/delete-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.delete-db-cluster-parameter-group-message/db-cluster-parameter-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.list-tags-for-resource-message/resource-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.list-tags-for-resource-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune/list-tags-for-resource-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.list-tags-for-resource-message/resource-name] :opt-un [:portkey.aws.neptune.list-tags-for-resource-message/filters]))

(clojure.spec.alpha/def :portkey.aws.neptune.failover-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.failover-db-cluster-message/target-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/failover-db-cluster-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.failover-db-cluster-message/db-cluster-identifier :portkey.aws.neptune.failover-db-cluster-message/target-db-instance-identifier]))

(clojure.spec.alpha/def :portkey.aws.neptune.delete-db-subnet-group-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/delete-db-subnet-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.delete-db-subnet-group-message/db-subnet-group-name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/db-instance-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-instance))

(clojure.spec.alpha/def :portkey.aws.neptune/delete-db-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-instance]))

(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/option-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/replication-source-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/character-set-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/pre-signed-url (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/database-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.neptune/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/master-user-password (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/master-username (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/storage-encrypted (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/port (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/kms-key-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/engine (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/db-cluster-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/create-db-cluster-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.create-db-cluster-message/db-cluster-identifier :portkey.aws.neptune.create-db-cluster-message/engine] :opt-un [:portkey.aws.neptune.create-db-cluster-message/backup-retention-period :portkey.aws.neptune.create-db-cluster-message/option-group-name :portkey.aws.neptune.create-db-cluster-message/replication-source-identifier :portkey.aws.neptune.create-db-cluster-message/character-set-name :portkey.aws.neptune.create-db-cluster-message/enable-iam-database-authentication :portkey.aws.neptune.create-db-cluster-message/pre-signed-url :portkey.aws.neptune.create-db-cluster-message/database-name :portkey.aws.neptune.create-db-cluster-message/preferred-maintenance-window :portkey.aws.neptune.create-db-cluster-message/tags :portkey.aws.neptune.create-db-cluster-message/vpc-security-group-ids :portkey.aws.neptune.create-db-cluster-message/db-cluster-parameter-group-name :portkey.aws.neptune.create-db-cluster-message/master-user-password :portkey.aws.neptune.create-db-cluster-message/master-username :portkey.aws.neptune.create-db-cluster-message/engine-version :portkey.aws.neptune.create-db-cluster-message/storage-encrypted :portkey.aws.neptune.create-db-cluster-message/db-subnet-group-name :portkey.aws.neptune.create-db-cluster-message/port :portkey.aws.neptune.create-db-cluster-message/kms-key-id :portkey.aws.neptune/availability-zones :portkey.aws.neptune.create-db-cluster-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.neptune/delete-event-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.neptune.pending-maintenance-actions-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/pending-maintenance-actions-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/pending-maintenance-actions :portkey.aws.neptune.pending-maintenance-actions-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-subnet-group-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/add-source-identifier-to-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/event-subscription]))

(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-parameter-groups-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-cluster-parameter-groups-message/db-cluster-parameter-groups (clojure.spec.alpha/and :portkey.aws.neptune/db-cluster-parameter-group-list))
(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-parameter-groups-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-cluster-parameter-groups-message/marker :portkey.aws.neptune.db-cluster-parameter-groups-message/db-cluster-parameter-groups]))

(clojure.spec.alpha/def :portkey.aws.neptune/event-subscriptions-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/event-subscription))

(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-parameter-group-message/db-cluster-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-parameter-group-message/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-parameter-group-message/description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.create-db-cluster-parameter-group-message/tags (clojure.spec.alpha/and :portkey.aws.neptune/tag-list))
(clojure.spec.alpha/def :portkey.aws.neptune/create-db-cluster-parameter-group-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.create-db-cluster-parameter-group-message/db-cluster-parameter-group-name :portkey.aws.neptune.create-db-cluster-parameter-group-message/db-parameter-group-family :portkey.aws.neptune.create-db-cluster-parameter-group-message/description] :opt-un [:portkey.aws.neptune.create-db-cluster-parameter-group-message/tags]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-cluster-option-group-memberships (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-cluster-option-group-status))

(clojure.spec.alpha/def :portkey.aws.neptune.engine-defaults/db-parameter-group-family (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.engine-defaults/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.engine-defaults/parameters (clojure.spec.alpha/and :portkey.aws.neptune/parameters-list))
(clojure.spec.alpha/def :portkey.aws.neptune/engine-defaults (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.engine-defaults/db-parameter-group-family :portkey.aws.neptune.engine-defaults/marker :portkey.aws.neptune.engine-defaults/parameters]))

(clojure.spec.alpha/def :portkey.aws.neptune/availability-zones (clojure.spec.alpha/coll-of :portkey.aws.neptune/string))

(clojure.spec.alpha/def :portkey.aws.neptune/db-subnet-groups (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-subnet-group))

(clojure.spec.alpha/def :portkey.aws.neptune/delete-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-subnet-quota-exceeded-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/invalid-db-snapshot-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/integer-optional clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.neptune/supported-timezones-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/timezone))

(clojure.spec.alpha/def :portkey.aws.neptune/range-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/range))

(clojure.spec.alpha/def :portkey.aws.neptune/db-instance-status-info-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/db-instance-status-info))

(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-parameters-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-parameters-message/source (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-parameters-message/filters (clojure.spec.alpha/and :portkey.aws.neptune/filter-list))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-parameters-message/max-records (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.describe-db-parameters-message/marker (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/describe-db-parameters-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.describe-db-parameters-message/db-parameter-group-name] :opt-un [:portkey.aws.neptune.describe-db-parameters-message/source :portkey.aws.neptune.describe-db-parameters-message/filters :portkey.aws.neptune.describe-db-parameters-message/max-records :portkey.aws.neptune.describe-db-parameters-message/marker]))

(clojure.spec.alpha/def :portkey.aws.neptune.domain-membership/domain (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.domain-membership/status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.domain-membership/fqdn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.domain-membership/iam-role-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/domain-membership (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.domain-membership/domain :portkey.aws.neptune.domain-membership/status :portkey.aws.neptune.domain-membership/fqdn :portkey.aws.neptune.domain-membership/iam-role-name]))

(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/supports-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/supports-iops (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/multi-az-capable (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/min-storage-size (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/max-iops-per-gib (clojure.spec.alpha/and :portkey.aws.neptune/double-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/min-iops-per-db-instance (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/license-model (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/vpc (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/supports-performance-insights (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/storage-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/max-storage-size (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/min-iops-per-gib (clojure.spec.alpha/and :portkey.aws.neptune/double-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/read-replica-capable (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/db-instance-class (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/supports-storage-encryption (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/engine (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/availability-zones (clojure.spec.alpha/and :portkey.aws.neptune/availability-zone-list))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/supports-enhanced-monitoring (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.orderable-db-instance-option/max-iops-per-db-instance (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune/orderable-db-instance-option (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.orderable-db-instance-option/supports-iam-database-authentication :portkey.aws.neptune.orderable-db-instance-option/supports-iops :portkey.aws.neptune.orderable-db-instance-option/multi-az-capable :portkey.aws.neptune.orderable-db-instance-option/min-storage-size :portkey.aws.neptune.orderable-db-instance-option/max-iops-per-gib :portkey.aws.neptune.orderable-db-instance-option/min-iops-per-db-instance :portkey.aws.neptune.orderable-db-instance-option/license-model :portkey.aws.neptune.orderable-db-instance-option/engine-version :portkey.aws.neptune.orderable-db-instance-option/vpc :portkey.aws.neptune.orderable-db-instance-option/supports-performance-insights :portkey.aws.neptune.orderable-db-instance-option/storage-type :portkey.aws.neptune.orderable-db-instance-option/max-storage-size :portkey.aws.neptune.orderable-db-instance-option/min-iops-per-gib :portkey.aws.neptune.orderable-db-instance-option/read-replica-capable :portkey.aws.neptune.orderable-db-instance-option/db-instance-class :portkey.aws.neptune.orderable-db-instance-option/supports-storage-encryption :portkey.aws.neptune.orderable-db-instance-option/engine :portkey.aws.neptune.orderable-db-instance-option/availability-zones :portkey.aws.neptune.orderable-db-instance-option/supports-enhanced-monitoring :portkey.aws.neptune.orderable-db-instance-option/max-iops-per-db-instance]))

(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/backup-retention-period (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/master-user-password (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/license-model (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/allocated-storage (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/port (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/iops (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/storage-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/ca-certificate-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/db-instance-class (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.pending-modified-values/multi-az (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune/pending-modified-values (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.pending-modified-values/backup-retention-period :portkey.aws.neptune/pending-cloudwatch-logs-exports :portkey.aws.neptune.pending-modified-values/db-instance-identifier :portkey.aws.neptune.pending-modified-values/master-user-password :portkey.aws.neptune.pending-modified-values/license-model :portkey.aws.neptune.pending-modified-values/allocated-storage :portkey.aws.neptune.pending-modified-values/engine-version :portkey.aws.neptune.pending-modified-values/db-subnet-group-name :portkey.aws.neptune.pending-modified-values/port :portkey.aws.neptune.pending-modified-values/iops :portkey.aws.neptune.pending-modified-values/storage-type :portkey.aws.neptune.pending-modified-values/ca-certificate-identifier :portkey.aws.neptune.pending-modified-values/db-instance-class :portkey.aws.neptune.pending-modified-values/multi-az]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-subnet-group-already-exists-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/subnet-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/subnet))

(clojure.spec.alpha/def :portkey.aws.neptune/filter-list (clojure.spec.alpha/coll-of :portkey.aws.neptune/filter))

(clojure.spec.alpha/def :portkey.aws.neptune/db-snapshot-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune/invalid-db-parameter-group-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/backup-retention-period (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/option-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/db-security-groups (clojure.spec.alpha/and :portkey.aws.neptune/db-security-group-name-list))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/promotion-tier (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/enable-iam-database-authentication (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/publicly-accessible (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/domain-iam-role-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/preferred-maintenance-window (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/copy-tags-to-snapshot (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/db-instance-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/auto-minor-version-upgrade (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/new-db-instance-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/vpc-security-group-ids (clojure.spec.alpha/and :portkey.aws.neptune/vpc-security-group-id-list))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/master-user-password (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/license-model (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/domain (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/allow-major-version-upgrade (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/allocated-storage (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/monitoring-interval (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/engine-version (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/db-port-number (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/iops (clojure.spec.alpha/and :portkey.aws.neptune/integer-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/tde-credential-password (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/storage-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/apply-immediately (clojure.spec.alpha/and :portkey.aws.neptune/boolean))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/ca-certificate-identifier (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/db-instance-class (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/db-parameter-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/enable-performance-insights (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/monitoring-role-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/tde-credential-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/multi-az (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/performance-insights-kms-key-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-db-instance-message/preferred-backup-window (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/modify-db-instance-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.modify-db-instance-message/db-instance-identifier] :opt-un [:portkey.aws.neptune.modify-db-instance-message/backup-retention-period :portkey.aws.neptune.modify-db-instance-message/option-group-name :portkey.aws.neptune.modify-db-instance-message/db-security-groups :portkey.aws.neptune.modify-db-instance-message/promotion-tier :portkey.aws.neptune.modify-db-instance-message/enable-iam-database-authentication :portkey.aws.neptune.modify-db-instance-message/publicly-accessible :portkey.aws.neptune.modify-db-instance-message/domain-iam-role-name :portkey.aws.neptune.modify-db-instance-message/preferred-maintenance-window :portkey.aws.neptune.modify-db-instance-message/copy-tags-to-snapshot :portkey.aws.neptune.modify-db-instance-message/auto-minor-version-upgrade :portkey.aws.neptune.modify-db-instance-message/new-db-instance-identifier :portkey.aws.neptune.modify-db-instance-message/vpc-security-group-ids :portkey.aws.neptune.modify-db-instance-message/master-user-password :portkey.aws.neptune.modify-db-instance-message/license-model :portkey.aws.neptune.modify-db-instance-message/domain :portkey.aws.neptune.modify-db-instance-message/allow-major-version-upgrade :portkey.aws.neptune.modify-db-instance-message/allocated-storage :portkey.aws.neptune.modify-db-instance-message/monitoring-interval :portkey.aws.neptune.modify-db-instance-message/engine-version :portkey.aws.neptune.modify-db-instance-message/db-subnet-group-name :portkey.aws.neptune.modify-db-instance-message/db-port-number :portkey.aws.neptune.modify-db-instance-message/iops :portkey.aws.neptune.modify-db-instance-message/tde-credential-password :portkey.aws.neptune.modify-db-instance-message/storage-type :portkey.aws.neptune.modify-db-instance-message/apply-immediately :portkey.aws.neptune.modify-db-instance-message/ca-certificate-identifier :portkey.aws.neptune/cloudwatch-logs-export-configuration :portkey.aws.neptune.modify-db-instance-message/db-instance-class :portkey.aws.neptune.modify-db-instance-message/db-parameter-group-name :portkey.aws.neptune.modify-db-instance-message/enable-performance-insights :portkey.aws.neptune.modify-db-instance-message/monitoring-role-arn :portkey.aws.neptune.modify-db-instance-message/tde-credential-arn :portkey.aws.neptune.modify-db-instance-message/multi-az :portkey.aws.neptune.modify-db-instance-message/performance-insights-kms-key-id :portkey.aws.neptune.modify-db-instance-message/preferred-backup-window]))

(clojure.spec.alpha/def :portkey.aws.neptune/modify-db-cluster-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune/db-cluster]))

(clojure.spec.alpha/def :portkey.aws.neptune/db-security-group-not-found-fault (clojure.spec.alpha/keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.neptune.db-subnet-group/db-subnet-group-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-subnet-group/db-subnet-group-description (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-subnet-group/vpc-id (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-subnet-group/subnet-group-status (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.db-subnet-group/subnets (clojure.spec.alpha/and :portkey.aws.neptune/subnet-list))
(clojure.spec.alpha/def :portkey.aws.neptune.db-subnet-group/db-subnet-group-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune/db-subnet-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.neptune.db-subnet-group/db-subnet-group-name :portkey.aws.neptune.db-subnet-group/db-subnet-group-description :portkey.aws.neptune.db-subnet-group/vpc-id :portkey.aws.neptune.db-subnet-group/subnet-group-status :portkey.aws.neptune.db-subnet-group/subnets :portkey.aws.neptune.db-subnet-group/db-subnet-group-arn]))

(clojure.spec.alpha/def :portkey.aws.neptune.modify-event-subscription-message/subscription-name (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-event-subscription-message/sns-topic-arn (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-event-subscription-message/source-type (clojure.spec.alpha/and :portkey.aws.neptune/string))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-event-subscription-message/event-categories (clojure.spec.alpha/and :portkey.aws.neptune/event-categories-list))
(clojure.spec.alpha/def :portkey.aws.neptune.modify-event-subscription-message/enabled (clojure.spec.alpha/and :portkey.aws.neptune/boolean-optional))
(clojure.spec.alpha/def :portkey.aws.neptune/modify-event-subscription-message (clojure.spec.alpha/keys :req-un [:portkey.aws.neptune.modify-event-subscription-message/subscription-name] :opt-un [:portkey.aws.neptune.modify-event-subscription-message/sns-topic-arn :portkey.aws.neptune.modify-event-subscription-message/source-type :portkey.aws.neptune.modify-event-subscription-message/event-categories :portkey.aws.neptune.modify-event-subscription-message/enabled]))

(clojure.spec.alpha/def :portkey.aws.neptune/boolean clojure.core/boolean?)

(clojure.core/defn add-source-identifier-to-subscription ([add-source-identifier-to-subscription-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-add-source-identifier-to-subscription-message add-source-identifier-to-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/add-source-identifier-to-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/add-source-identifier-to-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "AddSourceIdentifierToSubscriptionResult", :http.request.configuration/action "AddSourceIdentifierToSubscription", :http.request.configuration/output-deser-fn response-add-source-identifier-to-subscription-result, :http.request.spec/error-spec {"SubscriptionNotFoundFault" :portkey.aws.neptune/subscription-not-found-fault, "SourceNotFoundFault" :portkey.aws.neptune/source-not-found-fault}})))))
(clojure.spec.alpha/fdef add-source-identifier-to-subscription :args (clojure.spec.alpha/tuple :portkey.aws.neptune/add-source-identifier-to-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/add-source-identifier-to-subscription-result))

(clojure.core/defn delete-db-subnet-group ([delete-db-subnet-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-db-subnet-group-message delete-db-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/delete-db-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteDBSubnetGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"InvalidDBSubnetGroupStateFault" :portkey.aws.neptune/invalid-db-subnet-group-state-fault, "InvalidDBSubnetStateFault" :portkey.aws.neptune/invalid-db-subnet-state-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.neptune/db-subnet-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/delete-db-subnet-group-message) :ret clojure.core/true?)

(clojure.core/defn describe-orderable-db-instance-options ([describe-orderable-db-instance-options-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-orderable-db-instance-options-message describe-orderable-db-instance-options-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/orderable-db-instance-options-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-orderable-db-instance-options-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeOrderableDBInstanceOptionsResult", :http.request.configuration/action "DescribeOrderableDBInstanceOptions", :http.request.configuration/output-deser-fn response-orderable-db-instance-options-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-orderable-db-instance-options :args (clojure.spec.alpha/tuple :portkey.aws.neptune/describe-orderable-db-instance-options-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/orderable-db-instance-options-message))

(clojure.core/defn copy-db-cluster-parameter-group ([copy-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-copy-db-cluster-parameter-group-message copy-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/copy-db-cluster-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/copy-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CopyDBClusterParameterGroupResult", :http.request.configuration/action "CopyDBClusterParameterGroup", :http.request.configuration/output-deser-fn response-copy-db-cluster-parameter-group-result, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault, "DBParameterGroupQuotaExceededFault" :portkey.aws.neptune/db-parameter-group-quota-exceeded-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.neptune/db-parameter-group-already-exists-fault}})))))
(clojure.spec.alpha/fdef copy-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/copy-db-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/copy-db-cluster-parameter-group-result))

(clojure.core/defn modify-db-subnet-group ([modify-db-subnet-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-db-subnet-group-message modify-db-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/modify-db-subnet-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/modify-db-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBSubnetGroupResult", :http.request.configuration/action "ModifyDBSubnetGroup", :http.request.configuration/output-deser-fn response-modify-db-subnet-group-result, :http.request.spec/error-spec {"DBSubnetGroupNotFoundFault" :portkey.aws.neptune/db-subnet-group-not-found-fault, "DBSubnetQuotaExceededFault" :portkey.aws.neptune/db-subnet-quota-exceeded-fault, "SubnetAlreadyInUse" :portkey.aws.neptune/subnet-already-in-use, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.neptune/db-subnet-group-does-not-cover-enough-a-zs, "InvalidSubnet" :portkey.aws.neptune/invalid-subnet}})))))
(clojure.spec.alpha/fdef modify-db-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/modify-db-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/modify-db-subnet-group-result))

(clojure.core/defn restore-db-cluster-to-point-in-time ([restore-db-cluster-to-point-in-time-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-restore-db-cluster-to-point-in-time-message restore-db-cluster-to-point-in-time-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/restore-db-cluster-to-point-in-time-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/restore-db-cluster-to-point-in-time-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RestoreDBClusterToPointInTimeResult", :http.request.configuration/action "RestoreDBClusterToPointInTime", :http.request.configuration/output-deser-fn response-restore-db-cluster-to-point-in-time-result, :http.request.spec/error-spec {"DBClusterAlreadyExistsFault" :portkey.aws.neptune/db-cluster-already-exists-fault, "OptionGroupNotFoundFault" :portkey.aws.neptune/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.neptune/invalid-vpc-network-state-fault, "DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault, "InsufficientStorageClusterCapacityFault" :portkey.aws.neptune/insufficient-storage-cluster-capacity-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.neptune/db-cluster-snapshot-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.neptune/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.neptune/invalid-subnet, "DBClusterQuotaExceededFault" :portkey.aws.neptune/db-cluster-quota-exceeded-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.neptune/db-subnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.neptune/kms-key-not-accessible-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.neptune/invalid-db-cluster-snapshot-state-fault, "StorageQuotaExceededFault" :portkey.aws.neptune/storage-quota-exceeded-fault, "InvalidRestoreFault" :portkey.aws.neptune/invalid-restore-fault, "InsufficientDBClusterCapacityFault" :portkey.aws.neptune/insufficient-db-cluster-capacity-fault, "InvalidDBSnapshotStateFault" :portkey.aws.neptune/invalid-db-snapshot-state-fault}})))))
(clojure.spec.alpha/fdef restore-db-cluster-to-point-in-time :args (clojure.spec.alpha/tuple :portkey.aws.neptune/restore-db-cluster-to-point-in-time-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/restore-db-cluster-to-point-in-time-result))

(clojure.core/defn describe-events ([] (describe-events {})) ([describe-events-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-events-message describe-events-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/events-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-events-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEventsResult", :http.request.configuration/action "DescribeEvents", :http.request.configuration/output-deser-fn response-events-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-events :args (clojure.spec.alpha/? :portkey.aws.neptune/describe-events-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/events-message))

(clojure.core/defn reset-db-parameter-group ([reset-db-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-reset-db-parameter-group-message reset-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/reset-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ResetDBParameterGroupResult", :http.request.configuration/action "ResetDBParameterGroup", :http.request.configuration/output-deser-fn response-db-parameter-group-name-message, :http.request.spec/error-spec {"InvalidDBParameterGroupStateFault" :portkey.aws.neptune/invalid-db-parameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef reset-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/reset-db-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-parameter-group-name-message))

(clojure.core/defn remove-role-from-db-cluster ([remove-role-from-db-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-remove-role-from-db-cluster-message remove-role-from-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/remove-role-from-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RemoveRoleFromDBCluster", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault, "DBClusterRoleNotFoundFault" :portkey.aws.neptune/db-cluster-role-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.neptune/invalid-db-cluster-state-fault}})))))
(clojure.spec.alpha/fdef remove-role-from-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.neptune/remove-role-from-db-cluster-message) :ret clojure.core/true?)

(clojure.core/defn delete-db-cluster-snapshot ([delete-db-cluster-snapshot-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-db-cluster-snapshot-message delete-db-cluster-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/delete-db-cluster-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/delete-db-cluster-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteDBClusterSnapshotResult", :http.request.configuration/action "DeleteDBClusterSnapshot", :http.request.configuration/output-deser-fn response-delete-db-cluster-snapshot-result, :http.request.spec/error-spec {"InvalidDBClusterSnapshotStateFault" :portkey.aws.neptune/invalid-db-cluster-snapshot-state-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.neptune/db-cluster-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.neptune/delete-db-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/delete-db-cluster-snapshot-result))

(clojure.core/defn reboot-db-instance ([reboot-db-instance-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-reboot-db-instance-message reboot-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/reboot-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/reboot-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RebootDBInstanceResult", :http.request.configuration/action "RebootDBInstance", :http.request.configuration/output-deser-fn response-reboot-db-instance-result, :http.request.spec/error-spec {"InvalidDBInstanceStateFault" :portkey.aws.neptune/invalid-db-instance-state-fault, "DBInstanceNotFoundFault" :portkey.aws.neptune/db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef reboot-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.neptune/reboot-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/reboot-db-instance-result))

(clojure.core/defn create-db-cluster-parameter-group ([create-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-db-cluster-parameter-group-message create-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/create-db-cluster-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/create-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBClusterParameterGroupResult", :http.request.configuration/action "CreateDBClusterParameterGroup", :http.request.configuration/output-deser-fn response-create-db-cluster-parameter-group-result, :http.request.spec/error-spec {"DBParameterGroupQuotaExceededFault" :portkey.aws.neptune/db-parameter-group-quota-exceeded-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.neptune/db-parameter-group-already-exists-fault}})))))
(clojure.spec.alpha/fdef create-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/create-db-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/create-db-cluster-parameter-group-result))

(clojure.core/defn copy-db-parameter-group ([copy-db-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-copy-db-parameter-group-message copy-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/copy-db-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/copy-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CopyDBParameterGroupResult", :http.request.configuration/action "CopyDBParameterGroup", :http.request.configuration/output-deser-fn response-copy-db-parameter-group-result, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.neptune/db-parameter-group-already-exists-fault, "DBParameterGroupQuotaExceededFault" :portkey.aws.neptune/db-parameter-group-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef copy-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/copy-db-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/copy-db-parameter-group-result))

(clojure.core/defn list-tags-for-resource ([list-tags-for-resource-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-list-tags-for-resource-message list-tags-for-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/tag-list-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/list-tags-for-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ListTagsForResourceResult", :http.request.configuration/action "ListTagsForResource", :http.request.configuration/output-deser-fn response-tag-list-message, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.neptune/db-instance-not-found-fault, "DBSnapshotNotFoundFault" :portkey.aws.neptune/db-snapshot-not-found-fault, "DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef list-tags-for-resource :args (clojure.spec.alpha/tuple :portkey.aws.neptune/list-tags-for-resource-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/tag-list-message))

(clojure.core/defn describe-engine-default-parameters ([describe-engine-default-parameters-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-engine-default-parameters-message describe-engine-default-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/describe-engine-default-parameters-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-engine-default-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEngineDefaultParametersResult", :http.request.configuration/action "DescribeEngineDefaultParameters", :http.request.configuration/output-deser-fn response-describe-engine-default-parameters-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-engine-default-parameters :args (clojure.spec.alpha/tuple :portkey.aws.neptune/describe-engine-default-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/describe-engine-default-parameters-result))

(clojure.core/defn delete-db-instance ([delete-db-instance-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-db-instance-message delete-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/delete-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/delete-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteDBInstanceResult", :http.request.configuration/action "DeleteDBInstance", :http.request.configuration/output-deser-fn response-delete-db-instance-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.neptune/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.neptune/invalid-db-instance-state-fault, "DBSnapshotAlreadyExistsFault" :portkey.aws.neptune/db-snapshot-already-exists-fault, "SnapshotQuotaExceededFault" :portkey.aws.neptune/snapshot-quota-exceeded-fault, "InvalidDBClusterStateFault" :portkey.aws.neptune/invalid-db-cluster-state-fault}})))))
(clojure.spec.alpha/fdef delete-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.neptune/delete-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/delete-db-instance-result))

(clojure.core/defn describe-db-subnet-groups ([] (describe-db-subnet-groups {})) ([describe-db-subnet-groups-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-subnet-groups-message describe-db-subnet-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-subnet-group-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-db-subnet-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBSubnetGroupsResult", :http.request.configuration/action "DescribeDBSubnetGroups", :http.request.configuration/output-deser-fn response-db-subnet-group-message, :http.request.spec/error-spec {"DBSubnetGroupNotFoundFault" :portkey.aws.neptune/db-subnet-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-subnet-groups :args (clojure.spec.alpha/? :portkey.aws.neptune/describe-db-subnet-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-subnet-group-message))

(clojure.core/defn describe-db-clusters ([] (describe-db-clusters {})) ([describe-db-clusters-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-clusters-message describe-db-clusters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-cluster-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-db-clusters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBClustersResult", :http.request.configuration/action "DescribeDBClusters", :http.request.configuration/output-deser-fn response-db-cluster-message, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-clusters :args (clojure.spec.alpha/? :portkey.aws.neptune/describe-db-clusters-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-cluster-message))

(clojure.core/defn create-db-cluster ([create-db-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-db-cluster-message create-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/create-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/create-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBClusterResult", :http.request.configuration/action "CreateDBCluster", :http.request.configuration/output-deser-fn response-create-db-cluster-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.neptune/db-instance-not-found-fault, "DBClusterAlreadyExistsFault" :portkey.aws.neptune/db-cluster-already-exists-fault, "InvalidDBInstanceStateFault" :portkey.aws.neptune/invalid-db-instance-state-fault, "InvalidVPCNetworkStateFault" :portkey.aws.neptune/invalid-vpc-network-state-fault, "InvalidDBSubnetGroupStateFault" :portkey.aws.neptune/invalid-db-subnet-group-state-fault, "DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault, "DBClusterParameterGroupNotFoundFault" :portkey.aws.neptune/db-cluster-parameter-group-not-found-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.neptune/db-subnet-group-does-not-cover-enough-a-zs, "InsufficientStorageClusterCapacityFault" :portkey.aws.neptune/insufficient-storage-cluster-capacity-fault, "InvalidDBClusterStateFault" :portkey.aws.neptune/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.neptune/invalid-subnet, "DBClusterQuotaExceededFault" :portkey.aws.neptune/db-cluster-quota-exceeded-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.neptune/db-subnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.neptune/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.neptune/storage-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef create-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.neptune/create-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/create-db-cluster-result))

(clojure.core/defn failover-db-cluster ([] (failover-db-cluster {})) ([failover-db-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-failover-db-cluster-message failover-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/failover-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/failover-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "FailoverDBClusterResult", :http.request.configuration/action "FailoverDBCluster", :http.request.configuration/output-deser-fn response-failover-db-cluster-result, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.neptune/invalid-db-cluster-state-fault, "InvalidDBInstanceStateFault" :portkey.aws.neptune/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef failover-db-cluster :args (clojure.spec.alpha/? :portkey.aws.neptune/failover-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/failover-db-cluster-result))

(clojure.core/defn reset-db-cluster-parameter-group ([reset-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-reset-db-cluster-parameter-group-message reset-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-cluster-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/reset-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ResetDBClusterParameterGroupResult", :http.request.configuration/action "ResetDBClusterParameterGroup", :http.request.configuration/output-deser-fn response-db-cluster-parameter-group-name-message, :http.request.spec/error-spec {"InvalidDBParameterGroupStateFault" :portkey.aws.neptune/invalid-db-parameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef reset-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/reset-db-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-cluster-parameter-group-name-message))

(clojure.core/defn create-db-instance ([create-db-instance-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-db-instance-message create-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/create-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/create-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBInstanceResult", :http.request.configuration/action "CreateDBInstance", :http.request.configuration/output-deser-fn response-create-db-instance-result, :http.request.spec/error-spec {"DomainNotFoundFault" :portkey.aws.neptune/domain-not-found-fault, "InstanceQuotaExceededFault" :portkey.aws.neptune/instance-quota-exceeded-fault, "OptionGroupNotFoundFault" :portkey.aws.neptune/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.neptune/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.neptune/db-instance-already-exists-fault, "DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault, "StorageTypeNotSupportedFault" :portkey.aws.neptune/storage-type-not-supported-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.neptune/db-subnet-group-does-not-cover-enough-a-zs, "AuthorizationNotFoundFault" :portkey.aws.neptune/authorization-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.neptune/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.neptune/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.neptune/db-subnet-group-not-found-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.neptune/provisioned-iops-not-available-in-az-fault, "DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.neptune/kms-key-not-accessible-fault, "StorageQuotaExceededFault" :portkey.aws.neptune/storage-quota-exceeded-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.neptune/insufficient-db-instance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.neptune/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef create-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.neptune/create-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/create-db-instance-result))

(clojure.core/defn delete-event-subscription ([delete-event-subscription-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-event-subscription-message delete-event-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/delete-event-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/delete-event-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteEventSubscriptionResult", :http.request.configuration/action "DeleteEventSubscription", :http.request.configuration/output-deser-fn response-delete-event-subscription-result, :http.request.spec/error-spec {"SubscriptionNotFoundFault" :portkey.aws.neptune/subscription-not-found-fault, "InvalidEventSubscriptionStateFault" :portkey.aws.neptune/invalid-event-subscription-state-fault}})))))
(clojure.spec.alpha/fdef delete-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.neptune/delete-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/delete-event-subscription-result))

(clojure.core/defn apply-pending-maintenance-action ([apply-pending-maintenance-action-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-apply-pending-maintenance-action-message apply-pending-maintenance-action-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/apply-pending-maintenance-action-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/apply-pending-maintenance-action-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ApplyPendingMaintenanceActionResult", :http.request.configuration/action "ApplyPendingMaintenanceAction", :http.request.configuration/output-deser-fn response-apply-pending-maintenance-action-result, :http.request.spec/error-spec {"ResourceNotFoundFault" :portkey.aws.neptune/resource-not-found-fault}})))))
(clojure.spec.alpha/fdef apply-pending-maintenance-action :args (clojure.spec.alpha/tuple :portkey.aws.neptune/apply-pending-maintenance-action-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/apply-pending-maintenance-action-result))

(clojure.core/defn delete-db-cluster ([delete-db-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-db-cluster-message delete-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/delete-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/delete-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DeleteDBClusterResult", :http.request.configuration/action "DeleteDBCluster", :http.request.configuration/output-deser-fn response-delete-db-cluster-result, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.neptune/invalid-db-cluster-state-fault, "DBClusterSnapshotAlreadyExistsFault" :portkey.aws.neptune/db-cluster-snapshot-already-exists-fault, "SnapshotQuotaExceededFault" :portkey.aws.neptune/snapshot-quota-exceeded-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.neptune/invalid-db-cluster-snapshot-state-fault}})))))
(clojure.spec.alpha/fdef delete-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.neptune/delete-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/delete-db-cluster-result))

(clojure.core/defn create-db-subnet-group ([create-db-subnet-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-db-subnet-group-message create-db-subnet-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/create-db-subnet-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/create-db-subnet-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBSubnetGroupResult", :http.request.configuration/action "CreateDBSubnetGroup", :http.request.configuration/output-deser-fn response-create-db-subnet-group-result, :http.request.spec/error-spec {"DBSubnetGroupAlreadyExistsFault" :portkey.aws.neptune/db-subnet-group-already-exists-fault, "DBSubnetGroupQuotaExceededFault" :portkey.aws.neptune/db-subnet-group-quota-exceeded-fault, "DBSubnetQuotaExceededFault" :portkey.aws.neptune/db-subnet-quota-exceeded-fault, "DBSubnetGroupDoesNotCoverEnoughAZs" :portkey.aws.neptune/db-subnet-group-does-not-cover-enough-a-zs, "InvalidSubnet" :portkey.aws.neptune/invalid-subnet}})))))
(clojure.spec.alpha/fdef create-db-subnet-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/create-db-subnet-group-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/create-db-subnet-group-result))

(clojure.core/defn remove-source-identifier-from-subscription ([remove-source-identifier-from-subscription-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-remove-source-identifier-from-subscription-message remove-source-identifier-from-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/remove-source-identifier-from-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/remove-source-identifier-from-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RemoveSourceIdentifierFromSubscriptionResult", :http.request.configuration/action "RemoveSourceIdentifierFromSubscription", :http.request.configuration/output-deser-fn response-remove-source-identifier-from-subscription-result, :http.request.spec/error-spec {"SubscriptionNotFoundFault" :portkey.aws.neptune/subscription-not-found-fault, "SourceNotFoundFault" :portkey.aws.neptune/source-not-found-fault}})))))
(clojure.spec.alpha/fdef remove-source-identifier-from-subscription :args (clojure.spec.alpha/tuple :portkey.aws.neptune/remove-source-identifier-from-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/remove-source-identifier-from-subscription-result))

(clojure.core/defn describe-db-cluster-parameters ([describe-db-cluster-parameters-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-cluster-parameters-message describe-db-cluster-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-cluster-parameter-group-details, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-db-cluster-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBClusterParametersResult", :http.request.configuration/action "DescribeDBClusterParameters", :http.request.configuration/output-deser-fn response-db-cluster-parameter-group-details, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-parameters :args (clojure.spec.alpha/tuple :portkey.aws.neptune/describe-db-cluster-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-cluster-parameter-group-details))

(clojure.core/defn describe-event-categories ([] (describe-event-categories {})) ([describe-event-categories-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-event-categories-message describe-event-categories-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/event-categories-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-event-categories-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEventCategoriesResult", :http.request.configuration/action "DescribeEventCategories", :http.request.configuration/output-deser-fn response-event-categories-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-event-categories :args (clojure.spec.alpha/? :portkey.aws.neptune/describe-event-categories-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/event-categories-message))

(clojure.core/defn describe-engine-default-cluster-parameters ([describe-engine-default-cluster-parameters-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-engine-default-cluster-parameters-message describe-engine-default-cluster-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/describe-engine-default-cluster-parameters-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-engine-default-cluster-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEngineDefaultClusterParametersResult", :http.request.configuration/action "DescribeEngineDefaultClusterParameters", :http.request.configuration/output-deser-fn response-describe-engine-default-cluster-parameters-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-engine-default-cluster-parameters :args (clojure.spec.alpha/tuple :portkey.aws.neptune/describe-engine-default-cluster-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/describe-engine-default-cluster-parameters-result))

(clojure.core/defn modify-db-cluster ([modify-db-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-db-cluster-message modify-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/modify-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/modify-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBClusterResult", :http.request.configuration/action "ModifyDBCluster", :http.request.configuration/output-deser-fn response-modify-db-cluster-result, :http.request.spec/error-spec {"DBClusterAlreadyExistsFault" :portkey.aws.neptune/db-cluster-already-exists-fault, "InvalidDBInstanceStateFault" :portkey.aws.neptune/invalid-db-instance-state-fault, "InvalidVPCNetworkStateFault" :portkey.aws.neptune/invalid-vpc-network-state-fault, "InvalidDBSubnetGroupStateFault" :portkey.aws.neptune/invalid-db-subnet-group-state-fault, "DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.neptune/invalid-db-security-group-state-fault, "DBClusterParameterGroupNotFoundFault" :portkey.aws.neptune/db-cluster-parameter-group-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.neptune/invalid-db-cluster-state-fault, "InvalidSubnet" :portkey.aws.neptune/invalid-subnet, "DBSubnetGroupNotFoundFault" :portkey.aws.neptune/db-subnet-group-not-found-fault, "StorageQuotaExceededFault" :portkey.aws.neptune/storage-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef modify-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.neptune/modify-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/modify-db-cluster-result))

(clojure.core/defn describe-pending-maintenance-actions ([] (describe-pending-maintenance-actions {})) ([describe-pending-maintenance-actions-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-pending-maintenance-actions-message describe-pending-maintenance-actions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/pending-maintenance-actions-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-pending-maintenance-actions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribePendingMaintenanceActionsResult", :http.request.configuration/action "DescribePendingMaintenanceActions", :http.request.configuration/output-deser-fn response-pending-maintenance-actions-message, :http.request.spec/error-spec {"ResourceNotFoundFault" :portkey.aws.neptune/resource-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-pending-maintenance-actions :args (clojure.spec.alpha/? :portkey.aws.neptune/describe-pending-maintenance-actions-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/pending-maintenance-actions-message))

(clojure.core/defn describe-db-instances ([] (describe-db-instances {})) ([describe-db-instances-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-instances-message describe-db-instances-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-instance-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-db-instances-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBInstancesResult", :http.request.configuration/action "DescribeDBInstances", :http.request.configuration/output-deser-fn response-db-instance-message, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.neptune/db-instance-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-instances :args (clojure.spec.alpha/? :portkey.aws.neptune/describe-db-instances-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-instance-message))

(clojure.core/defn modify-event-subscription ([modify-event-subscription-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-event-subscription-message modify-event-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/modify-event-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/modify-event-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyEventSubscriptionResult", :http.request.configuration/action "ModifyEventSubscription", :http.request.configuration/output-deser-fn response-modify-event-subscription-result, :http.request.spec/error-spec {"EventSubscriptionQuotaExceededFault" :portkey.aws.neptune/event-subscription-quota-exceeded-fault, "SubscriptionNotFoundFault" :portkey.aws.neptune/subscription-not-found-fault, "SNSInvalidTopicFault" :portkey.aws.neptune/sns-invalid-topic-fault, "SNSNoAuthorizationFault" :portkey.aws.neptune/sns-no-authorization-fault, "SNSTopicArnNotFoundFault" :portkey.aws.neptune/sns-topic-arn-not-found-fault, "SubscriptionCategoryNotFoundFault" :portkey.aws.neptune/subscription-category-not-found-fault}})))))
(clojure.spec.alpha/fdef modify-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.neptune/modify-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/modify-event-subscription-result))

(clojure.core/defn describe-db-engine-versions ([] (describe-db-engine-versions {})) ([describe-db-engine-versions-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-engine-versions-message describe-db-engine-versions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-engine-version-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-db-engine-versions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBEngineVersionsResult", :http.request.configuration/action "DescribeDBEngineVersions", :http.request.configuration/output-deser-fn response-db-engine-version-message, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-db-engine-versions :args (clojure.spec.alpha/? :portkey.aws.neptune/describe-db-engine-versions-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-engine-version-message))

(clojure.core/defn modify-db-cluster-parameter-group ([modify-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-db-cluster-parameter-group-message modify-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-cluster-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/modify-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBClusterParameterGroupResult", :http.request.configuration/action "ModifyDBClusterParameterGroup", :http.request.configuration/output-deser-fn response-db-cluster-parameter-group-name-message, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault, "InvalidDBParameterGroupStateFault" :portkey.aws.neptune/invalid-db-parameter-group-state-fault}})))))
(clojure.spec.alpha/fdef modify-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/modify-db-cluster-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-cluster-parameter-group-name-message))

(clojure.core/defn create-event-subscription ([create-event-subscription-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-event-subscription-message create-event-subscription-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/create-event-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/create-event-subscription-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateEventSubscriptionResult", :http.request.configuration/action "CreateEventSubscription", :http.request.configuration/output-deser-fn response-create-event-subscription-result, :http.request.spec/error-spec {"EventSubscriptionQuotaExceededFault" :portkey.aws.neptune/event-subscription-quota-exceeded-fault, "SubscriptionAlreadyExistFault" :portkey.aws.neptune/subscription-already-exist-fault, "SNSInvalidTopicFault" :portkey.aws.neptune/sns-invalid-topic-fault, "SNSNoAuthorizationFault" :portkey.aws.neptune/sns-no-authorization-fault, "SNSTopicArnNotFoundFault" :portkey.aws.neptune/sns-topic-arn-not-found-fault, "SubscriptionCategoryNotFoundFault" :portkey.aws.neptune/subscription-category-not-found-fault, "SourceNotFoundFault" :portkey.aws.neptune/source-not-found-fault}})))))
(clojure.spec.alpha/fdef create-event-subscription :args (clojure.spec.alpha/tuple :portkey.aws.neptune/create-event-subscription-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/create-event-subscription-result))

(clojure.core/defn modify-db-cluster-snapshot-attribute ([modify-db-cluster-snapshot-attribute-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-db-cluster-snapshot-attribute-message modify-db-cluster-snapshot-attribute-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/modify-db-cluster-snapshot-attribute-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/modify-db-cluster-snapshot-attribute-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBClusterSnapshotAttributeResult", :http.request.configuration/action "ModifyDBClusterSnapshotAttribute", :http.request.configuration/output-deser-fn response-modify-db-cluster-snapshot-attribute-result, :http.request.spec/error-spec {"DBClusterSnapshotNotFoundFault" :portkey.aws.neptune/db-cluster-snapshot-not-found-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.neptune/invalid-db-cluster-snapshot-state-fault, "SharedSnapshotQuotaExceededFault" :portkey.aws.neptune/shared-snapshot-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef modify-db-cluster-snapshot-attribute :args (clojure.spec.alpha/tuple :portkey.aws.neptune/modify-db-cluster-snapshot-attribute-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/modify-db-cluster-snapshot-attribute-result))

(clojure.core/defn create-db-parameter-group ([create-db-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-db-parameter-group-message create-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/create-db-parameter-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/create-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBParameterGroupResult", :http.request.configuration/action "CreateDBParameterGroup", :http.request.configuration/output-deser-fn response-create-db-parameter-group-result, :http.request.spec/error-spec {"DBParameterGroupQuotaExceededFault" :portkey.aws.neptune/db-parameter-group-quota-exceeded-fault, "DBParameterGroupAlreadyExistsFault" :portkey.aws.neptune/db-parameter-group-already-exists-fault}})))))
(clojure.spec.alpha/fdef create-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/create-db-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/create-db-parameter-group-result))

(clojure.core/defn describe-valid-db-instance-modifications ([describe-valid-db-instance-modifications-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-valid-db-instance-modifications-message describe-valid-db-instance-modifications-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/describe-valid-db-instance-modifications-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-valid-db-instance-modifications-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeValidDBInstanceModificationsResult", :http.request.configuration/action "DescribeValidDBInstanceModifications", :http.request.configuration/output-deser-fn response-describe-valid-db-instance-modifications-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.neptune/db-instance-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.neptune/invalid-db-instance-state-fault}})))))
(clojure.spec.alpha/fdef describe-valid-db-instance-modifications :args (clojure.spec.alpha/tuple :portkey.aws.neptune/describe-valid-db-instance-modifications-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/describe-valid-db-instance-modifications-result))

(clojure.core/defn describe-db-cluster-snapshots ([] (describe-db-cluster-snapshots {})) ([describe-db-cluster-snapshots-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-cluster-snapshots-message describe-db-cluster-snapshots-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-cluster-snapshot-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-db-cluster-snapshots-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBClusterSnapshotsResult", :http.request.configuration/action "DescribeDBClusterSnapshots", :http.request.configuration/output-deser-fn response-db-cluster-snapshot-message, :http.request.spec/error-spec {"DBClusterSnapshotNotFoundFault" :portkey.aws.neptune/db-cluster-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-snapshots :args (clojure.spec.alpha/? :portkey.aws.neptune/describe-db-cluster-snapshots-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-cluster-snapshot-message))

(clojure.core/defn delete-db-parameter-group ([delete-db-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-db-parameter-group-message delete-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/delete-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteDBParameterGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"InvalidDBParameterGroupStateFault" :portkey.aws.neptune/invalid-db-parameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/delete-db-parameter-group-message) :ret clojure.core/true?)

(clojure.core/defn describe-event-subscriptions ([] (describe-event-subscriptions {})) ([describe-event-subscriptions-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-event-subscriptions-message describe-event-subscriptions-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/event-subscriptions-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-event-subscriptions-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeEventSubscriptionsResult", :http.request.configuration/action "DescribeEventSubscriptions", :http.request.configuration/output-deser-fn response-event-subscriptions-message, :http.request.spec/error-spec {"SubscriptionNotFoundFault" :portkey.aws.neptune/subscription-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-event-subscriptions :args (clojure.spec.alpha/? :portkey.aws.neptune/describe-event-subscriptions-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/event-subscriptions-message))

(clojure.core/defn modify-db-instance ([modify-db-instance-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-db-instance-message modify-db-instance-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/modify-db-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/modify-db-instance-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBInstanceResult", :http.request.configuration/action "ModifyDBInstance", :http.request.configuration/output-deser-fn response-modify-db-instance-result, :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.neptune/db-instance-not-found-fault, "DomainNotFoundFault" :portkey.aws.neptune/domain-not-found-fault, "InvalidDBInstanceStateFault" :portkey.aws.neptune/invalid-db-instance-state-fault, "OptionGroupNotFoundFault" :portkey.aws.neptune/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.neptune/invalid-vpc-network-state-fault, "DBInstanceAlreadyExistsFault" :portkey.aws.neptune/db-instance-already-exists-fault, "CertificateNotFoundFault" :portkey.aws.neptune/certificate-not-found-fault, "InvalidDBSecurityGroupStateFault" :portkey.aws.neptune/invalid-db-security-group-state-fault, "StorageTypeNotSupportedFault" :portkey.aws.neptune/storage-type-not-supported-fault, "AuthorizationNotFoundFault" :portkey.aws.neptune/authorization-not-found-fault, "DBUpgradeDependencyFailureFault" :portkey.aws.neptune/db-upgrade-dependency-failure-fault, "ProvisionedIopsNotAvailableInAZFault" :portkey.aws.neptune/provisioned-iops-not-available-in-az-fault, "DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault, "StorageQuotaExceededFault" :portkey.aws.neptune/storage-quota-exceeded-fault, "InsufficientDBInstanceCapacityFault" :portkey.aws.neptune/insufficient-db-instance-capacity-fault, "DBSecurityGroupNotFoundFault" :portkey.aws.neptune/db-security-group-not-found-fault}})))))
(clojure.spec.alpha/fdef modify-db-instance :args (clojure.spec.alpha/tuple :portkey.aws.neptune/modify-db-instance-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/modify-db-instance-result))

(clojure.core/defn describe-db-cluster-parameter-groups ([] (describe-db-cluster-parameter-groups {})) ([describe-db-cluster-parameter-groups-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-cluster-parameter-groups-message describe-db-cluster-parameter-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-cluster-parameter-groups-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-db-cluster-parameter-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBClusterParameterGroupsResult", :http.request.configuration/action "DescribeDBClusterParameterGroups", :http.request.configuration/output-deser-fn response-db-cluster-parameter-groups-message, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-parameter-groups :args (clojure.spec.alpha/? :portkey.aws.neptune/describe-db-cluster-parameter-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-cluster-parameter-groups-message))

(clojure.core/defn create-db-cluster-snapshot ([create-db-cluster-snapshot-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-create-db-cluster-snapshot-message create-db-cluster-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/create-db-cluster-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/create-db-cluster-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CreateDBClusterSnapshotResult", :http.request.configuration/action "CreateDBClusterSnapshot", :http.request.configuration/output-deser-fn response-create-db-cluster-snapshot-result, :http.request.spec/error-spec {"DBClusterSnapshotAlreadyExistsFault" :portkey.aws.neptune/db-cluster-snapshot-already-exists-fault, "InvalidDBClusterStateFault" :portkey.aws.neptune/invalid-db-cluster-state-fault, "DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault, "SnapshotQuotaExceededFault" :portkey.aws.neptune/snapshot-quota-exceeded-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.neptune/invalid-db-cluster-snapshot-state-fault}})))))
(clojure.spec.alpha/fdef create-db-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.neptune/create-db-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/create-db-cluster-snapshot-result))

(clojure.core/defn describe-db-parameters ([describe-db-parameters-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-parameters-message describe-db-parameters-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-parameter-group-details, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-db-parameters-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBParametersResult", :http.request.configuration/action "DescribeDBParameters", :http.request.configuration/output-deser-fn response-db-parameter-group-details, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-parameters :args (clojure.spec.alpha/tuple :portkey.aws.neptune/describe-db-parameters-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-parameter-group-details))

(clojure.core/defn describe-db-parameter-groups ([] (describe-db-parameter-groups {})) ([describe-db-parameter-groups-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-parameter-groups-message describe-db-parameter-groups-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-parameter-groups-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-db-parameter-groups-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBParameterGroupsResult", :http.request.configuration/action "DescribeDBParameterGroups", :http.request.configuration/output-deser-fn response-db-parameter-groups-message, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-parameter-groups :args (clojure.spec.alpha/? :portkey.aws.neptune/describe-db-parameter-groups-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-parameter-groups-message))

(clojure.core/defn remove-tags-from-resource ([remove-tags-from-resource-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-remove-tags-from-resource-message remove-tags-from-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/remove-tags-from-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "RemoveTagsFromResource", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.neptune/db-instance-not-found-fault, "DBSnapshotNotFoundFault" :portkey.aws.neptune/db-snapshot-not-found-fault, "DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef remove-tags-from-resource :args (clojure.spec.alpha/tuple :portkey.aws.neptune/remove-tags-from-resource-message) :ret clojure.core/true?)

(clojure.core/defn copy-db-cluster-snapshot ([copy-db-cluster-snapshot-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-copy-db-cluster-snapshot-message copy-db-cluster-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/copy-db-cluster-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/copy-db-cluster-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "CopyDBClusterSnapshotResult", :http.request.configuration/action "CopyDBClusterSnapshot", :http.request.configuration/output-deser-fn response-copy-db-cluster-snapshot-result, :http.request.spec/error-spec {"DBClusterSnapshotAlreadyExistsFault" :portkey.aws.neptune/db-cluster-snapshot-already-exists-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.neptune/db-cluster-snapshot-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.neptune/invalid-db-cluster-state-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.neptune/invalid-db-cluster-snapshot-state-fault, "SnapshotQuotaExceededFault" :portkey.aws.neptune/snapshot-quota-exceeded-fault, "KMSKeyNotAccessibleFault" :portkey.aws.neptune/kms-key-not-accessible-fault}})))))
(clojure.spec.alpha/fdef copy-db-cluster-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.neptune/copy-db-cluster-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/copy-db-cluster-snapshot-result))

(clojure.core/defn delete-db-cluster-parameter-group ([delete-db-cluster-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-delete-db-cluster-parameter-group-message delete-db-cluster-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/delete-db-cluster-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "DeleteDBClusterParameterGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"InvalidDBParameterGroupStateFault" :portkey.aws.neptune/invalid-db-parameter-group-state-fault, "DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault}})))))
(clojure.spec.alpha/fdef delete-db-cluster-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/delete-db-cluster-parameter-group-message) :ret clojure.core/true?)

(clojure.core/defn add-role-to-db-cluster ([add-role-to-db-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-add-role-to-db-cluster-message add-role-to-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/add-role-to-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AddRoleToDBCluster", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault, "DBClusterRoleAlreadyExistsFault" :portkey.aws.neptune/db-cluster-role-already-exists-fault, "InvalidDBClusterStateFault" :portkey.aws.neptune/invalid-db-cluster-state-fault, "DBClusterRoleQuotaExceededFault" :portkey.aws.neptune/db-cluster-role-quota-exceeded-fault}})))))
(clojure.spec.alpha/fdef add-role-to-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.neptune/add-role-to-db-cluster-message) :ret clojure.core/true?)

(clojure.core/defn promote-read-replica-db-cluster ([promote-read-replica-db-cluster-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-promote-read-replica-db-cluster-message promote-read-replica-db-cluster-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/promote-read-replica-db-cluster-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/promote-read-replica-db-cluster-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "PromoteReadReplicaDBClusterResult", :http.request.configuration/action "PromoteReadReplicaDBCluster", :http.request.configuration/output-deser-fn response-promote-read-replica-db-cluster-result, :http.request.spec/error-spec {"DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault, "InvalidDBClusterStateFault" :portkey.aws.neptune/invalid-db-cluster-state-fault}})))))
(clojure.spec.alpha/fdef promote-read-replica-db-cluster :args (clojure.spec.alpha/tuple :portkey.aws.neptune/promote-read-replica-db-cluster-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/promote-read-replica-db-cluster-result))

(clojure.core/defn add-tags-to-resource ([add-tags-to-resource-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-add-tags-to-resource-message add-tags-to-resource-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/add-tags-to-resource-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper nil, :http.request.configuration/action "AddTagsToResource", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__284153__auto__] {}), :http.request.spec/error-spec {"DBInstanceNotFoundFault" :portkey.aws.neptune/db-instance-not-found-fault, "DBSnapshotNotFoundFault" :portkey.aws.neptune/db-snapshot-not-found-fault, "DBClusterNotFoundFault" :portkey.aws.neptune/db-cluster-not-found-fault}})))))
(clojure.spec.alpha/fdef add-tags-to-resource :args (clojure.spec.alpha/tuple :portkey.aws.neptune/add-tags-to-resource-message) :ret clojure.core/true?)

(clojure.core/defn restore-db-cluster-from-snapshot ([restore-db-cluster-from-snapshot-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-restore-db-cluster-from-snapshot-message restore-db-cluster-from-snapshot-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/restore-db-cluster-from-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/restore-db-cluster-from-snapshot-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "RestoreDBClusterFromSnapshotResult", :http.request.configuration/action "RestoreDBClusterFromSnapshot", :http.request.configuration/output-deser-fn response-restore-db-cluster-from-snapshot-result, :http.request.spec/error-spec {"DBClusterAlreadyExistsFault" :portkey.aws.neptune/db-cluster-already-exists-fault, "OptionGroupNotFoundFault" :portkey.aws.neptune/option-group-not-found-fault, "InvalidVPCNetworkStateFault" :portkey.aws.neptune/invalid-vpc-network-state-fault, "InsufficientStorageClusterCapacityFault" :portkey.aws.neptune/insufficient-storage-cluster-capacity-fault, "DBClusterSnapshotNotFoundFault" :portkey.aws.neptune/db-cluster-snapshot-not-found-fault, "InvalidSubnet" :portkey.aws.neptune/invalid-subnet, "DBClusterQuotaExceededFault" :portkey.aws.neptune/db-cluster-quota-exceeded-fault, "DBSubnetGroupNotFoundFault" :portkey.aws.neptune/db-subnet-group-not-found-fault, "KMSKeyNotAccessibleFault" :portkey.aws.neptune/kms-key-not-accessible-fault, "InvalidDBClusterSnapshotStateFault" :portkey.aws.neptune/invalid-db-cluster-snapshot-state-fault, "StorageQuotaExceededFault" :portkey.aws.neptune/storage-quota-exceeded-fault, "InvalidRestoreFault" :portkey.aws.neptune/invalid-restore-fault, "InsufficientDBClusterCapacityFault" :portkey.aws.neptune/insufficient-db-cluster-capacity-fault, "InvalidDBSnapshotStateFault" :portkey.aws.neptune/invalid-db-snapshot-state-fault, "DBSnapshotNotFoundFault" :portkey.aws.neptune/db-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef restore-db-cluster-from-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.neptune/restore-db-cluster-from-snapshot-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/restore-db-cluster-from-snapshot-result))

(clojure.core/defn modify-db-parameter-group ([modify-db-parameter-group-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-modify-db-parameter-group-message modify-db-parameter-group-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/db-parameter-group-name-message, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/modify-db-parameter-group-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "ModifyDBParameterGroupResult", :http.request.configuration/action "ModifyDBParameterGroup", :http.request.configuration/output-deser-fn response-db-parameter-group-name-message, :http.request.spec/error-spec {"DBParameterGroupNotFoundFault" :portkey.aws.neptune/db-parameter-group-not-found-fault, "InvalidDBParameterGroupStateFault" :portkey.aws.neptune/invalid-db-parameter-group-state-fault}})))))
(clojure.spec.alpha/fdef modify-db-parameter-group :args (clojure.spec.alpha/tuple :portkey.aws.neptune/modify-db-parameter-group-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/db-parameter-group-name-message))

(clojure.core/defn describe-db-cluster-snapshot-attributes ([describe-db-cluster-snapshot-attributes-messageinput] (clojure.core/let [request-function-result__284154__auto__ (req-describe-db-cluster-snapshot-attributes-message describe-db-cluster-snapshot-attributes-messageinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__284154__auto__ {:http.request.configuration/endpoints portkey.aws.neptune/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.neptune/describe-db-cluster-snapshot-attributes-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2014-10-31", :http.request.configuration/service-id "Neptune", :http.request.spec/input-spec :portkey.aws.neptune/describe-db-cluster-snapshot-attributes-message, :http.request.configuration/protocol "query", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/result-wrapper "DescribeDBClusterSnapshotAttributesResult", :http.request.configuration/action "DescribeDBClusterSnapshotAttributes", :http.request.configuration/output-deser-fn response-describe-db-cluster-snapshot-attributes-result, :http.request.spec/error-spec {"DBClusterSnapshotNotFoundFault" :portkey.aws.neptune/db-cluster-snapshot-not-found-fault}})))))
(clojure.spec.alpha/fdef describe-db-cluster-snapshot-attributes :args (clojure.spec.alpha/tuple :portkey.aws.neptune/describe-db-cluster-snapshot-attributes-message) :ret (clojure.spec.alpha/and :portkey.aws.neptune/describe-db-cluster-snapshot-attributes-result))
