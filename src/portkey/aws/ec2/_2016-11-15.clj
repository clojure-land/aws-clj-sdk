(ns portkey.aws.ec2.-2016-11-15 (:require [portkey.aws]))

(def
 endpoints
 '{"ap-northeast-1"
   {:credential-scope {:service "ec2", :region "ap-northeast-1"},
    :ssl-common-name "ec2.ap-northeast-1.amazonaws.com",
    :endpoint "https://ec2.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "ec2", :region "eu-west-1"},
    :ssl-common-name "ec2.eu-west-1.amazonaws.com",
    :endpoint "https://ec2.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "ec2", :region "us-east-2"},
    :ssl-common-name "ec2.us-east-2.amazonaws.com",
    :endpoint "https://ec2.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope {:service "ec2", :region "ap-southeast-2"},
    :ssl-common-name "ec2.ap-southeast-2.amazonaws.com",
    :endpoint "https://ec2.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "cn-north-1"
   {:credential-scope {:service "ec2", :region "cn-north-1"},
    :ssl-common-name "ec2.cn-north-1.amazonaws.com.cn",
    :endpoint "https://ec2.cn-north-1.amazonaws.com.cn",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "ec2", :region "sa-east-1"},
    :ssl-common-name "ec2.sa-east-1.amazonaws.com",
    :endpoint "https://ec2.sa-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope {:service "ec2", :region "ap-southeast-1"},
    :ssl-common-name "ec2.ap-southeast-1.amazonaws.com",
    :endpoint "https://ec2.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "cn-northwest-1"
   {:credential-scope {:service "ec2", :region "cn-northwest-1"},
    :ssl-common-name "ec2.cn-northwest-1.amazonaws.com.cn",
    :endpoint "https://ec2.cn-northwest-1.amazonaws.com.cn",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope {:service "ec2", :region "ap-northeast-2"},
    :ssl-common-name "ec2.ap-northeast-2.amazonaws.com",
    :endpoint "https://ec2.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-west-3"
   {:credential-scope {:service "ec2", :region "eu-west-3"},
    :ssl-common-name "ec2.eu-west-3.amazonaws.com",
    :endpoint "https://ec2.eu-west-3.amazonaws.com",
    :signature-version :v4},
   "ca-central-1"
   {:credential-scope {:service "ec2", :region "ca-central-1"},
    :ssl-common-name "ec2.ca-central-1.amazonaws.com",
    :endpoint "https://ec2.ca-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "ec2", :region "eu-central-1"},
    :ssl-common-name "ec2.eu-central-1.amazonaws.com",
    :endpoint "https://ec2.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "ec2", :region "eu-west-2"},
    :ssl-common-name "ec2.eu-west-2.amazonaws.com",
    :endpoint "https://ec2.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-gov-west-1"
   {:credential-scope {:service "ec2", :region "us-gov-west-1"},
    :ssl-common-name "ec2.us-gov-west-1.amazonaws.com",
    :endpoint "https://ec2.us-gov-west-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "ec2", :region "us-west-2"},
    :ssl-common-name "ec2.us-west-2.amazonaws.com",
    :endpoint "https://ec2.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "ec2", :region "us-east-1"},
    :ssl-common-name "ec2.us-east-1.amazonaws.com",
    :endpoint "https://ec2.us-east-1.amazonaws.com",
    :signature-version :v4},
   "us-west-1"
   {:credential-scope {:service "ec2", :region "us-west-1"},
    :ssl-common-name "ec2.us-west-1.amazonaws.com",
    :endpoint "https://ec2.us-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-south-1"
   {:credential-scope {:service "ec2", :region "ap-south-1"},
    :ssl-common-name "ec2.ap-south-1.amazonaws.com",
    :endpoint "https://ec2.ap-south-1.amazonaws.com",
    :signature-version :v4}})

(clojure.core/declare ser-zone-name-string-list)

(clojure.core/declare ser-launch-template-instance-network-interface-specification-request-list)

(clojure.core/declare ser-scheduled-instances-monitoring)

(clojure.core/declare ser-spot-allocation-strategy)

(clojure.core/declare ser-permission-group)

(clojure.core/declare ser-launch-template-cpu-options-request)

(clojure.core/declare ser-launch-template-placement-request)

(clojure.core/declare ser-launch-template-config-list)

(clojure.core/declare ser-double)

(clojure.core/declare ser-cpu-options-request)

(clojure.core/declare ser-private-ip-address-config-set)

(clojure.core/declare ser-ebs-instance-block-device-specification)

(clojure.core/declare ser-scheduled-instances-ipv-6-address)

(clojure.core/declare ser-target-groups-config)

(clojure.core/declare ser-reset-fpga-image-attribute-name)

(clojure.core/declare ser-on-demand-allocation-strategy)

(clojure.core/declare ser-load-permission-modifications)

(clojure.core/declare ser-vpc-endpoint-type)

(clojure.core/declare ser-storage)

(clojure.core/declare ser-value-string-list)

(clojure.core/declare ser-peering-connection-options-request)

(clojure.core/declare ser-customer-gateway-id-string-list)

(clojure.core/declare ser-public-ip-string-list)

(clojure.core/declare ser-filter)

(clojure.core/declare ser-instance-ipv-6-address-request)

(clojure.core/declare ser-export-task-id-string-list)

(clojure.core/declare ser-target-groups)

(clojure.core/declare ser-host-reservation-id-set)

(clojure.core/declare ser-ipv-6-range-list)

(clojure.core/declare ser-vpc-classic-link-id-list)

(clojure.core/declare ser-prefix-list-id)

(clojure.core/declare ser-spot-instance-request-id-list)

(clojure.core/declare ser-security-group-string-list)

(clojure.core/declare ser-vpn-connection-id-string-list)

(clojure.core/declare ser-architecture-values)

(clojure.core/declare ser-blob-attribute-value)

(clojure.core/declare ser-export-environment)

(clojure.core/declare ser-fleet-launch-template-config-request)

(clojure.core/declare ser-fleet-identifier)

(clojure.core/declare ser-scheduled-instances-private-ip-address-config)

(clojure.core/declare ser-product-code-string-list)

(clojure.core/declare ser-association-id-list)

(clojure.core/declare ser-spot-placement)

(clojure.core/declare ser-occurrence-day-request-set)

(clojure.core/declare ser-launch-template-specification)

(clojure.core/declare ser-spot-instance-type)

(clojure.core/declare ser-ebs-block-device)

(clojure.core/declare ser-new-dhcp-configuration)

(clojure.core/declare ser-spot-fleet-tag-specification-list)

(clojure.core/declare ser-placement)

(clojure.core/declare ser-network-interface-id-list)

(clojure.core/declare ser-request-host-id-set)

(clojure.core/declare ser-reserved-instances-configuration)

(clojure.core/declare ser-interface-permission-type)

(clojure.core/declare ser-launch-template-instance-network-interface-specification-request)

(clojure.core/declare ser-fleet-launch-template-specification)

(clojure.core/declare ser-vpn-connection-options-specification)

(clojure.core/declare ser-tenancy)

(clojure.core/declare ser-reserved-instances-offering-id-string-list)

(clojure.core/declare ser-scheduled-instances-security-group-id-set)

(clojure.core/declare ser-affinity)

(clojure.core/declare ser-spot-market-options)

(clojure.core/declare ser-group-name-string-list)

(clojure.core/declare ser-scheduled-instances-placement)

(clojure.core/declare ser-key-name-string-list)

(clojure.core/declare ser-scheduled-instances-block-device-mapping)

(clojure.core/declare ser-account-attribute-name)

(clojure.core/declare ser-fleet-launch-template-overrides-request)

(clojure.core/declare ser-vpc-tenancy)

(clojure.core/declare ser-instance-type)

(clojure.core/declare ser-instance-type-list)

(clojure.core/declare ser-instance-id-string-list)

(clojure.core/declare ser-image-attribute-name)

(clojure.core/declare ser-create-volume-permission)

(clojure.core/declare ser-iam-instance-profile-specification)

(clojure.core/declare ser-placement-group-string-list)

(clojure.core/declare ser-volume-detail)

(clojure.core/declare ser-launch-template-spot-market-options-request)

(clojure.core/declare ser-host-tenancy)

(clojure.core/declare ser-storage-location)

(clojure.core/declare ser-icmp-type-code)

(clojure.core/declare ser-fpga-image-attribute-name)

(clojure.core/declare ser-elastic-gpu-specification)

(clojure.core/declare ser-instance-ipv-6-address-list)

(clojure.core/declare ser-volume-attribute-name)

(clojure.core/declare ser-fleet-event-type)

(clojure.core/declare ser-scheduled-instance-id-request-set)

(clojure.core/declare ser-attribute-boolean-value)

(clojure.core/declare ser-vpc-id-string-list)

(clojure.core/declare ser-price-schedule-specification)

(clojure.core/declare ser-export-to-s-3-task-specification)

(clojure.core/declare ser-rule-action)

(clojure.core/declare ser-fleet-type)

(clojure.core/declare ser-request-launch-template-data)

(clojure.core/declare ser-group-identifier-list)

(clojure.core/declare ser-price-schedule-specification-list)

(clojure.core/declare ser-fleet-launch-template-config-list-request)

(clojure.core/declare ser-elastic-gpu-id-set)

(clojure.core/declare ser-traffic-type)

(clojure.core/declare ser-allocation-id-list)

(clojure.core/declare ser-create-volume-permission-list)

(clojure.core/declare ser-image-disk-container-list)

(clojure.core/declare ser-event-type)

(clojure.core/declare ser-restorable-by-string-list)

(clojure.core/declare ser-next-token)

(clojure.core/declare ser-slot-start-time-range-request)

(clojure.core/declare ser-elastic-gpu-specifications)

(clojure.core/declare ser-excess-capacity-termination-policy)

(clojure.core/declare ser-spot-fleet-monitoring)

(clojure.core/declare ser-instance-block-device-mapping-specification)

(clojure.core/declare ser-load-permission-list-request)

(clojure.core/declare ser-instance-credit-specification-request)

(clojure.core/declare ser-group-ids)

(clojure.core/declare ser-user-id-group-pair-list)

(clojure.core/declare ser-s-3-storage)

(clojure.core/declare ser-launch-permission-list)

(clojure.core/declare ser-reserved-instances-id-string-list)

(clojure.core/declare ser-instance-ipv-6-address)

(clojure.core/declare ser-group-identifier)

(clojure.core/declare ser-instance-ipv-6-address-list-request)

(clojure.core/declare ser-spot-instance-interruption-behavior)

(clojure.core/declare ser-run-instances-monitoring-enabled)

(clojure.core/declare ser-disk-image-list)

(clojure.core/declare ser-tag-list)

(clojure.core/declare ser-client-data)

(clojure.core/declare ser-image-disk-container)

(clojure.core/declare ser-spot-fleet-request-config-data)

(clojure.core/declare ser-launch-template-overrides)

(clojure.core/declare ser-launch-template-instance-market-options-request)

(clojure.core/declare ser-conversion-id-string-list)

(clojure.core/declare ser-allocation-strategy)

(clojure.core/declare ser-attribute-value)

(clojure.core/declare ser-private-ip-address-specification-list)

(clojure.core/declare ser-auto-placement)

(clojure.core/declare ser-launch-template-tag-specification-request-list)

(clojure.core/declare ser-prefix-list-id-list)

(clojure.core/declare ser-vpc-attribute-name)

(clojure.core/declare ser-instance-block-device-mapping-specification-list)

(clojure.core/declare ser-load-permission-request)

(clojure.core/declare ser-fpga-image-id-list)

(clojure.core/declare ser-placement-strategy)

(clojure.core/declare ser-user-group-string-list)

(clojure.core/declare ser-scheduled-instances-ebs)

(clojure.core/declare ser-target-configuration-request-set)

(clojure.core/declare ser-instance-interruption-behavior)

(clojure.core/declare ser-volume-id-string-list)

(clojure.core/declare ser-dhcp-options-id-string-list)

(clojure.core/declare serscope)

(clojure.core/declare ser-reset-image-attribute-name)

(clojure.core/declare ser-scheduled-instances-launch-specification)

(clojure.core/declare ser-product-description-list)

(clojure.core/declare ser-fleet-id-set)

(clojure.core/declare ser-vpn-tunnel-options-specification)

(clojure.core/declare ser-group-id-string-list)

(clojure.core/declare ser-snapshot-disk-container)

(clojure.core/declare ser-instance-credit-specification-list-request)

(clojure.core/declare ser-log-destination-type)

(clojure.core/declare ser-launch-specs-list)

(clojure.core/declare ser-launch-template-ebs-block-device-request)

(clojure.core/declare ser-load-balancers-config)

(clojure.core/declare ser-integer)

(clojure.core/declare ser-string)

(clojure.core/declare ser-classic-load-balancer)

(clojure.core/declare ser-ip-permission)

(clojure.core/declare ser-ip-permission-list)

(clojure.core/declare ser-slot-date-time-range-request)

(clojure.core/declare ser-ri-product-description)

(clojure.core/declare ser-reserved-instance-id-set)

(clojure.core/declare ser-launch-template-config)

(clojure.core/declare ser-disk-image-format)

(clojure.core/declare ser-scheduled-instances-network-interface-set)

(clojure.core/declare ser-security-group-id-string-list)

(clojure.core/declare ser-domain-type)

(clojure.core/declare ser-launch-template-name)

(clojure.core/declare ser-flow-logs-resource-type)

(clojure.core/declare ser-fleet-launch-template-overrides-list-request)

(clojure.core/declare ser-resource-type)

(clojure.core/declare ser-ipv-6-address-list)

(clojure.core/declare ser-resource-list)

(clojure.core/declare ser-operation-type)

(clojure.core/declare ser-fleet-on-demand-allocation-strategy)

(clojure.core/declare ser-snapshot-attribute-name)

(clojure.core/declare ser-currency-code-values)

(clojure.core/declare ser-network-interface-attribute)

(clojure.core/declare ser-report-instance-reason-codes)

(clojure.core/declare ser-billing-product-list)

(clojure.core/declare ser-bundle-id-string-list)

(clojure.core/declare ser-egress-only-internet-gateway-id-list)

(clojure.core/declare ser-volume-type)

(clojure.core/declare ser-account-attribute-name-string-list)

(clojure.core/declare ser-target-capacity-specification-request)

(clojure.core/declare ser-tunnel-options-list)

(clojure.core/declare ser-launch-permission-modifications)

(clojure.core/declare ser-classic-load-balancers-config)

(clojure.core/declare ser-tag-specification-list)

(clojure.core/declare ser-long)

(clojure.core/declare ser-subnet-id-string-list)

(clojure.core/declare ser-reserved-instance-limit-price)

(clojure.core/declare ser-tag-specification)

(clojure.core/declare ser-region-name-string-list)

(clojure.core/declare ser-scheduled-instance-recurrence-request)

(clojure.core/declare ser-version-description)

(clojure.core/declare ser-user-bucket)

(clojure.core/declare ser-scheduled-instances-network-interface)

(clojure.core/declare ser-default-target-capacity-type)

(clojure.core/declare ser-target-configuration-request)

(clojure.core/declare ser-reserved-instances-configuration-list)

(clojure.core/declare ser-instance-network-interface-specification-list)

(clojure.core/declare ser-block-device-mapping)

(clojure.core/declare ser-max-results)

(clojure.core/declare ser-tag)

(clojure.core/declare ser-spot-fleet-tag-specification)

(clojure.core/declare ser-user-id-string-list)

(clojure.core/declare ser-executable-by-string-list)

(clojure.core/declare ser-launch-template-name-string-list)

(clojure.core/declare ser-instance-market-options-request)

(clojure.core/declare ser-platform-values)

(clojure.core/declare ser-disk-image)

(clojure.core/declare ser-port-range)

(clojure.core/declare ser-spot-fleet-launch-specification)

(clojure.core/declare ser-ip-range)

(clojure.core/declare ser-version-string-list)

(clojure.core/declare ser-block-device-mapping-request-list)

(clojure.core/declare ser-container-format)

(clojure.core/declare ser-purchase-request-set)

(clojure.core/declare ser-new-dhcp-configuration-list)

(clojure.core/declare ser-market-type)

(clojure.core/declare ser-fleet-launch-template-specification-request)

(clojure.core/declare ser-block-device-mapping-list)

(clojure.core/declare ser-blob)

(clojure.core/declare ser-gateway-type)

(clojure.core/declare ser-scheduled-instances-iam-instance-profile)

(clojure.core/declare ser-report-status-type)

(clojure.core/declare ser-ip-range-list)

(clojure.core/declare ser-import-instance-launch-specification)

(clojure.core/declare ser-classic-load-balancers)

(clojure.core/declare ser-spot-options-request)

(clojure.core/declare ser-scheduled-instances-block-device-mapping-set)

(clojure.core/declare ser-purchase-request)

(clojure.core/declare ser-reserved-instances-modification-id-string-list)

(clojure.core/declare ser-target-group)

(clojure.core/declare ser-resource-id-list)

(clojure.core/declare ser-on-demand-options-request)

(clojure.core/declare ser-ipv-6-address)

(clojure.core/declare ser-network-interface-permission-id-list)

(clojure.core/declare ser-offering-class-type)

(clojure.core/declare ser-request-host-id-list)

(clojure.core/declare ser-launch-template-overrides-list)

(clojure.core/declare ser-image-id-string-list)

(clojure.core/declare ser-launch-template-iam-instance-profile-specification-request)

(clojure.core/declare ser-instance-attribute-name)

(clojure.core/declare ser-launch-template-block-device-mapping-request-list)

(clojure.core/declare ser-disk-image-detail)

(clojure.core/declare ser-user-data)

(clojure.core/declare ser-offering-type-values)

(clojure.core/declare ser-launch-template-tag-specification-request)

(clojure.core/declare ser-launch-template-block-device-mapping-request)

(clojure.core/declare ser-network-interface-attachment-changes)

(clojure.core/declare ser-private-ip-address-string-list)

(clojure.core/declare ser-credit-specification-request)

(clojure.core/declare ser-scheduled-instances-ipv-6-address-list)

(clojure.core/declare ser-owner-string-list)

(clojure.core/declare ser-create-volume-permission-modifications)

(clojure.core/declare ser-fleet-excess-capacity-termination-policy)

(clojure.core/declare ser-reason-codes-list)

(clojure.core/declare ser-filter-list)

(clojure.core/declare ser-launch-permission)

(clojure.core/declare ser-ipv-6-range)

(clojure.core/declare ser-egress-only-internet-gateway-id)

(clojure.core/declare ser-vpn-gateway-id-string-list)

(clojure.core/declare ser-private-ip-address-specification)

(clojure.core/declare ser-request-spot-launch-specification)

(clojure.core/declare ser-elastic-gpu-specification-list)

(clojure.core/declare ser-user-id-group-pair)

(clojure.core/declare ser-launch-templates-monitoring-request)

(clojure.core/declare ser-import-task-id-list)

(clojure.core/declare ser-date-time)

(clojure.core/declare ser-snapshot-id-string-list)

(clojure.core/declare ser-shutdown-behavior)

(clojure.core/declare ser-boolean)

(clojure.core/declare ser-instance-network-interface-specification)

(clojure.core/defn- ser-zone-name-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ZoneName"}))) input), :shape "ZoneNameStringList", :type "list"})

(clojure.core/defn- ser-launch-template-instance-network-interface-specification-request-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-launch-template-instance-network-interface-specification-request coll) #:http.request.field{:shape "LaunchTemplateInstanceNetworkInterfaceSpecificationRequest", :location-name "InstanceNetworkInterfaceSpecification"}))) input), :shape "LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList", :type "list"})

(clojure.core/defn- ser-scheduled-instances-monitoring [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstancesMonitoring", :type "structure"} (clojure.core/contains? input :enabled) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :enabled)) #:http.request.field{:name "Enabled", :shape "Boolean"}))))

(clojure.core/defn- ser-spot-allocation-strategy [input] #:http.request.field{:value (clojure.core/get {"lowest-price" "lowest-price", :lowestprice "lowest-price", "diversified" "diversified", :diversified "diversified"} input), :shape "SpotAllocationStrategy"})

(clojure.core/defn- ser-permission-group [input] #:http.request.field{:value (clojure.core/get {"all" "all", :all "all"} input), :shape "PermissionGroup"})

(clojure.core/defn- ser-launch-template-cpu-options-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LaunchTemplateCpuOptionsRequest", :type "structure"} (clojure.core/contains? input :core-count) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :core-count)) #:http.request.field{:name "CoreCount", :shape "Integer"})) (clojure.core/contains? input :threads-per-core) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :threads-per-core)) #:http.request.field{:name "ThreadsPerCore", :shape "Integer"}))))

(clojure.core/defn- ser-launch-template-placement-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LaunchTemplatePlacementRequest", :type "structure"} (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :affinity) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :affinity)) #:http.request.field{:name "Affinity", :shape "String"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String"})) (clojure.core/contains? input :host-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :host-id)) #:http.request.field{:name "HostId", :shape "String"})) (clojure.core/contains? input :tenancy) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tenancy (input :tenancy)) #:http.request.field{:name "Tenancy", :shape "Tenancy"})) (clojure.core/contains? input :spread-domain) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :spread-domain)) #:http.request.field{:name "SpreadDomain", :shape "String"}))))

(clojure.core/defn- ser-launch-template-config-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-launch-template-config coll) #:http.request.field{:shape "LaunchTemplateConfig", :location-name "item"}))) input), :shape "LaunchTemplateConfigList", :type "list"})

(clojure.core/defn- ser-double [input] #:http.request.field{:value input, :shape "Double"})

(clojure.core/defn- ser-cpu-options-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "CpuOptionsRequest", :type "structure"} (clojure.core/contains? input :core-count) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :core-count)) #:http.request.field{:name "CoreCount", :shape "Integer"})) (clojure.core/contains? input :threads-per-core) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :threads-per-core)) #:http.request.field{:name "ThreadsPerCore", :shape "Integer"}))))

(clojure.core/defn- ser-private-ip-address-config-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-scheduled-instances-private-ip-address-config coll) #:http.request.field{:shape "ScheduledInstancesPrivateIpAddressConfig", :location-name "PrivateIpAddressConfigSet"}))) input), :shape "PrivateIpAddressConfigSet", :type "list"})

(clojure.core/defn- ser-ebs-instance-block-device-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "EbsInstanceBlockDeviceSpecification", :type "structure"} (clojure.core/contains? input :delete-on-termination) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :delete-on-termination)) #:http.request.field{:name "DeleteOnTermination", :shape "Boolean", :location-name "deleteOnTermination"})) (clojure.core/contains? input :volume-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String", :location-name "volumeId"}))))

(clojure.core/defn- ser-scheduled-instances-ipv-6-address [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstancesIpv6Address", :type "structure"} (clojure.core/contains? input :ipv-6-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ipv-6-address (input :ipv-6-address)) #:http.request.field{:name "Ipv6Address", :shape "Ipv6Address"}))))

(clojure.core/defn- ser-target-groups-config [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-target-groups (:target-groups input)) #:http.request.field{:name "TargetGroups", :shape "TargetGroups", :location-name "targetGroups"})], :shape "TargetGroupsConfig", :type "structure"}))

(clojure.core/defn- ser-reset-fpga-image-attribute-name [input] #:http.request.field{:value (clojure.core/get {"loadPermission" "loadPermission", :load-permission "loadPermission"} input), :shape "ResetFpgaImageAttributeName"})

(clojure.core/defn- ser-on-demand-allocation-strategy [input] #:http.request.field{:value (clojure.core/get {"lowestPrice" "lowestPrice", :lowest-price "lowestPrice", "prioritized" "prioritized", :prioritized "prioritized"} input), :shape "OnDemandAllocationStrategy"})

(clojure.core/defn- ser-load-permission-modifications [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LoadPermissionModifications", :type "structure"} (clojure.core/contains? input :add) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-load-permission-list-request (input :add)) #:http.request.field{:name "Add", :shape "LoadPermissionListRequest"})) (clojure.core/contains? input :remove) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-load-permission-list-request (input :remove)) #:http.request.field{:name "Remove", :shape "LoadPermissionListRequest"}))))

(clojure.core/defn- ser-vpc-endpoint-type [input] #:http.request.field{:value (clojure.core/get {"Interface" "Interface", :interface "Interface", "Gateway" "Gateway", :gateway "Gateway"} input), :shape "VpcEndpointType"})

(clojure.core/defn- ser-storage [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Storage", :type "structure"} (clojure.core/contains? input :s-3) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-s-3-storage (input :s-3)) #:http.request.field{:name "S3", :shape "S3Storage"}))))

(clojure.core/defn- ser-value-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "ValueStringList", :type "list"})

(clojure.core/defn- ser-peering-connection-options-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "PeeringConnectionOptionsRequest", :type "structure"} (clojure.core/contains? input :allow-dns-resolution-from-remote-vpc) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :allow-dns-resolution-from-remote-vpc)) #:http.request.field{:name "AllowDnsResolutionFromRemoteVpc", :shape "Boolean"})) (clojure.core/contains? input :allow-egress-from-local-classic-link-to-remote-vpc) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :allow-egress-from-local-classic-link-to-remote-vpc)) #:http.request.field{:name "AllowEgressFromLocalClassicLinkToRemoteVpc", :shape "Boolean"})) (clojure.core/contains? input :allow-egress-from-local-vpc-to-remote-classic-link) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :allow-egress-from-local-vpc-to-remote-classic-link)) #:http.request.field{:name "AllowEgressFromLocalVpcToRemoteClassicLink", :shape "Boolean"}))))

(clojure.core/defn- ser-customer-gateway-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "CustomerGatewayId"}))) input), :shape "CustomerGatewayIdStringList", :type "list"})

(clojure.core/defn- ser-public-ip-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "PublicIp"}))) input), :shape "PublicIpStringList", :type "list"})

(clojure.core/defn- ser-filter [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Filter", :type "structure"} (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"})) (clojure.core/contains? input :values) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :values)) #:http.request.field{:name "Values", :shape "ValueStringList", :location-name "Value"}))))

(clojure.core/defn- ser-instance-ipv-6-address-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "InstanceIpv6AddressRequest", :type "structure"} (clojure.core/contains? input :ipv-6-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ipv-6-address)) #:http.request.field{:name "Ipv6Address", :shape "String"}))))

(clojure.core/defn- ser-export-task-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ExportTaskId"}))) input), :shape "ExportTaskIdStringList", :type "list"})

(clojure.core/defn- ser-target-groups [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-target-group coll) #:http.request.field{:shape "TargetGroup", :location-name "item"}))) input), :shape "TargetGroups", :type "list", :max 5, :min 1})

(clojure.core/defn- ser-host-reservation-id-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "HostReservationIdSet", :type "list"})

(clojure.core/defn- ser-ipv-6-range-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-ipv-6-range coll) #:http.request.field{:shape "Ipv6Range", :location-name "item"}))) input), :shape "Ipv6RangeList", :type "list"})

(clojure.core/defn- ser-vpc-classic-link-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "VpcId"}))) input), :shape "VpcClassicLinkIdList", :type "list"})

(clojure.core/defn- ser-prefix-list-id [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "PrefixListId", :type "structure"} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"})) (clojure.core/contains? input :prefix-list-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :prefix-list-id)) #:http.request.field{:name "PrefixListId", :shape "String", :location-name "prefixListId"}))))

(clojure.core/defn- ser-spot-instance-request-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SpotInstanceRequestId"}))) input), :shape "SpotInstanceRequestIdList", :type "list"})

(clojure.core/defn- ser-security-group-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SecurityGroup"}))) input), :shape "SecurityGroupStringList", :type "list"})

(clojure.core/defn- ser-vpn-connection-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "VpnConnectionId"}))) input), :shape "VpnConnectionIdStringList", :type "list"})

(clojure.core/defn- ser-architecture-values [input] #:http.request.field{:value (clojure.core/get {"i386" "i386", :i-386 "i386", "x86_64" "x86_64", :x-86-64 "x86_64"} input), :shape "ArchitectureValues"})

(clojure.core/defn- ser-blob-attribute-value [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "BlobAttributeValue", :type "structure"} (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-blob (input :value)) #:http.request.field{:name "Value", :shape "Blob", :location-name "value"}))))

(clojure.core/defn- ser-export-environment [input] #:http.request.field{:value (clojure.core/get {"citrix" "citrix", :citrix "citrix", "vmware" "vmware", :vmware "vmware", "microsoft" "microsoft", :microsoft "microsoft"} input), :shape "ExportEnvironment"})

(clojure.core/defn- ser-fleet-launch-template-config-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "FleetLaunchTemplateConfigRequest", :type "structure"} (clojure.core/contains? input :launch-template-specification) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-fleet-launch-template-specification-request (input :launch-template-specification)) #:http.request.field{:name "LaunchTemplateSpecification", :shape "FleetLaunchTemplateSpecificationRequest"})) (clojure.core/contains? input :overrides) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-fleet-launch-template-overrides-list-request (input :overrides)) #:http.request.field{:name "Overrides", :shape "FleetLaunchTemplateOverridesListRequest"}))))

(clojure.core/defn- ser-fleet-identifier [input] #:http.request.field{:value input, :shape "FleetIdentifier"})

(clojure.core/defn- ser-scheduled-instances-private-ip-address-config [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstancesPrivateIpAddressConfig", :type "structure"} (clojure.core/contains? input :primary) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :primary)) #:http.request.field{:name "Primary", :shape "Boolean"})) (clojure.core/contains? input :private-ip-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :private-ip-address)) #:http.request.field{:name "PrivateIpAddress", :shape "String"}))))

(clojure.core/defn- ser-product-code-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ProductCode"}))) input), :shape "ProductCodeStringList", :type "list"})

(clojure.core/defn- ser-association-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "AssociationId"}))) input), :shape "AssociationIdList", :type "list"})

(clojure.core/defn- ser-spot-placement [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "SpotPlacement", :type "structure"} (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String", :location-name "availabilityZone"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String", :location-name "groupName"})) (clojure.core/contains? input :tenancy) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tenancy (input :tenancy)) #:http.request.field{:name "Tenancy", :shape "Tenancy", :location-name "tenancy"}))))

(clojure.core/defn- ser-occurrence-day-request-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-integer coll) #:http.request.field{:shape "Integer", :location-name "OccurenceDay"}))) input), :shape "OccurrenceDayRequestSet", :type "list"})

(clojure.core/defn- ser-launch-template-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LaunchTemplateSpecification", :type "structure"} (clojure.core/contains? input :launch-template-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :launch-template-id)) #:http.request.field{:name "LaunchTemplateId", :shape "String"})) (clojure.core/contains? input :launch-template-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :launch-template-name)) #:http.request.field{:name "LaunchTemplateName", :shape "String"})) (clojure.core/contains? input :version) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :version)) #:http.request.field{:name "Version", :shape "String"}))))

(clojure.core/defn- ser-spot-instance-type [input] #:http.request.field{:value (clojure.core/get {"one-time" "one-time", :onetime "one-time", "persistent" "persistent", :persistent "persistent"} input), :shape "SpotInstanceType"})

(clojure.core/defn- ser-ebs-block-device [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "EbsBlockDevice", :type "structure"} (clojure.core/contains? input :delete-on-termination) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :delete-on-termination)) #:http.request.field{:name "DeleteOnTermination", :shape "Boolean", :location-name "deleteOnTermination"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :iops)) #:http.request.field{:name "Iops", :shape "Integer", :location-name "iops"})) (clojure.core/contains? input :snapshot-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String", :location-name "snapshotId"})) (clojure.core/contains? input :volume-size) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :volume-size)) #:http.request.field{:name "VolumeSize", :shape "Integer", :location-name "volumeSize"})) (clojure.core/contains? input :volume-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-volume-type (input :volume-type)) #:http.request.field{:name "VolumeType", :shape "VolumeType", :location-name "volumeType"})) (clojure.core/contains? input :encrypted) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :encrypted)) #:http.request.field{:name "Encrypted", :shape "Boolean", :location-name "encrypted"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"}))))

(clojure.core/defn- ser-new-dhcp-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "NewDhcpConfiguration", :type "structure"} (clojure.core/contains? input :key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key)) #:http.request.field{:name "Key", :shape "String", :location-name "key"})) (clojure.core/contains? input :values) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :values)) #:http.request.field{:name "Values", :shape "ValueStringList", :location-name "Value"}))))

(clojure.core/defn- ser-spot-fleet-tag-specification-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-spot-fleet-tag-specification coll) #:http.request.field{:shape "SpotFleetTagSpecification", :location-name "item"}))) input), :shape "SpotFleetTagSpecificationList", :type "list"})

(clojure.core/defn- ser-placement [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Placement", :type "structure"} (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String", :location-name "availabilityZone"})) (clojure.core/contains? input :affinity) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :affinity)) #:http.request.field{:name "Affinity", :shape "String", :location-name "affinity"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String", :location-name "groupName"})) (clojure.core/contains? input :host-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :host-id)) #:http.request.field{:name "HostId", :shape "String", :location-name "hostId"})) (clojure.core/contains? input :tenancy) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tenancy (input :tenancy)) #:http.request.field{:name "Tenancy", :shape "Tenancy", :location-name "tenancy"})) (clojure.core/contains? input :spread-domain) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :spread-domain)) #:http.request.field{:name "SpreadDomain", :shape "String", :location-name "spreadDomain"}))))

(clojure.core/defn- ser-network-interface-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "NetworkInterfaceIdList", :type "list"})

(clojure.core/defn- ser-request-host-id-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "RequestHostIdSet", :type "list"})

(clojure.core/defn- ser-reserved-instances-configuration [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ReservedInstancesConfiguration", :type "structure"} (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String", :location-name "availabilityZone"})) (clojure.core/contains? input :instance-count) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :instance-count)) #:http.request.field{:name "InstanceCount", :shape "Integer", :location-name "instanceCount"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-type (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "InstanceType", :location-name "instanceType"})) (clojure.core/contains? input :platform) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :platform)) #:http.request.field{:name "Platform", :shape "String", :location-name "platform"})) (clojure.core/contains? input :scope) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (serscope (input :scope)) #:http.request.field{:name "Scope", :shape "scope", :location-name "scope"}))))

(clojure.core/defn- ser-interface-permission-type [input] #:http.request.field{:value (clojure.core/get {"INSTANCE-ATTACH" "INSTANCE-ATTACH", :instanceattach "INSTANCE-ATTACH", "EIP-ASSOCIATE" "EIP-ASSOCIATE", :eipassociate "EIP-ASSOCIATE"} input), :shape "InterfacePermissionType"})

(clojure.core/defn- ser-launch-template-instance-network-interface-specification-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LaunchTemplateInstanceNetworkInterfaceSpecificationRequest", :type "structure"} (clojure.core/contains? input :associate-public-ip-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :associate-public-ip-address)) #:http.request.field{:name "AssociatePublicIpAddress", :shape "Boolean"})) (clojure.core/contains? input :ipv-6-addresses) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-ipv-6-address-list-request (input :ipv-6-addresses)) #:http.request.field{:name "Ipv6Addresses", :shape "InstanceIpv6AddressListRequest"})) (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String"})) (clojure.core/contains? input :network-interface-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String"})) (clojure.core/contains? input :device-index) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :device-index)) #:http.request.field{:name "DeviceIndex", :shape "Integer"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :groups) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-id-string-list (input :groups)) #:http.request.field{:name "Groups", :shape "SecurityGroupIdStringList", :location-name "SecurityGroupId"})) (clojure.core/contains? input :delete-on-termination) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :delete-on-termination)) #:http.request.field{:name "DeleteOnTermination", :shape "Boolean"})) (clojure.core/contains? input :private-ip-addresses) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-private-ip-address-specification-list (input :private-ip-addresses)) #:http.request.field{:name "PrivateIpAddresses", :shape "PrivateIpAddressSpecificationList"})) (clojure.core/contains? input :secondary-private-ip-address-count) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :secondary-private-ip-address-count)) #:http.request.field{:name "SecondaryPrivateIpAddressCount", :shape "Integer"})) (clojure.core/contains? input :private-ip-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :private-ip-address)) #:http.request.field{:name "PrivateIpAddress", :shape "String"})) (clojure.core/contains? input :ipv-6-address-count) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :ipv-6-address-count)) #:http.request.field{:name "Ipv6AddressCount", :shape "Integer"}))))

(clojure.core/defn- ser-fleet-launch-template-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "FleetLaunchTemplateSpecification", :type "structure"} (clojure.core/contains? input :launch-template-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :launch-template-id)) #:http.request.field{:name "LaunchTemplateId", :shape "String", :location-name "launchTemplateId"})) (clojure.core/contains? input :launch-template-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-template-name (input :launch-template-name)) #:http.request.field{:name "LaunchTemplateName", :shape "LaunchTemplateName", :location-name "launchTemplateName"})) (clojure.core/contains? input :version) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :version)) #:http.request.field{:name "Version", :shape "String", :location-name "version"}))))

(clojure.core/defn- ser-vpn-connection-options-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "VpnConnectionOptionsSpecification", :type "structure"} (clojure.core/contains? input :static-routes-only) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :static-routes-only)) #:http.request.field{:name "StaticRoutesOnly", :shape "Boolean", :location-name "staticRoutesOnly"})) (clojure.core/contains? input :tunnel-options) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tunnel-options-list (input :tunnel-options)) #:http.request.field{:name "TunnelOptions", :shape "TunnelOptionsList"}))))

(clojure.core/defn- ser-tenancy [input] #:http.request.field{:value (clojure.core/get {"default" "default", :default "default", "dedicated" "dedicated", :dedicated "dedicated", "host" "host", :host "host"} input), :shape "Tenancy"})

(clojure.core/defn- ser-reserved-instances-offering-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "ReservedInstancesOfferingIdStringList", :type "list"})

(clojure.core/defn- ser-scheduled-instances-security-group-id-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SecurityGroupId"}))) input), :shape "ScheduledInstancesSecurityGroupIdSet", :type "list"})

(clojure.core/defn- ser-affinity [input] #:http.request.field{:value (clojure.core/get {"default" "default", :default "default", "host" "host", :host "host"} input), :shape "Affinity"})

(clojure.core/defn- ser-spot-market-options [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "SpotMarketOptions", :type "structure"} (clojure.core/contains? input :max-price) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-price)) #:http.request.field{:name "MaxPrice", :shape "String"})) (clojure.core/contains? input :spot-instance-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-spot-instance-type (input :spot-instance-type)) #:http.request.field{:name "SpotInstanceType", :shape "SpotInstanceType"})) (clojure.core/contains? input :block-duration-minutes) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :block-duration-minutes)) #:http.request.field{:name "BlockDurationMinutes", :shape "Integer"})) (clojure.core/contains? input :valid-until) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :valid-until)) #:http.request.field{:name "ValidUntil", :shape "DateTime"})) (clojure.core/contains? input :instance-interruption-behavior) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-interruption-behavior (input :instance-interruption-behavior)) #:http.request.field{:name "InstanceInterruptionBehavior", :shape "InstanceInterruptionBehavior"}))))

(clojure.core/defn- ser-group-name-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "GroupName"}))) input), :shape "GroupNameStringList", :type "list"})

(clojure.core/defn- ser-scheduled-instances-placement [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstancesPlacement", :type "structure"} (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String"}))))

(clojure.core/defn- ser-key-name-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "KeyName"}))) input), :shape "KeyNameStringList", :type "list"})

(clojure.core/defn- ser-scheduled-instances-block-device-mapping [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstancesBlockDeviceMapping", :type "structure"} (clojure.core/contains? input :device-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :device-name)) #:http.request.field{:name "DeviceName", :shape "String"})) (clojure.core/contains? input :ebs) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-ebs (input :ebs)) #:http.request.field{:name "Ebs", :shape "ScheduledInstancesEbs"})) (clojure.core/contains? input :no-device) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :no-device)) #:http.request.field{:name "NoDevice", :shape "String"})) (clojure.core/contains? input :virtual-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :virtual-name)) #:http.request.field{:name "VirtualName", :shape "String"}))))

(clojure.core/defn- ser-account-attribute-name [input] #:http.request.field{:value (clojure.core/get {"supported-platforms" "supported-platforms", :supportedplatforms "supported-platforms", "default-vpc" "default-vpc", :defaultvpc "default-vpc"} input), :shape "AccountAttributeName"})

(clojure.core/defn- ser-fleet-launch-template-overrides-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "FleetLaunchTemplateOverridesRequest", :type "structure"} (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-type (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "InstanceType"})) (clojure.core/contains? input :max-price) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-price)) #:http.request.field{:name "MaxPrice", :shape "String"})) (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :weighted-capacity) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-double (input :weighted-capacity)) #:http.request.field{:name "WeightedCapacity", :shape "Double"})) (clojure.core/contains? input :priority) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-double (input :priority)) #:http.request.field{:name "Priority", :shape "Double"}))))

(clojure.core/defn- ser-vpc-tenancy [input] #:http.request.field{:value (clojure.core/get {"default" "default", :default "default"} input), :shape "VpcTenancy"})

(clojure.core/defn- ser-instance-type [input] #:http.request.field{:value (clojure.core/get {:r-3large "r3.large", :i-3large "i3.large", :c-4xlarge "c4.xlarge", "m1.large" "m1.large", :m-524xlarge "m5.24xlarge", "t3.small" "t3.small", :c-3xlarge "c3.xlarge", "cc1.4xlarge" "cc1.4xlarge", :cg-14xlarge "cg1.4xlarge", "z1d.large" "z1d.large", :i-28xlarge "i2.8xlarge", :r-48xlarge "r4.8xlarge", :t-2small "t2.small", "x1e.32xlarge" "x1e.32xlarge", "r5d.xlarge" "r5d.xlarge", :c-518xlarge "c5.18xlarge", :c-1xlarge "c1.xlarge", :r-5d-12xlarge "r5d.12xlarge", "m5d.24xlarge" "m5d.24xlarge", "c1.medium" "c1.medium", "r4.2xlarge" "r4.2xlarge", :c-48xlarge "c4.8xlarge", :x-1exlarge "x1e.xlarge", "r3.8xlarge" "r3.8xlarge", "r5.4xlarge" "r5.4xlarge", "d2.xlarge" "d2.xlarge", "m3.2xlarge" "m3.2xlarge", "r5d.8xlarge" "r5d.8xlarge", "i2.8xlarge" "i2.8xlarge", "h1.16xlarge" "h1.16xlarge", "m5.xlarge" "m5.xlarge", "t3.2xlarge" "t3.2xlarge", "g2.2xlarge" "g2.2xlarge", :m-5xlarge "m5.xlarge", :r-58xlarge "r5.8xlarge", :m-52xlarge "m5.2xlarge", "g3.8xlarge" "g3.8xlarge", :z-1d-12xlarge "z1d.12xlarge", :c-5d-4xlarge "c5d.4xlarge", "t3.xlarge" "t3.xlarge", :z-1d-2xlarge "z1d.2xlarge", "c3.8xlarge" "c3.8xlarge", :i-38xlarge "i3.8xlarge", "t2.large" "t2.large", :r-5dmetal "r5d.metal", "x1e.4xlarge" "x1e.4xlarge", "t3.nano" "t3.nano", :u-9tb-1metal "u-9tb1.metal", :m-512xlarge "m5.12xlarge", :m-42xlarge "m4.2xlarge", "p2.16xlarge" "p2.16xlarge", "m1.xlarge" "m1.xlarge", :g-34xlarge "g3.4xlarge", "d2.8xlarge" "d2.8xlarge", "r5d.large" "r5d.large", "m4.4xlarge" "m4.4xlarge", :r-5dxlarge "r5d.xlarge", :m-5large "m5.large", "t2.2xlarge" "t2.2xlarge", "r4.16xlarge" "r4.16xlarge", :t-2large "t2.large", "u-12tb1.metal" "u-12tb1.metal", :c-34xlarge "c3.4xlarge", "r5d.4xlarge" "r5d.4xlarge", :x-116xlarge "x1.16xlarge", :r-512xlarge "r5.12xlarge", "g3.16xlarge" "g3.16xlarge", "z1d.2xlarge" "z1d.2xlarge", "t3.large" "t3.large", "h1.2xlarge" "h1.2xlarge", :c-5large "c5.large", "g3.4xlarge" "g3.4xlarge", "cr1.8xlarge" "cr1.8xlarge", "t1.micro" "t1.micro", :x-1e-16xlarge "x1e.16xlarge", "c5d.large" "c5d.large", :d-28xlarge "d2.8xlarge", :x-1e-4xlarge "x1e.4xlarge", :r-524xlarge "r5.24xlarge", "z1d.xlarge" "z1d.xlarge", :r-5d-24xlarge "r5d.24xlarge", :r-34xlarge "r3.4xlarge", "c5.4xlarge" "c5.4xlarge", :z-1d-6xlarge "z1d.6xlarge", :m-32xlarge "m3.2xlarge", "c3.2xlarge" "c3.2xlarge", "g2.8xlarge" "g2.8xlarge", "z1d.3xlarge" "z1d.3xlarge", "c5d.18xlarge" "c5d.18xlarge", :m-54xlarge "m5.4xlarge", :r-5d-4xlarge "r5d.4xlarge", :t-2xlarge "t2.xlarge", "c4.8xlarge" "c4.8xlarge", "c5.18xlarge" "c5.18xlarge", :r-4large "r4.large", "x1e.2xlarge" "x1e.2xlarge", "r5.metal" "r5.metal", "z1d.6xlarge" "z1d.6xlarge", :g-22xlarge "g2.2xlarge", :h-18xlarge "h1.8xlarge", :c-3large "c3.large", "m2.xlarge" "m2.xlarge", "m1.small" "m1.small", "i2.4xlarge" "i2.4xlarge", "c3.4xlarge" "c3.4xlarge", "i3.16xlarge" "i3.16xlarge", :i-3metal "i3.metal", :t-2micro "t2.micro", :m-5d-4xlarge "m5d.4xlarge", :c-38xlarge "c3.8xlarge", "t2.micro" "t2.micro", "r5d.16xlarge" "r5d.16xlarge", :r-416xlarge "r4.16xlarge", :g-316xlarge "g3.16xlarge", :p-316xlarge "p3.16xlarge", "d2.2xlarge" "d2.2xlarge", "x1.32xlarge" "x1.32xlarge", :r-38xlarge "r3.8xlarge", "m4.2xlarge" "m4.2xlarge", "r5d.24xlarge" "r5d.24xlarge", :r-32xlarge "r3.2xlarge", :c-52xlarge "c5.2xlarge", "u-6tb1.metal" "u-6tb1.metal", "i3.4xlarge" "i3.4xlarge", :r-5xlarge "r5.xlarge", :t-3xlarge "t3.xlarge", :p-32xlarge "p3.2xlarge", "m4.10xlarge" "m4.10xlarge", "i3.metal" "i3.metal", "m1.medium" "m1.medium", :cc-14xlarge "cc1.4xlarge", "c4.4xlarge" "c4.4xlarge", "hi1.4xlarge" "hi1.4xlarge", :d-2xlarge "d2.xlarge", :i-2xlarge "i2.xlarge", "r3.xlarge" "r3.xlarge", :t-3large "t3.large", "x1e.16xlarge" "x1e.16xlarge", :i-32xlarge "i3.2xlarge", :c-44xlarge "c4.4xlarge", :m-22xlarge "m2.2xlarge", "m5.large" "m5.large", :t-2medium "t2.medium", "r5.xlarge" "r5.xlarge", :r-3xlarge "r3.xlarge", "c4.2xlarge" "c4.2xlarge", :m-416xlarge "m4.16xlarge", "i3.8xlarge" "i3.8xlarge", "p3.2xlarge" "p3.2xlarge", :m-5dlarge "m5d.large", "m5.4xlarge" "m5.4xlarge", "t3.medium" "t3.medium", "u-9tb1.metal" "u-9tb1.metal", :r-42xlarge "r4.2xlarge", :c-59xlarge "c5.9xlarge", :i-22xlarge "i2.2xlarge", "t2.small" "t2.small", :m-1small "m1.small", :c-5d-9xlarge "c5d.9xlarge", "r4.xlarge" "r4.xlarge", :t-22xlarge "t2.2xlarge", :u-12tb-1metal "u-12tb1.metal", "m5.2xlarge" "m5.2xlarge", :m-3large "m3.large", "z1d.12xlarge" "z1d.12xlarge", "t3.micro" "t3.micro", "c5.large" "c5.large", "c5.2xlarge" "c5.2xlarge", :f-14xlarge "f1.4xlarge", "f1.2xlarge" "f1.2xlarge", "m5d.4xlarge" "m5d.4xlarge", "c5d.xlarge" "c5d.xlarge", :r-52xlarge "r5.2xlarge", "m3.xlarge" "m3.xlarge", :g-38xlarge "g3.8xlarge", :m-5d-12xlarge "m5d.12xlarge", "c5d.9xlarge" "c5d.9xlarge", :r-516xlarge "r5.16xlarge", "r3.2xlarge" "r3.2xlarge", :c-32xlarge "c3.2xlarge", :p-38xlarge "p3.8xlarge", "cg1.4xlarge" "cg1.4xlarge", :c-42xlarge "c4.2xlarge", :c-5d-2xlarge "c5d.2xlarge", :z-1dlarge "z1d.large", "r3.4xlarge" "r3.4xlarge", :r-44xlarge "r4.4xlarge", :p-2xlarge "p2.xlarge", :hs-18xlarge "hs1.8xlarge", :t-2nano "t2.nano", :m-44xlarge "m4.4xlarge", :i-34xlarge "i3.4xlarge", :m-24xlarge "m2.4xlarge", "t2.xlarge" "t2.xlarge", "c4.xlarge" "c4.xlarge", "m2.2xlarge" "m2.2xlarge", "f1.4xlarge" "f1.4xlarge", :c-54xlarge "c5.4xlarge", "r5.large" "r5.large", :t-3small "t3.small", "p2.8xlarge" "p2.8xlarge", :h-12xlarge "h1.2xlarge", "r5d.12xlarge" "r5d.12xlarge", "x1.16xlarge" "x1.16xlarge", :r-5d-8xlarge "r5d.8xlarge", "m4.large" "m4.large", :m-410xlarge "m4.10xlarge", :r-5d-16xlarge "r5d.16xlarge", :t-3nano "t3.nano", "m4.16xlarge" "m4.16xlarge", "r3.large" "r3.large", "d2.4xlarge" "d2.4xlarge", "h1.8xlarge" "h1.8xlarge", "i3.2xlarge" "i3.2xlarge", :h-116xlarge "h1.16xlarge", "c4.large" "c4.large", "h1.4xlarge" "h1.4xlarge", :r-5dlarge "r5d.large", "m5d.12xlarge" "m5d.12xlarge", :d-24xlarge "d2.4xlarge", :m-3medium "m3.medium", :g-28xlarge "g2.8xlarge", :m-1xlarge "m1.xlarge", "m4.xlarge" "m4.xlarge", "f1.16xlarge" "f1.16xlarge", "r5.12xlarge" "r5.12xlarge", "i2.2xlarge" "i2.2xlarge", "p3.16xlarge" "p3.16xlarge", :z-1d-3xlarge "z1d.3xlarge", "i3.xlarge" "i3.xlarge", :c-4large "c4.large", :cc-28xlarge "cc2.8xlarge", :t-32xlarge "t3.2xlarge", :r-4xlarge "r4.xlarge", :i-24xlarge "i2.4xlarge", :r-5large "r5.large", :m-4xlarge "m4.xlarge", :m-3xlarge "m3.xlarge", "t2.nano" "t2.nano", "m2.4xlarge" "m2.4xlarge", :f-12xlarge "f1.2xlarge", :r-5metal "r5.metal", "r5d.metal" "r5d.metal", "r4.large" "r4.large", "c3.xlarge" "c3.xlarge", :m-4large "m4.large", "p2.xlarge" "p2.xlarge", "c5d.4xlarge" "c5d.4xlarge", :m-1medium "m1.medium", :m-1large "m1.large", :x-1e-32xlarge "x1e.32xlarge", :i-3xlarge "i3.xlarge", "i3.large" "i3.large", "r4.8xlarge" "r4.8xlarge", "t2.medium" "t2.medium", "p3.8xlarge" "p3.8xlarge", "c3.large" "c3.large", :c-1medium "c1.medium", "m3.medium" "m3.medium", :x-1e-2xlarge "x1e.2xlarge", "m5d.2xlarge" "m5d.2xlarge", :u-6tb-1metal "u-6tb1.metal", "r5d.2xlarge" "r5d.2xlarge", :f-116xlarge "f1.16xlarge", :c-5dxlarge "c5d.xlarge", :cr-18xlarge "cr1.8xlarge", "i2.xlarge" "i2.xlarge", "m5.24xlarge" "m5.24xlarge", "c5.9xlarge" "c5.9xlarge", "m5d.large" "m5d.large", :z-1dxlarge "z1d.xlarge", "m5.12xlarge" "m5.12xlarge", :h-14xlarge "h1.4xlarge", "cc2.8xlarge" "cc2.8xlarge", "hs1.8xlarge" "hs1.8xlarge", :r-5d-2xlarge "r5d.2xlarge", :c-5d-18xlarge "c5d.18xlarge", "r5.16xlarge" "r5.16xlarge", :t-3medium "t3.medium", :x-132xlarge "x1.32xlarge", "m3.large" "m3.large", :m-5d-2xlarge "m5d.2xlarge", :p-216xlarge "p2.16xlarge", "x1e.xlarge" "x1e.xlarge", "c1.xlarge" "c1.xlarge", "c5d.2xlarge" "c5d.2xlarge", :c-5xlarge "c5.xlarge", "x1e.8xlarge" "x1e.8xlarge", :t-1micro "t1.micro", :d-22xlarge "d2.2xlarge", :t-3micro "t3.micro", "r5.2xlarge" "r5.2xlarge", :m-2xlarge "m2.xlarge", :x-1e-8xlarge "x1e.8xlarge", "m5d.xlarge" "m5d.xlarge", :p-28xlarge "p2.8xlarge", :r-54xlarge "r5.4xlarge", :c-5dlarge "c5d.large", "c5.xlarge" "c5.xlarge", :i-316xlarge "i3.16xlarge", :m-5d-24xlarge "m5d.24xlarge", "r4.4xlarge" "r4.4xlarge", "r5.8xlarge" "r5.8xlarge", "r5.24xlarge" "r5.24xlarge", :m-5dxlarge "m5d.xlarge", :hi-14xlarge "hi1.4xlarge"} input), :shape "InstanceType"})

(clojure.core/defn- ser-instance-type-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-instance-type coll) #:http.request.field{:shape "InstanceType"}))) input), :shape "InstanceTypeList", :type "list"})

(clojure.core/defn- ser-instance-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "InstanceId"}))) input), :shape "InstanceIdStringList", :type "list"})

(clojure.core/defn- ser-image-attribute-name [input] #:http.request.field{:value (clojure.core/get {:description "description", "kernel" "kernel", "productCodes" "productCodes", "blockDeviceMapping" "blockDeviceMapping", :ramdisk "ramdisk", :product-codes "productCodes", "launchPermission" "launchPermission", :block-device-mapping "blockDeviceMapping", "ramdisk" "ramdisk", :sriov-net-support "sriovNetSupport", :kernel "kernel", :launch-permission "launchPermission", "description" "description", "sriovNetSupport" "sriovNetSupport"} input), :shape "ImageAttributeName"})

(clojure.core/defn- ser-create-volume-permission [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "CreateVolumePermission", :type "structure"} (clojure.core/contains? input :group) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-permission-group (input :group)) #:http.request.field{:name "Group", :shape "PermissionGroup", :location-name "group"})) (clojure.core/contains? input :user-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :user-id)) #:http.request.field{:name "UserId", :shape "String", :location-name "userId"}))))

(clojure.core/defn- ser-iam-instance-profile-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "IamInstanceProfileSpecification", :type "structure"} (clojure.core/contains? input :arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :arn)) #:http.request.field{:name "Arn", :shape "String", :location-name "arn"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String", :location-name "name"}))))

(clojure.core/defn- ser-placement-group-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "PlacementGroupStringList", :type "list"})

(clojure.core/defn- ser-volume-detail [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-long (:size input)) #:http.request.field{:name "Size", :shape "Long", :location-name "size"})], :shape "VolumeDetail", :type "structure"}))

(clojure.core/defn- ser-launch-template-spot-market-options-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LaunchTemplateSpotMarketOptionsRequest", :type "structure"} (clojure.core/contains? input :max-price) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-price)) #:http.request.field{:name "MaxPrice", :shape "String"})) (clojure.core/contains? input :spot-instance-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-spot-instance-type (input :spot-instance-type)) #:http.request.field{:name "SpotInstanceType", :shape "SpotInstanceType"})) (clojure.core/contains? input :block-duration-minutes) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :block-duration-minutes)) #:http.request.field{:name "BlockDurationMinutes", :shape "Integer"})) (clojure.core/contains? input :valid-until) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :valid-until)) #:http.request.field{:name "ValidUntil", :shape "DateTime"})) (clojure.core/contains? input :instance-interruption-behavior) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-interruption-behavior (input :instance-interruption-behavior)) #:http.request.field{:name "InstanceInterruptionBehavior", :shape "InstanceInterruptionBehavior"}))))

(clojure.core/defn- ser-host-tenancy [input] #:http.request.field{:value (clojure.core/get {"dedicated" "dedicated", :dedicated "dedicated", "host" "host", :host "host"} input), :shape "HostTenancy"})

(clojure.core/defn- ser-storage-location [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "StorageLocation", :type "structure"} (clojure.core/contains? input :bucket) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :bucket)) #:http.request.field{:name "Bucket", :shape "String"})) (clojure.core/contains? input :key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key)) #:http.request.field{:name "Key", :shape "String"}))))

(clojure.core/defn- ser-icmp-type-code [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "IcmpTypeCode", :type "structure"} (clojure.core/contains? input :code) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :code)) #:http.request.field{:name "Code", :shape "Integer", :location-name "code"})) (clojure.core/contains? input :type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :type)) #:http.request.field{:name "Type", :shape "Integer", :location-name "type"}))))

(clojure.core/defn- ser-fpga-image-attribute-name [input] #:http.request.field{:value (clojure.core/get {"description" "description", :description "description", "name" "name", :name "name", "loadPermission" "loadPermission", :load-permission "loadPermission", "productCodes" "productCodes", :product-codes "productCodes"} input), :shape "FpgaImageAttributeName"})

(clojure.core/defn- ser-elastic-gpu-specification [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:type input)) #:http.request.field{:name "Type", :shape "String"})], :shape "ElasticGpuSpecification", :type "structure"}))

(clojure.core/defn- ser-instance-ipv-6-address-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-instance-ipv-6-address coll) #:http.request.field{:shape "InstanceIpv6Address", :location-name "item"}))) input), :shape "InstanceIpv6AddressList", :type "list"})

(clojure.core/defn- ser-volume-attribute-name [input] #:http.request.field{:value (clojure.core/get {"autoEnableIO" "autoEnableIO", :auto-enable-io "autoEnableIO", "productCodes" "productCodes", :product-codes "productCodes"} input), :shape "VolumeAttributeName"})

(clojure.core/defn- ser-fleet-event-type [input] #:http.request.field{:value (clojure.core/get {"instance-change" "instance-change", :instancechange "instance-change", "fleet-change" "fleet-change", :fleetchange "fleet-change", "service-error" "service-error", :serviceerror "service-error"} input), :shape "FleetEventType"})

(clojure.core/defn- ser-scheduled-instance-id-request-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ScheduledInstanceId"}))) input), :shape "ScheduledInstanceIdRequestSet", :type "list"})

(clojure.core/defn- ser-attribute-boolean-value [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "AttributeBooleanValue", :type "structure"} (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :value)) #:http.request.field{:name "Value", :shape "Boolean", :location-name "value"}))))

(clojure.core/defn- ser-vpc-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "VpcId"}))) input), :shape "VpcIdStringList", :type "list"})

(clojure.core/defn- ser-price-schedule-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "PriceScheduleSpecification", :type "structure"} (clojure.core/contains? input :currency-code) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-currency-code-values (input :currency-code)) #:http.request.field{:name "CurrencyCode", :shape "CurrencyCodeValues", :location-name "currencyCode"})) (clojure.core/contains? input :price) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-double (input :price)) #:http.request.field{:name "Price", :shape "Double", :location-name "price"})) (clojure.core/contains? input :term) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long (input :term)) #:http.request.field{:name "Term", :shape "Long", :location-name "term"}))))

(clojure.core/defn- ser-export-to-s-3-task-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ExportToS3TaskSpecification", :type "structure"} (clojure.core/contains? input :container-format) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-container-format (input :container-format)) #:http.request.field{:name "ContainerFormat", :shape "ContainerFormat", :location-name "containerFormat"})) (clojure.core/contains? input :disk-image-format) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-disk-image-format (input :disk-image-format)) #:http.request.field{:name "DiskImageFormat", :shape "DiskImageFormat", :location-name "diskImageFormat"})) (clojure.core/contains? input :s-3-bucket) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :s-3-bucket)) #:http.request.field{:name "S3Bucket", :shape "String", :location-name "s3Bucket"})) (clojure.core/contains? input :s-3-prefix) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :s-3-prefix)) #:http.request.field{:name "S3Prefix", :shape "String", :location-name "s3Prefix"}))))

(clojure.core/defn- ser-rule-action [input] #:http.request.field{:value (clojure.core/get {"allow" "allow", :allow "allow", "deny" "deny", :deny "deny"} input), :shape "RuleAction"})

(clojure.core/defn- ser-fleet-type [input] #:http.request.field{:value (clojure.core/get {"request" "request", :request "request", "maintain" "maintain", :maintain "maintain"} input), :shape "FleetType"})

(clojure.core/defn- ser-request-launch-template-data [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "RequestLaunchTemplateData", :type "structure"} (clojure.core/contains? input :tag-specifications) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-template-tag-specification-request-list (input :tag-specifications)) #:http.request.field{:name "TagSpecifications", :shape "LaunchTemplateTagSpecificationRequestList", :location-name "TagSpecification"})) (clojure.core/contains? input :kernel-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kernel-id)) #:http.request.field{:name "KernelId", :shape "String"})) (clojure.core/contains? input :credit-specification) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-credit-specification-request (input :credit-specification)) #:http.request.field{:name "CreditSpecification", :shape "CreditSpecificationRequest"})) (clojure.core/contains? input :security-group-ids) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-id-string-list (input :security-group-ids)) #:http.request.field{:name "SecurityGroupIds", :shape "SecurityGroupIdStringList", :location-name "SecurityGroupId"})) (clojure.core/contains? input :image-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :image-id)) #:http.request.field{:name "ImageId", :shape "String"})) (clojure.core/contains? input :placement) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-template-placement-request (input :placement)) #:http.request.field{:name "Placement", :shape "LaunchTemplatePlacementRequest"})) (clojure.core/contains? input :security-groups) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-string-list (input :security-groups)) #:http.request.field{:name "SecurityGroups", :shape "SecurityGroupStringList", :location-name "SecurityGroup"})) (clojure.core/contains? input :ebs-optimized) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :ebs-optimized)) #:http.request.field{:name "EbsOptimized", :shape "Boolean"})) (clojure.core/contains? input :instance-market-options) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-template-instance-market-options-request (input :instance-market-options)) #:http.request.field{:name "InstanceMarketOptions", :shape "LaunchTemplateInstanceMarketOptionsRequest"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-type (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "InstanceType"})) (clojure.core/contains? input :key-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key-name)) #:http.request.field{:name "KeyName", :shape "String"})) (clojure.core/contains? input :elastic-gpu-specifications) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-elastic-gpu-specification-list (input :elastic-gpu-specifications)) #:http.request.field{:name "ElasticGpuSpecifications", :shape "ElasticGpuSpecificationList", :location-name "ElasticGpuSpecification"})) (clojure.core/contains? input :ram-disk-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ram-disk-id)) #:http.request.field{:name "RamDiskId", :shape "String"})) (clojure.core/contains? input :disable-api-termination) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :disable-api-termination)) #:http.request.field{:name "DisableApiTermination", :shape "Boolean"})) (clojure.core/contains? input :monitoring) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-templates-monitoring-request (input :monitoring)) #:http.request.field{:name "Monitoring", :shape "LaunchTemplatesMonitoringRequest"})) (clojure.core/contains? input :block-device-mappings) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-template-block-device-mapping-request-list (input :block-device-mappings)) #:http.request.field{:name "BlockDeviceMappings", :shape "LaunchTemplateBlockDeviceMappingRequestList", :location-name "BlockDeviceMapping"})) (clojure.core/contains? input :cpu-options) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-template-cpu-options-request (input :cpu-options)) #:http.request.field{:name "CpuOptions", :shape "LaunchTemplateCpuOptionsRequest"})) (clojure.core/contains? input :user-data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :user-data)) #:http.request.field{:name "UserData", :shape "String"})) (clojure.core/contains? input :instance-initiated-shutdown-behavior) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-shutdown-behavior (input :instance-initiated-shutdown-behavior)) #:http.request.field{:name "InstanceInitiatedShutdownBehavior", :shape "ShutdownBehavior"})) (clojure.core/contains? input :iam-instance-profile) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-template-iam-instance-profile-specification-request (input :iam-instance-profile)) #:http.request.field{:name "IamInstanceProfile", :shape "LaunchTemplateIamInstanceProfileSpecificationRequest"})) (clojure.core/contains? input :network-interfaces) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-template-instance-network-interface-specification-request-list (input :network-interfaces)) #:http.request.field{:name "NetworkInterfaces", :shape "LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList", :location-name "NetworkInterface"}))))

(clojure.core/defn- ser-group-identifier-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-group-identifier coll) #:http.request.field{:shape "GroupIdentifier", :location-name "item"}))) input), :shape "GroupIdentifierList", :type "list"})

(clojure.core/defn- ser-price-schedule-specification-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-price-schedule-specification coll) #:http.request.field{:shape "PriceScheduleSpecification", :location-name "item"}))) input), :shape "PriceScheduleSpecificationList", :type "list"})

(clojure.core/defn- ser-fleet-launch-template-config-list-request [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-fleet-launch-template-config-request coll) #:http.request.field{:shape "FleetLaunchTemplateConfigRequest", :location-name "item"}))) input), :shape "FleetLaunchTemplateConfigListRequest", :type "list", :max 50})

(clojure.core/defn- ser-elastic-gpu-id-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "ElasticGpuIdSet", :type "list"})

(clojure.core/defn- ser-traffic-type [input] #:http.request.field{:value (clojure.core/get {"ACCEPT" "ACCEPT", :accept "ACCEPT", "REJECT" "REJECT", :reject "REJECT", "ALL" "ALL", :all "ALL"} input), :shape "TrafficType"})

(clojure.core/defn- ser-allocation-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "AllocationId"}))) input), :shape "AllocationIdList", :type "list"})

(clojure.core/defn- ser-create-volume-permission-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-create-volume-permission coll) #:http.request.field{:shape "CreateVolumePermission", :location-name "item"}))) input), :shape "CreateVolumePermissionList", :type "list"})

(clojure.core/defn- ser-image-disk-container-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-image-disk-container coll) #:http.request.field{:shape "ImageDiskContainer", :location-name "item"}))) input), :shape "ImageDiskContainerList", :type "list"})

(clojure.core/defn- ser-event-type [input] #:http.request.field{:value (clojure.core/get {"instanceChange" "instanceChange", :instance-change "instanceChange", "fleetRequestChange" "fleetRequestChange", :fleet-request-change "fleetRequestChange", "error" "error", :error "error"} input), :shape "EventType"})

(clojure.core/defn- ser-restorable-by-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "RestorableByStringList", :type "list"})

(clojure.core/defn- ser-next-token [input] #:http.request.field{:value input, :shape "NextToken"})

(clojure.core/defn- ser-slot-start-time-range-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "SlotStartTimeRangeRequest", :type "structure"} (clojure.core/contains? input :earliest-time) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :earliest-time)) #:http.request.field{:name "EarliestTime", :shape "DateTime"})) (clojure.core/contains? input :latest-time) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :latest-time)) #:http.request.field{:name "LatestTime", :shape "DateTime"}))))

(clojure.core/defn- ser-elastic-gpu-specifications [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-elastic-gpu-specification coll) #:http.request.field{:shape "ElasticGpuSpecification", :location-name "item"}))) input), :shape "ElasticGpuSpecifications", :type "list"})

(clojure.core/defn- ser-excess-capacity-termination-policy [input] #:http.request.field{:value (clojure.core/get {"noTermination" "noTermination", :no-termination "noTermination", "default" "default", :default "default"} input), :shape "ExcessCapacityTerminationPolicy"})

(clojure.core/defn- ser-spot-fleet-monitoring [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "SpotFleetMonitoring", :type "structure"} (clojure.core/contains? input :enabled) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :enabled)) #:http.request.field{:name "Enabled", :shape "Boolean", :location-name "enabled"}))))

(clojure.core/defn- ser-instance-block-device-mapping-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "InstanceBlockDeviceMappingSpecification", :type "structure"} (clojure.core/contains? input :device-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :device-name)) #:http.request.field{:name "DeviceName", :shape "String", :location-name "deviceName"})) (clojure.core/contains? input :ebs) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ebs-instance-block-device-specification (input :ebs)) #:http.request.field{:name "Ebs", :shape "EbsInstanceBlockDeviceSpecification", :location-name "ebs"})) (clojure.core/contains? input :no-device) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :no-device)) #:http.request.field{:name "NoDevice", :shape "String", :location-name "noDevice"})) (clojure.core/contains? input :virtual-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :virtual-name)) #:http.request.field{:name "VirtualName", :shape "String", :location-name "virtualName"}))))

(clojure.core/defn- ser-load-permission-list-request [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-load-permission-request coll) #:http.request.field{:shape "LoadPermissionRequest", :location-name "item"}))) input), :shape "LoadPermissionListRequest", :type "list"})

(clojure.core/defn- ser-instance-credit-specification-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "InstanceCreditSpecificationRequest", :type "structure"} (clojure.core/contains? input :instance-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})) (clojure.core/contains? input :cpu-credits) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cpu-credits)) #:http.request.field{:name "CpuCredits", :shape "String"}))))

(clojure.core/defn- ser-group-ids [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "GroupIds", :type "list"})

(clojure.core/defn- ser-user-id-group-pair-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-user-id-group-pair coll) #:http.request.field{:shape "UserIdGroupPair", :location-name "item"}))) input), :shape "UserIdGroupPairList", :type "list"})

(clojure.core/defn- ser-s-3-storage [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "S3Storage", :type "structure"} (clojure.core/contains? input :aws-access-key-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :aws-access-key-id)) #:http.request.field{:name "AWSAccessKeyId", :shape "String"})) (clojure.core/contains? input :bucket) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :bucket)) #:http.request.field{:name "Bucket", :shape "String", :location-name "bucket"})) (clojure.core/contains? input :prefix) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :prefix)) #:http.request.field{:name "Prefix", :shape "String", :location-name "prefix"})) (clojure.core/contains? input :upload-policy) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-blob (input :upload-policy)) #:http.request.field{:name "UploadPolicy", :shape "Blob", :location-name "uploadPolicy"})) (clojure.core/contains? input :upload-policy-signature) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :upload-policy-signature)) #:http.request.field{:name "UploadPolicySignature", :shape "String", :location-name "uploadPolicySignature"}))))

(clojure.core/defn- ser-launch-permission-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-launch-permission coll) #:http.request.field{:shape "LaunchPermission", :location-name "item"}))) input), :shape "LaunchPermissionList", :type "list"})

(clojure.core/defn- ser-reserved-instances-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ReservedInstancesId"}))) input), :shape "ReservedInstancesIdStringList", :type "list"})

(clojure.core/defn- ser-instance-ipv-6-address [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "InstanceIpv6Address", :type "structure"} (clojure.core/contains? input :ipv-6-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ipv-6-address)) #:http.request.field{:name "Ipv6Address", :shape "String", :location-name "ipv6Address"}))))

(clojure.core/defn- ser-group-identifier [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "GroupIdentifier", :type "structure"} (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String", :location-name "groupName"})) (clojure.core/contains? input :group-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "String", :location-name "groupId"}))))

(clojure.core/defn- ser-instance-ipv-6-address-list-request [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-instance-ipv-6-address-request coll) #:http.request.field{:shape "InstanceIpv6AddressRequest", :location-name "InstanceIpv6Address"}))) input), :shape "InstanceIpv6AddressListRequest", :type "list"})

(clojure.core/defn- ser-spot-instance-interruption-behavior [input] #:http.request.field{:value (clojure.core/get {"hibernate" "hibernate", :hibernate "hibernate", "stop" "stop", :stop "stop", "terminate" "terminate", :terminate "terminate"} input), :shape "SpotInstanceInterruptionBehavior"})

(clojure.core/defn- ser-run-instances-monitoring-enabled [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-boolean (:enabled input)) #:http.request.field{:name "Enabled", :shape "Boolean", :location-name "enabled"})], :shape "RunInstancesMonitoringEnabled", :type "structure"}))

(clojure.core/defn- ser-disk-image-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-disk-image coll) #:http.request.field{:shape "DiskImage"}))) input), :shape "DiskImageList", :type "list"})

(clojure.core/defn- ser-tag-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-tag coll) #:http.request.field{:shape "Tag", :location-name "item"}))) input), :shape "TagList", :type "list"})

(clojure.core/defn- ser-client-data [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ClientData", :type "structure"} (clojure.core/contains? input :comment) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :comment)) #:http.request.field{:name "Comment", :shape "String"})) (clojure.core/contains? input :upload-end) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :upload-end)) #:http.request.field{:name "UploadEnd", :shape "DateTime"})) (clojure.core/contains? input :upload-size) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-double (input :upload-size)) #:http.request.field{:name "UploadSize", :shape "Double"})) (clojure.core/contains? input :upload-start) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :upload-start)) #:http.request.field{:name "UploadStart", :shape "DateTime"}))))

(clojure.core/defn- ser-image-disk-container [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ImageDiskContainer", :type "structure"} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :device-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :device-name)) #:http.request.field{:name "DeviceName", :shape "String"})) (clojure.core/contains? input :format) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :format)) #:http.request.field{:name "Format", :shape "String"})) (clojure.core/contains? input :snapshot-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String"})) (clojure.core/contains? input :url) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :url)) #:http.request.field{:name "Url", :shape "String"})) (clojure.core/contains? input :user-bucket) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-user-bucket (input :user-bucket)) #:http.request.field{:name "UserBucket", :shape "UserBucket"}))))

(clojure.core/defn- ser-spot-fleet-request-config-data [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:iam-fleet-role input)) #:http.request.field{:name "IamFleetRole", :shape "String", :location-name "iamFleetRole"}) (clojure.core/into (ser-integer (:target-capacity input)) #:http.request.field{:name "TargetCapacity", :shape "Integer", :location-name "targetCapacity"})], :shape "SpotFleetRequestConfigData", :type "structure"} (clojure.core/contains? input :on-demand-allocation-strategy) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-on-demand-allocation-strategy (input :on-demand-allocation-strategy)) #:http.request.field{:name "OnDemandAllocationStrategy", :shape "OnDemandAllocationStrategy", :location-name "onDemandAllocationStrategy"})) (clojure.core/contains? input :type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-fleet-type (input :type)) #:http.request.field{:name "Type", :shape "FleetType", :location-name "type"})) (clojure.core/contains? input :valid-from) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :valid-from)) #:http.request.field{:name "ValidFrom", :shape "DateTime", :location-name "validFrom"})) (clojure.core/contains? input :instance-pools-to-use-count) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :instance-pools-to-use-count)) #:http.request.field{:name "InstancePoolsToUseCount", :shape "Integer", :location-name "instancePoolsToUseCount"})) (clojure.core/contains? input :excess-capacity-termination-policy) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-excess-capacity-termination-policy (input :excess-capacity-termination-policy)) #:http.request.field{:name "ExcessCapacityTerminationPolicy", :shape "ExcessCapacityTerminationPolicy", :location-name "excessCapacityTerminationPolicy"})) (clojure.core/contains? input :spot-price) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :spot-price)) #:http.request.field{:name "SpotPrice", :shape "String", :location-name "spotPrice"})) (clojure.core/contains? input :allocation-strategy) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-allocation-strategy (input :allocation-strategy)) #:http.request.field{:name "AllocationStrategy", :shape "AllocationStrategy", :location-name "allocationStrategy"})) (clojure.core/contains? input :instance-interruption-behavior) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-interruption-behavior (input :instance-interruption-behavior)) #:http.request.field{:name "InstanceInterruptionBehavior", :shape "InstanceInterruptionBehavior", :location-name "instanceInterruptionBehavior"})) (clojure.core/contains? input :launch-template-configs) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-template-config-list (input :launch-template-configs)) #:http.request.field{:name "LaunchTemplateConfigs", :shape "LaunchTemplateConfigList", :location-name "launchTemplateConfigs"})) (clojure.core/contains? input :load-balancers-config) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-load-balancers-config (input :load-balancers-config)) #:http.request.field{:name "LoadBalancersConfig", :shape "LoadBalancersConfig", :location-name "loadBalancersConfig"})) (clojure.core/contains? input :fulfilled-capacity) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-double (input :fulfilled-capacity)) #:http.request.field{:name "FulfilledCapacity", :shape "Double", :location-name "fulfilledCapacity"})) (clojure.core/contains? input :terminate-instances-with-expiration) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :terminate-instances-with-expiration)) #:http.request.field{:name "TerminateInstancesWithExpiration", :shape "Boolean", :location-name "terminateInstancesWithExpiration"})) (clojure.core/contains? input :on-demand-fulfilled-capacity) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-double (input :on-demand-fulfilled-capacity)) #:http.request.field{:name "OnDemandFulfilledCapacity", :shape "Double", :location-name "onDemandFulfilledCapacity"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String", :location-name "clientToken"})) (clojure.core/contains? input :launch-specifications) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-specs-list (input :launch-specifications)) #:http.request.field{:name "LaunchSpecifications", :shape "LaunchSpecsList", :location-name "launchSpecifications"})) (clojure.core/contains? input :replace-unhealthy-instances) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :replace-unhealthy-instances)) #:http.request.field{:name "ReplaceUnhealthyInstances", :shape "Boolean", :location-name "replaceUnhealthyInstances"})) (clojure.core/contains? input :on-demand-target-capacity) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :on-demand-target-capacity)) #:http.request.field{:name "OnDemandTargetCapacity", :shape "Integer", :location-name "onDemandTargetCapacity"})) (clojure.core/contains? input :valid-until) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :valid-until)) #:http.request.field{:name "ValidUntil", :shape "DateTime", :location-name "validUntil"}))))

(clojure.core/defn- ser-launch-template-overrides [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LaunchTemplateOverrides", :type "structure"} (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-type (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "InstanceType", :location-name "instanceType"})) (clojure.core/contains? input :spot-price) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :spot-price)) #:http.request.field{:name "SpotPrice", :shape "String", :location-name "spotPrice"})) (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String", :location-name "subnetId"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String", :location-name "availabilityZone"})) (clojure.core/contains? input :weighted-capacity) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-double (input :weighted-capacity)) #:http.request.field{:name "WeightedCapacity", :shape "Double", :location-name "weightedCapacity"})) (clojure.core/contains? input :priority) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-double (input :priority)) #:http.request.field{:name "Priority", :shape "Double", :location-name "priority"}))))

(clojure.core/defn- ser-launch-template-instance-market-options-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LaunchTemplateInstanceMarketOptionsRequest", :type "structure"} (clojure.core/contains? input :market-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-market-type (input :market-type)) #:http.request.field{:name "MarketType", :shape "MarketType"})) (clojure.core/contains? input :spot-options) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-template-spot-market-options-request (input :spot-options)) #:http.request.field{:name "SpotOptions", :shape "LaunchTemplateSpotMarketOptionsRequest"}))))

(clojure.core/defn- ser-conversion-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "ConversionIdStringList", :type "list"})

(clojure.core/defn- ser-allocation-strategy [input] #:http.request.field{:value (clojure.core/get {"lowestPrice" "lowestPrice", :lowest-price "lowestPrice", "diversified" "diversified", :diversified "diversified"} input), :shape "AllocationStrategy"})

(clojure.core/defn- ser-attribute-value [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "AttributeValue", :type "structure"} (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String", :location-name "value"}))))

(clojure.core/defn- ser-private-ip-address-specification-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-private-ip-address-specification coll) #:http.request.field{:shape "PrivateIpAddressSpecification", :location-name "item"}))) input), :shape "PrivateIpAddressSpecificationList", :type "list"})

(clojure.core/defn- ser-auto-placement [input] #:http.request.field{:value (clojure.core/get {"on" "on", :on "on", "off" "off", :off "off"} input), :shape "AutoPlacement"})

(clojure.core/defn- ser-launch-template-tag-specification-request-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-launch-template-tag-specification-request coll) #:http.request.field{:shape "LaunchTemplateTagSpecificationRequest", :location-name "LaunchTemplateTagSpecificationRequest"}))) input), :shape "LaunchTemplateTagSpecificationRequestList", :type "list"})

(clojure.core/defn- ser-prefix-list-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-prefix-list-id coll) #:http.request.field{:shape "PrefixListId", :location-name "item"}))) input), :shape "PrefixListIdList", :type "list"})

(clojure.core/defn- ser-vpc-attribute-name [input] #:http.request.field{:value (clojure.core/get {"enableDnsSupport" "enableDnsSupport", :enable-dns-support "enableDnsSupport", "enableDnsHostnames" "enableDnsHostnames", :enable-dns-hostnames "enableDnsHostnames"} input), :shape "VpcAttributeName"})

(clojure.core/defn- ser-instance-block-device-mapping-specification-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-instance-block-device-mapping-specification coll) #:http.request.field{:shape "InstanceBlockDeviceMappingSpecification", :location-name "item"}))) input), :shape "InstanceBlockDeviceMappingSpecificationList", :type "list"})

(clojure.core/defn- ser-load-permission-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LoadPermissionRequest", :type "structure"} (clojure.core/contains? input :group) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-permission-group (input :group)) #:http.request.field{:name "Group", :shape "PermissionGroup"})) (clojure.core/contains? input :user-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :user-id)) #:http.request.field{:name "UserId", :shape "String"}))))

(clojure.core/defn- ser-fpga-image-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "FpgaImageIdList", :type "list"})

(clojure.core/defn- ser-placement-strategy [input] #:http.request.field{:value (clojure.core/get {"cluster" "cluster", :cluster "cluster", "spread" "spread", :spread "spread"} input), :shape "PlacementStrategy"})

(clojure.core/defn- ser-user-group-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "UserGroup"}))) input), :shape "UserGroupStringList", :type "list"})

(clojure.core/defn- ser-scheduled-instances-ebs [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstancesEbs", :type "structure"} (clojure.core/contains? input :delete-on-termination) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :delete-on-termination)) #:http.request.field{:name "DeleteOnTermination", :shape "Boolean"})) (clojure.core/contains? input :encrypted) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :encrypted)) #:http.request.field{:name "Encrypted", :shape "Boolean"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :iops)) #:http.request.field{:name "Iops", :shape "Integer"})) (clojure.core/contains? input :snapshot-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String"})) (clojure.core/contains? input :volume-size) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :volume-size)) #:http.request.field{:name "VolumeSize", :shape "Integer"})) (clojure.core/contains? input :volume-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :volume-type)) #:http.request.field{:name "VolumeType", :shape "String"}))))

(clojure.core/defn- ser-target-configuration-request-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-target-configuration-request coll) #:http.request.field{:shape "TargetConfigurationRequest", :location-name "TargetConfigurationRequest"}))) input), :shape "TargetConfigurationRequestSet", :type "list"})

(clojure.core/defn- ser-instance-interruption-behavior [input] #:http.request.field{:value (clojure.core/get {"hibernate" "hibernate", :hibernate "hibernate", "stop" "stop", :stop "stop", "terminate" "terminate", :terminate "terminate"} input), :shape "InstanceInterruptionBehavior"})

(clojure.core/defn- ser-volume-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "VolumeId"}))) input), :shape "VolumeIdStringList", :type "list"})

(clojure.core/defn- ser-dhcp-options-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "DhcpOptionsId"}))) input), :shape "DhcpOptionsIdStringList", :type "list"})

(clojure.core/defn- serscope [input] #:http.request.field{:value (clojure.core/get {"Availability Zone" "Availability Zone", :availability-zone "Availability Zone", "Region" "Region", :region "Region"} input), :shape "scope"})

(clojure.core/defn- ser-reset-image-attribute-name [input] #:http.request.field{:value (clojure.core/get {"launchPermission" "launchPermission", :launch-permission "launchPermission"} input), :shape "ResetImageAttributeName"})

(clojure.core/defn- ser-scheduled-instances-launch-specification [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:image-id input)) #:http.request.field{:name "ImageId", :shape "String"})], :shape "ScheduledInstancesLaunchSpecification", :type "structure"} (clojure.core/contains? input :kernel-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kernel-id)) #:http.request.field{:name "KernelId", :shape "String"})) (clojure.core/contains? input :security-group-ids) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-security-group-id-set (input :security-group-ids)) #:http.request.field{:name "SecurityGroupIds", :shape "ScheduledInstancesSecurityGroupIdSet", :location-name "SecurityGroupId"})) (clojure.core/contains? input :placement) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-placement (input :placement)) #:http.request.field{:name "Placement", :shape "ScheduledInstancesPlacement"})) (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String"})) (clojure.core/contains? input :ebs-optimized) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :ebs-optimized)) #:http.request.field{:name "EbsOptimized", :shape "Boolean"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "String"})) (clojure.core/contains? input :key-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key-name)) #:http.request.field{:name "KeyName", :shape "String"})) (clojure.core/contains? input :monitoring) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-monitoring (input :monitoring)) #:http.request.field{:name "Monitoring", :shape "ScheduledInstancesMonitoring"})) (clojure.core/contains? input :block-device-mappings) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-block-device-mapping-set (input :block-device-mappings)) #:http.request.field{:name "BlockDeviceMappings", :shape "ScheduledInstancesBlockDeviceMappingSet", :location-name "BlockDeviceMapping"})) (clojure.core/contains? input :ramdisk-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ramdisk-id)) #:http.request.field{:name "RamdiskId", :shape "String"})) (clojure.core/contains? input :user-data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :user-data)) #:http.request.field{:name "UserData", :shape "String"})) (clojure.core/contains? input :iam-instance-profile) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-iam-instance-profile (input :iam-instance-profile)) #:http.request.field{:name "IamInstanceProfile", :shape "ScheduledInstancesIamInstanceProfile"})) (clojure.core/contains? input :network-interfaces) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-network-interface-set (input :network-interfaces)) #:http.request.field{:name "NetworkInterfaces", :shape "ScheduledInstancesNetworkInterfaceSet", :location-name "NetworkInterface"}))))

(clojure.core/defn- ser-product-description-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "ProductDescriptionList", :type "list"})

(clojure.core/defn- ser-fleet-id-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-fleet-identifier coll) #:http.request.field{:shape "FleetIdentifier"}))) input), :shape "FleetIdSet", :type "list"})

(clojure.core/defn- ser-vpn-tunnel-options-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "VpnTunnelOptionsSpecification", :type "structure"} (clojure.core/contains? input :tunnel-inside-cidr) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :tunnel-inside-cidr)) #:http.request.field{:name "TunnelInsideCidr", :shape "String"})) (clojure.core/contains? input :pre-shared-key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :pre-shared-key)) #:http.request.field{:name "PreSharedKey", :shape "String"}))))

(clojure.core/defn- ser-group-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "groupId"}))) input), :shape "GroupIdStringList", :type "list"})

(clojure.core/defn- ser-snapshot-disk-container [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "SnapshotDiskContainer", :type "structure"} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :format) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :format)) #:http.request.field{:name "Format", :shape "String"})) (clojure.core/contains? input :url) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :url)) #:http.request.field{:name "Url", :shape "String"})) (clojure.core/contains? input :user-bucket) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-user-bucket (input :user-bucket)) #:http.request.field{:name "UserBucket", :shape "UserBucket"}))))

(clojure.core/defn- ser-instance-credit-specification-list-request [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-instance-credit-specification-request coll) #:http.request.field{:shape "InstanceCreditSpecificationRequest", :location-name "item"}))) input), :shape "InstanceCreditSpecificationListRequest", :type "list"})

(clojure.core/defn- ser-log-destination-type [input] #:http.request.field{:value (clojure.core/get {"cloud-watch-logs" "cloud-watch-logs", :cloudwatchlogs "cloud-watch-logs", "s3" "s3", :s-3 "s3"} input), :shape "LogDestinationType"})

(clojure.core/defn- ser-launch-specs-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-spot-fleet-launch-specification coll) #:http.request.field{:shape "SpotFleetLaunchSpecification", :location-name "item"}))) input), :shape "LaunchSpecsList", :type "list"})

(clojure.core/defn- ser-launch-template-ebs-block-device-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LaunchTemplateEbsBlockDeviceRequest", :type "structure"} (clojure.core/contains? input :encrypted) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :encrypted)) #:http.request.field{:name "Encrypted", :shape "Boolean"})) (clojure.core/contains? input :delete-on-termination) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :delete-on-termination)) #:http.request.field{:name "DeleteOnTermination", :shape "Boolean"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :iops)) #:http.request.field{:name "Iops", :shape "Integer"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :snapshot-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String"})) (clojure.core/contains? input :volume-size) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :volume-size)) #:http.request.field{:name "VolumeSize", :shape "Integer"})) (clojure.core/contains? input :volume-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-volume-type (input :volume-type)) #:http.request.field{:name "VolumeType", :shape "VolumeType"}))))

(clojure.core/defn- ser-load-balancers-config [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LoadBalancersConfig", :type "structure"} (clojure.core/contains? input :classic-load-balancers-config) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-classic-load-balancers-config (input :classic-load-balancers-config)) #:http.request.field{:name "ClassicLoadBalancersConfig", :shape "ClassicLoadBalancersConfig", :location-name "classicLoadBalancersConfig"})) (clojure.core/contains? input :target-groups-config) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-target-groups-config (input :target-groups-config)) #:http.request.field{:name "TargetGroupsConfig", :shape "TargetGroupsConfig", :location-name "targetGroupsConfig"}))))

(clojure.core/defn- ser-integer [input] #:http.request.field{:value input, :shape "Integer"})

(clojure.core/defn- ser-string [input] #:http.request.field{:value input, :shape "String"})

(clojure.core/defn- ser-classic-load-balancer [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:name input)) #:http.request.field{:name "Name", :shape "String", :location-name "name"})], :shape "ClassicLoadBalancer", :type "structure"}))

(clojure.core/defn- ser-ip-permission [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "IpPermission", :type "structure"} (clojure.core/contains? input :from-port) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :from-port)) #:http.request.field{:name "FromPort", :shape "Integer", :location-name "fromPort"})) (clojure.core/contains? input :ip-protocol) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ip-protocol)) #:http.request.field{:name "IpProtocol", :shape "String", :location-name "ipProtocol"})) (clojure.core/contains? input :ip-ranges) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ip-range-list (input :ip-ranges)) #:http.request.field{:name "IpRanges", :shape "IpRangeList", :location-name "ipRanges"})) (clojure.core/contains? input :ipv-6-ranges) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ipv-6-range-list (input :ipv-6-ranges)) #:http.request.field{:name "Ipv6Ranges", :shape "Ipv6RangeList", :location-name "ipv6Ranges"})) (clojure.core/contains? input :prefix-list-ids) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-prefix-list-id-list (input :prefix-list-ids)) #:http.request.field{:name "PrefixListIds", :shape "PrefixListIdList", :location-name "prefixListIds"})) (clojure.core/contains? input :to-port) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :to-port)) #:http.request.field{:name "ToPort", :shape "Integer", :location-name "toPort"})) (clojure.core/contains? input :user-id-group-pairs) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-user-id-group-pair-list (input :user-id-group-pairs)) #:http.request.field{:name "UserIdGroupPairs", :shape "UserIdGroupPairList", :location-name "groups"}))))

(clojure.core/defn- ser-ip-permission-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-ip-permission coll) #:http.request.field{:shape "IpPermission", :location-name "item"}))) input), :shape "IpPermissionList", :type "list"})

(clojure.core/defn- ser-slot-date-time-range-request [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-date-time (:earliest-time input)) #:http.request.field{:name "EarliestTime", :shape "DateTime"}) (clojure.core/into (ser-date-time (:latest-time input)) #:http.request.field{:name "LatestTime", :shape "DateTime"})], :shape "SlotDateTimeRangeRequest", :type "structure"}))

(clojure.core/defn- ser-ri-product-description [input] #:http.request.field{:value (clojure.core/get {"Linux/UNIX" "Linux/UNIX", :linux-unix "Linux/UNIX", "Linux/UNIX (Amazon VPC)" "Linux/UNIX (Amazon VPC)", :linux-unix-amazon-vpc "Linux/UNIX (Amazon VPC)", "Windows" "Windows", :windows "Windows", "Windows (Amazon VPC)" "Windows (Amazon VPC)", :windows-amazon-vpc "Windows (Amazon VPC)"} input), :shape "RIProductDescription"})

(clojure.core/defn- ser-reserved-instance-id-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ReservedInstanceId"}))) input), :shape "ReservedInstanceIdSet", :type "list"})

(clojure.core/defn- ser-launch-template-config [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LaunchTemplateConfig", :type "structure"} (clojure.core/contains? input :launch-template-specification) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-fleet-launch-template-specification (input :launch-template-specification)) #:http.request.field{:name "LaunchTemplateSpecification", :shape "FleetLaunchTemplateSpecification", :location-name "launchTemplateSpecification"})) (clojure.core/contains? input :overrides) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-template-overrides-list (input :overrides)) #:http.request.field{:name "Overrides", :shape "LaunchTemplateOverridesList", :location-name "overrides"}))))

(clojure.core/defn- ser-disk-image-format [input] #:http.request.field{:value (clojure.core/get {"VMDK" "VMDK", :vmdk "VMDK", "RAW" "RAW", :raw "RAW", "VHD" "VHD", :vhd "VHD"} input), :shape "DiskImageFormat"})

(clojure.core/defn- ser-scheduled-instances-network-interface-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-scheduled-instances-network-interface coll) #:http.request.field{:shape "ScheduledInstancesNetworkInterface", :location-name "NetworkInterface"}))) input), :shape "ScheduledInstancesNetworkInterfaceSet", :type "list"})

(clojure.core/defn- ser-security-group-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SecurityGroupId"}))) input), :shape "SecurityGroupIdStringList", :type "list"})

(clojure.core/defn- ser-domain-type [input] #:http.request.field{:value (clojure.core/get {"vpc" "vpc", :vpc "vpc", "standard" "standard", :standard "standard"} input), :shape "DomainType"})

(clojure.core/defn- ser-launch-template-name [input] #:http.request.field{:value input, :shape "LaunchTemplateName"})

(clojure.core/defn- ser-flow-logs-resource-type [input] #:http.request.field{:value (clojure.core/get {"VPC" "VPC", :vpc "VPC", "Subnet" "Subnet", :subnet "Subnet", "NetworkInterface" "NetworkInterface", :network-interface "NetworkInterface"} input), :shape "FlowLogsResourceType"})

(clojure.core/defn- ser-fleet-launch-template-overrides-list-request [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-fleet-launch-template-overrides-request coll) #:http.request.field{:shape "FleetLaunchTemplateOverridesRequest", :location-name "item"}))) input), :shape "FleetLaunchTemplateOverridesListRequest", :type "list", :max 50})

(clojure.core/defn- ser-resource-type [input] #:http.request.field{:value (clojure.core/get {:networkacl "network-acl", :dedicatedhost "dedicated-host", "vpn-gateway" "vpn-gateway", "subnet" "subnet", :dhcpoptions "dhcp-options", "vpc" "vpc", "dedicated-host" "dedicated-host", "spot-instances-request" "spot-instances-request", :instance "instance", "route-table" "route-table", "image" "image", :securitygroup "security-group", :vpngateway "vpn-gateway", :routetable "route-table", "snapshot" "snapshot", "vpn-connection" "vpn-connection", :reservedinstances "reserved-instances", :volume "volume", "internet-gateway" "internet-gateway", :vpnconnection "vpn-connection", :snapshot "snapshot", "reserved-instances" "reserved-instances", "instance" "instance", :vpc "vpc", :spotinstancesrequest "spot-instances-request", "network-interface" "network-interface", "security-group" "security-group", "volume" "volume", "dhcp-options" "dhcp-options", :image "image", :networkinterface "network-interface", "customer-gateway" "customer-gateway", :customergateway "customer-gateway", :subnet "subnet", "network-acl" "network-acl", :internetgateway "internet-gateway"} input), :shape "ResourceType"})

(clojure.core/defn- ser-ipv-6-address-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "Ipv6AddressList", :type "list"})

(clojure.core/defn- ser-resource-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "ResourceList", :type "list"})

(clojure.core/defn- ser-operation-type [input] #:http.request.field{:value (clojure.core/get {"add" "add", :add "add", "remove" "remove", :remove "remove"} input), :shape "OperationType"})

(clojure.core/defn- ser-fleet-on-demand-allocation-strategy [input] #:http.request.field{:value (clojure.core/get {"lowest-price" "lowest-price", :lowestprice "lowest-price", "prioritized" "prioritized", :prioritized "prioritized"} input), :shape "FleetOnDemandAllocationStrategy"})

(clojure.core/defn- ser-snapshot-attribute-name [input] #:http.request.field{:value (clojure.core/get {"productCodes" "productCodes", :product-codes "productCodes", "createVolumePermission" "createVolumePermission", :create-volume-permission "createVolumePermission"} input), :shape "SnapshotAttributeName"})

(clojure.core/defn- ser-currency-code-values [input] #:http.request.field{:value (clojure.core/get {"USD" "USD", :usd "USD"} input), :shape "CurrencyCodeValues"})

(clojure.core/defn- ser-network-interface-attribute [input] #:http.request.field{:value (clojure.core/get {"description" "description", :description "description", "groupSet" "groupSet", :group-set "groupSet", "sourceDestCheck" "sourceDestCheck", :source-dest-check "sourceDestCheck", "attachment" "attachment", :attachment "attachment"} input), :shape "NetworkInterfaceAttribute"})

(clojure.core/defn- ser-report-instance-reason-codes [input] #:http.request.field{:value (clojure.core/get {"password-not-available" "password-not-available", "performance-instance-store" "performance-instance-store", :other "other", :performancenetwork "performance-network", :performanceebsvolume "performance-ebs-volume", "not-accepting-credentials" "not-accepting-credentials", "unresponsive" "unresponsive", :performanceother "performance-other", :passwordnotavailable "password-not-available", "other" "other", "performance-ebs-volume" "performance-ebs-volume", :notacceptingcredentials "not-accepting-credentials", "instance-stuck-in-state" "instance-stuck-in-state", :performanceinstancestore "performance-instance-store", "performance-network" "performance-network", :instancestuckinstate "instance-stuck-in-state", :unresponsive "unresponsive", "performance-other" "performance-other"} input), :shape "ReportInstanceReasonCodes"})

(clojure.core/defn- ser-billing-product-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "BillingProductList", :type "list"})

(clojure.core/defn- ser-bundle-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "BundleId"}))) input), :shape "BundleIdStringList", :type "list"})

(clojure.core/defn- ser-egress-only-internet-gateway-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-egress-only-internet-gateway-id coll) #:http.request.field{:shape "EgressOnlyInternetGatewayId", :location-name "item"}))) input), :shape "EgressOnlyInternetGatewayIdList", :type "list"})

(clojure.core/defn- ser-volume-type [input] #:http.request.field{:value (clojure.core/get {"standard" "standard", "sc1" "sc1", "io1" "io1", :sc-1 "sc1", :st-1 "st1", "gp2" "gp2", "st1" "st1", :io-1 "io1", :standard "standard", :gp-2 "gp2"} input), :shape "VolumeType"})

(clojure.core/defn- ser-account-attribute-name-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-account-attribute-name coll) #:http.request.field{:shape "AccountAttributeName", :location-name "attributeName"}))) input), :shape "AccountAttributeNameStringList", :type "list"})

(clojure.core/defn- ser-target-capacity-specification-request [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-integer (:total-target-capacity input)) #:http.request.field{:name "TotalTargetCapacity", :shape "Integer"})], :shape "TargetCapacitySpecificationRequest", :type "structure"} (clojure.core/contains? input :on-demand-target-capacity) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :on-demand-target-capacity)) #:http.request.field{:name "OnDemandTargetCapacity", :shape "Integer"})) (clojure.core/contains? input :spot-target-capacity) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :spot-target-capacity)) #:http.request.field{:name "SpotTargetCapacity", :shape "Integer"})) (clojure.core/contains? input :default-target-capacity-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-default-target-capacity-type (input :default-target-capacity-type)) #:http.request.field{:name "DefaultTargetCapacityType", :shape "DefaultTargetCapacityType"}))))

(clojure.core/defn- ser-tunnel-options-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-vpn-tunnel-options-specification coll) #:http.request.field{:shape "VpnTunnelOptionsSpecification", :location-name "item"}))) input), :shape "TunnelOptionsList", :type "list"})

(clojure.core/defn- ser-launch-permission-modifications [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LaunchPermissionModifications", :type "structure"} (clojure.core/contains? input :add) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-permission-list (input :add)) #:http.request.field{:name "Add", :shape "LaunchPermissionList"})) (clojure.core/contains? input :remove) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-permission-list (input :remove)) #:http.request.field{:name "Remove", :shape "LaunchPermissionList"}))))

(clojure.core/defn- ser-classic-load-balancers-config [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-classic-load-balancers (:classic-load-balancers input)) #:http.request.field{:name "ClassicLoadBalancers", :shape "ClassicLoadBalancers", :location-name "classicLoadBalancers"})], :shape "ClassicLoadBalancersConfig", :type "structure"}))

(clojure.core/defn- ser-tag-specification-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-tag-specification coll) #:http.request.field{:shape "TagSpecification", :location-name "item"}))) input), :shape "TagSpecificationList", :type "list"})

(clojure.core/defn- ser-long [input] #:http.request.field{:value input, :shape "Long"})

(clojure.core/defn- ser-subnet-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SubnetId"}))) input), :shape "SubnetIdStringList", :type "list"})

(clojure.core/defn- ser-reserved-instance-limit-price [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ReservedInstanceLimitPrice", :type "structure"} (clojure.core/contains? input :amount) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-double (input :amount)) #:http.request.field{:name "Amount", :shape "Double", :location-name "amount"})) (clojure.core/contains? input :currency-code) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-currency-code-values (input :currency-code)) #:http.request.field{:name "CurrencyCode", :shape "CurrencyCodeValues", :location-name "currencyCode"}))))

(clojure.core/defn- ser-tag-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "TagSpecification", :type "structure"} (clojure.core/contains? input :resource-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-resource-type (input :resource-type)) #:http.request.field{:name "ResourceType", :shape "ResourceType", :location-name "resourceType"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList", :location-name "Tag"}))))

(clojure.core/defn- ser-region-name-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "RegionName"}))) input), :shape "RegionNameStringList", :type "list"})

(clojure.core/defn- ser-scheduled-instance-recurrence-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstanceRecurrenceRequest", :type "structure"} (clojure.core/contains? input :frequency) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :frequency)) #:http.request.field{:name "Frequency", :shape "String"})) (clojure.core/contains? input :interval) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :interval)) #:http.request.field{:name "Interval", :shape "Integer"})) (clojure.core/contains? input :occurrence-days) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-occurrence-day-request-set (input :occurrence-days)) #:http.request.field{:name "OccurrenceDays", :shape "OccurrenceDayRequestSet", :location-name "OccurrenceDay"})) (clojure.core/contains? input :occurrence-relative-to-end) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :occurrence-relative-to-end)) #:http.request.field{:name "OccurrenceRelativeToEnd", :shape "Boolean"})) (clojure.core/contains? input :occurrence-unit) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :occurrence-unit)) #:http.request.field{:name "OccurrenceUnit", :shape "String"}))))

(clojure.core/defn- ser-version-description [input] #:http.request.field{:value input, :shape "VersionDescription"})

(clojure.core/defn- ser-user-bucket [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "UserBucket", :type "structure"} (clojure.core/contains? input :s-3-bucket) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :s-3-bucket)) #:http.request.field{:name "S3Bucket", :shape "String"})) (clojure.core/contains? input :s-3-key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :s-3-key)) #:http.request.field{:name "S3Key", :shape "String"}))))

(clojure.core/defn- ser-scheduled-instances-network-interface [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstancesNetworkInterface", :type "structure"} (clojure.core/contains? input :associate-public-ip-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :associate-public-ip-address)) #:http.request.field{:name "AssociatePublicIpAddress", :shape "Boolean"})) (clojure.core/contains? input :private-ip-address-configs) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-private-ip-address-config-set (input :private-ip-address-configs)) #:http.request.field{:name "PrivateIpAddressConfigs", :shape "PrivateIpAddressConfigSet", :location-name "PrivateIpAddressConfig"})) (clojure.core/contains? input :ipv-6-addresses) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-ipv-6-address-list (input :ipv-6-addresses)) #:http.request.field{:name "Ipv6Addresses", :shape "ScheduledInstancesIpv6AddressList", :location-name "Ipv6Address"})) (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String"})) (clojure.core/contains? input :network-interface-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String"})) (clojure.core/contains? input :device-index) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :device-index)) #:http.request.field{:name "DeviceIndex", :shape "Integer"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :groups) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instances-security-group-id-set (input :groups)) #:http.request.field{:name "Groups", :shape "ScheduledInstancesSecurityGroupIdSet", :location-name "Group"})) (clojure.core/contains? input :delete-on-termination) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :delete-on-termination)) #:http.request.field{:name "DeleteOnTermination", :shape "Boolean"})) (clojure.core/contains? input :secondary-private-ip-address-count) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :secondary-private-ip-address-count)) #:http.request.field{:name "SecondaryPrivateIpAddressCount", :shape "Integer"})) (clojure.core/contains? input :private-ip-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :private-ip-address)) #:http.request.field{:name "PrivateIpAddress", :shape "String"})) (clojure.core/contains? input :ipv-6-address-count) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :ipv-6-address-count)) #:http.request.field{:name "Ipv6AddressCount", :shape "Integer"}))))

(clojure.core/defn- ser-default-target-capacity-type [input] #:http.request.field{:value (clojure.core/get {"spot" "spot", :spot "spot", "on-demand" "on-demand", :ondemand "on-demand"} input), :shape "DefaultTargetCapacityType"})

(clojure.core/defn- ser-target-configuration-request [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:offering-id input)) #:http.request.field{:name "OfferingId", :shape "String"})], :shape "TargetConfigurationRequest", :type "structure"} (clojure.core/contains? input :instance-count) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :instance-count)) #:http.request.field{:name "InstanceCount", :shape "Integer"}))))

(clojure.core/defn- ser-reserved-instances-configuration-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-reserved-instances-configuration coll) #:http.request.field{:shape "ReservedInstancesConfiguration", :location-name "item"}))) input), :shape "ReservedInstancesConfigurationList", :type "list"})

(clojure.core/defn- ser-instance-network-interface-specification-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-instance-network-interface-specification coll) #:http.request.field{:shape "InstanceNetworkInterfaceSpecification", :location-name "item"}))) input), :shape "InstanceNetworkInterfaceSpecificationList", :type "list"})

(clojure.core/defn- ser-block-device-mapping [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "BlockDeviceMapping", :type "structure"} (clojure.core/contains? input :device-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :device-name)) #:http.request.field{:name "DeviceName", :shape "String", :location-name "deviceName"})) (clojure.core/contains? input :virtual-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :virtual-name)) #:http.request.field{:name "VirtualName", :shape "String", :location-name "virtualName"})) (clojure.core/contains? input :ebs) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ebs-block-device (input :ebs)) #:http.request.field{:name "Ebs", :shape "EbsBlockDevice", :location-name "ebs"})) (clojure.core/contains? input :no-device) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :no-device)) #:http.request.field{:name "NoDevice", :shape "String", :location-name "noDevice"}))))

(clojure.core/defn- ser-max-results [input] #:http.request.field{:value input, :shape "MaxResults"})

(clojure.core/defn- ser-tag [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Tag", :type "structure"} (clojure.core/contains? input :key) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key)) #:http.request.field{:name "Key", :shape "String", :location-name "key"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String", :location-name "value"}))))

(clojure.core/defn- ser-spot-fleet-tag-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "SpotFleetTagSpecification", :type "structure"} (clojure.core/contains? input :resource-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-resource-type (input :resource-type)) #:http.request.field{:name "ResourceType", :shape "ResourceType", :location-name "resourceType"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList", :location-name "tag"}))))

(clojure.core/defn- ser-user-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "UserId"}))) input), :shape "UserIdStringList", :type "list"})

(clojure.core/defn- ser-executable-by-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ExecutableBy"}))) input), :shape "ExecutableByStringList", :type "list"})

(clojure.core/defn- ser-launch-template-name-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-launch-template-name coll) #:http.request.field{:shape "LaunchTemplateName", :location-name "item"}))) input), :shape "LaunchTemplateNameStringList", :type "list"})

(clojure.core/defn- ser-instance-market-options-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "InstanceMarketOptionsRequest", :type "structure"} (clojure.core/contains? input :market-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-market-type (input :market-type)) #:http.request.field{:name "MarketType", :shape "MarketType"})) (clojure.core/contains? input :spot-options) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-spot-market-options (input :spot-options)) #:http.request.field{:name "SpotOptions", :shape "SpotMarketOptions"}))))

(clojure.core/defn- ser-platform-values [input] #:http.request.field{:value (clojure.core/get {"Windows" "Windows", :windows "Windows"} input), :shape "PlatformValues"})

(clojure.core/defn- ser-disk-image [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "DiskImage", :type "structure"} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :image) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-disk-image-detail (input :image)) #:http.request.field{:name "Image", :shape "DiskImageDetail"})) (clojure.core/contains? input :volume) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-volume-detail (input :volume)) #:http.request.field{:name "Volume", :shape "VolumeDetail"}))))

(clojure.core/defn- ser-port-range [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "PortRange", :type "structure"} (clojure.core/contains? input :from) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :from)) #:http.request.field{:name "From", :shape "Integer", :location-name "from"})) (clojure.core/contains? input :to) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :to)) #:http.request.field{:name "To", :shape "Integer", :location-name "to"}))))

(clojure.core/defn- ser-spot-fleet-launch-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "SpotFleetLaunchSpecification", :type "structure"} (clojure.core/contains? input :tag-specifications) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-spot-fleet-tag-specification-list (input :tag-specifications)) #:http.request.field{:name "TagSpecifications", :shape "SpotFleetTagSpecificationList", :location-name "tagSpecificationSet"})) (clojure.core/contains? input :kernel-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kernel-id)) #:http.request.field{:name "KernelId", :shape "String", :location-name "kernelId"})) (clojure.core/contains? input :image-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :image-id)) #:http.request.field{:name "ImageId", :shape "String", :location-name "imageId"})) (clojure.core/contains? input :placement) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-spot-placement (input :placement)) #:http.request.field{:name "Placement", :shape "SpotPlacement", :location-name "placement"})) (clojure.core/contains? input :addressing-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :addressing-type)) #:http.request.field{:name "AddressingType", :shape "String", :location-name "addressingType"})) (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String", :location-name "subnetId"})) (clojure.core/contains? input :security-groups) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-group-identifier-list (input :security-groups)) #:http.request.field{:name "SecurityGroups", :shape "GroupIdentifierList", :location-name "groupSet"})) (clojure.core/contains? input :ebs-optimized) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :ebs-optimized)) #:http.request.field{:name "EbsOptimized", :shape "Boolean", :location-name "ebsOptimized"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-type (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "InstanceType", :location-name "instanceType"})) (clojure.core/contains? input :key-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key-name)) #:http.request.field{:name "KeyName", :shape "String", :location-name "keyName"})) (clojure.core/contains? input :spot-price) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :spot-price)) #:http.request.field{:name "SpotPrice", :shape "String", :location-name "spotPrice"})) (clojure.core/contains? input :monitoring) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-spot-fleet-monitoring (input :monitoring)) #:http.request.field{:name "Monitoring", :shape "SpotFleetMonitoring", :location-name "monitoring"})) (clojure.core/contains? input :weighted-capacity) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-double (input :weighted-capacity)) #:http.request.field{:name "WeightedCapacity", :shape "Double", :location-name "weightedCapacity"})) (clojure.core/contains? input :block-device-mappings) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-block-device-mapping-list (input :block-device-mappings)) #:http.request.field{:name "BlockDeviceMappings", :shape "BlockDeviceMappingList", :location-name "blockDeviceMapping"})) (clojure.core/contains? input :ramdisk-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ramdisk-id)) #:http.request.field{:name "RamdiskId", :shape "String", :location-name "ramdiskId"})) (clojure.core/contains? input :user-data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :user-data)) #:http.request.field{:name "UserData", :shape "String", :location-name "userData"})) (clojure.core/contains? input :iam-instance-profile) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-iam-instance-profile-specification (input :iam-instance-profile)) #:http.request.field{:name "IamInstanceProfile", :shape "IamInstanceProfileSpecification", :location-name "iamInstanceProfile"})) (clojure.core/contains? input :network-interfaces) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-network-interface-specification-list (input :network-interfaces)) #:http.request.field{:name "NetworkInterfaces", :shape "InstanceNetworkInterfaceSpecificationList", :location-name "networkInterfaceSet"}))))

(clojure.core/defn- ser-ip-range [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "IpRange", :type "structure"} (clojure.core/contains? input :cidr-ip) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidr-ip)) #:http.request.field{:name "CidrIp", :shape "String", :location-name "cidrIp"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"}))))

(clojure.core/defn- ser-version-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "VersionStringList", :type "list"})

(clojure.core/defn- ser-block-device-mapping-request-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-block-device-mapping coll) #:http.request.field{:shape "BlockDeviceMapping", :location-name "BlockDeviceMapping"}))) input), :shape "BlockDeviceMappingRequestList", :type "list"})

(clojure.core/defn- ser-container-format [input] #:http.request.field{:value (clojure.core/get {"ova" "ova", :ova "ova"} input), :shape "ContainerFormat"})

(clojure.core/defn- ser-purchase-request-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-purchase-request coll) #:http.request.field{:shape "PurchaseRequest", :location-name "PurchaseRequest"}))) input), :shape "PurchaseRequestSet", :type "list", :min 1})

(clojure.core/defn- ser-new-dhcp-configuration-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-new-dhcp-configuration coll) #:http.request.field{:shape "NewDhcpConfiguration", :location-name "item"}))) input), :shape "NewDhcpConfigurationList", :type "list"})

(clojure.core/defn- ser-market-type [input] #:http.request.field{:value (clojure.core/get {"spot" "spot", :spot "spot"} input), :shape "MarketType"})

(clojure.core/defn- ser-fleet-launch-template-specification-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "FleetLaunchTemplateSpecificationRequest", :type "structure"} (clojure.core/contains? input :launch-template-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :launch-template-id)) #:http.request.field{:name "LaunchTemplateId", :shape "String"})) (clojure.core/contains? input :launch-template-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-template-name (input :launch-template-name)) #:http.request.field{:name "LaunchTemplateName", :shape "LaunchTemplateName"})) (clojure.core/contains? input :version) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :version)) #:http.request.field{:name "Version", :shape "String"}))))

(clojure.core/defn- ser-block-device-mapping-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-block-device-mapping coll) #:http.request.field{:shape "BlockDeviceMapping", :location-name "item"}))) input), :shape "BlockDeviceMappingList", :type "list"})

(clojure.core/defn- ser-blob [input] #:http.request.field{:value (portkey.aws/base64-encode input), :shape "Blob"})

(clojure.core/defn- ser-gateway-type [input] #:http.request.field{:value (clojure.core/get {"ipsec.1" "ipsec.1", :ipsec-1 "ipsec.1"} input), :shape "GatewayType"})

(clojure.core/defn- ser-scheduled-instances-iam-instance-profile [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ScheduledInstancesIamInstanceProfile", :type "structure"} (clojure.core/contains? input :arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :arn)) #:http.request.field{:name "Arn", :shape "String"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"}))))

(clojure.core/defn- ser-report-status-type [input] #:http.request.field{:value (clojure.core/get {"ok" "ok", :ok "ok", "impaired" "impaired", :impaired "impaired"} input), :shape "ReportStatusType"})

(clojure.core/defn- ser-ip-range-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-ip-range coll) #:http.request.field{:shape "IpRange", :location-name "item"}))) input), :shape "IpRangeList", :type "list"})

(clojure.core/defn- ser-import-instance-launch-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "ImportInstanceLaunchSpecification", :type "structure"} (clojure.core/contains? input :placement) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-placement (input :placement)) #:http.request.field{:name "Placement", :shape "Placement", :location-name "placement"})) (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String", :location-name "subnetId"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-type (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "InstanceType", :location-name "instanceType"})) (clojure.core/contains? input :group-ids) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-id-string-list (input :group-ids)) #:http.request.field{:name "GroupIds", :shape "SecurityGroupIdStringList", :location-name "GroupId"})) (clojure.core/contains? input :additional-info) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :additional-info)) #:http.request.field{:name "AdditionalInfo", :shape "String", :location-name "additionalInfo"})) (clojure.core/contains? input :monitoring) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :monitoring)) #:http.request.field{:name "Monitoring", :shape "Boolean", :location-name "monitoring"})) (clojure.core/contains? input :architecture) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-architecture-values (input :architecture)) #:http.request.field{:name "Architecture", :shape "ArchitectureValues", :location-name "architecture"})) (clojure.core/contains? input :user-data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-user-data (input :user-data)) #:http.request.field{:name "UserData", :shape "UserData", :location-name "userData"})) (clojure.core/contains? input :instance-initiated-shutdown-behavior) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-shutdown-behavior (input :instance-initiated-shutdown-behavior)) #:http.request.field{:name "InstanceInitiatedShutdownBehavior", :shape "ShutdownBehavior", :location-name "instanceInitiatedShutdownBehavior"})) (clojure.core/contains? input :group-names) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-string-list (input :group-names)) #:http.request.field{:name "GroupNames", :shape "SecurityGroupStringList", :location-name "GroupName"})) (clojure.core/contains? input :private-ip-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :private-ip-address)) #:http.request.field{:name "PrivateIpAddress", :shape "String", :location-name "privateIpAddress"}))))

(clojure.core/defn- ser-classic-load-balancers [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-classic-load-balancer coll) #:http.request.field{:shape "ClassicLoadBalancer", :location-name "item"}))) input), :shape "ClassicLoadBalancers", :type "list", :max 5, :min 1})

(clojure.core/defn- ser-spot-options-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "SpotOptionsRequest", :type "structure"} (clojure.core/contains? input :allocation-strategy) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-spot-allocation-strategy (input :allocation-strategy)) #:http.request.field{:name "AllocationStrategy", :shape "SpotAllocationStrategy"})) (clojure.core/contains? input :instance-interruption-behavior) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-spot-instance-interruption-behavior (input :instance-interruption-behavior)) #:http.request.field{:name "InstanceInterruptionBehavior", :shape "SpotInstanceInterruptionBehavior"})) (clojure.core/contains? input :instance-pools-to-use-count) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :instance-pools-to-use-count)) #:http.request.field{:name "InstancePoolsToUseCount", :shape "Integer"}))))

(clojure.core/defn- ser-scheduled-instances-block-device-mapping-set [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-scheduled-instances-block-device-mapping coll) #:http.request.field{:shape "ScheduledInstancesBlockDeviceMapping", :location-name "BlockDeviceMapping"}))) input), :shape "ScheduledInstancesBlockDeviceMappingSet", :type "list"})

(clojure.core/defn- ser-purchase-request [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-integer (:instance-count input)) #:http.request.field{:name "InstanceCount", :shape "Integer"}) (clojure.core/into (ser-string (:purchase-token input)) #:http.request.field{:name "PurchaseToken", :shape "String"})], :shape "PurchaseRequest", :type "structure"}))

(clojure.core/defn- ser-reserved-instances-modification-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ReservedInstancesModificationId"}))) input), :shape "ReservedInstancesModificationIdStringList", :type "list"})

(clojure.core/defn- ser-target-group [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:arn input)) #:http.request.field{:name "Arn", :shape "String", :location-name "arn"})], :shape "TargetGroup", :type "structure"}))

(clojure.core/defn- ser-resource-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "ResourceIdList", :type "list"})

(clojure.core/defn- ser-on-demand-options-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "OnDemandOptionsRequest", :type "structure"} (clojure.core/contains? input :allocation-strategy) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-fleet-on-demand-allocation-strategy (input :allocation-strategy)) #:http.request.field{:name "AllocationStrategy", :shape "FleetOnDemandAllocationStrategy"}))))

(clojure.core/defn- ser-ipv-6-address [input] #:http.request.field{:value input, :shape "Ipv6Address"})

(clojure.core/defn- ser-network-interface-permission-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String"}))) input), :shape "NetworkInterfacePermissionIdList", :type "list"})

(clojure.core/defn- ser-offering-class-type [input] #:http.request.field{:value (clojure.core/get {"standard" "standard", :standard "standard", "convertible" "convertible", :convertible "convertible"} input), :shape "OfferingClassType"})

(clojure.core/defn- ser-request-host-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "item"}))) input), :shape "RequestHostIdList", :type "list"})

(clojure.core/defn- ser-launch-template-overrides-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-launch-template-overrides coll) #:http.request.field{:shape "LaunchTemplateOverrides", :location-name "item"}))) input), :shape "LaunchTemplateOverridesList", :type "list"})

(clojure.core/defn- ser-image-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ImageId"}))) input), :shape "ImageIdStringList", :type "list"})

(clojure.core/defn- ser-launch-template-iam-instance-profile-specification-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LaunchTemplateIamInstanceProfileSpecificationRequest", :type "structure"} (clojure.core/contains? input :arn) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :arn)) #:http.request.field{:name "Arn", :shape "String"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"}))))

(clojure.core/defn- ser-instance-attribute-name [input] #:http.request.field{:value (clojure.core/get {:instance-initiated-shutdown-behavior "instanceInitiatedShutdownBehavior", "kernel" "kernel", "groupSet" "groupSet", "productCodes" "productCodes", :group-set "groupSet", :ena-support "enaSupport", "blockDeviceMapping" "blockDeviceMapping", :source-dest-check "sourceDestCheck", :disable-api-termination "disableApiTermination", :ramdisk "ramdisk", :root-device-name "rootDeviceName", :product-codes "productCodes", "disableApiTermination" "disableApiTermination", :instance-type "instanceType", :ebs-optimized "ebsOptimized", "sourceDestCheck" "sourceDestCheck", :user-data "userData", "userData" "userData", "ebsOptimized" "ebsOptimized", :block-device-mapping "blockDeviceMapping", "ramdisk" "ramdisk", :sriov-net-support "sriovNetSupport", "instanceType" "instanceType", :kernel "kernel", "enaSupport" "enaSupport", "rootDeviceName" "rootDeviceName", "instanceInitiatedShutdownBehavior" "instanceInitiatedShutdownBehavior", "sriovNetSupport" "sriovNetSupport"} input), :shape "InstanceAttributeName"})

(clojure.core/defn- ser-launch-template-block-device-mapping-request-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-launch-template-block-device-mapping-request coll) #:http.request.field{:shape "LaunchTemplateBlockDeviceMappingRequest", :location-name "BlockDeviceMapping"}))) input), :shape "LaunchTemplateBlockDeviceMappingRequestList", :type "list"})

(clojure.core/defn- ser-disk-image-detail [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-long (:bytes input)) #:http.request.field{:name "Bytes", :shape "Long", :location-name "bytes"}) (clojure.core/into (ser-disk-image-format (:format input)) #:http.request.field{:name "Format", :shape "DiskImageFormat", :location-name "format"}) (clojure.core/into (ser-string (:import-manifest-url input)) #:http.request.field{:name "ImportManifestUrl", :shape "String", :location-name "importManifestUrl"})], :shape "DiskImageDetail", :type "structure"}))

(clojure.core/defn- ser-user-data [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "UserData", :type "structure"} (clojure.core/contains? input :data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :data)) #:http.request.field{:name "Data", :shape "String", :location-name "data"}))))

(clojure.core/defn- ser-offering-type-values [input] #:http.request.field{:value (clojure.core/get {"All Upfront" "All Upfront", :heavy-utilization "Heavy Utilization", :no-upfront "No Upfront", :medium-utilization "Medium Utilization", :all-upfront "All Upfront", :light-utilization "Light Utilization", :partial-upfront "Partial Upfront", "No Upfront" "No Upfront", "Heavy Utilization" "Heavy Utilization", "Light Utilization" "Light Utilization", "Partial Upfront" "Partial Upfront", "Medium Utilization" "Medium Utilization"} input), :shape "OfferingTypeValues"})

(clojure.core/defn- ser-launch-template-tag-specification-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LaunchTemplateTagSpecificationRequest", :type "structure"} (clojure.core/contains? input :resource-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-resource-type (input :resource-type)) #:http.request.field{:name "ResourceType", :shape "ResourceType"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList", :location-name "Tag"}))))

(clojure.core/defn- ser-launch-template-block-device-mapping-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LaunchTemplateBlockDeviceMappingRequest", :type "structure"} (clojure.core/contains? input :device-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :device-name)) #:http.request.field{:name "DeviceName", :shape "String"})) (clojure.core/contains? input :virtual-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :virtual-name)) #:http.request.field{:name "VirtualName", :shape "String"})) (clojure.core/contains? input :ebs) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-template-ebs-block-device-request (input :ebs)) #:http.request.field{:name "Ebs", :shape "LaunchTemplateEbsBlockDeviceRequest"})) (clojure.core/contains? input :no-device) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :no-device)) #:http.request.field{:name "NoDevice", :shape "String"}))))

(clojure.core/defn- ser-network-interface-attachment-changes [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "NetworkInterfaceAttachmentChanges", :type "structure"} (clojure.core/contains? input :attachment-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :attachment-id)) #:http.request.field{:name "AttachmentId", :shape "String", :location-name "attachmentId"})) (clojure.core/contains? input :delete-on-termination) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :delete-on-termination)) #:http.request.field{:name "DeleteOnTermination", :shape "Boolean", :location-name "deleteOnTermination"}))))

(clojure.core/defn- ser-private-ip-address-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "PrivateIpAddress"}))) input), :shape "PrivateIpAddressStringList", :type "list"})

(clojure.core/defn- ser-credit-specification-request [input] (clojure.core/cond-> #:http.request.field{:value [(clojure.core/into (ser-string (:cpu-credits input)) #:http.request.field{:name "CpuCredits", :shape "String"})], :shape "CreditSpecificationRequest", :type "structure"}))

(clojure.core/defn- ser-scheduled-instances-ipv-6-address-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-scheduled-instances-ipv-6-address coll) #:http.request.field{:shape "ScheduledInstancesIpv6Address", :location-name "Ipv6Address"}))) input), :shape "ScheduledInstancesIpv6AddressList", :type "list"})

(clojure.core/defn- ser-owner-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "Owner"}))) input), :shape "OwnerStringList", :type "list"})

(clojure.core/defn- ser-create-volume-permission-modifications [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "CreateVolumePermissionModifications", :type "structure"} (clojure.core/contains? input :add) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-create-volume-permission-list (input :add)) #:http.request.field{:name "Add", :shape "CreateVolumePermissionList"})) (clojure.core/contains? input :remove) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-create-volume-permission-list (input :remove)) #:http.request.field{:name "Remove", :shape "CreateVolumePermissionList"}))))

(clojure.core/defn- ser-fleet-excess-capacity-termination-policy [input] #:http.request.field{:value (clojure.core/get {"no-termination" "no-termination", :notermination "no-termination", "termination" "termination", :termination "termination"} input), :shape "FleetExcessCapacityTerminationPolicy"})

(clojure.core/defn- ser-reason-codes-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-report-instance-reason-codes coll) #:http.request.field{:shape "ReportInstanceReasonCodes", :location-name "item"}))) input), :shape "ReasonCodesList", :type "list"})

(clojure.core/defn- ser-filter-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-filter coll) #:http.request.field{:shape "Filter", :location-name "Filter"}))) input), :shape "FilterList", :type "list"})

(clojure.core/defn- ser-launch-permission [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LaunchPermission", :type "structure"} (clojure.core/contains? input :group) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-permission-group (input :group)) #:http.request.field{:name "Group", :shape "PermissionGroup", :location-name "group"})) (clojure.core/contains? input :user-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :user-id)) #:http.request.field{:name "UserId", :shape "String", :location-name "userId"}))))

(clojure.core/defn- ser-ipv-6-range [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "Ipv6Range", :type "structure"} (clojure.core/contains? input :cidr-ipv-6) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidr-ipv-6)) #:http.request.field{:name "CidrIpv6", :shape "String", :location-name "cidrIpv6"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"}))))

(clojure.core/defn- ser-egress-only-internet-gateway-id [input] #:http.request.field{:value input, :shape "EgressOnlyInternetGatewayId"})

(clojure.core/defn- ser-vpn-gateway-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "VpnGatewayId"}))) input), :shape "VpnGatewayIdStringList", :type "list"})

(clojure.core/defn- ser-private-ip-address-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "PrivateIpAddressSpecification", :type "structure"} (clojure.core/contains? input :primary) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :primary)) #:http.request.field{:name "Primary", :shape "Boolean", :location-name "primary"})) (clojure.core/contains? input :private-ip-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :private-ip-address)) #:http.request.field{:name "PrivateIpAddress", :shape "String", :location-name "privateIpAddress"}))))

(clojure.core/defn- ser-request-spot-launch-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "RequestSpotLaunchSpecification", :type "structure"} (clojure.core/contains? input :kernel-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kernel-id)) #:http.request.field{:name "KernelId", :shape "String", :location-name "kernelId"})) (clojure.core/contains? input :security-group-ids) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :security-group-ids)) #:http.request.field{:name "SecurityGroupIds", :shape "ValueStringList", :location-name "SecurityGroupId"})) (clojure.core/contains? input :image-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :image-id)) #:http.request.field{:name "ImageId", :shape "String", :location-name "imageId"})) (clojure.core/contains? input :placement) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-spot-placement (input :placement)) #:http.request.field{:name "Placement", :shape "SpotPlacement", :location-name "placement"})) (clojure.core/contains? input :addressing-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :addressing-type)) #:http.request.field{:name "AddressingType", :shape "String", :location-name "addressingType"})) (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String", :location-name "subnetId"})) (clojure.core/contains? input :security-groups) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :security-groups)) #:http.request.field{:name "SecurityGroups", :shape "ValueStringList", :location-name "SecurityGroup"})) (clojure.core/contains? input :ebs-optimized) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :ebs-optimized)) #:http.request.field{:name "EbsOptimized", :shape "Boolean", :location-name "ebsOptimized"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-type (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "InstanceType", :location-name "instanceType"})) (clojure.core/contains? input :key-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key-name)) #:http.request.field{:name "KeyName", :shape "String", :location-name "keyName"})) (clojure.core/contains? input :monitoring) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-run-instances-monitoring-enabled (input :monitoring)) #:http.request.field{:name "Monitoring", :shape "RunInstancesMonitoringEnabled", :location-name "monitoring"})) (clojure.core/contains? input :block-device-mappings) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-block-device-mapping-list (input :block-device-mappings)) #:http.request.field{:name "BlockDeviceMappings", :shape "BlockDeviceMappingList", :location-name "blockDeviceMapping"})) (clojure.core/contains? input :ramdisk-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ramdisk-id)) #:http.request.field{:name "RamdiskId", :shape "String", :location-name "ramdiskId"})) (clojure.core/contains? input :user-data) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :user-data)) #:http.request.field{:name "UserData", :shape "String", :location-name "userData"})) (clojure.core/contains? input :iam-instance-profile) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-iam-instance-profile-specification (input :iam-instance-profile)) #:http.request.field{:name "IamInstanceProfile", :shape "IamInstanceProfileSpecification", :location-name "iamInstanceProfile"})) (clojure.core/contains? input :network-interfaces) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-network-interface-specification-list (input :network-interfaces)) #:http.request.field{:name "NetworkInterfaces", :shape "InstanceNetworkInterfaceSpecificationList", :location-name "NetworkInterface"}))))

(clojure.core/defn- ser-elastic-gpu-specification-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-elastic-gpu-specification coll) #:http.request.field{:shape "ElasticGpuSpecification", :location-name "ElasticGpuSpecification"}))) input), :shape "ElasticGpuSpecificationList", :type "list"})

(clojure.core/defn- ser-user-id-group-pair [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "UserIdGroupPair", :type "structure"} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"})) (clojure.core/contains? input :group-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "String", :location-name "groupId"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String", :location-name "groupName"})) (clojure.core/contains? input :peering-status) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :peering-status)) #:http.request.field{:name "PeeringStatus", :shape "String", :location-name "peeringStatus"})) (clojure.core/contains? input :user-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :user-id)) #:http.request.field{:name "UserId", :shape "String", :location-name "userId"})) (clojure.core/contains? input :vpc-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})) (clojure.core/contains? input :vpc-peering-connection-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-peering-connection-id)) #:http.request.field{:name "VpcPeeringConnectionId", :shape "String", :location-name "vpcPeeringConnectionId"}))))

(clojure.core/defn- ser-launch-templates-monitoring-request [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "LaunchTemplatesMonitoringRequest", :type "structure"} (clojure.core/contains? input :enabled) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :enabled)) #:http.request.field{:name "Enabled", :shape "Boolean"}))))

(clojure.core/defn- ser-import-task-id-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "ImportTaskId"}))) input), :shape "ImportTaskIdList", :type "list"})

(clojure.core/defn- ser-date-time [input] #:http.request.field{:value input, :shape "DateTime"})

(clojure.core/defn- ser-snapshot-id-string-list [input] #:http.request.field{:value (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (clojure.core/merge (ser-string coll) #:http.request.field{:shape "String", :location-name "SnapshotId"}))) input), :shape "SnapshotIdStringList", :type "list"})

(clojure.core/defn- ser-shutdown-behavior [input] #:http.request.field{:value (clojure.core/get {"stop" "stop", :stop "stop", "terminate" "terminate", :terminate "terminate"} input), :shape "ShutdownBehavior"})

(clojure.core/defn- ser-boolean [input] #:http.request.field{:value input, :shape "Boolean"})

(clojure.core/defn- ser-instance-network-interface-specification [input] (clojure.core/cond-> #:http.request.field{:value [], :shape "InstanceNetworkInterfaceSpecification", :type "structure"} (clojure.core/contains? input :associate-public-ip-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :associate-public-ip-address)) #:http.request.field{:name "AssociatePublicIpAddress", :shape "Boolean", :location-name "associatePublicIpAddress"})) (clojure.core/contains? input :ipv-6-addresses) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-ipv-6-address-list (input :ipv-6-addresses)) #:http.request.field{:name "Ipv6Addresses", :shape "InstanceIpv6AddressList", :location-name "ipv6AddressesSet", :query-name "Ipv6Addresses"})) (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String", :location-name "subnetId"})) (clojure.core/contains? input :network-interface-id) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})) (clojure.core/contains? input :device-index) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :device-index)) #:http.request.field{:name "DeviceIndex", :shape "Integer", :location-name "deviceIndex"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"})) (clojure.core/contains? input :groups) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-id-string-list (input :groups)) #:http.request.field{:name "Groups", :shape "SecurityGroupIdStringList", :location-name "SecurityGroupId"})) (clojure.core/contains? input :delete-on-termination) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :delete-on-termination)) #:http.request.field{:name "DeleteOnTermination", :shape "Boolean", :location-name "deleteOnTermination"})) (clojure.core/contains? input :private-ip-addresses) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-private-ip-address-specification-list (input :private-ip-addresses)) #:http.request.field{:name "PrivateIpAddresses", :shape "PrivateIpAddressSpecificationList", :location-name "privateIpAddressesSet", :query-name "PrivateIpAddresses"})) (clojure.core/contains? input :secondary-private-ip-address-count) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :secondary-private-ip-address-count)) #:http.request.field{:name "SecondaryPrivateIpAddressCount", :shape "Integer", :location-name "secondaryPrivateIpAddressCount"})) (clojure.core/contains? input :private-ip-address) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :private-ip-address)) #:http.request.field{:name "PrivateIpAddress", :shape "String", :location-name "privateIpAddress"})) (clojure.core/contains? input :ipv-6-address-count) (clojure.core/update-in [:http.request.field/value] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :ipv-6-address-count)) #:http.request.field{:name "Ipv6AddressCount", :shape "Integer", :location-name "ipv6AddressCount"}))))

(clojure.core/defn- req-describe-snapshots-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :owner-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-owner-string-list (input :owner-ids)) #:http.request.field{:name "OwnerIds", :shape "OwnerStringList", :location-name "Owner"})) (clojure.core/contains? input :restorable-by-user-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-restorable-by-string-list (input :restorable-by-user-ids)) #:http.request.field{:name "RestorableByUserIds", :shape "RestorableByStringList", :location-name "RestorableBy"})) (clojure.core/contains? input :snapshot-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-snapshot-id-string-list (input :snapshot-ids)) #:http.request.field{:name "SnapshotIds", :shape "SnapshotIdStringList", :location-name "SnapshotId"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-spot-fleet-requests-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :spot-fleet-request-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :spot-fleet-request-ids)) #:http.request.field{:name "SpotFleetRequestIds", :shape "ValueStringList", :location-name "spotFleetRequestId"}))))

(clojure.core/defn- req-import-image-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :platform) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :platform)) #:http.request.field{:name "Platform", :shape "String"})) (clojure.core/contains? input :role-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :role-name)) #:http.request.field{:name "RoleName", :shape "String"})) (clojure.core/contains? input :client-data) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-client-data (input :client-data)) #:http.request.field{:name "ClientData", :shape "ClientData"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :disk-containers) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-image-disk-container-list (input :disk-containers)) #:http.request.field{:name "DiskContainers", :shape "ImageDiskContainerList", :location-name "DiskContainer"})) (clojure.core/contains? input :hypervisor) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :hypervisor)) #:http.request.field{:name "Hypervisor", :shape "String"})) (clojure.core/contains? input :architecture) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :architecture)) #:http.request.field{:name "Architecture", :shape "String"})) (clojure.core/contains? input :license-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :license-type)) #:http.request.field{:name "LicenseType", :shape "String"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"}))))

(clojure.core/defn- req-describe-vpc-endpoint-service-configurations-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :service-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :service-ids)) #:http.request.field{:name "ServiceIds", :shape "ValueStringList", :location-name "ServiceId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-confirm-product-instance-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"}) (clojure.core/into (ser-string (input :product-code)) #:http.request.field{:name "ProductCode", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-vpn-gateways-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :vpn-gateway-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpn-gateway-id-string-list (input :vpn-gateway-ids)) #:http.request.field{:name "VpnGatewayIds", :shape "VpnGatewayIdStringList", :location-name "VpnGatewayId"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-vpn-connection-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpn-connection-id)) #:http.request.field{:name "VpnConnectionId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-request-spot-fleet-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-spot-fleet-request-config-data (input :spot-fleet-request-config)) #:http.request.field{:name "SpotFleetRequestConfig", :shape "SpotFleetRequestConfigData", :location-name "spotFleetRequestConfig"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-fleet-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-fleet-identifier (input :fleet-id)) #:http.request.field{:name "FleetId", :shape "FleetIdentifier"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-describe-scheduled-instances-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :scheduled-instance-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-scheduled-instance-id-request-set (input :scheduled-instance-ids)) #:http.request.field{:name "ScheduledInstanceIds", :shape "ScheduledInstanceIdRequestSet", :location-name "ScheduledInstanceId"})) (clojure.core/contains? input :slot-start-time-range) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-slot-start-time-range-request (input :slot-start-time-range)) #:http.request.field{:name "SlotStartTimeRange", :shape "SlotStartTimeRangeRequest"}))))

(clojure.core/defn- req-delete-flow-logs-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-value-string-list (input :flow-log-ids)) #:http.request.field{:name "FlowLogIds", :shape "ValueStringList", :location-name "FlowLogId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"}))))

(clojure.core/defn- req-describe-addresses-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :public-ips) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-public-ip-string-list (input :public-ips)) #:http.request.field{:name "PublicIps", :shape "PublicIpStringList", :location-name "PublicIp"})) (clojure.core/contains? input :allocation-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-allocation-id-list (input :allocation-ids)) #:http.request.field{:name "AllocationIds", :shape "AllocationIdList", :location-name "AllocationId"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-network-acls-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :network-acl-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :network-acl-ids)) #:http.request.field{:name "NetworkAclIds", :shape "ValueStringList", :location-name "NetworkAclId"}))))

(clojure.core/defn- req-modify-id-format-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :resource)) #:http.request.field{:name "Resource", :shape "String"}) (clojure.core/into (ser-boolean (input :use-long-ids)) #:http.request.field{:name "UseLongIds", :shape "Boolean"})]}))

(clojure.core/defn- req-reset-network-interface-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :source-dest-check) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-dest-check)) #:http.request.field{:name "SourceDestCheck", :shape "String", :location-name "sourceDestCheck"}))))

(clojure.core/defn- req-describe-internet-gateways-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :internet-gateway-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :internet-gateway-ids)) #:http.request.field{:name "InternetGatewayIds", :shape "ValueStringList", :location-name "internetGatewayId"}))))

(clojure.core/defn- req-disassociate-iam-instance-profile-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :association-id)) #:http.request.field{:name "AssociationId", :shape "String"})]}))

(clojure.core/defn- req-modify-vpc-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :enable-dns-hostnames) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :enable-dns-hostnames)) #:http.request.field{:name "EnableDnsHostnames", :shape "AttributeBooleanValue"})) (clojure.core/contains? input :enable-dns-support) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :enable-dns-support)) #:http.request.field{:name "EnableDnsSupport", :shape "AttributeBooleanValue"}))))

(clojure.core/defn- req-delete-customer-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :customer-gateway-id)) #:http.request.field{:name "CustomerGatewayId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-create-reserved-instances-listing-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String", :location-name "clientToken"}) (clojure.core/into (ser-integer (input :instance-count)) #:http.request.field{:name "InstanceCount", :shape "Integer", :location-name "instanceCount"}) (clojure.core/into (ser-price-schedule-specification-list (input :price-schedules)) #:http.request.field{:name "PriceSchedules", :shape "PriceScheduleSpecificationList", :location-name "priceSchedules"}) (clojure.core/into (ser-string (input :reserved-instances-id)) #:http.request.field{:name "ReservedInstancesId", :shape "String", :location-name "reservedInstancesId"})]}))

(clojure.core/defn- req-replace-route-table-association-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :association-id)) #:http.request.field{:name "AssociationId", :shape "String", :location-name "associationId"}) (clojure.core/into (ser-string (input :route-table-id)) #:http.request.field{:name "RouteTableId", :shape "String", :location-name "routeTableId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-create-snapshot-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String"})]} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :tag-specifications) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-specification-list (input :tag-specifications)) #:http.request.field{:name "TagSpecifications", :shape "TagSpecificationList", :location-name "TagSpecification"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-allocate-hosts-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String", :location-name "availabilityZone"}) (clojure.core/into (ser-string (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "String", :location-name "instanceType"}) (clojure.core/into (ser-integer (input :quantity)) #:http.request.field{:name "Quantity", :shape "Integer", :location-name "quantity"})]} (clojure.core/contains? input :auto-placement) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-auto-placement (input :auto-placement)) #:http.request.field{:name "AutoPlacement", :shape "AutoPlacement", :location-name "autoPlacement"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String", :location-name "clientToken"})) (clojure.core/contains? input :tag-specifications) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-specification-list (input :tag-specifications)) #:http.request.field{:name "TagSpecifications", :shape "TagSpecificationList", :location-name "TagSpecification"}))))

(clojure.core/defn- req-create-image-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"}) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String", :location-name "name"})]} (clojure.core/contains? input :block-device-mappings) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-block-device-mapping-request-list (input :block-device-mappings)) #:http.request.field{:name "BlockDeviceMappings", :shape "BlockDeviceMappingRequestList", :location-name "blockDeviceMapping"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :no-reboot) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :no-reboot)) #:http.request.field{:name "NoReboot", :shape "Boolean", :location-name "noReboot"}))))

(clojure.core/defn- req-create-vpn-connection-route-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :destination-cidr-block)) #:http.request.field{:name "DestinationCidrBlock", :shape "String"}) (clojure.core/into (ser-string (input :vpn-connection-id)) #:http.request.field{:name "VpnConnectionId", :shape "String"})]}))

(clojure.core/defn- req-create-egress-only-internet-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"})]} (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"}))))

(clojure.core/defn- req-register-image-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String", :location-name "name"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :kernel-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kernel-id)) #:http.request.field{:name "KernelId", :shape "String", :location-name "kernelId"})) (clojure.core/contains? input :sriov-net-support) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :sriov-net-support)) #:http.request.field{:name "SriovNetSupport", :shape "String", :location-name "sriovNetSupport"})) (clojure.core/contains? input :billing-products) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-billing-product-list (input :billing-products)) #:http.request.field{:name "BillingProducts", :shape "BillingProductList", :location-name "BillingProduct"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"})) (clojure.core/contains? input :block-device-mappings) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-block-device-mapping-request-list (input :block-device-mappings)) #:http.request.field{:name "BlockDeviceMappings", :shape "BlockDeviceMappingRequestList", :location-name "BlockDeviceMapping"})) (clojure.core/contains? input :architecture) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-architecture-values (input :architecture)) #:http.request.field{:name "Architecture", :shape "ArchitectureValues", :location-name "architecture"})) (clojure.core/contains? input :virtualization-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :virtualization-type)) #:http.request.field{:name "VirtualizationType", :shape "String", :location-name "virtualizationType"})) (clojure.core/contains? input :image-location) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :image-location)) #:http.request.field{:name "ImageLocation", :shape "String"})) (clojure.core/contains? input :root-device-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :root-device-name)) #:http.request.field{:name "RootDeviceName", :shape "String", :location-name "rootDeviceName"})) (clojure.core/contains? input :ramdisk-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ramdisk-id)) #:http.request.field{:name "RamdiskId", :shape "String", :location-name "ramdiskId"})) (clojure.core/contains? input :ena-support) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :ena-support)) #:http.request.field{:name "EnaSupport", :shape "Boolean", :location-name "enaSupport"}))))

(clojure.core/defn- req-modify-hosts-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-auto-placement (input :auto-placement)) #:http.request.field{:name "AutoPlacement", :shape "AutoPlacement", :location-name "autoPlacement"}) (clojure.core/into (ser-request-host-id-list (input :host-ids)) #:http.request.field{:name "HostIds", :shape "RequestHostIdList", :location-name "hostId"})]}))

(clojure.core/defn- req-delete-volume-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-network-acl-entry-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-boolean (input :egress)) #:http.request.field{:name "Egress", :shape "Boolean", :location-name "egress"}) (clojure.core/into (ser-string (input :network-acl-id)) #:http.request.field{:name "NetworkAclId", :shape "String", :location-name "networkAclId"}) (clojure.core/into (ser-integer (input :rule-number)) #:http.request.field{:name "RuleNumber", :shape "Integer", :location-name "ruleNumber"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-conversion-tasks-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :conversion-task-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-conversion-id-string-list (input :conversion-task-ids)) #:http.request.field{:name "ConversionTaskIds", :shape "ConversionIdStringList", :location-name "conversionTaskId"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-copy-image-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"}) (clojure.core/into (ser-string (input :source-image-id)) #:http.request.field{:name "SourceImageId", :shape "String"}) (clojure.core/into (ser-string (input :source-region)) #:http.request.field{:name "SourceRegion", :shape "String"})]} (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :encrypted)) #:http.request.field{:name "Encrypted", :shape "Boolean", :location-name "encrypted"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String", :location-name "kmsKeyId"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-cancel-conversion-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :conversion-task-id)) #:http.request.field{:name "ConversionTaskId", :shape "String", :location-name "conversionTaskId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :reason-message) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reason-message)) #:http.request.field{:name "ReasonMessage", :shape "String", :location-name "reasonMessage"}))))

(clojure.core/defn- req-describe-network-interface-permissions-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :network-interface-permission-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-network-interface-permission-id-list (input :network-interface-permission-ids)) #:http.request.field{:name "NetworkInterfacePermissionIds", :shape "NetworkInterfacePermissionIdList", :location-name "NetworkInterfacePermissionId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"}))))

(clojure.core/defn- req-modify-spot-fleet-request-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :spot-fleet-request-id)) #:http.request.field{:name "SpotFleetRequestId", :shape "String", :location-name "spotFleetRequestId"})]} (clojure.core/contains? input :excess-capacity-termination-policy) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-excess-capacity-termination-policy (input :excess-capacity-termination-policy)) #:http.request.field{:name "ExcessCapacityTerminationPolicy", :shape "ExcessCapacityTerminationPolicy", :location-name "excessCapacityTerminationPolicy"})) (clojure.core/contains? input :target-capacity) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :target-capacity)) #:http.request.field{:name "TargetCapacity", :shape "Integer", :location-name "targetCapacity"}))))

(clojure.core/defn- req-describe-flow-logs-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :filter) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filter)) #:http.request.field{:name "Filter", :shape "FilterList"})) (clojure.core/contains? input :flow-log-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :flow-log-ids)) #:http.request.field{:name "FlowLogIds", :shape "ValueStringList", :location-name "FlowLogId"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-describe-elastic-gpus-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :elastic-gpu-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-elastic-gpu-id-set (input :elastic-gpu-ids)) #:http.request.field{:name "ElasticGpuIds", :shape "ElasticGpuIdSet", :location-name "ElasticGpuId"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-delete-security-group-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "String"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-spot-price-history-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :instance-types) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-type-list (input :instance-types)) #:http.request.field{:name "InstanceTypes", :shape "InstanceTypeList", :location-name "InstanceType"})) (clojure.core/contains? input :end-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :end-time)) #:http.request.field{:name "EndTime", :shape "DateTime", :location-name "endTime"})) (clojure.core/contains? input :product-descriptions) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-product-description-list (input :product-descriptions)) #:http.request.field{:name "ProductDescriptions", :shape "ProductDescriptionList", :location-name "ProductDescription"})) (clojure.core/contains? input :start-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :start-time)) #:http.request.field{:name "StartTime", :shape "DateTime", :location-name "startTime"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String", :location-name "availabilityZone"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"}))))

(clojure.core/defn- req-bundle-instance-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"}) (clojure.core/into (ser-storage (input :storage)) #:http.request.field{:name "Storage", :shape "Storage"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-vpc-peering-connection-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-peering-connection-id)) #:http.request.field{:name "VpcPeeringConnectionId", :shape "String", :location-name "vpcPeeringConnectionId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-create-route-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :route-table-id)) #:http.request.field{:name "RouteTableId", :shape "String", :location-name "routeTableId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"})) (clojure.core/contains? input :nat-gateway-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :nat-gateway-id)) #:http.request.field{:name "NatGatewayId", :shape "String", :location-name "natGatewayId"})) (clojure.core/contains? input :network-interface-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})) (clojure.core/contains? input :destination-ipv-6-cidr-block) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :destination-ipv-6-cidr-block)) #:http.request.field{:name "DestinationIpv6CidrBlock", :shape "String", :location-name "destinationIpv6CidrBlock"})) (clojure.core/contains? input :destination-cidr-block) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :destination-cidr-block)) #:http.request.field{:name "DestinationCidrBlock", :shape "String", :location-name "destinationCidrBlock"})) (clojure.core/contains? input :vpc-peering-connection-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-peering-connection-id)) #:http.request.field{:name "VpcPeeringConnectionId", :shape "String", :location-name "vpcPeeringConnectionId"})) (clojure.core/contains? input :gateway-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :gateway-id)) #:http.request.field{:name "GatewayId", :shape "String", :location-name "gatewayId"})) (clojure.core/contains? input :egress-only-internet-gateway-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :egress-only-internet-gateway-id)) #:http.request.field{:name "EgressOnlyInternetGatewayId", :shape "String", :location-name "egressOnlyInternetGatewayId"}))))

(clojure.core/defn- req-delete-vpc-endpoint-connection-notifications-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-value-string-list (input :connection-notification-ids)) #:http.request.field{:name "ConnectionNotificationIds", :shape "ValueStringList", :location-name "ConnectionNotificationId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"}))))

(clojure.core/defn- req-start-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})]} (clojure.core/contains? input :additional-info) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :additional-info)) #:http.request.field{:name "AdditionalInfo", :shape "String", :location-name "additionalInfo"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-network-interface-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-create-vpc-endpoint-connection-notification-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :connection-notification-arn)) #:http.request.field{:name "ConnectionNotificationArn", :shape "String"}) (clojure.core/into (ser-value-string-list (input :connection-events)) #:http.request.field{:name "ConnectionEvents", :shape "ValueStringList"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :service-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :service-id)) #:http.request.field{:name "ServiceId", :shape "String"})) (clojure.core/contains? input :vpc-endpoint-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-endpoint-id)) #:http.request.field{:name "VpcEndpointId", :shape "String"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"}))))

(clojure.core/defn- req-describe-volume-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-volume-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "VolumeAttributeName"}) (clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-launch-template-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :launch-template-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :launch-template-id)) #:http.request.field{:name "LaunchTemplateId", :shape "String"})) (clojure.core/contains? input :launch-template-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-template-name (input :launch-template-name)) #:http.request.field{:name "LaunchTemplateName", :shape "LaunchTemplateName"}))))

(clojure.core/defn- req-unmonitor-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-snapshot-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-spot-fleet-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :spot-fleet-request-id)) #:http.request.field{:name "SpotFleetRequestId", :shape "String", :location-name "spotFleetRequestId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"}))))

(clojure.core/defn- req-import-snapshot-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :client-data) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-client-data (input :client-data)) #:http.request.field{:name "ClientData", :shape "ClientData"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :disk-container) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-snapshot-disk-container (input :disk-container)) #:http.request.field{:name "DiskContainer", :shape "SnapshotDiskContainer"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :role-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :role-name)) #:http.request.field{:name "RoleName", :shape "String"}))))

(clojure.core/defn- req-describe-vpc-endpoint-service-permissions-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :service-id)) #:http.request.field{:name "ServiceId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-describe-instance-status-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :instance-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :include-all-instances) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-all-instances)) #:http.request.field{:name "IncludeAllInstances", :shape "Boolean", :location-name "includeAllInstances"}))))

(clojure.core/defn- req-disable-vpc-classic-link-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-import-image-tasks-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :import-task-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-import-task-id-list (input :import-task-ids)) #:http.request.field{:name "ImportTaskIds", :shape "ImportTaskIdList", :location-name "ImportTaskId"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-copy-snapshot-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-region)) #:http.request.field{:name "SourceRegion", :shape "String"}) (clojure.core/into (ser-string (input :source-snapshot-id)) #:http.request.field{:name "SourceSnapshotId", :shape "String"})]} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :destination-region) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :destination-region)) #:http.request.field{:name "DestinationRegion", :shape "String", :location-name "destinationRegion"})) (clojure.core/contains? input :encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :encrypted)) #:http.request.field{:name "Encrypted", :shape "Boolean", :location-name "encrypted"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String", :location-name "kmsKeyId"})) (clojure.core/contains? input :presigned-url) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :presigned-url)) #:http.request.field{:name "PresignedUrl", :shape "String", :location-name "presignedUrl"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-instance-credit-specifications-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :instance-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-delete-internet-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :internet-gateway-id)) #:http.request.field{:name "InternetGatewayId", :shape "String", :location-name "internetGatewayId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-attach-volume-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :device)) #:http.request.field{:name "Device", :shape "String"}) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"}) (clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-modify-identity-id-format-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :principal-arn)) #:http.request.field{:name "PrincipalArn", :shape "String", :location-name "principalArn"}) (clojure.core/into (ser-string (input :resource)) #:http.request.field{:name "Resource", :shape "String", :location-name "resource"}) (clojure.core/into (ser-boolean (input :use-long-ids)) #:http.request.field{:name "UseLongIds", :shape "Boolean", :location-name "useLongIds"})]}))

(clojure.core/defn- req-cancel-export-task-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :export-task-id)) #:http.request.field{:name "ExportTaskId", :shape "String", :location-name "exportTaskId"})]}))

(clojure.core/defn- req-create-security-group-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "GroupDescription"}) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String"})]} (clojure.core/contains? input :vpc-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-revoke-security-group-ingress-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :source-security-group-owner-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-security-group-owner-id)) #:http.request.field{:name "SourceSecurityGroupOwnerId", :shape "String"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :to-port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :to-port)) #:http.request.field{:name "ToPort", :shape "Integer"})) (clojure.core/contains? input :source-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-security-group-name)) #:http.request.field{:name "SourceSecurityGroupName", :shape "String"})) (clojure.core/contains? input :ip-protocol) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ip-protocol)) #:http.request.field{:name "IpProtocol", :shape "String"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String"})) (clojure.core/contains? input :group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "String"})) (clojure.core/contains? input :from-port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :from-port)) #:http.request.field{:name "FromPort", :shape "Integer"})) (clojure.core/contains? input :ip-permissions) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ip-permission-list (input :ip-permissions)) #:http.request.field{:name "IpPermissions", :shape "IpPermissionList"})) (clojure.core/contains? input :cidr-ip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidr-ip)) #:http.request.field{:name "CidrIp", :shape "String"}))))

(clojure.core/defn- req-delete-vpn-connection-route-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :destination-cidr-block)) #:http.request.field{:name "DestinationCidrBlock", :shape "String"}) (clojure.core/into (ser-string (input :vpn-connection-id)) #:http.request.field{:name "VpnConnectionId", :shape "String"})]}))

(clojure.core/defn- req-delete-fpga-image-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :fpga-image-id)) #:http.request.field{:name "FpgaImageId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"}))))

(clojure.core/defn- req-create-key-pair-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :key-name)) #:http.request.field{:name "KeyName", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-create-vpn-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-gateway-type (input :type)) #:http.request.field{:name "Type", :shape "GatewayType"})]} (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :amazon-side-asn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long (input :amazon-side-asn)) #:http.request.field{:name "AmazonSideAsn", :shape "Long"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-replace-iam-instance-profile-association-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-iam-instance-profile-specification (input :iam-instance-profile)) #:http.request.field{:name "IamInstanceProfile", :shape "IamInstanceProfileSpecification"}) (clojure.core/into (ser-string (input :association-id)) #:http.request.field{:name "AssociationId", :shape "String"})]}))

(clojure.core/defn- req-create-fpga-image-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-storage-location (input :input-storage-location)) #:http.request.field{:name "InputStorageLocation", :shape "StorageLocation"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :logs-storage-location) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-storage-location (input :logs-storage-location)) #:http.request.field{:name "LogsStorageLocation", :shape "StorageLocation"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"}))))

(clojure.core/defn- req-enable-vgw-route-propagation-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :gateway-id)) #:http.request.field{:name "GatewayId", :shape "String"}) (clojure.core/into (ser-string (input :route-table-id)) #:http.request.field{:name "RouteTableId", :shape "String"})]}))

(clojure.core/defn- req-describe-regions-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :region-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-region-name-string-list (input :region-names)) #:http.request.field{:name "RegionNames", :shape "RegionNameStringList", :location-name "RegionName"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-vpn-connections-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :vpn-connection-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpn-connection-id-string-list (input :vpn-connection-ids)) #:http.request.field{:name "VpnConnectionIds", :shape "VpnConnectionIdStringList", :location-name "VpnConnectionId"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-replace-route-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :route-table-id)) #:http.request.field{:name "RouteTableId", :shape "String", :location-name "routeTableId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"})) (clojure.core/contains? input :nat-gateway-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :nat-gateway-id)) #:http.request.field{:name "NatGatewayId", :shape "String", :location-name "natGatewayId"})) (clojure.core/contains? input :network-interface-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})) (clojure.core/contains? input :destination-ipv-6-cidr-block) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :destination-ipv-6-cidr-block)) #:http.request.field{:name "DestinationIpv6CidrBlock", :shape "String", :location-name "destinationIpv6CidrBlock"})) (clojure.core/contains? input :destination-cidr-block) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :destination-cidr-block)) #:http.request.field{:name "DestinationCidrBlock", :shape "String", :location-name "destinationCidrBlock"})) (clojure.core/contains? input :vpc-peering-connection-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-peering-connection-id)) #:http.request.field{:name "VpcPeeringConnectionId", :shape "String", :location-name "vpcPeeringConnectionId"})) (clojure.core/contains? input :gateway-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :gateway-id)) #:http.request.field{:name "GatewayId", :shape "String", :location-name "gatewayId"})) (clojure.core/contains? input :egress-only-internet-gateway-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :egress-only-internet-gateway-id)) #:http.request.field{:name "EgressOnlyInternetGatewayId", :shape "String", :location-name "egressOnlyInternetGatewayId"}))))

(clojure.core/defn- req-unassign-ipv-6-addresses-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-ipv-6-address-list (input :ipv-6-addresses)) #:http.request.field{:name "Ipv6Addresses", :shape "Ipv6AddressList", :location-name "ipv6Addresses"}) (clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})]}))

(clojure.core/defn- req-create-spot-datafeed-subscription-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :bucket)) #:http.request.field{:name "Bucket", :shape "String", :location-name "bucket"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :prefix) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :prefix)) #:http.request.field{:name "Prefix", :shape "String", :location-name "prefix"}))))

(clojure.core/defn- req-describe-snapshot-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-snapshot-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "SnapshotAttributeName"}) (clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-authorize-security-group-egress-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "String", :location-name "groupId"})]} (clojure.core/contains? input :source-security-group-owner-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-security-group-owner-id)) #:http.request.field{:name "SourceSecurityGroupOwnerId", :shape "String", :location-name "sourceSecurityGroupOwnerId"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :to-port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :to-port)) #:http.request.field{:name "ToPort", :shape "Integer", :location-name "toPort"})) (clojure.core/contains? input :source-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-security-group-name)) #:http.request.field{:name "SourceSecurityGroupName", :shape "String", :location-name "sourceSecurityGroupName"})) (clojure.core/contains? input :ip-protocol) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ip-protocol)) #:http.request.field{:name "IpProtocol", :shape "String", :location-name "ipProtocol"})) (clojure.core/contains? input :from-port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :from-port)) #:http.request.field{:name "FromPort", :shape "Integer", :location-name "fromPort"})) (clojure.core/contains? input :ip-permissions) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ip-permission-list (input :ip-permissions)) #:http.request.field{:name "IpPermissions", :shape "IpPermissionList", :location-name "ipPermissions"})) (clojure.core/contains? input :cidr-ip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidr-ip)) #:http.request.field{:name "CidrIp", :shape "String", :location-name "cidrIp"}))))

(clojure.core/defn- req-import-key-pair-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :key-name)) #:http.request.field{:name "KeyName", :shape "String", :location-name "keyName"}) (clojure.core/into (ser-blob (input :public-key-material)) #:http.request.field{:name "PublicKeyMaterial", :shape "Blob", :location-name "publicKeyMaterial"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-tags-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-resource-id-list (input :resources)) #:http.request.field{:name "Resources", :shape "ResourceIdList", :location-name "resourceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :tags) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList", :location-name "tag"}))))

(clojure.core/defn- req-describe-dhcp-options-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dhcp-options-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-dhcp-options-id-string-list (input :dhcp-options-ids)) #:http.request.field{:name "DhcpOptionsIds", :shape "DhcpOptionsIdStringList", :location-name "DhcpOptionsId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-associate-iam-instance-profile-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-iam-instance-profile-specification (input :iam-instance-profile)) #:http.request.field{:name "IamInstanceProfile", :shape "IamInstanceProfileSpecification"}) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})]}))

(clojure.core/defn- req-describe-host-reservations-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filter) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filter)) #:http.request.field{:name "Filter", :shape "FilterList"})) (clojure.core/contains? input :host-reservation-id-set) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-host-reservation-id-set (input :host-reservation-id-set)) #:http.request.field{:name "HostReservationIdSet", :shape "HostReservationIdSet"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-modify-launch-template-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"})) (clojure.core/contains? input :launch-template-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :launch-template-id)) #:http.request.field{:name "LaunchTemplateId", :shape "String"})) (clojure.core/contains? input :launch-template-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-template-name (input :launch-template-name)) #:http.request.field{:name "LaunchTemplateName", :shape "LaunchTemplateName"})) (clojure.core/contains? input :default-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :default-version)) #:http.request.field{:name "DefaultVersion", :shape "String", :location-name "SetDefaultVersion"}))))

(clojure.core/defn- req-assign-private-ip-addresses-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})]} (clojure.core/contains? input :allow-reassignment) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :allow-reassignment)) #:http.request.field{:name "AllowReassignment", :shape "Boolean", :location-name "allowReassignment"})) (clojure.core/contains? input :private-ip-addresses) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-private-ip-address-string-list (input :private-ip-addresses)) #:http.request.field{:name "PrivateIpAddresses", :shape "PrivateIpAddressStringList", :location-name "privateIpAddress"})) (clojure.core/contains? input :secondary-private-ip-address-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :secondary-private-ip-address-count)) #:http.request.field{:name "SecondaryPrivateIpAddressCount", :shape "Integer", :location-name "secondaryPrivateIpAddressCount"}))))

(clojure.core/defn- req-detach-network-interface-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :attachment-id)) #:http.request.field{:name "AttachmentId", :shape "String", :location-name "attachmentId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :force) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :force)) #:http.request.field{:name "Force", :shape "Boolean", :location-name "force"}))))

(clojure.core/defn- req-associate-address-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :allocation-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :allocation-id)) #:http.request.field{:name "AllocationId", :shape "String"})) (clojure.core/contains? input :instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})) (clojure.core/contains? input :public-ip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :public-ip)) #:http.request.field{:name "PublicIp", :shape "String"})) (clojure.core/contains? input :allow-reassociation) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :allow-reassociation)) #:http.request.field{:name "AllowReassociation", :shape "Boolean", :location-name "allowReassociation"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :network-interface-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})) (clojure.core/contains? input :private-ip-address) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :private-ip-address)) #:http.request.field{:name "PrivateIpAddress", :shape "String", :location-name "privateIpAddress"}))))

(clojure.core/defn- req-create-internet-gateway-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-reset-fpga-image-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :fpga-image-id)) #:http.request.field{:name "FpgaImageId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :attribute) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-reset-fpga-image-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "ResetFpgaImageAttributeName"}))))

(clojure.core/defn- req-cancel-spot-instance-requests-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-spot-instance-request-id-list (input :spot-instance-request-ids)) #:http.request.field{:name "SpotInstanceRequestIds", :shape "SpotInstanceRequestIdList", :location-name "SpotInstanceRequestId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-get-console-output-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :latest) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :latest)) #:http.request.field{:name "Latest", :shape "Boolean"}))))

(clojure.core/defn- req-describe-nat-gateways-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filter) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filter)) #:http.request.field{:name "Filter", :shape "FilterList"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :nat-gateway-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :nat-gateway-ids)) #:http.request.field{:name "NatGatewayIds", :shape "ValueStringList", :location-name "NatGatewayId"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-create-vpc-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cidr-block)) #:http.request.field{:name "CidrBlock", :shape "String"})]} (clojure.core/contains? input :amazon-provided-ipv-6-cidr-block) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :amazon-provided-ipv-6-cidr-block)) #:http.request.field{:name "AmazonProvidedIpv6CidrBlock", :shape "Boolean", :location-name "amazonProvidedIpv6CidrBlock"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :instance-tenancy) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tenancy (input :instance-tenancy)) #:http.request.field{:name "InstanceTenancy", :shape "Tenancy", :location-name "instanceTenancy"}))))

(clojure.core/defn- req-request-spot-instances-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :availability-zone-group) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone-group)) #:http.request.field{:name "AvailabilityZoneGroup", :shape "String", :location-name "availabilityZoneGroup"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-spot-instance-type (input :type)) #:http.request.field{:name "Type", :shape "SpotInstanceType", :location-name "type"})) (clojure.core/contains? input :instance-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :instance-count)) #:http.request.field{:name "InstanceCount", :shape "Integer", :location-name "instanceCount"})) (clojure.core/contains? input :block-duration-minutes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :block-duration-minutes)) #:http.request.field{:name "BlockDurationMinutes", :shape "Integer", :location-name "blockDurationMinutes"})) (clojure.core/contains? input :valid-from) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :valid-from)) #:http.request.field{:name "ValidFrom", :shape "DateTime", :location-name "validFrom"})) (clojure.core/contains? input :launch-specification) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-request-spot-launch-specification (input :launch-specification)) #:http.request.field{:name "LaunchSpecification", :shape "RequestSpotLaunchSpecification"})) (clojure.core/contains? input :spot-price) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :spot-price)) #:http.request.field{:name "SpotPrice", :shape "String", :location-name "spotPrice"})) (clojure.core/contains? input :instance-interruption-behavior) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-interruption-behavior (input :instance-interruption-behavior)) #:http.request.field{:name "InstanceInterruptionBehavior", :shape "InstanceInterruptionBehavior"})) (clojure.core/contains? input :launch-group) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :launch-group)) #:http.request.field{:name "LaunchGroup", :shape "String", :location-name "launchGroup"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String", :location-name "clientToken"})) (clojure.core/contains? input :valid-until) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :valid-until)) #:http.request.field{:name "ValidUntil", :shape "DateTime", :location-name "validUntil"}))))

(clojure.core/defn- req-create-network-acl-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-bundle-tasks-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :bundle-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-bundle-id-string-list (input :bundle-ids)) #:http.request.field{:name "BundleIds", :shape "BundleIdStringList", :location-name "BundleId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-instances-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :instance-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"}))))

(clojure.core/defn- req-create-nat-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :allocation-id)) #:http.request.field{:name "AllocationId", :shape "String"}) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String"})]} (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"}))))

(clojure.core/defn- req-describe-volume-status-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :volume-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-volume-id-string-list (input :volume-ids)) #:http.request.field{:name "VolumeIds", :shape "VolumeIdStringList", :location-name "VolumeId"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-allocate-address-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :domain) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-domain-type (input :domain)) #:http.request.field{:name "Domain", :shape "DomainType"})) (clojure.core/contains? input :address) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :address)) #:http.request.field{:name "Address", :shape "String"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-import-snapshot-tasks-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList"})) (clojure.core/contains? input :import-task-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-import-task-id-list (input :import-task-ids)) #:http.request.field{:name "ImportTaskIds", :shape "ImportTaskIdList", :location-name "ImportTaskId"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-describe-vpc-peering-connections-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :vpc-peering-connection-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :vpc-peering-connection-ids)) #:http.request.field{:name "VpcPeeringConnectionIds", :shape "ValueStringList", :location-name "VpcPeeringConnectionId"}))))

(clojure.core/defn- req-describe-network-interface-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})]} (clojure.core/contains? input :attribute) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-network-interface-attribute (input :attribute)) #:http.request.field{:name "Attribute", :shape "NetworkInterfaceAttribute", :location-name "attribute"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-restore-address-to-classic-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :public-ip)) #:http.request.field{:name "PublicIp", :shape "String", :location-name "publicIp"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-disable-vpc-classic-link-dns-support-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :vpc-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"}))))

(clojure.core/defn- req-delete-route-table-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :route-table-id)) #:http.request.field{:name "RouteTableId", :shape "String", :location-name "routeTableId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-launch-templates-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :launch-template-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :launch-template-ids)) #:http.request.field{:name "LaunchTemplateIds", :shape "ValueStringList", :location-name "LaunchTemplateId"})) (clojure.core/contains? input :launch-template-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-template-name-string-list (input :launch-template-names)) #:http.request.field{:name "LaunchTemplateNames", :shape "LaunchTemplateNameStringList", :location-name "LaunchTemplateName"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"}))))

(clojure.core/defn- req-describe-image-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-image-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "ImageAttributeName"}) (clojure.core/into (ser-string (input :image-id)) #:http.request.field{:name "ImageId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-create-customer-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-integer (input :bgp-asn)) #:http.request.field{:name "BgpAsn", :shape "Integer"}) (clojure.core/into (ser-string (input :public-ip)) #:http.request.field{:name "PublicIp", :shape "String", :location-name "IpAddress"}) (clojure.core/into (ser-gateway-type (input :type)) #:http.request.field{:name "Type", :shape "GatewayType"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-import-volume-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String", :location-name "availabilityZone"}) (clojure.core/into (ser-disk-image-detail (input :image)) #:http.request.field{:name "Image", :shape "DiskImageDetail", :location-name "image"}) (clojure.core/into (ser-volume-detail (input :volume)) #:http.request.field{:name "Volume", :shape "VolumeDetail", :location-name "volume"})]} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-modify-instance-placement-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"})]} (clojure.core/contains? input :affinity) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-affinity (input :affinity)) #:http.request.field{:name "Affinity", :shape "Affinity", :location-name "affinity"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String"})) (clojure.core/contains? input :host-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :host-id)) #:http.request.field{:name "HostId", :shape "String", :location-name "hostId"})) (clojure.core/contains? input :tenancy) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-host-tenancy (input :tenancy)) #:http.request.field{:name "Tenancy", :shape "HostTenancy", :location-name "tenancy"}))))

(clojure.core/defn- req-describe-egress-only-internet-gateways-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :egress-only-internet-gateway-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-egress-only-internet-gateway-id-list (input :egress-only-internet-gateway-ids)) #:http.request.field{:name "EgressOnlyInternetGatewayIds", :shape "EgressOnlyInternetGatewayIdList", :location-name "EgressOnlyInternetGatewayId"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-create-vpc-peering-connection-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :peer-owner-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :peer-owner-id)) #:http.request.field{:name "PeerOwnerId", :shape "String", :location-name "peerOwnerId"})) (clojure.core/contains? input :peer-vpc-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :peer-vpc-id)) #:http.request.field{:name "PeerVpcId", :shape "String", :location-name "peerVpcId"})) (clojure.core/contains? input :vpc-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})) (clojure.core/contains? input :peer-region) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :peer-region)) #:http.request.field{:name "PeerRegion", :shape "String"}))))

(clojure.core/defn- req-disable-vgw-route-propagation-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :gateway-id)) #:http.request.field{:name "GatewayId", :shape "String"}) (clojure.core/into (ser-string (input :route-table-id)) #:http.request.field{:name "RouteTableId", :shape "String"})]}))

(clojure.core/defn- req-create-launch-template-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-launch-template-name (input :launch-template-name)) #:http.request.field{:name "LaunchTemplateName", :shape "LaunchTemplateName"}) (clojure.core/into (ser-request-launch-template-data (input :launch-template-data)) #:http.request.field{:name "LaunchTemplateData", :shape "RequestLaunchTemplateData"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"})) (clojure.core/contains? input :version-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-version-description (input :version-description)) #:http.request.field{:name "VersionDescription", :shape "VersionDescription"}))))

(clojure.core/defn- req-describe-reserved-instances-listings-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :reserved-instances-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-instances-id)) #:http.request.field{:name "ReservedInstancesId", :shape "String", :location-name "reservedInstancesId"})) (clojure.core/contains? input :reserved-instances-listing-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :reserved-instances-listing-id)) #:http.request.field{:name "ReservedInstancesListingId", :shape "String", :location-name "reservedInstancesListingId"}))))

(clojure.core/defn- req-create-subnet-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :cidr-block)) #:http.request.field{:name "CidrBlock", :shape "String"}) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"})]} (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :ipv-6-cidr-block) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ipv-6-cidr-block)) #:http.request.field{:name "Ipv6CidrBlock", :shape "String"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-fpga-image-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :fpga-image-id)) #:http.request.field{:name "FpgaImageId", :shape "String"}) (clojure.core/into (ser-fpga-image-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "FpgaImageAttributeName"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"}))))

(clojure.core/defn- req-update-security-group-rule-descriptions-ingress-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-ip-permission-list (input :ip-permissions)) #:http.request.field{:name "IpPermissions", :shape "IpPermissionList"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "String"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String"}))))

(clojure.core/defn- req-modify-vpc-peering-connection-options-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-peering-connection-id)) #:http.request.field{:name "VpcPeeringConnectionId", :shape "String"})]} (clojure.core/contains? input :accepter-peering-connection-options) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-peering-connection-options-request (input :accepter-peering-connection-options)) #:http.request.field{:name "AccepterPeeringConnectionOptions", :shape "PeeringConnectionOptionsRequest"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :requester-peering-connection-options) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-peering-connection-options-request (input :requester-peering-connection-options)) #:http.request.field{:name "RequesterPeeringConnectionOptions", :shape "PeeringConnectionOptionsRequest"}))))

(clojure.core/defn- req-get-password-data-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-create-vpc-endpoint-service-configuration-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-value-string-list (input :network-load-balancer-arns)) #:http.request.field{:name "NetworkLoadBalancerArns", :shape "ValueStringList", :location-name "NetworkLoadBalancerArn"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :acceptance-required) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :acceptance-required)) #:http.request.field{:name "AcceptanceRequired", :shape "Boolean"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"}))))

(clojure.core/defn- req-modify-volume-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String"})]} (clojure.core/contains? input :auto-enable-io) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :auto-enable-io)) #:http.request.field{:name "AutoEnableIO", :shape "AttributeBooleanValue"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-identity-id-format-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :principal-arn)) #:http.request.field{:name "PrincipalArn", :shape "String", :location-name "principalArn"})]} (clojure.core/contains? input :resource) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :resource)) #:http.request.field{:name "Resource", :shape "String", :location-name "resource"}))))

(clojure.core/defn- req-describe-spot-datafeed-subscription-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-create-network-acl-entry-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-boolean (input :egress)) #:http.request.field{:name "Egress", :shape "Boolean", :location-name "egress"}) (clojure.core/into (ser-string (input :network-acl-id)) #:http.request.field{:name "NetworkAclId", :shape "String", :location-name "networkAclId"}) (clojure.core/into (ser-string (input :protocol)) #:http.request.field{:name "Protocol", :shape "String", :location-name "protocol"}) (clojure.core/into (ser-rule-action (input :rule-action)) #:http.request.field{:name "RuleAction", :shape "RuleAction", :location-name "ruleAction"}) (clojure.core/into (ser-integer (input :rule-number)) #:http.request.field{:name "RuleNumber", :shape "Integer", :location-name "ruleNumber"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :icmp-type-code) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-icmp-type-code (input :icmp-type-code)) #:http.request.field{:name "IcmpTypeCode", :shape "IcmpTypeCode", :location-name "Icmp"})) (clojure.core/contains? input :cidr-block) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidr-block)) #:http.request.field{:name "CidrBlock", :shape "String", :location-name "cidrBlock"})) (clojure.core/contains? input :ipv-6-cidr-block) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ipv-6-cidr-block)) #:http.request.field{:name "Ipv6CidrBlock", :shape "String", :location-name "ipv6CidrBlock"})) (clojure.core/contains? input :port-range) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-port-range (input :port-range)) #:http.request.field{:name "PortRange", :shape "PortRange", :location-name "portRange"}))))

(clojure.core/defn- req-accept-vpc-endpoint-connections-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :service-id)) #:http.request.field{:name "ServiceId", :shape "String"}) (clojure.core/into (ser-value-string-list (input :vpc-endpoint-ids)) #:http.request.field{:name "VpcEndpointIds", :shape "ValueStringList", :location-name "VpcEndpointId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"}))))

(clojure.core/defn- req-delete-key-pair-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :key-name)) #:http.request.field{:name "KeyName", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-deregister-image-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :image-id)) #:http.request.field{:name "ImageId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-get-launch-template-data-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"}))))

(clojure.core/defn- req-delete-vpc-endpoints-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-value-string-list (input :vpc-endpoint-ids)) #:http.request.field{:name "VpcEndpointIds", :shape "ValueStringList", :location-name "VpcEndpointId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"}))))

(clojure.core/defn- req-copy-fpga-image-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :source-fpga-image-id)) #:http.request.field{:name "SourceFpgaImageId", :shape "String"}) (clojure.core/into (ser-string (input :source-region)) #:http.request.field{:name "SourceRegion", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"}))))

(clojure.core/defn- req-create-dhcp-options-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-new-dhcp-configuration-list (input :dhcp-configurations)) #:http.request.field{:name "DhcpConfigurations", :shape "NewDhcpConfigurationList", :location-name "dhcpConfiguration"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-route-tables-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :route-table-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :route-table-ids)) #:http.request.field{:name "RouteTableIds", :shape "ValueStringList", :location-name "RouteTableId"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"}))))

(clojure.core/defn- req-create-launch-template-version-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-request-launch-template-data (input :launch-template-data)) #:http.request.field{:name "LaunchTemplateData", :shape "RequestLaunchTemplateData"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"})) (clojure.core/contains? input :launch-template-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :launch-template-id)) #:http.request.field{:name "LaunchTemplateId", :shape "String"})) (clojure.core/contains? input :launch-template-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-template-name (input :launch-template-name)) #:http.request.field{:name "LaunchTemplateName", :shape "LaunchTemplateName"})) (clojure.core/contains? input :source-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-version)) #:http.request.field{:name "SourceVersion", :shape "String"})) (clojure.core/contains? input :version-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-version-description (input :version-description)) #:http.request.field{:name "VersionDescription", :shape "VersionDescription"}))))

(clojure.core/defn- req-describe-vpc-endpoint-connection-notifications-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :connection-notification-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :connection-notification-id)) #:http.request.field{:name "ConnectionNotificationId", :shape "String"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-modify-fleet-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-fleet-identifier (input :fleet-id)) #:http.request.field{:name "FleetId", :shape "FleetIdentifier"}) (clojure.core/into (ser-target-capacity-specification-request (input :target-capacity-specification)) #:http.request.field{:name "TargetCapacitySpecification", :shape "TargetCapacitySpecificationRequest"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :excess-capacity-termination-policy) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-fleet-excess-capacity-termination-policy (input :excess-capacity-termination-policy)) #:http.request.field{:name "ExcessCapacityTerminationPolicy", :shape "FleetExcessCapacityTerminationPolicy"}))))

(clojure.core/defn- req-create-instance-export-task-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"})]} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"})) (clojure.core/contains? input :export-to-s-3-task) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-export-to-s-3-task-specification (input :export-to-s-3-task)) #:http.request.field{:name "ExportToS3Task", :shape "ExportToS3TaskSpecification", :location-name "exportToS3"})) (clojure.core/contains? input :target-environment) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-export-environment (input :target-environment)) #:http.request.field{:name "TargetEnvironment", :shape "ExportEnvironment", :location-name "targetEnvironment"}))))

(clojure.core/defn- req-create-tags-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-resource-id-list (input :resources)) #:http.request.field{:name "Resources", :shape "ResourceIdList", :location-name "ResourceId"}) (clojure.core/into (ser-tag-list (input :tags)) #:http.request.field{:name "Tags", :shape "TagList", :location-name "Tag"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-fleet-history-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-fleet-identifier (input :fleet-id)) #:http.request.field{:name "FleetId", :shape "FleetIdentifier"}) (clojure.core/into (ser-date-time (input :start-time)) #:http.request.field{:name "StartTime", :shape "DateTime"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :event-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-fleet-event-type (input :event-type)) #:http.request.field{:name "EventType", :shape "FleetEventType"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-cancel-reserved-instances-listing-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :reserved-instances-listing-id)) #:http.request.field{:name "ReservedInstancesListingId", :shape "String", :location-name "reservedInstancesListingId"})]}))

(clojure.core/defn- req-attach-vpn-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"}) (clojure.core/into (ser-string (input :vpn-gateway-id)) #:http.request.field{:name "VpnGatewayId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-cancel-spot-fleet-requests-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-value-string-list (input :spot-fleet-request-ids)) #:http.request.field{:name "SpotFleetRequestIds", :shape "ValueStringList", :location-name "spotFleetRequestId"}) (clojure.core/into (ser-boolean (input :terminate-instances)) #:http.request.field{:name "TerminateInstances", :shape "Boolean", :location-name "terminateInstances"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-associate-route-table-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :route-table-id)) #:http.request.field{:name "RouteTableId", :shape "String", :location-name "routeTableId"}) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String", :location-name "subnetId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-detach-internet-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :internet-gateway-id)) #:http.request.field{:name "InternetGatewayId", :shape "String", :location-name "internetGatewayId"}) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-enable-volume-io-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String", :location-name "volumeId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-subnet-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-associate-vpc-cidr-block-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :amazon-provided-ipv-6-cidr-block) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :amazon-provided-ipv-6-cidr-block)) #:http.request.field{:name "AmazonProvidedIpv6CidrBlock", :shape "Boolean", :location-name "amazonProvidedIpv6CidrBlock"})) (clojure.core/contains? input :cidr-block) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidr-block)) #:http.request.field{:name "CidrBlock", :shape "String"}))))

(clojure.core/defn- req-modify-subnet-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String", :location-name "subnetId"})]} (clojure.core/contains? input :assign-ipv-6-address-on-creation) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :assign-ipv-6-address-on-creation)) #:http.request.field{:name "AssignIpv6AddressOnCreation", :shape "AttributeBooleanValue"})) (clojure.core/contains? input :map-public-ip-on-launch) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :map-public-ip-on-launch)) #:http.request.field{:name "MapPublicIpOnLaunch", :shape "AttributeBooleanValue"}))))

(clojure.core/defn- req-delete-spot-datafeed-subscription-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-disassociate-vpc-cidr-block-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :association-id)) #:http.request.field{:name "AssociationId", :shape "String", :location-name "associationId"})]}))

(clojure.core/defn- req-update-security-group-rule-descriptions-egress-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-ip-permission-list (input :ip-permissions)) #:http.request.field{:name "IpPermissions", :shape "IpPermissionList"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "String"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String"}))))

(clojure.core/defn- req-describe-security-group-references-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-group-ids (input :group-id)) #:http.request.field{:name "GroupId", :shape "GroupIds"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"}))))

(clojure.core/defn- req-describe-vpcs-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :vpc-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-id-string-list (input :vpc-ids)) #:http.request.field{:name "VpcIds", :shape "VpcIdStringList", :location-name "VpcId"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-route-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :route-table-id)) #:http.request.field{:name "RouteTableId", :shape "String", :location-name "routeTableId"})]} (clojure.core/contains? input :destination-cidr-block) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :destination-cidr-block)) #:http.request.field{:name "DestinationCidrBlock", :shape "String", :location-name "destinationCidrBlock"})) (clojure.core/contains? input :destination-ipv-6-cidr-block) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :destination-ipv-6-cidr-block)) #:http.request.field{:name "DestinationIpv6CidrBlock", :shape "String", :location-name "destinationIpv6CidrBlock"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-vpc-endpoint-services-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :service-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :service-names)) #:http.request.field{:name "ServiceNames", :shape "ValueStringList", :location-name "ServiceName"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-reboot-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-replace-network-acl-entry-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-boolean (input :egress)) #:http.request.field{:name "Egress", :shape "Boolean", :location-name "egress"}) (clojure.core/into (ser-string (input :network-acl-id)) #:http.request.field{:name "NetworkAclId", :shape "String", :location-name "networkAclId"}) (clojure.core/into (ser-string (input :protocol)) #:http.request.field{:name "Protocol", :shape "String", :location-name "protocol"}) (clojure.core/into (ser-rule-action (input :rule-action)) #:http.request.field{:name "RuleAction", :shape "RuleAction", :location-name "ruleAction"}) (clojure.core/into (ser-integer (input :rule-number)) #:http.request.field{:name "RuleNumber", :shape "Integer", :location-name "ruleNumber"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :icmp-type-code) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-icmp-type-code (input :icmp-type-code)) #:http.request.field{:name "IcmpTypeCode", :shape "IcmpTypeCode", :location-name "Icmp"})) (clojure.core/contains? input :cidr-block) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidr-block)) #:http.request.field{:name "CidrBlock", :shape "String", :location-name "cidrBlock"})) (clojure.core/contains? input :ipv-6-cidr-block) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ipv-6-cidr-block)) #:http.request.field{:name "Ipv6CidrBlock", :shape "String", :location-name "ipv6CidrBlock"})) (clojure.core/contains? input :port-range) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-port-range (input :port-range)) #:http.request.field{:name "PortRange", :shape "PortRange", :location-name "portRange"}))))

(clojure.core/defn- req-delete-vpc-endpoint-service-configurations-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-value-string-list (input :service-ids)) #:http.request.field{:name "ServiceIds", :shape "ValueStringList", :location-name "ServiceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"}))))

(clojure.core/defn- req-describe-volumes-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :volume-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-volume-id-string-list (input :volume-ids)) #:http.request.field{:name "VolumeIds", :shape "VolumeIdStringList", :location-name "VolumeId"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"}))))

(clojure.core/defn- req-describe-account-attributes-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :attribute-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-account-attribute-name-string-list (input :attribute-names)) #:http.request.field{:name "AttributeNames", :shape "AccountAttributeNameStringList", :location-name "attributeName"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-enable-vpc-classic-link-dns-support-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :vpc-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"}))))

(clojure.core/defn- req-describe-tags-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"}))))

(clojure.core/defn- req-attach-network-interface-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-integer (input :device-index)) #:http.request.field{:name "DeviceIndex", :shape "Integer", :location-name "deviceIndex"}) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"}) (clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-network-interface-permission-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-interface-permission-id)) #:http.request.field{:name "NetworkInterfacePermissionId", :shape "String"})]} (clojure.core/contains? input :force) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :force)) #:http.request.field{:name "Force", :shape "Boolean"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"}))))

(clojure.core/defn- req-release-hosts-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-request-host-id-list (input :host-ids)) #:http.request.field{:name "HostIds", :shape "RequestHostIdList", :location-name "hostId"})]}))

(clojure.core/defn- req-get-reserved-instances-exchange-quote-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-reserved-instance-id-set (input :reserved-instance-ids)) #:http.request.field{:name "ReservedInstanceIds", :shape "ReservedInstanceIdSet", :location-name "ReservedInstanceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :target-configurations) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-target-configuration-request-set (input :target-configurations)) #:http.request.field{:name "TargetConfigurations", :shape "TargetConfigurationRequestSet", :location-name "TargetConfiguration"}))))

(clojure.core/defn- req-report-instance-status-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-instance-id-string-list (input :instances)) #:http.request.field{:name "Instances", :shape "InstanceIdStringList", :location-name "instanceId"}) (clojure.core/into (ser-reason-codes-list (input :reason-codes)) #:http.request.field{:name "ReasonCodes", :shape "ReasonCodesList", :location-name "reasonCode"}) (clojure.core/into (ser-report-status-type (input :status)) #:http.request.field{:name "Status", :shape "ReportStatusType", :location-name "status"})]} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :end-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :end-time)) #:http.request.field{:name "EndTime", :shape "DateTime", :location-name "endTime"})) (clojure.core/contains? input :start-time) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :start-time)) #:http.request.field{:name "StartTime", :shape "DateTime", :location-name "startTime"}))))

(clojure.core/defn- req-create-flow-logs-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-value-string-list (input :resource-ids)) #:http.request.field{:name "ResourceIds", :shape "ValueStringList", :location-name "ResourceId"}) (clojure.core/into (ser-flow-logs-resource-type (input :resource-type)) #:http.request.field{:name "ResourceType", :shape "FlowLogsResourceType"}) (clojure.core/into (ser-traffic-type (input :traffic-type)) #:http.request.field{:name "TrafficType", :shape "TrafficType"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :deliver-logs-permission-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :deliver-logs-permission-arn)) #:http.request.field{:name "DeliverLogsPermissionArn", :shape "String"})) (clojure.core/contains? input :log-destination-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-log-destination-type (input :log-destination-type)) #:http.request.field{:name "LogDestinationType", :shape "LogDestinationType"})) (clojure.core/contains? input :log-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :log-group-name)) #:http.request.field{:name "LogGroupName", :shape "String"})) (clojure.core/contains? input :log-destination) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :log-destination)) #:http.request.field{:name "LogDestination", :shape "String"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"}))))

(clojure.core/defn- req-describe-images-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :executable-users) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-executable-by-string-list (input :executable-users)) #:http.request.field{:name "ExecutableUsers", :shape "ExecutableByStringList", :location-name "ExecutableBy"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :image-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-image-id-string-list (input :image-ids)) #:http.request.field{:name "ImageIds", :shape "ImageIdStringList", :location-name "ImageId"})) (clojure.core/contains? input :owners) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-owner-string-list (input :owners)) #:http.request.field{:name "Owners", :shape "OwnerStringList", :location-name "Owner"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-modify-network-interface-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})]} (clojure.core/contains? input :attachment) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-network-interface-attachment-changes (input :attachment)) #:http.request.field{:name "Attachment", :shape "NetworkInterfaceAttachmentChanges", :location-name "attachment"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value (input :description)) #:http.request.field{:name "Description", :shape "AttributeValue", :location-name "description"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-id-string-list (input :groups)) #:http.request.field{:name "Groups", :shape "SecurityGroupIdStringList", :location-name "SecurityGroupId"})) (clojure.core/contains? input :source-dest-check) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :source-dest-check)) #:http.request.field{:name "SourceDestCheck", :shape "AttributeBooleanValue", :location-name "sourceDestCheck"}))))

(clojure.core/defn- req-cancel-bundle-task-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :bundle-id)) #:http.request.field{:name "BundleId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-reset-image-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-reset-image-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "ResetImageAttributeName"}) (clojure.core/into (ser-string (input :image-id)) #:http.request.field{:name "ImageId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-cancel-import-task-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :cancel-reason) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cancel-reason)) #:http.request.field{:name "CancelReason", :shape "String"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :import-task-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :import-task-id)) #:http.request.field{:name "ImportTaskId", :shape "String"}))))

(clojure.core/defn- req-modify-instance-credit-specification-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-instance-credit-specification-list-request (input :instance-credit-specifications)) #:http.request.field{:name "InstanceCreditSpecifications", :shape "InstanceCreditSpecificationListRequest", :location-name "InstanceCreditSpecification"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"}))))

(clojure.core/defn- req-describe-classic-link-instances-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :instance-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"}))))

(clojure.core/defn- req-create-default-vpc-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"}))))

(clojure.core/defn- req-describe-vpc-endpoints-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :vpc-endpoint-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :vpc-endpoint-ids)) #:http.request.field{:name "VpcEndpointIds", :shape "ValueStringList", :location-name "VpcEndpointId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-describe-scheduled-instance-availability-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-slot-date-time-range-request (input :first-slot-start-time-range)) #:http.request.field{:name "FirstSlotStartTimeRange", :shape "SlotDateTimeRangeRequest"}) (clojure.core/into (ser-scheduled-instance-recurrence-request (input :recurrence)) #:http.request.field{:name "Recurrence", :shape "ScheduledInstanceRecurrenceRequest"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :max-slot-duration-in-hours) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-slot-duration-in-hours)) #:http.request.field{:name "MaxSlotDurationInHours", :shape "Integer"})) (clojure.core/contains? input :min-slot-duration-in-hours) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :min-slot-duration-in-hours)) #:http.request.field{:name "MinSlotDurationInHours", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-describe-customer-gateways-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :customer-gateway-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-customer-gateway-id-string-list (input :customer-gateway-ids)) #:http.request.field{:name "CustomerGatewayIds", :shape "CustomerGatewayIdStringList", :location-name "CustomerGatewayId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-host-reservation-offerings-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filter) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filter)) #:http.request.field{:name "Filter", :shape "FilterList"})) (clojure.core/contains? input :max-duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-duration)) #:http.request.field{:name "MaxDuration", :shape "Integer"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :min-duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :min-duration)) #:http.request.field{:name "MinDuration", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :offering-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :offering-id)) #:http.request.field{:name "OfferingId", :shape "String"}))))

(clojure.core/defn- req-reset-snapshot-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-snapshot-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "SnapshotAttributeName"}) (clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-fleets-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :fleet-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-fleet-id-set (input :fleet-ids)) #:http.request.field{:name "FleetIds", :shape "FleetIdSet", :location-name "FleetId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"}))))

(clojure.core/defn- req-delete-vpn-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpn-gateway-id)) #:http.request.field{:name "VpnGatewayId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-attach-classic-link-vpc-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-group-id-string-list (input :groups)) #:http.request.field{:name "Groups", :shape "GroupIdStringList", :location-name "SecurityGroupId"}) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"}) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-modify-snapshot-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String"})]} (clojure.core/contains? input :attribute) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-snapshot-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "SnapshotAttributeName"})) (clojure.core/contains? input :create-volume-permission) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-create-volume-permission-modifications (input :create-volume-permission)) #:http.request.field{:name "CreateVolumePermission", :shape "CreateVolumePermissionModifications"})) (clojure.core/contains? input :group-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-group-name-string-list (input :group-names)) #:http.request.field{:name "GroupNames", :shape "GroupNameStringList", :location-name "UserGroup"})) (clojure.core/contains? input :operation-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-operation-type (input :operation-type)) #:http.request.field{:name "OperationType", :shape "OperationType"})) (clojure.core/contains? input :user-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-user-id-string-list (input :user-ids)) #:http.request.field{:name "UserIds", :shape "UserIdStringList", :location-name "UserId"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-modify-fpga-image-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :fpga-image-id)) #:http.request.field{:name "FpgaImageId", :shape "String"})]} (clojure.core/contains? input :user-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-user-id-string-list (input :user-ids)) #:http.request.field{:name "UserIds", :shape "UserIdStringList", :location-name "UserId"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :attribute) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-fpga-image-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "FpgaImageAttributeName"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String"})) (clojure.core/contains? input :operation-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-operation-type (input :operation-type)) #:http.request.field{:name "OperationType", :shape "OperationType"})) (clojure.core/contains? input :load-permission) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-load-permission-modifications (input :load-permission)) #:http.request.field{:name "LoadPermission", :shape "LoadPermissionModifications"})) (clojure.core/contains? input :product-codes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-product-code-string-list (input :product-codes)) #:http.request.field{:name "ProductCodes", :shape "ProductCodeStringList", :location-name "ProductCode"})) (clojure.core/contains? input :name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :name)) #:http.request.field{:name "Name", :shape "String"})) (clojure.core/contains? input :user-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-user-group-string-list (input :user-groups)) #:http.request.field{:name "UserGroups", :shape "UserGroupStringList", :location-name "UserGroup"}))))

(clojure.core/defn- req-modify-vpc-endpoint-service-configuration-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :service-id)) #:http.request.field{:name "ServiceId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :acceptance-required) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :acceptance-required)) #:http.request.field{:name "AcceptanceRequired", :shape "Boolean"})) (clojure.core/contains? input :add-network-load-balancer-arns) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :add-network-load-balancer-arns)) #:http.request.field{:name "AddNetworkLoadBalancerArns", :shape "ValueStringList", :location-name "AddNetworkLoadBalancerArn"})) (clojure.core/contains? input :remove-network-load-balancer-arns) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :remove-network-load-balancer-arns)) #:http.request.field{:name "RemoveNetworkLoadBalancerArns", :shape "ValueStringList", :location-name "RemoveNetworkLoadBalancerArn"}))))

(clojure.core/defn- req-accept-reserved-instances-exchange-quote-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-reserved-instance-id-set (input :reserved-instance-ids)) #:http.request.field{:name "ReservedInstanceIds", :shape "ReservedInstanceIdSet", :location-name "ReservedInstanceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :target-configurations) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-target-configuration-request-set (input :target-configurations)) #:http.request.field{:name "TargetConfigurations", :shape "TargetConfigurationRequestSet", :location-name "TargetConfiguration"}))))

(clojure.core/defn- req-delete-launch-template-versions-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-version-string-list (input :versions)) #:http.request.field{:name "Versions", :shape "VersionStringList", :location-name "LaunchTemplateVersion"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :launch-template-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :launch-template-id)) #:http.request.field{:name "LaunchTemplateId", :shape "String"})) (clojure.core/contains? input :launch-template-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-template-name (input :launch-template-name)) #:http.request.field{:name "LaunchTemplateName", :shape "LaunchTemplateName"}))))

(clojure.core/defn- req-detach-volume-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String"})]} (clojure.core/contains? input :device) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :device)) #:http.request.field{:name "Device", :shape "String"})) (clojure.core/contains? input :force) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :force)) #:http.request.field{:name "Force", :shape "Boolean"})) (clojure.core/contains? input :instance-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-purchase-reserved-instances-offering-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-integer (input :instance-count)) #:http.request.field{:name "InstanceCount", :shape "Integer"}) (clojure.core/into (ser-string (input :reserved-instances-offering-id)) #:http.request.field{:name "ReservedInstancesOfferingId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :limit-price) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-reserved-instance-limit-price (input :limit-price)) #:http.request.field{:name "LimitPrice", :shape "ReservedInstanceLimitPrice", :location-name "limitPrice"}))))

(clojure.core/defn- req-unassign-private-ip-addresses-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"}) (clojure.core/into (ser-private-ip-address-string-list (input :private-ip-addresses)) #:http.request.field{:name "PrivateIpAddresses", :shape "PrivateIpAddressStringList", :location-name "privateIpAddress"})]}))

(clojure.core/defn- req-monitor-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-placement-group-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String", :location-name "groupName"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-run-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-integer (input :max-count)) #:http.request.field{:name "MaxCount", :shape "Integer"}) (clojure.core/into (ser-integer (input :min-count)) #:http.request.field{:name "MinCount", :shape "Integer"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :tag-specifications) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-specification-list (input :tag-specifications)) #:http.request.field{:name "TagSpecifications", :shape "TagSpecificationList", :location-name "TagSpecification"})) (clojure.core/contains? input :kernel-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kernel-id)) #:http.request.field{:name "KernelId", :shape "String"})) (clojure.core/contains? input :credit-specification) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-credit-specification-request (input :credit-specification)) #:http.request.field{:name "CreditSpecification", :shape "CreditSpecificationRequest"})) (clojure.core/contains? input :ipv-6-addresses) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-ipv-6-address-list (input :ipv-6-addresses)) #:http.request.field{:name "Ipv6Addresses", :shape "InstanceIpv6AddressList", :location-name "Ipv6Address"})) (clojure.core/contains? input :security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-id-string-list (input :security-group-ids)) #:http.request.field{:name "SecurityGroupIds", :shape "SecurityGroupIdStringList", :location-name "SecurityGroupId"})) (clojure.core/contains? input :image-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :image-id)) #:http.request.field{:name "ImageId", :shape "String"})) (clojure.core/contains? input :placement) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-placement (input :placement)) #:http.request.field{:name "Placement", :shape "Placement"})) (clojure.core/contains? input :subnet-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String"})) (clojure.core/contains? input :security-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-string-list (input :security-groups)) #:http.request.field{:name "SecurityGroups", :shape "SecurityGroupStringList", :location-name "SecurityGroup"})) (clojure.core/contains? input :ebs-optimized) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :ebs-optimized)) #:http.request.field{:name "EbsOptimized", :shape "Boolean", :location-name "ebsOptimized"})) (clojure.core/contains? input :instance-market-options) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-market-options-request (input :instance-market-options)) #:http.request.field{:name "InstanceMarketOptions", :shape "InstanceMarketOptionsRequest"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-type (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "InstanceType"})) (clojure.core/contains? input :launch-template) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-template-specification (input :launch-template)) #:http.request.field{:name "LaunchTemplate", :shape "LaunchTemplateSpecification"})) (clojure.core/contains? input :elastic-gpu-specification) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-elastic-gpu-specifications (input :elastic-gpu-specification)) #:http.request.field{:name "ElasticGpuSpecification", :shape "ElasticGpuSpecifications"})) (clojure.core/contains? input :key-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :key-name)) #:http.request.field{:name "KeyName", :shape "String"})) (clojure.core/contains? input :additional-info) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :additional-info)) #:http.request.field{:name "AdditionalInfo", :shape "String", :location-name "additionalInfo"})) (clojure.core/contains? input :disable-api-termination) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :disable-api-termination)) #:http.request.field{:name "DisableApiTermination", :shape "Boolean", :location-name "disableApiTermination"})) (clojure.core/contains? input :monitoring) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-run-instances-monitoring-enabled (input :monitoring)) #:http.request.field{:name "Monitoring", :shape "RunInstancesMonitoringEnabled"})) (clojure.core/contains? input :block-device-mappings) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-block-device-mapping-request-list (input :block-device-mappings)) #:http.request.field{:name "BlockDeviceMappings", :shape "BlockDeviceMappingRequestList", :location-name "BlockDeviceMapping"})) (clojure.core/contains? input :cpu-options) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-cpu-options-request (input :cpu-options)) #:http.request.field{:name "CpuOptions", :shape "CpuOptionsRequest"})) (clojure.core/contains? input :ramdisk-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ramdisk-id)) #:http.request.field{:name "RamdiskId", :shape "String"})) (clojure.core/contains? input :user-data) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :user-data)) #:http.request.field{:name "UserData", :shape "String"})) (clojure.core/contains? input :instance-initiated-shutdown-behavior) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-shutdown-behavior (input :instance-initiated-shutdown-behavior)) #:http.request.field{:name "InstanceInitiatedShutdownBehavior", :shape "ShutdownBehavior", :location-name "instanceInitiatedShutdownBehavior"})) (clojure.core/contains? input :iam-instance-profile) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-iam-instance-profile-specification (input :iam-instance-profile)) #:http.request.field{:name "IamInstanceProfile", :shape "IamInstanceProfileSpecification", :location-name "iamInstanceProfile"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String", :location-name "clientToken"})) (clojure.core/contains? input :private-ip-address) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :private-ip-address)) #:http.request.field{:name "PrivateIpAddress", :shape "String", :location-name "privateIpAddress"})) (clojure.core/contains? input :network-interfaces) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-network-interface-specification-list (input :network-interfaces)) #:http.request.field{:name "NetworkInterfaces", :shape "InstanceNetworkInterfaceSpecificationList", :location-name "networkInterface"})) (clojure.core/contains? input :ipv-6-address-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :ipv-6-address-count)) #:http.request.field{:name "Ipv6AddressCount", :shape "Integer"}))))

(clojure.core/defn- req-describe-volumes-modifications-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :volume-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-volume-id-string-list (input :volume-ids)) #:http.request.field{:name "VolumeIds", :shape "VolumeIdStringList", :location-name "VolumeId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"}))))

(clojure.core/defn- req-reset-instance-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-instance-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "InstanceAttributeName", :location-name "attribute"}) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-modify-vpc-endpoint-service-permissions-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :service-id)) #:http.request.field{:name "ServiceId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :add-allowed-principals) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :add-allowed-principals)) #:http.request.field{:name "AddAllowedPrincipals", :shape "ValueStringList"})) (clojure.core/contains? input :remove-allowed-principals) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :remove-allowed-principals)) #:http.request.field{:name "RemoveAllowedPrincipals", :shape "ValueStringList"}))))

(clojure.core/defn- req-create-default-subnet-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"}))))

(clojure.core/defn- req-purchase-scheduled-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-purchase-request-set (input :purchase-requests)) #:http.request.field{:name "PurchaseRequests", :shape "PurchaseRequestSet", :location-name "PurchaseRequest"})]} (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String", :idempotency-token true})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"}))))

(clojure.core/defn- req-move-address-to-vpc-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :public-ip)) #:http.request.field{:name "PublicIp", :shape "String", :location-name "publicIp"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-export-tasks-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :export-task-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-export-task-id-string-list (input :export-task-ids)) #:http.request.field{:name "ExportTaskIds", :shape "ExportTaskIdStringList", :location-name "exportTaskId"}))))

(clojure.core/defn- req-create-vpn-connection-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :customer-gateway-id)) #:http.request.field{:name "CustomerGatewayId", :shape "String"}) (clojure.core/into (ser-string (input :type)) #:http.request.field{:name "Type", :shape "String"}) (clojure.core/into (ser-string (input :vpn-gateway-id)) #:http.request.field{:name "VpnGatewayId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :options) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpn-connection-options-specification (input :options)) #:http.request.field{:name "Options", :shape "VpnConnectionOptionsSpecification", :location-name "options"}))))

(clojure.core/defn- req-disassociate-route-table-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :association-id)) #:http.request.field{:name "AssociationId", :shape "String", :location-name "associationId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-hosts-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filter) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filter)) #:http.request.field{:name "Filter", :shape "FilterList", :location-name "filter"})) (clojure.core/contains? input :host-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-request-host-id-list (input :host-ids)) #:http.request.field{:name "HostIds", :shape "RequestHostIdList", :location-name "hostId"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"}))))

(clojure.core/defn- req-describe-instance-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-instance-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "InstanceAttributeName", :location-name "attribute"}) (clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-detach-classic-link-vpc-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"}) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-moving-addresses-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "filter"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :public-ips) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :public-ips)) #:http.request.field{:name "PublicIps", :shape "ValueStringList", :location-name "publicIp"}))))

(clojure.core/defn- req-describe-launch-template-versions-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :versions) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-version-string-list (input :versions)) #:http.request.field{:name "Versions", :shape "VersionStringList", :location-name "LaunchTemplateVersion"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :launch-template-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-template-name (input :launch-template-name)) #:http.request.field{:name "LaunchTemplateName", :shape "LaunchTemplateName"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :launch-template-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :launch-template-id)) #:http.request.field{:name "LaunchTemplateId", :shape "String"})) (clojure.core/contains? input :min-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :min-version)) #:http.request.field{:name "MinVersion", :shape "String"})) (clojure.core/contains? input :max-version) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :max-version)) #:http.request.field{:name "MaxVersion", :shape "String"}))))

(clojure.core/defn- req-modify-vpc-endpoint-connection-notification-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :connection-notification-id)) #:http.request.field{:name "ConnectionNotificationId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :connection-notification-arn) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :connection-notification-arn)) #:http.request.field{:name "ConnectionNotificationArn", :shape "String"})) (clojure.core/contains? input :connection-events) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :connection-events)) #:http.request.field{:name "ConnectionEvents", :shape "ValueStringList"}))))

(clojure.core/defn- req-accept-vpc-peering-connection-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :vpc-peering-connection-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :vpc-peering-connection-id)) #:http.request.field{:name "VpcPeeringConnectionId", :shape "String", :location-name "vpcPeeringConnectionId"}))))

(clojure.core/defn- req-describe-reserved-instances-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :offering-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-offering-class-type (input :offering-class)) #:http.request.field{:name "OfferingClass", :shape "OfferingClassType"})) (clojure.core/contains? input :reserved-instances-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-reserved-instances-id-string-list (input :reserved-instances-ids)) #:http.request.field{:name "ReservedInstancesIds", :shape "ReservedInstancesIdStringList", :location-name "ReservedInstancesId"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :offering-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-offering-type-values (input :offering-type)) #:http.request.field{:name "OfferingType", :shape "OfferingTypeValues", :location-name "offeringType"}))))

(clojure.core/defn- req-describe-vpc-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-vpc-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "VpcAttributeName"}) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-reserved-instances-offerings-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :max-duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long (input :max-duration)) #:http.request.field{:name "MaxDuration", :shape "Long"})) (clojure.core/contains? input :min-duration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-long (input :min-duration)) #:http.request.field{:name "MinDuration", :shape "Long"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-type (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "InstanceType"})) (clojure.core/contains? input :availability-zone) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"})) (clojure.core/contains? input :instance-tenancy) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tenancy (input :instance-tenancy)) #:http.request.field{:name "InstanceTenancy", :shape "Tenancy", :location-name "instanceTenancy"})) (clojure.core/contains? input :include-marketplace) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :include-marketplace)) #:http.request.field{:name "IncludeMarketplace", :shape "Boolean"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :product-description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ri-product-description (input :product-description)) #:http.request.field{:name "ProductDescription", :shape "RIProductDescription"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"})) (clojure.core/contains? input :offering-class) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-offering-class-type (input :offering-class)) #:http.request.field{:name "OfferingClass", :shape "OfferingClassType"})) (clojure.core/contains? input :offering-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-offering-type-values (input :offering-type)) #:http.request.field{:name "OfferingType", :shape "OfferingTypeValues", :location-name "offeringType"})) (clojure.core/contains? input :max-instance-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-instance-count)) #:http.request.field{:name "MaxInstanceCount", :shape "Integer"})) (clojure.core/contains? input :reserved-instances-offering-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-reserved-instances-offering-id-string-list (input :reserved-instances-offering-ids)) #:http.request.field{:name "ReservedInstancesOfferingIds", :shape "ReservedInstancesOfferingIdStringList", :location-name "ReservedInstancesOfferingId"}))))

(clojure.core/defn- req-create-vpc-endpoint-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"}) (clojure.core/into (ser-string (input :service-name)) #:http.request.field{:name "ServiceName", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :vpc-endpoint-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-endpoint-type (input :vpc-endpoint-type)) #:http.request.field{:name "VpcEndpointType", :shape "VpcEndpointType"})) (clojure.core/contains? input :subnet-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :subnet-ids)) #:http.request.field{:name "SubnetIds", :shape "ValueStringList", :location-name "SubnetId"})) (clojure.core/contains? input :security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :security-group-ids)) #:http.request.field{:name "SecurityGroupIds", :shape "ValueStringList", :location-name "SecurityGroupId"})) (clojure.core/contains? input :private-dns-enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :private-dns-enabled)) #:http.request.field{:name "PrivateDnsEnabled", :shape "Boolean"})) (clojure.core/contains? input :policy-document) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :policy-document)) #:http.request.field{:name "PolicyDocument", :shape "String"})) (clojure.core/contains? input :route-table-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :route-table-ids)) #:http.request.field{:name "RouteTableIds", :shape "ValueStringList", :location-name "RouteTableId"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"}))))

(clojure.core/defn- req-delete-vpc-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-associate-subnet-cidr-block-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :ipv-6-cidr-block)) #:http.request.field{:name "Ipv6CidrBlock", :shape "String", :location-name "ipv6CidrBlock"}) (clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String", :location-name "subnetId"})]}))

(clojure.core/defn- req-describe-network-interfaces-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "filter"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :network-interface-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-network-interface-id-list (input :network-interface-ids)) #:http.request.field{:name "NetworkInterfaceIds", :shape "NetworkInterfaceIdList", :location-name "NetworkInterfaceId"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"}))))

(clojure.core/defn- req-describe-subnets-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :subnet-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-subnet-id-string-list (input :subnet-ids)) #:http.request.field{:name "SubnetIds", :shape "SubnetIdStringList", :location-name "SubnetId"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-disassociate-subnet-cidr-block-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :association-id)) #:http.request.field{:name "AssociationId", :shape "String", :location-name "associationId"})]}))

(clojure.core/defn- req-modify-volume-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :volume-id)) #:http.request.field{:name "VolumeId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :size) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :size)) #:http.request.field{:name "Size", :shape "Integer"})) (clojure.core/contains? input :volume-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-volume-type (input :volume-type)) #:http.request.field{:name "VolumeType", :shape "VolumeType"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :iops)) #:http.request.field{:name "Iops", :shape "Integer"}))))

(clojure.core/defn- req-delete-nat-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :nat-gateway-id)) #:http.request.field{:name "NatGatewayId", :shape "String"})]}))

(clojure.core/defn- req-describe-availability-zones-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :zone-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-zone-name-string-list (input :zone-names)) #:http.request.field{:name "ZoneNames", :shape "ZoneNameStringList", :location-name "ZoneName"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-disassociate-address-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :association-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :association-id)) #:http.request.field{:name "AssociationId", :shape "String"})) (clojure.core/contains? input :public-ip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :public-ip)) #:http.request.field{:name "PublicIp", :shape "String"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-create-network-interface-permission-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String"}) (clojure.core/into (ser-interface-permission-type (input :permission)) #:http.request.field{:name "Permission", :shape "InterfacePermissionType"})]} (clojure.core/contains? input :aws-account-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :aws-account-id)) #:http.request.field{:name "AwsAccountId", :shape "String"})) (clojure.core/contains? input :aws-service) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :aws-service)) #:http.request.field{:name "AwsService", :shape "String"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"}))))

(clojure.core/defn- req-reject-vpc-endpoint-connections-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :service-id)) #:http.request.field{:name "ServiceId", :shape "String"}) (clojure.core/into (ser-value-string-list (input :vpc-endpoint-ids)) #:http.request.field{:name "VpcEndpointIds", :shape "ValueStringList", :location-name "VpcEndpointId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"}))))

(clojure.core/defn- req-revoke-security-group-egress-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "String", :location-name "groupId"})]} (clojure.core/contains? input :source-security-group-owner-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-security-group-owner-id)) #:http.request.field{:name "SourceSecurityGroupOwnerId", :shape "String", :location-name "sourceSecurityGroupOwnerId"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :to-port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :to-port)) #:http.request.field{:name "ToPort", :shape "Integer", :location-name "toPort"})) (clojure.core/contains? input :source-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-security-group-name)) #:http.request.field{:name "SourceSecurityGroupName", :shape "String", :location-name "sourceSecurityGroupName"})) (clojure.core/contains? input :ip-protocol) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ip-protocol)) #:http.request.field{:name "IpProtocol", :shape "String", :location-name "ipProtocol"})) (clojure.core/contains? input :from-port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :from-port)) #:http.request.field{:name "FromPort", :shape "Integer", :location-name "fromPort"})) (clojure.core/contains? input :ip-permissions) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ip-permission-list (input :ip-permissions)) #:http.request.field{:name "IpPermissions", :shape "IpPermissionList", :location-name "ipPermissions"})) (clojure.core/contains? input :cidr-ip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidr-ip)) #:http.request.field{:name "CidrIp", :shape "String", :location-name "cidrIp"}))))

(clojure.core/defn- req-describe-iam-instance-profile-associations-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :association-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-association-id-list (input :association-ids)) #:http.request.field{:name "AssociationIds", :shape "AssociationIdList", :location-name "AssociationId"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-max-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"}))))

(clojure.core/defn- req-detach-vpn-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"}) (clojure.core/into (ser-string (input :vpn-gateway-id)) #:http.request.field{:name "VpnGatewayId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-modify-vpc-tenancy-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"}) (clojure.core/into (ser-vpc-tenancy (input :instance-tenancy)) #:http.request.field{:name "InstanceTenancy", :shape "VpcTenancy"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"}))))

(clojure.core/defn- req-describe-prefix-lists-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :prefix-list-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :prefix-list-ids)) #:http.request.field{:name "PrefixListIds", :shape "ValueStringList", :location-name "PrefixListId"}))))

(clojure.core/defn- req-terminate-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-modify-reserved-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-reserved-instances-id-string-list (input :reserved-instances-ids)) #:http.request.field{:name "ReservedInstancesIds", :shape "ReservedInstancesIdStringList", :location-name "ReservedInstancesId"}) (clojure.core/into (ser-reserved-instances-configuration-list (input :target-configurations)) #:http.request.field{:name "TargetConfigurations", :shape "ReservedInstancesConfigurationList", :location-name "ReservedInstancesConfigurationSetItemType"})]} (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String", :location-name "clientToken"}))))

(clojure.core/defn- req-delete-network-acl-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-acl-id)) #:http.request.field{:name "NetworkAclId", :shape "String", :location-name "networkAclId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-placement-groups-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :group-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-placement-group-string-list (input :group-names)) #:http.request.field{:name "GroupNames", :shape "PlacementGroupStringList", :location-name "groupName"}))))

(clojure.core/defn- req-modify-image-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :image-id)) #:http.request.field{:name "ImageId", :shape "String"})]} (clojure.core/contains? input :user-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-user-id-string-list (input :user-ids)) #:http.request.field{:name "UserIds", :shape "UserIdStringList", :location-name "UserId"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :attribute) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :attribute)) #:http.request.field{:name "Attribute", :shape "String"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value (input :description)) #:http.request.field{:name "Description", :shape "AttributeValue"})) (clojure.core/contains? input :operation-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-operation-type (input :operation-type)) #:http.request.field{:name "OperationType", :shape "OperationType"})) (clojure.core/contains? input :product-codes) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-product-code-string-list (input :product-codes)) #:http.request.field{:name "ProductCodes", :shape "ProductCodeStringList", :location-name "ProductCode"})) (clojure.core/contains? input :user-groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-user-group-string-list (input :user-groups)) #:http.request.field{:name "UserGroups", :shape "UserGroupStringList", :location-name "UserGroup"})) (clojure.core/contains? input :launch-permission) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-launch-permission-modifications (input :launch-permission)) #:http.request.field{:name "LaunchPermission", :shape "LaunchPermissionModifications"}))))

(clojure.core/defn- req-enable-vpc-classic-link-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-security-groups-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-group-id-string-list (input :group-ids)) #:http.request.field{:name "GroupIds", :shape "GroupIdStringList", :location-name "GroupId"})) (clojure.core/contains? input :group-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-group-name-string-list (input :group-names)) #:http.request.field{:name "GroupNames", :shape "GroupNameStringList", :location-name "GroupName"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"}))))

(clojure.core/defn- req-import-instance-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-platform-values (input :platform)) #:http.request.field{:name "Platform", :shape "PlatformValues", :location-name "platform"})]} (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"})) (clojure.core/contains? input :disk-images) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-disk-image-list (input :disk-images)) #:http.request.field{:name "DiskImages", :shape "DiskImageList", :location-name "diskImage"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :launch-specification) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-import-instance-launch-specification (input :launch-specification)) #:http.request.field{:name "LaunchSpecification", :shape "ImportInstanceLaunchSpecification", :location-name "launchSpecification"}))))

(clojure.core/defn- req-describe-vpc-classic-link-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :vpc-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-classic-link-id-list (input :vpc-ids)) #:http.request.field{:name "VpcIds", :shape "VpcClassicLinkIdList", :location-name "VpcId"}))))

(clojure.core/defn- req-authorize-security-group-ingress-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :source-security-group-owner-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-security-group-owner-id)) #:http.request.field{:name "SourceSecurityGroupOwnerId", :shape "String"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :to-port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :to-port)) #:http.request.field{:name "ToPort", :shape "Integer"})) (clojure.core/contains? input :source-security-group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :source-security-group-name)) #:http.request.field{:name "SourceSecurityGroupName", :shape "String"})) (clojure.core/contains? input :ip-protocol) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :ip-protocol)) #:http.request.field{:name "IpProtocol", :shape "String"})) (clojure.core/contains? input :group-name) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String"})) (clojure.core/contains? input :group-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :group-id)) #:http.request.field{:name "GroupId", :shape "String"})) (clojure.core/contains? input :from-port) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :from-port)) #:http.request.field{:name "FromPort", :shape "Integer"})) (clojure.core/contains? input :ip-permissions) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ip-permission-list (input :ip-permissions)) #:http.request.field{:name "IpPermissions", :shape "IpPermissionList"})) (clojure.core/contains? input :cidr-ip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :cidr-ip)) #:http.request.field{:name "CidrIp", :shape "String"}))))

(clojure.core/defn- req-create-fleet-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-fleet-launch-template-config-list-request (input :launch-template-configs)) #:http.request.field{:name "LaunchTemplateConfigs", :shape "FleetLaunchTemplateConfigListRequest"}) (clojure.core/into (ser-target-capacity-specification-request (input :target-capacity-specification)) #:http.request.field{:name "TargetCapacitySpecification", :shape "TargetCapacitySpecificationRequest"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :tag-specifications) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-specification-list (input :tag-specifications)) #:http.request.field{:name "TagSpecifications", :shape "TagSpecificationList", :location-name "TagSpecification"})) (clojure.core/contains? input :type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-fleet-type (input :type)) #:http.request.field{:name "Type", :shape "FleetType"})) (clojure.core/contains? input :valid-from) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :valid-from)) #:http.request.field{:name "ValidFrom", :shape "DateTime"})) (clojure.core/contains? input :excess-capacity-termination-policy) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-fleet-excess-capacity-termination-policy (input :excess-capacity-termination-policy)) #:http.request.field{:name "ExcessCapacityTerminationPolicy", :shape "FleetExcessCapacityTerminationPolicy"})) (clojure.core/contains? input :spot-options) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-spot-options-request (input :spot-options)) #:http.request.field{:name "SpotOptions", :shape "SpotOptionsRequest"})) (clojure.core/contains? input :on-demand-options) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-on-demand-options-request (input :on-demand-options)) #:http.request.field{:name "OnDemandOptions", :shape "OnDemandOptionsRequest"})) (clojure.core/contains? input :terminate-instances-with-expiration) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :terminate-instances-with-expiration)) #:http.request.field{:name "TerminateInstancesWithExpiration", :shape "Boolean"})) (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"})) (clojure.core/contains? input :replace-unhealthy-instances) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :replace-unhealthy-instances)) #:http.request.field{:name "ReplaceUnhealthyInstances", :shape "Boolean"})) (clojure.core/contains? input :valid-until) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-date-time (input :valid-until)) #:http.request.field{:name "ValidUntil", :shape "DateTime"}))))

(clojure.core/defn- req-create-volume-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :availability-zone)) #:http.request.field{:name "AvailabilityZone", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :tag-specifications) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-tag-specification-list (input :tag-specifications)) #:http.request.field{:name "TagSpecifications", :shape "TagSpecificationList", :location-name "TagSpecification"})) (clojure.core/contains? input :encrypted) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :encrypted)) #:http.request.field{:name "Encrypted", :shape "Boolean", :location-name "encrypted"})) (clojure.core/contains? input :kms-key-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :kms-key-id)) #:http.request.field{:name "KmsKeyId", :shape "String"})) (clojure.core/contains? input :size) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :size)) #:http.request.field{:name "Size", :shape "Integer"})) (clojure.core/contains? input :iops) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :iops)) #:http.request.field{:name "Iops", :shape "Integer"})) (clojure.core/contains? input :volume-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-volume-type (input :volume-type)) #:http.request.field{:name "VolumeType", :shape "VolumeType"})) (clojure.core/contains? input :snapshot-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :snapshot-id)) #:http.request.field{:name "SnapshotId", :shape "String"}))))

(clojure.core/defn- req-modify-instance-attribute-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String", :location-name "instanceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :ebs-optimized) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :ebs-optimized)) #:http.request.field{:name "EbsOptimized", :shape "AttributeBooleanValue", :location-name "ebsOptimized"})) (clojure.core/contains? input :instance-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value (input :instance-type)) #:http.request.field{:name "InstanceType", :shape "AttributeValue", :location-name "instanceType"})) (clojure.core/contains? input :ramdisk) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value (input :ramdisk)) #:http.request.field{:name "Ramdisk", :shape "AttributeValue", :location-name "ramdisk"})) (clojure.core/contains? input :sriov-net-support) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value (input :sriov-net-support)) #:http.request.field{:name "SriovNetSupport", :shape "AttributeValue", :location-name "sriovNetSupport"})) (clojure.core/contains? input :source-dest-check) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :source-dest-check)) #:http.request.field{:name "SourceDestCheck", :shape "AttributeBooleanValue"})) (clojure.core/contains? input :attribute) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-attribute-name (input :attribute)) #:http.request.field{:name "Attribute", :shape "InstanceAttributeName", :location-name "attribute"})) (clojure.core/contains? input :value) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :value)) #:http.request.field{:name "Value", :shape "String", :location-name "value"})) (clojure.core/contains? input :disable-api-termination) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :disable-api-termination)) #:http.request.field{:name "DisableApiTermination", :shape "AttributeBooleanValue", :location-name "disableApiTermination"})) (clojure.core/contains? input :groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-group-id-string-list (input :groups)) #:http.request.field{:name "Groups", :shape "GroupIdStringList", :location-name "GroupId"})) (clojure.core/contains? input :block-device-mappings) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-block-device-mapping-specification-list (input :block-device-mappings)) #:http.request.field{:name "BlockDeviceMappings", :shape "InstanceBlockDeviceMappingSpecificationList", :location-name "blockDeviceMapping"})) (clojure.core/contains? input :kernel) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value (input :kernel)) #:http.request.field{:name "Kernel", :shape "AttributeValue", :location-name "kernel"})) (clojure.core/contains? input :user-data) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-blob-attribute-value (input :user-data)) #:http.request.field{:name "UserData", :shape "BlobAttributeValue", :location-name "userData"})) (clojure.core/contains? input :instance-initiated-shutdown-behavior) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-value (input :instance-initiated-shutdown-behavior)) #:http.request.field{:name "InstanceInitiatedShutdownBehavior", :shape "AttributeValue", :location-name "instanceInitiatedShutdownBehavior"})) (clojure.core/contains? input :ena-support) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-attribute-boolean-value (input :ena-support)) #:http.request.field{:name "EnaSupport", :shape "AttributeBooleanValue", :location-name "enaSupport"}))))

(clojure.core/defn- req-release-address-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :allocation-id) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :allocation-id)) #:http.request.field{:name "AllocationId", :shape "String"})) (clojure.core/contains? input :public-ip) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :public-ip)) #:http.request.field{:name "PublicIp", :shape "String"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-vpc-classic-link-dns-support-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-max-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "MaxResults", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken", :location-name "nextToken"})) (clojure.core/contains? input :vpc-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-vpc-classic-link-id-list (input :vpc-ids)) #:http.request.field{:name "VpcIds", :shape "VpcClassicLinkIdList"}))))

(clojure.core/defn- req-assign-ipv-6-addresses-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :network-interface-id)) #:http.request.field{:name "NetworkInterfaceId", :shape "String", :location-name "networkInterfaceId"})]} (clojure.core/contains? input :ipv-6-address-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :ipv-6-address-count)) #:http.request.field{:name "Ipv6AddressCount", :shape "Integer", :location-name "ipv6AddressCount"})) (clojure.core/contains? input :ipv-6-addresses) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-ipv-6-address-list (input :ipv-6-addresses)) #:http.request.field{:name "Ipv6Addresses", :shape "Ipv6AddressList", :location-name "ipv6Addresses"}))))

(clojure.core/defn- req-describe-reserved-instances-modifications-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :reserved-instances-modification-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-reserved-instances-modification-id-string-list (input :reserved-instances-modification-ids)) #:http.request.field{:name "ReservedInstancesModificationIds", :shape "ReservedInstancesModificationIdStringList", :location-name "ReservedInstancesModificationId"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"}))))

(clojure.core/defn- req-create-network-interface-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :subnet-id)) #:http.request.field{:name "SubnetId", :shape "String", :location-name "subnetId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :ipv-6-addresses) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-instance-ipv-6-address-list (input :ipv-6-addresses)) #:http.request.field{:name "Ipv6Addresses", :shape "InstanceIpv6AddressList", :location-name "ipv6Addresses"})) (clojure.core/contains? input :description) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :description)) #:http.request.field{:name "Description", :shape "String", :location-name "description"})) (clojure.core/contains? input :groups) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-security-group-id-string-list (input :groups)) #:http.request.field{:name "Groups", :shape "SecurityGroupIdStringList", :location-name "SecurityGroupId"})) (clojure.core/contains? input :private-ip-addresses) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-private-ip-address-specification-list (input :private-ip-addresses)) #:http.request.field{:name "PrivateIpAddresses", :shape "PrivateIpAddressSpecificationList", :location-name "privateIpAddresses"})) (clojure.core/contains? input :secondary-private-ip-address-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :secondary-private-ip-address-count)) #:http.request.field{:name "SecondaryPrivateIpAddressCount", :shape "Integer", :location-name "secondaryPrivateIpAddressCount"})) (clojure.core/contains? input :private-ip-address) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :private-ip-address)) #:http.request.field{:name "PrivateIpAddress", :shape "String", :location-name "privateIpAddress"})) (clojure.core/contains? input :ipv-6-address-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :ipv-6-address-count)) #:http.request.field{:name "Ipv6AddressCount", :shape "Integer", :location-name "ipv6AddressCount"}))))

(clojure.core/defn- req-describe-stale-security-groups-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-max-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "MaxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"}))))

(clojure.core/defn- req-create-route-table-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-fpga-images-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :fpga-image-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-fpga-image-id-list (input :fpga-image-ids)) #:http.request.field{:name "FpgaImageIds", :shape "FpgaImageIdList", :location-name "FpgaImageId"})) (clojure.core/contains? input :owners) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-owner-string-list (input :owners)) #:http.request.field{:name "Owners", :shape "OwnerStringList", :location-name "Owner"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-next-token (input :next-token)) #:http.request.field{:name "NextToken", :shape "NextToken"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-max-results (input :max-results)) #:http.request.field{:name "MaxResults", :shape "MaxResults"}))))

(clojure.core/defn- req-describe-principal-id-format-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :resources) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-resource-list (input :resources)) #:http.request.field{:name "Resources", :shape "ResourceList", :location-name "Resource"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-describe-vpc-endpoint-connections-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String"}))))

(clojure.core/defn- req-associate-dhcp-options-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :dhcp-options-id)) #:http.request.field{:name "DhcpOptionsId", :shape "String"}) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-reject-vpc-peering-connection-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-peering-connection-id)) #:http.request.field{:name "VpcPeeringConnectionId", :shape "String", :location-name "vpcPeeringConnectionId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-replace-network-acl-association-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :association-id)) #:http.request.field{:name "AssociationId", :shape "String", :location-name "associationId"}) (clojure.core/into (ser-string (input :network-acl-id)) #:http.request.field{:name "NetworkAclId", :shape "String", :location-name "networkAclId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-run-scheduled-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-scheduled-instances-launch-specification (input :launch-specification)) #:http.request.field{:name "LaunchSpecification", :shape "ScheduledInstancesLaunchSpecification"}) (clojure.core/into (ser-string (input :scheduled-instance-id)) #:http.request.field{:name "ScheduledInstanceId", :shape "String"})]} (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String", :idempotency-token true})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :instance-count) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :instance-count)) #:http.request.field{:name "InstanceCount", :shape "Integer"}))))

(clojure.core/defn- req-describe-spot-instance-requests-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :spot-instance-request-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-spot-instance-request-id-list (input :spot-instance-request-ids)) #:http.request.field{:name "SpotInstanceRequestIds", :shape "SpotInstanceRequestIdList", :location-name "SpotInstanceRequestId"}))))

(clojure.core/defn- req-describe-aggregate-id-format-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"}))))

(clojure.core/defn- req-attach-internet-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :internet-gateway-id)) #:http.request.field{:name "InternetGatewayId", :shape "String", :location-name "internetGatewayId"}) (clojure.core/into (ser-string (input :vpc-id)) #:http.request.field{:name "VpcId", :shape "String", :location-name "vpcId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-stop-instances-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-instance-id-string-list (input :instance-ids)) #:http.request.field{:name "InstanceIds", :shape "InstanceIdStringList", :location-name "InstanceId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :force) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :force)) #:http.request.field{:name "Force", :shape "Boolean", :location-name "force"}))))

(clojure.core/defn- req-delete-egress-only-internet-gateway-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-egress-only-internet-gateway-id (input :egress-only-internet-gateway-id)) #:http.request.field{:name "EgressOnlyInternetGatewayId", :shape "EgressOnlyInternetGatewayId"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"}))))

(clojure.core/defn- req-purchase-host-reservation-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-request-host-id-set (input :host-id-set)) #:http.request.field{:name "HostIdSet", :shape "RequestHostIdSet"}) (clojure.core/into (ser-string (input :offering-id)) #:http.request.field{:name "OfferingId", :shape "String"})]} (clojure.core/contains? input :client-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :client-token)) #:http.request.field{:name "ClientToken", :shape "String"})) (clojure.core/contains? input :currency-code) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-currency-code-values (input :currency-code)) #:http.request.field{:name "CurrencyCode", :shape "CurrencyCodeValues"})) (clojure.core/contains? input :limit-price) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :limit-price)) #:http.request.field{:name "LimitPrice", :shape "String"}))))

(clojure.core/defn- req-get-host-reservation-purchase-preview-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-request-host-id-set (input :host-id-set)) #:http.request.field{:name "HostIdSet", :shape "RequestHostIdSet"}) (clojure.core/into (ser-string (input :offering-id)) #:http.request.field{:name "OfferingId", :shape "String"})]}))

(clojure.core/defn- req-modify-vpc-endpoint-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :vpc-endpoint-id)) #:http.request.field{:name "VpcEndpointId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :remove-subnet-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :remove-subnet-ids)) #:http.request.field{:name "RemoveSubnetIds", :shape "ValueStringList", :location-name "RemoveSubnetId"})) (clojure.core/contains? input :private-dns-enabled) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :private-dns-enabled)) #:http.request.field{:name "PrivateDnsEnabled", :shape "Boolean"})) (clojure.core/contains? input :add-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :add-security-group-ids)) #:http.request.field{:name "AddSecurityGroupIds", :shape "ValueStringList", :location-name "AddSecurityGroupId"})) (clojure.core/contains? input :policy-document) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :policy-document)) #:http.request.field{:name "PolicyDocument", :shape "String"})) (clojure.core/contains? input :remove-security-group-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :remove-security-group-ids)) #:http.request.field{:name "RemoveSecurityGroupIds", :shape "ValueStringList", :location-name "RemoveSecurityGroupId"})) (clojure.core/contains? input :add-subnet-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :add-subnet-ids)) #:http.request.field{:name "AddSubnetIds", :shape "ValueStringList", :location-name "AddSubnetId"})) (clojure.core/contains? input :remove-route-table-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :remove-route-table-ids)) #:http.request.field{:name "RemoveRouteTableIds", :shape "ValueStringList", :location-name "RemoveRouteTableId"})) (clojure.core/contains? input :reset-policy) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :reset-policy)) #:http.request.field{:name "ResetPolicy", :shape "Boolean"})) (clojure.core/contains? input :add-route-table-ids) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-value-string-list (input :add-route-table-ids)) #:http.request.field{:name "AddRouteTableIds", :shape "ValueStringList", :location-name "AddRouteTableId"}))))

(clojure.core/defn- req-get-console-screenshot-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :instance-id)) #:http.request.field{:name "InstanceId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"})) (clojure.core/contains? input :wake-up) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :wake-up)) #:http.request.field{:name "WakeUp", :shape "Boolean"}))))

(clojure.core/defn- req-describe-id-format-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :resource) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :resource)) #:http.request.field{:name "Resource", :shape "String"}))))

(clojure.core/defn- req-describe-key-pairs-request [input] (clojure.core/cond-> {} (clojure.core/contains? input :filters) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-filter-list (input :filters)) #:http.request.field{:name "Filters", :shape "FilterList", :location-name "Filter"})) (clojure.core/contains? input :key-names) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-key-name-string-list (input :key-names)) #:http.request.field{:name "KeyNames", :shape "KeyNameStringList", :location-name "KeyName"})) (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-delete-dhcp-options-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :dhcp-options-id)) #:http.request.field{:name "DhcpOptionsId", :shape "String"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/defn- req-describe-spot-fleet-request-history-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :spot-fleet-request-id)) #:http.request.field{:name "SpotFleetRequestId", :shape "String", :location-name "spotFleetRequestId"}) (clojure.core/into (ser-date-time (input :start-time)) #:http.request.field{:name "StartTime", :shape "DateTime", :location-name "startTime"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"})) (clojure.core/contains? input :event-type) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-event-type (input :event-type)) #:http.request.field{:name "EventType", :shape "EventType", :location-name "eventType"})) (clojure.core/contains? input :max-results) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-integer (input :max-results)) #:http.request.field{:name "MaxResults", :shape "Integer", :location-name "maxResults"})) (clojure.core/contains? input :next-token) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-string (input :next-token)) #:http.request.field{:name "NextToken", :shape "String", :location-name "nextToken"}))))

(clojure.core/defn- req-delete-fleets-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-fleet-id-set (input :fleet-ids)) #:http.request.field{:name "FleetIds", :shape "FleetIdSet", :location-name "FleetId"}) (clojure.core/into (ser-boolean (input :terminate-instances)) #:http.request.field{:name "TerminateInstances", :shape "Boolean"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean"}))))

(clojure.core/defn- req-create-placement-group-request [input] (clojure.core/cond-> #:http.request.configuration{:body [(clojure.core/into (ser-string (input :group-name)) #:http.request.field{:name "GroupName", :shape "String", :location-name "groupName"}) (clojure.core/into (ser-placement-strategy (input :strategy)) #:http.request.field{:name "Strategy", :shape "PlacementStrategy", :location-name "strategy"})]} (clojure.core/contains? input :dry-run) (clojure.core/update-in [:http.request.configuration/body] (clojure.core/fnil clojure.core/conj []) (clojure.core/into (ser-boolean (input :dry-run)) #:http.request.field{:name "DryRun", :shape "Boolean", :location-name "dryRun"}))))

(clojure.core/declare deser-export-task-list)

(clojure.core/declare deser-event-code)

(clojure.core/declare deser-flow-log)

(clojure.core/declare deser-vpc-list)

(clojure.core/declare deser-history-record-entry)

(clojure.core/declare deser-spot-allocation-strategy)

(clojure.core/declare deser-volume-status-action)

(clojure.core/declare deser-permission-group)

(clojure.core/declare deser-address)

(clojure.core/declare deser-response-error)

(clojure.core/declare deser-bundle-task)

(clojure.core/declare deser-launch-template-config-list)

(clojure.core/declare deser-security-group-list)

(clojure.core/declare deser-service-type-detail-set)

(clojure.core/declare deser-principal-type)

(clojure.core/declare deser-instance-count-list)

(clojure.core/declare deser-describe-conversion-task-list)

(clojure.core/declare deser-route)

(clojure.core/declare deser-dns-entry)

(clojure.core/declare deser-nat-gateway-list)

(clojure.core/declare deser-moving-address-status-set)

(clojure.core/declare deser-instance-state-change-list)

(clojure.core/declare deser-iam-instance-profile-association-set)

(clojure.core/declare deser-double)

(clojure.core/declare deser-service-type)

(clojure.core/declare deser-ebs-instance-block-device)

(clojure.core/declare deser-route-table)

(clojure.core/declare deser-scheduled-instance-set)

(clojure.core/declare deser-launch-template-set)

(clojure.core/declare deser-target-groups-config)

(clojure.core/declare deser-propagating-vgw)

(clojure.core/declare deser-flow-log-set)

(clojure.core/declare deser-prefix-list-id-set)

(clojure.core/declare deser-instance-network-interface-list)

(clojure.core/declare deser-vpn-connection-list)

(clojure.core/declare deser-on-demand-allocation-strategy)

(clojure.core/declare deser-reserved-instances-offering)

(clojure.core/declare deser-vpc-endpoint-type)

(clojure.core/declare deser-storage)

(clojure.core/declare deser-value-string-list)

(clojure.core/declare deser-volume-modification)

(clojure.core/declare deser-ip-ranges)

(clojure.core/declare deser-instance-status-event-list)

(clojure.core/declare deser-connection-notification-set)

(clojure.core/declare deser-group-identifier-set)

(clojure.core/declare deser-reserved-instances-modification-result-list)

(clojure.core/declare deser-vpc-peering-connection-vpc-info)

(clojure.core/declare deser-instance-monitoring-list)

(clojure.core/declare deser-vpc-peering-connection)

(clojure.core/declare deser-target-groups)

(clojure.core/declare deser-target-reservation-value-set)

(clojure.core/declare deser-image-state)

(clojure.core/declare deser-network-interface-ipv-6-address)

(clojure.core/declare deser-vpn-state)

(clojure.core/declare deser-account-attribute-list)

(clojure.core/declare deser-ipv-6-range-list)

(clojure.core/declare deser-move-status)

(clojure.core/declare deser-credit-specification)

(clojure.core/declare deser-prefix-list-id)

(clojure.core/declare deser-pricing-details-list)

(clojure.core/declare deser-purchase)

(clojure.core/declare deser-hypervisor-type)

(clojure.core/declare deser-history-record)

(clojure.core/declare deser-connection-notification-type)

(clojure.core/declare deser-route-table-list)

(clojure.core/declare deser-architecture-values)

(clojure.core/declare deser-cancelled-spot-instance-request)

(clojure.core/declare deser-volume-attachment-list)

(clojure.core/declare deser-export-environment)

(clojure.core/declare deser-load-permission-list)

(clojure.core/declare deser-instance-export-details)

(clojure.core/declare deser-service-type-detail)

(clojure.core/declare deser-volume-attachment-state)

(clojure.core/declare deser-volume-modification-list)

(clojure.core/declare deser-internet-gateway-attachment)

(clojure.core/declare deser-launch-template-ebs-block-device)

(clojure.core/declare deser-fleet-identifier)

(clojure.core/declare deser-instance-monitoring)

(clojure.core/declare deser-spot-price-history-list)

(clojure.core/declare deser-vpn-connection-options)

(clojure.core/declare deser-network-acl-entry)

(clojure.core/declare deser-provisioned-bandwidth)

(clojure.core/declare deser-pci-id)

(clojure.core/declare deser-vgw-telemetry-list)

(clojure.core/declare deser-volume-state)

(clojure.core/declare deser-spot-placement)

(clojure.core/declare deser-security-group)

(clojure.core/declare deser-recurring-charges-list)

(clojure.core/declare deser-snapshot-detail-list)

(clojure.core/declare deser-id-format)

(clojure.core/declare deser-volume)

(clojure.core/declare deser-spot-instance-type)

(clojure.core/declare deser-ebs-block-device)

(clojure.core/declare deser-spot-fleet-tag-specification-list)

(clojure.core/declare deser-placement)

(clojure.core/declare deser-reserved-instances-configuration)

(clojure.core/declare deser-interface-permission-type)

(clojure.core/declare deser-user-bucket-details)

(clojure.core/declare deser-occurrence-day-set)

(clojure.core/declare deser-snapshot-list)

(clojure.core/declare deser-instance-lifecycle-type)

(clojure.core/declare deser-availability-zone-state)

(clojure.core/declare deser-subnet)

(clojure.core/declare deser-dhcp-configuration-list)

(clojure.core/declare deser-spot-datafeed-subscription)

(clojure.core/declare deser-fleet-activity-status)

(clojure.core/declare deser-instance-count)

(clojure.core/declare deser-host-instance-list)

(clojure.core/declare deser-response-launch-template-data)

(clojure.core/declare deser-import-instance-volume-detail-item)

(clojure.core/declare deser-fleet-launch-template-specification)

(clojure.core/declare deser-delete-fleet-success-set)

(clojure.core/declare deser-tenancy)

(clojure.core/declare deser-instance-network-interface-attachment)

(clojure.core/declare deser-snapshot-detail)

(clojure.core/declare deser-delete-launch-template-versions-response-success-item)

(clojure.core/declare deser-fpga-image)

(clojure.core/declare deser-spot-instance-state-fault)

(clojure.core/declare deser-dhcp-configuration-value-list)

(clojure.core/declare deser-instance-network-interface-association)

(clojure.core/declare deser-fleet-set)

(clojure.core/declare deser-bundle-task-list)

(clojure.core/declare deser-fleet-launch-template-config-list)

(clojure.core/declare deser-disk-image-volume-description)

(clojure.core/declare deser-host-properties)

(clojure.core/declare deser-delete-launch-template-versions-response-error-item)

(clojure.core/declare deser-scheduled-instance)

(clojure.core/declare deser-active-instance-set)

(clojure.core/declare deser-instance-type)

(clojure.core/declare deser-route-state)

(clojure.core/declare deser-subnet-state)

(clojure.core/declare deser-stale-ip-permission-set)

(clojure.core/declare deser-reserved-instances-modification-result)

(clojure.core/declare deser-import-instance-task-details)

(clojure.core/declare deser-create-volume-permission)

(clojure.core/declare deser-instance-status-details)

(clojure.core/declare deser-subnet-cidr-block-state)

(clojure.core/declare deser-iam-instance-profile-specification)

(clojure.core/declare deser-spot-instance-request-list)

(clojure.core/declare deser-region-list)

(clojure.core/declare deser-delete-fleet-success-item)

(clojure.core/declare deser-response-host-id-set)

(clojure.core/declare deser-disk-image-description)

(clojure.core/declare deser-launch-template)

(clojure.core/declare deser-available-capacity)

(clojure.core/declare deser-service-detail-set)

(clojure.core/declare deser-bundle-task-state)

(clojure.core/declare deser-icmp-type-code)

(clojure.core/declare deser-instance-private-ip-address)

(clojure.core/declare deser-reserved-instances-listing-list)

(clojure.core/declare deser-service-state)

(clojure.core/declare deser-vpc-classic-link)

(clojure.core/declare deser-snapshot-task-detail)

(clojure.core/declare deser-launch-specification)

(clojure.core/declare deser-id-format-list)

(clojure.core/declare deser-launch-template-tag-specification-list)

(clojure.core/declare deser-allowed-principal-set)

(clojure.core/declare deser-instance-ipv-6-address-list)

(clojure.core/declare deser-prefix-list-set)

(clojure.core/declare deser-instance-credit-specification)

(clojure.core/declare deser-fleet-event-type)

(clojure.core/declare deser-fleet-state-code)

(clojure.core/declare deser-attribute-boolean-value)

(clojure.core/declare deser-spot-instance-request)

(clojure.core/declare deser-rule-action)

(clojure.core/declare deser-vpc-attachment-list)

(clojure.core/declare deser-service-configuration-set)

(clojure.core/declare deser-successful-instance-credit-specification-item)

(clojure.core/declare deser-vpn-static-route)

(clojure.core/declare deser-fleet-type)

(clojure.core/declare deser-vpc-endpoint)

(clojure.core/declare deser-key-pair-list)

(clojure.core/declare deser-purchased-scheduled-instance-set)

(clojure.core/declare deser-group-identifier-list)

(clojure.core/declare deser-cancel-spot-fleet-requests-error-item)

(clojure.core/declare deser-payment-option)

(clojure.core/declare deser-instance-status-details-list)

(clojure.core/declare deser-key-pair-info)

(clojure.core/declare deser-instance-network-interface)

(clojure.core/declare deser-cancel-spot-fleet-requests-error)

(clojure.core/declare deser-vpn-static-route-list)

(clojure.core/declare deser-reservation)

(clojure.core/declare deser-unsuccessful-item-error)

(clojure.core/declare deser-elastic-gpu-association-list)

(clojure.core/declare deser-vpc-peering-connection-list)

(clojure.core/declare deser-unsuccessful-item-set)

(clojure.core/declare deser-security-group-references)

(clojure.core/declare deser-stale-ip-permission)

(clojure.core/declare deser-traffic-type)

(clojure.core/declare deser-vpc-cidr-block-association-set)

(clojure.core/declare deser-availability-zone-list)

(clojure.core/declare deser-launch-template-tag-specification)

(clojure.core/declare deser-vpc-endpoint-connection)

(clojure.core/declare deser-launch-template-spot-market-options)

(clojure.core/declare deser-availability-zone)

(clojure.core/declare deser-route-origin)

(clojure.core/declare deser-fpga-image-attribute)

(clojure.core/declare deser-create-volume-permission-list)

(clojure.core/declare deser-status)

(clojure.core/declare deser-network-interface-type)

(clojure.core/declare deser-cancelled-spot-instance-request-list)

(clojure.core/declare deser-vpc-ipv-6-cidr-block-association)

(clojure.core/declare deser-event-type)

(clojure.core/declare deser-moving-address-status)

(clojure.core/declare deser-reserved-instances)

(clojure.core/declare deser-network-interface-permission-state)

(clojure.core/declare deser-next-token)

(clojure.core/declare deser-elastic-gpu-association)

(clojure.core/declare deser-egress-only-internet-gateway-list)

(clojure.core/declare deser-excess-capacity-termination-policy)

(clojure.core/declare deser-prefix-list)

(clojure.core/declare deser-import-instance-volume-detail-set)

(clojure.core/declare deser-status-type)

(clojure.core/declare deser-spot-fleet-monitoring)

(clojure.core/declare deser-reserved-instances-listing)

(clojure.core/declare deser-vpc-cidr-block-state)

(clojure.core/declare deser-instance-status-summary)

(clojure.core/declare deser-nat-gateway-address)

(clojure.core/declare deser-instance-status-list)

(clojure.core/declare deser-placement-group-list)

(clojure.core/declare deser-address-list)

(clojure.core/declare deser-reserved-instances-offering-list)

(clojure.core/declare deser-cidr-block)

(clojure.core/declare deser-reserved-instances-list)

(clojure.core/declare deser-image-list)

(clojure.core/declare deser-user-id-group-pair-list)

(clojure.core/declare deser-s-3-storage)

(clojure.core/declare deser-recurring-charge)

(clojure.core/declare deser-spot-fleet-request-config-set)

(clojure.core/declare deser-launch-permission-list)

(clojure.core/declare deser-price-schedule-list)

(clojure.core/declare deser-instance-private-ip-address-list)

(clojure.core/declare deser-instance-ipv-6-address)

(clojure.core/declare deser-group-identifier)

(clojure.core/declare deser-fpga-image-list)

(clojure.core/declare deser-spot-price)

(clojure.core/declare deser-instance-id-set)

(clojure.core/declare deser-scheduled-instance-availability-set)

(clojure.core/declare deser-nat-gateway)

(clojure.core/declare deser-elastic-gpu-status)

(clojure.core/declare deser-launch-template-iam-instance-profile-specification)

(clojure.core/declare deser-spot-instance-status)

(clojure.core/declare deser-delete-launch-template-versions-response-success-set)

(clojure.core/declare deser-tag-description)

(clojure.core/declare deser-account-attribute-value-list)

(clojure.core/declare deser-import-snapshot-task-list)

(clojure.core/declare deser-dhcp-options)

(clojure.core/declare deser-spot-instance-interruption-behavior)

(clojure.core/declare deser-run-instances-monitoring-enabled)

(clojure.core/declare deser-user-id-group-pair-set)

(clojure.core/declare deser-tag-list)

(clojure.core/declare deser-network-acl-association-list)

(clojure.core/declare deser-product-code-list)

(clojure.core/declare deser-volume-status-info-status)

(clojure.core/declare deser-spot-fleet-request-config-data)

(clojure.core/declare deser-launch-template-overrides)

(clojure.core/declare deser-host-offering)

(clojure.core/declare deser-unsuccessful-instance-credit-specification-error-code)

(clojure.core/declare deser-listing-state)

(clojure.core/declare deser-volume-status-events-list)

(clojure.core/declare deser-datafeed-subscription-state)

(clojure.core/declare deser-service-detail)

(clojure.core/declare deser-network-interface-list)

(clojure.core/declare deser-cancel-batch-error-code)

(clojure.core/declare deser-target-configuration)

(clojure.core/declare deser-allocation-strategy)

(clojure.core/declare deser-status-name)

(clojure.core/declare deser-volume-status-event)

(clojure.core/declare deser-target-reservation-value)

(clojure.core/declare deser-reserved-intances-ids)

(clojure.core/declare deser-attribute-value)

(clojure.core/declare deser-launch-template-block-device-mapping-list)

(clojure.core/declare deser-network-acl-association)

(clojure.core/declare deser-private-ip-address-specification-list)

(clojure.core/declare deser-auto-placement)

(clojure.core/declare deser-prefix-list-id-list)

(clojure.core/declare deser-availability-zone-message-list)

(clojure.core/declare deser-history-records)

(clojure.core/declare deser-tag-description-list)

(clojure.core/declare deser-product-code-values)

(clojure.core/declare deser-fleet-launch-template-config)

(clojure.core/declare deser-instance-health-status)

(clojure.core/declare deser-purchase-set)

(clojure.core/declare deser-ipv-6-cidr-block)

(clojure.core/declare deser-placement-strategy)

(clojure.core/declare deser-internet-gateway-attachment-list)

(clojure.core/declare deser-volume-status-info)

(clojure.core/declare deser-instance-capacity)

(clojure.core/declare deser-instance-block-device-mapping)

(clojure.core/declare deser-connection-notification-state)

(clojure.core/declare deser-instance-interruption-behavior)

(clojure.core/declare deser-customer-gateway-list)

(clojure.core/declare deser-spot-options)

(clojure.core/declare deser-classic-link-dns-support)

(clojure.core/declare deser-vpc-cidr-block-state-code)

(clojure.core/declare deser-monitoring-state)

(clojure.core/declare deser-reserved-instance-reservation-value-set)

(clojure.core/declare deserscope)

(clojure.core/declare deser-network-interface-permission-state-code)

(clojure.core/declare deser-device-type)

(clojure.core/declare deser-route-list)

(clojure.core/declare deser-pricing-detail)

(clojure.core/declare deser-import-volume-task-details)

(clojure.core/declare deser-subnet-cidr-block-state-code)

(clojure.core/declare deser-fpga-image-state-code)

(clojure.core/declare deser-on-demand-options)

(clojure.core/declare deser-network-interface-status)

(clojure.core/declare deser-vpc-classic-link-list)

(clojure.core/declare deser-group-id-string-list)

(clojure.core/declare deser-fleet-data)

(clojure.core/declare deser-price-schedule)

(clojure.core/declare deser-iam-instance-profile-association)

(clojure.core/declare deser-reserved-instance-state)

(clojure.core/declare deser-allocation-state)

(clojure.core/declare deser-connection-notification)

(clojure.core/declare deser-launch-template-block-device-mapping)

(clojure.core/declare deser-export-task-state)

(clojure.core/declare deser-log-destination-type)

(clojure.core/declare deser-instance-state-change)

(clojure.core/declare deser-monitoring)

(clojure.core/declare deser-elastic-gpu-health)

(clojure.core/declare deser-event-information)

(clojure.core/declare deser-launch-template-instance-network-interface-specification-list)

(clojure.core/declare deser-launch-specs-list)

(clojure.core/declare deser-unsuccessful-instance-credit-specification-item)

(clojure.core/declare deser-volume-status-details)

(clojure.core/declare deser-load-balancers-config)

(clojure.core/declare deser-integer)

(clojure.core/declare deser-string)

(clojure.core/declare deser-elastic-gpus)

(clojure.core/declare deser-classic-load-balancer)

(clojure.core/declare deser-ip-permission)

(clojure.core/declare deser-ip-permission-list)

(clojure.core/declare deser-ri-product-description)

(clojure.core/declare deser-volume-list)

(clojure.core/declare deser-vpc-endpoint-connection-set)

(clojure.core/declare deser-dhcp-options-list)

(clojure.core/declare deser-unsuccessful-item)

(clojure.core/declare deser-principal-id-format-list)

(clojure.core/declare deser-cancel-spot-fleet-requests-success-item)

(clojure.core/declare deser-launch-template-config)

(clojure.core/declare deser-propagating-vgw-list)

(clojure.core/declare deser-disk-image-format)

(clojure.core/declare deser-network-interface-attachment)

(clojure.core/declare deser-security-group-id-string-list)

(clojure.core/declare deser-spot-fleet-request-config)

(clojure.core/declare deser-domain-type)

(clojure.core/declare deser-vgw-telemetry)

(clojure.core/declare deser-cancel-spot-instance-request-state)

(clojure.core/declare deser-subnet-ipv-6-cidr-block-association-set)

(clojure.core/declare deser-network-interface)

(clojure.core/declare deser-launch-template-name)

(clojure.core/declare deser-snapshot)

(clojure.core/declare deser-resource-type)

(clojure.core/declare deser-instance-status-event)

(clojure.core/declare deser-vpc-peering-connection-options-description)

(clojure.core/declare deser-volume-status-name)

(clojure.core/declare deser-internet-gateway)

(clojure.core/declare deser-vpc)

(clojure.core/declare deser-ipv-6-address-list)

(clojure.core/declare deser-network-interface-permission-list)

(clojure.core/declare deser-batch-state)

(clojure.core/declare deser-fleet-on-demand-allocation-strategy)

(clojure.core/declare deser-reservation-value)

(clojure.core/declare deser-host-instance)

(clojure.core/declare deser-launch-template-cpu-options)

(clojure.core/declare deser-currency-code-values)

(clojure.core/declare deser-import-image-task)

(clojure.core/declare deser-load-permission)

(clojure.core/declare deser-volume-status-details-list)

(clojure.core/declare deser-fleet-launch-template-overrides-list)

(clojure.core/declare deser-summary-status)

(clojure.core/declare deser-fleet-launch-template-overrides)

(clojure.core/declare deser-instance-list)

(clojure.core/declare deser-volume-type)

(clojure.core/declare deser-customer-gateway)

(clojure.core/declare deser-network-interface-permission)

(clojure.core/declare deser-response-host-id-list)

(clojure.core/declare deser-vpc-cidr-block-association)

(clojure.core/declare deser-launch-template-instance-network-interface-specification)

(clojure.core/declare deser-host-list)

(clojure.core/declare deser-stale-security-group-set)

(clojure.core/declare deser-elastic-gpu-specification-response-list)

(clojure.core/declare deser-classic-load-balancers-config)

(clojure.core/declare deser-volume-status-list)

(clojure.core/declare deser-export-task)

(clojure.core/declare deser-network-interface-private-ip-address)

(clojure.core/declare deser-placement-group-state)

(clojure.core/declare deser-long)

(clojure.core/declare deser-volume-status-actions-list)

(clojure.core/declare deser-vpn-static-route-source)

(clojure.core/declare deser-host-offering-set)

(clojure.core/declare deser-vpc-endpoint-set)

(clojure.core/declare deser-scheduled-instance-recurrence)

(clojure.core/declare deser-allowed-principal)

(clojure.core/declare deser-unsuccessful-instance-credit-specification-set)

(clojure.core/declare deser-instance-state)

(clojure.core/declare deser-volume-status-item)

(clojure.core/declare deser-spot-instance-state)

(clojure.core/declare deser-instance-state-name)

(clojure.core/declare deser-availability-zone-message)

(clojure.core/declare deser-launch-template-version-set)

(clojure.core/declare deser-version-description)

(clojure.core/declare deser-host-reservation-set)

(clojure.core/declare deser-unsuccessful-item-list)

(clojure.core/declare deser-virtualization-type)

(clojure.core/declare deser-reserved-instances-id)

(clojure.core/declare deser-instance-credit-specification-list)

(clojure.core/declare deser-default-target-capacity-type)

(clojure.core/declare deser-instance-network-interface-specification-list)

(clojure.core/declare deser-conversion-task)

(clojure.core/declare deser-successful-instance-credit-specification-set)

(clojure.core/declare deser-bundle-task-error)

(clojure.core/declare deser-dhcp-configuration)

(clojure.core/declare deser-block-device-mapping)

(clojure.core/declare deser-state)

(clojure.core/declare deser-export-to-s-3-task)

(clojure.core/declare deser-network-acl-list)

(clojure.core/declare deser-cpu-options)

(clojure.core/declare deser-tag)

(clojure.core/declare deser-recurring-charge-frequency)

(clojure.core/declare deser-spot-fleet-tag-specification)

(clojure.core/declare deser-platform-values)

(clojure.core/declare deser-cancel-spot-fleet-requests-success-set)

(clojure.core/declare deser-product-code)

(clojure.core/declare deser-port-range)

(clojure.core/declare deser-vpc-state)

(clojure.core/declare deser-attachment-status)

(clojure.core/declare deser-peering-connection-options)

(clojure.core/declare deser-launch-templates-monitoring)

(clojure.core/declare deser-dns-entry-set)

(clojure.core/declare deser-launch-template-version)

(clojure.core/declare deser-vpc-attachment)

(clojure.core/declare deser-instance-status)

(clojure.core/declare deser-spot-fleet-launch-specification)

(clojure.core/declare deser-ipv-6-cidr-block-set)

(clojure.core/declare deser-ip-range)

(clojure.core/declare deser-cidr-block-set)

(clojure.core/declare deser-stale-security-group)

(clojure.core/declare deser-import-snapshot-task)

(clojure.core/declare deser-elastic-gpu-specification-response)

(clojure.core/declare deser-container-format)

(clojure.core/declare deser-network-interface-ipv-6-addresses-list)

(clojure.core/declare deser-vpc-peering-connection-state-reason)

(clojure.core/declare deser-market-type)

(clojure.core/declare deser-instance)

(clojure.core/declare deser-nat-gateway-state)

(clojure.core/declare deser-block-device-mapping-list)

(clojure.core/declare deser-blob)

(clojure.core/declare deser-delete-fleet-error-item)

(clojure.core/declare deser-instance-block-device-mapping-list)

(clojure.core/declare deser-security-group-reference)

(clojure.core/declare deser-classic-link-dns-support-list)

(clojure.core/declare deser-gateway-type)

(clojure.core/declare deser-image)

(clojure.core/declare deser-ip-range-list)

(clojure.core/declare deser-image-type-values)

(clojure.core/declare deser-classic-link-instance)

(clojure.core/declare deser-classic-load-balancers)

(clojure.core/declare deser-security-group-identifier)

(clojure.core/declare deser-cancel-spot-fleet-requests-error-set)

(clojure.core/declare deser-reserved-instances-modification-list)

(clojure.core/declare deser-network-acl-entry-list)

(clojure.core/declare deser-network-interface-private-ip-address-list)

(clojure.core/declare deser-target-group)

(clojure.core/declare deser-conversion-task-state)

(clojure.core/declare deser-offering-class-type)

(clojure.core/declare deser-launch-template-error-code)

(clojure.core/declare deser-nat-gateway-address-list)

(clojure.core/declare deser-reserved-instances-modification)

(clojure.core/declare deser-listing-status)

(clojure.core/declare deser-launch-template-overrides-list)

(clojure.core/declare deser-classic-link-instance-list)

(clojure.core/declare deser-import-image-task-list)

(clojure.core/declare deser-route-table-association-list)

(clojure.core/declare deser-iam-instance-profile-association-state)

(clojure.core/declare deser-service-configuration)

(clojure.core/declare deser-offering-type-values)

(clojure.core/declare deser-float)

(clojure.core/declare deser-network-acl)

(clojure.core/declare deser-target-capacity-specification)

(clojure.core/declare deser-delete-launch-template-versions-response-error-set)

(clojure.core/declare deser-unsuccessful-instance-credit-specification-item-error)

(clojure.core/declare deser-volume-attachment)

(clojure.core/declare deser-route-table-association)

(clojure.core/declare deser-subnet-ipv-6-cidr-block-association)

(clojure.core/declare deser-principal-id-format)

(clojure.core/declare deser-vpn-connection)

(clojure.core/declare deser-region)

(clojure.core/declare deser-fpga-image-state)

(clojure.core/declare deser-state-reason)

(clojure.core/declare deser-elastic-gpu-state)

(clojure.core/declare deser-iam-instance-profile)

(clojure.core/declare deser-scheduled-instance-availability)

(clojure.core/declare deser-active-instance)

(clojure.core/declare deser-fleet-excess-capacity-termination-policy)

(clojure.core/declare deser-subnet-list)

(clojure.core/declare deser-account-attribute-value)

(clojure.core/declare deser-vpc-peering-connection-state-reason-code)

(clojure.core/declare deser-launch-permission)

(clojure.core/declare deser-elastic-gpu-set)

(clojure.core/declare deser-internet-gateway-list)

(clojure.core/declare deser-delete-fleet-error)

(clojure.core/declare deser-account-attribute)

(clojure.core/declare deser-history-record-set)

(clojure.core/declare deser-launch-template-instance-market-options)

(clojure.core/declare deser-ipv-6-range)

(clojure.core/declare deser-host)

(clojure.core/declare deser-egress-only-internet-gateway-id)

(clojure.core/declare deser-activity-status)

(clojure.core/declare deser-placement-group)

(clojure.core/declare deser-reserved-instance-reservation-value)

(clojure.core/declare deser-private-ip-address-specification)

(clojure.core/declare deser-reservation-list)

(clojure.core/declare deser-delete-fleet-error-set)

(clojure.core/declare deser-vpc-ipv-6-cidr-block-association-set)

(clojure.core/declare deser-volume-modification-state)

(clojure.core/declare deser-user-id-group-pair)

(clojure.core/declare deser-host-reservation)

(clojure.core/declare deser-telemetry-status)

(clojure.core/declare deser-delete-fleet-error-code)

(clojure.core/declare deser-vpn-gateway)

(clojure.core/declare deser-network-interface-association)

(clojure.core/declare deser-launch-template-placement)

(clojure.core/declare deser-date-time)

(clojure.core/declare deser-shutdown-behavior)

(clojure.core/declare deser-egress-only-internet-gateway)

(clojure.core/declare deser-boolean)

(clojure.core/declare deser-instance-network-interface-specification)

(clojure.core/declare deser-reservation-state)

(clojure.core/declare deser-available-instance-capacity-list)

(clojure.core/declare deser-snapshot-state)

(clojure.core/declare deser-vpn-gateway-list)

(clojure.core/defn- deser-export-task-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-export-task coll))) input))

(clojure.core/defn- deser-event-code [input] (clojure.core/get {"instance-reboot" :instancereboot, "system-reboot" :systemreboot, "system-maintenance" :systemmaintenance, "instance-retirement" :instanceretirement, "instance-stop" :instancestop} (clojure.core/first input)))

(clojure.core/defn- deser-flow-log [input] (clojure.core/let [letvar207208 {"logDestinationType" (portkey.aws/getback-xml-elem-with-tag "logDestinationType" input), "resourceId" (portkey.aws/getback-xml-elem-with-tag "resourceId" input), "deliverLogsPermissionArn" (portkey.aws/getback-xml-elem-with-tag "deliverLogsPermissionArn" input), "deliverLogsErrorMessage" (portkey.aws/getback-xml-elem-with-tag "deliverLogsErrorMessage" input), "logGroupName" (portkey.aws/getback-xml-elem-with-tag "logGroupName" input), "deliverLogsStatus" (portkey.aws/getback-xml-elem-with-tag "deliverLogsStatus" input), "creationTime" (portkey.aws/getback-xml-elem-with-tag "creationTime" input), "flowLogStatus" (portkey.aws/getback-xml-elem-with-tag "flowLogStatus" input), "logDestination" (portkey.aws/getback-xml-elem-with-tag "logDestination" input), "trafficType" (portkey.aws/getback-xml-elem-with-tag "trafficType" input), "flowLogId" (portkey.aws/getback-xml-elem-with-tag "flowLogId" input)}] (clojure.core/cond-> {} (letvar207208 "flowLogStatus") (clojure.core/assoc :flow-log-status (deser-string (clojure.core/get-in letvar207208 ["flowLogStatus" :content]))) (letvar207208 "trafficType") (clojure.core/assoc :traffic-type (deser-traffic-type (clojure.core/get-in letvar207208 ["trafficType" :content]))) (letvar207208 "resourceId") (clojure.core/assoc :resource-id (deser-string (clojure.core/get-in letvar207208 ["resourceId" :content]))) (letvar207208 "deliverLogsErrorMessage") (clojure.core/assoc :deliver-logs-error-message (deser-string (clojure.core/get-in letvar207208 ["deliverLogsErrorMessage" :content]))) (letvar207208 "deliverLogsStatus") (clojure.core/assoc :deliver-logs-status (deser-string (clojure.core/get-in letvar207208 ["deliverLogsStatus" :content]))) (letvar207208 "deliverLogsPermissionArn") (clojure.core/assoc :deliver-logs-permission-arn (deser-string (clojure.core/get-in letvar207208 ["deliverLogsPermissionArn" :content]))) (letvar207208 "logDestinationType") (clojure.core/assoc :log-destination-type (deser-log-destination-type (clojure.core/get-in letvar207208 ["logDestinationType" :content]))) (letvar207208 "flowLogId") (clojure.core/assoc :flow-log-id (deser-string (clojure.core/get-in letvar207208 ["flowLogId" :content]))) (letvar207208 "logGroupName") (clojure.core/assoc :log-group-name (deser-string (clojure.core/get-in letvar207208 ["logGroupName" :content]))) (letvar207208 "creationTime") (clojure.core/assoc :creation-time (deser-date-time (clojure.core/get-in letvar207208 ["creationTime" :content]))) (letvar207208 "logDestination") (clojure.core/assoc :log-destination (deser-string (clojure.core/get-in letvar207208 ["logDestination" :content]))))))

(clojure.core/defn- deser-vpc-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpc coll))) input))

(clojure.core/defn- deser-history-record-entry [input] (clojure.core/let [letvar207303 {"eventInformation" (portkey.aws/getback-xml-elem-with-tag "eventInformation" input), "eventType" (portkey.aws/getback-xml-elem-with-tag "eventType" input), "timestamp" (portkey.aws/getback-xml-elem-with-tag "timestamp" input)}] (clojure.core/cond-> {} (letvar207303 "eventInformation") (clojure.core/assoc :event-information (deser-event-information (clojure.core/get-in letvar207303 ["eventInformation" :content]))) (letvar207303 "eventType") (clojure.core/assoc :event-type (deser-fleet-event-type (clojure.core/get-in letvar207303 ["eventType" :content]))) (letvar207303 "timestamp") (clojure.core/assoc :timestamp (deser-date-time (clojure.core/get-in letvar207303 ["timestamp" :content]))))))

(clojure.core/defn- deser-spot-allocation-strategy [input] (clojure.core/get {"lowest-price" :lowestprice, "diversified" :diversified} (clojure.core/first input)))

(clojure.core/defn- deser-volume-status-action [input] (clojure.core/let [letvar207386 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input), "eventId" (portkey.aws/getback-xml-elem-with-tag "eventId" input), "eventType" (portkey.aws/getback-xml-elem-with-tag "eventType" input)}] (clojure.core/cond-> {} (letvar207386 "code") (clojure.core/assoc :code (deser-string (clojure.core/get-in letvar207386 ["code" :content]))) (letvar207386 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar207386 ["description" :content]))) (letvar207386 "eventId") (clojure.core/assoc :event-id (deser-string (clojure.core/get-in letvar207386 ["eventId" :content]))) (letvar207386 "eventType") (clojure.core/assoc :event-type (deser-string (clojure.core/get-in letvar207386 ["eventType" :content]))))))

(clojure.core/defn- deser-permission-group [input] (clojure.core/get {"all" :all} (clojure.core/first input)))

(clojure.core/defn- deser-address [input] (clojure.core/let [letvar207469 {"privateIpAddress" (portkey.aws/getback-xml-elem-with-tag "privateIpAddress" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "publicIp" (portkey.aws/getback-xml-elem-with-tag "publicIp" input), "associationId" (portkey.aws/getback-xml-elem-with-tag "associationId" input), "domain" (portkey.aws/getback-xml-elem-with-tag "domain" input), "networkInterfaceOwnerId" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceOwnerId" input), "networkInterfaceId" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceId" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "allocationId" (portkey.aws/getback-xml-elem-with-tag "allocationId" input)}] (clojure.core/cond-> {} (letvar207469 "publicIp") (clojure.core/assoc :public-ip (deser-string (clojure.core/get-in letvar207469 ["publicIp" :content]))) (letvar207469 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar207469 ["instanceId" :content]))) (letvar207469 "networkInterfaceOwnerId") (clojure.core/assoc :network-interface-owner-id (deser-string (clojure.core/get-in letvar207469 ["networkInterfaceOwnerId" :content]))) (letvar207469 "associationId") (clojure.core/assoc :association-id (deser-string (clojure.core/get-in letvar207469 ["associationId" :content]))) (letvar207469 "allocationId") (clojure.core/assoc :allocation-id (deser-string (clojure.core/get-in letvar207469 ["allocationId" :content]))) (letvar207469 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar207469 ["tagSet" :content]))) (letvar207469 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar207469 ["networkInterfaceId" :content]))) (letvar207469 "domain") (clojure.core/assoc :domain (deser-domain-type (clojure.core/get-in letvar207469 ["domain" :content]))) (letvar207469 "privateIpAddress") (clojure.core/assoc :private-ip-address (deser-string (clojure.core/get-in letvar207469 ["privateIpAddress" :content]))))))

(clojure.core/defn- deser-response-error [input] (clojure.core/let [letvar207547 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "message" (portkey.aws/getback-xml-elem-with-tag "message" input)}] (clojure.core/cond-> {} (letvar207547 "code") (clojure.core/assoc :code (deser-launch-template-error-code (clojure.core/get-in letvar207547 ["code" :content]))) (letvar207547 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar207547 ["message" :content]))))))

(clojure.core/defn- deser-bundle-task [input] (clojure.core/let [letvar207625 {"bundleId" (portkey.aws/getback-xml-elem-with-tag "bundleId" input), "error" (portkey.aws/getback-xml-elem-with-tag "error" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "progress" (portkey.aws/getback-xml-elem-with-tag "progress" input), "startTime" (portkey.aws/getback-xml-elem-with-tag "startTime" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "storage" (portkey.aws/getback-xml-elem-with-tag "storage" input), "updateTime" (portkey.aws/getback-xml-elem-with-tag "updateTime" input)}] (clojure.core/cond-> {} (letvar207625 "bundleId") (clojure.core/assoc :bundle-id (deser-string (clojure.core/get-in letvar207625 ["bundleId" :content]))) (letvar207625 "error") (clojure.core/assoc :bundle-task-error (deser-bundle-task-error (clojure.core/get-in letvar207625 ["error" :content]))) (letvar207625 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar207625 ["instanceId" :content]))) (letvar207625 "progress") (clojure.core/assoc :progress (deser-string (clojure.core/get-in letvar207625 ["progress" :content]))) (letvar207625 "startTime") (clojure.core/assoc :start-time (deser-date-time (clojure.core/get-in letvar207625 ["startTime" :content]))) (letvar207625 "state") (clojure.core/assoc :state (deser-bundle-task-state (clojure.core/get-in letvar207625 ["state" :content]))) (letvar207625 "storage") (clojure.core/assoc :storage (deser-storage (clojure.core/get-in letvar207625 ["storage" :content]))) (letvar207625 "updateTime") (clojure.core/assoc :update-time (deser-date-time (clojure.core/get-in letvar207625 ["updateTime" :content]))))))

(clojure.core/defn- deser-launch-template-config-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-launch-template-config coll))) input))

(clojure.core/defn- deser-security-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-security-group coll))) input))

(clojure.core/defn- deser-service-type-detail-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-service-type-detail coll))) input))

(clojure.core/defn- deser-principal-type [input] (clojure.core/get {"All" :all, "Service" :service, "OrganizationUnit" :organization-unit, "Account" :account, "User" :user, "Role" :role} (clojure.core/first input)))

(clojure.core/defn- deser-instance-count-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-count coll))) input))

(clojure.core/defn- deser-describe-conversion-task-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-conversion-task coll))) input))

(clojure.core/defn- deser-route [input] (clojure.core/let [letvar207793 {"origin" (portkey.aws/getback-xml-elem-with-tag "origin" input), "instanceOwnerId" (portkey.aws/getback-xml-elem-with-tag "instanceOwnerId" input), "egressOnlyInternetGatewayId" (portkey.aws/getback-xml-elem-with-tag "egressOnlyInternetGatewayId" input), "destinationIpv6CidrBlock" (portkey.aws/getback-xml-elem-with-tag "destinationIpv6CidrBlock" input), "natGatewayId" (portkey.aws/getback-xml-elem-with-tag "natGatewayId" input), "destinationCidrBlock" (portkey.aws/getback-xml-elem-with-tag "destinationCidrBlock" input), "gatewayId" (portkey.aws/getback-xml-elem-with-tag "gatewayId" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "vpcPeeringConnectionId" (portkey.aws/getback-xml-elem-with-tag "vpcPeeringConnectionId" input), "destinationPrefixListId" (portkey.aws/getback-xml-elem-with-tag "destinationPrefixListId" input), "networkInterfaceId" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceId" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input)}] (clojure.core/cond-> {} (letvar207793 "instanceOwnerId") (clojure.core/assoc :instance-owner-id (deser-string (clojure.core/get-in letvar207793 ["instanceOwnerId" :content]))) (letvar207793 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar207793 ["instanceId" :content]))) (letvar207793 "natGatewayId") (clojure.core/assoc :nat-gateway-id (deser-string (clojure.core/get-in letvar207793 ["natGatewayId" :content]))) (letvar207793 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar207793 ["networkInterfaceId" :content]))) (letvar207793 "destinationIpv6CidrBlock") (clojure.core/assoc :destination-ipv-6-cidr-block (deser-string (clojure.core/get-in letvar207793 ["destinationIpv6CidrBlock" :content]))) (letvar207793 "origin") (clojure.core/assoc :origin (deser-route-origin (clojure.core/get-in letvar207793 ["origin" :content]))) (letvar207793 "destinationCidrBlock") (clojure.core/assoc :destination-cidr-block (deser-string (clojure.core/get-in letvar207793 ["destinationCidrBlock" :content]))) (letvar207793 "destinationPrefixListId") (clojure.core/assoc :destination-prefix-list-id (deser-string (clojure.core/get-in letvar207793 ["destinationPrefixListId" :content]))) (letvar207793 "vpcPeeringConnectionId") (clojure.core/assoc :vpc-peering-connection-id (deser-string (clojure.core/get-in letvar207793 ["vpcPeeringConnectionId" :content]))) (letvar207793 "state") (clojure.core/assoc :state (deser-route-state (clojure.core/get-in letvar207793 ["state" :content]))) (letvar207793 "gatewayId") (clojure.core/assoc :gateway-id (deser-string (clojure.core/get-in letvar207793 ["gatewayId" :content]))) (letvar207793 "egressOnlyInternetGatewayId") (clojure.core/assoc :egress-only-internet-gateway-id (deser-string (clojure.core/get-in letvar207793 ["egressOnlyInternetGatewayId" :content]))))))

(clojure.core/defn- deser-dns-entry [input] (clojure.core/let [letvar207871 {"dnsName" (portkey.aws/getback-xml-elem-with-tag "dnsName" input), "hostedZoneId" (portkey.aws/getback-xml-elem-with-tag "hostedZoneId" input)}] (clojure.core/cond-> {} (letvar207871 "dnsName") (clojure.core/assoc :dns-name (deser-string (clojure.core/get-in letvar207871 ["dnsName" :content]))) (letvar207871 "hostedZoneId") (clojure.core/assoc :hosted-zone-id (deser-string (clojure.core/get-in letvar207871 ["hostedZoneId" :content]))))))

(clojure.core/defn- deser-nat-gateway-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-nat-gateway coll))) input))

(clojure.core/defn- deser-moving-address-status-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-moving-address-status coll))) input))

(clojure.core/defn- deser-instance-state-change-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-state-change coll))) input))

(clojure.core/defn- deser-iam-instance-profile-association-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-iam-instance-profile-association coll))) input))

(clojure.core/defn- deser-double [input] (java.lang.Double. (clojure.core/first input)))

(clojure.core/defn- deser-service-type [input] (clojure.core/get {"Interface" :interface, "Gateway" :gateway} (clojure.core/first input)))

(clojure.core/defn- deser-ebs-instance-block-device [input] (clojure.core/let [letvar208024 {"attachTime" (portkey.aws/getback-xml-elem-with-tag "attachTime" input), "deleteOnTermination" (portkey.aws/getback-xml-elem-with-tag "deleteOnTermination" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "volumeId" (portkey.aws/getback-xml-elem-with-tag "volumeId" input)}] (clojure.core/cond-> {} (letvar208024 "attachTime") (clojure.core/assoc :attach-time (deser-date-time (clojure.core/get-in letvar208024 ["attachTime" :content]))) (letvar208024 "deleteOnTermination") (clojure.core/assoc :delete-on-termination (deser-boolean (clojure.core/get-in letvar208024 ["deleteOnTermination" :content]))) (letvar208024 "status") (clojure.core/assoc :status (deser-attachment-status (clojure.core/get-in letvar208024 ["status" :content]))) (letvar208024 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar208024 ["volumeId" :content]))))))

(clojure.core/defn- deser-route-table [input] (clojure.core/let [letvar208102 {"associationSet" (portkey.aws/getback-xml-elem-with-tag "associationSet" input), "propagatingVgwSet" (portkey.aws/getback-xml-elem-with-tag "propagatingVgwSet" input), "routeTableId" (portkey.aws/getback-xml-elem-with-tag "routeTableId" input), "routeSet" (portkey.aws/getback-xml-elem-with-tag "routeSet" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input)}] (clojure.core/cond-> {} (letvar208102 "associationSet") (clojure.core/assoc :associations (deser-route-table-association-list (clojure.core/get-in letvar208102 ["associationSet" :content]))) (letvar208102 "propagatingVgwSet") (clojure.core/assoc :propagating-vgws (deser-propagating-vgw-list (clojure.core/get-in letvar208102 ["propagatingVgwSet" :content]))) (letvar208102 "routeTableId") (clojure.core/assoc :route-table-id (deser-string (clojure.core/get-in letvar208102 ["routeTableId" :content]))) (letvar208102 "routeSet") (clojure.core/assoc :routes (deser-route-list (clojure.core/get-in letvar208102 ["routeSet" :content]))) (letvar208102 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar208102 ["tagSet" :content]))) (letvar208102 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar208102 ["vpcId" :content]))))))

(clojure.core/defn- deser-scheduled-instance-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-scheduled-instance coll))) input))

(clojure.core/defn- deser-launch-template-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-launch-template coll))) input))

(clojure.core/defn- deser-target-groups-config [input] (clojure.core/let [letvar208214 {"targetGroups" (portkey.aws/getback-xml-elem-with-tag "targetGroups" input)}] (clojure.core/cond-> {:target-groups (deser-target-groups (clojure.core/get-in letvar208214 ["targetGroups" :content]))})))

(clojure.core/defn- deser-propagating-vgw [input] (clojure.core/let [letvar208292 {"gatewayId" (portkey.aws/getback-xml-elem-with-tag "gatewayId" input)}] (clojure.core/cond-> {} (letvar208292 "gatewayId") (clojure.core/assoc :gateway-id (deser-string (clojure.core/get-in letvar208292 ["gatewayId" :content]))))))

(clojure.core/defn- deser-flow-log-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-flow-log coll))) input))

(clojure.core/defn- deser-prefix-list-id-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-instance-network-interface-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-network-interface coll))) input))

(clojure.core/defn- deser-vpn-connection-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpn-connection coll))) input))

(clojure.core/defn- deser-on-demand-allocation-strategy [input] (clojure.core/get {"lowestPrice" :lowest-price, "prioritized" :prioritized} (clojure.core/first input)))

(clojure.core/defn- deser-reserved-instances-offering [input] (clojure.core/let [letvar208443 {"marketplace" (portkey.aws/getback-xml-elem-with-tag "marketplace" input), "reservedInstancesOfferingId" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesOfferingId" input), "instanceTenancy" (portkey.aws/getback-xml-elem-with-tag "instanceTenancy" input), "offeringType" (portkey.aws/getback-xml-elem-with-tag "offeringType" input), "fixedPrice" (portkey.aws/getback-xml-elem-with-tag "fixedPrice" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "scope" (portkey.aws/getback-xml-elem-with-tag "scope" input), "currencyCode" (portkey.aws/getback-xml-elem-with-tag "currencyCode" input), "recurringCharges" (portkey.aws/getback-xml-elem-with-tag "recurringCharges" input), "pricingDetailsSet" (portkey.aws/getback-xml-elem-with-tag "pricingDetailsSet" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "duration" (portkey.aws/getback-xml-elem-with-tag "duration" input), "productDescription" (portkey.aws/getback-xml-elem-with-tag "productDescription" input), "offeringClass" (portkey.aws/getback-xml-elem-with-tag "offeringClass" input), "usagePrice" (portkey.aws/getback-xml-elem-with-tag "usagePrice" input)}] (clojure.core/cond-> {} (letvar208443 "currencyCode") (clojure.core/assoc :currency-code (deser-currency-code-values (clojure.core/get-in letvar208443 ["currencyCode" :content]))) (letvar208443 "reservedInstancesOfferingId") (clojure.core/assoc :reserved-instances-offering-id (deser-string (clojure.core/get-in letvar208443 ["reservedInstancesOfferingId" :content]))) (letvar208443 "instanceType") (clojure.core/assoc :instance-type (deser-instance-type (clojure.core/get-in letvar208443 ["instanceType" :content]))) (letvar208443 "fixedPrice") (clojure.core/assoc :fixed-price (deser-float (clojure.core/get-in letvar208443 ["fixedPrice" :content]))) (letvar208443 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar208443 ["availabilityZone" :content]))) (letvar208443 "pricingDetailsSet") (clojure.core/assoc :pricing-details (deser-pricing-details-list (clojure.core/get-in letvar208443 ["pricingDetailsSet" :content]))) (letvar208443 "instanceTenancy") (clojure.core/assoc :instance-tenancy (deser-tenancy (clojure.core/get-in letvar208443 ["instanceTenancy" :content]))) (letvar208443 "marketplace") (clojure.core/assoc :marketplace (deser-boolean (clojure.core/get-in letvar208443 ["marketplace" :content]))) (letvar208443 "duration") (clojure.core/assoc :duration (deser-long (clojure.core/get-in letvar208443 ["duration" :content]))) (letvar208443 "usagePrice") (clojure.core/assoc :usage-price (deser-float (clojure.core/get-in letvar208443 ["usagePrice" :content]))) (letvar208443 "productDescription") (clojure.core/assoc :product-description (deser-ri-product-description (clojure.core/get-in letvar208443 ["productDescription" :content]))) (letvar208443 "offeringClass") (clojure.core/assoc :offering-class (deser-offering-class-type (clojure.core/get-in letvar208443 ["offeringClass" :content]))) (letvar208443 "recurringCharges") (clojure.core/assoc :recurring-charges (deser-recurring-charges-list (clojure.core/get-in letvar208443 ["recurringCharges" :content]))) (letvar208443 "offeringType") (clojure.core/assoc :offering-type (deser-offering-type-values (clojure.core/get-in letvar208443 ["offeringType" :content]))) (letvar208443 "scope") (clojure.core/assoc :scope (deserscope (clojure.core/get-in letvar208443 ["scope" :content]))))))

(clojure.core/defn- deser-vpc-endpoint-type [input] (clojure.core/get {"Interface" :interface, "Gateway" :gateway} (clojure.core/first input)))

(clojure.core/defn- deser-storage [input] (clojure.core/let [letvar208526 {nil (portkey.aws/getback-xml-elem-with-tag nil input)}] (clojure.core/cond-> {} (letvar208526 nil) (clojure.core/assoc :s-3 (deser-s-3-storage (clojure.core/get-in letvar208526 [nil :content]))))))

(clojure.core/defn- deser-value-string-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-volume-modification [input] (clojure.core/let [letvar208621 {"progress" (portkey.aws/getback-xml-elem-with-tag "progress" input), "targetVolumeType" (portkey.aws/getback-xml-elem-with-tag "targetVolumeType" input), "targetIops" (portkey.aws/getback-xml-elem-with-tag "targetIops" input), "originalVolumeType" (portkey.aws/getback-xml-elem-with-tag "originalVolumeType" input), "originalSize" (portkey.aws/getback-xml-elem-with-tag "originalSize" input), "startTime" (portkey.aws/getback-xml-elem-with-tag "startTime" input), "originalIops" (portkey.aws/getback-xml-elem-with-tag "originalIops" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input), "volumeId" (portkey.aws/getback-xml-elem-with-tag "volumeId" input), "modificationState" (portkey.aws/getback-xml-elem-with-tag "modificationState" input), "endTime" (portkey.aws/getback-xml-elem-with-tag "endTime" input), "targetSize" (portkey.aws/getback-xml-elem-with-tag "targetSize" input)}] (clojure.core/cond-> {} (letvar208621 "endTime") (clojure.core/assoc :end-time (deser-date-time (clojure.core/get-in letvar208621 ["endTime" :content]))) (letvar208621 "targetVolumeType") (clojure.core/assoc :target-volume-type (deser-volume-type (clojure.core/get-in letvar208621 ["targetVolumeType" :content]))) (letvar208621 "originalVolumeType") (clojure.core/assoc :original-volume-type (deser-volume-type (clojure.core/get-in letvar208621 ["originalVolumeType" :content]))) (letvar208621 "startTime") (clojure.core/assoc :start-time (deser-date-time (clojure.core/get-in letvar208621 ["startTime" :content]))) (letvar208621 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar208621 ["statusMessage" :content]))) (letvar208621 "originalIops") (clojure.core/assoc :original-iops (deser-integer (clojure.core/get-in letvar208621 ["originalIops" :content]))) (letvar208621 "progress") (clojure.core/assoc :progress (deser-long (clojure.core/get-in letvar208621 ["progress" :content]))) (letvar208621 "originalSize") (clojure.core/assoc :original-size (deser-integer (clojure.core/get-in letvar208621 ["originalSize" :content]))) (letvar208621 "modificationState") (clojure.core/assoc :modification-state (deser-volume-modification-state (clojure.core/get-in letvar208621 ["modificationState" :content]))) (letvar208621 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar208621 ["volumeId" :content]))) (letvar208621 "targetIops") (clojure.core/assoc :target-iops (deser-integer (clojure.core/get-in letvar208621 ["targetIops" :content]))) (letvar208621 "targetSize") (clojure.core/assoc :target-size (deser-integer (clojure.core/get-in letvar208621 ["targetSize" :content]))))))

(clojure.core/defn- deser-ip-ranges [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-instance-status-event-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-status-event coll))) input))

(clojure.core/defn- deser-connection-notification-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-connection-notification coll))) input))

(clojure.core/defn- deser-group-identifier-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-security-group-identifier coll))) input))

(clojure.core/defn- deser-reserved-instances-modification-result-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-instances-modification-result coll))) input))

(clojure.core/defn- deser-vpc-peering-connection-vpc-info [input] (clojure.core/let [letvar208784 {"cidrBlock" (portkey.aws/getback-xml-elem-with-tag "cidrBlock" input), "ipv6CidrBlockSet" (portkey.aws/getback-xml-elem-with-tag "ipv6CidrBlockSet" input), "cidrBlockSet" (portkey.aws/getback-xml-elem-with-tag "cidrBlockSet" input), "ownerId" (portkey.aws/getback-xml-elem-with-tag "ownerId" input), "peeringOptions" (portkey.aws/getback-xml-elem-with-tag "peeringOptions" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "region" (portkey.aws/getback-xml-elem-with-tag "region" input)}] (clojure.core/cond-> {} (letvar208784 "cidrBlock") (clojure.core/assoc :cidr-block (deser-string (clojure.core/get-in letvar208784 ["cidrBlock" :content]))) (letvar208784 "ipv6CidrBlockSet") (clojure.core/assoc :ipv-6-cidr-block-set (deser-ipv-6-cidr-block-set (clojure.core/get-in letvar208784 ["ipv6CidrBlockSet" :content]))) (letvar208784 "cidrBlockSet") (clojure.core/assoc :cidr-block-set (deser-cidr-block-set (clojure.core/get-in letvar208784 ["cidrBlockSet" :content]))) (letvar208784 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar208784 ["ownerId" :content]))) (letvar208784 "peeringOptions") (clojure.core/assoc :peering-options (deser-vpc-peering-connection-options-description (clojure.core/get-in letvar208784 ["peeringOptions" :content]))) (letvar208784 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar208784 ["vpcId" :content]))) (letvar208784 "region") (clojure.core/assoc :region (deser-string (clojure.core/get-in letvar208784 ["region" :content]))))))

(clojure.core/defn- deser-instance-monitoring-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-monitoring coll))) input))

(clojure.core/defn- deser-vpc-peering-connection [input] (clojure.core/let [letvar208879 {"accepterVpcInfo" (portkey.aws/getback-xml-elem-with-tag "accepterVpcInfo" input), "expirationTime" (portkey.aws/getback-xml-elem-with-tag "expirationTime" input), "requesterVpcInfo" (portkey.aws/getback-xml-elem-with-tag "requesterVpcInfo" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "vpcPeeringConnectionId" (portkey.aws/getback-xml-elem-with-tag "vpcPeeringConnectionId" input)}] (clojure.core/cond-> {} (letvar208879 "accepterVpcInfo") (clojure.core/assoc :accepter-vpc-info (deser-vpc-peering-connection-vpc-info (clojure.core/get-in letvar208879 ["accepterVpcInfo" :content]))) (letvar208879 "expirationTime") (clojure.core/assoc :expiration-time (deser-date-time (clojure.core/get-in letvar208879 ["expirationTime" :content]))) (letvar208879 "requesterVpcInfo") (clojure.core/assoc :requester-vpc-info (deser-vpc-peering-connection-vpc-info (clojure.core/get-in letvar208879 ["requesterVpcInfo" :content]))) (letvar208879 "status") (clojure.core/assoc :status (deser-vpc-peering-connection-state-reason (clojure.core/get-in letvar208879 ["status" :content]))) (letvar208879 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar208879 ["tagSet" :content]))) (letvar208879 "vpcPeeringConnectionId") (clojure.core/assoc :vpc-peering-connection-id (deser-string (clojure.core/get-in letvar208879 ["vpcPeeringConnectionId" :content]))))))

(clojure.core/defn- deser-target-groups [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-target-group coll))) input))

(clojure.core/defn- deser-target-reservation-value-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-target-reservation-value coll))) input))

(clojure.core/defn- deser-image-state [input] (clojure.core/get {"pending" :pending, "available" :available, "invalid" :invalid, "deregistered" :deregistered, "transient" :transient, "failed" :failed, "error" :error} (clojure.core/first input)))

(clojure.core/defn- deser-network-interface-ipv-6-address [input] (clojure.core/let [letvar208996 {"ipv6Address" (portkey.aws/getback-xml-elem-with-tag "ipv6Address" input)}] (clojure.core/cond-> {} (letvar208996 "ipv6Address") (clojure.core/assoc :ipv-6-address (deser-string (clojure.core/get-in letvar208996 ["ipv6Address" :content]))))))

(clojure.core/defn- deser-vpn-state [input] (clojure.core/get {"pending" :pending, "available" :available, "deleting" :deleting, "deleted" :deleted} (clojure.core/first input)))

(clojure.core/defn- deser-account-attribute-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-account-attribute coll))) input))

(clojure.core/defn- deser-ipv-6-range-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-ipv-6-range coll))) input))

(clojure.core/defn- deser-move-status [input] (clojure.core/get {"movingToVpc" :moving-to-vpc, "restoringToClassic" :restoring-to-classic} (clojure.core/first input)))

(clojure.core/defn- deser-credit-specification [input] (clojure.core/let [letvar209118 {"cpuCredits" (portkey.aws/getback-xml-elem-with-tag "cpuCredits" input)}] (clojure.core/cond-> {} (letvar209118 "cpuCredits") (clojure.core/assoc :cpu-credits (deser-string (clojure.core/get-in letvar209118 ["cpuCredits" :content]))))))

(clojure.core/defn- deser-prefix-list-id [input] (clojure.core/let [letvar209196 {"description" (portkey.aws/getback-xml-elem-with-tag "description" input), "prefixListId" (portkey.aws/getback-xml-elem-with-tag "prefixListId" input)}] (clojure.core/cond-> {} (letvar209196 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar209196 ["description" :content]))) (letvar209196 "prefixListId") (clojure.core/assoc :prefix-list-id (deser-string (clojure.core/get-in letvar209196 ["prefixListId" :content]))))))

(clojure.core/defn- deser-pricing-details-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-pricing-detail coll))) input))

(clojure.core/defn- deser-purchase [input] (clojure.core/let [letvar209291 {"currencyCode" (portkey.aws/getback-xml-elem-with-tag "currencyCode" input), "duration" (portkey.aws/getback-xml-elem-with-tag "duration" input), "hostIdSet" (portkey.aws/getback-xml-elem-with-tag "hostIdSet" input), "hostReservationId" (portkey.aws/getback-xml-elem-with-tag "hostReservationId" input), "hourlyPrice" (portkey.aws/getback-xml-elem-with-tag "hourlyPrice" input), "instanceFamily" (portkey.aws/getback-xml-elem-with-tag "instanceFamily" input), "paymentOption" (portkey.aws/getback-xml-elem-with-tag "paymentOption" input), "upfrontPrice" (portkey.aws/getback-xml-elem-with-tag "upfrontPrice" input)}] (clojure.core/cond-> {} (letvar209291 "currencyCode") (clojure.core/assoc :currency-code (deser-currency-code-values (clojure.core/get-in letvar209291 ["currencyCode" :content]))) (letvar209291 "duration") (clojure.core/assoc :duration (deser-integer (clojure.core/get-in letvar209291 ["duration" :content]))) (letvar209291 "hostIdSet") (clojure.core/assoc :host-id-set (deser-response-host-id-set (clojure.core/get-in letvar209291 ["hostIdSet" :content]))) (letvar209291 "hostReservationId") (clojure.core/assoc :host-reservation-id (deser-string (clojure.core/get-in letvar209291 ["hostReservationId" :content]))) (letvar209291 "hourlyPrice") (clojure.core/assoc :hourly-price (deser-string (clojure.core/get-in letvar209291 ["hourlyPrice" :content]))) (letvar209291 "instanceFamily") (clojure.core/assoc :instance-family (deser-string (clojure.core/get-in letvar209291 ["instanceFamily" :content]))) (letvar209291 "paymentOption") (clojure.core/assoc :payment-option (deser-payment-option (clojure.core/get-in letvar209291 ["paymentOption" :content]))) (letvar209291 "upfrontPrice") (clojure.core/assoc :upfront-price (deser-string (clojure.core/get-in letvar209291 ["upfrontPrice" :content]))))))

(clojure.core/defn- deser-hypervisor-type [input] (clojure.core/get {"ovm" :ovm, "xen" :xen} (clojure.core/first input)))

(clojure.core/defn- deser-history-record [input] (clojure.core/let [letvar209374 {"eventInformation" (portkey.aws/getback-xml-elem-with-tag "eventInformation" input), "eventType" (portkey.aws/getback-xml-elem-with-tag "eventType" input), "timestamp" (portkey.aws/getback-xml-elem-with-tag "timestamp" input)}] (clojure.core/cond-> {:event-information (deser-event-information (clojure.core/get-in letvar209374 ["eventInformation" :content])), :event-type (deser-event-type (clojure.core/get-in letvar209374 ["eventType" :content])), :timestamp (deser-date-time (clojure.core/get-in letvar209374 ["timestamp" :content]))})))

(clojure.core/defn- deser-connection-notification-type [input] (clojure.core/get {"Topic" :topic} (clojure.core/first input)))

(clojure.core/defn- deser-route-table-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-route-table coll))) input))

(clojure.core/defn- deser-architecture-values [input] (clojure.core/get {"i386" :i-386, "x86_64" :x-86-64} (clojure.core/first input)))

(clojure.core/defn- deser-cancelled-spot-instance-request [input] (clojure.core/let [letvar209479 {"spotInstanceRequestId" (portkey.aws/getback-xml-elem-with-tag "spotInstanceRequestId" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input)}] (clojure.core/cond-> {} (letvar209479 "spotInstanceRequestId") (clojure.core/assoc :spot-instance-request-id (deser-string (clojure.core/get-in letvar209479 ["spotInstanceRequestId" :content]))) (letvar209479 "state") (clojure.core/assoc :state (deser-cancel-spot-instance-request-state (clojure.core/get-in letvar209479 ["state" :content]))))))

(clojure.core/defn- deser-volume-attachment-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-volume-attachment coll))) input))

(clojure.core/defn- deser-export-environment [input] (clojure.core/get {"citrix" :citrix, "vmware" :vmware, "microsoft" :microsoft} (clojure.core/first input)))

(clojure.core/defn- deser-load-permission-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-load-permission coll))) input))

(clojure.core/defn- deser-instance-export-details [input] (clojure.core/let [letvar209596 {"instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "targetEnvironment" (portkey.aws/getback-xml-elem-with-tag "targetEnvironment" input)}] (clojure.core/cond-> {} (letvar209596 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar209596 ["instanceId" :content]))) (letvar209596 "targetEnvironment") (clojure.core/assoc :target-environment (deser-export-environment (clojure.core/get-in letvar209596 ["targetEnvironment" :content]))))))

(clojure.core/defn- deser-service-type-detail [input] (clojure.core/let [letvar209674 {"serviceType" (portkey.aws/getback-xml-elem-with-tag "serviceType" input)}] (clojure.core/cond-> {} (letvar209674 "serviceType") (clojure.core/assoc :service-type (deser-service-type (clojure.core/get-in letvar209674 ["serviceType" :content]))))))

(clojure.core/defn- deser-volume-attachment-state [input] (clojure.core/get {"attaching" :attaching, "attached" :attached, "detaching" :detaching, "detached" :detached, "busy" :busy} (clojure.core/first input)))

(clojure.core/defn- deser-volume-modification-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-volume-modification coll))) input))

(clojure.core/defn- deser-internet-gateway-attachment [input] (clojure.core/let [letvar209774 {"state" (portkey.aws/getback-xml-elem-with-tag "state" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input)}] (clojure.core/cond-> {} (letvar209774 "state") (clojure.core/assoc :state (deser-attachment-status (clojure.core/get-in letvar209774 ["state" :content]))) (letvar209774 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar209774 ["vpcId" :content]))))))

(clojure.core/defn- deser-launch-template-ebs-block-device [input] (clojure.core/let [letvar209852 {"encrypted" (portkey.aws/getback-xml-elem-with-tag "encrypted" input), "deleteOnTermination" (portkey.aws/getback-xml-elem-with-tag "deleteOnTermination" input), "iops" (portkey.aws/getback-xml-elem-with-tag "iops" input), "kmsKeyId" (portkey.aws/getback-xml-elem-with-tag "kmsKeyId" input), "snapshotId" (portkey.aws/getback-xml-elem-with-tag "snapshotId" input), "volumeSize" (portkey.aws/getback-xml-elem-with-tag "volumeSize" input), "volumeType" (portkey.aws/getback-xml-elem-with-tag "volumeType" input)}] (clojure.core/cond-> {} (letvar209852 "encrypted") (clojure.core/assoc :encrypted (deser-boolean (clojure.core/get-in letvar209852 ["encrypted" :content]))) (letvar209852 "deleteOnTermination") (clojure.core/assoc :delete-on-termination (deser-boolean (clojure.core/get-in letvar209852 ["deleteOnTermination" :content]))) (letvar209852 "iops") (clojure.core/assoc :iops (deser-integer (clojure.core/get-in letvar209852 ["iops" :content]))) (letvar209852 "kmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar209852 ["kmsKeyId" :content]))) (letvar209852 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar209852 ["snapshotId" :content]))) (letvar209852 "volumeSize") (clojure.core/assoc :volume-size (deser-integer (clojure.core/get-in letvar209852 ["volumeSize" :content]))) (letvar209852 "volumeType") (clojure.core/assoc :volume-type (deser-volume-type (clojure.core/get-in letvar209852 ["volumeType" :content]))))))

(clojure.core/defn- deser-fleet-identifier [input] (clojure.core/first input))

(clojure.core/defn- deser-instance-monitoring [input] (clojure.core/let [letvar209935 {"instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "monitoring" (portkey.aws/getback-xml-elem-with-tag "monitoring" input)}] (clojure.core/cond-> {} (letvar209935 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar209935 ["instanceId" :content]))) (letvar209935 "monitoring") (clojure.core/assoc :monitoring (deser-monitoring (clojure.core/get-in letvar209935 ["monitoring" :content]))))))

(clojure.core/defn- deser-spot-price-history-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-spot-price coll))) input))

(clojure.core/defn- deser-vpn-connection-options [input] (clojure.core/let [letvar210030 {"staticRoutesOnly" (portkey.aws/getback-xml-elem-with-tag "staticRoutesOnly" input)}] (clojure.core/cond-> {} (letvar210030 "staticRoutesOnly") (clojure.core/assoc :static-routes-only (deser-boolean (clojure.core/get-in letvar210030 ["staticRoutesOnly" :content]))))))

(clojure.core/defn- deser-network-acl-entry [input] (clojure.core/let [letvar210108 {"cidrBlock" (portkey.aws/getback-xml-elem-with-tag "cidrBlock" input), "egress" (portkey.aws/getback-xml-elem-with-tag "egress" input), "icmpTypeCode" (portkey.aws/getback-xml-elem-with-tag "icmpTypeCode" input), "ipv6CidrBlock" (portkey.aws/getback-xml-elem-with-tag "ipv6CidrBlock" input), "portRange" (portkey.aws/getback-xml-elem-with-tag "portRange" input), "protocol" (portkey.aws/getback-xml-elem-with-tag "protocol" input), "ruleAction" (portkey.aws/getback-xml-elem-with-tag "ruleAction" input), "ruleNumber" (portkey.aws/getback-xml-elem-with-tag "ruleNumber" input)}] (clojure.core/cond-> {} (letvar210108 "cidrBlock") (clojure.core/assoc :cidr-block (deser-string (clojure.core/get-in letvar210108 ["cidrBlock" :content]))) (letvar210108 "egress") (clojure.core/assoc :egress (deser-boolean (clojure.core/get-in letvar210108 ["egress" :content]))) (letvar210108 "icmpTypeCode") (clojure.core/assoc :icmp-type-code (deser-icmp-type-code (clojure.core/get-in letvar210108 ["icmpTypeCode" :content]))) (letvar210108 "ipv6CidrBlock") (clojure.core/assoc :ipv-6-cidr-block (deser-string (clojure.core/get-in letvar210108 ["ipv6CidrBlock" :content]))) (letvar210108 "portRange") (clojure.core/assoc :port-range (deser-port-range (clojure.core/get-in letvar210108 ["portRange" :content]))) (letvar210108 "protocol") (clojure.core/assoc :protocol (deser-string (clojure.core/get-in letvar210108 ["protocol" :content]))) (letvar210108 "ruleAction") (clojure.core/assoc :rule-action (deser-rule-action (clojure.core/get-in letvar210108 ["ruleAction" :content]))) (letvar210108 "ruleNumber") (clojure.core/assoc :rule-number (deser-integer (clojure.core/get-in letvar210108 ["ruleNumber" :content]))))))

(clojure.core/defn- deser-provisioned-bandwidth [input] (clojure.core/let [letvar210186 {"provisionTime" (portkey.aws/getback-xml-elem-with-tag "provisionTime" input), "provisioned" (portkey.aws/getback-xml-elem-with-tag "provisioned" input), "requestTime" (portkey.aws/getback-xml-elem-with-tag "requestTime" input), "requested" (portkey.aws/getback-xml-elem-with-tag "requested" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input)}] (clojure.core/cond-> {} (letvar210186 "provisionTime") (clojure.core/assoc :provision-time (deser-date-time (clojure.core/get-in letvar210186 ["provisionTime" :content]))) (letvar210186 "provisioned") (clojure.core/assoc :provisioned (deser-string (clojure.core/get-in letvar210186 ["provisioned" :content]))) (letvar210186 "requestTime") (clojure.core/assoc :request-time (deser-date-time (clojure.core/get-in letvar210186 ["requestTime" :content]))) (letvar210186 "requested") (clojure.core/assoc :requested (deser-string (clojure.core/get-in letvar210186 ["requested" :content]))) (letvar210186 "status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar210186 ["status" :content]))))))

(clojure.core/defn- deser-pci-id [input] (clojure.core/let [letvar210264 {nil (portkey.aws/getback-xml-elem-with-tag nil input)}] (clojure.core/cond-> {} (letvar210264 nil) (clojure.core/assoc :device-id (deser-string (clojure.core/get-in letvar210264 [nil :content]))) (letvar210264 nil) (clojure.core/assoc :vendor-id (deser-string (clojure.core/get-in letvar210264 [nil :content]))) (letvar210264 nil) (clojure.core/assoc :subsystem-id (deser-string (clojure.core/get-in letvar210264 [nil :content]))) (letvar210264 nil) (clojure.core/assoc :subsystem-vendor-id (deser-string (clojure.core/get-in letvar210264 [nil :content]))))))

(clojure.core/defn- deser-vgw-telemetry-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vgw-telemetry coll))) input))

(clojure.core/defn- deser-volume-state [input] (clojure.core/get {"creating" :creating, "available" :available, "in-use" :inuse, "deleting" :deleting, "deleted" :deleted, "error" :error} (clojure.core/first input)))

(clojure.core/defn- deser-spot-placement [input] (clojure.core/let [letvar210364 {"availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "groupName" (portkey.aws/getback-xml-elem-with-tag "groupName" input), "tenancy" (portkey.aws/getback-xml-elem-with-tag "tenancy" input)}] (clojure.core/cond-> {} (letvar210364 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar210364 ["availabilityZone" :content]))) (letvar210364 "groupName") (clojure.core/assoc :group-name (deser-string (clojure.core/get-in letvar210364 ["groupName" :content]))) (letvar210364 "tenancy") (clojure.core/assoc :tenancy (deser-tenancy (clojure.core/get-in letvar210364 ["tenancy" :content]))))))

(clojure.core/defn- deser-security-group [input] (clojure.core/let [letvar210442 {"groupDescription" (portkey.aws/getback-xml-elem-with-tag "groupDescription" input), "groupName" (portkey.aws/getback-xml-elem-with-tag "groupName" input), "ipPermissions" (portkey.aws/getback-xml-elem-with-tag "ipPermissions" input), "ownerId" (portkey.aws/getback-xml-elem-with-tag "ownerId" input), "groupId" (portkey.aws/getback-xml-elem-with-tag "groupId" input), "ipPermissionsEgress" (portkey.aws/getback-xml-elem-with-tag "ipPermissionsEgress" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input)}] (clojure.core/cond-> {} (letvar210442 "groupDescription") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar210442 ["groupDescription" :content]))) (letvar210442 "groupName") (clojure.core/assoc :group-name (deser-string (clojure.core/get-in letvar210442 ["groupName" :content]))) (letvar210442 "ipPermissions") (clojure.core/assoc :ip-permissions (deser-ip-permission-list (clojure.core/get-in letvar210442 ["ipPermissions" :content]))) (letvar210442 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar210442 ["ownerId" :content]))) (letvar210442 "groupId") (clojure.core/assoc :group-id (deser-string (clojure.core/get-in letvar210442 ["groupId" :content]))) (letvar210442 "ipPermissionsEgress") (clojure.core/assoc :ip-permissions-egress (deser-ip-permission-list (clojure.core/get-in letvar210442 ["ipPermissionsEgress" :content]))) (letvar210442 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar210442 ["tagSet" :content]))) (letvar210442 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar210442 ["vpcId" :content]))))))

(clojure.core/defn- deser-recurring-charges-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-recurring-charge coll))) input))

(clojure.core/defn- deser-snapshot-detail-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-snapshot-detail coll))) input))

(clojure.core/defn- deser-id-format [input] (clojure.core/let [letvar210554 {"deadline" (portkey.aws/getback-xml-elem-with-tag "deadline" input), "resource" (portkey.aws/getback-xml-elem-with-tag "resource" input), "useLongIds" (portkey.aws/getback-xml-elem-with-tag "useLongIds" input)}] (clojure.core/cond-> {} (letvar210554 "deadline") (clojure.core/assoc :deadline (deser-date-time (clojure.core/get-in letvar210554 ["deadline" :content]))) (letvar210554 "resource") (clojure.core/assoc :resource (deser-string (clojure.core/get-in letvar210554 ["resource" :content]))) (letvar210554 "useLongIds") (clojure.core/assoc :use-long-ids (deser-boolean (clojure.core/get-in letvar210554 ["useLongIds" :content]))))))

(clojure.core/defn- deser-volume [input] (clojure.core/let [letvar210632 {"tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "kmsKeyId" (portkey.aws/getback-xml-elem-with-tag "kmsKeyId" input), "createTime" (portkey.aws/getback-xml-elem-with-tag "createTime" input), "encrypted" (portkey.aws/getback-xml-elem-with-tag "encrypted" input), "attachmentSet" (portkey.aws/getback-xml-elem-with-tag "attachmentSet" input), "iops" (portkey.aws/getback-xml-elem-with-tag "iops" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "volumeType" (portkey.aws/getback-xml-elem-with-tag "volumeType" input), "volumeId" (portkey.aws/getback-xml-elem-with-tag "volumeId" input), "size" (portkey.aws/getback-xml-elem-with-tag "size" input), "snapshotId" (portkey.aws/getback-xml-elem-with-tag "snapshotId" input)}] (clojure.core/cond-> {} (letvar210632 "encrypted") (clojure.core/assoc :encrypted (deser-boolean (clojure.core/get-in letvar210632 ["encrypted" :content]))) (letvar210632 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar210632 ["tagSet" :content]))) (letvar210632 "attachmentSet") (clojure.core/assoc :attachments (deser-volume-attachment-list (clojure.core/get-in letvar210632 ["attachmentSet" :content]))) (letvar210632 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar210632 ["availabilityZone" :content]))) (letvar210632 "kmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar210632 ["kmsKeyId" :content]))) (letvar210632 "size") (clojure.core/assoc :size (deser-integer (clojure.core/get-in letvar210632 ["size" :content]))) (letvar210632 "iops") (clojure.core/assoc :iops (deser-integer (clojure.core/get-in letvar210632 ["iops" :content]))) (letvar210632 "volumeType") (clojure.core/assoc :volume-type (deser-volume-type (clojure.core/get-in letvar210632 ["volumeType" :content]))) (letvar210632 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar210632 ["volumeId" :content]))) (letvar210632 "createTime") (clojure.core/assoc :create-time (deser-date-time (clojure.core/get-in letvar210632 ["createTime" :content]))) (letvar210632 "status") (clojure.core/assoc :state (deser-volume-state (clojure.core/get-in letvar210632 ["status" :content]))) (letvar210632 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar210632 ["snapshotId" :content]))))))

(clojure.core/defn- deser-spot-instance-type [input] (clojure.core/get {"one-time" :onetime, "persistent" :persistent} (clojure.core/first input)))

(clojure.core/defn- deser-ebs-block-device [input] (clojure.core/let [letvar210715 {"deleteOnTermination" (portkey.aws/getback-xml-elem-with-tag "deleteOnTermination" input), "iops" (portkey.aws/getback-xml-elem-with-tag "iops" input), "snapshotId" (portkey.aws/getback-xml-elem-with-tag "snapshotId" input), "volumeSize" (portkey.aws/getback-xml-elem-with-tag "volumeSize" input), "volumeType" (portkey.aws/getback-xml-elem-with-tag "volumeType" input), "encrypted" (portkey.aws/getback-xml-elem-with-tag "encrypted" input), nil (portkey.aws/getback-xml-elem-with-tag nil input)}] (clojure.core/cond-> {} (letvar210715 "deleteOnTermination") (clojure.core/assoc :delete-on-termination (deser-boolean (clojure.core/get-in letvar210715 ["deleteOnTermination" :content]))) (letvar210715 "iops") (clojure.core/assoc :iops (deser-integer (clojure.core/get-in letvar210715 ["iops" :content]))) (letvar210715 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar210715 ["snapshotId" :content]))) (letvar210715 "volumeSize") (clojure.core/assoc :volume-size (deser-integer (clojure.core/get-in letvar210715 ["volumeSize" :content]))) (letvar210715 "volumeType") (clojure.core/assoc :volume-type (deser-volume-type (clojure.core/get-in letvar210715 ["volumeType" :content]))) (letvar210715 "encrypted") (clojure.core/assoc :encrypted (deser-boolean (clojure.core/get-in letvar210715 ["encrypted" :content]))) (letvar210715 nil) (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar210715 [nil :content]))))))

(clojure.core/defn- deser-spot-fleet-tag-specification-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-spot-fleet-tag-specification coll))) input))

(clojure.core/defn- deser-placement [input] (clojure.core/let [letvar210810 {"availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "affinity" (portkey.aws/getback-xml-elem-with-tag "affinity" input), "groupName" (portkey.aws/getback-xml-elem-with-tag "groupName" input), "hostId" (portkey.aws/getback-xml-elem-with-tag "hostId" input), "tenancy" (portkey.aws/getback-xml-elem-with-tag "tenancy" input), "spreadDomain" (portkey.aws/getback-xml-elem-with-tag "spreadDomain" input)}] (clojure.core/cond-> {} (letvar210810 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar210810 ["availabilityZone" :content]))) (letvar210810 "affinity") (clojure.core/assoc :affinity (deser-string (clojure.core/get-in letvar210810 ["affinity" :content]))) (letvar210810 "groupName") (clojure.core/assoc :group-name (deser-string (clojure.core/get-in letvar210810 ["groupName" :content]))) (letvar210810 "hostId") (clojure.core/assoc :host-id (deser-string (clojure.core/get-in letvar210810 ["hostId" :content]))) (letvar210810 "tenancy") (clojure.core/assoc :tenancy (deser-tenancy (clojure.core/get-in letvar210810 ["tenancy" :content]))) (letvar210810 "spreadDomain") (clojure.core/assoc :spread-domain (deser-string (clojure.core/get-in letvar210810 ["spreadDomain" :content]))))))

(clojure.core/defn- deser-reserved-instances-configuration [input] (clojure.core/let [letvar210888 {"availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "instanceCount" (portkey.aws/getback-xml-elem-with-tag "instanceCount" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "platform" (portkey.aws/getback-xml-elem-with-tag "platform" input), "scope" (portkey.aws/getback-xml-elem-with-tag "scope" input)}] (clojure.core/cond-> {} (letvar210888 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar210888 ["availabilityZone" :content]))) (letvar210888 "instanceCount") (clojure.core/assoc :instance-count (deser-integer (clojure.core/get-in letvar210888 ["instanceCount" :content]))) (letvar210888 "instanceType") (clojure.core/assoc :instance-type (deser-instance-type (clojure.core/get-in letvar210888 ["instanceType" :content]))) (letvar210888 "platform") (clojure.core/assoc :platform (deser-string (clojure.core/get-in letvar210888 ["platform" :content]))) (letvar210888 "scope") (clojure.core/assoc :scope (deserscope (clojure.core/get-in letvar210888 ["scope" :content]))))))

(clojure.core/defn- deser-interface-permission-type [input] (clojure.core/get {"INSTANCE-ATTACH" :instanceattach, "EIP-ASSOCIATE" :eipassociate} (clojure.core/first input)))

(clojure.core/defn- deser-user-bucket-details [input] (clojure.core/let [letvar210971 {"s3Bucket" (portkey.aws/getback-xml-elem-with-tag "s3Bucket" input), "s3Key" (portkey.aws/getback-xml-elem-with-tag "s3Key" input)}] (clojure.core/cond-> {} (letvar210971 "s3Bucket") (clojure.core/assoc :s-3-bucket (deser-string (clojure.core/get-in letvar210971 ["s3Bucket" :content]))) (letvar210971 "s3Key") (clojure.core/assoc :s-3-key (deser-string (clojure.core/get-in letvar210971 ["s3Key" :content]))))))

(clojure.core/defn- deser-occurrence-day-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-integer coll))) input))

(clojure.core/defn- deser-snapshot-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-snapshot coll))) input))

(clojure.core/defn- deser-instance-lifecycle-type [input] (clojure.core/get {"spot" :spot, "scheduled" :scheduled} (clojure.core/first input)))

(clojure.core/defn- deser-availability-zone-state [input] (clojure.core/get {"available" :available, "information" :information, "impaired" :impaired, "unavailable" :unavailable} (clojure.core/first input)))

(clojure.core/defn- deser-subnet [input] (clojure.core/let [letvar211093 {"subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "availableIpAddressCount" (portkey.aws/getback-xml-elem-with-tag "availableIpAddressCount" input), "ipv6CidrBlockAssociationSet" (portkey.aws/getback-xml-elem-with-tag "ipv6CidrBlockAssociationSet" input), "cidrBlock" (portkey.aws/getback-xml-elem-with-tag "cidrBlock" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "mapPublicIpOnLaunch" (portkey.aws/getback-xml-elem-with-tag "mapPublicIpOnLaunch" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "assignIpv6AddressOnCreation" (portkey.aws/getback-xml-elem-with-tag "assignIpv6AddressOnCreation" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "defaultForAz" (portkey.aws/getback-xml-elem-with-tag "defaultForAz" input)}] (clojure.core/cond-> {} (letvar211093 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar211093 ["subnetId" :content]))) (letvar211093 "defaultForAz") (clojure.core/assoc :default-for-az (deser-boolean (clojure.core/get-in letvar211093 ["defaultForAz" :content]))) (letvar211093 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar211093 ["tagSet" :content]))) (letvar211093 "availableIpAddressCount") (clojure.core/assoc :available-ip-address-count (deser-integer (clojure.core/get-in letvar211093 ["availableIpAddressCount" :content]))) (letvar211093 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar211093 ["availabilityZone" :content]))) (letvar211093 "cidrBlock") (clojure.core/assoc :cidr-block (deser-string (clojure.core/get-in letvar211093 ["cidrBlock" :content]))) (letvar211093 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar211093 ["vpcId" :content]))) (letvar211093 "assignIpv6AddressOnCreation") (clojure.core/assoc :assign-ipv-6-address-on-creation (deser-boolean (clojure.core/get-in letvar211093 ["assignIpv6AddressOnCreation" :content]))) (letvar211093 "state") (clojure.core/assoc :state (deser-subnet-state (clojure.core/get-in letvar211093 ["state" :content]))) (letvar211093 "mapPublicIpOnLaunch") (clojure.core/assoc :map-public-ip-on-launch (deser-boolean (clojure.core/get-in letvar211093 ["mapPublicIpOnLaunch" :content]))) (letvar211093 "ipv6CidrBlockAssociationSet") (clojure.core/assoc :ipv-6-cidr-block-association-set (deser-subnet-ipv-6-cidr-block-association-set (clojure.core/get-in letvar211093 ["ipv6CidrBlockAssociationSet" :content]))))))

(clojure.core/defn- deser-dhcp-configuration-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-dhcp-configuration coll))) input))

(clojure.core/defn- deser-spot-datafeed-subscription [input] (clojure.core/let [letvar211188 {"bucket" (portkey.aws/getback-xml-elem-with-tag "bucket" input), "fault" (portkey.aws/getback-xml-elem-with-tag "fault" input), "ownerId" (portkey.aws/getback-xml-elem-with-tag "ownerId" input), "prefix" (portkey.aws/getback-xml-elem-with-tag "prefix" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input)}] (clojure.core/cond-> {} (letvar211188 "bucket") (clojure.core/assoc :bucket (deser-string (clojure.core/get-in letvar211188 ["bucket" :content]))) (letvar211188 "fault") (clojure.core/assoc :fault (deser-spot-instance-state-fault (clojure.core/get-in letvar211188 ["fault" :content]))) (letvar211188 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar211188 ["ownerId" :content]))) (letvar211188 "prefix") (clojure.core/assoc :prefix (deser-string (clojure.core/get-in letvar211188 ["prefix" :content]))) (letvar211188 "state") (clojure.core/assoc :state (deser-datafeed-subscription-state (clojure.core/get-in letvar211188 ["state" :content]))))))

(clojure.core/defn- deser-fleet-activity-status [input] (clojure.core/get {"error" :error, "pending-fulfillment" :pendingfulfillment, "pending-termination" :pendingtermination, "fulfilled" :fulfilled} (clojure.core/first input)))

(clojure.core/defn- deser-instance-count [input] (clojure.core/let [letvar211271 {"instanceCount" (portkey.aws/getback-xml-elem-with-tag "instanceCount" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input)}] (clojure.core/cond-> {} (letvar211271 "instanceCount") (clojure.core/assoc :instance-count (deser-integer (clojure.core/get-in letvar211271 ["instanceCount" :content]))) (letvar211271 "state") (clojure.core/assoc :state (deser-listing-state (clojure.core/get-in letvar211271 ["state" :content]))))))

(clojure.core/defn- deser-host-instance-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-host-instance coll))) input))

(clojure.core/defn- deser-response-launch-template-data [input] (clojure.core/let [letvar211366 {"securityGroupIdSet" (portkey.aws/getback-xml-elem-with-tag "securityGroupIdSet" input), "keyName" (portkey.aws/getback-xml-elem-with-tag "keyName" input), "cpuOptions" (portkey.aws/getback-xml-elem-with-tag "cpuOptions" input), "placement" (portkey.aws/getback-xml-elem-with-tag "placement" input), "instanceMarketOptions" (portkey.aws/getback-xml-elem-with-tag "instanceMarketOptions" input), "disableApiTermination" (portkey.aws/getback-xml-elem-with-tag "disableApiTermination" input), "monitoring" (portkey.aws/getback-xml-elem-with-tag "monitoring" input), "tagSpecificationSet" (portkey.aws/getback-xml-elem-with-tag "tagSpecificationSet" input), "iamInstanceProfile" (portkey.aws/getback-xml-elem-with-tag "iamInstanceProfile" input), "userData" (portkey.aws/getback-xml-elem-with-tag "userData" input), "imageId" (portkey.aws/getback-xml-elem-with-tag "imageId" input), "ebsOptimized" (portkey.aws/getback-xml-elem-with-tag "ebsOptimized" input), "blockDeviceMappingSet" (portkey.aws/getback-xml-elem-with-tag "blockDeviceMappingSet" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "ramDiskId" (portkey.aws/getback-xml-elem-with-tag "ramDiskId" input), "kernelId" (portkey.aws/getback-xml-elem-with-tag "kernelId" input), "networkInterfaceSet" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceSet" input), "instanceInitiatedShutdownBehavior" (portkey.aws/getback-xml-elem-with-tag "instanceInitiatedShutdownBehavior" input), "creditSpecification" (portkey.aws/getback-xml-elem-with-tag "creditSpecification" input), "securityGroupSet" (portkey.aws/getback-xml-elem-with-tag "securityGroupSet" input), "elasticGpuSpecificationSet" (portkey.aws/getback-xml-elem-with-tag "elasticGpuSpecificationSet" input)}] (clojure.core/cond-> {} (letvar211366 "tagSpecificationSet") (clojure.core/assoc :tag-specifications (deser-launch-template-tag-specification-list (clojure.core/get-in letvar211366 ["tagSpecificationSet" :content]))) (letvar211366 "kernelId") (clojure.core/assoc :kernel-id (deser-string (clojure.core/get-in letvar211366 ["kernelId" :content]))) (letvar211366 "creditSpecification") (clojure.core/assoc :credit-specification (deser-credit-specification (clojure.core/get-in letvar211366 ["creditSpecification" :content]))) (letvar211366 "securityGroupIdSet") (clojure.core/assoc :security-group-ids (deser-value-string-list (clojure.core/get-in letvar211366 ["securityGroupIdSet" :content]))) (letvar211366 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar211366 ["imageId" :content]))) (letvar211366 "placement") (clojure.core/assoc :placement (deser-launch-template-placement (clojure.core/get-in letvar211366 ["placement" :content]))) (letvar211366 "securityGroupSet") (clojure.core/assoc :security-groups (deser-value-string-list (clojure.core/get-in letvar211366 ["securityGroupSet" :content]))) (letvar211366 "ebsOptimized") (clojure.core/assoc :ebs-optimized (deser-boolean (clojure.core/get-in letvar211366 ["ebsOptimized" :content]))) (letvar211366 "instanceMarketOptions") (clojure.core/assoc :instance-market-options (deser-launch-template-instance-market-options (clojure.core/get-in letvar211366 ["instanceMarketOptions" :content]))) (letvar211366 "instanceType") (clojure.core/assoc :instance-type (deser-instance-type (clojure.core/get-in letvar211366 ["instanceType" :content]))) (letvar211366 "keyName") (clojure.core/assoc :key-name (deser-string (clojure.core/get-in letvar211366 ["keyName" :content]))) (letvar211366 "elasticGpuSpecificationSet") (clojure.core/assoc :elastic-gpu-specifications (deser-elastic-gpu-specification-response-list (clojure.core/get-in letvar211366 ["elasticGpuSpecificationSet" :content]))) (letvar211366 "ramDiskId") (clojure.core/assoc :ram-disk-id (deser-string (clojure.core/get-in letvar211366 ["ramDiskId" :content]))) (letvar211366 "disableApiTermination") (clojure.core/assoc :disable-api-termination (deser-boolean (clojure.core/get-in letvar211366 ["disableApiTermination" :content]))) (letvar211366 "monitoring") (clojure.core/assoc :monitoring (deser-launch-templates-monitoring (clojure.core/get-in letvar211366 ["monitoring" :content]))) (letvar211366 "blockDeviceMappingSet") (clojure.core/assoc :block-device-mappings (deser-launch-template-block-device-mapping-list (clojure.core/get-in letvar211366 ["blockDeviceMappingSet" :content]))) (letvar211366 "cpuOptions") (clojure.core/assoc :cpu-options (deser-launch-template-cpu-options (clojure.core/get-in letvar211366 ["cpuOptions" :content]))) (letvar211366 "userData") (clojure.core/assoc :user-data (deser-string (clojure.core/get-in letvar211366 ["userData" :content]))) (letvar211366 "instanceInitiatedShutdownBehavior") (clojure.core/assoc :instance-initiated-shutdown-behavior (deser-shutdown-behavior (clojure.core/get-in letvar211366 ["instanceInitiatedShutdownBehavior" :content]))) (letvar211366 "iamInstanceProfile") (clojure.core/assoc :iam-instance-profile (deser-launch-template-iam-instance-profile-specification (clojure.core/get-in letvar211366 ["iamInstanceProfile" :content]))) (letvar211366 "networkInterfaceSet") (clojure.core/assoc :network-interfaces (deser-launch-template-instance-network-interface-specification-list (clojure.core/get-in letvar211366 ["networkInterfaceSet" :content]))))))

(clojure.core/defn- deser-import-instance-volume-detail-item [input] (clojure.core/let [letvar211444 {"availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "bytesConverted" (portkey.aws/getback-xml-elem-with-tag "bytesConverted" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input), "image" (portkey.aws/getback-xml-elem-with-tag "image" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input), "volume" (portkey.aws/getback-xml-elem-with-tag "volume" input)}] (clojure.core/cond-> {:availability-zone (deser-string (clojure.core/get-in letvar211444 ["availabilityZone" :content])), :bytes-converted (deser-long (clojure.core/get-in letvar211444 ["bytesConverted" :content])), :image (deser-disk-image-description (clojure.core/get-in letvar211444 ["image" :content])), :status (deser-string (clojure.core/get-in letvar211444 ["status" :content])), :volume (deser-disk-image-volume-description (clojure.core/get-in letvar211444 ["volume" :content]))} (letvar211444 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar211444 ["description" :content]))) (letvar211444 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar211444 ["statusMessage" :content]))))))

(clojure.core/defn- deser-fleet-launch-template-specification [input] (clojure.core/let [letvar211522 {"launchTemplateId" (portkey.aws/getback-xml-elem-with-tag "launchTemplateId" input), "launchTemplateName" (portkey.aws/getback-xml-elem-with-tag "launchTemplateName" input), "version" (portkey.aws/getback-xml-elem-with-tag "version" input)}] (clojure.core/cond-> {} (letvar211522 "launchTemplateId") (clojure.core/assoc :launch-template-id (deser-string (clojure.core/get-in letvar211522 ["launchTemplateId" :content]))) (letvar211522 "launchTemplateName") (clojure.core/assoc :launch-template-name (deser-launch-template-name (clojure.core/get-in letvar211522 ["launchTemplateName" :content]))) (letvar211522 "version") (clojure.core/assoc :version (deser-string (clojure.core/get-in letvar211522 ["version" :content]))))))

(clojure.core/defn- deser-delete-fleet-success-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-delete-fleet-success-item coll))) input))

(clojure.core/defn- deser-tenancy [input] (clojure.core/get {"default" :default, "dedicated" :dedicated, "host" :host} (clojure.core/first input)))

(clojure.core/defn- deser-instance-network-interface-attachment [input] (clojure.core/let [letvar211622 {"attachTime" (portkey.aws/getback-xml-elem-with-tag "attachTime" input), "attachmentId" (portkey.aws/getback-xml-elem-with-tag "attachmentId" input), "deleteOnTermination" (portkey.aws/getback-xml-elem-with-tag "deleteOnTermination" input), "deviceIndex" (portkey.aws/getback-xml-elem-with-tag "deviceIndex" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input)}] (clojure.core/cond-> {} (letvar211622 "attachTime") (clojure.core/assoc :attach-time (deser-date-time (clojure.core/get-in letvar211622 ["attachTime" :content]))) (letvar211622 "attachmentId") (clojure.core/assoc :attachment-id (deser-string (clojure.core/get-in letvar211622 ["attachmentId" :content]))) (letvar211622 "deleteOnTermination") (clojure.core/assoc :delete-on-termination (deser-boolean (clojure.core/get-in letvar211622 ["deleteOnTermination" :content]))) (letvar211622 "deviceIndex") (clojure.core/assoc :device-index (deser-integer (clojure.core/get-in letvar211622 ["deviceIndex" :content]))) (letvar211622 "status") (clojure.core/assoc :status (deser-attachment-status (clojure.core/get-in letvar211622 ["status" :content]))))))

(clojure.core/defn- deser-snapshot-detail [input] (clojure.core/let [letvar211700 {"progress" (portkey.aws/getback-xml-elem-with-tag "progress" input), "url" (portkey.aws/getback-xml-elem-with-tag "url" input), "deviceName" (portkey.aws/getback-xml-elem-with-tag "deviceName" input), "userBucket" (portkey.aws/getback-xml-elem-with-tag "userBucket" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input), "diskImageSize" (portkey.aws/getback-xml-elem-with-tag "diskImageSize" input), "snapshotId" (portkey.aws/getback-xml-elem-with-tag "snapshotId" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input), "format" (portkey.aws/getback-xml-elem-with-tag "format" input)}] (clojure.core/cond-> {} (letvar211700 "diskImageSize") (clojure.core/assoc :disk-image-size (deser-double (clojure.core/get-in letvar211700 ["diskImageSize" :content]))) (letvar211700 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar211700 ["statusMessage" :content]))) (letvar211700 "format") (clojure.core/assoc :format (deser-string (clojure.core/get-in letvar211700 ["format" :content]))) (letvar211700 "status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar211700 ["status" :content]))) (letvar211700 "progress") (clojure.core/assoc :progress (deser-string (clojure.core/get-in letvar211700 ["progress" :content]))) (letvar211700 "url") (clojure.core/assoc :url (deser-string (clojure.core/get-in letvar211700 ["url" :content]))) (letvar211700 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar211700 ["description" :content]))) (letvar211700 "deviceName") (clojure.core/assoc :device-name (deser-string (clojure.core/get-in letvar211700 ["deviceName" :content]))) (letvar211700 "userBucket") (clojure.core/assoc :user-bucket (deser-user-bucket-details (clojure.core/get-in letvar211700 ["userBucket" :content]))) (letvar211700 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar211700 ["snapshotId" :content]))))))

(clojure.core/defn- deser-delete-launch-template-versions-response-success-item [input] (clojure.core/let [letvar211778 {"launchTemplateId" (portkey.aws/getback-xml-elem-with-tag "launchTemplateId" input), "launchTemplateName" (portkey.aws/getback-xml-elem-with-tag "launchTemplateName" input), "versionNumber" (portkey.aws/getback-xml-elem-with-tag "versionNumber" input)}] (clojure.core/cond-> {} (letvar211778 "launchTemplateId") (clojure.core/assoc :launch-template-id (deser-string (clojure.core/get-in letvar211778 ["launchTemplateId" :content]))) (letvar211778 "launchTemplateName") (clojure.core/assoc :launch-template-name (deser-string (clojure.core/get-in letvar211778 ["launchTemplateName" :content]))) (letvar211778 "versionNumber") (clojure.core/assoc :version-number (deser-long (clojure.core/get-in letvar211778 ["versionNumber" :content]))))))

(clojure.core/defn- deser-fpga-image [input] (clojure.core/let [letvar211856 {"productCodes" (portkey.aws/getback-xml-elem-with-tag "productCodes" input), "fpgaImageId" (portkey.aws/getback-xml-elem-with-tag "fpgaImageId" input), "fpgaImageGlobalId" (portkey.aws/getback-xml-elem-with-tag "fpgaImageGlobalId" input), "tags" (portkey.aws/getback-xml-elem-with-tag "tags" input), "name" (portkey.aws/getback-xml-elem-with-tag "name" input), "createTime" (portkey.aws/getback-xml-elem-with-tag "createTime" input), "updateTime" (portkey.aws/getback-xml-elem-with-tag "updateTime" input), "pciId" (portkey.aws/getback-xml-elem-with-tag "pciId" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "public" (portkey.aws/getback-xml-elem-with-tag "public" input), "ownerId" (portkey.aws/getback-xml-elem-with-tag "ownerId" input), "shellVersion" (portkey.aws/getback-xml-elem-with-tag "shellVersion" input), "ownerAlias" (portkey.aws/getback-xml-elem-with-tag "ownerAlias" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input)}] (clojure.core/cond-> {} (letvar211856 "fpgaImageGlobalId") (clojure.core/assoc :fpga-image-global-id (deser-string (clojure.core/get-in letvar211856 ["fpgaImageGlobalId" :content]))) (letvar211856 "shellVersion") (clojure.core/assoc :shell-version (deser-string (clojure.core/get-in letvar211856 ["shellVersion" :content]))) (letvar211856 "pciId") (clojure.core/assoc :pci-id (deser-pci-id (clojure.core/get-in letvar211856 ["pciId" :content]))) (letvar211856 "updateTime") (clojure.core/assoc :update-time (deser-date-time (clojure.core/get-in letvar211856 ["updateTime" :content]))) (letvar211856 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar211856 ["ownerId" :content]))) (letvar211856 "tags") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar211856 ["tags" :content]))) (letvar211856 "ownerAlias") (clojure.core/assoc :owner-alias (deser-string (clojure.core/get-in letvar211856 ["ownerAlias" :content]))) (letvar211856 "public") (clojure.core/assoc :public (deser-boolean (clojure.core/get-in letvar211856 ["public" :content]))) (letvar211856 "fpgaImageId") (clojure.core/assoc :fpga-image-id (deser-string (clojure.core/get-in letvar211856 ["fpgaImageId" :content]))) (letvar211856 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar211856 ["description" :content]))) (letvar211856 "createTime") (clojure.core/assoc :create-time (deser-date-time (clojure.core/get-in letvar211856 ["createTime" :content]))) (letvar211856 "productCodes") (clojure.core/assoc :product-codes (deser-product-code-list (clojure.core/get-in letvar211856 ["productCodes" :content]))) (letvar211856 "state") (clojure.core/assoc :state (deser-fpga-image-state (clojure.core/get-in letvar211856 ["state" :content]))) (letvar211856 "name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar211856 ["name" :content]))))))

(clojure.core/defn- deser-spot-instance-state-fault [input] (clojure.core/let [letvar211934 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "message" (portkey.aws/getback-xml-elem-with-tag "message" input)}] (clojure.core/cond-> {} (letvar211934 "code") (clojure.core/assoc :code (deser-string (clojure.core/get-in letvar211934 ["code" :content]))) (letvar211934 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar211934 ["message" :content]))))))

(clojure.core/defn- deser-dhcp-configuration-value-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-attribute-value coll))) input))

(clojure.core/defn- deser-instance-network-interface-association [input] (clojure.core/let [letvar212029 {"ipOwnerId" (portkey.aws/getback-xml-elem-with-tag "ipOwnerId" input), "publicDnsName" (portkey.aws/getback-xml-elem-with-tag "publicDnsName" input), "publicIp" (portkey.aws/getback-xml-elem-with-tag "publicIp" input)}] (clojure.core/cond-> {} (letvar212029 "ipOwnerId") (clojure.core/assoc :ip-owner-id (deser-string (clojure.core/get-in letvar212029 ["ipOwnerId" :content]))) (letvar212029 "publicDnsName") (clojure.core/assoc :public-dns-name (deser-string (clojure.core/get-in letvar212029 ["publicDnsName" :content]))) (letvar212029 "publicIp") (clojure.core/assoc :public-ip (deser-string (clojure.core/get-in letvar212029 ["publicIp" :content]))))))

(clojure.core/defn- deser-fleet-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-fleet-data coll))) input))

(clojure.core/defn- deser-bundle-task-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-bundle-task coll))) input))

(clojure.core/defn- deser-fleet-launch-template-config-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-fleet-launch-template-config coll))) input))

(clojure.core/defn- deser-disk-image-volume-description [input] (clojure.core/let [letvar212158 {"id" (portkey.aws/getback-xml-elem-with-tag "id" input), "size" (portkey.aws/getback-xml-elem-with-tag "size" input)}] (clojure.core/cond-> {} (letvar212158 "id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar212158 ["id" :content]))) (letvar212158 "size") (clojure.core/assoc :size (deser-long (clojure.core/get-in letvar212158 ["size" :content]))))))

(clojure.core/defn- deser-host-properties [input] (clojure.core/let [letvar212236 {"cores" (portkey.aws/getback-xml-elem-with-tag "cores" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "sockets" (portkey.aws/getback-xml-elem-with-tag "sockets" input), "totalVCpus" (portkey.aws/getback-xml-elem-with-tag "totalVCpus" input)}] (clojure.core/cond-> {} (letvar212236 "cores") (clojure.core/assoc :cores (deser-integer (clojure.core/get-in letvar212236 ["cores" :content]))) (letvar212236 "instanceType") (clojure.core/assoc :instance-type (deser-string (clojure.core/get-in letvar212236 ["instanceType" :content]))) (letvar212236 "sockets") (clojure.core/assoc :sockets (deser-integer (clojure.core/get-in letvar212236 ["sockets" :content]))) (letvar212236 "totalVCpus") (clojure.core/assoc :total-v-cpus (deser-integer (clojure.core/get-in letvar212236 ["totalVCpus" :content]))))))

(clojure.core/defn- deser-delete-launch-template-versions-response-error-item [input] (clojure.core/let [letvar212314 {"launchTemplateId" (portkey.aws/getback-xml-elem-with-tag "launchTemplateId" input), "launchTemplateName" (portkey.aws/getback-xml-elem-with-tag "launchTemplateName" input), "versionNumber" (portkey.aws/getback-xml-elem-with-tag "versionNumber" input), "responseError" (portkey.aws/getback-xml-elem-with-tag "responseError" input)}] (clojure.core/cond-> {} (letvar212314 "launchTemplateId") (clojure.core/assoc :launch-template-id (deser-string (clojure.core/get-in letvar212314 ["launchTemplateId" :content]))) (letvar212314 "launchTemplateName") (clojure.core/assoc :launch-template-name (deser-string (clojure.core/get-in letvar212314 ["launchTemplateName" :content]))) (letvar212314 "versionNumber") (clojure.core/assoc :version-number (deser-long (clojure.core/get-in letvar212314 ["versionNumber" :content]))) (letvar212314 "responseError") (clojure.core/assoc :response-error (deser-response-error (clojure.core/get-in letvar212314 ["responseError" :content]))))))

(clojure.core/defn- deser-scheduled-instance [input] (clojure.core/let [letvar212392 {"previousSlotEndTime" (portkey.aws/getback-xml-elem-with-tag "previousSlotEndTime" input), "createDate" (portkey.aws/getback-xml-elem-with-tag "createDate" input), "instanceCount" (portkey.aws/getback-xml-elem-with-tag "instanceCount" input), "termStartDate" (portkey.aws/getback-xml-elem-with-tag "termStartDate" input), "networkPlatform" (portkey.aws/getback-xml-elem-with-tag "networkPlatform" input), "hourlyPrice" (portkey.aws/getback-xml-elem-with-tag "hourlyPrice" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "recurrence" (portkey.aws/getback-xml-elem-with-tag "recurrence" input), "totalScheduledInstanceHours" (portkey.aws/getback-xml-elem-with-tag "totalScheduledInstanceHours" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "slotDurationInHours" (portkey.aws/getback-xml-elem-with-tag "slotDurationInHours" input), "scheduledInstanceId" (portkey.aws/getback-xml-elem-with-tag "scheduledInstanceId" input), "platform" (portkey.aws/getback-xml-elem-with-tag "platform" input), "termEndDate" (portkey.aws/getback-xml-elem-with-tag "termEndDate" input), "nextSlotStartTime" (portkey.aws/getback-xml-elem-with-tag "nextSlotStartTime" input)}] (clojure.core/cond-> {} (letvar212392 "platform") (clojure.core/assoc :platform (deser-string (clojure.core/get-in letvar212392 ["platform" :content]))) (letvar212392 "termEndDate") (clojure.core/assoc :term-end-date (deser-date-time (clojure.core/get-in letvar212392 ["termEndDate" :content]))) (letvar212392 "networkPlatform") (clojure.core/assoc :network-platform (deser-string (clojure.core/get-in letvar212392 ["networkPlatform" :content]))) (letvar212392 "instanceCount") (clojure.core/assoc :instance-count (deser-integer (clojure.core/get-in letvar212392 ["instanceCount" :content]))) (letvar212392 "recurrence") (clojure.core/assoc :recurrence (deser-scheduled-instance-recurrence (clojure.core/get-in letvar212392 ["recurrence" :content]))) (letvar212392 "createDate") (clojure.core/assoc :create-date (deser-date-time (clojure.core/get-in letvar212392 ["createDate" :content]))) (letvar212392 "instanceType") (clojure.core/assoc :instance-type (deser-string (clojure.core/get-in letvar212392 ["instanceType" :content]))) (letvar212392 "nextSlotStartTime") (clojure.core/assoc :next-slot-start-time (deser-date-time (clojure.core/get-in letvar212392 ["nextSlotStartTime" :content]))) (letvar212392 "totalScheduledInstanceHours") (clojure.core/assoc :total-scheduled-instance-hours (deser-integer (clojure.core/get-in letvar212392 ["totalScheduledInstanceHours" :content]))) (letvar212392 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar212392 ["availabilityZone" :content]))) (letvar212392 "hourlyPrice") (clojure.core/assoc :hourly-price (deser-string (clojure.core/get-in letvar212392 ["hourlyPrice" :content]))) (letvar212392 "slotDurationInHours") (clojure.core/assoc :slot-duration-in-hours (deser-integer (clojure.core/get-in letvar212392 ["slotDurationInHours" :content]))) (letvar212392 "previousSlotEndTime") (clojure.core/assoc :previous-slot-end-time (deser-date-time (clojure.core/get-in letvar212392 ["previousSlotEndTime" :content]))) (letvar212392 "scheduledInstanceId") (clojure.core/assoc :scheduled-instance-id (deser-string (clojure.core/get-in letvar212392 ["scheduledInstanceId" :content]))) (letvar212392 "termStartDate") (clojure.core/assoc :term-start-date (deser-date-time (clojure.core/get-in letvar212392 ["termStartDate" :content]))))))

(clojure.core/defn- deser-active-instance-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-active-instance coll))) input))

(clojure.core/defn- deser-instance-type [input] (clojure.core/get {"m1.large" :m-1large, "t3.small" :t-3small, "cc1.4xlarge" :cc-14xlarge, "z1d.large" :z-1dlarge, "x1e.32xlarge" :x-1e-32xlarge, "r5d.xlarge" :r-5dxlarge, "m5d.24xlarge" :m-5d-24xlarge, "c1.medium" :c-1medium, "r4.2xlarge" :r-42xlarge, "r3.8xlarge" :r-38xlarge, "r5.4xlarge" :r-54xlarge, "d2.xlarge" :d-2xlarge, "m3.2xlarge" :m-32xlarge, "r5d.8xlarge" :r-5d-8xlarge, "i2.8xlarge" :i-28xlarge, "h1.16xlarge" :h-116xlarge, "m5.xlarge" :m-5xlarge, "t3.2xlarge" :t-32xlarge, "g2.2xlarge" :g-22xlarge, "g3.8xlarge" :g-38xlarge, "t3.xlarge" :t-3xlarge, "c3.8xlarge" :c-38xlarge, "t2.large" :t-2large, "x1e.4xlarge" :x-1e-4xlarge, "t3.nano" :t-3nano, "p2.16xlarge" :p-216xlarge, "m1.xlarge" :m-1xlarge, "d2.8xlarge" :d-28xlarge, "r5d.large" :r-5dlarge, "m4.4xlarge" :m-44xlarge, "t2.2xlarge" :t-22xlarge, "r4.16xlarge" :r-416xlarge, "u-12tb1.metal" :u-12tb-1metal, "r5d.4xlarge" :r-5d-4xlarge, "g3.16xlarge" :g-316xlarge, "z1d.2xlarge" :z-1d-2xlarge, "t3.large" :t-3large, "h1.2xlarge" :h-12xlarge, "g3.4xlarge" :g-34xlarge, "cr1.8xlarge" :cr-18xlarge, "t1.micro" :t-1micro, "c5d.large" :c-5dlarge, "z1d.xlarge" :z-1dxlarge, "c5.4xlarge" :c-54xlarge, "c3.2xlarge" :c-32xlarge, "g2.8xlarge" :g-28xlarge, "z1d.3xlarge" :z-1d-3xlarge, "c5d.18xlarge" :c-5d-18xlarge, "c4.8xlarge" :c-48xlarge, "c5.18xlarge" :c-518xlarge, "x1e.2xlarge" :x-1e-2xlarge, "r5.metal" :r-5metal, "z1d.6xlarge" :z-1d-6xlarge, "m2.xlarge" :m-2xlarge, "m1.small" :m-1small, "i2.4xlarge" :i-24xlarge, "c3.4xlarge" :c-34xlarge, "i3.16xlarge" :i-316xlarge, "t2.micro" :t-2micro, "r5d.16xlarge" :r-5d-16xlarge, "d2.2xlarge" :d-22xlarge, "x1.32xlarge" :x-132xlarge, "m4.2xlarge" :m-42xlarge, "r5d.24xlarge" :r-5d-24xlarge, "u-6tb1.metal" :u-6tb-1metal, "i3.4xlarge" :i-34xlarge, "m4.10xlarge" :m-410xlarge, "i3.metal" :i-3metal, "m1.medium" :m-1medium, "c4.4xlarge" :c-44xlarge, "hi1.4xlarge" :hi-14xlarge, "r3.xlarge" :r-3xlarge, "x1e.16xlarge" :x-1e-16xlarge, "m5.large" :m-5large, "r5.xlarge" :r-5xlarge, "c4.2xlarge" :c-42xlarge, "i3.8xlarge" :i-38xlarge, "p3.2xlarge" :p-32xlarge, "m5.4xlarge" :m-54xlarge, "t3.medium" :t-3medium, "u-9tb1.metal" :u-9tb-1metal, "t2.small" :t-2small, "r4.xlarge" :r-4xlarge, "m5.2xlarge" :m-52xlarge, "z1d.12xlarge" :z-1d-12xlarge, "t3.micro" :t-3micro, "c5.large" :c-5large, "c5.2xlarge" :c-52xlarge, "f1.2xlarge" :f-12xlarge, "m5d.4xlarge" :m-5d-4xlarge, "c5d.xlarge" :c-5dxlarge, "m3.xlarge" :m-3xlarge, "c5d.9xlarge" :c-5d-9xlarge, "r3.2xlarge" :r-32xlarge, "cg1.4xlarge" :cg-14xlarge, "r3.4xlarge" :r-34xlarge, "t2.xlarge" :t-2xlarge, "c4.xlarge" :c-4xlarge, "m2.2xlarge" :m-22xlarge, "f1.4xlarge" :f-14xlarge, "r5.large" :r-5large, "p2.8xlarge" :p-28xlarge, "r5d.12xlarge" :r-5d-12xlarge, "x1.16xlarge" :x-116xlarge, "m4.large" :m-4large, "m4.16xlarge" :m-416xlarge, "r3.large" :r-3large, "d2.4xlarge" :d-24xlarge, "h1.8xlarge" :h-18xlarge, "i3.2xlarge" :i-32xlarge, "c4.large" :c-4large, "h1.4xlarge" :h-14xlarge, "m5d.12xlarge" :m-5d-12xlarge, "m4.xlarge" :m-4xlarge, "f1.16xlarge" :f-116xlarge, "r5.12xlarge" :r-512xlarge, "i2.2xlarge" :i-22xlarge, "p3.16xlarge" :p-316xlarge, "i3.xlarge" :i-3xlarge, "t2.nano" :t-2nano, "m2.4xlarge" :m-24xlarge, "r5d.metal" :r-5dmetal, "r4.large" :r-4large, "c3.xlarge" :c-3xlarge, "p2.xlarge" :p-2xlarge, "c5d.4xlarge" :c-5d-4xlarge, "i3.large" :i-3large, "r4.8xlarge" :r-48xlarge, "t2.medium" :t-2medium, "p3.8xlarge" :p-38xlarge, "c3.large" :c-3large, "m3.medium" :m-3medium, "m5d.2xlarge" :m-5d-2xlarge, "r5d.2xlarge" :r-5d-2xlarge, "i2.xlarge" :i-2xlarge, "m5.24xlarge" :m-524xlarge, "c5.9xlarge" :c-59xlarge, "m5d.large" :m-5dlarge, "m5.12xlarge" :m-512xlarge, "cc2.8xlarge" :cc-28xlarge, "hs1.8xlarge" :hs-18xlarge, "r5.16xlarge" :r-516xlarge, "m3.large" :m-3large, "x1e.xlarge" :x-1exlarge, "c1.xlarge" :c-1xlarge, "c5d.2xlarge" :c-5d-2xlarge, "x1e.8xlarge" :x-1e-8xlarge, "r5.2xlarge" :r-52xlarge, "m5d.xlarge" :m-5dxlarge, "c5.xlarge" :c-5xlarge, "r4.4xlarge" :r-44xlarge, "r5.8xlarge" :r-58xlarge, "r5.24xlarge" :r-524xlarge} (clojure.core/first input)))

(clojure.core/defn- deser-route-state [input] (clojure.core/get {"active" :active, "blackhole" :blackhole} (clojure.core/first input)))

(clojure.core/defn- deser-subnet-state [input] (clojure.core/get {"pending" :pending, "available" :available} (clojure.core/first input)))

(clojure.core/defn- deser-stale-ip-permission-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-stale-ip-permission coll))) input))

(clojure.core/defn- deser-reserved-instances-modification-result [input] (clojure.core/let [letvar212519 {"reservedInstancesId" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesId" input), "targetConfiguration" (portkey.aws/getback-xml-elem-with-tag "targetConfiguration" input)}] (clojure.core/cond-> {} (letvar212519 "reservedInstancesId") (clojure.core/assoc :reserved-instances-id (deser-string (clojure.core/get-in letvar212519 ["reservedInstancesId" :content]))) (letvar212519 "targetConfiguration") (clojure.core/assoc :target-configuration (deser-reserved-instances-configuration (clojure.core/get-in letvar212519 ["targetConfiguration" :content]))))))

(clojure.core/defn- deser-import-instance-task-details [input] (clojure.core/let [letvar212597 {"description" (portkey.aws/getback-xml-elem-with-tag "description" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "platform" (portkey.aws/getback-xml-elem-with-tag "platform" input), "volumes" (portkey.aws/getback-xml-elem-with-tag "volumes" input)}] (clojure.core/cond-> {} (letvar212597 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar212597 ["description" :content]))) (letvar212597 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar212597 ["instanceId" :content]))) (letvar212597 "platform") (clojure.core/assoc :platform (deser-platform-values (clojure.core/get-in letvar212597 ["platform" :content]))) (letvar212597 "volumes") (clojure.core/assoc :volumes (deser-import-instance-volume-detail-set (clojure.core/get-in letvar212597 ["volumes" :content]))))))

(clojure.core/defn- deser-create-volume-permission [input] (clojure.core/let [letvar212675 {"group" (portkey.aws/getback-xml-elem-with-tag "group" input), "userId" (portkey.aws/getback-xml-elem-with-tag "userId" input)}] (clojure.core/cond-> {} (letvar212675 "group") (clojure.core/assoc :group (deser-permission-group (clojure.core/get-in letvar212675 ["group" :content]))) (letvar212675 "userId") (clojure.core/assoc :user-id (deser-string (clojure.core/get-in letvar212675 ["userId" :content]))))))

(clojure.core/defn- deser-instance-status-details [input] (clojure.core/let [letvar212753 {"impairedSince" (portkey.aws/getback-xml-elem-with-tag "impairedSince" input), "name" (portkey.aws/getback-xml-elem-with-tag "name" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input)}] (clojure.core/cond-> {} (letvar212753 "impairedSince") (clojure.core/assoc :impaired-since (deser-date-time (clojure.core/get-in letvar212753 ["impairedSince" :content]))) (letvar212753 "name") (clojure.core/assoc :name (deser-status-name (clojure.core/get-in letvar212753 ["name" :content]))) (letvar212753 "status") (clojure.core/assoc :status (deser-status-type (clojure.core/get-in letvar212753 ["status" :content]))))))

(clojure.core/defn- deser-subnet-cidr-block-state [input] (clojure.core/let [letvar212831 {"state" (portkey.aws/getback-xml-elem-with-tag "state" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input)}] (clojure.core/cond-> {} (letvar212831 "state") (clojure.core/assoc :state (deser-subnet-cidr-block-state-code (clojure.core/get-in letvar212831 ["state" :content]))) (letvar212831 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar212831 ["statusMessage" :content]))))))

(clojure.core/defn- deser-iam-instance-profile-specification [input] (clojure.core/let [letvar212909 {"arn" (portkey.aws/getback-xml-elem-with-tag "arn" input), "name" (portkey.aws/getback-xml-elem-with-tag "name" input)}] (clojure.core/cond-> {} (letvar212909 "arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar212909 ["arn" :content]))) (letvar212909 "name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar212909 ["name" :content]))))))

(clojure.core/defn- deser-spot-instance-request-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-spot-instance-request coll))) input))

(clojure.core/defn- deser-region-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-region coll))) input))

(clojure.core/defn- deser-delete-fleet-success-item [input] (clojure.core/let [letvar213021 {"currentFleetState" (portkey.aws/getback-xml-elem-with-tag "currentFleetState" input), "previousFleetState" (portkey.aws/getback-xml-elem-with-tag "previousFleetState" input), "fleetId" (portkey.aws/getback-xml-elem-with-tag "fleetId" input)}] (clojure.core/cond-> {} (letvar213021 "currentFleetState") (clojure.core/assoc :current-fleet-state (deser-fleet-state-code (clojure.core/get-in letvar213021 ["currentFleetState" :content]))) (letvar213021 "previousFleetState") (clojure.core/assoc :previous-fleet-state (deser-fleet-state-code (clojure.core/get-in letvar213021 ["previousFleetState" :content]))) (letvar213021 "fleetId") (clojure.core/assoc :fleet-id (deser-fleet-identifier (clojure.core/get-in letvar213021 ["fleetId" :content]))))))

(clojure.core/defn- deser-response-host-id-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-disk-image-description [input] (clojure.core/let [letvar213116 {"checksum" (portkey.aws/getback-xml-elem-with-tag "checksum" input), "format" (portkey.aws/getback-xml-elem-with-tag "format" input), "importManifestUrl" (portkey.aws/getback-xml-elem-with-tag "importManifestUrl" input), "size" (portkey.aws/getback-xml-elem-with-tag "size" input)}] (clojure.core/cond-> {} (letvar213116 "checksum") (clojure.core/assoc :checksum (deser-string (clojure.core/get-in letvar213116 ["checksum" :content]))) (letvar213116 "format") (clojure.core/assoc :format (deser-disk-image-format (clojure.core/get-in letvar213116 ["format" :content]))) (letvar213116 "importManifestUrl") (clojure.core/assoc :import-manifest-url (deser-string (clojure.core/get-in letvar213116 ["importManifestUrl" :content]))) (letvar213116 "size") (clojure.core/assoc :size (deser-long (clojure.core/get-in letvar213116 ["size" :content]))))))

(clojure.core/defn- deser-launch-template [input] (clojure.core/let [letvar213194 {"launchTemplateId" (portkey.aws/getback-xml-elem-with-tag "launchTemplateId" input), "launchTemplateName" (portkey.aws/getback-xml-elem-with-tag "launchTemplateName" input), "createTime" (portkey.aws/getback-xml-elem-with-tag "createTime" input), "createdBy" (portkey.aws/getback-xml-elem-with-tag "createdBy" input), "defaultVersionNumber" (portkey.aws/getback-xml-elem-with-tag "defaultVersionNumber" input), "latestVersionNumber" (portkey.aws/getback-xml-elem-with-tag "latestVersionNumber" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input)}] (clojure.core/cond-> {} (letvar213194 "launchTemplateId") (clojure.core/assoc :launch-template-id (deser-string (clojure.core/get-in letvar213194 ["launchTemplateId" :content]))) (letvar213194 "launchTemplateName") (clojure.core/assoc :launch-template-name (deser-launch-template-name (clojure.core/get-in letvar213194 ["launchTemplateName" :content]))) (letvar213194 "createTime") (clojure.core/assoc :create-time (deser-date-time (clojure.core/get-in letvar213194 ["createTime" :content]))) (letvar213194 "createdBy") (clojure.core/assoc :created-by (deser-string (clojure.core/get-in letvar213194 ["createdBy" :content]))) (letvar213194 "defaultVersionNumber") (clojure.core/assoc :default-version-number (deser-long (clojure.core/get-in letvar213194 ["defaultVersionNumber" :content]))) (letvar213194 "latestVersionNumber") (clojure.core/assoc :latest-version-number (deser-long (clojure.core/get-in letvar213194 ["latestVersionNumber" :content]))) (letvar213194 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar213194 ["tagSet" :content]))))))

(clojure.core/defn- deser-available-capacity [input] (clojure.core/let [letvar213272 {"availableInstanceCapacity" (portkey.aws/getback-xml-elem-with-tag "availableInstanceCapacity" input), "availableVCpus" (portkey.aws/getback-xml-elem-with-tag "availableVCpus" input)}] (clojure.core/cond-> {} (letvar213272 "availableInstanceCapacity") (clojure.core/assoc :available-instance-capacity (deser-available-instance-capacity-list (clojure.core/get-in letvar213272 ["availableInstanceCapacity" :content]))) (letvar213272 "availableVCpus") (clojure.core/assoc :available-v-cpus (deser-integer (clojure.core/get-in letvar213272 ["availableVCpus" :content]))))))

(clojure.core/defn- deser-service-detail-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-service-detail coll))) input))

(clojure.core/defn- deser-bundle-task-state [input] (clojure.core/get {"pending" :pending, "waiting-for-shutdown" :waitingforshutdown, "bundling" :bundling, "storing" :storing, "cancelling" :cancelling, "complete" :complete, "failed" :failed} (clojure.core/first input)))

(clojure.core/defn- deser-icmp-type-code [input] (clojure.core/let [letvar213372 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "type" (portkey.aws/getback-xml-elem-with-tag "type" input)}] (clojure.core/cond-> {} (letvar213372 "code") (clojure.core/assoc :code (deser-integer (clojure.core/get-in letvar213372 ["code" :content]))) (letvar213372 "type") (clojure.core/assoc :type (deser-integer (clojure.core/get-in letvar213372 ["type" :content]))))))

(clojure.core/defn- deser-instance-private-ip-address [input] (clojure.core/let [letvar213450 {"association" (portkey.aws/getback-xml-elem-with-tag "association" input), "primary" (portkey.aws/getback-xml-elem-with-tag "primary" input), "privateDnsName" (portkey.aws/getback-xml-elem-with-tag "privateDnsName" input), "privateIpAddress" (portkey.aws/getback-xml-elem-with-tag "privateIpAddress" input)}] (clojure.core/cond-> {} (letvar213450 "association") (clojure.core/assoc :association (deser-instance-network-interface-association (clojure.core/get-in letvar213450 ["association" :content]))) (letvar213450 "primary") (clojure.core/assoc :primary (deser-boolean (clojure.core/get-in letvar213450 ["primary" :content]))) (letvar213450 "privateDnsName") (clojure.core/assoc :private-dns-name (deser-string (clojure.core/get-in letvar213450 ["privateDnsName" :content]))) (letvar213450 "privateIpAddress") (clojure.core/assoc :private-ip-address (deser-string (clojure.core/get-in letvar213450 ["privateIpAddress" :content]))))))

(clojure.core/defn- deser-reserved-instances-listing-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-instances-listing coll))) input))

(clojure.core/defn- deser-service-state [input] (clojure.core/get {"Pending" :pending, "Available" :available, "Deleting" :deleting, "Deleted" :deleted, "Failed" :failed} (clojure.core/first input)))

(clojure.core/defn- deser-vpc-classic-link [input] (clojure.core/let [letvar213550 {"classicLinkEnabled" (portkey.aws/getback-xml-elem-with-tag "classicLinkEnabled" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input)}] (clojure.core/cond-> {} (letvar213550 "classicLinkEnabled") (clojure.core/assoc :classic-link-enabled (deser-boolean (clojure.core/get-in letvar213550 ["classicLinkEnabled" :content]))) (letvar213550 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar213550 ["tagSet" :content]))) (letvar213550 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar213550 ["vpcId" :content]))))))

(clojure.core/defn- deser-snapshot-task-detail [input] (clojure.core/let [letvar213628 {"progress" (portkey.aws/getback-xml-elem-with-tag "progress" input), "url" (portkey.aws/getback-xml-elem-with-tag "url" input), "userBucket" (portkey.aws/getback-xml-elem-with-tag "userBucket" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input), "diskImageSize" (portkey.aws/getback-xml-elem-with-tag "diskImageSize" input), "snapshotId" (portkey.aws/getback-xml-elem-with-tag "snapshotId" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input), "format" (portkey.aws/getback-xml-elem-with-tag "format" input)}] (clojure.core/cond-> {} (letvar213628 "diskImageSize") (clojure.core/assoc :disk-image-size (deser-double (clojure.core/get-in letvar213628 ["diskImageSize" :content]))) (letvar213628 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar213628 ["statusMessage" :content]))) (letvar213628 "format") (clojure.core/assoc :format (deser-string (clojure.core/get-in letvar213628 ["format" :content]))) (letvar213628 "status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar213628 ["status" :content]))) (letvar213628 "progress") (clojure.core/assoc :progress (deser-string (clojure.core/get-in letvar213628 ["progress" :content]))) (letvar213628 "url") (clojure.core/assoc :url (deser-string (clojure.core/get-in letvar213628 ["url" :content]))) (letvar213628 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar213628 ["description" :content]))) (letvar213628 "userBucket") (clojure.core/assoc :user-bucket (deser-user-bucket-details (clojure.core/get-in letvar213628 ["userBucket" :content]))) (letvar213628 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar213628 ["snapshotId" :content]))))))

(clojure.core/defn- deser-launch-specification [input] (clojure.core/let [letvar213706 {"groupSet" (portkey.aws/getback-xml-elem-with-tag "groupSet" input), "ramdiskId" (portkey.aws/getback-xml-elem-with-tag "ramdiskId" input), "subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input), "addressingType" (portkey.aws/getback-xml-elem-with-tag "addressingType" input), "blockDeviceMapping" (portkey.aws/getback-xml-elem-with-tag "blockDeviceMapping" input), "keyName" (portkey.aws/getback-xml-elem-with-tag "keyName" input), "placement" (portkey.aws/getback-xml-elem-with-tag "placement" input), "monitoring" (portkey.aws/getback-xml-elem-with-tag "monitoring" input), "iamInstanceProfile" (portkey.aws/getback-xml-elem-with-tag "iamInstanceProfile" input), "userData" (portkey.aws/getback-xml-elem-with-tag "userData" input), "imageId" (portkey.aws/getback-xml-elem-with-tag "imageId" input), "ebsOptimized" (portkey.aws/getback-xml-elem-with-tag "ebsOptimized" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "kernelId" (portkey.aws/getback-xml-elem-with-tag "kernelId" input), "networkInterfaceSet" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceSet" input)}] (clojure.core/cond-> {} (letvar213706 "kernelId") (clojure.core/assoc :kernel-id (deser-string (clojure.core/get-in letvar213706 ["kernelId" :content]))) (letvar213706 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar213706 ["imageId" :content]))) (letvar213706 "placement") (clojure.core/assoc :placement (deser-spot-placement (clojure.core/get-in letvar213706 ["placement" :content]))) (letvar213706 "addressingType") (clojure.core/assoc :addressing-type (deser-string (clojure.core/get-in letvar213706 ["addressingType" :content]))) (letvar213706 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar213706 ["subnetId" :content]))) (letvar213706 "groupSet") (clojure.core/assoc :security-groups (deser-group-identifier-list (clojure.core/get-in letvar213706 ["groupSet" :content]))) (letvar213706 "ebsOptimized") (clojure.core/assoc :ebs-optimized (deser-boolean (clojure.core/get-in letvar213706 ["ebsOptimized" :content]))) (letvar213706 "instanceType") (clojure.core/assoc :instance-type (deser-instance-type (clojure.core/get-in letvar213706 ["instanceType" :content]))) (letvar213706 "keyName") (clojure.core/assoc :key-name (deser-string (clojure.core/get-in letvar213706 ["keyName" :content]))) (letvar213706 "monitoring") (clojure.core/assoc :monitoring (deser-run-instances-monitoring-enabled (clojure.core/get-in letvar213706 ["monitoring" :content]))) (letvar213706 "blockDeviceMapping") (clojure.core/assoc :block-device-mappings (deser-block-device-mapping-list (clojure.core/get-in letvar213706 ["blockDeviceMapping" :content]))) (letvar213706 "ramdiskId") (clojure.core/assoc :ramdisk-id (deser-string (clojure.core/get-in letvar213706 ["ramdiskId" :content]))) (letvar213706 "userData") (clojure.core/assoc :user-data (deser-string (clojure.core/get-in letvar213706 ["userData" :content]))) (letvar213706 "iamInstanceProfile") (clojure.core/assoc :iam-instance-profile (deser-iam-instance-profile-specification (clojure.core/get-in letvar213706 ["iamInstanceProfile" :content]))) (letvar213706 "networkInterfaceSet") (clojure.core/assoc :network-interfaces (deser-instance-network-interface-specification-list (clojure.core/get-in letvar213706 ["networkInterfaceSet" :content]))))))

(clojure.core/defn- deser-id-format-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-id-format coll))) input))

(clojure.core/defn- deser-launch-template-tag-specification-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-launch-template-tag-specification coll))) input))

(clojure.core/defn- deser-allowed-principal-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-allowed-principal coll))) input))

(clojure.core/defn- deser-instance-ipv-6-address-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-ipv-6-address coll))) input))

(clojure.core/defn- deser-prefix-list-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-prefix-list coll))) input))

(clojure.core/defn- deser-instance-credit-specification [input] (clojure.core/let [letvar213869 {"instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "cpuCredits" (portkey.aws/getback-xml-elem-with-tag "cpuCredits" input)}] (clojure.core/cond-> {} (letvar213869 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar213869 ["instanceId" :content]))) (letvar213869 "cpuCredits") (clojure.core/assoc :cpu-credits (deser-string (clojure.core/get-in letvar213869 ["cpuCredits" :content]))))))

(clojure.core/defn- deser-fleet-event-type [input] (clojure.core/get {"instance-change" :instancechange, "fleet-change" :fleetchange, "service-error" :serviceerror} (clojure.core/first input)))

(clojure.core/defn- deser-fleet-state-code [input] (clojure.core/get {"submitted" :submitted, "active" :active, "deleted" :deleted, "failed" :failed, "deleted-running" :deletedrunning, "deleted-terminating" :deletedterminating, "modifying" :modifying} (clojure.core/first input)))

(clojure.core/defn- deser-attribute-boolean-value [input] (clojure.core/let [letvar213957 {"value" (portkey.aws/getback-xml-elem-with-tag "value" input)}] (clojure.core/cond-> {} (letvar213957 "value") (clojure.core/assoc :value (deser-boolean (clojure.core/get-in letvar213957 ["value" :content]))))))

(clojure.core/defn- deser-spot-instance-request [input] (clojure.core/let [letvar214035 {"instanceInterruptionBehavior" (portkey.aws/getback-xml-elem-with-tag "instanceInterruptionBehavior" input), "validFrom" (portkey.aws/getback-xml-elem-with-tag "validFrom" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "spotInstanceRequestId" (portkey.aws/getback-xml-elem-with-tag "spotInstanceRequestId" input), "launchGroup" (portkey.aws/getback-xml-elem-with-tag "launchGroup" input), "blockDurationMinutes" (portkey.aws/getback-xml-elem-with-tag "blockDurationMinutes" input), "createTime" (portkey.aws/getback-xml-elem-with-tag "createTime" input), "spotPrice" (portkey.aws/getback-xml-elem-with-tag "spotPrice" input), "launchedAvailabilityZone" (portkey.aws/getback-xml-elem-with-tag "launchedAvailabilityZone" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "actualBlockHourlyPrice" (portkey.aws/getback-xml-elem-with-tag "actualBlockHourlyPrice" input), "type" (portkey.aws/getback-xml-elem-with-tag "type" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "productDescription" (portkey.aws/getback-xml-elem-with-tag "productDescription" input), "validUntil" (portkey.aws/getback-xml-elem-with-tag "validUntil" input), "availabilityZoneGroup" (portkey.aws/getback-xml-elem-with-tag "availabilityZoneGroup" input), "fault" (portkey.aws/getback-xml-elem-with-tag "fault" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "launchSpecification" (portkey.aws/getback-xml-elem-with-tag "launchSpecification" input)}] (clojure.core/cond-> {} (letvar214035 "availabilityZoneGroup") (clojure.core/assoc :availability-zone-group (deser-string (clojure.core/get-in letvar214035 ["availabilityZoneGroup" :content]))) (letvar214035 "spotInstanceRequestId") (clojure.core/assoc :spot-instance-request-id (deser-string (clojure.core/get-in letvar214035 ["spotInstanceRequestId" :content]))) (letvar214035 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar214035 ["instanceId" :content]))) (letvar214035 "type") (clojure.core/assoc :type (deser-spot-instance-type (clojure.core/get-in letvar214035 ["type" :content]))) (letvar214035 "actualBlockHourlyPrice") (clojure.core/assoc :actual-block-hourly-price (deser-string (clojure.core/get-in letvar214035 ["actualBlockHourlyPrice" :content]))) (letvar214035 "blockDurationMinutes") (clojure.core/assoc :block-duration-minutes (deser-integer (clojure.core/get-in letvar214035 ["blockDurationMinutes" :content]))) (letvar214035 "validFrom") (clojure.core/assoc :valid-from (deser-date-time (clojure.core/get-in letvar214035 ["validFrom" :content]))) (letvar214035 "launchSpecification") (clojure.core/assoc :launch-specification (deser-launch-specification (clojure.core/get-in letvar214035 ["launchSpecification" :content]))) (letvar214035 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar214035 ["tagSet" :content]))) (letvar214035 "status") (clojure.core/assoc :status (deser-spot-instance-status (clojure.core/get-in letvar214035 ["status" :content]))) (letvar214035 "spotPrice") (clojure.core/assoc :spot-price (deser-string (clojure.core/get-in letvar214035 ["spotPrice" :content]))) (letvar214035 "launchedAvailabilityZone") (clojure.core/assoc :launched-availability-zone (deser-string (clojure.core/get-in letvar214035 ["launchedAvailabilityZone" :content]))) (letvar214035 "instanceInterruptionBehavior") (clojure.core/assoc :instance-interruption-behavior (deser-instance-interruption-behavior (clojure.core/get-in letvar214035 ["instanceInterruptionBehavior" :content]))) (letvar214035 "launchGroup") (clojure.core/assoc :launch-group (deser-string (clojure.core/get-in letvar214035 ["launchGroup" :content]))) (letvar214035 "productDescription") (clojure.core/assoc :product-description (deser-ri-product-description (clojure.core/get-in letvar214035 ["productDescription" :content]))) (letvar214035 "createTime") (clojure.core/assoc :create-time (deser-date-time (clojure.core/get-in letvar214035 ["createTime" :content]))) (letvar214035 "fault") (clojure.core/assoc :fault (deser-spot-instance-state-fault (clojure.core/get-in letvar214035 ["fault" :content]))) (letvar214035 "state") (clojure.core/assoc :state (deser-spot-instance-state (clojure.core/get-in letvar214035 ["state" :content]))) (letvar214035 "validUntil") (clojure.core/assoc :valid-until (deser-date-time (clojure.core/get-in letvar214035 ["validUntil" :content]))))))

(clojure.core/defn- deser-rule-action [input] (clojure.core/get {"allow" :allow, "deny" :deny} (clojure.core/first input)))

(clojure.core/defn- deser-vpc-attachment-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpc-attachment coll))) input))

(clojure.core/defn- deser-service-configuration-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-service-configuration coll))) input))

(clojure.core/defn- deser-successful-instance-credit-specification-item [input] (clojure.core/let [letvar214152 {"instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input)}] (clojure.core/cond-> {} (letvar214152 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar214152 ["instanceId" :content]))))))

(clojure.core/defn- deser-vpn-static-route [input] (clojure.core/let [letvar214230 {"destinationCidrBlock" (portkey.aws/getback-xml-elem-with-tag "destinationCidrBlock" input), "source" (portkey.aws/getback-xml-elem-with-tag "source" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input)}] (clojure.core/cond-> {} (letvar214230 "destinationCidrBlock") (clojure.core/assoc :destination-cidr-block (deser-string (clojure.core/get-in letvar214230 ["destinationCidrBlock" :content]))) (letvar214230 "source") (clojure.core/assoc :source (deser-vpn-static-route-source (clojure.core/get-in letvar214230 ["source" :content]))) (letvar214230 "state") (clojure.core/assoc :state (deser-vpn-state (clojure.core/get-in letvar214230 ["state" :content]))))))

(clojure.core/defn- deser-fleet-type [input] (clojure.core/get {"request" :request, "maintain" :maintain} (clojure.core/first input)))

(clojure.core/defn- deser-vpc-endpoint [input] (clojure.core/let [letvar214313 {"groupSet" (portkey.aws/getback-xml-elem-with-tag "groupSet" input), "routeTableIdSet" (portkey.aws/getback-xml-elem-with-tag "routeTableIdSet" input), "privateDnsEnabled" (portkey.aws/getback-xml-elem-with-tag "privateDnsEnabled" input), "vpcEndpointId" (portkey.aws/getback-xml-elem-with-tag "vpcEndpointId" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "dnsEntrySet" (portkey.aws/getback-xml-elem-with-tag "dnsEntrySet" input), "networkInterfaceIdSet" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceIdSet" input), "serviceName" (portkey.aws/getback-xml-elem-with-tag "serviceName" input), "subnetIdSet" (portkey.aws/getback-xml-elem-with-tag "subnetIdSet" input), "creationTimestamp" (portkey.aws/getback-xml-elem-with-tag "creationTimestamp" input), "policyDocument" (portkey.aws/getback-xml-elem-with-tag "policyDocument" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "vpcEndpointType" (portkey.aws/getback-xml-elem-with-tag "vpcEndpointType" input)}] (clojure.core/cond-> {} (letvar214313 "vpcEndpointType") (clojure.core/assoc :vpc-endpoint-type (deser-vpc-endpoint-type (clojure.core/get-in letvar214313 ["vpcEndpointType" :content]))) (letvar214313 "subnetIdSet") (clojure.core/assoc :subnet-ids (deser-value-string-list (clojure.core/get-in letvar214313 ["subnetIdSet" :content]))) (letvar214313 "vpcEndpointId") (clojure.core/assoc :vpc-endpoint-id (deser-string (clojure.core/get-in letvar214313 ["vpcEndpointId" :content]))) (letvar214313 "privateDnsEnabled") (clojure.core/assoc :private-dns-enabled (deser-boolean (clojure.core/get-in letvar214313 ["privateDnsEnabled" :content]))) (letvar214313 "policyDocument") (clojure.core/assoc :policy-document (deser-string (clojure.core/get-in letvar214313 ["policyDocument" :content]))) (letvar214313 "creationTimestamp") (clojure.core/assoc :creation-timestamp (deser-date-time (clojure.core/get-in letvar214313 ["creationTimestamp" :content]))) (letvar214313 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar214313 ["vpcId" :content]))) (letvar214313 "networkInterfaceIdSet") (clojure.core/assoc :network-interface-ids (deser-value-string-list (clojure.core/get-in letvar214313 ["networkInterfaceIdSet" :content]))) (letvar214313 "groupSet") (clojure.core/assoc :groups (deser-group-identifier-set (clojure.core/get-in letvar214313 ["groupSet" :content]))) (letvar214313 "state") (clojure.core/assoc :state (deser-state (clojure.core/get-in letvar214313 ["state" :content]))) (letvar214313 "serviceName") (clojure.core/assoc :service-name (deser-string (clojure.core/get-in letvar214313 ["serviceName" :content]))) (letvar214313 "dnsEntrySet") (clojure.core/assoc :dns-entries (deser-dns-entry-set (clojure.core/get-in letvar214313 ["dnsEntrySet" :content]))) (letvar214313 "routeTableIdSet") (clojure.core/assoc :route-table-ids (deser-value-string-list (clojure.core/get-in letvar214313 ["routeTableIdSet" :content]))))))

(clojure.core/defn- deser-key-pair-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-key-pair-info coll))) input))

(clojure.core/defn- deser-purchased-scheduled-instance-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-scheduled-instance coll))) input))

(clojure.core/defn- deser-group-identifier-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-group-identifier coll))) input))

(clojure.core/defn- deser-cancel-spot-fleet-requests-error-item [input] (clojure.core/let [letvar214442 {"error" (portkey.aws/getback-xml-elem-with-tag "error" input), "spotFleetRequestId" (portkey.aws/getback-xml-elem-with-tag "spotFleetRequestId" input)}] (clojure.core/cond-> {:error (deser-cancel-spot-fleet-requests-error (clojure.core/get-in letvar214442 ["error" :content])), :spot-fleet-request-id (deser-string (clojure.core/get-in letvar214442 ["spotFleetRequestId" :content]))})))

(clojure.core/defn- deser-payment-option [input] (clojure.core/get {"AllUpfront" :all-upfront, "PartialUpfront" :partial-upfront, "NoUpfront" :no-upfront} (clojure.core/first input)))

(clojure.core/defn- deser-instance-status-details-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-status-details coll))) input))

(clojure.core/defn- deser-key-pair-info [input] (clojure.core/let [letvar214542 {"keyFingerprint" (portkey.aws/getback-xml-elem-with-tag "keyFingerprint" input), "keyName" (portkey.aws/getback-xml-elem-with-tag "keyName" input)}] (clojure.core/cond-> {} (letvar214542 "keyFingerprint") (clojure.core/assoc :key-fingerprint (deser-string (clojure.core/get-in letvar214542 ["keyFingerprint" :content]))) (letvar214542 "keyName") (clojure.core/assoc :key-name (deser-string (clojure.core/get-in letvar214542 ["keyName" :content]))))))

(clojure.core/defn- deser-instance-network-interface [input] (clojure.core/let [letvar214620 {"groupSet" (portkey.aws/getback-xml-elem-with-tag "groupSet" input), "association" (portkey.aws/getback-xml-elem-with-tag "association" input), "subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input), "privateIpAddressesSet" (portkey.aws/getback-xml-elem-with-tag "privateIpAddressesSet" input), "privateIpAddress" (portkey.aws/getback-xml-elem-with-tag "privateIpAddress" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "privateDnsName" (portkey.aws/getback-xml-elem-with-tag "privateDnsName" input), "macAddress" (portkey.aws/getback-xml-elem-with-tag "macAddress" input), "attachment" (portkey.aws/getback-xml-elem-with-tag "attachment" input), "sourceDestCheck" (portkey.aws/getback-xml-elem-with-tag "sourceDestCheck" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "ipv6AddressesSet" (portkey.aws/getback-xml-elem-with-tag "ipv6AddressesSet" input), "networkInterfaceId" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceId" input), "ownerId" (portkey.aws/getback-xml-elem-with-tag "ownerId" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input)}] (clojure.core/cond-> {} (letvar214620 "attachment") (clojure.core/assoc :attachment (deser-instance-network-interface-attachment (clojure.core/get-in letvar214620 ["attachment" :content]))) (letvar214620 "ipv6AddressesSet") (clojure.core/assoc :ipv-6-addresses (deser-instance-ipv-6-address-list (clojure.core/get-in letvar214620 ["ipv6AddressesSet" :content]))) (letvar214620 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar214620 ["subnetId" :content]))) (letvar214620 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar214620 ["ownerId" :content]))) (letvar214620 "macAddress") (clojure.core/assoc :mac-address (deser-string (clojure.core/get-in letvar214620 ["macAddress" :content]))) (letvar214620 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar214620 ["networkInterfaceId" :content]))) (letvar214620 "sourceDestCheck") (clojure.core/assoc :source-dest-check (deser-boolean (clojure.core/get-in letvar214620 ["sourceDestCheck" :content]))) (letvar214620 "status") (clojure.core/assoc :status (deser-network-interface-status (clojure.core/get-in letvar214620 ["status" :content]))) (letvar214620 "privateDnsName") (clojure.core/assoc :private-dns-name (deser-string (clojure.core/get-in letvar214620 ["privateDnsName" :content]))) (letvar214620 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar214620 ["description" :content]))) (letvar214620 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar214620 ["vpcId" :content]))) (letvar214620 "groupSet") (clojure.core/assoc :groups (deser-group-identifier-list (clojure.core/get-in letvar214620 ["groupSet" :content]))) (letvar214620 "privateIpAddressesSet") (clojure.core/assoc :private-ip-addresses (deser-instance-private-ip-address-list (clojure.core/get-in letvar214620 ["privateIpAddressesSet" :content]))) (letvar214620 "association") (clojure.core/assoc :association (deser-instance-network-interface-association (clojure.core/get-in letvar214620 ["association" :content]))) (letvar214620 "privateIpAddress") (clojure.core/assoc :private-ip-address (deser-string (clojure.core/get-in letvar214620 ["privateIpAddress" :content]))))))

(clojure.core/defn- deser-cancel-spot-fleet-requests-error [input] (clojure.core/let [letvar214698 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "message" (portkey.aws/getback-xml-elem-with-tag "message" input)}] (clojure.core/cond-> {:code (deser-cancel-batch-error-code (clojure.core/get-in letvar214698 ["code" :content])), :message (deser-string (clojure.core/get-in letvar214698 ["message" :content]))})))

(clojure.core/defn- deser-vpn-static-route-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpn-static-route coll))) input))

(clojure.core/defn- deser-reservation [input] (clojure.core/let [letvar214793 {"groupSet" (portkey.aws/getback-xml-elem-with-tag "groupSet" input), "instancesSet" (portkey.aws/getback-xml-elem-with-tag "instancesSet" input), "ownerId" (portkey.aws/getback-xml-elem-with-tag "ownerId" input), "requesterId" (portkey.aws/getback-xml-elem-with-tag "requesterId" input), "reservationId" (portkey.aws/getback-xml-elem-with-tag "reservationId" input)}] (clojure.core/cond-> {} (letvar214793 "groupSet") (clojure.core/assoc :groups (deser-group-identifier-list (clojure.core/get-in letvar214793 ["groupSet" :content]))) (letvar214793 "instancesSet") (clojure.core/assoc :instances (deser-instance-list (clojure.core/get-in letvar214793 ["instancesSet" :content]))) (letvar214793 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar214793 ["ownerId" :content]))) (letvar214793 "requesterId") (clojure.core/assoc :requester-id (deser-string (clojure.core/get-in letvar214793 ["requesterId" :content]))) (letvar214793 "reservationId") (clojure.core/assoc :reservation-id (deser-string (clojure.core/get-in letvar214793 ["reservationId" :content]))))))

(clojure.core/defn- deser-unsuccessful-item-error [input] (clojure.core/let [letvar214871 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "message" (portkey.aws/getback-xml-elem-with-tag "message" input)}] (clojure.core/cond-> {:code (deser-string (clojure.core/get-in letvar214871 ["code" :content])), :message (deser-string (clojure.core/get-in letvar214871 ["message" :content]))})))

(clojure.core/defn- deser-elastic-gpu-association-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-elastic-gpu-association coll))) input))

(clojure.core/defn- deser-vpc-peering-connection-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpc-peering-connection coll))) input))

(clojure.core/defn- deser-unsuccessful-item-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-unsuccessful-item coll))) input))

(clojure.core/defn- deser-security-group-references [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-security-group-reference coll))) input))

(clojure.core/defn- deser-stale-ip-permission [input] (clojure.core/let [letvar215017 {"fromPort" (portkey.aws/getback-xml-elem-with-tag "fromPort" input), "ipProtocol" (portkey.aws/getback-xml-elem-with-tag "ipProtocol" input), "ipRanges" (portkey.aws/getback-xml-elem-with-tag "ipRanges" input), "prefixListIds" (portkey.aws/getback-xml-elem-with-tag "prefixListIds" input), "toPort" (portkey.aws/getback-xml-elem-with-tag "toPort" input), "groups" (portkey.aws/getback-xml-elem-with-tag "groups" input)}] (clojure.core/cond-> {} (letvar215017 "fromPort") (clojure.core/assoc :from-port (deser-integer (clojure.core/get-in letvar215017 ["fromPort" :content]))) (letvar215017 "ipProtocol") (clojure.core/assoc :ip-protocol (deser-string (clojure.core/get-in letvar215017 ["ipProtocol" :content]))) (letvar215017 "ipRanges") (clojure.core/assoc :ip-ranges (deser-ip-ranges (clojure.core/get-in letvar215017 ["ipRanges" :content]))) (letvar215017 "prefixListIds") (clojure.core/assoc :prefix-list-ids (deser-prefix-list-id-set (clojure.core/get-in letvar215017 ["prefixListIds" :content]))) (letvar215017 "toPort") (clojure.core/assoc :to-port (deser-integer (clojure.core/get-in letvar215017 ["toPort" :content]))) (letvar215017 "groups") (clojure.core/assoc :user-id-group-pairs (deser-user-id-group-pair-set (clojure.core/get-in letvar215017 ["groups" :content]))))))

(clojure.core/defn- deser-traffic-type [input] (clojure.core/get {"ACCEPT" :accept, "REJECT" :reject, "ALL" :all} (clojure.core/first input)))

(clojure.core/defn- deser-vpc-cidr-block-association-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpc-cidr-block-association coll))) input))

(clojure.core/defn- deser-availability-zone-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-availability-zone coll))) input))

(clojure.core/defn- deser-launch-template-tag-specification [input] (clojure.core/let [letvar215134 {"resourceType" (portkey.aws/getback-xml-elem-with-tag "resourceType" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input)}] (clojure.core/cond-> {} (letvar215134 "resourceType") (clojure.core/assoc :resource-type (deser-resource-type (clojure.core/get-in letvar215134 ["resourceType" :content]))) (letvar215134 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar215134 ["tagSet" :content]))))))

(clojure.core/defn- deser-vpc-endpoint-connection [input] (clojure.core/let [letvar215212 {"serviceId" (portkey.aws/getback-xml-elem-with-tag "serviceId" input), "vpcEndpointId" (portkey.aws/getback-xml-elem-with-tag "vpcEndpointId" input), "vpcEndpointOwner" (portkey.aws/getback-xml-elem-with-tag "vpcEndpointOwner" input), "vpcEndpointState" (portkey.aws/getback-xml-elem-with-tag "vpcEndpointState" input), "creationTimestamp" (portkey.aws/getback-xml-elem-with-tag "creationTimestamp" input)}] (clojure.core/cond-> {} (letvar215212 "serviceId") (clojure.core/assoc :service-id (deser-string (clojure.core/get-in letvar215212 ["serviceId" :content]))) (letvar215212 "vpcEndpointId") (clojure.core/assoc :vpc-endpoint-id (deser-string (clojure.core/get-in letvar215212 ["vpcEndpointId" :content]))) (letvar215212 "vpcEndpointOwner") (clojure.core/assoc :vpc-endpoint-owner (deser-string (clojure.core/get-in letvar215212 ["vpcEndpointOwner" :content]))) (letvar215212 "vpcEndpointState") (clojure.core/assoc :vpc-endpoint-state (deser-state (clojure.core/get-in letvar215212 ["vpcEndpointState" :content]))) (letvar215212 "creationTimestamp") (clojure.core/assoc :creation-timestamp (deser-date-time (clojure.core/get-in letvar215212 ["creationTimestamp" :content]))))))

(clojure.core/defn- deser-launch-template-spot-market-options [input] (clojure.core/let [letvar215290 {"maxPrice" (portkey.aws/getback-xml-elem-with-tag "maxPrice" input), "spotInstanceType" (portkey.aws/getback-xml-elem-with-tag "spotInstanceType" input), "blockDurationMinutes" (portkey.aws/getback-xml-elem-with-tag "blockDurationMinutes" input), "validUntil" (portkey.aws/getback-xml-elem-with-tag "validUntil" input), "instanceInterruptionBehavior" (portkey.aws/getback-xml-elem-with-tag "instanceInterruptionBehavior" input)}] (clojure.core/cond-> {} (letvar215290 "maxPrice") (clojure.core/assoc :max-price (deser-string (clojure.core/get-in letvar215290 ["maxPrice" :content]))) (letvar215290 "spotInstanceType") (clojure.core/assoc :spot-instance-type (deser-spot-instance-type (clojure.core/get-in letvar215290 ["spotInstanceType" :content]))) (letvar215290 "blockDurationMinutes") (clojure.core/assoc :block-duration-minutes (deser-integer (clojure.core/get-in letvar215290 ["blockDurationMinutes" :content]))) (letvar215290 "validUntil") (clojure.core/assoc :valid-until (deser-date-time (clojure.core/get-in letvar215290 ["validUntil" :content]))) (letvar215290 "instanceInterruptionBehavior") (clojure.core/assoc :instance-interruption-behavior (deser-instance-interruption-behavior (clojure.core/get-in letvar215290 ["instanceInterruptionBehavior" :content]))))))

(clojure.core/defn- deser-availability-zone [input] (clojure.core/let [letvar215368 {"zoneState" (portkey.aws/getback-xml-elem-with-tag "zoneState" input), "messageSet" (portkey.aws/getback-xml-elem-with-tag "messageSet" input), "regionName" (portkey.aws/getback-xml-elem-with-tag "regionName" input), "zoneName" (portkey.aws/getback-xml-elem-with-tag "zoneName" input)}] (clojure.core/cond-> {} (letvar215368 "zoneState") (clojure.core/assoc :state (deser-availability-zone-state (clojure.core/get-in letvar215368 ["zoneState" :content]))) (letvar215368 "messageSet") (clojure.core/assoc :messages (deser-availability-zone-message-list (clojure.core/get-in letvar215368 ["messageSet" :content]))) (letvar215368 "regionName") (clojure.core/assoc :region-name (deser-string (clojure.core/get-in letvar215368 ["regionName" :content]))) (letvar215368 "zoneName") (clojure.core/assoc :zone-name (deser-string (clojure.core/get-in letvar215368 ["zoneName" :content]))))))

(clojure.core/defn- deser-route-origin [input] (clojure.core/get {"CreateRouteTable" :create-route-table, "CreateRoute" :create-route, "EnableVgwRoutePropagation" :enable-vgw-route-propagation} (clojure.core/first input)))

(clojure.core/defn- deser-fpga-image-attribute [input] (clojure.core/let [letvar215451 {"fpgaImageId" (portkey.aws/getback-xml-elem-with-tag "fpgaImageId" input), "name" (portkey.aws/getback-xml-elem-with-tag "name" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input), "loadPermissions" (portkey.aws/getback-xml-elem-with-tag "loadPermissions" input), "productCodes" (portkey.aws/getback-xml-elem-with-tag "productCodes" input)}] (clojure.core/cond-> {} (letvar215451 "fpgaImageId") (clojure.core/assoc :fpga-image-id (deser-string (clojure.core/get-in letvar215451 ["fpgaImageId" :content]))) (letvar215451 "name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar215451 ["name" :content]))) (letvar215451 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar215451 ["description" :content]))) (letvar215451 "loadPermissions") (clojure.core/assoc :load-permissions (deser-load-permission-list (clojure.core/get-in letvar215451 ["loadPermissions" :content]))) (letvar215451 "productCodes") (clojure.core/assoc :product-codes (deser-product-code-list (clojure.core/get-in letvar215451 ["productCodes" :content]))))))

(clojure.core/defn- deser-create-volume-permission-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-create-volume-permission coll))) input))

(clojure.core/defn- deser-status [input] (clojure.core/get {"MoveInProgress" :move-in-progress, "InVpc" :in-vpc, "InClassic" :in-classic} (clojure.core/first input)))

(clojure.core/defn- deser-network-interface-type [input] (clojure.core/get {"interface" :interface, "natGateway" :nat-gateway} (clojure.core/first input)))

(clojure.core/defn- deser-cancelled-spot-instance-request-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cancelled-spot-instance-request coll))) input))

(clojure.core/defn- deser-vpc-ipv-6-cidr-block-association [input] (clojure.core/let [letvar215573 {"associationId" (portkey.aws/getback-xml-elem-with-tag "associationId" input), "ipv6CidrBlock" (portkey.aws/getback-xml-elem-with-tag "ipv6CidrBlock" input), "ipv6CidrBlockState" (portkey.aws/getback-xml-elem-with-tag "ipv6CidrBlockState" input)}] (clojure.core/cond-> {} (letvar215573 "associationId") (clojure.core/assoc :association-id (deser-string (clojure.core/get-in letvar215573 ["associationId" :content]))) (letvar215573 "ipv6CidrBlock") (clojure.core/assoc :ipv-6-cidr-block (deser-string (clojure.core/get-in letvar215573 ["ipv6CidrBlock" :content]))) (letvar215573 "ipv6CidrBlockState") (clojure.core/assoc :ipv-6-cidr-block-state (deser-vpc-cidr-block-state (clojure.core/get-in letvar215573 ["ipv6CidrBlockState" :content]))))))

(clojure.core/defn- deser-event-type [input] (clojure.core/get {"instanceChange" :instance-change, "fleetRequestChange" :fleet-request-change, "error" :error} (clojure.core/first input)))

(clojure.core/defn- deser-moving-address-status [input] (clojure.core/let [letvar215656 {"moveStatus" (portkey.aws/getback-xml-elem-with-tag "moveStatus" input), "publicIp" (portkey.aws/getback-xml-elem-with-tag "publicIp" input)}] (clojure.core/cond-> {} (letvar215656 "moveStatus") (clojure.core/assoc :move-status (deser-move-status (clojure.core/get-in letvar215656 ["moveStatus" :content]))) (letvar215656 "publicIp") (clojure.core/assoc :public-ip (deser-string (clojure.core/get-in letvar215656 ["publicIp" :content]))))))

(clojure.core/defn- deser-reserved-instances [input] (clojure.core/let [letvar215734 {"tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "instanceCount" (portkey.aws/getback-xml-elem-with-tag "instanceCount" input), "instanceTenancy" (portkey.aws/getback-xml-elem-with-tag "instanceTenancy" input), "offeringType" (portkey.aws/getback-xml-elem-with-tag "offeringType" input), "fixedPrice" (portkey.aws/getback-xml-elem-with-tag "fixedPrice" input), "start" (portkey.aws/getback-xml-elem-with-tag "start" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "scope" (portkey.aws/getback-xml-elem-with-tag "scope" input), "currencyCode" (portkey.aws/getback-xml-elem-with-tag "currencyCode" input), "recurringCharges" (portkey.aws/getback-xml-elem-with-tag "recurringCharges" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "duration" (portkey.aws/getback-xml-elem-with-tag "duration" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "productDescription" (portkey.aws/getback-xml-elem-with-tag "productDescription" input), "offeringClass" (portkey.aws/getback-xml-elem-with-tag "offeringClass" input), "reservedInstancesId" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesId" input), "usagePrice" (portkey.aws/getback-xml-elem-with-tag "usagePrice" input), "end" (portkey.aws/getback-xml-elem-with-tag "end" input)}] (clojure.core/cond-> {} (letvar215734 "currencyCode") (clojure.core/assoc :currency-code (deser-currency-code-values (clojure.core/get-in letvar215734 ["currencyCode" :content]))) (letvar215734 "instanceCount") (clojure.core/assoc :instance-count (deser-integer (clojure.core/get-in letvar215734 ["instanceCount" :content]))) (letvar215734 "start") (clojure.core/assoc :start (deser-date-time (clojure.core/get-in letvar215734 ["start" :content]))) (letvar215734 "instanceType") (clojure.core/assoc :instance-type (deser-instance-type (clojure.core/get-in letvar215734 ["instanceType" :content]))) (letvar215734 "fixedPrice") (clojure.core/assoc :fixed-price (deser-float (clojure.core/get-in letvar215734 ["fixedPrice" :content]))) (letvar215734 "end") (clojure.core/assoc :end (deser-date-time (clojure.core/get-in letvar215734 ["end" :content]))) (letvar215734 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar215734 ["tagSet" :content]))) (letvar215734 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar215734 ["availabilityZone" :content]))) (letvar215734 "instanceTenancy") (clojure.core/assoc :instance-tenancy (deser-tenancy (clojure.core/get-in letvar215734 ["instanceTenancy" :content]))) (letvar215734 "duration") (clojure.core/assoc :duration (deser-long (clojure.core/get-in letvar215734 ["duration" :content]))) (letvar215734 "usagePrice") (clojure.core/assoc :usage-price (deser-float (clojure.core/get-in letvar215734 ["usagePrice" :content]))) (letvar215734 "productDescription") (clojure.core/assoc :product-description (deser-ri-product-description (clojure.core/get-in letvar215734 ["productDescription" :content]))) (letvar215734 "reservedInstancesId") (clojure.core/assoc :reserved-instances-id (deser-string (clojure.core/get-in letvar215734 ["reservedInstancesId" :content]))) (letvar215734 "state") (clojure.core/assoc :state (deser-reserved-instance-state (clojure.core/get-in letvar215734 ["state" :content]))) (letvar215734 "offeringClass") (clojure.core/assoc :offering-class (deser-offering-class-type (clojure.core/get-in letvar215734 ["offeringClass" :content]))) (letvar215734 "recurringCharges") (clojure.core/assoc :recurring-charges (deser-recurring-charges-list (clojure.core/get-in letvar215734 ["recurringCharges" :content]))) (letvar215734 "offeringType") (clojure.core/assoc :offering-type (deser-offering-type-values (clojure.core/get-in letvar215734 ["offeringType" :content]))) (letvar215734 "scope") (clojure.core/assoc :scope (deserscope (clojure.core/get-in letvar215734 ["scope" :content]))))))

(clojure.core/defn- deser-network-interface-permission-state [input] (clojure.core/let [letvar215812 {"state" (portkey.aws/getback-xml-elem-with-tag "state" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input)}] (clojure.core/cond-> {} (letvar215812 "state") (clojure.core/assoc :state (deser-network-interface-permission-state-code (clojure.core/get-in letvar215812 ["state" :content]))) (letvar215812 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar215812 ["statusMessage" :content]))))))

(clojure.core/defn- deser-next-token [input] (clojure.core/first input))

(clojure.core/defn- deser-elastic-gpu-association [input] (clojure.core/let [letvar215895 {"elasticGpuId" (portkey.aws/getback-xml-elem-with-tag "elasticGpuId" input), "elasticGpuAssociationId" (portkey.aws/getback-xml-elem-with-tag "elasticGpuAssociationId" input), "elasticGpuAssociationState" (portkey.aws/getback-xml-elem-with-tag "elasticGpuAssociationState" input), "elasticGpuAssociationTime" (portkey.aws/getback-xml-elem-with-tag "elasticGpuAssociationTime" input)}] (clojure.core/cond-> {} (letvar215895 "elasticGpuId") (clojure.core/assoc :elastic-gpu-id (deser-string (clojure.core/get-in letvar215895 ["elasticGpuId" :content]))) (letvar215895 "elasticGpuAssociationId") (clojure.core/assoc :elastic-gpu-association-id (deser-string (clojure.core/get-in letvar215895 ["elasticGpuAssociationId" :content]))) (letvar215895 "elasticGpuAssociationState") (clojure.core/assoc :elastic-gpu-association-state (deser-string (clojure.core/get-in letvar215895 ["elasticGpuAssociationState" :content]))) (letvar215895 "elasticGpuAssociationTime") (clojure.core/assoc :elastic-gpu-association-time (deser-string (clojure.core/get-in letvar215895 ["elasticGpuAssociationTime" :content]))))))

(clojure.core/defn- deser-egress-only-internet-gateway-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-egress-only-internet-gateway coll))) input))

(clojure.core/defn- deser-excess-capacity-termination-policy [input] (clojure.core/get {"noTermination" :no-termination, "default" :default} (clojure.core/first input)))

(clojure.core/defn- deser-prefix-list [input] (clojure.core/let [letvar215995 {"cidrSet" (portkey.aws/getback-xml-elem-with-tag "cidrSet" input), "prefixListId" (portkey.aws/getback-xml-elem-with-tag "prefixListId" input), "prefixListName" (portkey.aws/getback-xml-elem-with-tag "prefixListName" input)}] (clojure.core/cond-> {} (letvar215995 "cidrSet") (clojure.core/assoc :cidrs (deser-value-string-list (clojure.core/get-in letvar215995 ["cidrSet" :content]))) (letvar215995 "prefixListId") (clojure.core/assoc :prefix-list-id (deser-string (clojure.core/get-in letvar215995 ["prefixListId" :content]))) (letvar215995 "prefixListName") (clojure.core/assoc :prefix-list-name (deser-string (clojure.core/get-in letvar215995 ["prefixListName" :content]))))))

(clojure.core/defn- deser-import-instance-volume-detail-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-import-instance-volume-detail-item coll))) input))

(clojure.core/defn- deser-status-type [input] (clojure.core/get {"passed" :passed, "failed" :failed, "insufficient-data" :insufficientdata, "initializing" :initializing} (clojure.core/first input)))

(clojure.core/defn- deser-spot-fleet-monitoring [input] (clojure.core/let [letvar216095 {"enabled" (portkey.aws/getback-xml-elem-with-tag "enabled" input)}] (clojure.core/cond-> {} (letvar216095 "enabled") (clojure.core/assoc :enabled (deser-boolean (clojure.core/get-in letvar216095 ["enabled" :content]))))))

(clojure.core/defn- deser-reserved-instances-listing [input] (clojure.core/let [letvar216173 {"updateDate" (portkey.aws/getback-xml-elem-with-tag "updateDate" input), "createDate" (portkey.aws/getback-xml-elem-with-tag "createDate" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "clientToken" (portkey.aws/getback-xml-elem-with-tag "clientToken" input), "reservedInstancesListingId" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesListingId" input), "instanceCounts" (portkey.aws/getback-xml-elem-with-tag "instanceCounts" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input), "priceSchedules" (portkey.aws/getback-xml-elem-with-tag "priceSchedules" input), "reservedInstancesId" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesId" input)}] (clojure.core/cond-> {} (letvar216173 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar216173 ["statusMessage" :content]))) (letvar216173 "createDate") (clojure.core/assoc :create-date (deser-date-time (clojure.core/get-in letvar216173 ["createDate" :content]))) (letvar216173 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar216173 ["tagSet" :content]))) (letvar216173 "status") (clojure.core/assoc :status (deser-listing-status (clojure.core/get-in letvar216173 ["status" :content]))) (letvar216173 "priceSchedules") (clojure.core/assoc :price-schedules (deser-price-schedule-list (clojure.core/get-in letvar216173 ["priceSchedules" :content]))) (letvar216173 "updateDate") (clojure.core/assoc :update-date (deser-date-time (clojure.core/get-in letvar216173 ["updateDate" :content]))) (letvar216173 "reservedInstancesId") (clojure.core/assoc :reserved-instances-id (deser-string (clojure.core/get-in letvar216173 ["reservedInstancesId" :content]))) (letvar216173 "reservedInstancesListingId") (clojure.core/assoc :reserved-instances-listing-id (deser-string (clojure.core/get-in letvar216173 ["reservedInstancesListingId" :content]))) (letvar216173 "instanceCounts") (clojure.core/assoc :instance-counts (deser-instance-count-list (clojure.core/get-in letvar216173 ["instanceCounts" :content]))) (letvar216173 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar216173 ["clientToken" :content]))))))

(clojure.core/defn- deser-vpc-cidr-block-state [input] (clojure.core/let [letvar216251 {"state" (portkey.aws/getback-xml-elem-with-tag "state" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input)}] (clojure.core/cond-> {} (letvar216251 "state") (clojure.core/assoc :state (deser-vpc-cidr-block-state-code (clojure.core/get-in letvar216251 ["state" :content]))) (letvar216251 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar216251 ["statusMessage" :content]))))))

(clojure.core/defn- deser-instance-status-summary [input] (clojure.core/let [letvar216329 {"details" (portkey.aws/getback-xml-elem-with-tag "details" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input)}] (clojure.core/cond-> {} (letvar216329 "details") (clojure.core/assoc :details (deser-instance-status-details-list (clojure.core/get-in letvar216329 ["details" :content]))) (letvar216329 "status") (clojure.core/assoc :status (deser-summary-status (clojure.core/get-in letvar216329 ["status" :content]))))))

(clojure.core/defn- deser-nat-gateway-address [input] (clojure.core/let [letvar216407 {"allocationId" (portkey.aws/getback-xml-elem-with-tag "allocationId" input), "networkInterfaceId" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceId" input), "privateIp" (portkey.aws/getback-xml-elem-with-tag "privateIp" input), "publicIp" (portkey.aws/getback-xml-elem-with-tag "publicIp" input)}] (clojure.core/cond-> {} (letvar216407 "allocationId") (clojure.core/assoc :allocation-id (deser-string (clojure.core/get-in letvar216407 ["allocationId" :content]))) (letvar216407 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar216407 ["networkInterfaceId" :content]))) (letvar216407 "privateIp") (clojure.core/assoc :private-ip (deser-string (clojure.core/get-in letvar216407 ["privateIp" :content]))) (letvar216407 "publicIp") (clojure.core/assoc :public-ip (deser-string (clojure.core/get-in letvar216407 ["publicIp" :content]))))))

(clojure.core/defn- deser-instance-status-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-status coll))) input))

(clojure.core/defn- deser-placement-group-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-placement-group coll))) input))

(clojure.core/defn- deser-address-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-address coll))) input))

(clojure.core/defn- deser-reserved-instances-offering-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-instances-offering coll))) input))

(clojure.core/defn- deser-cidr-block [input] (clojure.core/let [letvar216553 {"cidrBlock" (portkey.aws/getback-xml-elem-with-tag "cidrBlock" input)}] (clojure.core/cond-> {} (letvar216553 "cidrBlock") (clojure.core/assoc :cidr-block (deser-string (clojure.core/get-in letvar216553 ["cidrBlock" :content]))))))

(clojure.core/defn- deser-reserved-instances-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-instances coll))) input))

(clojure.core/defn- deser-image-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-image coll))) input))

(clojure.core/defn- deser-user-id-group-pair-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-user-id-group-pair coll))) input))

(clojure.core/defn- deser-s-3-storage [input] (clojure.core/let [letvar216682 {nil (portkey.aws/getback-xml-elem-with-tag nil input), "bucket" (portkey.aws/getback-xml-elem-with-tag "bucket" input), "prefix" (portkey.aws/getback-xml-elem-with-tag "prefix" input), "uploadPolicy" (portkey.aws/getback-xml-elem-with-tag "uploadPolicy" input), "uploadPolicySignature" (portkey.aws/getback-xml-elem-with-tag "uploadPolicySignature" input)}] (clojure.core/cond-> {} (letvar216682 nil) (clojure.core/assoc :aws-access-key-id (deser-string (clojure.core/get-in letvar216682 [nil :content]))) (letvar216682 "bucket") (clojure.core/assoc :bucket (deser-string (clojure.core/get-in letvar216682 ["bucket" :content]))) (letvar216682 "prefix") (clojure.core/assoc :prefix (deser-string (clojure.core/get-in letvar216682 ["prefix" :content]))) (letvar216682 "uploadPolicy") (clojure.core/assoc :upload-policy (deser-blob (clojure.core/get-in letvar216682 ["uploadPolicy" :content]))) (letvar216682 "uploadPolicySignature") (clojure.core/assoc :upload-policy-signature (deser-string (clojure.core/get-in letvar216682 ["uploadPolicySignature" :content]))))))

(clojure.core/defn- deser-recurring-charge [input] (clojure.core/let [letvar216760 {"amount" (portkey.aws/getback-xml-elem-with-tag "amount" input), "frequency" (portkey.aws/getback-xml-elem-with-tag "frequency" input)}] (clojure.core/cond-> {} (letvar216760 "amount") (clojure.core/assoc :amount (deser-double (clojure.core/get-in letvar216760 ["amount" :content]))) (letvar216760 "frequency") (clojure.core/assoc :frequency (deser-recurring-charge-frequency (clojure.core/get-in letvar216760 ["frequency" :content]))))))

(clojure.core/defn- deser-spot-fleet-request-config-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-spot-fleet-request-config coll))) input))

(clojure.core/defn- deser-launch-permission-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-launch-permission coll))) input))

(clojure.core/defn- deser-price-schedule-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-price-schedule coll))) input))

(clojure.core/defn- deser-instance-private-ip-address-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-private-ip-address coll))) input))

(clojure.core/defn- deser-instance-ipv-6-address [input] (clojure.core/let [letvar216906 {"ipv6Address" (portkey.aws/getback-xml-elem-with-tag "ipv6Address" input)}] (clojure.core/cond-> {} (letvar216906 "ipv6Address") (clojure.core/assoc :ipv-6-address (deser-string (clojure.core/get-in letvar216906 ["ipv6Address" :content]))))))

(clojure.core/defn- deser-group-identifier [input] (clojure.core/let [letvar216984 {"groupName" (portkey.aws/getback-xml-elem-with-tag "groupName" input), "groupId" (portkey.aws/getback-xml-elem-with-tag "groupId" input)}] (clojure.core/cond-> {} (letvar216984 "groupName") (clojure.core/assoc :group-name (deser-string (clojure.core/get-in letvar216984 ["groupName" :content]))) (letvar216984 "groupId") (clojure.core/assoc :group-id (deser-string (clojure.core/get-in letvar216984 ["groupId" :content]))))))

(clojure.core/defn- deser-fpga-image-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-fpga-image coll))) input))

(clojure.core/defn- deser-spot-price [input] (clojure.core/let [letvar217079 {"availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "productDescription" (portkey.aws/getback-xml-elem-with-tag "productDescription" input), "spotPrice" (portkey.aws/getback-xml-elem-with-tag "spotPrice" input), "timestamp" (portkey.aws/getback-xml-elem-with-tag "timestamp" input)}] (clojure.core/cond-> {} (letvar217079 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar217079 ["availabilityZone" :content]))) (letvar217079 "instanceType") (clojure.core/assoc :instance-type (deser-instance-type (clojure.core/get-in letvar217079 ["instanceType" :content]))) (letvar217079 "productDescription") (clojure.core/assoc :product-description (deser-ri-product-description (clojure.core/get-in letvar217079 ["productDescription" :content]))) (letvar217079 "spotPrice") (clojure.core/assoc :spot-price (deser-string (clojure.core/get-in letvar217079 ["spotPrice" :content]))) (letvar217079 "timestamp") (clojure.core/assoc :timestamp (deser-date-time (clojure.core/get-in letvar217079 ["timestamp" :content]))))))

(clojure.core/defn- deser-instance-id-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-scheduled-instance-availability-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-scheduled-instance-availability coll))) input))

(clojure.core/defn- deser-nat-gateway [input] (clojure.core/let [letvar217191 {"subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input), "failureMessage" (portkey.aws/getback-xml-elem-with-tag "failureMessage" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "deleteTime" (portkey.aws/getback-xml-elem-with-tag "deleteTime" input), "createTime" (portkey.aws/getback-xml-elem-with-tag "createTime" input), "natGatewayId" (portkey.aws/getback-xml-elem-with-tag "natGatewayId" input), "failureCode" (portkey.aws/getback-xml-elem-with-tag "failureCode" input), "natGatewayAddressSet" (portkey.aws/getback-xml-elem-with-tag "natGatewayAddressSet" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "provisionedBandwidth" (portkey.aws/getback-xml-elem-with-tag "provisionedBandwidth" input)}] (clojure.core/cond-> {} (letvar217191 "deleteTime") (clojure.core/assoc :delete-time (deser-date-time (clojure.core/get-in letvar217191 ["deleteTime" :content]))) (letvar217191 "provisionedBandwidth") (clojure.core/assoc :provisioned-bandwidth (deser-provisioned-bandwidth (clojure.core/get-in letvar217191 ["provisionedBandwidth" :content]))) (letvar217191 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar217191 ["subnetId" :content]))) (letvar217191 "natGatewayId") (clojure.core/assoc :nat-gateway-id (deser-string (clojure.core/get-in letvar217191 ["natGatewayId" :content]))) (letvar217191 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar217191 ["tagSet" :content]))) (letvar217191 "failureMessage") (clojure.core/assoc :failure-message (deser-string (clojure.core/get-in letvar217191 ["failureMessage" :content]))) (letvar217191 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar217191 ["vpcId" :content]))) (letvar217191 "natGatewayAddressSet") (clojure.core/assoc :nat-gateway-addresses (deser-nat-gateway-address-list (clojure.core/get-in letvar217191 ["natGatewayAddressSet" :content]))) (letvar217191 "createTime") (clojure.core/assoc :create-time (deser-date-time (clojure.core/get-in letvar217191 ["createTime" :content]))) (letvar217191 "state") (clojure.core/assoc :state (deser-nat-gateway-state (clojure.core/get-in letvar217191 ["state" :content]))) (letvar217191 "failureCode") (clojure.core/assoc :failure-code (deser-string (clojure.core/get-in letvar217191 ["failureCode" :content]))))))

(clojure.core/defn- deser-elastic-gpu-status [input] (clojure.core/get {"OK" :ok, "IMPAIRED" :impaired} (clojure.core/first input)))

(clojure.core/defn- deser-launch-template-iam-instance-profile-specification [input] (clojure.core/let [letvar217274 {"arn" (portkey.aws/getback-xml-elem-with-tag "arn" input), "name" (portkey.aws/getback-xml-elem-with-tag "name" input)}] (clojure.core/cond-> {} (letvar217274 "arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar217274 ["arn" :content]))) (letvar217274 "name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar217274 ["name" :content]))))))

(clojure.core/defn- deser-spot-instance-status [input] (clojure.core/let [letvar217352 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "message" (portkey.aws/getback-xml-elem-with-tag "message" input), "updateTime" (portkey.aws/getback-xml-elem-with-tag "updateTime" input)}] (clojure.core/cond-> {} (letvar217352 "code") (clojure.core/assoc :code (deser-string (clojure.core/get-in letvar217352 ["code" :content]))) (letvar217352 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar217352 ["message" :content]))) (letvar217352 "updateTime") (clojure.core/assoc :update-time (deser-date-time (clojure.core/get-in letvar217352 ["updateTime" :content]))))))

(clojure.core/defn- deser-delete-launch-template-versions-response-success-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-delete-launch-template-versions-response-success-item coll))) input))

(clojure.core/defn- deser-tag-description [input] (clojure.core/let [letvar217447 {"key" (portkey.aws/getback-xml-elem-with-tag "key" input), "resourceId" (portkey.aws/getback-xml-elem-with-tag "resourceId" input), "resourceType" (portkey.aws/getback-xml-elem-with-tag "resourceType" input), "value" (portkey.aws/getback-xml-elem-with-tag "value" input)}] (clojure.core/cond-> {} (letvar217447 "key") (clojure.core/assoc :key (deser-string (clojure.core/get-in letvar217447 ["key" :content]))) (letvar217447 "resourceId") (clojure.core/assoc :resource-id (deser-string (clojure.core/get-in letvar217447 ["resourceId" :content]))) (letvar217447 "resourceType") (clojure.core/assoc :resource-type (deser-resource-type (clojure.core/get-in letvar217447 ["resourceType" :content]))) (letvar217447 "value") (clojure.core/assoc :value (deser-string (clojure.core/get-in letvar217447 ["value" :content]))))))

(clojure.core/defn- deser-account-attribute-value-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-account-attribute-value coll))) input))

(clojure.core/defn- deser-import-snapshot-task-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-import-snapshot-task coll))) input))

(clojure.core/defn- deser-dhcp-options [input] (clojure.core/let [letvar217559 {"dhcpConfigurationSet" (portkey.aws/getback-xml-elem-with-tag "dhcpConfigurationSet" input), "dhcpOptionsId" (portkey.aws/getback-xml-elem-with-tag "dhcpOptionsId" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input)}] (clojure.core/cond-> {} (letvar217559 "dhcpConfigurationSet") (clojure.core/assoc :dhcp-configurations (deser-dhcp-configuration-list (clojure.core/get-in letvar217559 ["dhcpConfigurationSet" :content]))) (letvar217559 "dhcpOptionsId") (clojure.core/assoc :dhcp-options-id (deser-string (clojure.core/get-in letvar217559 ["dhcpOptionsId" :content]))) (letvar217559 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar217559 ["tagSet" :content]))))))

(clojure.core/defn- deser-spot-instance-interruption-behavior [input] (clojure.core/get {"hibernate" :hibernate, "stop" :stop, "terminate" :terminate} (clojure.core/first input)))

(clojure.core/defn- deser-run-instances-monitoring-enabled [input] (clojure.core/let [letvar217642 {"enabled" (portkey.aws/getback-xml-elem-with-tag "enabled" input)}] (clojure.core/cond-> {:enabled (deser-boolean (clojure.core/get-in letvar217642 ["enabled" :content]))})))

(clojure.core/defn- deser-user-id-group-pair-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-user-id-group-pair coll))) input))

(clojure.core/defn- deser-tag-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-tag coll))) input))

(clojure.core/defn- deser-network-acl-association-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-network-acl-association coll))) input))

(clojure.core/defn- deser-product-code-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-product-code coll))) input))

(clojure.core/defn- deser-volume-status-info-status [input] (clojure.core/get {"ok" :ok, "impaired" :impaired, "insufficient-data" :insufficientdata} (clojure.core/first input)))

(clojure.core/defn- deser-spot-fleet-request-config-data [input] (clojure.core/let [letvar217793 {"replaceUnhealthyInstances" (portkey.aws/getback-xml-elem-with-tag "replaceUnhealthyInstances" input), "instanceInterruptionBehavior" (portkey.aws/getback-xml-elem-with-tag "instanceInterruptionBehavior" input), "onDemandTargetCapacity" (portkey.aws/getback-xml-elem-with-tag "onDemandTargetCapacity" input), "validFrom" (portkey.aws/getback-xml-elem-with-tag "validFrom" input), "targetCapacity" (portkey.aws/getback-xml-elem-with-tag "targetCapacity" input), "clientToken" (portkey.aws/getback-xml-elem-with-tag "clientToken" input), "loadBalancersConfig" (portkey.aws/getback-xml-elem-with-tag "loadBalancersConfig" input), "launchTemplateConfigs" (portkey.aws/getback-xml-elem-with-tag "launchTemplateConfigs" input), "iamFleetRole" (portkey.aws/getback-xml-elem-with-tag "iamFleetRole" input), "fulfilledCapacity" (portkey.aws/getback-xml-elem-with-tag "fulfilledCapacity" input), "onDemandAllocationStrategy" (portkey.aws/getback-xml-elem-with-tag "onDemandAllocationStrategy" input), "allocationStrategy" (portkey.aws/getback-xml-elem-with-tag "allocationStrategy" input), "instancePoolsToUseCount" (portkey.aws/getback-xml-elem-with-tag "instancePoolsToUseCount" input), "excessCapacityTerminationPolicy" (portkey.aws/getback-xml-elem-with-tag "excessCapacityTerminationPolicy" input), "launchSpecifications" (portkey.aws/getback-xml-elem-with-tag "launchSpecifications" input), "spotPrice" (portkey.aws/getback-xml-elem-with-tag "spotPrice" input), "onDemandFulfilledCapacity" (portkey.aws/getback-xml-elem-with-tag "onDemandFulfilledCapacity" input), "terminateInstancesWithExpiration" (portkey.aws/getback-xml-elem-with-tag "terminateInstancesWithExpiration" input), "type" (portkey.aws/getback-xml-elem-with-tag "type" input), "validUntil" (portkey.aws/getback-xml-elem-with-tag "validUntil" input)}] (clojure.core/cond-> {:iam-fleet-role (deser-string (clojure.core/get-in letvar217793 ["iamFleetRole" :content])), :target-capacity (deser-integer (clojure.core/get-in letvar217793 ["targetCapacity" :content]))} (letvar217793 "onDemandAllocationStrategy") (clojure.core/assoc :on-demand-allocation-strategy (deser-on-demand-allocation-strategy (clojure.core/get-in letvar217793 ["onDemandAllocationStrategy" :content]))) (letvar217793 "type") (clojure.core/assoc :type (deser-fleet-type (clojure.core/get-in letvar217793 ["type" :content]))) (letvar217793 "validFrom") (clojure.core/assoc :valid-from (deser-date-time (clojure.core/get-in letvar217793 ["validFrom" :content]))) (letvar217793 "instancePoolsToUseCount") (clojure.core/assoc :instance-pools-to-use-count (deser-integer (clojure.core/get-in letvar217793 ["instancePoolsToUseCount" :content]))) (letvar217793 "excessCapacityTerminationPolicy") (clojure.core/assoc :excess-capacity-termination-policy (deser-excess-capacity-termination-policy (clojure.core/get-in letvar217793 ["excessCapacityTerminationPolicy" :content]))) (letvar217793 "spotPrice") (clojure.core/assoc :spot-price (deser-string (clojure.core/get-in letvar217793 ["spotPrice" :content]))) (letvar217793 "allocationStrategy") (clojure.core/assoc :allocation-strategy (deser-allocation-strategy (clojure.core/get-in letvar217793 ["allocationStrategy" :content]))) (letvar217793 "instanceInterruptionBehavior") (clojure.core/assoc :instance-interruption-behavior (deser-instance-interruption-behavior (clojure.core/get-in letvar217793 ["instanceInterruptionBehavior" :content]))) (letvar217793 "launchTemplateConfigs") (clojure.core/assoc :launch-template-configs (deser-launch-template-config-list (clojure.core/get-in letvar217793 ["launchTemplateConfigs" :content]))) (letvar217793 "loadBalancersConfig") (clojure.core/assoc :load-balancers-config (deser-load-balancers-config (clojure.core/get-in letvar217793 ["loadBalancersConfig" :content]))) (letvar217793 "fulfilledCapacity") (clojure.core/assoc :fulfilled-capacity (deser-double (clojure.core/get-in letvar217793 ["fulfilledCapacity" :content]))) (letvar217793 "terminateInstancesWithExpiration") (clojure.core/assoc :terminate-instances-with-expiration (deser-boolean (clojure.core/get-in letvar217793 ["terminateInstancesWithExpiration" :content]))) (letvar217793 "onDemandFulfilledCapacity") (clojure.core/assoc :on-demand-fulfilled-capacity (deser-double (clojure.core/get-in letvar217793 ["onDemandFulfilledCapacity" :content]))) (letvar217793 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar217793 ["clientToken" :content]))) (letvar217793 "launchSpecifications") (clojure.core/assoc :launch-specifications (deser-launch-specs-list (clojure.core/get-in letvar217793 ["launchSpecifications" :content]))) (letvar217793 "replaceUnhealthyInstances") (clojure.core/assoc :replace-unhealthy-instances (deser-boolean (clojure.core/get-in letvar217793 ["replaceUnhealthyInstances" :content]))) (letvar217793 "onDemandTargetCapacity") (clojure.core/assoc :on-demand-target-capacity (deser-integer (clojure.core/get-in letvar217793 ["onDemandTargetCapacity" :content]))) (letvar217793 "validUntil") (clojure.core/assoc :valid-until (deser-date-time (clojure.core/get-in letvar217793 ["validUntil" :content]))))))

(clojure.core/defn- deser-launch-template-overrides [input] (clojure.core/let [letvar217871 {"instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "spotPrice" (portkey.aws/getback-xml-elem-with-tag "spotPrice" input), "subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "weightedCapacity" (portkey.aws/getback-xml-elem-with-tag "weightedCapacity" input), "priority" (portkey.aws/getback-xml-elem-with-tag "priority" input)}] (clojure.core/cond-> {} (letvar217871 "instanceType") (clojure.core/assoc :instance-type (deser-instance-type (clojure.core/get-in letvar217871 ["instanceType" :content]))) (letvar217871 "spotPrice") (clojure.core/assoc :spot-price (deser-string (clojure.core/get-in letvar217871 ["spotPrice" :content]))) (letvar217871 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar217871 ["subnetId" :content]))) (letvar217871 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar217871 ["availabilityZone" :content]))) (letvar217871 "weightedCapacity") (clojure.core/assoc :weighted-capacity (deser-double (clojure.core/get-in letvar217871 ["weightedCapacity" :content]))) (letvar217871 "priority") (clojure.core/assoc :priority (deser-double (clojure.core/get-in letvar217871 ["priority" :content]))))))

(clojure.core/defn- deser-host-offering [input] (clojure.core/let [letvar217949 {"currencyCode" (portkey.aws/getback-xml-elem-with-tag "currencyCode" input), "duration" (portkey.aws/getback-xml-elem-with-tag "duration" input), "hourlyPrice" (portkey.aws/getback-xml-elem-with-tag "hourlyPrice" input), "instanceFamily" (portkey.aws/getback-xml-elem-with-tag "instanceFamily" input), "offeringId" (portkey.aws/getback-xml-elem-with-tag "offeringId" input), "paymentOption" (portkey.aws/getback-xml-elem-with-tag "paymentOption" input), "upfrontPrice" (portkey.aws/getback-xml-elem-with-tag "upfrontPrice" input)}] (clojure.core/cond-> {} (letvar217949 "currencyCode") (clojure.core/assoc :currency-code (deser-currency-code-values (clojure.core/get-in letvar217949 ["currencyCode" :content]))) (letvar217949 "duration") (clojure.core/assoc :duration (deser-integer (clojure.core/get-in letvar217949 ["duration" :content]))) (letvar217949 "hourlyPrice") (clojure.core/assoc :hourly-price (deser-string (clojure.core/get-in letvar217949 ["hourlyPrice" :content]))) (letvar217949 "instanceFamily") (clojure.core/assoc :instance-family (deser-string (clojure.core/get-in letvar217949 ["instanceFamily" :content]))) (letvar217949 "offeringId") (clojure.core/assoc :offering-id (deser-string (clojure.core/get-in letvar217949 ["offeringId" :content]))) (letvar217949 "paymentOption") (clojure.core/assoc :payment-option (deser-payment-option (clojure.core/get-in letvar217949 ["paymentOption" :content]))) (letvar217949 "upfrontPrice") (clojure.core/assoc :upfront-price (deser-string (clojure.core/get-in letvar217949 ["upfrontPrice" :content]))))))

(clojure.core/defn- deser-unsuccessful-instance-credit-specification-error-code [input] (clojure.core/get {"InvalidInstanceID.Malformed" :invalid-instance-id-malformed, "InvalidInstanceID.NotFound" :invalid-instance-id-not-found, "IncorrectInstanceState" :incorrect-instance-state, "InstanceCreditSpecification.NotSupported" :instance-credit-specification-not-supported} (clojure.core/first input)))

(clojure.core/defn- deser-listing-state [input] (clojure.core/get {"available" :available, "sold" :sold, "cancelled" :cancelled, "pending" :pending} (clojure.core/first input)))

(clojure.core/defn- deser-volume-status-events-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-volume-status-event coll))) input))

(clojure.core/defn- deser-datafeed-subscription-state [input] (clojure.core/get {"Active" :active, "Inactive" :inactive} (clojure.core/first input)))

(clojure.core/defn- deser-service-detail [input] (clojure.core/let [letvar218059 {"serviceName" (portkey.aws/getback-xml-elem-with-tag "serviceName" input), "serviceType" (portkey.aws/getback-xml-elem-with-tag "serviceType" input), "availabilityZoneSet" (portkey.aws/getback-xml-elem-with-tag "availabilityZoneSet" input), "owner" (portkey.aws/getback-xml-elem-with-tag "owner" input), "baseEndpointDnsNameSet" (portkey.aws/getback-xml-elem-with-tag "baseEndpointDnsNameSet" input), "privateDnsName" (portkey.aws/getback-xml-elem-with-tag "privateDnsName" input), "vpcEndpointPolicySupported" (portkey.aws/getback-xml-elem-with-tag "vpcEndpointPolicySupported" input), "acceptanceRequired" (portkey.aws/getback-xml-elem-with-tag "acceptanceRequired" input)}] (clojure.core/cond-> {} (letvar218059 "serviceName") (clojure.core/assoc :service-name (deser-string (clojure.core/get-in letvar218059 ["serviceName" :content]))) (letvar218059 "serviceType") (clojure.core/assoc :service-type (deser-service-type-detail-set (clojure.core/get-in letvar218059 ["serviceType" :content]))) (letvar218059 "availabilityZoneSet") (clojure.core/assoc :availability-zones (deser-value-string-list (clojure.core/get-in letvar218059 ["availabilityZoneSet" :content]))) (letvar218059 "owner") (clojure.core/assoc :owner (deser-string (clojure.core/get-in letvar218059 ["owner" :content]))) (letvar218059 "baseEndpointDnsNameSet") (clojure.core/assoc :base-endpoint-dns-names (deser-value-string-list (clojure.core/get-in letvar218059 ["baseEndpointDnsNameSet" :content]))) (letvar218059 "privateDnsName") (clojure.core/assoc :private-dns-name (deser-string (clojure.core/get-in letvar218059 ["privateDnsName" :content]))) (letvar218059 "vpcEndpointPolicySupported") (clojure.core/assoc :vpc-endpoint-policy-supported (deser-boolean (clojure.core/get-in letvar218059 ["vpcEndpointPolicySupported" :content]))) (letvar218059 "acceptanceRequired") (clojure.core/assoc :acceptance-required (deser-boolean (clojure.core/get-in letvar218059 ["acceptanceRequired" :content]))))))

(clojure.core/defn- deser-network-interface-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-network-interface coll))) input))

(clojure.core/defn- deser-cancel-batch-error-code [input] (clojure.core/get {"fleetRequestIdDoesNotExist" :fleet-request-id-does-not-exist, "fleetRequestIdMalformed" :fleet-request-id-malformed, "fleetRequestNotInCancellableState" :fleet-request-not-in-cancellable-state, "unexpectedError" :unexpected-error} (clojure.core/first input)))

(clojure.core/defn- deser-target-configuration [input] (clojure.core/let [letvar218159 {"instanceCount" (portkey.aws/getback-xml-elem-with-tag "instanceCount" input), "offeringId" (portkey.aws/getback-xml-elem-with-tag "offeringId" input)}] (clojure.core/cond-> {} (letvar218159 "instanceCount") (clojure.core/assoc :instance-count (deser-integer (clojure.core/get-in letvar218159 ["instanceCount" :content]))) (letvar218159 "offeringId") (clojure.core/assoc :offering-id (deser-string (clojure.core/get-in letvar218159 ["offeringId" :content]))))))

(clojure.core/defn- deser-allocation-strategy [input] (clojure.core/get {"lowestPrice" :lowest-price, "diversified" :diversified} (clojure.core/first input)))

(clojure.core/defn- deser-status-name [input] (clojure.core/get {"reachability" :reachability} (clojure.core/first input)))

(clojure.core/defn- deser-volume-status-event [input] (clojure.core/let [letvar218247 {"description" (portkey.aws/getback-xml-elem-with-tag "description" input), "eventId" (portkey.aws/getback-xml-elem-with-tag "eventId" input), "eventType" (portkey.aws/getback-xml-elem-with-tag "eventType" input), "notAfter" (portkey.aws/getback-xml-elem-with-tag "notAfter" input), "notBefore" (portkey.aws/getback-xml-elem-with-tag "notBefore" input)}] (clojure.core/cond-> {} (letvar218247 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar218247 ["description" :content]))) (letvar218247 "eventId") (clojure.core/assoc :event-id (deser-string (clojure.core/get-in letvar218247 ["eventId" :content]))) (letvar218247 "eventType") (clojure.core/assoc :event-type (deser-string (clojure.core/get-in letvar218247 ["eventType" :content]))) (letvar218247 "notAfter") (clojure.core/assoc :not-after (deser-date-time (clojure.core/get-in letvar218247 ["notAfter" :content]))) (letvar218247 "notBefore") (clojure.core/assoc :not-before (deser-date-time (clojure.core/get-in letvar218247 ["notBefore" :content]))))))

(clojure.core/defn- deser-target-reservation-value [input] (clojure.core/let [letvar218325 {"reservationValue" (portkey.aws/getback-xml-elem-with-tag "reservationValue" input), "targetConfiguration" (portkey.aws/getback-xml-elem-with-tag "targetConfiguration" input)}] (clojure.core/cond-> {} (letvar218325 "reservationValue") (clojure.core/assoc :reservation-value (deser-reservation-value (clojure.core/get-in letvar218325 ["reservationValue" :content]))) (letvar218325 "targetConfiguration") (clojure.core/assoc :target-configuration (deser-target-configuration (clojure.core/get-in letvar218325 ["targetConfiguration" :content]))))))

(clojure.core/defn- deser-reserved-intances-ids [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-instances-id coll))) input))

(clojure.core/defn- deser-attribute-value [input] (clojure.core/let [letvar218420 {"value" (portkey.aws/getback-xml-elem-with-tag "value" input)}] (clojure.core/cond-> {} (letvar218420 "value") (clojure.core/assoc :value (deser-string (clojure.core/get-in letvar218420 ["value" :content]))))))

(clojure.core/defn- deser-launch-template-block-device-mapping-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-launch-template-block-device-mapping coll))) input))

(clojure.core/defn- deser-network-acl-association [input] (clojure.core/let [letvar218515 {"networkAclAssociationId" (portkey.aws/getback-xml-elem-with-tag "networkAclAssociationId" input), "networkAclId" (portkey.aws/getback-xml-elem-with-tag "networkAclId" input), "subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input)}] (clojure.core/cond-> {} (letvar218515 "networkAclAssociationId") (clojure.core/assoc :network-acl-association-id (deser-string (clojure.core/get-in letvar218515 ["networkAclAssociationId" :content]))) (letvar218515 "networkAclId") (clojure.core/assoc :network-acl-id (deser-string (clojure.core/get-in letvar218515 ["networkAclId" :content]))) (letvar218515 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar218515 ["subnetId" :content]))))))

(clojure.core/defn- deser-private-ip-address-specification-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-private-ip-address-specification coll))) input))

(clojure.core/defn- deser-auto-placement [input] (clojure.core/get {"on" :on, "off" :off} (clojure.core/first input)))

(clojure.core/defn- deser-prefix-list-id-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-prefix-list-id coll))) input))

(clojure.core/defn- deser-availability-zone-message-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-availability-zone-message coll))) input))

(clojure.core/defn- deser-history-records [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-history-record coll))) input))

(clojure.core/defn- deser-tag-description-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-tag-description coll))) input))

(clojure.core/defn- deser-product-code-values [input] (clojure.core/get {"devpay" :devpay, "marketplace" :marketplace} (clojure.core/first input)))

(clojure.core/defn- deser-fleet-launch-template-config [input] (clojure.core/let [letvar218688 {"launchTemplateSpecification" (portkey.aws/getback-xml-elem-with-tag "launchTemplateSpecification" input), "overrides" (portkey.aws/getback-xml-elem-with-tag "overrides" input)}] (clojure.core/cond-> {} (letvar218688 "launchTemplateSpecification") (clojure.core/assoc :launch-template-specification (deser-fleet-launch-template-specification (clojure.core/get-in letvar218688 ["launchTemplateSpecification" :content]))) (letvar218688 "overrides") (clojure.core/assoc :overrides (deser-fleet-launch-template-overrides-list (clojure.core/get-in letvar218688 ["overrides" :content]))))))

(clojure.core/defn- deser-instance-health-status [input] (clojure.core/get {"healthy" :healthy, "unhealthy" :unhealthy} (clojure.core/first input)))

(clojure.core/defn- deser-purchase-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-purchase coll))) input))

(clojure.core/defn- deser-ipv-6-cidr-block [input] (clojure.core/let [letvar218788 {"ipv6CidrBlock" (portkey.aws/getback-xml-elem-with-tag "ipv6CidrBlock" input)}] (clojure.core/cond-> {} (letvar218788 "ipv6CidrBlock") (clojure.core/assoc :ipv-6-cidr-block (deser-string (clojure.core/get-in letvar218788 ["ipv6CidrBlock" :content]))))))

(clojure.core/defn- deser-placement-strategy [input] (clojure.core/get {"cluster" :cluster, "spread" :spread} (clojure.core/first input)))

(clojure.core/defn- deser-internet-gateway-attachment-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-internet-gateway-attachment coll))) input))

(clojure.core/defn- deser-volume-status-info [input] (clojure.core/let [letvar218888 {"details" (portkey.aws/getback-xml-elem-with-tag "details" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input)}] (clojure.core/cond-> {} (letvar218888 "details") (clojure.core/assoc :details (deser-volume-status-details-list (clojure.core/get-in letvar218888 ["details" :content]))) (letvar218888 "status") (clojure.core/assoc :status (deser-volume-status-info-status (clojure.core/get-in letvar218888 ["status" :content]))))))

(clojure.core/defn- deser-instance-capacity [input] (clojure.core/let [letvar218966 {"availableCapacity" (portkey.aws/getback-xml-elem-with-tag "availableCapacity" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "totalCapacity" (portkey.aws/getback-xml-elem-with-tag "totalCapacity" input)}] (clojure.core/cond-> {} (letvar218966 "availableCapacity") (clojure.core/assoc :available-capacity (deser-integer (clojure.core/get-in letvar218966 ["availableCapacity" :content]))) (letvar218966 "instanceType") (clojure.core/assoc :instance-type (deser-string (clojure.core/get-in letvar218966 ["instanceType" :content]))) (letvar218966 "totalCapacity") (clojure.core/assoc :total-capacity (deser-integer (clojure.core/get-in letvar218966 ["totalCapacity" :content]))))))

(clojure.core/defn- deser-instance-block-device-mapping [input] (clojure.core/let [letvar219044 {"deviceName" (portkey.aws/getback-xml-elem-with-tag "deviceName" input), "ebs" (portkey.aws/getback-xml-elem-with-tag "ebs" input)}] (clojure.core/cond-> {} (letvar219044 "deviceName") (clojure.core/assoc :device-name (deser-string (clojure.core/get-in letvar219044 ["deviceName" :content]))) (letvar219044 "ebs") (clojure.core/assoc :ebs (deser-ebs-instance-block-device (clojure.core/get-in letvar219044 ["ebs" :content]))))))

(clojure.core/defn- deser-connection-notification-state [input] (clojure.core/get {"Enabled" :enabled, "Disabled" :disabled} (clojure.core/first input)))

(clojure.core/defn- deser-instance-interruption-behavior [input] (clojure.core/get {"hibernate" :hibernate, "stop" :stop, "terminate" :terminate} (clojure.core/first input)))

(clojure.core/defn- deser-customer-gateway-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-customer-gateway coll))) input))

(clojure.core/defn- deser-spot-options [input] (clojure.core/let [letvar219149 {"allocationStrategy" (portkey.aws/getback-xml-elem-with-tag "allocationStrategy" input), "instanceInterruptionBehavior" (portkey.aws/getback-xml-elem-with-tag "instanceInterruptionBehavior" input), "instancePoolsToUseCount" (portkey.aws/getback-xml-elem-with-tag "instancePoolsToUseCount" input)}] (clojure.core/cond-> {} (letvar219149 "allocationStrategy") (clojure.core/assoc :allocation-strategy (deser-spot-allocation-strategy (clojure.core/get-in letvar219149 ["allocationStrategy" :content]))) (letvar219149 "instanceInterruptionBehavior") (clojure.core/assoc :instance-interruption-behavior (deser-spot-instance-interruption-behavior (clojure.core/get-in letvar219149 ["instanceInterruptionBehavior" :content]))) (letvar219149 "instancePoolsToUseCount") (clojure.core/assoc :instance-pools-to-use-count (deser-integer (clojure.core/get-in letvar219149 ["instancePoolsToUseCount" :content]))))))

(clojure.core/defn- deser-classic-link-dns-support [input] (clojure.core/let [letvar219227 {"classicLinkDnsSupported" (portkey.aws/getback-xml-elem-with-tag "classicLinkDnsSupported" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input)}] (clojure.core/cond-> {} (letvar219227 "classicLinkDnsSupported") (clojure.core/assoc :classic-link-dns-supported (deser-boolean (clojure.core/get-in letvar219227 ["classicLinkDnsSupported" :content]))) (letvar219227 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar219227 ["vpcId" :content]))))))

(clojure.core/defn- deser-vpc-cidr-block-state-code [input] (clojure.core/get {"associating" :associating, "associated" :associated, "disassociating" :disassociating, "disassociated" :disassociated, "failing" :failing, "failed" :failed} (clojure.core/first input)))

(clojure.core/defn- deser-monitoring-state [input] (clojure.core/get {"disabled" :disabled, "disabling" :disabling, "enabled" :enabled, "pending" :pending} (clojure.core/first input)))

(clojure.core/defn- deser-reserved-instance-reservation-value-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-instance-reservation-value coll))) input))

(clojure.core/defn- deserscope [input] (clojure.core/get {"Availability Zone" :availability-zone, "Region" :region} (clojure.core/first input)))

(clojure.core/defn- deser-network-interface-permission-state-code [input] (clojure.core/get {"pending" :pending, "granted" :granted, "revoking" :revoking, "revoked" :revoked} (clojure.core/first input)))

(clojure.core/defn- deser-device-type [input] (clojure.core/get {"ebs" :ebs, "instance-store" :instancestore} (clojure.core/first input)))

(clojure.core/defn- deser-route-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-route coll))) input))

(clojure.core/defn- deser-pricing-detail [input] (clojure.core/let [letvar219364 {"count" (portkey.aws/getback-xml-elem-with-tag "count" input), "price" (portkey.aws/getback-xml-elem-with-tag "price" input)}] (clojure.core/cond-> {} (letvar219364 "count") (clojure.core/assoc :count (deser-integer (clojure.core/get-in letvar219364 ["count" :content]))) (letvar219364 "price") (clojure.core/assoc :price (deser-double (clojure.core/get-in letvar219364 ["price" :content]))))))

(clojure.core/defn- deser-import-volume-task-details [input] (clojure.core/let [letvar219442 {"availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "bytesConverted" (portkey.aws/getback-xml-elem-with-tag "bytesConverted" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input), "image" (portkey.aws/getback-xml-elem-with-tag "image" input), "volume" (portkey.aws/getback-xml-elem-with-tag "volume" input)}] (clojure.core/cond-> {} (letvar219442 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar219442 ["availabilityZone" :content]))) (letvar219442 "bytesConverted") (clojure.core/assoc :bytes-converted (deser-long (clojure.core/get-in letvar219442 ["bytesConverted" :content]))) (letvar219442 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar219442 ["description" :content]))) (letvar219442 "image") (clojure.core/assoc :image (deser-disk-image-description (clojure.core/get-in letvar219442 ["image" :content]))) (letvar219442 "volume") (clojure.core/assoc :volume (deser-disk-image-volume-description (clojure.core/get-in letvar219442 ["volume" :content]))))))

(clojure.core/defn- deser-subnet-cidr-block-state-code [input] (clojure.core/get {"associating" :associating, "associated" :associated, "disassociating" :disassociating, "disassociated" :disassociated, "failing" :failing, "failed" :failed} (clojure.core/first input)))

(clojure.core/defn- deser-fpga-image-state-code [input] (clojure.core/get {"pending" :pending, "failed" :failed, "available" :available, "unavailable" :unavailable} (clojure.core/first input)))

(clojure.core/defn- deser-on-demand-options [input] (clojure.core/let [letvar219530 {"allocationStrategy" (portkey.aws/getback-xml-elem-with-tag "allocationStrategy" input)}] (clojure.core/cond-> {} (letvar219530 "allocationStrategy") (clojure.core/assoc :allocation-strategy (deser-fleet-on-demand-allocation-strategy (clojure.core/get-in letvar219530 ["allocationStrategy" :content]))))))

(clojure.core/defn- deser-network-interface-status [input] (clojure.core/get {"available" :available, "associated" :associated, "attaching" :attaching, "in-use" :inuse, "detaching" :detaching} (clojure.core/first input)))

(clojure.core/defn- deser-vpc-classic-link-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpc-classic-link coll))) input))

(clojure.core/defn- deser-group-id-string-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-fleet-data [input] (clojure.core/let [letvar219647 {"spotOptions" (portkey.aws/getback-xml-elem-with-tag "spotOptions" input), "replaceUnhealthyInstances" (portkey.aws/getback-xml-elem-with-tag "replaceUnhealthyInstances" input), "validFrom" (portkey.aws/getback-xml-elem-with-tag "validFrom" input), "fleetId" (portkey.aws/getback-xml-elem-with-tag "fleetId" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "clientToken" (portkey.aws/getback-xml-elem-with-tag "clientToken" input), "launchTemplateConfigs" (portkey.aws/getback-xml-elem-with-tag "launchTemplateConfigs" input), "fulfilledCapacity" (portkey.aws/getback-xml-elem-with-tag "fulfilledCapacity" input), "targetCapacitySpecification" (portkey.aws/getback-xml-elem-with-tag "targetCapacitySpecification" input), "fleetState" (portkey.aws/getback-xml-elem-with-tag "fleetState" input), "createTime" (portkey.aws/getback-xml-elem-with-tag "createTime" input), "excessCapacityTerminationPolicy" (portkey.aws/getback-xml-elem-with-tag "excessCapacityTerminationPolicy" input), "activityStatus" (portkey.aws/getback-xml-elem-with-tag "activityStatus" input), "terminateInstancesWithExpiration" (portkey.aws/getback-xml-elem-with-tag "terminateInstancesWithExpiration" input), "onDemandOptions" (portkey.aws/getback-xml-elem-with-tag "onDemandOptions" input), "type" (portkey.aws/getback-xml-elem-with-tag "type" input), "validUntil" (portkey.aws/getback-xml-elem-with-tag "validUntil" input), "fulfilledOnDemandCapacity" (portkey.aws/getback-xml-elem-with-tag "fulfilledOnDemandCapacity" input)}] (clojure.core/cond-> {} (letvar219647 "type") (clojure.core/assoc :type (deser-fleet-type (clojure.core/get-in letvar219647 ["type" :content]))) (letvar219647 "fleetId") (clojure.core/assoc :fleet-id (deser-fleet-identifier (clojure.core/get-in letvar219647 ["fleetId" :content]))) (letvar219647 "fulfilledOnDemandCapacity") (clojure.core/assoc :fulfilled-on-demand-capacity (deser-double (clojure.core/get-in letvar219647 ["fulfilledOnDemandCapacity" :content]))) (letvar219647 "validFrom") (clojure.core/assoc :valid-from (deser-date-time (clojure.core/get-in letvar219647 ["validFrom" :content]))) (letvar219647 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar219647 ["tagSet" :content]))) (letvar219647 "excessCapacityTerminationPolicy") (clojure.core/assoc :excess-capacity-termination-policy (deser-fleet-excess-capacity-termination-policy (clojure.core/get-in letvar219647 ["excessCapacityTerminationPolicy" :content]))) (letvar219647 "spotOptions") (clojure.core/assoc :spot-options (deser-spot-options (clojure.core/get-in letvar219647 ["spotOptions" :content]))) (letvar219647 "launchTemplateConfigs") (clojure.core/assoc :launch-template-configs (deser-fleet-launch-template-config-list (clojure.core/get-in letvar219647 ["launchTemplateConfigs" :content]))) (letvar219647 "onDemandOptions") (clojure.core/assoc :on-demand-options (deser-on-demand-options (clojure.core/get-in letvar219647 ["onDemandOptions" :content]))) (letvar219647 "fulfilledCapacity") (clojure.core/assoc :fulfilled-capacity (deser-double (clojure.core/get-in letvar219647 ["fulfilledCapacity" :content]))) (letvar219647 "createTime") (clojure.core/assoc :create-time (deser-date-time (clojure.core/get-in letvar219647 ["createTime" :content]))) (letvar219647 "fleetState") (clojure.core/assoc :fleet-state (deser-fleet-state-code (clojure.core/get-in letvar219647 ["fleetState" :content]))) (letvar219647 "terminateInstancesWithExpiration") (clojure.core/assoc :terminate-instances-with-expiration (deser-boolean (clojure.core/get-in letvar219647 ["terminateInstancesWithExpiration" :content]))) (letvar219647 "targetCapacitySpecification") (clojure.core/assoc :target-capacity-specification (deser-target-capacity-specification (clojure.core/get-in letvar219647 ["targetCapacitySpecification" :content]))) (letvar219647 "activityStatus") (clojure.core/assoc :activity-status (deser-fleet-activity-status (clojure.core/get-in letvar219647 ["activityStatus" :content]))) (letvar219647 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar219647 ["clientToken" :content]))) (letvar219647 "replaceUnhealthyInstances") (clojure.core/assoc :replace-unhealthy-instances (deser-boolean (clojure.core/get-in letvar219647 ["replaceUnhealthyInstances" :content]))) (letvar219647 "validUntil") (clojure.core/assoc :valid-until (deser-date-time (clojure.core/get-in letvar219647 ["validUntil" :content]))))))

(clojure.core/defn- deser-price-schedule [input] (clojure.core/let [letvar219725 {"active" (portkey.aws/getback-xml-elem-with-tag "active" input), "currencyCode" (portkey.aws/getback-xml-elem-with-tag "currencyCode" input), "price" (portkey.aws/getback-xml-elem-with-tag "price" input), "term" (portkey.aws/getback-xml-elem-with-tag "term" input)}] (clojure.core/cond-> {} (letvar219725 "active") (clojure.core/assoc :active (deser-boolean (clojure.core/get-in letvar219725 ["active" :content]))) (letvar219725 "currencyCode") (clojure.core/assoc :currency-code (deser-currency-code-values (clojure.core/get-in letvar219725 ["currencyCode" :content]))) (letvar219725 "price") (clojure.core/assoc :price (deser-double (clojure.core/get-in letvar219725 ["price" :content]))) (letvar219725 "term") (clojure.core/assoc :term (deser-long (clojure.core/get-in letvar219725 ["term" :content]))))))

(clojure.core/defn- deser-iam-instance-profile-association [input] (clojure.core/let [letvar219803 {"associationId" (portkey.aws/getback-xml-elem-with-tag "associationId" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "iamInstanceProfile" (portkey.aws/getback-xml-elem-with-tag "iamInstanceProfile" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "timestamp" (portkey.aws/getback-xml-elem-with-tag "timestamp" input)}] (clojure.core/cond-> {} (letvar219803 "associationId") (clojure.core/assoc :association-id (deser-string (clojure.core/get-in letvar219803 ["associationId" :content]))) (letvar219803 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar219803 ["instanceId" :content]))) (letvar219803 "iamInstanceProfile") (clojure.core/assoc :iam-instance-profile (deser-iam-instance-profile (clojure.core/get-in letvar219803 ["iamInstanceProfile" :content]))) (letvar219803 "state") (clojure.core/assoc :state (deser-iam-instance-profile-association-state (clojure.core/get-in letvar219803 ["state" :content]))) (letvar219803 "timestamp") (clojure.core/assoc :timestamp (deser-date-time (clojure.core/get-in letvar219803 ["timestamp" :content]))))))

(clojure.core/defn- deser-reserved-instance-state [input] (clojure.core/get {"payment-pending" :paymentpending, "active" :active, "payment-failed" :paymentfailed, "retired" :retired} (clojure.core/first input)))

(clojure.core/defn- deser-allocation-state [input] (clojure.core/get {"available" :available, "under-assessment" :underassessment, "permanent-failure" :permanentfailure, "released" :released, "released-permanent-failure" :releasedpermanentfailure} (clojure.core/first input)))

(clojure.core/defn- deser-connection-notification [input] (clojure.core/let [letvar219891 {"connectionNotificationId" (portkey.aws/getback-xml-elem-with-tag "connectionNotificationId" input), "serviceId" (portkey.aws/getback-xml-elem-with-tag "serviceId" input), "vpcEndpointId" (portkey.aws/getback-xml-elem-with-tag "vpcEndpointId" input), "connectionNotificationType" (portkey.aws/getback-xml-elem-with-tag "connectionNotificationType" input), "connectionNotificationArn" (portkey.aws/getback-xml-elem-with-tag "connectionNotificationArn" input), "connectionEvents" (portkey.aws/getback-xml-elem-with-tag "connectionEvents" input), "connectionNotificationState" (portkey.aws/getback-xml-elem-with-tag "connectionNotificationState" input)}] (clojure.core/cond-> {} (letvar219891 "connectionNotificationId") (clojure.core/assoc :connection-notification-id (deser-string (clojure.core/get-in letvar219891 ["connectionNotificationId" :content]))) (letvar219891 "serviceId") (clojure.core/assoc :service-id (deser-string (clojure.core/get-in letvar219891 ["serviceId" :content]))) (letvar219891 "vpcEndpointId") (clojure.core/assoc :vpc-endpoint-id (deser-string (clojure.core/get-in letvar219891 ["vpcEndpointId" :content]))) (letvar219891 "connectionNotificationType") (clojure.core/assoc :connection-notification-type (deser-connection-notification-type (clojure.core/get-in letvar219891 ["connectionNotificationType" :content]))) (letvar219891 "connectionNotificationArn") (clojure.core/assoc :connection-notification-arn (deser-string (clojure.core/get-in letvar219891 ["connectionNotificationArn" :content]))) (letvar219891 "connectionEvents") (clojure.core/assoc :connection-events (deser-value-string-list (clojure.core/get-in letvar219891 ["connectionEvents" :content]))) (letvar219891 "connectionNotificationState") (clojure.core/assoc :connection-notification-state (deser-connection-notification-state (clojure.core/get-in letvar219891 ["connectionNotificationState" :content]))))))

(clojure.core/defn- deser-launch-template-block-device-mapping [input] (clojure.core/let [letvar219969 {"deviceName" (portkey.aws/getback-xml-elem-with-tag "deviceName" input), "virtualName" (portkey.aws/getback-xml-elem-with-tag "virtualName" input), "ebs" (portkey.aws/getback-xml-elem-with-tag "ebs" input), "noDevice" (portkey.aws/getback-xml-elem-with-tag "noDevice" input)}] (clojure.core/cond-> {} (letvar219969 "deviceName") (clojure.core/assoc :device-name (deser-string (clojure.core/get-in letvar219969 ["deviceName" :content]))) (letvar219969 "virtualName") (clojure.core/assoc :virtual-name (deser-string (clojure.core/get-in letvar219969 ["virtualName" :content]))) (letvar219969 "ebs") (clojure.core/assoc :ebs (deser-launch-template-ebs-block-device (clojure.core/get-in letvar219969 ["ebs" :content]))) (letvar219969 "noDevice") (clojure.core/assoc :no-device (deser-string (clojure.core/get-in letvar219969 ["noDevice" :content]))))))

(clojure.core/defn- deser-export-task-state [input] (clojure.core/get {"active" :active, "cancelling" :cancelling, "cancelled" :cancelled, "completed" :completed} (clojure.core/first input)))

(clojure.core/defn- deser-log-destination-type [input] (clojure.core/get {"cloud-watch-logs" :cloudwatchlogs, "s3" :s-3} (clojure.core/first input)))

(clojure.core/defn- deser-instance-state-change [input] (clojure.core/let [letvar220057 {"currentState" (portkey.aws/getback-xml-elem-with-tag "currentState" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "previousState" (portkey.aws/getback-xml-elem-with-tag "previousState" input)}] (clojure.core/cond-> {} (letvar220057 "currentState") (clojure.core/assoc :current-state (deser-instance-state (clojure.core/get-in letvar220057 ["currentState" :content]))) (letvar220057 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar220057 ["instanceId" :content]))) (letvar220057 "previousState") (clojure.core/assoc :previous-state (deser-instance-state (clojure.core/get-in letvar220057 ["previousState" :content]))))))

(clojure.core/defn- deser-monitoring [input] (clojure.core/let [letvar220135 {"state" (portkey.aws/getback-xml-elem-with-tag "state" input)}] (clojure.core/cond-> {} (letvar220135 "state") (clojure.core/assoc :state (deser-monitoring-state (clojure.core/get-in letvar220135 ["state" :content]))))))

(clojure.core/defn- deser-elastic-gpu-health [input] (clojure.core/let [letvar220213 {"status" (portkey.aws/getback-xml-elem-with-tag "status" input)}] (clojure.core/cond-> {} (letvar220213 "status") (clojure.core/assoc :status (deser-elastic-gpu-status (clojure.core/get-in letvar220213 ["status" :content]))))))

(clojure.core/defn- deser-event-information [input] (clojure.core/let [letvar220291 {"eventDescription" (portkey.aws/getback-xml-elem-with-tag "eventDescription" input), "eventSubType" (portkey.aws/getback-xml-elem-with-tag "eventSubType" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input)}] (clojure.core/cond-> {} (letvar220291 "eventDescription") (clojure.core/assoc :event-description (deser-string (clojure.core/get-in letvar220291 ["eventDescription" :content]))) (letvar220291 "eventSubType") (clojure.core/assoc :event-sub-type (deser-string (clojure.core/get-in letvar220291 ["eventSubType" :content]))) (letvar220291 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar220291 ["instanceId" :content]))))))

(clojure.core/defn- deser-launch-template-instance-network-interface-specification-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-launch-template-instance-network-interface-specification coll))) input))

(clojure.core/defn- deser-launch-specs-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-spot-fleet-launch-specification coll))) input))

(clojure.core/defn- deser-unsuccessful-instance-credit-specification-item [input] (clojure.core/let [letvar220403 {"instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "error" (portkey.aws/getback-xml-elem-with-tag "error" input)}] (clojure.core/cond-> {} (letvar220403 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar220403 ["instanceId" :content]))) (letvar220403 "error") (clojure.core/assoc :error (deser-unsuccessful-instance-credit-specification-item-error (clojure.core/get-in letvar220403 ["error" :content]))))))

(clojure.core/defn- deser-volume-status-details [input] (clojure.core/let [letvar220481 {"name" (portkey.aws/getback-xml-elem-with-tag "name" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input)}] (clojure.core/cond-> {} (letvar220481 "name") (clojure.core/assoc :name (deser-volume-status-name (clojure.core/get-in letvar220481 ["name" :content]))) (letvar220481 "status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar220481 ["status" :content]))))))

(clojure.core/defn- deser-load-balancers-config [input] (clojure.core/let [letvar220559 {"classicLoadBalancersConfig" (portkey.aws/getback-xml-elem-with-tag "classicLoadBalancersConfig" input), "targetGroupsConfig" (portkey.aws/getback-xml-elem-with-tag "targetGroupsConfig" input)}] (clojure.core/cond-> {} (letvar220559 "classicLoadBalancersConfig") (clojure.core/assoc :classic-load-balancers-config (deser-classic-load-balancers-config (clojure.core/get-in letvar220559 ["classicLoadBalancersConfig" :content]))) (letvar220559 "targetGroupsConfig") (clojure.core/assoc :target-groups-config (deser-target-groups-config (clojure.core/get-in letvar220559 ["targetGroupsConfig" :content]))))))

(clojure.core/defn- deser-integer [input] (java.lang.Integer. (clojure.core/first input)))

(clojure.core/defn- deser-string [input] (clojure.core/first input))

(clojure.core/defn- deser-elastic-gpus [input] (clojure.core/let [letvar220644 {"elasticGpuId" (portkey.aws/getback-xml-elem-with-tag "elasticGpuId" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "elasticGpuType" (portkey.aws/getback-xml-elem-with-tag "elasticGpuType" input), "elasticGpuHealth" (portkey.aws/getback-xml-elem-with-tag "elasticGpuHealth" input), "elasticGpuState" (portkey.aws/getback-xml-elem-with-tag "elasticGpuState" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input)}] (clojure.core/cond-> {} (letvar220644 "elasticGpuId") (clojure.core/assoc :elastic-gpu-id (deser-string (clojure.core/get-in letvar220644 ["elasticGpuId" :content]))) (letvar220644 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar220644 ["availabilityZone" :content]))) (letvar220644 "elasticGpuType") (clojure.core/assoc :elastic-gpu-type (deser-string (clojure.core/get-in letvar220644 ["elasticGpuType" :content]))) (letvar220644 "elasticGpuHealth") (clojure.core/assoc :elastic-gpu-health (deser-elastic-gpu-health (clojure.core/get-in letvar220644 ["elasticGpuHealth" :content]))) (letvar220644 "elasticGpuState") (clojure.core/assoc :elastic-gpu-state (deser-elastic-gpu-state (clojure.core/get-in letvar220644 ["elasticGpuState" :content]))) (letvar220644 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar220644 ["instanceId" :content]))))))

(clojure.core/defn- deser-classic-load-balancer [input] (clojure.core/let [letvar220722 {"name" (portkey.aws/getback-xml-elem-with-tag "name" input)}] (clojure.core/cond-> {:name (deser-string (clojure.core/get-in letvar220722 ["name" :content]))})))

(clojure.core/defn- deser-ip-permission [input] (clojure.core/let [letvar220800 {"fromPort" (portkey.aws/getback-xml-elem-with-tag "fromPort" input), "ipProtocol" (portkey.aws/getback-xml-elem-with-tag "ipProtocol" input), "ipRanges" (portkey.aws/getback-xml-elem-with-tag "ipRanges" input), "ipv6Ranges" (portkey.aws/getback-xml-elem-with-tag "ipv6Ranges" input), "prefixListIds" (portkey.aws/getback-xml-elem-with-tag "prefixListIds" input), "toPort" (portkey.aws/getback-xml-elem-with-tag "toPort" input), "groups" (portkey.aws/getback-xml-elem-with-tag "groups" input)}] (clojure.core/cond-> {} (letvar220800 "fromPort") (clojure.core/assoc :from-port (deser-integer (clojure.core/get-in letvar220800 ["fromPort" :content]))) (letvar220800 "ipProtocol") (clojure.core/assoc :ip-protocol (deser-string (clojure.core/get-in letvar220800 ["ipProtocol" :content]))) (letvar220800 "ipRanges") (clojure.core/assoc :ip-ranges (deser-ip-range-list (clojure.core/get-in letvar220800 ["ipRanges" :content]))) (letvar220800 "ipv6Ranges") (clojure.core/assoc :ipv-6-ranges (deser-ipv-6-range-list (clojure.core/get-in letvar220800 ["ipv6Ranges" :content]))) (letvar220800 "prefixListIds") (clojure.core/assoc :prefix-list-ids (deser-prefix-list-id-list (clojure.core/get-in letvar220800 ["prefixListIds" :content]))) (letvar220800 "toPort") (clojure.core/assoc :to-port (deser-integer (clojure.core/get-in letvar220800 ["toPort" :content]))) (letvar220800 "groups") (clojure.core/assoc :user-id-group-pairs (deser-user-id-group-pair-list (clojure.core/get-in letvar220800 ["groups" :content]))))))

(clojure.core/defn- deser-ip-permission-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-ip-permission coll))) input))

(clojure.core/defn- deser-ri-product-description [input] (clojure.core/get {"Linux/UNIX" :linux-unix, "Linux/UNIX (Amazon VPC)" :linux-unix-amazon-vpc, "Windows" :windows, "Windows (Amazon VPC)" :windows-amazon-vpc} (clojure.core/first input)))

(clojure.core/defn- deser-volume-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-volume coll))) input))

(clojure.core/defn- deser-vpc-endpoint-connection-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpc-endpoint-connection coll))) input))

(clojure.core/defn- deser-dhcp-options-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-dhcp-options coll))) input))

(clojure.core/defn- deser-unsuccessful-item [input] (clojure.core/let [letvar220951 {"error" (portkey.aws/getback-xml-elem-with-tag "error" input), "resourceId" (portkey.aws/getback-xml-elem-with-tag "resourceId" input)}] (clojure.core/cond-> {:error (deser-unsuccessful-item-error (clojure.core/get-in letvar220951 ["error" :content]))} (letvar220951 "resourceId") (clojure.core/assoc :resource-id (deser-string (clojure.core/get-in letvar220951 ["resourceId" :content]))))))

(clojure.core/defn- deser-principal-id-format-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-principal-id-format coll))) input))

(clojure.core/defn- deser-cancel-spot-fleet-requests-success-item [input] (clojure.core/let [letvar221046 {"currentSpotFleetRequestState" (portkey.aws/getback-xml-elem-with-tag "currentSpotFleetRequestState" input), "previousSpotFleetRequestState" (portkey.aws/getback-xml-elem-with-tag "previousSpotFleetRequestState" input), "spotFleetRequestId" (portkey.aws/getback-xml-elem-with-tag "spotFleetRequestId" input)}] (clojure.core/cond-> {:current-spot-fleet-request-state (deser-batch-state (clojure.core/get-in letvar221046 ["currentSpotFleetRequestState" :content])), :previous-spot-fleet-request-state (deser-batch-state (clojure.core/get-in letvar221046 ["previousSpotFleetRequestState" :content])), :spot-fleet-request-id (deser-string (clojure.core/get-in letvar221046 ["spotFleetRequestId" :content]))})))

(clojure.core/defn- deser-launch-template-config [input] (clojure.core/let [letvar221124 {"launchTemplateSpecification" (portkey.aws/getback-xml-elem-with-tag "launchTemplateSpecification" input), "overrides" (portkey.aws/getback-xml-elem-with-tag "overrides" input)}] (clojure.core/cond-> {} (letvar221124 "launchTemplateSpecification") (clojure.core/assoc :launch-template-specification (deser-fleet-launch-template-specification (clojure.core/get-in letvar221124 ["launchTemplateSpecification" :content]))) (letvar221124 "overrides") (clojure.core/assoc :overrides (deser-launch-template-overrides-list (clojure.core/get-in letvar221124 ["overrides" :content]))))))

(clojure.core/defn- deser-propagating-vgw-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-propagating-vgw coll))) input))

(clojure.core/defn- deser-disk-image-format [input] (clojure.core/get {"VMDK" :vmdk, "RAW" :raw, "VHD" :vhd} (clojure.core/first input)))

(clojure.core/defn- deser-network-interface-attachment [input] (clojure.core/let [letvar221224 {"attachTime" (portkey.aws/getback-xml-elem-with-tag "attachTime" input), "attachmentId" (portkey.aws/getback-xml-elem-with-tag "attachmentId" input), "deleteOnTermination" (portkey.aws/getback-xml-elem-with-tag "deleteOnTermination" input), "deviceIndex" (portkey.aws/getback-xml-elem-with-tag "deviceIndex" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "instanceOwnerId" (portkey.aws/getback-xml-elem-with-tag "instanceOwnerId" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input)}] (clojure.core/cond-> {} (letvar221224 "attachTime") (clojure.core/assoc :attach-time (deser-date-time (clojure.core/get-in letvar221224 ["attachTime" :content]))) (letvar221224 "attachmentId") (clojure.core/assoc :attachment-id (deser-string (clojure.core/get-in letvar221224 ["attachmentId" :content]))) (letvar221224 "deleteOnTermination") (clojure.core/assoc :delete-on-termination (deser-boolean (clojure.core/get-in letvar221224 ["deleteOnTermination" :content]))) (letvar221224 "deviceIndex") (clojure.core/assoc :device-index (deser-integer (clojure.core/get-in letvar221224 ["deviceIndex" :content]))) (letvar221224 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar221224 ["instanceId" :content]))) (letvar221224 "instanceOwnerId") (clojure.core/assoc :instance-owner-id (deser-string (clojure.core/get-in letvar221224 ["instanceOwnerId" :content]))) (letvar221224 "status") (clojure.core/assoc :status (deser-attachment-status (clojure.core/get-in letvar221224 ["status" :content]))))))

(clojure.core/defn- deser-security-group-id-string-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-spot-fleet-request-config [input] (clojure.core/let [letvar221319 {"activityStatus" (portkey.aws/getback-xml-elem-with-tag "activityStatus" input), "createTime" (portkey.aws/getback-xml-elem-with-tag "createTime" input), "spotFleetRequestConfig" (portkey.aws/getback-xml-elem-with-tag "spotFleetRequestConfig" input), "spotFleetRequestId" (portkey.aws/getback-xml-elem-with-tag "spotFleetRequestId" input), "spotFleetRequestState" (portkey.aws/getback-xml-elem-with-tag "spotFleetRequestState" input)}] (clojure.core/cond-> {:create-time (deser-date-time (clojure.core/get-in letvar221319 ["createTime" :content])), :spot-fleet-request-config (deser-spot-fleet-request-config-data (clojure.core/get-in letvar221319 ["spotFleetRequestConfig" :content])), :spot-fleet-request-id (deser-string (clojure.core/get-in letvar221319 ["spotFleetRequestId" :content])), :spot-fleet-request-state (deser-batch-state (clojure.core/get-in letvar221319 ["spotFleetRequestState" :content]))} (letvar221319 "activityStatus") (clojure.core/assoc :activity-status (deser-activity-status (clojure.core/get-in letvar221319 ["activityStatus" :content]))))))

(clojure.core/defn- deser-domain-type [input] (clojure.core/get {"vpc" :vpc, "standard" :standard} (clojure.core/first input)))

(clojure.core/defn- deser-vgw-telemetry [input] (clojure.core/let [letvar221402 {"acceptedRouteCount" (portkey.aws/getback-xml-elem-with-tag "acceptedRouteCount" input), "lastStatusChange" (portkey.aws/getback-xml-elem-with-tag "lastStatusChange" input), "outsideIpAddress" (portkey.aws/getback-xml-elem-with-tag "outsideIpAddress" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input)}] (clojure.core/cond-> {} (letvar221402 "acceptedRouteCount") (clojure.core/assoc :accepted-route-count (deser-integer (clojure.core/get-in letvar221402 ["acceptedRouteCount" :content]))) (letvar221402 "lastStatusChange") (clojure.core/assoc :last-status-change (deser-date-time (clojure.core/get-in letvar221402 ["lastStatusChange" :content]))) (letvar221402 "outsideIpAddress") (clojure.core/assoc :outside-ip-address (deser-string (clojure.core/get-in letvar221402 ["outsideIpAddress" :content]))) (letvar221402 "status") (clojure.core/assoc :status (deser-telemetry-status (clojure.core/get-in letvar221402 ["status" :content]))) (letvar221402 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar221402 ["statusMessage" :content]))))))

(clojure.core/defn- deser-cancel-spot-instance-request-state [input] (clojure.core/get {"active" :active, "open" :open, "closed" :closed, "cancelled" :cancelled, "completed" :completed} (clojure.core/first input)))

(clojure.core/defn- deser-subnet-ipv-6-cidr-block-association-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-subnet-ipv-6-cidr-block-association coll))) input))

(clojure.core/defn- deser-network-interface [input] (clojure.core/let [letvar221502 {"groupSet" (portkey.aws/getback-xml-elem-with-tag "groupSet" input), "association" (portkey.aws/getback-xml-elem-with-tag "association" input), "subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input), "privateIpAddressesSet" (portkey.aws/getback-xml-elem-with-tag "privateIpAddressesSet" input), "privateIpAddress" (portkey.aws/getback-xml-elem-with-tag "privateIpAddress" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "requesterId" (portkey.aws/getback-xml-elem-with-tag "requesterId" input), "interfaceType" (portkey.aws/getback-xml-elem-with-tag "interfaceType" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "privateDnsName" (portkey.aws/getback-xml-elem-with-tag "privateDnsName" input), "macAddress" (portkey.aws/getback-xml-elem-with-tag "macAddress" input), "attachment" (portkey.aws/getback-xml-elem-with-tag "attachment" input), "sourceDestCheck" (portkey.aws/getback-xml-elem-with-tag "sourceDestCheck" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "ipv6AddressesSet" (portkey.aws/getback-xml-elem-with-tag "ipv6AddressesSet" input), "networkInterfaceId" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceId" input), "ownerId" (portkey.aws/getback-xml-elem-with-tag "ownerId" input), "requesterManaged" (portkey.aws/getback-xml-elem-with-tag "requesterManaged" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input)}] (clojure.core/cond-> {} (letvar221502 "attachment") (clojure.core/assoc :attachment (deser-network-interface-attachment (clojure.core/get-in letvar221502 ["attachment" :content]))) (letvar221502 "tagSet") (clojure.core/assoc :tag-set (deser-tag-list (clojure.core/get-in letvar221502 ["tagSet" :content]))) (letvar221502 "ipv6AddressesSet") (clojure.core/assoc :ipv-6-addresses (deser-network-interface-ipv-6-addresses-list (clojure.core/get-in letvar221502 ["ipv6AddressesSet" :content]))) (letvar221502 "interfaceType") (clojure.core/assoc :interface-type (deser-network-interface-type (clojure.core/get-in letvar221502 ["interfaceType" :content]))) (letvar221502 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar221502 ["subnetId" :content]))) (letvar221502 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar221502 ["ownerId" :content]))) (letvar221502 "macAddress") (clojure.core/assoc :mac-address (deser-string (clojure.core/get-in letvar221502 ["macAddress" :content]))) (letvar221502 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar221502 ["networkInterfaceId" :content]))) (letvar221502 "sourceDestCheck") (clojure.core/assoc :source-dest-check (deser-boolean (clojure.core/get-in letvar221502 ["sourceDestCheck" :content]))) (letvar221502 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar221502 ["availabilityZone" :content]))) (letvar221502 "status") (clojure.core/assoc :status (deser-network-interface-status (clojure.core/get-in letvar221502 ["status" :content]))) (letvar221502 "privateDnsName") (clojure.core/assoc :private-dns-name (deser-string (clojure.core/get-in letvar221502 ["privateDnsName" :content]))) (letvar221502 "requesterManaged") (clojure.core/assoc :requester-managed (deser-boolean (clojure.core/get-in letvar221502 ["requesterManaged" :content]))) (letvar221502 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar221502 ["description" :content]))) (letvar221502 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar221502 ["vpcId" :content]))) (letvar221502 "groupSet") (clojure.core/assoc :groups (deser-group-identifier-list (clojure.core/get-in letvar221502 ["groupSet" :content]))) (letvar221502 "privateIpAddressesSet") (clojure.core/assoc :private-ip-addresses (deser-network-interface-private-ip-address-list (clojure.core/get-in letvar221502 ["privateIpAddressesSet" :content]))) (letvar221502 "association") (clojure.core/assoc :association (deser-network-interface-association (clojure.core/get-in letvar221502 ["association" :content]))) (letvar221502 "requesterId") (clojure.core/assoc :requester-id (deser-string (clojure.core/get-in letvar221502 ["requesterId" :content]))) (letvar221502 "privateIpAddress") (clojure.core/assoc :private-ip-address (deser-string (clojure.core/get-in letvar221502 ["privateIpAddress" :content]))))))

(clojure.core/defn- deser-launch-template-name [input] (clojure.core/first input))

(clojure.core/defn- deser-snapshot [input] (clojure.core/let [letvar221585 {"progress" (portkey.aws/getback-xml-elem-with-tag "progress" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "kmsKeyId" (portkey.aws/getback-xml-elem-with-tag "kmsKeyId" input), "encrypted" (portkey.aws/getback-xml-elem-with-tag "encrypted" input), "startTime" (portkey.aws/getback-xml-elem-with-tag "startTime" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "dataEncryptionKeyId" (portkey.aws/getback-xml-elem-with-tag "dataEncryptionKeyId" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input), "volumeId" (portkey.aws/getback-xml-elem-with-tag "volumeId" input), "snapshotId" (portkey.aws/getback-xml-elem-with-tag "snapshotId" input), "ownerId" (portkey.aws/getback-xml-elem-with-tag "ownerId" input), "volumeSize" (portkey.aws/getback-xml-elem-with-tag "volumeSize" input), "ownerAlias" (portkey.aws/getback-xml-elem-with-tag "ownerAlias" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input)}] (clojure.core/cond-> {} (letvar221585 "startTime") (clojure.core/assoc :start-time (deser-date-time (clojure.core/get-in letvar221585 ["startTime" :content]))) (letvar221585 "statusMessage") (clojure.core/assoc :state-message (deser-string (clojure.core/get-in letvar221585 ["statusMessage" :content]))) (letvar221585 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar221585 ["ownerId" :content]))) (letvar221585 "encrypted") (clojure.core/assoc :encrypted (deser-boolean (clojure.core/get-in letvar221585 ["encrypted" :content]))) (letvar221585 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar221585 ["tagSet" :content]))) (letvar221585 "ownerAlias") (clojure.core/assoc :owner-alias (deser-string (clojure.core/get-in letvar221585 ["ownerAlias" :content]))) (letvar221585 "progress") (clojure.core/assoc :progress (deser-string (clojure.core/get-in letvar221585 ["progress" :content]))) (letvar221585 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar221585 ["description" :content]))) (letvar221585 "dataEncryptionKeyId") (clojure.core/assoc :data-encryption-key-id (deser-string (clojure.core/get-in letvar221585 ["dataEncryptionKeyId" :content]))) (letvar221585 "kmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar221585 ["kmsKeyId" :content]))) (letvar221585 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar221585 ["volumeId" :content]))) (letvar221585 "status") (clojure.core/assoc :state (deser-snapshot-state (clojure.core/get-in letvar221585 ["status" :content]))) (letvar221585 "volumeSize") (clojure.core/assoc :volume-size (deser-integer (clojure.core/get-in letvar221585 ["volumeSize" :content]))) (letvar221585 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar221585 ["snapshotId" :content]))))))

(clojure.core/defn- deser-resource-type [input] (clojure.core/get {"vpn-gateway" :vpngateway, "subnet" :subnet, "vpc" :vpc, "dedicated-host" :dedicatedhost, "spot-instances-request" :spotinstancesrequest, "route-table" :routetable, "image" :image, "snapshot" :snapshot, "vpn-connection" :vpnconnection, "internet-gateway" :internetgateway, "reserved-instances" :reservedinstances, "instance" :instance, "network-interface" :networkinterface, "security-group" :securitygroup, "volume" :volume, "dhcp-options" :dhcpoptions, "customer-gateway" :customergateway, "network-acl" :networkacl} (clojure.core/first input)))

(clojure.core/defn- deser-instance-status-event [input] (clojure.core/let [letvar221668 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input), "notAfter" (portkey.aws/getback-xml-elem-with-tag "notAfter" input), "notBefore" (portkey.aws/getback-xml-elem-with-tag "notBefore" input)}] (clojure.core/cond-> {} (letvar221668 "code") (clojure.core/assoc :code (deser-event-code (clojure.core/get-in letvar221668 ["code" :content]))) (letvar221668 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar221668 ["description" :content]))) (letvar221668 "notAfter") (clojure.core/assoc :not-after (deser-date-time (clojure.core/get-in letvar221668 ["notAfter" :content]))) (letvar221668 "notBefore") (clojure.core/assoc :not-before (deser-date-time (clojure.core/get-in letvar221668 ["notBefore" :content]))))))

(clojure.core/defn- deser-vpc-peering-connection-options-description [input] (clojure.core/let [letvar221746 {"allowDnsResolutionFromRemoteVpc" (portkey.aws/getback-xml-elem-with-tag "allowDnsResolutionFromRemoteVpc" input), "allowEgressFromLocalClassicLinkToRemoteVpc" (portkey.aws/getback-xml-elem-with-tag "allowEgressFromLocalClassicLinkToRemoteVpc" input), "allowEgressFromLocalVpcToRemoteClassicLink" (portkey.aws/getback-xml-elem-with-tag "allowEgressFromLocalVpcToRemoteClassicLink" input)}] (clojure.core/cond-> {} (letvar221746 "allowDnsResolutionFromRemoteVpc") (clojure.core/assoc :allow-dns-resolution-from-remote-vpc (deser-boolean (clojure.core/get-in letvar221746 ["allowDnsResolutionFromRemoteVpc" :content]))) (letvar221746 "allowEgressFromLocalClassicLinkToRemoteVpc") (clojure.core/assoc :allow-egress-from-local-classic-link-to-remote-vpc (deser-boolean (clojure.core/get-in letvar221746 ["allowEgressFromLocalClassicLinkToRemoteVpc" :content]))) (letvar221746 "allowEgressFromLocalVpcToRemoteClassicLink") (clojure.core/assoc :allow-egress-from-local-vpc-to-remote-classic-link (deser-boolean (clojure.core/get-in letvar221746 ["allowEgressFromLocalVpcToRemoteClassicLink" :content]))))))

(clojure.core/defn- deser-volume-status-name [input] (clojure.core/get {"io-enabled" :ioenabled, "io-performance" :ioperformance} (clojure.core/first input)))

(clojure.core/defn- deser-internet-gateway [input] (clojure.core/let [letvar221829 {"attachmentSet" (portkey.aws/getback-xml-elem-with-tag "attachmentSet" input), "internetGatewayId" (portkey.aws/getback-xml-elem-with-tag "internetGatewayId" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input)}] (clojure.core/cond-> {} (letvar221829 "attachmentSet") (clojure.core/assoc :attachments (deser-internet-gateway-attachment-list (clojure.core/get-in letvar221829 ["attachmentSet" :content]))) (letvar221829 "internetGatewayId") (clojure.core/assoc :internet-gateway-id (deser-string (clojure.core/get-in letvar221829 ["internetGatewayId" :content]))) (letvar221829 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar221829 ["tagSet" :content]))))))

(clojure.core/defn- deser-vpc [input] (clojure.core/let [letvar221907 {"tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "ipv6CidrBlockAssociationSet" (portkey.aws/getback-xml-elem-with-tag "ipv6CidrBlockAssociationSet" input), "cidrBlockAssociationSet" (portkey.aws/getback-xml-elem-with-tag "cidrBlockAssociationSet" input), "instanceTenancy" (portkey.aws/getback-xml-elem-with-tag "instanceTenancy" input), "cidrBlock" (portkey.aws/getback-xml-elem-with-tag "cidrBlock" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "dhcpOptionsId" (portkey.aws/getback-xml-elem-with-tag "dhcpOptionsId" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "isDefault" (portkey.aws/getback-xml-elem-with-tag "isDefault" input)}] (clojure.core/cond-> {} (letvar221907 "cidrBlockAssociationSet") (clojure.core/assoc :cidr-block-association-set (deser-vpc-cidr-block-association-set (clojure.core/get-in letvar221907 ["cidrBlockAssociationSet" :content]))) (letvar221907 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar221907 ["tagSet" :content]))) (letvar221907 "cidrBlock") (clojure.core/assoc :cidr-block (deser-string (clojure.core/get-in letvar221907 ["cidrBlock" :content]))) (letvar221907 "instanceTenancy") (clojure.core/assoc :instance-tenancy (deser-tenancy (clojure.core/get-in letvar221907 ["instanceTenancy" :content]))) (letvar221907 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar221907 ["vpcId" :content]))) (letvar221907 "state") (clojure.core/assoc :state (deser-vpc-state (clojure.core/get-in letvar221907 ["state" :content]))) (letvar221907 "dhcpOptionsId") (clojure.core/assoc :dhcp-options-id (deser-string (clojure.core/get-in letvar221907 ["dhcpOptionsId" :content]))) (letvar221907 "isDefault") (clojure.core/assoc :is-default (deser-boolean (clojure.core/get-in letvar221907 ["isDefault" :content]))) (letvar221907 "ipv6CidrBlockAssociationSet") (clojure.core/assoc :ipv-6-cidr-block-association-set (deser-vpc-ipv-6-cidr-block-association-set (clojure.core/get-in letvar221907 ["ipv6CidrBlockAssociationSet" :content]))))))

(clojure.core/defn- deser-ipv-6-address-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-network-interface-permission-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-network-interface-permission coll))) input))

(clojure.core/defn- deser-batch-state [input] (clojure.core/get {"submitted" :submitted, "active" :active, "cancelled" :cancelled, "failed" :failed, "cancelled_running" :cancelled-running, "cancelled_terminating" :cancelled-terminating, "modifying" :modifying} (clojure.core/first input)))

(clojure.core/defn- deser-fleet-on-demand-allocation-strategy [input] (clojure.core/get {"lowest-price" :lowestprice, "prioritized" :prioritized} (clojure.core/first input)))

(clojure.core/defn- deser-reservation-value [input] (clojure.core/let [letvar222029 {"hourlyPrice" (portkey.aws/getback-xml-elem-with-tag "hourlyPrice" input), "remainingTotalValue" (portkey.aws/getback-xml-elem-with-tag "remainingTotalValue" input), "remainingUpfrontValue" (portkey.aws/getback-xml-elem-with-tag "remainingUpfrontValue" input)}] (clojure.core/cond-> {} (letvar222029 "hourlyPrice") (clojure.core/assoc :hourly-price (deser-string (clojure.core/get-in letvar222029 ["hourlyPrice" :content]))) (letvar222029 "remainingTotalValue") (clojure.core/assoc :remaining-total-value (deser-string (clojure.core/get-in letvar222029 ["remainingTotalValue" :content]))) (letvar222029 "remainingUpfrontValue") (clojure.core/assoc :remaining-upfront-value (deser-string (clojure.core/get-in letvar222029 ["remainingUpfrontValue" :content]))))))

(clojure.core/defn- deser-host-instance [input] (clojure.core/let [letvar222107 {"instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input)}] (clojure.core/cond-> {} (letvar222107 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar222107 ["instanceId" :content]))) (letvar222107 "instanceType") (clojure.core/assoc :instance-type (deser-string (clojure.core/get-in letvar222107 ["instanceType" :content]))))))

(clojure.core/defn- deser-launch-template-cpu-options [input] (clojure.core/let [letvar222185 {"coreCount" (portkey.aws/getback-xml-elem-with-tag "coreCount" input), "threadsPerCore" (portkey.aws/getback-xml-elem-with-tag "threadsPerCore" input)}] (clojure.core/cond-> {} (letvar222185 "coreCount") (clojure.core/assoc :core-count (deser-integer (clojure.core/get-in letvar222185 ["coreCount" :content]))) (letvar222185 "threadsPerCore") (clojure.core/assoc :threads-per-core (deser-integer (clojure.core/get-in letvar222185 ["threadsPerCore" :content]))))))

(clojure.core/defn- deser-currency-code-values [input] (clojure.core/get {"USD" :usd} (clojure.core/first input)))

(clojure.core/defn- deser-import-image-task [input] (clojure.core/let [letvar222268 {"architecture" (portkey.aws/getback-xml-elem-with-tag "architecture" input), "progress" (portkey.aws/getback-xml-elem-with-tag "progress" input), "snapshotDetailSet" (portkey.aws/getback-xml-elem-with-tag "snapshotDetailSet" input), "licenseType" (portkey.aws/getback-xml-elem-with-tag "licenseType" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "imageId" (portkey.aws/getback-xml-elem-with-tag "imageId" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input), "importTaskId" (portkey.aws/getback-xml-elem-with-tag "importTaskId" input), "hypervisor" (portkey.aws/getback-xml-elem-with-tag "hypervisor" input), "platform" (portkey.aws/getback-xml-elem-with-tag "platform" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input)}] (clojure.core/cond-> {} (letvar222268 "platform") (clojure.core/assoc :platform (deser-string (clojure.core/get-in letvar222268 ["platform" :content]))) (letvar222268 "importTaskId") (clojure.core/assoc :import-task-id (deser-string (clojure.core/get-in letvar222268 ["importTaskId" :content]))) (letvar222268 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar222268 ["imageId" :content]))) (letvar222268 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar222268 ["statusMessage" :content]))) (letvar222268 "status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar222268 ["status" :content]))) (letvar222268 "progress") (clojure.core/assoc :progress (deser-string (clojure.core/get-in letvar222268 ["progress" :content]))) (letvar222268 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar222268 ["description" :content]))) (letvar222268 "snapshotDetailSet") (clojure.core/assoc :snapshot-details (deser-snapshot-detail-list (clojure.core/get-in letvar222268 ["snapshotDetailSet" :content]))) (letvar222268 "hypervisor") (clojure.core/assoc :hypervisor (deser-string (clojure.core/get-in letvar222268 ["hypervisor" :content]))) (letvar222268 "architecture") (clojure.core/assoc :architecture (deser-string (clojure.core/get-in letvar222268 ["architecture" :content]))) (letvar222268 "licenseType") (clojure.core/assoc :license-type (deser-string (clojure.core/get-in letvar222268 ["licenseType" :content]))))))

(clojure.core/defn- deser-load-permission [input] (clojure.core/let [letvar222346 {"userId" (portkey.aws/getback-xml-elem-with-tag "userId" input), "group" (portkey.aws/getback-xml-elem-with-tag "group" input)}] (clojure.core/cond-> {} (letvar222346 "userId") (clojure.core/assoc :user-id (deser-string (clojure.core/get-in letvar222346 ["userId" :content]))) (letvar222346 "group") (clojure.core/assoc :group (deser-permission-group (clojure.core/get-in letvar222346 ["group" :content]))))))

(clojure.core/defn- deser-volume-status-details-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-volume-status-details coll))) input))

(clojure.core/defn- deser-fleet-launch-template-overrides-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-fleet-launch-template-overrides coll))) input))

(clojure.core/defn- deser-summary-status [input] (clojure.core/get {"ok" :ok, "impaired" :impaired, "insufficient-data" :insufficientdata, "not-applicable" :notapplicable, "initializing" :initializing} (clojure.core/first input)))

(clojure.core/defn- deser-fleet-launch-template-overrides [input] (clojure.core/let [letvar222463 {"instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "maxPrice" (portkey.aws/getback-xml-elem-with-tag "maxPrice" input), "subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "weightedCapacity" (portkey.aws/getback-xml-elem-with-tag "weightedCapacity" input), "priority" (portkey.aws/getback-xml-elem-with-tag "priority" input)}] (clojure.core/cond-> {} (letvar222463 "instanceType") (clojure.core/assoc :instance-type (deser-instance-type (clojure.core/get-in letvar222463 ["instanceType" :content]))) (letvar222463 "maxPrice") (clojure.core/assoc :max-price (deser-string (clojure.core/get-in letvar222463 ["maxPrice" :content]))) (letvar222463 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar222463 ["subnetId" :content]))) (letvar222463 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar222463 ["availabilityZone" :content]))) (letvar222463 "weightedCapacity") (clojure.core/assoc :weighted-capacity (deser-double (clojure.core/get-in letvar222463 ["weightedCapacity" :content]))) (letvar222463 "priority") (clojure.core/assoc :priority (deser-double (clojure.core/get-in letvar222463 ["priority" :content]))))))

(clojure.core/defn- deser-instance-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance coll))) input))

(clojure.core/defn- deser-volume-type [input] (clojure.core/get {"standard" :standard, "io1" :io-1, "gp2" :gp-2, "sc1" :sc-1, "st1" :st-1} (clojure.core/first input)))

(clojure.core/defn- deser-customer-gateway [input] (clojure.core/let [letvar222563 {"bgpAsn" (portkey.aws/getback-xml-elem-with-tag "bgpAsn" input), "customerGatewayId" (portkey.aws/getback-xml-elem-with-tag "customerGatewayId" input), "ipAddress" (portkey.aws/getback-xml-elem-with-tag "ipAddress" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "type" (portkey.aws/getback-xml-elem-with-tag "type" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input)}] (clojure.core/cond-> {} (letvar222563 "bgpAsn") (clojure.core/assoc :bgp-asn (deser-string (clojure.core/get-in letvar222563 ["bgpAsn" :content]))) (letvar222563 "customerGatewayId") (clojure.core/assoc :customer-gateway-id (deser-string (clojure.core/get-in letvar222563 ["customerGatewayId" :content]))) (letvar222563 "ipAddress") (clojure.core/assoc :ip-address (deser-string (clojure.core/get-in letvar222563 ["ipAddress" :content]))) (letvar222563 "state") (clojure.core/assoc :state (deser-string (clojure.core/get-in letvar222563 ["state" :content]))) (letvar222563 "type") (clojure.core/assoc :type (deser-string (clojure.core/get-in letvar222563 ["type" :content]))) (letvar222563 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar222563 ["tagSet" :content]))))))

(clojure.core/defn- deser-network-interface-permission [input] (clojure.core/let [letvar222641 {"networkInterfacePermissionId" (portkey.aws/getback-xml-elem-with-tag "networkInterfacePermissionId" input), "networkInterfaceId" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceId" input), "awsAccountId" (portkey.aws/getback-xml-elem-with-tag "awsAccountId" input), "awsService" (portkey.aws/getback-xml-elem-with-tag "awsService" input), "permission" (portkey.aws/getback-xml-elem-with-tag "permission" input), "permissionState" (portkey.aws/getback-xml-elem-with-tag "permissionState" input)}] (clojure.core/cond-> {} (letvar222641 "networkInterfacePermissionId") (clojure.core/assoc :network-interface-permission-id (deser-string (clojure.core/get-in letvar222641 ["networkInterfacePermissionId" :content]))) (letvar222641 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar222641 ["networkInterfaceId" :content]))) (letvar222641 "awsAccountId") (clojure.core/assoc :aws-account-id (deser-string (clojure.core/get-in letvar222641 ["awsAccountId" :content]))) (letvar222641 "awsService") (clojure.core/assoc :aws-service (deser-string (clojure.core/get-in letvar222641 ["awsService" :content]))) (letvar222641 "permission") (clojure.core/assoc :permission (deser-interface-permission-type (clojure.core/get-in letvar222641 ["permission" :content]))) (letvar222641 "permissionState") (clojure.core/assoc :permission-state (deser-network-interface-permission-state (clojure.core/get-in letvar222641 ["permissionState" :content]))))))

(clojure.core/defn- deser-response-host-id-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-string coll))) input))

(clojure.core/defn- deser-vpc-cidr-block-association [input] (clojure.core/let [letvar222736 {"associationId" (portkey.aws/getback-xml-elem-with-tag "associationId" input), "cidrBlock" (portkey.aws/getback-xml-elem-with-tag "cidrBlock" input), "cidrBlockState" (portkey.aws/getback-xml-elem-with-tag "cidrBlockState" input)}] (clojure.core/cond-> {} (letvar222736 "associationId") (clojure.core/assoc :association-id (deser-string (clojure.core/get-in letvar222736 ["associationId" :content]))) (letvar222736 "cidrBlock") (clojure.core/assoc :cidr-block (deser-string (clojure.core/get-in letvar222736 ["cidrBlock" :content]))) (letvar222736 "cidrBlockState") (clojure.core/assoc :cidr-block-state (deser-vpc-cidr-block-state (clojure.core/get-in letvar222736 ["cidrBlockState" :content]))))))

(clojure.core/defn- deser-launch-template-instance-network-interface-specification [input] (clojure.core/let [letvar222814 {"associatePublicIpAddress" (portkey.aws/getback-xml-elem-with-tag "associatePublicIpAddress" input), "groupSet" (portkey.aws/getback-xml-elem-with-tag "groupSet" input), "subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input), "privateIpAddressesSet" (portkey.aws/getback-xml-elem-with-tag "privateIpAddressesSet" input), "privateIpAddress" (portkey.aws/getback-xml-elem-with-tag "privateIpAddress" input), "secondaryPrivateIpAddressCount" (portkey.aws/getback-xml-elem-with-tag "secondaryPrivateIpAddressCount" input), "deleteOnTermination" (portkey.aws/getback-xml-elem-with-tag "deleteOnTermination" input), "ipv6AddressesSet" (portkey.aws/getback-xml-elem-with-tag "ipv6AddressesSet" input), "deviceIndex" (portkey.aws/getback-xml-elem-with-tag "deviceIndex" input), "ipv6AddressCount" (portkey.aws/getback-xml-elem-with-tag "ipv6AddressCount" input), "networkInterfaceId" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceId" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input)}] (clojure.core/cond-> {} (letvar222814 "associatePublicIpAddress") (clojure.core/assoc :associate-public-ip-address (deser-boolean (clojure.core/get-in letvar222814 ["associatePublicIpAddress" :content]))) (letvar222814 "ipv6AddressesSet") (clojure.core/assoc :ipv-6-addresses (deser-instance-ipv-6-address-list (clojure.core/get-in letvar222814 ["ipv6AddressesSet" :content]))) (letvar222814 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar222814 ["subnetId" :content]))) (letvar222814 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar222814 ["networkInterfaceId" :content]))) (letvar222814 "deviceIndex") (clojure.core/assoc :device-index (deser-integer (clojure.core/get-in letvar222814 ["deviceIndex" :content]))) (letvar222814 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar222814 ["description" :content]))) (letvar222814 "groupSet") (clojure.core/assoc :groups (deser-group-id-string-list (clojure.core/get-in letvar222814 ["groupSet" :content]))) (letvar222814 "deleteOnTermination") (clojure.core/assoc :delete-on-termination (deser-boolean (clojure.core/get-in letvar222814 ["deleteOnTermination" :content]))) (letvar222814 "privateIpAddressesSet") (clojure.core/assoc :private-ip-addresses (deser-private-ip-address-specification-list (clojure.core/get-in letvar222814 ["privateIpAddressesSet" :content]))) (letvar222814 "secondaryPrivateIpAddressCount") (clojure.core/assoc :secondary-private-ip-address-count (deser-integer (clojure.core/get-in letvar222814 ["secondaryPrivateIpAddressCount" :content]))) (letvar222814 "privateIpAddress") (clojure.core/assoc :private-ip-address (deser-string (clojure.core/get-in letvar222814 ["privateIpAddress" :content]))) (letvar222814 "ipv6AddressCount") (clojure.core/assoc :ipv-6-address-count (deser-integer (clojure.core/get-in letvar222814 ["ipv6AddressCount" :content]))))))

(clojure.core/defn- deser-host-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-host coll))) input))

(clojure.core/defn- deser-stale-security-group-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-stale-security-group coll))) input))

(clojure.core/defn- deser-elastic-gpu-specification-response-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-elastic-gpu-specification-response coll))) input))

(clojure.core/defn- deser-classic-load-balancers-config [input] (clojure.core/let [letvar222943 {"classicLoadBalancers" (portkey.aws/getback-xml-elem-with-tag "classicLoadBalancers" input)}] (clojure.core/cond-> {:classic-load-balancers (deser-classic-load-balancers (clojure.core/get-in letvar222943 ["classicLoadBalancers" :content]))})))

(clojure.core/defn- deser-volume-status-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-volume-status-item coll))) input))

(clojure.core/defn- deser-export-task [input] (clojure.core/let [letvar223038 {"description" (portkey.aws/getback-xml-elem-with-tag "description" input), "exportTaskId" (portkey.aws/getback-xml-elem-with-tag "exportTaskId" input), "exportToS3" (portkey.aws/getback-xml-elem-with-tag "exportToS3" input), "instanceExport" (portkey.aws/getback-xml-elem-with-tag "instanceExport" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input)}] (clojure.core/cond-> {} (letvar223038 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar223038 ["description" :content]))) (letvar223038 "exportTaskId") (clojure.core/assoc :export-task-id (deser-string (clojure.core/get-in letvar223038 ["exportTaskId" :content]))) (letvar223038 "exportToS3") (clojure.core/assoc :export-to-s-3-task (deser-export-to-s-3-task (clojure.core/get-in letvar223038 ["exportToS3" :content]))) (letvar223038 "instanceExport") (clojure.core/assoc :instance-export-details (deser-instance-export-details (clojure.core/get-in letvar223038 ["instanceExport" :content]))) (letvar223038 "state") (clojure.core/assoc :state (deser-export-task-state (clojure.core/get-in letvar223038 ["state" :content]))) (letvar223038 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar223038 ["statusMessage" :content]))))))

(clojure.core/defn- deser-network-interface-private-ip-address [input] (clojure.core/let [letvar223116 {"association" (portkey.aws/getback-xml-elem-with-tag "association" input), "primary" (portkey.aws/getback-xml-elem-with-tag "primary" input), "privateDnsName" (portkey.aws/getback-xml-elem-with-tag "privateDnsName" input), "privateIpAddress" (portkey.aws/getback-xml-elem-with-tag "privateIpAddress" input)}] (clojure.core/cond-> {} (letvar223116 "association") (clojure.core/assoc :association (deser-network-interface-association (clojure.core/get-in letvar223116 ["association" :content]))) (letvar223116 "primary") (clojure.core/assoc :primary (deser-boolean (clojure.core/get-in letvar223116 ["primary" :content]))) (letvar223116 "privateDnsName") (clojure.core/assoc :private-dns-name (deser-string (clojure.core/get-in letvar223116 ["privateDnsName" :content]))) (letvar223116 "privateIpAddress") (clojure.core/assoc :private-ip-address (deser-string (clojure.core/get-in letvar223116 ["privateIpAddress" :content]))))))

(clojure.core/defn- deser-placement-group-state [input] (clojure.core/get {"pending" :pending, "available" :available, "deleting" :deleting, "deleted" :deleted} (clojure.core/first input)))

(clojure.core/defn- deser-long [input] (java.lang.Long. (clojure.core/first input)))

(clojure.core/defn- deser-volume-status-actions-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-volume-status-action coll))) input))

(clojure.core/defn- deser-vpn-static-route-source [input] (clojure.core/get {"Static" :static} (clojure.core/first input)))

(clojure.core/defn- deser-host-offering-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-host-offering coll))) input))

(clojure.core/defn- deser-vpc-endpoint-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpc-endpoint coll))) input))

(clojure.core/defn- deser-scheduled-instance-recurrence [input] (clojure.core/let [letvar223257 {"frequency" (portkey.aws/getback-xml-elem-with-tag "frequency" input), "interval" (portkey.aws/getback-xml-elem-with-tag "interval" input), "occurrenceDaySet" (portkey.aws/getback-xml-elem-with-tag "occurrenceDaySet" input), "occurrenceRelativeToEnd" (portkey.aws/getback-xml-elem-with-tag "occurrenceRelativeToEnd" input), "occurrenceUnit" (portkey.aws/getback-xml-elem-with-tag "occurrenceUnit" input)}] (clojure.core/cond-> {} (letvar223257 "frequency") (clojure.core/assoc :frequency (deser-string (clojure.core/get-in letvar223257 ["frequency" :content]))) (letvar223257 "interval") (clojure.core/assoc :interval (deser-integer (clojure.core/get-in letvar223257 ["interval" :content]))) (letvar223257 "occurrenceDaySet") (clojure.core/assoc :occurrence-day-set (deser-occurrence-day-set (clojure.core/get-in letvar223257 ["occurrenceDaySet" :content]))) (letvar223257 "occurrenceRelativeToEnd") (clojure.core/assoc :occurrence-relative-to-end (deser-boolean (clojure.core/get-in letvar223257 ["occurrenceRelativeToEnd" :content]))) (letvar223257 "occurrenceUnit") (clojure.core/assoc :occurrence-unit (deser-string (clojure.core/get-in letvar223257 ["occurrenceUnit" :content]))))))

(clojure.core/defn- deser-allowed-principal [input] (clojure.core/let [letvar223335 {"principalType" (portkey.aws/getback-xml-elem-with-tag "principalType" input), "principal" (portkey.aws/getback-xml-elem-with-tag "principal" input)}] (clojure.core/cond-> {} (letvar223335 "principalType") (clojure.core/assoc :principal-type (deser-principal-type (clojure.core/get-in letvar223335 ["principalType" :content]))) (letvar223335 "principal") (clojure.core/assoc :principal (deser-string (clojure.core/get-in letvar223335 ["principal" :content]))))))

(clojure.core/defn- deser-unsuccessful-instance-credit-specification-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-unsuccessful-instance-credit-specification-item coll))) input))

(clojure.core/defn- deser-instance-state [input] (clojure.core/let [letvar223430 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "name" (portkey.aws/getback-xml-elem-with-tag "name" input)}] (clojure.core/cond-> {} (letvar223430 "code") (clojure.core/assoc :code (deser-integer (clojure.core/get-in letvar223430 ["code" :content]))) (letvar223430 "name") (clojure.core/assoc :name (deser-instance-state-name (clojure.core/get-in letvar223430 ["name" :content]))))))

(clojure.core/defn- deser-volume-status-item [input] (clojure.core/let [letvar223508 {"actionsSet" (portkey.aws/getback-xml-elem-with-tag "actionsSet" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "eventsSet" (portkey.aws/getback-xml-elem-with-tag "eventsSet" input), "volumeId" (portkey.aws/getback-xml-elem-with-tag "volumeId" input), "volumeStatus" (portkey.aws/getback-xml-elem-with-tag "volumeStatus" input)}] (clojure.core/cond-> {} (letvar223508 "actionsSet") (clojure.core/assoc :actions (deser-volume-status-actions-list (clojure.core/get-in letvar223508 ["actionsSet" :content]))) (letvar223508 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar223508 ["availabilityZone" :content]))) (letvar223508 "eventsSet") (clojure.core/assoc :events (deser-volume-status-events-list (clojure.core/get-in letvar223508 ["eventsSet" :content]))) (letvar223508 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar223508 ["volumeId" :content]))) (letvar223508 "volumeStatus") (clojure.core/assoc :volume-status (deser-volume-status-info (clojure.core/get-in letvar223508 ["volumeStatus" :content]))))))

(clojure.core/defn- deser-spot-instance-state [input] (clojure.core/get {"open" :open, "active" :active, "closed" :closed, "cancelled" :cancelled, "failed" :failed} (clojure.core/first input)))

(clojure.core/defn- deser-instance-state-name [input] (clojure.core/get {"pending" :pending, "running" :running, "shutting-down" :shuttingdown, "terminated" :terminated, "stopping" :stopping, "stopped" :stopped} (clojure.core/first input)))

(clojure.core/defn- deser-availability-zone-message [input] (clojure.core/let [letvar223596 {"message" (portkey.aws/getback-xml-elem-with-tag "message" input)}] (clojure.core/cond-> {} (letvar223596 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar223596 ["message" :content]))))))

(clojure.core/defn- deser-launch-template-version-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-launch-template-version coll))) input))

(clojure.core/defn- deser-version-description [input] (clojure.core/first input))

(clojure.core/defn- deser-host-reservation-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-host-reservation coll))) input))

(clojure.core/defn- deser-unsuccessful-item-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-unsuccessful-item coll))) input))

(clojure.core/defn- deser-virtualization-type [input] (clojure.core/get {"hvm" :hvm, "paravirtual" :paravirtual} (clojure.core/first input)))

(clojure.core/defn- deser-reserved-instances-id [input] (clojure.core/let [letvar223735 {"reservedInstancesId" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesId" input)}] (clojure.core/cond-> {} (letvar223735 "reservedInstancesId") (clojure.core/assoc :reserved-instances-id (deser-string (clojure.core/get-in letvar223735 ["reservedInstancesId" :content]))))))

(clojure.core/defn- deser-instance-credit-specification-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-credit-specification coll))) input))

(clojure.core/defn- deser-default-target-capacity-type [input] (clojure.core/get {"spot" :spot, "on-demand" :ondemand} (clojure.core/first input)))

(clojure.core/defn- deser-instance-network-interface-specification-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-network-interface-specification coll))) input))

(clojure.core/defn- deser-conversion-task [input] (clojure.core/let [letvar223852 {"conversionTaskId" (portkey.aws/getback-xml-elem-with-tag "conversionTaskId" input), "expirationTime" (portkey.aws/getback-xml-elem-with-tag "expirationTime" input), "importInstance" (portkey.aws/getback-xml-elem-with-tag "importInstance" input), "importVolume" (portkey.aws/getback-xml-elem-with-tag "importVolume" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input)}] (clojure.core/cond-> {} (letvar223852 "conversionTaskId") (clojure.core/assoc :conversion-task-id (deser-string (clojure.core/get-in letvar223852 ["conversionTaskId" :content]))) (letvar223852 "expirationTime") (clojure.core/assoc :expiration-time (deser-string (clojure.core/get-in letvar223852 ["expirationTime" :content]))) (letvar223852 "importInstance") (clojure.core/assoc :import-instance (deser-import-instance-task-details (clojure.core/get-in letvar223852 ["importInstance" :content]))) (letvar223852 "importVolume") (clojure.core/assoc :import-volume (deser-import-volume-task-details (clojure.core/get-in letvar223852 ["importVolume" :content]))) (letvar223852 "state") (clojure.core/assoc :state (deser-conversion-task-state (clojure.core/get-in letvar223852 ["state" :content]))) (letvar223852 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar223852 ["statusMessage" :content]))) (letvar223852 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar223852 ["tagSet" :content]))))))

(clojure.core/defn- deser-successful-instance-credit-specification-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-successful-instance-credit-specification-item coll))) input))

(clojure.core/defn- deser-bundle-task-error [input] (clojure.core/let [letvar223947 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "message" (portkey.aws/getback-xml-elem-with-tag "message" input)}] (clojure.core/cond-> {} (letvar223947 "code") (clojure.core/assoc :code (deser-string (clojure.core/get-in letvar223947 ["code" :content]))) (letvar223947 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar223947 ["message" :content]))))))

(clojure.core/defn- deser-dhcp-configuration [input] (clojure.core/let [letvar224025 {"key" (portkey.aws/getback-xml-elem-with-tag "key" input), "valueSet" (portkey.aws/getback-xml-elem-with-tag "valueSet" input)}] (clojure.core/cond-> {} (letvar224025 "key") (clojure.core/assoc :key (deser-string (clojure.core/get-in letvar224025 ["key" :content]))) (letvar224025 "valueSet") (clojure.core/assoc :values (deser-dhcp-configuration-value-list (clojure.core/get-in letvar224025 ["valueSet" :content]))))))

(clojure.core/defn- deser-block-device-mapping [input] (clojure.core/let [letvar224103 {"deviceName" (portkey.aws/getback-xml-elem-with-tag "deviceName" input), "virtualName" (portkey.aws/getback-xml-elem-with-tag "virtualName" input), "ebs" (portkey.aws/getback-xml-elem-with-tag "ebs" input), "noDevice" (portkey.aws/getback-xml-elem-with-tag "noDevice" input)}] (clojure.core/cond-> {} (letvar224103 "deviceName") (clojure.core/assoc :device-name (deser-string (clojure.core/get-in letvar224103 ["deviceName" :content]))) (letvar224103 "virtualName") (clojure.core/assoc :virtual-name (deser-string (clojure.core/get-in letvar224103 ["virtualName" :content]))) (letvar224103 "ebs") (clojure.core/assoc :ebs (deser-ebs-block-device (clojure.core/get-in letvar224103 ["ebs" :content]))) (letvar224103 "noDevice") (clojure.core/assoc :no-device (deser-string (clojure.core/get-in letvar224103 ["noDevice" :content]))))))

(clojure.core/defn- deser-state [input] (clojure.core/get {"PendingAcceptance" :pending-acceptance, "Pending" :pending, "Available" :available, "Deleting" :deleting, "Deleted" :deleted, "Rejected" :rejected, "Failed" :failed, "Expired" :expired} (clojure.core/first input)))

(clojure.core/defn- deser-export-to-s-3-task [input] (clojure.core/let [letvar224186 {"containerFormat" (portkey.aws/getback-xml-elem-with-tag "containerFormat" input), "diskImageFormat" (portkey.aws/getback-xml-elem-with-tag "diskImageFormat" input), "s3Bucket" (portkey.aws/getback-xml-elem-with-tag "s3Bucket" input), "s3Key" (portkey.aws/getback-xml-elem-with-tag "s3Key" input)}] (clojure.core/cond-> {} (letvar224186 "containerFormat") (clojure.core/assoc :container-format (deser-container-format (clojure.core/get-in letvar224186 ["containerFormat" :content]))) (letvar224186 "diskImageFormat") (clojure.core/assoc :disk-image-format (deser-disk-image-format (clojure.core/get-in letvar224186 ["diskImageFormat" :content]))) (letvar224186 "s3Bucket") (clojure.core/assoc :s-3-bucket (deser-string (clojure.core/get-in letvar224186 ["s3Bucket" :content]))) (letvar224186 "s3Key") (clojure.core/assoc :s-3-key (deser-string (clojure.core/get-in letvar224186 ["s3Key" :content]))))))

(clojure.core/defn- deser-network-acl-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-network-acl coll))) input))

(clojure.core/defn- deser-cpu-options [input] (clojure.core/let [letvar224281 {"coreCount" (portkey.aws/getback-xml-elem-with-tag "coreCount" input), "threadsPerCore" (portkey.aws/getback-xml-elem-with-tag "threadsPerCore" input)}] (clojure.core/cond-> {} (letvar224281 "coreCount") (clojure.core/assoc :core-count (deser-integer (clojure.core/get-in letvar224281 ["coreCount" :content]))) (letvar224281 "threadsPerCore") (clojure.core/assoc :threads-per-core (deser-integer (clojure.core/get-in letvar224281 ["threadsPerCore" :content]))))))

(clojure.core/defn- deser-tag [input] (clojure.core/let [letvar224359 {"key" (portkey.aws/getback-xml-elem-with-tag "key" input), "value" (portkey.aws/getback-xml-elem-with-tag "value" input)}] (clojure.core/cond-> {} (letvar224359 "key") (clojure.core/assoc :key (deser-string (clojure.core/get-in letvar224359 ["key" :content]))) (letvar224359 "value") (clojure.core/assoc :value (deser-string (clojure.core/get-in letvar224359 ["value" :content]))))))

(clojure.core/defn- deser-recurring-charge-frequency [input] (clojure.core/get {"Hourly" :hourly} (clojure.core/first input)))

(clojure.core/defn- deser-spot-fleet-tag-specification [input] (clojure.core/let [letvar224442 {"resourceType" (portkey.aws/getback-xml-elem-with-tag "resourceType" input), "tag" (portkey.aws/getback-xml-elem-with-tag "tag" input)}] (clojure.core/cond-> {} (letvar224442 "resourceType") (clojure.core/assoc :resource-type (deser-resource-type (clojure.core/get-in letvar224442 ["resourceType" :content]))) (letvar224442 "tag") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar224442 ["tag" :content]))))))

(clojure.core/defn- deser-platform-values [input] (clojure.core/get {"Windows" :windows} (clojure.core/first input)))

(clojure.core/defn- deser-cancel-spot-fleet-requests-success-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cancel-spot-fleet-requests-success-item coll))) input))

(clojure.core/defn- deser-product-code [input] (clojure.core/let [letvar224542 {"productCode" (portkey.aws/getback-xml-elem-with-tag "productCode" input), "type" (portkey.aws/getback-xml-elem-with-tag "type" input)}] (clojure.core/cond-> {} (letvar224542 "productCode") (clojure.core/assoc :product-code-id (deser-string (clojure.core/get-in letvar224542 ["productCode" :content]))) (letvar224542 "type") (clojure.core/assoc :product-code-type (deser-product-code-values (clojure.core/get-in letvar224542 ["type" :content]))))))

(clojure.core/defn- deser-port-range [input] (clojure.core/let [letvar224620 {"from" (portkey.aws/getback-xml-elem-with-tag "from" input), "to" (portkey.aws/getback-xml-elem-with-tag "to" input)}] (clojure.core/cond-> {} (letvar224620 "from") (clojure.core/assoc :from (deser-integer (clojure.core/get-in letvar224620 ["from" :content]))) (letvar224620 "to") (clojure.core/assoc :to (deser-integer (clojure.core/get-in letvar224620 ["to" :content]))))))

(clojure.core/defn- deser-vpc-state [input] (clojure.core/get {"pending" :pending, "available" :available} (clojure.core/first input)))

(clojure.core/defn- deser-attachment-status [input] (clojure.core/get {"attaching" :attaching, "attached" :attached, "detaching" :detaching, "detached" :detached} (clojure.core/first input)))

(clojure.core/defn- deser-peering-connection-options [input] (clojure.core/let [letvar224708 {"allowDnsResolutionFromRemoteVpc" (portkey.aws/getback-xml-elem-with-tag "allowDnsResolutionFromRemoteVpc" input), "allowEgressFromLocalClassicLinkToRemoteVpc" (portkey.aws/getback-xml-elem-with-tag "allowEgressFromLocalClassicLinkToRemoteVpc" input), "allowEgressFromLocalVpcToRemoteClassicLink" (portkey.aws/getback-xml-elem-with-tag "allowEgressFromLocalVpcToRemoteClassicLink" input)}] (clojure.core/cond-> {} (letvar224708 "allowDnsResolutionFromRemoteVpc") (clojure.core/assoc :allow-dns-resolution-from-remote-vpc (deser-boolean (clojure.core/get-in letvar224708 ["allowDnsResolutionFromRemoteVpc" :content]))) (letvar224708 "allowEgressFromLocalClassicLinkToRemoteVpc") (clojure.core/assoc :allow-egress-from-local-classic-link-to-remote-vpc (deser-boolean (clojure.core/get-in letvar224708 ["allowEgressFromLocalClassicLinkToRemoteVpc" :content]))) (letvar224708 "allowEgressFromLocalVpcToRemoteClassicLink") (clojure.core/assoc :allow-egress-from-local-vpc-to-remote-classic-link (deser-boolean (clojure.core/get-in letvar224708 ["allowEgressFromLocalVpcToRemoteClassicLink" :content]))))))

(clojure.core/defn- deser-launch-templates-monitoring [input] (clojure.core/let [letvar224786 {"enabled" (portkey.aws/getback-xml-elem-with-tag "enabled" input)}] (clojure.core/cond-> {} (letvar224786 "enabled") (clojure.core/assoc :enabled (deser-boolean (clojure.core/get-in letvar224786 ["enabled" :content]))))))

(clojure.core/defn- deser-dns-entry-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-dns-entry coll))) input))

(clojure.core/defn- deser-launch-template-version [input] (clojure.core/let [letvar224881 {"launchTemplateId" (portkey.aws/getback-xml-elem-with-tag "launchTemplateId" input), "launchTemplateName" (portkey.aws/getback-xml-elem-with-tag "launchTemplateName" input), "versionNumber" (portkey.aws/getback-xml-elem-with-tag "versionNumber" input), "versionDescription" (portkey.aws/getback-xml-elem-with-tag "versionDescription" input), "createTime" (portkey.aws/getback-xml-elem-with-tag "createTime" input), "createdBy" (portkey.aws/getback-xml-elem-with-tag "createdBy" input), "defaultVersion" (portkey.aws/getback-xml-elem-with-tag "defaultVersion" input), "launchTemplateData" (portkey.aws/getback-xml-elem-with-tag "launchTemplateData" input)}] (clojure.core/cond-> {} (letvar224881 "launchTemplateId") (clojure.core/assoc :launch-template-id (deser-string (clojure.core/get-in letvar224881 ["launchTemplateId" :content]))) (letvar224881 "launchTemplateName") (clojure.core/assoc :launch-template-name (deser-launch-template-name (clojure.core/get-in letvar224881 ["launchTemplateName" :content]))) (letvar224881 "versionNumber") (clojure.core/assoc :version-number (deser-long (clojure.core/get-in letvar224881 ["versionNumber" :content]))) (letvar224881 "versionDescription") (clojure.core/assoc :version-description (deser-version-description (clojure.core/get-in letvar224881 ["versionDescription" :content]))) (letvar224881 "createTime") (clojure.core/assoc :create-time (deser-date-time (clojure.core/get-in letvar224881 ["createTime" :content]))) (letvar224881 "createdBy") (clojure.core/assoc :created-by (deser-string (clojure.core/get-in letvar224881 ["createdBy" :content]))) (letvar224881 "defaultVersion") (clojure.core/assoc :default-version (deser-boolean (clojure.core/get-in letvar224881 ["defaultVersion" :content]))) (letvar224881 "launchTemplateData") (clojure.core/assoc :launch-template-data (deser-response-launch-template-data (clojure.core/get-in letvar224881 ["launchTemplateData" :content]))))))

(clojure.core/defn- deser-vpc-attachment [input] (clojure.core/let [letvar224959 {"state" (portkey.aws/getback-xml-elem-with-tag "state" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input)}] (clojure.core/cond-> {} (letvar224959 "state") (clojure.core/assoc :state (deser-attachment-status (clojure.core/get-in letvar224959 ["state" :content]))) (letvar224959 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar224959 ["vpcId" :content]))))))

(clojure.core/defn- deser-instance-status [input] (clojure.core/let [letvar225037 {"availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "eventsSet" (portkey.aws/getback-xml-elem-with-tag "eventsSet" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "instanceState" (portkey.aws/getback-xml-elem-with-tag "instanceState" input), "instanceStatus" (portkey.aws/getback-xml-elem-with-tag "instanceStatus" input), "systemStatus" (portkey.aws/getback-xml-elem-with-tag "systemStatus" input)}] (clojure.core/cond-> {} (letvar225037 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar225037 ["availabilityZone" :content]))) (letvar225037 "eventsSet") (clojure.core/assoc :events (deser-instance-status-event-list (clojure.core/get-in letvar225037 ["eventsSet" :content]))) (letvar225037 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar225037 ["instanceId" :content]))) (letvar225037 "instanceState") (clojure.core/assoc :instance-state (deser-instance-state (clojure.core/get-in letvar225037 ["instanceState" :content]))) (letvar225037 "instanceStatus") (clojure.core/assoc :instance-status (deser-instance-status-summary (clojure.core/get-in letvar225037 ["instanceStatus" :content]))) (letvar225037 "systemStatus") (clojure.core/assoc :system-status (deser-instance-status-summary (clojure.core/get-in letvar225037 ["systemStatus" :content]))))))

(clojure.core/defn- deser-spot-fleet-launch-specification [input] (clojure.core/let [letvar225115 {"groupSet" (portkey.aws/getback-xml-elem-with-tag "groupSet" input), "ramdiskId" (portkey.aws/getback-xml-elem-with-tag "ramdiskId" input), "subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input), "addressingType" (portkey.aws/getback-xml-elem-with-tag "addressingType" input), "blockDeviceMapping" (portkey.aws/getback-xml-elem-with-tag "blockDeviceMapping" input), "keyName" (portkey.aws/getback-xml-elem-with-tag "keyName" input), "placement" (portkey.aws/getback-xml-elem-with-tag "placement" input), "monitoring" (portkey.aws/getback-xml-elem-with-tag "monitoring" input), "tagSpecificationSet" (portkey.aws/getback-xml-elem-with-tag "tagSpecificationSet" input), "iamInstanceProfile" (portkey.aws/getback-xml-elem-with-tag "iamInstanceProfile" input), "spotPrice" (portkey.aws/getback-xml-elem-with-tag "spotPrice" input), "userData" (portkey.aws/getback-xml-elem-with-tag "userData" input), "imageId" (portkey.aws/getback-xml-elem-with-tag "imageId" input), "ebsOptimized" (portkey.aws/getback-xml-elem-with-tag "ebsOptimized" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "weightedCapacity" (portkey.aws/getback-xml-elem-with-tag "weightedCapacity" input), "kernelId" (portkey.aws/getback-xml-elem-with-tag "kernelId" input), "networkInterfaceSet" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceSet" input)}] (clojure.core/cond-> {} (letvar225115 "tagSpecificationSet") (clojure.core/assoc :tag-specifications (deser-spot-fleet-tag-specification-list (clojure.core/get-in letvar225115 ["tagSpecificationSet" :content]))) (letvar225115 "kernelId") (clojure.core/assoc :kernel-id (deser-string (clojure.core/get-in letvar225115 ["kernelId" :content]))) (letvar225115 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar225115 ["imageId" :content]))) (letvar225115 "placement") (clojure.core/assoc :placement (deser-spot-placement (clojure.core/get-in letvar225115 ["placement" :content]))) (letvar225115 "addressingType") (clojure.core/assoc :addressing-type (deser-string (clojure.core/get-in letvar225115 ["addressingType" :content]))) (letvar225115 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar225115 ["subnetId" :content]))) (letvar225115 "groupSet") (clojure.core/assoc :security-groups (deser-group-identifier-list (clojure.core/get-in letvar225115 ["groupSet" :content]))) (letvar225115 "ebsOptimized") (clojure.core/assoc :ebs-optimized (deser-boolean (clojure.core/get-in letvar225115 ["ebsOptimized" :content]))) (letvar225115 "instanceType") (clojure.core/assoc :instance-type (deser-instance-type (clojure.core/get-in letvar225115 ["instanceType" :content]))) (letvar225115 "keyName") (clojure.core/assoc :key-name (deser-string (clojure.core/get-in letvar225115 ["keyName" :content]))) (letvar225115 "spotPrice") (clojure.core/assoc :spot-price (deser-string (clojure.core/get-in letvar225115 ["spotPrice" :content]))) (letvar225115 "monitoring") (clojure.core/assoc :monitoring (deser-spot-fleet-monitoring (clojure.core/get-in letvar225115 ["monitoring" :content]))) (letvar225115 "weightedCapacity") (clojure.core/assoc :weighted-capacity (deser-double (clojure.core/get-in letvar225115 ["weightedCapacity" :content]))) (letvar225115 "blockDeviceMapping") (clojure.core/assoc :block-device-mappings (deser-block-device-mapping-list (clojure.core/get-in letvar225115 ["blockDeviceMapping" :content]))) (letvar225115 "ramdiskId") (clojure.core/assoc :ramdisk-id (deser-string (clojure.core/get-in letvar225115 ["ramdiskId" :content]))) (letvar225115 "userData") (clojure.core/assoc :user-data (deser-string (clojure.core/get-in letvar225115 ["userData" :content]))) (letvar225115 "iamInstanceProfile") (clojure.core/assoc :iam-instance-profile (deser-iam-instance-profile-specification (clojure.core/get-in letvar225115 ["iamInstanceProfile" :content]))) (letvar225115 "networkInterfaceSet") (clojure.core/assoc :network-interfaces (deser-instance-network-interface-specification-list (clojure.core/get-in letvar225115 ["networkInterfaceSet" :content]))))))

(clojure.core/defn- deser-ipv-6-cidr-block-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-ipv-6-cidr-block coll))) input))

(clojure.core/defn- deser-ip-range [input] (clojure.core/let [letvar225210 {"cidrIp" (portkey.aws/getback-xml-elem-with-tag "cidrIp" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input)}] (clojure.core/cond-> {} (letvar225210 "cidrIp") (clojure.core/assoc :cidr-ip (deser-string (clojure.core/get-in letvar225210 ["cidrIp" :content]))) (letvar225210 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar225210 ["description" :content]))))))

(clojure.core/defn- deser-cidr-block-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cidr-block coll))) input))

(clojure.core/defn- deser-stale-security-group [input] (clojure.core/let [letvar225305 {"description" (portkey.aws/getback-xml-elem-with-tag "description" input), "groupId" (portkey.aws/getback-xml-elem-with-tag "groupId" input), "groupName" (portkey.aws/getback-xml-elem-with-tag "groupName" input), "staleIpPermissions" (portkey.aws/getback-xml-elem-with-tag "staleIpPermissions" input), "staleIpPermissionsEgress" (portkey.aws/getback-xml-elem-with-tag "staleIpPermissionsEgress" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input)}] (clojure.core/cond-> {:group-id (deser-string (clojure.core/get-in letvar225305 ["groupId" :content]))} (letvar225305 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar225305 ["description" :content]))) (letvar225305 "groupName") (clojure.core/assoc :group-name (deser-string (clojure.core/get-in letvar225305 ["groupName" :content]))) (letvar225305 "staleIpPermissions") (clojure.core/assoc :stale-ip-permissions (deser-stale-ip-permission-set (clojure.core/get-in letvar225305 ["staleIpPermissions" :content]))) (letvar225305 "staleIpPermissionsEgress") (clojure.core/assoc :stale-ip-permissions-egress (deser-stale-ip-permission-set (clojure.core/get-in letvar225305 ["staleIpPermissionsEgress" :content]))) (letvar225305 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar225305 ["vpcId" :content]))))))

(clojure.core/defn- deser-import-snapshot-task [input] (clojure.core/let [letvar225383 {"description" (portkey.aws/getback-xml-elem-with-tag "description" input), "importTaskId" (portkey.aws/getback-xml-elem-with-tag "importTaskId" input), "snapshotTaskDetail" (portkey.aws/getback-xml-elem-with-tag "snapshotTaskDetail" input)}] (clojure.core/cond-> {} (letvar225383 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar225383 ["description" :content]))) (letvar225383 "importTaskId") (clojure.core/assoc :import-task-id (deser-string (clojure.core/get-in letvar225383 ["importTaskId" :content]))) (letvar225383 "snapshotTaskDetail") (clojure.core/assoc :snapshot-task-detail (deser-snapshot-task-detail (clojure.core/get-in letvar225383 ["snapshotTaskDetail" :content]))))))

(clojure.core/defn- deser-elastic-gpu-specification-response [input] (clojure.core/let [letvar225461 {"type" (portkey.aws/getback-xml-elem-with-tag "type" input)}] (clojure.core/cond-> {} (letvar225461 "type") (clojure.core/assoc :type (deser-string (clojure.core/get-in letvar225461 ["type" :content]))))))

(clojure.core/defn- deser-container-format [input] (clojure.core/get {"ova" :ova} (clojure.core/first input)))

(clojure.core/defn- deser-network-interface-ipv-6-addresses-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-network-interface-ipv-6-address coll))) input))

(clojure.core/defn- deser-vpc-peering-connection-state-reason [input] (clojure.core/let [letvar225561 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "message" (portkey.aws/getback-xml-elem-with-tag "message" input)}] (clojure.core/cond-> {} (letvar225561 "code") (clojure.core/assoc :code (deser-vpc-peering-connection-state-reason-code (clojure.core/get-in letvar225561 ["code" :content]))) (letvar225561 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar225561 ["message" :content]))))))

(clojure.core/defn- deser-market-type [input] (clojure.core/get {"spot" :spot} (clojure.core/first input)))

(clojure.core/defn- deser-instance [input] (clojure.core/let [letvar225644 {"groupSet" (portkey.aws/getback-xml-elem-with-tag "groupSet" input), "ramdiskId" (portkey.aws/getback-xml-elem-with-tag "ramdiskId" input), "subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input), "productCodes" (portkey.aws/getback-xml-elem-with-tag "productCodes" input), "architecture" (portkey.aws/getback-xml-elem-with-tag "architecture" input), "stateReason" (portkey.aws/getback-xml-elem-with-tag "stateReason" input), "privateIpAddress" (portkey.aws/getback-xml-elem-with-tag "privateIpAddress" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "clientToken" (portkey.aws/getback-xml-elem-with-tag "clientToken" input), "blockDeviceMapping" (portkey.aws/getback-xml-elem-with-tag "blockDeviceMapping" input), "keyName" (portkey.aws/getback-xml-elem-with-tag "keyName" input), "cpuOptions" (portkey.aws/getback-xml-elem-with-tag "cpuOptions" input), "spotInstanceRequestId" (portkey.aws/getback-xml-elem-with-tag "spotInstanceRequestId" input), "instanceLifecycle" (portkey.aws/getback-xml-elem-with-tag "instanceLifecycle" input), "placement" (portkey.aws/getback-xml-elem-with-tag "placement" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "privateDnsName" (portkey.aws/getback-xml-elem-with-tag "privateDnsName" input), "monitoring" (portkey.aws/getback-xml-elem-with-tag "monitoring" input), "iamInstanceProfile" (portkey.aws/getback-xml-elem-with-tag "iamInstanceProfile" input), "sourceDestCheck" (portkey.aws/getback-xml-elem-with-tag "sourceDestCheck" input), "virtualizationType" (portkey.aws/getback-xml-elem-with-tag "virtualizationType" input), "launchTime" (portkey.aws/getback-xml-elem-with-tag "launchTime" input), "imageId" (portkey.aws/getback-xml-elem-with-tag "imageId" input), "rootDeviceType" (portkey.aws/getback-xml-elem-with-tag "rootDeviceType" input), "ebsOptimized" (portkey.aws/getback-xml-elem-with-tag "ebsOptimized" input), "amiLaunchIndex" (portkey.aws/getback-xml-elem-with-tag "amiLaunchIndex" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "kernelId" (portkey.aws/getback-xml-elem-with-tag "kernelId" input), "reason" (portkey.aws/getback-xml-elem-with-tag "reason" input), "enaSupport" (portkey.aws/getback-xml-elem-with-tag "enaSupport" input), "instanceState" (portkey.aws/getback-xml-elem-with-tag "instanceState" input), "networkInterfaceSet" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceSet" input), "rootDeviceName" (portkey.aws/getback-xml-elem-with-tag "rootDeviceName" input), "hypervisor" (portkey.aws/getback-xml-elem-with-tag "hypervisor" input), "platform" (portkey.aws/getback-xml-elem-with-tag "platform" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "dnsName" (portkey.aws/getback-xml-elem-with-tag "dnsName" input), "ipAddress" (portkey.aws/getback-xml-elem-with-tag "ipAddress" input), "elasticGpuAssociationSet" (portkey.aws/getback-xml-elem-with-tag "elasticGpuAssociationSet" input), "sriovNetSupport" (portkey.aws/getback-xml-elem-with-tag "sriovNetSupport" input)}] (clojure.core/cond-> {} (letvar225644 "dnsName") (clojure.core/assoc :public-dns-name (deser-string (clojure.core/get-in letvar225644 ["dnsName" :content]))) (letvar225644 "kernelId") (clojure.core/assoc :kernel-id (deser-string (clojure.core/get-in letvar225644 ["kernelId" :content]))) (letvar225644 "spotInstanceRequestId") (clojure.core/assoc :spot-instance-request-id (deser-string (clojure.core/get-in letvar225644 ["spotInstanceRequestId" :content]))) (letvar225644 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar225644 ["instanceId" :content]))) (letvar225644 "instanceLifecycle") (clojure.core/assoc :instance-lifecycle (deser-instance-lifecycle-type (clojure.core/get-in letvar225644 ["instanceLifecycle" :content]))) (letvar225644 "platform") (clojure.core/assoc :platform (deser-platform-values (clojure.core/get-in letvar225644 ["platform" :content]))) (letvar225644 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar225644 ["imageId" :content]))) (letvar225644 "placement") (clojure.core/assoc :placement (deser-placement (clojure.core/get-in letvar225644 ["placement" :content]))) (letvar225644 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar225644 ["subnetId" :content]))) (letvar225644 "rootDeviceType") (clojure.core/assoc :root-device-type (deser-device-type (clojure.core/get-in letvar225644 ["rootDeviceType" :content]))) (letvar225644 "groupSet") (clojure.core/assoc :security-groups (deser-group-identifier-list (clojure.core/get-in letvar225644 ["groupSet" :content]))) (letvar225644 "ebsOptimized") (clojure.core/assoc :ebs-optimized (deser-boolean (clojure.core/get-in letvar225644 ["ebsOptimized" :content]))) (letvar225644 "instanceType") (clojure.core/assoc :instance-type (deser-instance-type (clojure.core/get-in letvar225644 ["instanceType" :content]))) (letvar225644 "sriovNetSupport") (clojure.core/assoc :sriov-net-support (deser-string (clojure.core/get-in letvar225644 ["sriovNetSupport" :content]))) (letvar225644 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar225644 ["tagSet" :content]))) (letvar225644 "sourceDestCheck") (clojure.core/assoc :source-dest-check (deser-boolean (clojure.core/get-in letvar225644 ["sourceDestCheck" :content]))) (letvar225644 "keyName") (clojure.core/assoc :key-name (deser-string (clojure.core/get-in letvar225644 ["keyName" :content]))) (letvar225644 "elasticGpuAssociationSet") (clojure.core/assoc :elastic-gpu-associations (deser-elastic-gpu-association-list (clojure.core/get-in letvar225644 ["elasticGpuAssociationSet" :content]))) (letvar225644 "privateDnsName") (clojure.core/assoc :private-dns-name (deser-string (clojure.core/get-in letvar225644 ["privateDnsName" :content]))) (letvar225644 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar225644 ["vpcId" :content]))) (letvar225644 "monitoring") (clojure.core/assoc :monitoring (deser-monitoring (clojure.core/get-in letvar225644 ["monitoring" :content]))) (letvar225644 "blockDeviceMapping") (clojure.core/assoc :block-device-mappings (deser-instance-block-device-mapping-list (clojure.core/get-in letvar225644 ["blockDeviceMapping" :content]))) (letvar225644 "hypervisor") (clojure.core/assoc :hypervisor (deser-hypervisor-type (clojure.core/get-in letvar225644 ["hypervisor" :content]))) (letvar225644 "architecture") (clojure.core/assoc :architecture (deser-architecture-values (clojure.core/get-in letvar225644 ["architecture" :content]))) (letvar225644 "virtualizationType") (clojure.core/assoc :virtualization-type (deser-virtualization-type (clojure.core/get-in letvar225644 ["virtualizationType" :content]))) (letvar225644 "productCodes") (clojure.core/assoc :product-codes (deser-product-code-list (clojure.core/get-in letvar225644 ["productCodes" :content]))) (letvar225644 "instanceState") (clojure.core/assoc :state (deser-instance-state (clojure.core/get-in letvar225644 ["instanceState" :content]))) (letvar225644 "cpuOptions") (clojure.core/assoc :cpu-options (deser-cpu-options (clojure.core/get-in letvar225644 ["cpuOptions" :content]))) (letvar225644 "rootDeviceName") (clojure.core/assoc :root-device-name (deser-string (clojure.core/get-in letvar225644 ["rootDeviceName" :content]))) (letvar225644 "ramdiskId") (clojure.core/assoc :ramdisk-id (deser-string (clojure.core/get-in letvar225644 ["ramdiskId" :content]))) (letvar225644 "launchTime") (clojure.core/assoc :launch-time (deser-date-time (clojure.core/get-in letvar225644 ["launchTime" :content]))) (letvar225644 "ipAddress") (clojure.core/assoc :public-ip-address (deser-string (clojure.core/get-in letvar225644 ["ipAddress" :content]))) (letvar225644 "stateReason") (clojure.core/assoc :state-reason (deser-state-reason (clojure.core/get-in letvar225644 ["stateReason" :content]))) (letvar225644 "iamInstanceProfile") (clojure.core/assoc :iam-instance-profile (deser-iam-instance-profile (clojure.core/get-in letvar225644 ["iamInstanceProfile" :content]))) (letvar225644 "amiLaunchIndex") (clojure.core/assoc :ami-launch-index (deser-integer (clojure.core/get-in letvar225644 ["amiLaunchIndex" :content]))) (letvar225644 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar225644 ["clientToken" :content]))) (letvar225644 "reason") (clojure.core/assoc :state-transition-reason (deser-string (clojure.core/get-in letvar225644 ["reason" :content]))) (letvar225644 "privateIpAddress") (clojure.core/assoc :private-ip-address (deser-string (clojure.core/get-in letvar225644 ["privateIpAddress" :content]))) (letvar225644 "networkInterfaceSet") (clojure.core/assoc :network-interfaces (deser-instance-network-interface-list (clojure.core/get-in letvar225644 ["networkInterfaceSet" :content]))) (letvar225644 "enaSupport") (clojure.core/assoc :ena-support (deser-boolean (clojure.core/get-in letvar225644 ["enaSupport" :content]))))))

(clojure.core/defn- deser-nat-gateway-state [input] (clojure.core/get {"pending" :pending, "failed" :failed, "available" :available, "deleting" :deleting, "deleted" :deleted} (clojure.core/first input)))

(clojure.core/defn- deser-block-device-mapping-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-block-device-mapping coll))) input))

(clojure.core/defn- deser-blob [input] (portkey.aws/base64-decode (clojure.core/first input)))

(clojure.core/defn- deser-delete-fleet-error-item [input] (clojure.core/let [letvar225746 {"error" (portkey.aws/getback-xml-elem-with-tag "error" input), "fleetId" (portkey.aws/getback-xml-elem-with-tag "fleetId" input)}] (clojure.core/cond-> {} (letvar225746 "error") (clojure.core/assoc :error (deser-delete-fleet-error (clojure.core/get-in letvar225746 ["error" :content]))) (letvar225746 "fleetId") (clojure.core/assoc :fleet-id (deser-fleet-identifier (clojure.core/get-in letvar225746 ["fleetId" :content]))))))

(clojure.core/defn- deser-instance-block-device-mapping-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-block-device-mapping coll))) input))

(clojure.core/defn- deser-security-group-reference [input] (clojure.core/let [letvar225841 {"groupId" (portkey.aws/getback-xml-elem-with-tag "groupId" input), "referencingVpcId" (portkey.aws/getback-xml-elem-with-tag "referencingVpcId" input), "vpcPeeringConnectionId" (portkey.aws/getback-xml-elem-with-tag "vpcPeeringConnectionId" input)}] (clojure.core/cond-> {:group-id (deser-string (clojure.core/get-in letvar225841 ["groupId" :content])), :referencing-vpc-id (deser-string (clojure.core/get-in letvar225841 ["referencingVpcId" :content]))} (letvar225841 "vpcPeeringConnectionId") (clojure.core/assoc :vpc-peering-connection-id (deser-string (clojure.core/get-in letvar225841 ["vpcPeeringConnectionId" :content]))))))

(clojure.core/defn- deser-classic-link-dns-support-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-classic-link-dns-support coll))) input))

(clojure.core/defn- deser-gateway-type [input] (clojure.core/get {"ipsec.1" :ipsec-1} (clojure.core/first input)))

(clojure.core/defn- deser-image [input] (clojure.core/let [letvar225941 {"creationDate" (portkey.aws/getback-xml-elem-with-tag "creationDate" input), "ramdiskId" (portkey.aws/getback-xml-elem-with-tag "ramdiskId" input), "productCodes" (portkey.aws/getback-xml-elem-with-tag "productCodes" input), "architecture" (portkey.aws/getback-xml-elem-with-tag "architecture" input), "stateReason" (portkey.aws/getback-xml-elem-with-tag "stateReason" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "blockDeviceMapping" (portkey.aws/getback-xml-elem-with-tag "blockDeviceMapping" input), "imageLocation" (portkey.aws/getback-xml-elem-with-tag "imageLocation" input), "name" (portkey.aws/getback-xml-elem-with-tag "name" input), "imageOwnerId" (portkey.aws/getback-xml-elem-with-tag "imageOwnerId" input), "virtualizationType" (portkey.aws/getback-xml-elem-with-tag "virtualizationType" input), "imageId" (portkey.aws/getback-xml-elem-with-tag "imageId" input), "imageState" (portkey.aws/getback-xml-elem-with-tag "imageState" input), "rootDeviceType" (portkey.aws/getback-xml-elem-with-tag "rootDeviceType" input), "imageType" (portkey.aws/getback-xml-elem-with-tag "imageType" input), "imageOwnerAlias" (portkey.aws/getback-xml-elem-with-tag "imageOwnerAlias" input), "kernelId" (portkey.aws/getback-xml-elem-with-tag "kernelId" input), "enaSupport" (portkey.aws/getback-xml-elem-with-tag "enaSupport" input), "rootDeviceName" (portkey.aws/getback-xml-elem-with-tag "rootDeviceName" input), "hypervisor" (portkey.aws/getback-xml-elem-with-tag "hypervisor" input), "isPublic" (portkey.aws/getback-xml-elem-with-tag "isPublic" input), "platform" (portkey.aws/getback-xml-elem-with-tag "platform" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input), "sriovNetSupport" (portkey.aws/getback-xml-elem-with-tag "sriovNetSupport" input)}] (clojure.core/cond-> {} (letvar225941 "kernelId") (clojure.core/assoc :kernel-id (deser-string (clojure.core/get-in letvar225941 ["kernelId" :content]))) (letvar225941 "platform") (clojure.core/assoc :platform (deser-platform-values (clojure.core/get-in letvar225941 ["platform" :content]))) (letvar225941 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar225941 ["imageId" :content]))) (letvar225941 "rootDeviceType") (clojure.core/assoc :root-device-type (deser-device-type (clojure.core/get-in letvar225941 ["rootDeviceType" :content]))) (letvar225941 "imageOwnerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar225941 ["imageOwnerId" :content]))) (letvar225941 "sriovNetSupport") (clojure.core/assoc :sriov-net-support (deser-string (clojure.core/get-in letvar225941 ["sriovNetSupport" :content]))) (letvar225941 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar225941 ["tagSet" :content]))) (letvar225941 "isPublic") (clojure.core/assoc :public (deser-boolean (clojure.core/get-in letvar225941 ["isPublic" :content]))) (letvar225941 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar225941 ["description" :content]))) (letvar225941 "blockDeviceMapping") (clojure.core/assoc :block-device-mappings (deser-block-device-mapping-list (clojure.core/get-in letvar225941 ["blockDeviceMapping" :content]))) (letvar225941 "hypervisor") (clojure.core/assoc :hypervisor (deser-hypervisor-type (clojure.core/get-in letvar225941 ["hypervisor" :content]))) (letvar225941 "architecture") (clojure.core/assoc :architecture (deser-architecture-values (clojure.core/get-in letvar225941 ["architecture" :content]))) (letvar225941 "imageOwnerAlias") (clojure.core/assoc :image-owner-alias (deser-string (clojure.core/get-in letvar225941 ["imageOwnerAlias" :content]))) (letvar225941 "creationDate") (clojure.core/assoc :creation-date (deser-string (clojure.core/get-in letvar225941 ["creationDate" :content]))) (letvar225941 "virtualizationType") (clojure.core/assoc :virtualization-type (deser-virtualization-type (clojure.core/get-in letvar225941 ["virtualizationType" :content]))) (letvar225941 "productCodes") (clojure.core/assoc :product-codes (deser-product-code-list (clojure.core/get-in letvar225941 ["productCodes" :content]))) (letvar225941 "imageLocation") (clojure.core/assoc :image-location (deser-string (clojure.core/get-in letvar225941 ["imageLocation" :content]))) (letvar225941 "imageState") (clojure.core/assoc :state (deser-image-state (clojure.core/get-in letvar225941 ["imageState" :content]))) (letvar225941 "imageType") (clojure.core/assoc :image-type (deser-image-type-values (clojure.core/get-in letvar225941 ["imageType" :content]))) (letvar225941 "rootDeviceName") (clojure.core/assoc :root-device-name (deser-string (clojure.core/get-in letvar225941 ["rootDeviceName" :content]))) (letvar225941 "ramdiskId") (clojure.core/assoc :ramdisk-id (deser-string (clojure.core/get-in letvar225941 ["ramdiskId" :content]))) (letvar225941 "name") (clojure.core/assoc :name (deser-string (clojure.core/get-in letvar225941 ["name" :content]))) (letvar225941 "stateReason") (clojure.core/assoc :state-reason (deser-state-reason (clojure.core/get-in letvar225941 ["stateReason" :content]))) (letvar225941 "enaSupport") (clojure.core/assoc :ena-support (deser-boolean (clojure.core/get-in letvar225941 ["enaSupport" :content]))))))

(clojure.core/defn- deser-ip-range-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-ip-range coll))) input))

(clojure.core/defn- deser-image-type-values [input] (clojure.core/get {"machine" :machine, "kernel" :kernel, "ramdisk" :ramdisk} (clojure.core/first input)))

(clojure.core/defn- deser-classic-link-instance [input] (clojure.core/let [letvar226041 {"groupSet" (portkey.aws/getback-xml-elem-with-tag "groupSet" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input)}] (clojure.core/cond-> {} (letvar226041 "groupSet") (clojure.core/assoc :groups (deser-group-identifier-list (clojure.core/get-in letvar226041 ["groupSet" :content]))) (letvar226041 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar226041 ["instanceId" :content]))) (letvar226041 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar226041 ["tagSet" :content]))) (letvar226041 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar226041 ["vpcId" :content]))))))

(clojure.core/defn- deser-classic-load-balancers [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-classic-load-balancer coll))) input))

(clojure.core/defn- deser-security-group-identifier [input] (clojure.core/let [letvar226136 {"groupId" (portkey.aws/getback-xml-elem-with-tag "groupId" input), "groupName" (portkey.aws/getback-xml-elem-with-tag "groupName" input)}] (clojure.core/cond-> {} (letvar226136 "groupId") (clojure.core/assoc :group-id (deser-string (clojure.core/get-in letvar226136 ["groupId" :content]))) (letvar226136 "groupName") (clojure.core/assoc :group-name (deser-string (clojure.core/get-in letvar226136 ["groupName" :content]))))))

(clojure.core/defn- deser-cancel-spot-fleet-requests-error-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-cancel-spot-fleet-requests-error-item coll))) input))

(clojure.core/defn- deser-reserved-instances-modification-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reserved-instances-modification coll))) input))

(clojure.core/defn- deser-network-acl-entry-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-network-acl-entry coll))) input))

(clojure.core/defn- deser-network-interface-private-ip-address-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-network-interface-private-ip-address coll))) input))

(clojure.core/defn- deser-target-group [input] (clojure.core/let [letvar226282 {"arn" (portkey.aws/getback-xml-elem-with-tag "arn" input)}] (clojure.core/cond-> {:arn (deser-string (clojure.core/get-in letvar226282 ["arn" :content]))})))

(clojure.core/defn- deser-conversion-task-state [input] (clojure.core/get {"active" :active, "cancelling" :cancelling, "cancelled" :cancelled, "completed" :completed} (clojure.core/first input)))

(clojure.core/defn- deser-offering-class-type [input] (clojure.core/get {"standard" :standard, "convertible" :convertible} (clojure.core/first input)))

(clojure.core/defn- deser-launch-template-error-code [input] (clojure.core/get {"launchTemplateIdDoesNotExist" :launch-template-id-does-not-exist, "launchTemplateIdMalformed" :launch-template-id-malformed, "launchTemplateNameDoesNotExist" :launch-template-name-does-not-exist, "launchTemplateNameMalformed" :launch-template-name-malformed, "launchTemplateVersionDoesNotExist" :launch-template-version-does-not-exist, "unexpectedError" :unexpected-error} (clojure.core/first input)))

(clojure.core/defn- deser-nat-gateway-address-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-nat-gateway-address coll))) input))

(clojure.core/defn- deser-reserved-instances-modification [input] (clojure.core/let [letvar226392 {"updateDate" (portkey.aws/getback-xml-elem-with-tag "updateDate" input), "createDate" (portkey.aws/getback-xml-elem-with-tag "createDate" input), "clientToken" (portkey.aws/getback-xml-elem-with-tag "clientToken" input), "effectiveDate" (portkey.aws/getback-xml-elem-with-tag "effectiveDate" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input), "reservedInstancesSet" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesSet" input), "modificationResultSet" (portkey.aws/getback-xml-elem-with-tag "modificationResultSet" input), "reservedInstancesModificationId" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesModificationId" input)}] (clojure.core/cond-> {} (letvar226392 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar226392 ["statusMessage" :content]))) (letvar226392 "createDate") (clojure.core/assoc :create-date (deser-date-time (clojure.core/get-in letvar226392 ["createDate" :content]))) (letvar226392 "reservedInstancesModificationId") (clojure.core/assoc :reserved-instances-modification-id (deser-string (clojure.core/get-in letvar226392 ["reservedInstancesModificationId" :content]))) (letvar226392 "status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar226392 ["status" :content]))) (letvar226392 "modificationResultSet") (clojure.core/assoc :modification-results (deser-reserved-instances-modification-result-list (clojure.core/get-in letvar226392 ["modificationResultSet" :content]))) (letvar226392 "reservedInstancesSet") (clojure.core/assoc :reserved-instances-ids (deser-reserved-intances-ids (clojure.core/get-in letvar226392 ["reservedInstancesSet" :content]))) (letvar226392 "updateDate") (clojure.core/assoc :update-date (deser-date-time (clojure.core/get-in letvar226392 ["updateDate" :content]))) (letvar226392 "effectiveDate") (clojure.core/assoc :effective-date (deser-date-time (clojure.core/get-in letvar226392 ["effectiveDate" :content]))) (letvar226392 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar226392 ["clientToken" :content]))))))

(clojure.core/defn- deser-listing-status [input] (clojure.core/get {"active" :active, "pending" :pending, "cancelled" :cancelled, "closed" :closed} (clojure.core/first input)))

(clojure.core/defn- deser-launch-template-overrides-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-launch-template-overrides coll))) input))

(clojure.core/defn- deser-classic-link-instance-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-classic-link-instance coll))) input))

(clojure.core/defn- deser-import-image-task-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-import-image-task coll))) input))

(clojure.core/defn- deser-route-table-association-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-route-table-association coll))) input))

(clojure.core/defn- deser-iam-instance-profile-association-state [input] (clojure.core/get {"associating" :associating, "associated" :associated, "disassociating" :disassociating, "disassociated" :disassociated} (clojure.core/first input)))

(clojure.core/defn- deser-service-configuration [input] (clojure.core/let [letvar226548 {"serviceType" (portkey.aws/getback-xml-elem-with-tag "serviceType" input), "privateDnsName" (portkey.aws/getback-xml-elem-with-tag "privateDnsName" input), "acceptanceRequired" (portkey.aws/getback-xml-elem-with-tag "acceptanceRequired" input), "availabilityZoneSet" (portkey.aws/getback-xml-elem-with-tag "availabilityZoneSet" input), "serviceName" (portkey.aws/getback-xml-elem-with-tag "serviceName" input), "serviceId" (portkey.aws/getback-xml-elem-with-tag "serviceId" input), "networkLoadBalancerArnSet" (portkey.aws/getback-xml-elem-with-tag "networkLoadBalancerArnSet" input), "serviceState" (portkey.aws/getback-xml-elem-with-tag "serviceState" input), "baseEndpointDnsNameSet" (portkey.aws/getback-xml-elem-with-tag "baseEndpointDnsNameSet" input)}] (clojure.core/cond-> {} (letvar226548 "acceptanceRequired") (clojure.core/assoc :acceptance-required (deser-boolean (clojure.core/get-in letvar226548 ["acceptanceRequired" :content]))) (letvar226548 "serviceType") (clojure.core/assoc :service-type (deser-service-type-detail-set (clojure.core/get-in letvar226548 ["serviceType" :content]))) (letvar226548 "serviceState") (clojure.core/assoc :service-state (deser-service-state (clojure.core/get-in letvar226548 ["serviceState" :content]))) (letvar226548 "privateDnsName") (clojure.core/assoc :private-dns-name (deser-string (clojure.core/get-in letvar226548 ["privateDnsName" :content]))) (letvar226548 "serviceId") (clojure.core/assoc :service-id (deser-string (clojure.core/get-in letvar226548 ["serviceId" :content]))) (letvar226548 "baseEndpointDnsNameSet") (clojure.core/assoc :base-endpoint-dns-names (deser-value-string-list (clojure.core/get-in letvar226548 ["baseEndpointDnsNameSet" :content]))) (letvar226548 "networkLoadBalancerArnSet") (clojure.core/assoc :network-load-balancer-arns (deser-value-string-list (clojure.core/get-in letvar226548 ["networkLoadBalancerArnSet" :content]))) (letvar226548 "serviceName") (clojure.core/assoc :service-name (deser-string (clojure.core/get-in letvar226548 ["serviceName" :content]))) (letvar226548 "availabilityZoneSet") (clojure.core/assoc :availability-zones (deser-value-string-list (clojure.core/get-in letvar226548 ["availabilityZoneSet" :content]))))))

(clojure.core/defn- deser-offering-type-values [input] (clojure.core/get {"Heavy Utilization" :heavy-utilization, "Medium Utilization" :medium-utilization, "Light Utilization" :light-utilization, "No Upfront" :no-upfront, "Partial Upfront" :partial-upfront, "All Upfront" :all-upfront} (clojure.core/first input)))

(clojure.core/defn- deser-float [input] (java.lang.Float. (clojure.core/first input)))

(clojure.core/defn- deser-network-acl [input] (clojure.core/let [letvar226633 {"associationSet" (portkey.aws/getback-xml-elem-with-tag "associationSet" input), "entrySet" (portkey.aws/getback-xml-elem-with-tag "entrySet" input), "default" (portkey.aws/getback-xml-elem-with-tag "default" input), "networkAclId" (portkey.aws/getback-xml-elem-with-tag "networkAclId" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input)}] (clojure.core/cond-> {} (letvar226633 "associationSet") (clojure.core/assoc :associations (deser-network-acl-association-list (clojure.core/get-in letvar226633 ["associationSet" :content]))) (letvar226633 "entrySet") (clojure.core/assoc :entries (deser-network-acl-entry-list (clojure.core/get-in letvar226633 ["entrySet" :content]))) (letvar226633 "default") (clojure.core/assoc :is-default (deser-boolean (clojure.core/get-in letvar226633 ["default" :content]))) (letvar226633 "networkAclId") (clojure.core/assoc :network-acl-id (deser-string (clojure.core/get-in letvar226633 ["networkAclId" :content]))) (letvar226633 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar226633 ["tagSet" :content]))) (letvar226633 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar226633 ["vpcId" :content]))))))

(clojure.core/defn- deser-target-capacity-specification [input] (clojure.core/let [letvar226711 {"totalTargetCapacity" (portkey.aws/getback-xml-elem-with-tag "totalTargetCapacity" input), "onDemandTargetCapacity" (portkey.aws/getback-xml-elem-with-tag "onDemandTargetCapacity" input), "spotTargetCapacity" (portkey.aws/getback-xml-elem-with-tag "spotTargetCapacity" input), "defaultTargetCapacityType" (portkey.aws/getback-xml-elem-with-tag "defaultTargetCapacityType" input)}] (clojure.core/cond-> {} (letvar226711 "totalTargetCapacity") (clojure.core/assoc :total-target-capacity (deser-integer (clojure.core/get-in letvar226711 ["totalTargetCapacity" :content]))) (letvar226711 "onDemandTargetCapacity") (clojure.core/assoc :on-demand-target-capacity (deser-integer (clojure.core/get-in letvar226711 ["onDemandTargetCapacity" :content]))) (letvar226711 "spotTargetCapacity") (clojure.core/assoc :spot-target-capacity (deser-integer (clojure.core/get-in letvar226711 ["spotTargetCapacity" :content]))) (letvar226711 "defaultTargetCapacityType") (clojure.core/assoc :default-target-capacity-type (deser-default-target-capacity-type (clojure.core/get-in letvar226711 ["defaultTargetCapacityType" :content]))))))

(clojure.core/defn- deser-delete-launch-template-versions-response-error-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-delete-launch-template-versions-response-error-item coll))) input))

(clojure.core/defn- deser-unsuccessful-instance-credit-specification-item-error [input] (clojure.core/let [letvar226806 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "message" (portkey.aws/getback-xml-elem-with-tag "message" input)}] (clojure.core/cond-> {} (letvar226806 "code") (clojure.core/assoc :code (deser-unsuccessful-instance-credit-specification-error-code (clojure.core/get-in letvar226806 ["code" :content]))) (letvar226806 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar226806 ["message" :content]))))))

(clojure.core/defn- deser-volume-attachment [input] (clojure.core/let [letvar226884 {"attachTime" (portkey.aws/getback-xml-elem-with-tag "attachTime" input), "device" (portkey.aws/getback-xml-elem-with-tag "device" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "volumeId" (portkey.aws/getback-xml-elem-with-tag "volumeId" input), "deleteOnTermination" (portkey.aws/getback-xml-elem-with-tag "deleteOnTermination" input)}] (clojure.core/cond-> {} (letvar226884 "attachTime") (clojure.core/assoc :attach-time (deser-date-time (clojure.core/get-in letvar226884 ["attachTime" :content]))) (letvar226884 "device") (clojure.core/assoc :device (deser-string (clojure.core/get-in letvar226884 ["device" :content]))) (letvar226884 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar226884 ["instanceId" :content]))) (letvar226884 "status") (clojure.core/assoc :state (deser-volume-attachment-state (clojure.core/get-in letvar226884 ["status" :content]))) (letvar226884 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar226884 ["volumeId" :content]))) (letvar226884 "deleteOnTermination") (clojure.core/assoc :delete-on-termination (deser-boolean (clojure.core/get-in letvar226884 ["deleteOnTermination" :content]))))))

(clojure.core/defn- deser-route-table-association [input] (clojure.core/let [letvar226962 {"main" (portkey.aws/getback-xml-elem-with-tag "main" input), "routeTableAssociationId" (portkey.aws/getback-xml-elem-with-tag "routeTableAssociationId" input), "routeTableId" (portkey.aws/getback-xml-elem-with-tag "routeTableId" input), "subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input)}] (clojure.core/cond-> {} (letvar226962 "main") (clojure.core/assoc :main (deser-boolean (clojure.core/get-in letvar226962 ["main" :content]))) (letvar226962 "routeTableAssociationId") (clojure.core/assoc :route-table-association-id (deser-string (clojure.core/get-in letvar226962 ["routeTableAssociationId" :content]))) (letvar226962 "routeTableId") (clojure.core/assoc :route-table-id (deser-string (clojure.core/get-in letvar226962 ["routeTableId" :content]))) (letvar226962 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar226962 ["subnetId" :content]))))))

(clojure.core/defn- deser-subnet-ipv-6-cidr-block-association [input] (clojure.core/let [letvar227040 {"associationId" (portkey.aws/getback-xml-elem-with-tag "associationId" input), "ipv6CidrBlock" (portkey.aws/getback-xml-elem-with-tag "ipv6CidrBlock" input), "ipv6CidrBlockState" (portkey.aws/getback-xml-elem-with-tag "ipv6CidrBlockState" input)}] (clojure.core/cond-> {} (letvar227040 "associationId") (clojure.core/assoc :association-id (deser-string (clojure.core/get-in letvar227040 ["associationId" :content]))) (letvar227040 "ipv6CidrBlock") (clojure.core/assoc :ipv-6-cidr-block (deser-string (clojure.core/get-in letvar227040 ["ipv6CidrBlock" :content]))) (letvar227040 "ipv6CidrBlockState") (clojure.core/assoc :ipv-6-cidr-block-state (deser-subnet-cidr-block-state (clojure.core/get-in letvar227040 ["ipv6CidrBlockState" :content]))))))

(clojure.core/defn- deser-principal-id-format [input] (clojure.core/let [letvar227118 {"arn" (portkey.aws/getback-xml-elem-with-tag "arn" input), "statusSet" (portkey.aws/getback-xml-elem-with-tag "statusSet" input)}] (clojure.core/cond-> {} (letvar227118 "arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar227118 ["arn" :content]))) (letvar227118 "statusSet") (clojure.core/assoc :statuses (deser-id-format-list (clojure.core/get-in letvar227118 ["statusSet" :content]))))))

(clojure.core/defn- deser-vpn-connection [input] (clojure.core/let [letvar227196 {"vpnGatewayId" (portkey.aws/getback-xml-elem-with-tag "vpnGatewayId" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "customerGatewayId" (portkey.aws/getback-xml-elem-with-tag "customerGatewayId" input), "vgwTelemetry" (portkey.aws/getback-xml-elem-with-tag "vgwTelemetry" input), "customerGatewayConfiguration" (portkey.aws/getback-xml-elem-with-tag "customerGatewayConfiguration" input), "type" (portkey.aws/getback-xml-elem-with-tag "type" input), "vpnConnectionId" (portkey.aws/getback-xml-elem-with-tag "vpnConnectionId" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "category" (portkey.aws/getback-xml-elem-with-tag "category" input), "options" (portkey.aws/getback-xml-elem-with-tag "options" input), "routes" (portkey.aws/getback-xml-elem-with-tag "routes" input)}] (clojure.core/cond-> {} (letvar227196 "type") (clojure.core/assoc :type (deser-gateway-type (clojure.core/get-in letvar227196 ["type" :content]))) (letvar227196 "category") (clojure.core/assoc :category (deser-string (clojure.core/get-in letvar227196 ["category" :content]))) (letvar227196 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar227196 ["tagSet" :content]))) (letvar227196 "routes") (clojure.core/assoc :routes (deser-vpn-static-route-list (clojure.core/get-in letvar227196 ["routes" :content]))) (letvar227196 "customerGatewayId") (clojure.core/assoc :customer-gateway-id (deser-string (clojure.core/get-in letvar227196 ["customerGatewayId" :content]))) (letvar227196 "vpnGatewayId") (clojure.core/assoc :vpn-gateway-id (deser-string (clojure.core/get-in letvar227196 ["vpnGatewayId" :content]))) (letvar227196 "vgwTelemetry") (clojure.core/assoc :vgw-telemetry (deser-vgw-telemetry-list (clojure.core/get-in letvar227196 ["vgwTelemetry" :content]))) (letvar227196 "vpnConnectionId") (clojure.core/assoc :vpn-connection-id (deser-string (clojure.core/get-in letvar227196 ["vpnConnectionId" :content]))) (letvar227196 "state") (clojure.core/assoc :state (deser-vpn-state (clojure.core/get-in letvar227196 ["state" :content]))) (letvar227196 "options") (clojure.core/assoc :options (deser-vpn-connection-options (clojure.core/get-in letvar227196 ["options" :content]))) (letvar227196 "customerGatewayConfiguration") (clojure.core/assoc :customer-gateway-configuration (deser-string (clojure.core/get-in letvar227196 ["customerGatewayConfiguration" :content]))))))

(clojure.core/defn- deser-region [input] (clojure.core/let [letvar227274 {"regionEndpoint" (portkey.aws/getback-xml-elem-with-tag "regionEndpoint" input), "regionName" (portkey.aws/getback-xml-elem-with-tag "regionName" input)}] (clojure.core/cond-> {} (letvar227274 "regionEndpoint") (clojure.core/assoc :endpoint (deser-string (clojure.core/get-in letvar227274 ["regionEndpoint" :content]))) (letvar227274 "regionName") (clojure.core/assoc :region-name (deser-string (clojure.core/get-in letvar227274 ["regionName" :content]))))))

(clojure.core/defn- deser-fpga-image-state [input] (clojure.core/let [letvar227352 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "message" (portkey.aws/getback-xml-elem-with-tag "message" input)}] (clojure.core/cond-> {} (letvar227352 "code") (clojure.core/assoc :code (deser-fpga-image-state-code (clojure.core/get-in letvar227352 ["code" :content]))) (letvar227352 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar227352 ["message" :content]))))))

(clojure.core/defn- deser-state-reason [input] (clojure.core/let [letvar227430 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "message" (portkey.aws/getback-xml-elem-with-tag "message" input)}] (clojure.core/cond-> {} (letvar227430 "code") (clojure.core/assoc :code (deser-string (clojure.core/get-in letvar227430 ["code" :content]))) (letvar227430 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar227430 ["message" :content]))))))

(clojure.core/defn- deser-elastic-gpu-state [input] (clojure.core/get {"ATTACHED" :attached} (clojure.core/first input)))

(clojure.core/defn- deser-iam-instance-profile [input] (clojure.core/let [letvar227513 {"arn" (portkey.aws/getback-xml-elem-with-tag "arn" input), "id" (portkey.aws/getback-xml-elem-with-tag "id" input)}] (clojure.core/cond-> {} (letvar227513 "arn") (clojure.core/assoc :arn (deser-string (clojure.core/get-in letvar227513 ["arn" :content]))) (letvar227513 "id") (clojure.core/assoc :id (deser-string (clojure.core/get-in letvar227513 ["id" :content]))))))

(clojure.core/defn- deser-scheduled-instance-availability [input] (clojure.core/let [letvar227591 {"firstSlotStartTime" (portkey.aws/getback-xml-elem-with-tag "firstSlotStartTime" input), "maxTermDurationInDays" (portkey.aws/getback-xml-elem-with-tag "maxTermDurationInDays" input), "networkPlatform" (portkey.aws/getback-xml-elem-with-tag "networkPlatform" input), "hourlyPrice" (portkey.aws/getback-xml-elem-with-tag "hourlyPrice" input), "purchaseToken" (portkey.aws/getback-xml-elem-with-tag "purchaseToken" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "recurrence" (portkey.aws/getback-xml-elem-with-tag "recurrence" input), "availableInstanceCount" (portkey.aws/getback-xml-elem-with-tag "availableInstanceCount" input), "totalScheduledInstanceHours" (portkey.aws/getback-xml-elem-with-tag "totalScheduledInstanceHours" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "slotDurationInHours" (portkey.aws/getback-xml-elem-with-tag "slotDurationInHours" input), "minTermDurationInDays" (portkey.aws/getback-xml-elem-with-tag "minTermDurationInDays" input), "platform" (portkey.aws/getback-xml-elem-with-tag "platform" input)}] (clojure.core/cond-> {} (letvar227591 "maxTermDurationInDays") (clojure.core/assoc :max-term-duration-in-days (deser-integer (clojure.core/get-in letvar227591 ["maxTermDurationInDays" :content]))) (letvar227591 "platform") (clojure.core/assoc :platform (deser-string (clojure.core/get-in letvar227591 ["platform" :content]))) (letvar227591 "networkPlatform") (clojure.core/assoc :network-platform (deser-string (clojure.core/get-in letvar227591 ["networkPlatform" :content]))) (letvar227591 "recurrence") (clojure.core/assoc :recurrence (deser-scheduled-instance-recurrence (clojure.core/get-in letvar227591 ["recurrence" :content]))) (letvar227591 "instanceType") (clojure.core/assoc :instance-type (deser-string (clojure.core/get-in letvar227591 ["instanceType" :content]))) (letvar227591 "totalScheduledInstanceHours") (clojure.core/assoc :total-scheduled-instance-hours (deser-integer (clojure.core/get-in letvar227591 ["totalScheduledInstanceHours" :content]))) (letvar227591 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar227591 ["availabilityZone" :content]))) (letvar227591 "hourlyPrice") (clojure.core/assoc :hourly-price (deser-string (clojure.core/get-in letvar227591 ["hourlyPrice" :content]))) (letvar227591 "purchaseToken") (clojure.core/assoc :purchase-token (deser-string (clojure.core/get-in letvar227591 ["purchaseToken" :content]))) (letvar227591 "slotDurationInHours") (clojure.core/assoc :slot-duration-in-hours (deser-integer (clojure.core/get-in letvar227591 ["slotDurationInHours" :content]))) (letvar227591 "firstSlotStartTime") (clojure.core/assoc :first-slot-start-time (deser-date-time (clojure.core/get-in letvar227591 ["firstSlotStartTime" :content]))) (letvar227591 "availableInstanceCount") (clojure.core/assoc :available-instance-count (deser-integer (clojure.core/get-in letvar227591 ["availableInstanceCount" :content]))) (letvar227591 "minTermDurationInDays") (clojure.core/assoc :min-term-duration-in-days (deser-integer (clojure.core/get-in letvar227591 ["minTermDurationInDays" :content]))))))

(clojure.core/defn- deser-active-instance [input] (clojure.core/let [letvar227669 {"instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "spotInstanceRequestId" (portkey.aws/getback-xml-elem-with-tag "spotInstanceRequestId" input), "instanceHealth" (portkey.aws/getback-xml-elem-with-tag "instanceHealth" input)}] (clojure.core/cond-> {} (letvar227669 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar227669 ["instanceId" :content]))) (letvar227669 "instanceType") (clojure.core/assoc :instance-type (deser-string (clojure.core/get-in letvar227669 ["instanceType" :content]))) (letvar227669 "spotInstanceRequestId") (clojure.core/assoc :spot-instance-request-id (deser-string (clojure.core/get-in letvar227669 ["spotInstanceRequestId" :content]))) (letvar227669 "instanceHealth") (clojure.core/assoc :instance-health (deser-instance-health-status (clojure.core/get-in letvar227669 ["instanceHealth" :content]))))))

(clojure.core/defn- deser-fleet-excess-capacity-termination-policy [input] (clojure.core/get {"no-termination" :notermination, "termination" :termination} (clojure.core/first input)))

(clojure.core/defn- deser-subnet-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-subnet coll))) input))

(clojure.core/defn- deser-account-attribute-value [input] (clojure.core/let [letvar227769 {"attributeValue" (portkey.aws/getback-xml-elem-with-tag "attributeValue" input)}] (clojure.core/cond-> {} (letvar227769 "attributeValue") (clojure.core/assoc :attribute-value (deser-string (clojure.core/get-in letvar227769 ["attributeValue" :content]))))))

(clojure.core/defn- deser-vpc-peering-connection-state-reason-code [input] (clojure.core/get {"expired" :expired, "deleting" :deleting, "failed" :failed, "initiating-request" :initiatingrequest, "provisioning" :provisioning, "deleted" :deleted, "pending-acceptance" :pendingacceptance, "active" :active, "rejected" :rejected} (clojure.core/first input)))

(clojure.core/defn- deser-launch-permission [input] (clojure.core/let [letvar227852 {"group" (portkey.aws/getback-xml-elem-with-tag "group" input), "userId" (portkey.aws/getback-xml-elem-with-tag "userId" input)}] (clojure.core/cond-> {} (letvar227852 "group") (clojure.core/assoc :group (deser-permission-group (clojure.core/get-in letvar227852 ["group" :content]))) (letvar227852 "userId") (clojure.core/assoc :user-id (deser-string (clojure.core/get-in letvar227852 ["userId" :content]))))))

(clojure.core/defn- deser-elastic-gpu-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-elastic-gpus coll))) input))

(clojure.core/defn- deser-internet-gateway-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-internet-gateway coll))) input))

(clojure.core/defn- deser-delete-fleet-error [input] (clojure.core/let [letvar227964 {"code" (portkey.aws/getback-xml-elem-with-tag "code" input), "message" (portkey.aws/getback-xml-elem-with-tag "message" input)}] (clojure.core/cond-> {} (letvar227964 "code") (clojure.core/assoc :code (deser-delete-fleet-error-code (clojure.core/get-in letvar227964 ["code" :content]))) (letvar227964 "message") (clojure.core/assoc :message (deser-string (clojure.core/get-in letvar227964 ["message" :content]))))))

(clojure.core/defn- deser-account-attribute [input] (clojure.core/let [letvar228042 {"attributeName" (portkey.aws/getback-xml-elem-with-tag "attributeName" input), "attributeValueSet" (portkey.aws/getback-xml-elem-with-tag "attributeValueSet" input)}] (clojure.core/cond-> {} (letvar228042 "attributeName") (clojure.core/assoc :attribute-name (deser-string (clojure.core/get-in letvar228042 ["attributeName" :content]))) (letvar228042 "attributeValueSet") (clojure.core/assoc :attribute-values (deser-account-attribute-value-list (clojure.core/get-in letvar228042 ["attributeValueSet" :content]))))))

(clojure.core/defn- deser-history-record-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-history-record-entry coll))) input))

(clojure.core/defn- deser-launch-template-instance-market-options [input] (clojure.core/let [letvar228137 {"marketType" (portkey.aws/getback-xml-elem-with-tag "marketType" input), "spotOptions" (portkey.aws/getback-xml-elem-with-tag "spotOptions" input)}] (clojure.core/cond-> {} (letvar228137 "marketType") (clojure.core/assoc :market-type (deser-market-type (clojure.core/get-in letvar228137 ["marketType" :content]))) (letvar228137 "spotOptions") (clojure.core/assoc :spot-options (deser-launch-template-spot-market-options (clojure.core/get-in letvar228137 ["spotOptions" :content]))))))

(clojure.core/defn- deser-ipv-6-range [input] (clojure.core/let [letvar228215 {"cidrIpv6" (portkey.aws/getback-xml-elem-with-tag "cidrIpv6" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input)}] (clojure.core/cond-> {} (letvar228215 "cidrIpv6") (clojure.core/assoc :cidr-ipv-6 (deser-string (clojure.core/get-in letvar228215 ["cidrIpv6" :content]))) (letvar228215 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar228215 ["description" :content]))))))

(clojure.core/defn- deser-host [input] (clojure.core/let [letvar228293 {"availableCapacity" (portkey.aws/getback-xml-elem-with-tag "availableCapacity" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "clientToken" (portkey.aws/getback-xml-elem-with-tag "clientToken" input), "hostReservationId" (portkey.aws/getback-xml-elem-with-tag "hostReservationId" input), "allocationTime" (portkey.aws/getback-xml-elem-with-tag "allocationTime" input), "hostProperties" (portkey.aws/getback-xml-elem-with-tag "hostProperties" input), "hostId" (portkey.aws/getback-xml-elem-with-tag "hostId" input), "releaseTime" (portkey.aws/getback-xml-elem-with-tag "releaseTime" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "instances" (portkey.aws/getback-xml-elem-with-tag "instances" input), "autoPlacement" (portkey.aws/getback-xml-elem-with-tag "autoPlacement" input)}] (clojure.core/cond-> {} (letvar228293 "releaseTime") (clojure.core/assoc :release-time (deser-date-time (clojure.core/get-in letvar228293 ["releaseTime" :content]))) (letvar228293 "hostProperties") (clojure.core/assoc :host-properties (deser-host-properties (clojure.core/get-in letvar228293 ["hostProperties" :content]))) (letvar228293 "hostId") (clojure.core/assoc :host-id (deser-string (clojure.core/get-in letvar228293 ["hostId" :content]))) (letvar228293 "availableCapacity") (clojure.core/assoc :available-capacity (deser-available-capacity (clojure.core/get-in letvar228293 ["availableCapacity" :content]))) (letvar228293 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar228293 ["tagSet" :content]))) (letvar228293 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar228293 ["availabilityZone" :content]))) (letvar228293 "autoPlacement") (clojure.core/assoc :auto-placement (deser-auto-placement (clojure.core/get-in letvar228293 ["autoPlacement" :content]))) (letvar228293 "hostReservationId") (clojure.core/assoc :host-reservation-id (deser-string (clojure.core/get-in letvar228293 ["hostReservationId" :content]))) (letvar228293 "state") (clojure.core/assoc :state (deser-allocation-state (clojure.core/get-in letvar228293 ["state" :content]))) (letvar228293 "allocationTime") (clojure.core/assoc :allocation-time (deser-date-time (clojure.core/get-in letvar228293 ["allocationTime" :content]))) (letvar228293 "instances") (clojure.core/assoc :instances (deser-host-instance-list (clojure.core/get-in letvar228293 ["instances" :content]))) (letvar228293 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar228293 ["clientToken" :content]))))))

(clojure.core/defn- deser-egress-only-internet-gateway-id [input] (clojure.core/first input))

(clojure.core/defn- deser-activity-status [input] (clojure.core/get {"error" :error, "pending_fulfillment" :pending-fulfillment, "pending_termination" :pending-termination, "fulfilled" :fulfilled} (clojure.core/first input)))

(clojure.core/defn- deser-placement-group [input] (clojure.core/let [letvar228381 {"groupName" (portkey.aws/getback-xml-elem-with-tag "groupName" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "strategy" (portkey.aws/getback-xml-elem-with-tag "strategy" input)}] (clojure.core/cond-> {} (letvar228381 "groupName") (clojure.core/assoc :group-name (deser-string (clojure.core/get-in letvar228381 ["groupName" :content]))) (letvar228381 "state") (clojure.core/assoc :state (deser-placement-group-state (clojure.core/get-in letvar228381 ["state" :content]))) (letvar228381 "strategy") (clojure.core/assoc :strategy (deser-placement-strategy (clojure.core/get-in letvar228381 ["strategy" :content]))))))

(clojure.core/defn- deser-reserved-instance-reservation-value [input] (clojure.core/let [letvar228459 {"reservationValue" (portkey.aws/getback-xml-elem-with-tag "reservationValue" input), "reservedInstanceId" (portkey.aws/getback-xml-elem-with-tag "reservedInstanceId" input)}] (clojure.core/cond-> {} (letvar228459 "reservationValue") (clojure.core/assoc :reservation-value (deser-reservation-value (clojure.core/get-in letvar228459 ["reservationValue" :content]))) (letvar228459 "reservedInstanceId") (clojure.core/assoc :reserved-instance-id (deser-string (clojure.core/get-in letvar228459 ["reservedInstanceId" :content]))))))

(clojure.core/defn- deser-private-ip-address-specification [input] (clojure.core/let [letvar228537 {"primary" (portkey.aws/getback-xml-elem-with-tag "primary" input), "privateIpAddress" (portkey.aws/getback-xml-elem-with-tag "privateIpAddress" input)}] (clojure.core/cond-> {} (letvar228537 "primary") (clojure.core/assoc :primary (deser-boolean (clojure.core/get-in letvar228537 ["primary" :content]))) (letvar228537 "privateIpAddress") (clojure.core/assoc :private-ip-address (deser-string (clojure.core/get-in letvar228537 ["privateIpAddress" :content]))))))

(clojure.core/defn- deser-reservation-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-reservation coll))) input))

(clojure.core/defn- deser-delete-fleet-error-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-delete-fleet-error-item coll))) input))

(clojure.core/defn- deser-vpc-ipv-6-cidr-block-association-set [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpc-ipv-6-cidr-block-association coll))) input))

(clojure.core/defn- deser-volume-modification-state [input] (clojure.core/get {"modifying" :modifying, "optimizing" :optimizing, "completed" :completed, "failed" :failed} (clojure.core/first input)))

(clojure.core/defn- deser-user-id-group-pair [input] (clojure.core/let [letvar228671 {"description" (portkey.aws/getback-xml-elem-with-tag "description" input), "groupId" (portkey.aws/getback-xml-elem-with-tag "groupId" input), "groupName" (portkey.aws/getback-xml-elem-with-tag "groupName" input), "peeringStatus" (portkey.aws/getback-xml-elem-with-tag "peeringStatus" input), "userId" (portkey.aws/getback-xml-elem-with-tag "userId" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "vpcPeeringConnectionId" (portkey.aws/getback-xml-elem-with-tag "vpcPeeringConnectionId" input)}] (clojure.core/cond-> {} (letvar228671 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar228671 ["description" :content]))) (letvar228671 "groupId") (clojure.core/assoc :group-id (deser-string (clojure.core/get-in letvar228671 ["groupId" :content]))) (letvar228671 "groupName") (clojure.core/assoc :group-name (deser-string (clojure.core/get-in letvar228671 ["groupName" :content]))) (letvar228671 "peeringStatus") (clojure.core/assoc :peering-status (deser-string (clojure.core/get-in letvar228671 ["peeringStatus" :content]))) (letvar228671 "userId") (clojure.core/assoc :user-id (deser-string (clojure.core/get-in letvar228671 ["userId" :content]))) (letvar228671 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar228671 ["vpcId" :content]))) (letvar228671 "vpcPeeringConnectionId") (clojure.core/assoc :vpc-peering-connection-id (deser-string (clojure.core/get-in letvar228671 ["vpcPeeringConnectionId" :content]))))))

(clojure.core/defn- deser-host-reservation [input] (clojure.core/let [letvar228749 {"hostReservationId" (portkey.aws/getback-xml-elem-with-tag "hostReservationId" input), "hostIdSet" (portkey.aws/getback-xml-elem-with-tag "hostIdSet" input), "count" (portkey.aws/getback-xml-elem-with-tag "count" input), "hourlyPrice" (portkey.aws/getback-xml-elem-with-tag "hourlyPrice" input), "start" (portkey.aws/getback-xml-elem-with-tag "start" input), "currencyCode" (portkey.aws/getback-xml-elem-with-tag "currencyCode" input), "duration" (portkey.aws/getback-xml-elem-with-tag "duration" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "paymentOption" (portkey.aws/getback-xml-elem-with-tag "paymentOption" input), "offeringId" (portkey.aws/getback-xml-elem-with-tag "offeringId" input), "upfrontPrice" (portkey.aws/getback-xml-elem-with-tag "upfrontPrice" input), "instanceFamily" (portkey.aws/getback-xml-elem-with-tag "instanceFamily" input), "end" (portkey.aws/getback-xml-elem-with-tag "end" input)}] (clojure.core/cond-> {} (letvar228749 "currencyCode") (clojure.core/assoc :currency-code (deser-currency-code-values (clojure.core/get-in letvar228749 ["currencyCode" :content]))) (letvar228749 "upfrontPrice") (clojure.core/assoc :upfront-price (deser-string (clojure.core/get-in letvar228749 ["upfrontPrice" :content]))) (letvar228749 "hostIdSet") (clojure.core/assoc :host-id-set (deser-response-host-id-set (clojure.core/get-in letvar228749 ["hostIdSet" :content]))) (letvar228749 "start") (clojure.core/assoc :start (deser-date-time (clojure.core/get-in letvar228749 ["start" :content]))) (letvar228749 "end") (clojure.core/assoc :end (deser-date-time (clojure.core/get-in letvar228749 ["end" :content]))) (letvar228749 "count") (clojure.core/assoc :count (deser-integer (clojure.core/get-in letvar228749 ["count" :content]))) (letvar228749 "paymentOption") (clojure.core/assoc :payment-option (deser-payment-option (clojure.core/get-in letvar228749 ["paymentOption" :content]))) (letvar228749 "hourlyPrice") (clojure.core/assoc :hourly-price (deser-string (clojure.core/get-in letvar228749 ["hourlyPrice" :content]))) (letvar228749 "offeringId") (clojure.core/assoc :offering-id (deser-string (clojure.core/get-in letvar228749 ["offeringId" :content]))) (letvar228749 "duration") (clojure.core/assoc :duration (deser-integer (clojure.core/get-in letvar228749 ["duration" :content]))) (letvar228749 "instanceFamily") (clojure.core/assoc :instance-family (deser-string (clojure.core/get-in letvar228749 ["instanceFamily" :content]))) (letvar228749 "hostReservationId") (clojure.core/assoc :host-reservation-id (deser-string (clojure.core/get-in letvar228749 ["hostReservationId" :content]))) (letvar228749 "state") (clojure.core/assoc :state (deser-reservation-state (clojure.core/get-in letvar228749 ["state" :content]))))))

(clojure.core/defn- deser-telemetry-status [input] (clojure.core/get {"UP" :up, "DOWN" :down} (clojure.core/first input)))

(clojure.core/defn- deser-delete-fleet-error-code [input] (clojure.core/get {"fleetIdDoesNotExist" :fleet-id-does-not-exist, "fleetIdMalformed" :fleet-id-malformed, "fleetNotInDeletableState" :fleet-not-in-deletable-state, "unexpectedError" :unexpected-error} (clojure.core/first input)))

(clojure.core/defn- deser-vpn-gateway [input] (clojure.core/let [letvar228837 {"availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input), "type" (portkey.aws/getback-xml-elem-with-tag "type" input), "attachments" (portkey.aws/getback-xml-elem-with-tag "attachments" input), "vpnGatewayId" (portkey.aws/getback-xml-elem-with-tag "vpnGatewayId" input), "amazonSideAsn" (portkey.aws/getback-xml-elem-with-tag "amazonSideAsn" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input)}] (clojure.core/cond-> {} (letvar228837 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar228837 ["availabilityZone" :content]))) (letvar228837 "state") (clojure.core/assoc :state (deser-vpn-state (clojure.core/get-in letvar228837 ["state" :content]))) (letvar228837 "type") (clojure.core/assoc :type (deser-gateway-type (clojure.core/get-in letvar228837 ["type" :content]))) (letvar228837 "attachments") (clojure.core/assoc :vpc-attachments (deser-vpc-attachment-list (clojure.core/get-in letvar228837 ["attachments" :content]))) (letvar228837 "vpnGatewayId") (clojure.core/assoc :vpn-gateway-id (deser-string (clojure.core/get-in letvar228837 ["vpnGatewayId" :content]))) (letvar228837 "amazonSideAsn") (clojure.core/assoc :amazon-side-asn (deser-long (clojure.core/get-in letvar228837 ["amazonSideAsn" :content]))) (letvar228837 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar228837 ["tagSet" :content]))))))

(clojure.core/defn- deser-network-interface-association [input] (clojure.core/let [letvar228915 {"allocationId" (portkey.aws/getback-xml-elem-with-tag "allocationId" input), "associationId" (portkey.aws/getback-xml-elem-with-tag "associationId" input), "ipOwnerId" (portkey.aws/getback-xml-elem-with-tag "ipOwnerId" input), "publicDnsName" (portkey.aws/getback-xml-elem-with-tag "publicDnsName" input), "publicIp" (portkey.aws/getback-xml-elem-with-tag "publicIp" input)}] (clojure.core/cond-> {} (letvar228915 "allocationId") (clojure.core/assoc :allocation-id (deser-string (clojure.core/get-in letvar228915 ["allocationId" :content]))) (letvar228915 "associationId") (clojure.core/assoc :association-id (deser-string (clojure.core/get-in letvar228915 ["associationId" :content]))) (letvar228915 "ipOwnerId") (clojure.core/assoc :ip-owner-id (deser-string (clojure.core/get-in letvar228915 ["ipOwnerId" :content]))) (letvar228915 "publicDnsName") (clojure.core/assoc :public-dns-name (deser-string (clojure.core/get-in letvar228915 ["publicDnsName" :content]))) (letvar228915 "publicIp") (clojure.core/assoc :public-ip (deser-string (clojure.core/get-in letvar228915 ["publicIp" :content]))))))

(clojure.core/defn- deser-launch-template-placement [input] (clojure.core/let [letvar228993 {"availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "affinity" (portkey.aws/getback-xml-elem-with-tag "affinity" input), "groupName" (portkey.aws/getback-xml-elem-with-tag "groupName" input), "hostId" (portkey.aws/getback-xml-elem-with-tag "hostId" input), "tenancy" (portkey.aws/getback-xml-elem-with-tag "tenancy" input), "spreadDomain" (portkey.aws/getback-xml-elem-with-tag "spreadDomain" input)}] (clojure.core/cond-> {} (letvar228993 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar228993 ["availabilityZone" :content]))) (letvar228993 "affinity") (clojure.core/assoc :affinity (deser-string (clojure.core/get-in letvar228993 ["affinity" :content]))) (letvar228993 "groupName") (clojure.core/assoc :group-name (deser-string (clojure.core/get-in letvar228993 ["groupName" :content]))) (letvar228993 "hostId") (clojure.core/assoc :host-id (deser-string (clojure.core/get-in letvar228993 ["hostId" :content]))) (letvar228993 "tenancy") (clojure.core/assoc :tenancy (deser-tenancy (clojure.core/get-in letvar228993 ["tenancy" :content]))) (letvar228993 "spreadDomain") (clojure.core/assoc :spread-domain (deser-string (clojure.core/get-in letvar228993 ["spreadDomain" :content]))))))

(clojure.core/defn- deser-date-time [input] (clojure.core/first input))

(clojure.core/defn- deser-shutdown-behavior [input] (clojure.core/get {"stop" :stop, "terminate" :terminate} (clojure.core/first input)))

(clojure.core/defn- deser-egress-only-internet-gateway [input] (clojure.core/let [letvar229078 {"attachmentSet" (portkey.aws/getback-xml-elem-with-tag "attachmentSet" input), "egressOnlyInternetGatewayId" (portkey.aws/getback-xml-elem-with-tag "egressOnlyInternetGatewayId" input)}] (clojure.core/cond-> {} (letvar229078 "attachmentSet") (clojure.core/assoc :attachments (deser-internet-gateway-attachment-list (clojure.core/get-in letvar229078 ["attachmentSet" :content]))) (letvar229078 "egressOnlyInternetGatewayId") (clojure.core/assoc :egress-only-internet-gateway-id (deser-egress-only-internet-gateway-id (clojure.core/get-in letvar229078 ["egressOnlyInternetGatewayId" :content]))))))

(clojure.core/defn- deser-boolean [input] (clojure.core/when-let [boolstr__28401__auto__ (clojure.core/first input)] (clojure.core/cond (clojure.core/= "true" boolstr__28401__auto__) true (clojure.core/= "false" boolstr__28401__auto__) false)))

(clojure.core/defn- deser-instance-network-interface-specification [input] (clojure.core/let [letvar229158 {"associatePublicIpAddress" (portkey.aws/getback-xml-elem-with-tag "associatePublicIpAddress" input), "subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input), "privateIpAddressesSet" (portkey.aws/getback-xml-elem-with-tag "privateIpAddressesSet" input), "privateIpAddress" (portkey.aws/getback-xml-elem-with-tag "privateIpAddress" input), "secondaryPrivateIpAddressCount" (portkey.aws/getback-xml-elem-with-tag "secondaryPrivateIpAddressCount" input), "deleteOnTermination" (portkey.aws/getback-xml-elem-with-tag "deleteOnTermination" input), "ipv6AddressesSet" (portkey.aws/getback-xml-elem-with-tag "ipv6AddressesSet" input), "SecurityGroupId" (portkey.aws/getback-xml-elem-with-tag "SecurityGroupId" input), "deviceIndex" (portkey.aws/getback-xml-elem-with-tag "deviceIndex" input), "ipv6AddressCount" (portkey.aws/getback-xml-elem-with-tag "ipv6AddressCount" input), "networkInterfaceId" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceId" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input)}] (clojure.core/cond-> {} (letvar229158 "associatePublicIpAddress") (clojure.core/assoc :associate-public-ip-address (deser-boolean (clojure.core/get-in letvar229158 ["associatePublicIpAddress" :content]))) (letvar229158 "ipv6AddressesSet") (clojure.core/assoc :ipv-6-addresses (deser-instance-ipv-6-address-list (clojure.core/get-in letvar229158 ["ipv6AddressesSet" :content]))) (letvar229158 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar229158 ["subnetId" :content]))) (letvar229158 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar229158 ["networkInterfaceId" :content]))) (letvar229158 "deviceIndex") (clojure.core/assoc :device-index (deser-integer (clojure.core/get-in letvar229158 ["deviceIndex" :content]))) (letvar229158 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar229158 ["description" :content]))) (letvar229158 "SecurityGroupId") (clojure.core/assoc :groups (deser-security-group-id-string-list (clojure.core/get-in letvar229158 ["SecurityGroupId" :content]))) (letvar229158 "deleteOnTermination") (clojure.core/assoc :delete-on-termination (deser-boolean (clojure.core/get-in letvar229158 ["deleteOnTermination" :content]))) (letvar229158 "privateIpAddressesSet") (clojure.core/assoc :private-ip-addresses (deser-private-ip-address-specification-list (clojure.core/get-in letvar229158 ["privateIpAddressesSet" :content]))) (letvar229158 "secondaryPrivateIpAddressCount") (clojure.core/assoc :secondary-private-ip-address-count (deser-integer (clojure.core/get-in letvar229158 ["secondaryPrivateIpAddressCount" :content]))) (letvar229158 "privateIpAddress") (clojure.core/assoc :private-ip-address (deser-string (clojure.core/get-in letvar229158 ["privateIpAddress" :content]))) (letvar229158 "ipv6AddressCount") (clojure.core/assoc :ipv-6-address-count (deser-integer (clojure.core/get-in letvar229158 ["ipv6AddressCount" :content]))))))

(clojure.core/defn- deser-reservation-state [input] (clojure.core/get {"payment-pending" :paymentpending, "payment-failed" :paymentfailed, "active" :active, "retired" :retired} (clojure.core/first input)))

(clojure.core/defn- deser-available-instance-capacity-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-instance-capacity coll))) input))

(clojure.core/defn- deser-snapshot-state [input] (clojure.core/get {"pending" :pending, "completed" :completed, "error" :error} (clojure.core/first input)))

(clojure.core/defn- deser-vpn-gateway-list [input] (clojure.core/into [] (clojure.core/map (clojure.core/fn [coll] (deser-vpn-gateway coll))) input))

(clojure.core/defn- deser-modify-spot-fleet-request-response [input] (clojure.core/let [letvar229280 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar229280 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar229280 ["return" :content]))))))

(clojure.core/defn- deser-get-console-screenshot-result [input] (clojure.core/let [letvar229358 {"imageData" (portkey.aws/getback-xml-elem-with-tag "imageData" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input)}] (clojure.core/cond-> {} (letvar229358 "imageData") (clojure.core/assoc :image-data (deser-string (clojure.core/get-in letvar229358 ["imageData" :content]))) (letvar229358 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar229358 ["instanceId" :content]))))))

(clojure.core/defn- deser-describe-egress-only-internet-gateways-result [input] (clojure.core/let [letvar229436 {"egressOnlyInternetGatewaySet" (portkey.aws/getback-xml-elem-with-tag "egressOnlyInternetGatewaySet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar229436 "egressOnlyInternetGatewaySet") (clojure.core/assoc :egress-only-internet-gateways (deser-egress-only-internet-gateway-list (clojure.core/get-in letvar229436 ["egressOnlyInternetGatewaySet" :content]))) (letvar229436 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar229436 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-aggregate-id-format-result [input] (clojure.core/let [letvar229514 {"useLongIdsAggregated" (portkey.aws/getback-xml-elem-with-tag "useLongIdsAggregated" input), "statusSet" (portkey.aws/getback-xml-elem-with-tag "statusSet" input)}] (clojure.core/cond-> {} (letvar229514 "useLongIdsAggregated") (clojure.core/assoc :use-long-ids-aggregated (deser-boolean (clojure.core/get-in letvar229514 ["useLongIdsAggregated" :content]))) (letvar229514 "statusSet") (clojure.core/assoc :statuses (deser-id-format-list (clojure.core/get-in letvar229514 ["statusSet" :content]))))))

(clojure.core/defn- deser-create-internet-gateway-result [input] (clojure.core/let [letvar229592 {"internetGateway" (portkey.aws/getback-xml-elem-with-tag "internetGateway" input)}] (clojure.core/cond-> {} (letvar229592 "internetGateway") (clojure.core/assoc :internet-gateway (deser-internet-gateway (clojure.core/get-in letvar229592 ["internetGateway" :content]))))))

(clojure.core/defn- deser-describe-host-reservations-result [input] (clojure.core/let [letvar229670 {"hostReservationSet" (portkey.aws/getback-xml-elem-with-tag "hostReservationSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar229670 "hostReservationSet") (clojure.core/assoc :host-reservation-set (deser-host-reservation-set (clojure.core/get-in letvar229670 ["hostReservationSet" :content]))) (letvar229670 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar229670 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-vpc-peering-connections-result [input] (clojure.core/let [letvar229748 {"vpcPeeringConnectionSet" (portkey.aws/getback-xml-elem-with-tag "vpcPeeringConnectionSet" input)}] (clojure.core/cond-> {} (letvar229748 "vpcPeeringConnectionSet") (clojure.core/assoc :vpc-peering-connections (deser-vpc-peering-connection-list (clojure.core/get-in letvar229748 ["vpcPeeringConnectionSet" :content]))))))

(clojure.core/defn- deser-describe-fleet-instances-result [input] (clojure.core/let [letvar229826 {"activeInstanceSet" (portkey.aws/getback-xml-elem-with-tag "activeInstanceSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input), "fleetId" (portkey.aws/getback-xml-elem-with-tag "fleetId" input)}] (clojure.core/cond-> {} (letvar229826 "activeInstanceSet") (clojure.core/assoc :active-instances (deser-active-instance-set (clojure.core/get-in letvar229826 ["activeInstanceSet" :content]))) (letvar229826 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar229826 ["nextToken" :content]))) (letvar229826 "fleetId") (clojure.core/assoc :fleet-id (deser-fleet-identifier (clojure.core/get-in letvar229826 ["fleetId" :content]))))))

(clojure.core/defn- deser-run-scheduled-instances-result [input] (clojure.core/let [letvar229904 {"instanceIdSet" (portkey.aws/getback-xml-elem-with-tag "instanceIdSet" input)}] (clojure.core/cond-> {} (letvar229904 "instanceIdSet") (clojure.core/assoc :instance-id-set (deser-instance-id-set (clojure.core/get-in letvar229904 ["instanceIdSet" :content]))))))

(clojure.core/defn- deser-copy-fpga-image-result [input] (clojure.core/let [letvar229982 {"fpgaImageId" (portkey.aws/getback-xml-elem-with-tag "fpgaImageId" input)}] (clojure.core/cond-> {} (letvar229982 "fpgaImageId") (clojure.core/assoc :fpga-image-id (deser-string (clojure.core/get-in letvar229982 ["fpgaImageId" :content]))))))

(clojure.core/defn- deser-create-image-result [input] (clojure.core/let [letvar230060 {"imageId" (portkey.aws/getback-xml-elem-with-tag "imageId" input)}] (clojure.core/cond-> {} (letvar230060 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar230060 ["imageId" :content]))))))

(clojure.core/defn- deser-describe-principal-id-format-result [input] (clojure.core/let [letvar230138 {"principalSet" (portkey.aws/getback-xml-elem-with-tag "principalSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar230138 "principalSet") (clojure.core/assoc :principals (deser-principal-id-format-list (clojure.core/get-in letvar230138 ["principalSet" :content]))) (letvar230138 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar230138 ["nextToken" :content]))))))

(clojure.core/defn- deser-replace-iam-instance-profile-association-result [input] (clojure.core/let [letvar230216 {"iamInstanceProfileAssociation" (portkey.aws/getback-xml-elem-with-tag "iamInstanceProfileAssociation" input)}] (clojure.core/cond-> {} (letvar230216 "iamInstanceProfileAssociation") (clojure.core/assoc :iam-instance-profile-association (deser-iam-instance-profile-association (clojure.core/get-in letvar230216 ["iamInstanceProfileAssociation" :content]))))))

(clojure.core/defn- deser-create-egress-only-internet-gateway-result [input] (clojure.core/let [letvar230294 {"clientToken" (portkey.aws/getback-xml-elem-with-tag "clientToken" input), "egressOnlyInternetGateway" (portkey.aws/getback-xml-elem-with-tag "egressOnlyInternetGateway" input)}] (clojure.core/cond-> {} (letvar230294 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar230294 ["clientToken" :content]))) (letvar230294 "egressOnlyInternetGateway") (clojure.core/assoc :egress-only-internet-gateway (deser-egress-only-internet-gateway (clojure.core/get-in letvar230294 ["egressOnlyInternetGateway" :content]))))))

(clojure.core/defn- deser-create-vpn-gateway-result [input] (clojure.core/let [letvar230372 {"vpnGateway" (portkey.aws/getback-xml-elem-with-tag "vpnGateway" input)}] (clojure.core/cond-> {} (letvar230372 "vpnGateway") (clojure.core/assoc :vpn-gateway (deser-vpn-gateway (clojure.core/get-in letvar230372 ["vpnGateway" :content]))))))

(clojure.core/defn- deser-create-subnet-result [input] (clojure.core/let [letvar230450 {"subnet" (portkey.aws/getback-xml-elem-with-tag "subnet" input)}] (clojure.core/cond-> {} (letvar230450 "subnet") (clojure.core/assoc :subnet (deser-subnet (clojure.core/get-in letvar230450 ["subnet" :content]))))))

(clojure.core/defn- deser-disassociate-subnet-cidr-block-result [input] (clojure.core/let [letvar230528 {"ipv6CidrBlockAssociation" (portkey.aws/getback-xml-elem-with-tag "ipv6CidrBlockAssociation" input), "subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input)}] (clojure.core/cond-> {} (letvar230528 "ipv6CidrBlockAssociation") (clojure.core/assoc :ipv-6-cidr-block-association (deser-subnet-ipv-6-cidr-block-association (clojure.core/get-in letvar230528 ["ipv6CidrBlockAssociation" :content]))) (letvar230528 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar230528 ["subnetId" :content]))))))

(clojure.core/defn- deser-describe-stale-security-groups-result [input] (clojure.core/let [letvar230606 {"nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input), "staleSecurityGroupSet" (portkey.aws/getback-xml-elem-with-tag "staleSecurityGroupSet" input)}] (clojure.core/cond-> {} (letvar230606 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar230606 ["nextToken" :content]))) (letvar230606 "staleSecurityGroupSet") (clojure.core/assoc :stale-security-group-set (deser-stale-security-group-set (clojure.core/get-in letvar230606 ["staleSecurityGroupSet" :content]))))))

(clojure.core/defn- deser-describe-vpc-endpoint-service-configurations-result [input] (clojure.core/let [letvar230684 {"serviceConfigurationSet" (portkey.aws/getback-xml-elem-with-tag "serviceConfigurationSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar230684 "serviceConfigurationSet") (clojure.core/assoc :service-configurations (deser-service-configuration-set (clojure.core/get-in letvar230684 ["serviceConfigurationSet" :content]))) (letvar230684 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar230684 ["nextToken" :content]))))))

(clojure.core/defn- deser-get-reserved-instances-exchange-quote-result [input] (clojure.core/let [letvar230762 {"reservedInstanceValueSet" (portkey.aws/getback-xml-elem-with-tag "reservedInstanceValueSet" input), "targetConfigurationValueSet" (portkey.aws/getback-xml-elem-with-tag "targetConfigurationValueSet" input), "paymentDue" (portkey.aws/getback-xml-elem-with-tag "paymentDue" input), "validationFailureReason" (portkey.aws/getback-xml-elem-with-tag "validationFailureReason" input), "targetConfigurationValueRollup" (portkey.aws/getback-xml-elem-with-tag "targetConfigurationValueRollup" input), "outputReservedInstancesWillExpireAt" (portkey.aws/getback-xml-elem-with-tag "outputReservedInstancesWillExpireAt" input), "currencyCode" (portkey.aws/getback-xml-elem-with-tag "currencyCode" input), "reservedInstanceValueRollup" (portkey.aws/getback-xml-elem-with-tag "reservedInstanceValueRollup" input), "isValidExchange" (portkey.aws/getback-xml-elem-with-tag "isValidExchange" input)}] (clojure.core/cond-> {} (letvar230762 "reservedInstanceValueSet") (clojure.core/assoc :reserved-instance-value-set (deser-reserved-instance-reservation-value-set (clojure.core/get-in letvar230762 ["reservedInstanceValueSet" :content]))) (letvar230762 "currencyCode") (clojure.core/assoc :currency-code (deser-string (clojure.core/get-in letvar230762 ["currencyCode" :content]))) (letvar230762 "targetConfigurationValueSet") (clojure.core/assoc :target-configuration-value-set (deser-target-reservation-value-set (clojure.core/get-in letvar230762 ["targetConfigurationValueSet" :content]))) (letvar230762 "validationFailureReason") (clojure.core/assoc :validation-failure-reason (deser-string (clojure.core/get-in letvar230762 ["validationFailureReason" :content]))) (letvar230762 "outputReservedInstancesWillExpireAt") (clojure.core/assoc :output-reserved-instances-will-expire-at (deser-date-time (clojure.core/get-in letvar230762 ["outputReservedInstancesWillExpireAt" :content]))) (letvar230762 "paymentDue") (clojure.core/assoc :payment-due (deser-string (clojure.core/get-in letvar230762 ["paymentDue" :content]))) (letvar230762 "isValidExchange") (clojure.core/assoc :is-valid-exchange (deser-boolean (clojure.core/get-in letvar230762 ["isValidExchange" :content]))) (letvar230762 "reservedInstanceValueRollup") (clojure.core/assoc :reserved-instance-value-rollup (deser-reservation-value (clojure.core/get-in letvar230762 ["reservedInstanceValueRollup" :content]))) (letvar230762 "targetConfigurationValueRollup") (clojure.core/assoc :target-configuration-value-rollup (deser-reservation-value (clojure.core/get-in letvar230762 ["targetConfigurationValueRollup" :content]))))))

(clojure.core/defn- deser-confirm-product-instance-result [input] (clojure.core/let [letvar230840 {"ownerId" (portkey.aws/getback-xml-elem-with-tag "ownerId" input), "return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar230840 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar230840 ["ownerId" :content]))) (letvar230840 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar230840 ["return" :content]))))))

(clojure.core/defn- deser-describe-reserved-instances-offerings-result [input] (clojure.core/let [letvar230918 {"reservedInstancesOfferingsSet" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesOfferingsSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar230918 "reservedInstancesOfferingsSet") (clojure.core/assoc :reserved-instances-offerings (deser-reserved-instances-offering-list (clojure.core/get-in letvar230918 ["reservedInstancesOfferingsSet" :content]))) (letvar230918 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar230918 ["nextToken" :content]))))))

(clojure.core/defn- deser-get-launch-template-data-result [input] (clojure.core/let [letvar230996 {"launchTemplateData" (portkey.aws/getback-xml-elem-with-tag "launchTemplateData" input)}] (clojure.core/cond-> {} (letvar230996 "launchTemplateData") (clojure.core/assoc :launch-template-data (deser-response-launch-template-data (clojure.core/get-in letvar230996 ["launchTemplateData" :content]))))))

(clojure.core/defn- deser-modify-reserved-instances-result [input] (clojure.core/let [letvar231074 {"reservedInstancesModificationId" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesModificationId" input)}] (clojure.core/cond-> {} (letvar231074 "reservedInstancesModificationId") (clojure.core/assoc :reserved-instances-modification-id (deser-string (clojure.core/get-in letvar231074 ["reservedInstancesModificationId" :content]))))))

(clojure.core/defn- deser-describe-vpc-classic-link-result [input] (clojure.core/let [letvar231152 {"vpcSet" (portkey.aws/getback-xml-elem-with-tag "vpcSet" input)}] (clojure.core/cond-> {} (letvar231152 "vpcSet") (clojure.core/assoc :vpcs (deser-vpc-classic-link-list (clojure.core/get-in letvar231152 ["vpcSet" :content]))))))

(clojure.core/defn- deser-create-dhcp-options-result [input] (clojure.core/let [letvar231230 {"dhcpOptions" (portkey.aws/getback-xml-elem-with-tag "dhcpOptions" input)}] (clojure.core/cond-> {} (letvar231230 "dhcpOptions") (clojure.core/assoc :dhcp-options (deser-dhcp-options (clojure.core/get-in letvar231230 ["dhcpOptions" :content]))))))

(clojure.core/defn- deser-volume [input] (clojure.core/let [letvar231308 {"tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "kmsKeyId" (portkey.aws/getback-xml-elem-with-tag "kmsKeyId" input), "createTime" (portkey.aws/getback-xml-elem-with-tag "createTime" input), "encrypted" (portkey.aws/getback-xml-elem-with-tag "encrypted" input), "attachmentSet" (portkey.aws/getback-xml-elem-with-tag "attachmentSet" input), "iops" (portkey.aws/getback-xml-elem-with-tag "iops" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "availabilityZone" (portkey.aws/getback-xml-elem-with-tag "availabilityZone" input), "volumeType" (portkey.aws/getback-xml-elem-with-tag "volumeType" input), "volumeId" (portkey.aws/getback-xml-elem-with-tag "volumeId" input), "size" (portkey.aws/getback-xml-elem-with-tag "size" input), "snapshotId" (portkey.aws/getback-xml-elem-with-tag "snapshotId" input)}] (clojure.core/cond-> {} (letvar231308 "encrypted") (clojure.core/assoc :encrypted (deser-boolean (clojure.core/get-in letvar231308 ["encrypted" :content]))) (letvar231308 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar231308 ["tagSet" :content]))) (letvar231308 "attachmentSet") (clojure.core/assoc :attachments (deser-volume-attachment-list (clojure.core/get-in letvar231308 ["attachmentSet" :content]))) (letvar231308 "availabilityZone") (clojure.core/assoc :availability-zone (deser-string (clojure.core/get-in letvar231308 ["availabilityZone" :content]))) (letvar231308 "kmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar231308 ["kmsKeyId" :content]))) (letvar231308 "size") (clojure.core/assoc :size (deser-integer (clojure.core/get-in letvar231308 ["size" :content]))) (letvar231308 "iops") (clojure.core/assoc :iops (deser-integer (clojure.core/get-in letvar231308 ["iops" :content]))) (letvar231308 "volumeType") (clojure.core/assoc :volume-type (deser-volume-type (clojure.core/get-in letvar231308 ["volumeType" :content]))) (letvar231308 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar231308 ["volumeId" :content]))) (letvar231308 "createTime") (clojure.core/assoc :create-time (deser-date-time (clojure.core/get-in letvar231308 ["createTime" :content]))) (letvar231308 "status") (clojure.core/assoc :state (deser-volume-state (clojure.core/get-in letvar231308 ["status" :content]))) (letvar231308 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar231308 ["snapshotId" :content]))))))

(clojure.core/defn- deser-assign-ipv-6-addresses-result [input] (clojure.core/let [letvar231386 {"assignedIpv6Addresses" (portkey.aws/getback-xml-elem-with-tag "assignedIpv6Addresses" input), "networkInterfaceId" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceId" input)}] (clojure.core/cond-> {} (letvar231386 "assignedIpv6Addresses") (clojure.core/assoc :assigned-ipv-6-addresses (deser-ipv-6-address-list (clojure.core/get-in letvar231386 ["assignedIpv6Addresses" :content]))) (letvar231386 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar231386 ["networkInterfaceId" :content]))))))

(clojure.core/defn- deser-modify-volume-result [input] (clojure.core/let [letvar231464 {"volumeModification" (portkey.aws/getback-xml-elem-with-tag "volumeModification" input)}] (clojure.core/cond-> {} (letvar231464 "volumeModification") (clojure.core/assoc :volume-modification (deser-volume-modification (clojure.core/get-in letvar231464 ["volumeModification" :content]))))))

(clojure.core/defn- deser-describe-volumes-result [input] (clojure.core/let [letvar231542 {"volumeSet" (portkey.aws/getback-xml-elem-with-tag "volumeSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar231542 "volumeSet") (clojure.core/assoc :volumes (deser-volume-list (clojure.core/get-in letvar231542 ["volumeSet" :content]))) (letvar231542 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar231542 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-conversion-tasks-result [input] (clojure.core/let [letvar231620 {"conversionTasks" (portkey.aws/getback-xml-elem-with-tag "conversionTasks" input)}] (clojure.core/cond-> {} (letvar231620 "conversionTasks") (clojure.core/assoc :conversion-tasks (deser-describe-conversion-task-list (clojure.core/get-in letvar231620 ["conversionTasks" :content]))))))

(clojure.core/defn- deser-describe-reserved-instances-listings-result [input] (clojure.core/let [letvar231698 {"reservedInstancesListingsSet" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesListingsSet" input)}] (clojure.core/cond-> {} (letvar231698 "reservedInstancesListingsSet") (clojure.core/assoc :reserved-instances-listings (deser-reserved-instances-listing-list (clojure.core/get-in letvar231698 ["reservedInstancesListingsSet" :content]))))))

(clojure.core/defn- deser-create-reserved-instances-listing-result [input] (clojure.core/let [letvar231776 {"reservedInstancesListingsSet" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesListingsSet" input)}] (clojure.core/cond-> {} (letvar231776 "reservedInstancesListingsSet") (clojure.core/assoc :reserved-instances-listings (deser-reserved-instances-listing-list (clojure.core/get-in letvar231776 ["reservedInstancesListingsSet" :content]))))))

(clojure.core/defn- deser-describe-import-image-tasks-result [input] (clojure.core/let [letvar231854 {"importImageTaskSet" (portkey.aws/getback-xml-elem-with-tag "importImageTaskSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar231854 "importImageTaskSet") (clojure.core/assoc :import-image-tasks (deser-import-image-task-list (clojure.core/get-in letvar231854 ["importImageTaskSet" :content]))) (letvar231854 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar231854 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-fleets-result [input] (clojure.core/let [letvar231932 {"nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input), "fleetSet" (portkey.aws/getback-xml-elem-with-tag "fleetSet" input)}] (clojure.core/cond-> {} (letvar231932 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar231932 ["nextToken" :content]))) (letvar231932 "fleetSet") (clojure.core/assoc :fleets (deser-fleet-set (clojure.core/get-in letvar231932 ["fleetSet" :content]))))))

(clojure.core/defn- deser-describe-instance-status-result [input] (clojure.core/let [letvar232010 {"instanceStatusSet" (portkey.aws/getback-xml-elem-with-tag "instanceStatusSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar232010 "instanceStatusSet") (clojure.core/assoc :instance-statuses (deser-instance-status-list (clojure.core/get-in letvar232010 ["instanceStatusSet" :content]))) (letvar232010 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar232010 ["nextToken" :content]))))))

(clojure.core/defn- deser-create-network-interface-result [input] (clojure.core/let [letvar232088 {"networkInterface" (portkey.aws/getback-xml-elem-with-tag "networkInterface" input)}] (clojure.core/cond-> {} (letvar232088 "networkInterface") (clojure.core/assoc :network-interface (deser-network-interface (clojure.core/get-in letvar232088 ["networkInterface" :content]))))))

(clojure.core/defn- deser-describe-network-interface-attribute-result [input] (clojure.core/let [letvar232166 {"attachment" (portkey.aws/getback-xml-elem-with-tag "attachment" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input), "groupSet" (portkey.aws/getback-xml-elem-with-tag "groupSet" input), "networkInterfaceId" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceId" input), "sourceDestCheck" (portkey.aws/getback-xml-elem-with-tag "sourceDestCheck" input)}] (clojure.core/cond-> {} (letvar232166 "attachment") (clojure.core/assoc :attachment (deser-network-interface-attachment (clojure.core/get-in letvar232166 ["attachment" :content]))) (letvar232166 "description") (clojure.core/assoc :description (deser-attribute-value (clojure.core/get-in letvar232166 ["description" :content]))) (letvar232166 "groupSet") (clojure.core/assoc :groups (deser-group-identifier-list (clojure.core/get-in letvar232166 ["groupSet" :content]))) (letvar232166 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar232166 ["networkInterfaceId" :content]))) (letvar232166 "sourceDestCheck") (clojure.core/assoc :source-dest-check (deser-attribute-boolean-value (clojure.core/get-in letvar232166 ["sourceDestCheck" :content]))))))

(clojure.core/defn- deser-attach-network-interface-result [input] (clojure.core/let [letvar232244 {"attachmentId" (portkey.aws/getback-xml-elem-with-tag "attachmentId" input)}] (clojure.core/cond-> {} (letvar232244 "attachmentId") (clojure.core/assoc :attachment-id (deser-string (clojure.core/get-in letvar232244 ["attachmentId" :content]))))))

(clojure.core/defn- deser-describe-vpc-endpoint-service-permissions-result [input] (clojure.core/let [letvar232322 {"allowedPrincipals" (portkey.aws/getback-xml-elem-with-tag "allowedPrincipals" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar232322 "allowedPrincipals") (clojure.core/assoc :allowed-principals (deser-allowed-principal-set (clojure.core/get-in letvar232322 ["allowedPrincipals" :content]))) (letvar232322 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar232322 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-instance-credit-specifications-result [input] (clojure.core/let [letvar232400 {"instanceCreditSpecificationSet" (portkey.aws/getback-xml-elem-with-tag "instanceCreditSpecificationSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar232400 "instanceCreditSpecificationSet") (clojure.core/assoc :instance-credit-specifications (deser-instance-credit-specification-list (clojure.core/get-in letvar232400 ["instanceCreditSpecificationSet" :content]))) (letvar232400 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar232400 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-network-interfaces-result [input] (clojure.core/let [letvar232478 {"networkInterfaceSet" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar232478 "networkInterfaceSet") (clojure.core/assoc :network-interfaces (deser-network-interface-list (clojure.core/get-in letvar232478 ["networkInterfaceSet" :content]))) (letvar232478 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar232478 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-network-interface-permissions-result [input] (clojure.core/let [letvar232556 {"networkInterfacePermissions" (portkey.aws/getback-xml-elem-with-tag "networkInterfacePermissions" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar232556 "networkInterfacePermissions") (clojure.core/assoc :network-interface-permissions (deser-network-interface-permission-list (clojure.core/get-in letvar232556 ["networkInterfacePermissions" :content]))) (letvar232556 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar232556 ["nextToken" :content]))))))

(clojure.core/defn- deser-create-default-subnet-result [input] (clojure.core/let [letvar232634 {"subnet" (portkey.aws/getback-xml-elem-with-tag "subnet" input)}] (clojure.core/cond-> {} (letvar232634 "subnet") (clojure.core/assoc :subnet (deser-subnet (clojure.core/get-in letvar232634 ["subnet" :content]))))))

(clojure.core/defn- deser-describe-volume-attribute-result [input] (clojure.core/let [letvar232712 {"autoEnableIO" (portkey.aws/getback-xml-elem-with-tag "autoEnableIO" input), "productCodes" (portkey.aws/getback-xml-elem-with-tag "productCodes" input), "volumeId" (portkey.aws/getback-xml-elem-with-tag "volumeId" input)}] (clojure.core/cond-> {} (letvar232712 "autoEnableIO") (clojure.core/assoc :auto-enable-io (deser-attribute-boolean-value (clojure.core/get-in letvar232712 ["autoEnableIO" :content]))) (letvar232712 "productCodes") (clojure.core/assoc :product-codes (deser-product-code-list (clojure.core/get-in letvar232712 ["productCodes" :content]))) (letvar232712 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar232712 ["volumeId" :content]))))))

(clojure.core/defn- deser-describe-reserved-instances-modifications-result [input] (clojure.core/let [letvar232790 {"nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input), "reservedInstancesModificationsSet" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesModificationsSet" input)}] (clojure.core/cond-> {} (letvar232790 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar232790 ["nextToken" :content]))) (letvar232790 "reservedInstancesModificationsSet") (clojure.core/assoc :reserved-instances-modifications (deser-reserved-instances-modification-list (clojure.core/get-in letvar232790 ["reservedInstancesModificationsSet" :content]))))))

(clojure.core/defn- deser-cancel-bundle-task-result [input] (clojure.core/let [letvar232868 {"bundleInstanceTask" (portkey.aws/getback-xml-elem-with-tag "bundleInstanceTask" input)}] (clojure.core/cond-> {} (letvar232868 "bundleInstanceTask") (clojure.core/assoc :bundle-task (deser-bundle-task (clojure.core/get-in letvar232868 ["bundleInstanceTask" :content]))))))

(clojure.core/defn- deser-get-host-reservation-purchase-preview-result [input] (clojure.core/let [letvar232946 {"currencyCode" (portkey.aws/getback-xml-elem-with-tag "currencyCode" input), "purchase" (portkey.aws/getback-xml-elem-with-tag "purchase" input), "totalHourlyPrice" (portkey.aws/getback-xml-elem-with-tag "totalHourlyPrice" input), "totalUpfrontPrice" (portkey.aws/getback-xml-elem-with-tag "totalUpfrontPrice" input)}] (clojure.core/cond-> {} (letvar232946 "currencyCode") (clojure.core/assoc :currency-code (deser-currency-code-values (clojure.core/get-in letvar232946 ["currencyCode" :content]))) (letvar232946 "purchase") (clojure.core/assoc :purchase (deser-purchase-set (clojure.core/get-in letvar232946 ["purchase" :content]))) (letvar232946 "totalHourlyPrice") (clojure.core/assoc :total-hourly-price (deser-string (clojure.core/get-in letvar232946 ["totalHourlyPrice" :content]))) (letvar232946 "totalUpfrontPrice") (clojure.core/assoc :total-upfront-price (deser-string (clojure.core/get-in letvar232946 ["totalUpfrontPrice" :content]))))))

(clojure.core/defn- deser-describe-availability-zones-result [input] (clojure.core/let [letvar233024 {"availabilityZoneInfo" (portkey.aws/getback-xml-elem-with-tag "availabilityZoneInfo" input)}] (clojure.core/cond-> {} (letvar233024 "availabilityZoneInfo") (clojure.core/assoc :availability-zones (deser-availability-zone-list (clojure.core/get-in letvar233024 ["availabilityZoneInfo" :content]))))))

(clojure.core/defn- deser-cancel-reserved-instances-listing-result [input] (clojure.core/let [letvar233102 {"reservedInstancesListingsSet" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesListingsSet" input)}] (clojure.core/cond-> {} (letvar233102 "reservedInstancesListingsSet") (clojure.core/assoc :reserved-instances-listings (deser-reserved-instances-listing-list (clojure.core/get-in letvar233102 ["reservedInstancesListingsSet" :content]))))))

(clojure.core/defn- deser-restore-address-to-classic-result [input] (clojure.core/let [letvar233180 {"publicIp" (portkey.aws/getback-xml-elem-with-tag "publicIp" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input)}] (clojure.core/cond-> {} (letvar233180 "publicIp") (clojure.core/assoc :public-ip (deser-string (clojure.core/get-in letvar233180 ["publicIp" :content]))) (letvar233180 "status") (clojure.core/assoc :status (deser-status (clojure.core/get-in letvar233180 ["status" :content]))))))

(clojure.core/defn- deser-describe-network-acls-result [input] (clojure.core/let [letvar233258 {"networkAclSet" (portkey.aws/getback-xml-elem-with-tag "networkAclSet" input)}] (clojure.core/cond-> {} (letvar233258 "networkAclSet") (clojure.core/assoc :network-acls (deser-network-acl-list (clojure.core/get-in letvar233258 ["networkAclSet" :content]))))))

(clojure.core/defn- deser-cancel-import-task-result [input] (clojure.core/let [letvar233336 {"importTaskId" (portkey.aws/getback-xml-elem-with-tag "importTaskId" input), "previousState" (portkey.aws/getback-xml-elem-with-tag "previousState" input), "state" (portkey.aws/getback-xml-elem-with-tag "state" input)}] (clojure.core/cond-> {} (letvar233336 "importTaskId") (clojure.core/assoc :import-task-id (deser-string (clojure.core/get-in letvar233336 ["importTaskId" :content]))) (letvar233336 "previousState") (clojure.core/assoc :previous-state (deser-string (clojure.core/get-in letvar233336 ["previousState" :content]))) (letvar233336 "state") (clojure.core/assoc :state (deser-string (clojure.core/get-in letvar233336 ["state" :content]))))))

(clojure.core/defn- deser-register-image-result [input] (clojure.core/let [letvar233414 {"imageId" (portkey.aws/getback-xml-elem-with-tag "imageId" input)}] (clojure.core/cond-> {} (letvar233414 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar233414 ["imageId" :content]))))))

(clojure.core/defn- deser-describe-fpga-image-attribute-result [input] (clojure.core/let [letvar233492 {"fpgaImageAttribute" (portkey.aws/getback-xml-elem-with-tag "fpgaImageAttribute" input)}] (clojure.core/cond-> {} (letvar233492 "fpgaImageAttribute") (clojure.core/assoc :fpga-image-attribute (deser-fpga-image-attribute (clojure.core/get-in letvar233492 ["fpgaImageAttribute" :content]))))))

(clojure.core/defn- deser-import-image-result [input] (clojure.core/let [letvar233570 {"architecture" (portkey.aws/getback-xml-elem-with-tag "architecture" input), "progress" (portkey.aws/getback-xml-elem-with-tag "progress" input), "snapshotDetailSet" (portkey.aws/getback-xml-elem-with-tag "snapshotDetailSet" input), "licenseType" (portkey.aws/getback-xml-elem-with-tag "licenseType" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "imageId" (portkey.aws/getback-xml-elem-with-tag "imageId" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input), "importTaskId" (portkey.aws/getback-xml-elem-with-tag "importTaskId" input), "hypervisor" (portkey.aws/getback-xml-elem-with-tag "hypervisor" input), "platform" (portkey.aws/getback-xml-elem-with-tag "platform" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input)}] (clojure.core/cond-> {} (letvar233570 "platform") (clojure.core/assoc :platform (deser-string (clojure.core/get-in letvar233570 ["platform" :content]))) (letvar233570 "importTaskId") (clojure.core/assoc :import-task-id (deser-string (clojure.core/get-in letvar233570 ["importTaskId" :content]))) (letvar233570 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar233570 ["imageId" :content]))) (letvar233570 "statusMessage") (clojure.core/assoc :status-message (deser-string (clojure.core/get-in letvar233570 ["statusMessage" :content]))) (letvar233570 "status") (clojure.core/assoc :status (deser-string (clojure.core/get-in letvar233570 ["status" :content]))) (letvar233570 "progress") (clojure.core/assoc :progress (deser-string (clojure.core/get-in letvar233570 ["progress" :content]))) (letvar233570 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar233570 ["description" :content]))) (letvar233570 "snapshotDetailSet") (clojure.core/assoc :snapshot-details (deser-snapshot-detail-list (clojure.core/get-in letvar233570 ["snapshotDetailSet" :content]))) (letvar233570 "hypervisor") (clojure.core/assoc :hypervisor (deser-string (clojure.core/get-in letvar233570 ["hypervisor" :content]))) (letvar233570 "architecture") (clojure.core/assoc :architecture (deser-string (clojure.core/get-in letvar233570 ["architecture" :content]))) (letvar233570 "licenseType") (clojure.core/assoc :license-type (deser-string (clojure.core/get-in letvar233570 ["licenseType" :content]))))))

(clojure.core/defn- deser-describe-launch-templates-result [input] (clojure.core/let [letvar233648 {"launchTemplates" (portkey.aws/getback-xml-elem-with-tag "launchTemplates" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar233648 "launchTemplates") (clojure.core/assoc :launch-templates (deser-launch-template-set (clojure.core/get-in letvar233648 ["launchTemplates" :content]))) (letvar233648 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar233648 ["nextToken" :content]))))))

(clojure.core/defn- deser-associate-subnet-cidr-block-result [input] (clojure.core/let [letvar233726 {"ipv6CidrBlockAssociation" (portkey.aws/getback-xml-elem-with-tag "ipv6CidrBlockAssociation" input), "subnetId" (portkey.aws/getback-xml-elem-with-tag "subnetId" input)}] (clojure.core/cond-> {} (letvar233726 "ipv6CidrBlockAssociation") (clojure.core/assoc :ipv-6-cidr-block-association (deser-subnet-ipv-6-cidr-block-association (clojure.core/get-in letvar233726 ["ipv6CidrBlockAssociation" :content]))) (letvar233726 "subnetId") (clojure.core/assoc :subnet-id (deser-string (clojure.core/get-in letvar233726 ["subnetId" :content]))))))

(clojure.core/defn- deser-describe-vpc-endpoint-connections-result [input] (clojure.core/let [letvar233804 {"vpcEndpointConnectionSet" (portkey.aws/getback-xml-elem-with-tag "vpcEndpointConnectionSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar233804 "vpcEndpointConnectionSet") (clojure.core/assoc :vpc-endpoint-connections (deser-vpc-endpoint-connection-set (clojure.core/get-in letvar233804 ["vpcEndpointConnectionSet" :content]))) (letvar233804 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar233804 ["nextToken" :content]))))))

(clojure.core/defn- deser-monitor-instances-result [input] (clojure.core/let [letvar233882 {"instancesSet" (portkey.aws/getback-xml-elem-with-tag "instancesSet" input)}] (clojure.core/cond-> {} (letvar233882 "instancesSet") (clojure.core/assoc :instance-monitorings (deser-instance-monitoring-list (clojure.core/get-in letvar233882 ["instancesSet" :content]))))))

(clojure.core/defn- deser-create-vpc-endpoint-result [input] (clojure.core/let [letvar233960 {"vpcEndpoint" (portkey.aws/getback-xml-elem-with-tag "vpcEndpoint" input), "clientToken" (portkey.aws/getback-xml-elem-with-tag "clientToken" input)}] (clojure.core/cond-> {} (letvar233960 "vpcEndpoint") (clojure.core/assoc :vpc-endpoint (deser-vpc-endpoint (clojure.core/get-in letvar233960 ["vpcEndpoint" :content]))) (letvar233960 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar233960 ["clientToken" :content]))))))

(clojure.core/defn- deser-import-key-pair-result [input] (clojure.core/let [letvar234038 {"keyFingerprint" (portkey.aws/getback-xml-elem-with-tag "keyFingerprint" input), "keyName" (portkey.aws/getback-xml-elem-with-tag "keyName" input)}] (clojure.core/cond-> {} (letvar234038 "keyFingerprint") (clojure.core/assoc :key-fingerprint (deser-string (clojure.core/get-in letvar234038 ["keyFingerprint" :content]))) (letvar234038 "keyName") (clojure.core/assoc :key-name (deser-string (clojure.core/get-in letvar234038 ["keyName" :content]))))))

(clojure.core/defn- deser-create-network-acl-result [input] (clojure.core/let [letvar234116 {"networkAcl" (portkey.aws/getback-xml-elem-with-tag "networkAcl" input)}] (clojure.core/cond-> {} (letvar234116 "networkAcl") (clojure.core/assoc :network-acl (deser-network-acl (clojure.core/get-in letvar234116 ["networkAcl" :content]))))))

(clojure.core/defn- deser-describe-vpc-endpoint-connection-notifications-result [input] (clojure.core/let [letvar234194 {"connectionNotificationSet" (portkey.aws/getback-xml-elem-with-tag "connectionNotificationSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar234194 "connectionNotificationSet") (clojure.core/assoc :connection-notification-set (deser-connection-notification-set (clojure.core/get-in letvar234194 ["connectionNotificationSet" :content]))) (letvar234194 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar234194 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-iam-instance-profile-associations-result [input] (clojure.core/let [letvar234272 {"iamInstanceProfileAssociationSet" (portkey.aws/getback-xml-elem-with-tag "iamInstanceProfileAssociationSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar234272 "iamInstanceProfileAssociationSet") (clojure.core/assoc :iam-instance-profile-associations (deser-iam-instance-profile-association-set (clojure.core/get-in letvar234272 ["iamInstanceProfileAssociationSet" :content]))) (letvar234272 "nextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar234272 ["nextToken" :content]))))))

(clojure.core/defn- deser-create-route-result [input] (clojure.core/let [letvar234350 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar234350 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar234350 ["return" :content]))))))

(clojure.core/defn- deser-create-route-table-result [input] (clojure.core/let [letvar234428 {"routeTable" (portkey.aws/getback-xml-elem-with-tag "routeTable" input)}] (clojure.core/cond-> {} (letvar234428 "routeTable") (clojure.core/assoc :route-table (deser-route-table (clojure.core/get-in letvar234428 ["routeTable" :content]))))))

(clojure.core/defn- deser-describe-volume-status-result [input] (clojure.core/let [letvar234506 {"nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input), "volumeStatusSet" (portkey.aws/getback-xml-elem-with-tag "volumeStatusSet" input)}] (clojure.core/cond-> {} (letvar234506 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar234506 ["nextToken" :content]))) (letvar234506 "volumeStatusSet") (clojure.core/assoc :volume-statuses (deser-volume-status-list (clojure.core/get-in letvar234506 ["volumeStatusSet" :content]))))))

(clojure.core/defn- deser-describe-route-tables-result [input] (clojure.core/let [letvar234584 {"routeTableSet" (portkey.aws/getback-xml-elem-with-tag "routeTableSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar234584 "routeTableSet") (clojure.core/assoc :route-tables (deser-route-table-list (clojure.core/get-in letvar234584 ["routeTableSet" :content]))) (letvar234584 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar234584 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-export-tasks-result [input] (clojure.core/let [letvar234662 {"exportTaskSet" (portkey.aws/getback-xml-elem-with-tag "exportTaskSet" input)}] (clojure.core/cond-> {} (letvar234662 "exportTaskSet") (clojure.core/assoc :export-tasks (deser-export-task-list (clojure.core/get-in letvar234662 ["exportTaskSet" :content]))))))

(clojure.core/defn- deser-reservation [input] (clojure.core/let [letvar234740 {"groupSet" (portkey.aws/getback-xml-elem-with-tag "groupSet" input), "instancesSet" (portkey.aws/getback-xml-elem-with-tag "instancesSet" input), "ownerId" (portkey.aws/getback-xml-elem-with-tag "ownerId" input), "requesterId" (portkey.aws/getback-xml-elem-with-tag "requesterId" input), "reservationId" (portkey.aws/getback-xml-elem-with-tag "reservationId" input)}] (clojure.core/cond-> {} (letvar234740 "groupSet") (clojure.core/assoc :groups (deser-group-identifier-list (clojure.core/get-in letvar234740 ["groupSet" :content]))) (letvar234740 "instancesSet") (clojure.core/assoc :instances (deser-instance-list (clojure.core/get-in letvar234740 ["instancesSet" :content]))) (letvar234740 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar234740 ["ownerId" :content]))) (letvar234740 "requesterId") (clojure.core/assoc :requester-id (deser-string (clojure.core/get-in letvar234740 ["requesterId" :content]))) (letvar234740 "reservationId") (clojure.core/assoc :reservation-id (deser-string (clojure.core/get-in letvar234740 ["reservationId" :content]))))))

(clojure.core/defn- deser-replace-network-acl-association-result [input] (clojure.core/let [letvar234818 {"newAssociationId" (portkey.aws/getback-xml-elem-with-tag "newAssociationId" input)}] (clojure.core/cond-> {} (letvar234818 "newAssociationId") (clojure.core/assoc :new-association-id (deser-string (clojure.core/get-in letvar234818 ["newAssociationId" :content]))))))

(clojure.core/defn- deser-import-snapshot-result [input] (clojure.core/let [letvar234896 {"description" (portkey.aws/getback-xml-elem-with-tag "description" input), "importTaskId" (portkey.aws/getback-xml-elem-with-tag "importTaskId" input), "snapshotTaskDetail" (portkey.aws/getback-xml-elem-with-tag "snapshotTaskDetail" input)}] (clojure.core/cond-> {} (letvar234896 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar234896 ["description" :content]))) (letvar234896 "importTaskId") (clojure.core/assoc :import-task-id (deser-string (clojure.core/get-in letvar234896 ["importTaskId" :content]))) (letvar234896 "snapshotTaskDetail") (clojure.core/assoc :snapshot-task-detail (deser-snapshot-task-detail (clojure.core/get-in letvar234896 ["snapshotTaskDetail" :content]))))))

(clojure.core/defn- deser-disable-vpc-classic-link-result [input] (clojure.core/let [letvar234974 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar234974 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar234974 ["return" :content]))))))

(clojure.core/defn- deser-update-security-group-rule-descriptions-egress-result [input] (clojure.core/let [letvar235052 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar235052 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar235052 ["return" :content]))))))

(clojure.core/defn- deser-create-default-vpc-result [input] (clojure.core/let [letvar235130 {"vpc" (portkey.aws/getback-xml-elem-with-tag "vpc" input)}] (clojure.core/cond-> {} (letvar235130 "vpc") (clojure.core/assoc :vpc (deser-vpc (clojure.core/get-in letvar235130 ["vpc" :content]))))))

(clojure.core/defn- deser-modify-instance-credit-specification-result [input] (clojure.core/let [letvar235208 {"successfulInstanceCreditSpecificationSet" (portkey.aws/getback-xml-elem-with-tag "successfulInstanceCreditSpecificationSet" input), "unsuccessfulInstanceCreditSpecificationSet" (portkey.aws/getback-xml-elem-with-tag "unsuccessfulInstanceCreditSpecificationSet" input)}] (clojure.core/cond-> {} (letvar235208 "successfulInstanceCreditSpecificationSet") (clojure.core/assoc :successful-instance-credit-specifications (deser-successful-instance-credit-specification-set (clojure.core/get-in letvar235208 ["successfulInstanceCreditSpecificationSet" :content]))) (letvar235208 "unsuccessfulInstanceCreditSpecificationSet") (clojure.core/assoc :unsuccessful-instance-credit-specifications (deser-unsuccessful-instance-credit-specification-set (clojure.core/get-in letvar235208 ["unsuccessfulInstanceCreditSpecificationSet" :content]))))))

(clojure.core/defn- deser-reset-fpga-image-attribute-result [input] (clojure.core/let [letvar235286 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar235286 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar235286 ["return" :content]))))))

(clojure.core/defn- deser-release-hosts-result [input] (clojure.core/let [letvar235364 {"successful" (portkey.aws/getback-xml-elem-with-tag "successful" input), "unsuccessful" (portkey.aws/getback-xml-elem-with-tag "unsuccessful" input)}] (clojure.core/cond-> {} (letvar235364 "successful") (clojure.core/assoc :successful (deser-response-host-id-list (clojure.core/get-in letvar235364 ["successful" :content]))) (letvar235364 "unsuccessful") (clojure.core/assoc :unsuccessful (deser-unsuccessful-item-list (clojure.core/get-in letvar235364 ["unsuccessful" :content]))))))

(clojure.core/defn- deser-disable-vpc-classic-link-dns-support-result [input] (clojure.core/let [letvar235442 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar235442 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar235442 ["return" :content]))))))

(clojure.core/defn- deser-describe-tags-result [input] (clojure.core/let [letvar235520 {"nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input)}] (clojure.core/cond-> {} (letvar235520 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar235520 ["nextToken" :content]))) (letvar235520 "tagSet") (clojure.core/assoc :tags (deser-tag-description-list (clojure.core/get-in letvar235520 ["tagSet" :content]))))))

(clojure.core/defn- deser-describe-moving-addresses-result [input] (clojure.core/let [letvar235598 {"movingAddressStatusSet" (portkey.aws/getback-xml-elem-with-tag "movingAddressStatusSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar235598 "movingAddressStatusSet") (clojure.core/assoc :moving-address-statuses (deser-moving-address-status-set (clojure.core/get-in letvar235598 ["movingAddressStatusSet" :content]))) (letvar235598 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar235598 ["nextToken" :content]))))))

(clojure.core/defn- deser-reject-vpc-endpoint-connections-result [input] (clojure.core/let [letvar235676 {"unsuccessful" (portkey.aws/getback-xml-elem-with-tag "unsuccessful" input)}] (clojure.core/cond-> {} (letvar235676 "unsuccessful") (clojure.core/assoc :unsuccessful (deser-unsuccessful-item-set (clojure.core/get-in letvar235676 ["unsuccessful" :content]))))))

(clojure.core/defn- deser-create-vpc-endpoint-connection-notification-result [input] (clojure.core/let [letvar235754 {"connectionNotification" (portkey.aws/getback-xml-elem-with-tag "connectionNotification" input), "clientToken" (portkey.aws/getback-xml-elem-with-tag "clientToken" input)}] (clojure.core/cond-> {} (letvar235754 "connectionNotification") (clojure.core/assoc :connection-notification (deser-connection-notification (clojure.core/get-in letvar235754 ["connectionNotification" :content]))) (letvar235754 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar235754 ["clientToken" :content]))))))

(clojure.core/defn- deser-describe-images-result [input] (clojure.core/let [letvar235832 {"imagesSet" (portkey.aws/getback-xml-elem-with-tag "imagesSet" input)}] (clojure.core/cond-> {} (letvar235832 "imagesSet") (clojure.core/assoc :images (deser-image-list (clojure.core/get-in letvar235832 ["imagesSet" :content]))))))

(clojure.core/defn- deser-create-flow-logs-result [input] (clojure.core/let [letvar235910 {"clientToken" (portkey.aws/getback-xml-elem-with-tag "clientToken" input), "flowLogIdSet" (portkey.aws/getback-xml-elem-with-tag "flowLogIdSet" input), "unsuccessful" (portkey.aws/getback-xml-elem-with-tag "unsuccessful" input)}] (clojure.core/cond-> {} (letvar235910 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar235910 ["clientToken" :content]))) (letvar235910 "flowLogIdSet") (clojure.core/assoc :flow-log-ids (deser-value-string-list (clojure.core/get-in letvar235910 ["flowLogIdSet" :content]))) (letvar235910 "unsuccessful") (clojure.core/assoc :unsuccessful (deser-unsuccessful-item-set (clojure.core/get-in letvar235910 ["unsuccessful" :content]))))))

(clojure.core/defn- deser-delete-launch-template-versions-result [input] (clojure.core/let [letvar235988 {"successfullyDeletedLaunchTemplateVersionSet" (portkey.aws/getback-xml-elem-with-tag "successfullyDeletedLaunchTemplateVersionSet" input), "unsuccessfullyDeletedLaunchTemplateVersionSet" (portkey.aws/getback-xml-elem-with-tag "unsuccessfullyDeletedLaunchTemplateVersionSet" input)}] (clojure.core/cond-> {} (letvar235988 "successfullyDeletedLaunchTemplateVersionSet") (clojure.core/assoc :successfully-deleted-launch-template-versions (deser-delete-launch-template-versions-response-success-set (clojure.core/get-in letvar235988 ["successfullyDeletedLaunchTemplateVersionSet" :content]))) (letvar235988 "unsuccessfullyDeletedLaunchTemplateVersionSet") (clojure.core/assoc :unsuccessfully-deleted-launch-template-versions (deser-delete-launch-template-versions-response-error-set (clojure.core/get-in letvar235988 ["unsuccessfullyDeletedLaunchTemplateVersionSet" :content]))))))

(clojure.core/defn- deser-describe-spot-instance-requests-result [input] (clojure.core/let [letvar236066 {"spotInstanceRequestSet" (portkey.aws/getback-xml-elem-with-tag "spotInstanceRequestSet" input)}] (clojure.core/cond-> {} (letvar236066 "spotInstanceRequestSet") (clojure.core/assoc :spot-instance-requests (deser-spot-instance-request-list (clojure.core/get-in letvar236066 ["spotInstanceRequestSet" :content]))))))

(clojure.core/defn- deser-create-customer-gateway-result [input] (clojure.core/let [letvar236144 {"customerGateway" (portkey.aws/getback-xml-elem-with-tag "customerGateway" input)}] (clojure.core/cond-> {} (letvar236144 "customerGateway") (clojure.core/assoc :customer-gateway (deser-customer-gateway (clojure.core/get-in letvar236144 ["customerGateway" :content]))))))

(clojure.core/defn- deser-describe-hosts-result [input] (clojure.core/let [letvar236222 {"hostSet" (portkey.aws/getback-xml-elem-with-tag "hostSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar236222 "hostSet") (clojure.core/assoc :hosts (deser-host-list (clojure.core/get-in letvar236222 ["hostSet" :content]))) (letvar236222 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar236222 ["nextToken" :content]))))))

(clojure.core/defn- deser-enable-vpc-classic-link-dns-support-result [input] (clojure.core/let [letvar236300 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar236300 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar236300 ["return" :content]))))))

(clojure.core/defn- deser-describe-launch-template-versions-result [input] (clojure.core/let [letvar236378 {"launchTemplateVersionSet" (portkey.aws/getback-xml-elem-with-tag "launchTemplateVersionSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar236378 "launchTemplateVersionSet") (clojure.core/assoc :launch-template-versions (deser-launch-template-version-set (clojure.core/get-in letvar236378 ["launchTemplateVersionSet" :content]))) (letvar236378 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar236378 ["nextToken" :content]))))))

(clojure.core/defn- deser-create-launch-template-result [input] (clojure.core/let [letvar236456 {"launchTemplate" (portkey.aws/getback-xml-elem-with-tag "launchTemplate" input)}] (clojure.core/cond-> {} (letvar236456 "launchTemplate") (clojure.core/assoc :launch-template (deser-launch-template (clojure.core/get-in letvar236456 ["launchTemplate" :content]))))))

(clojure.core/defn- deser-describe-volumes-modifications-result [input] (clojure.core/let [letvar236534 {"volumeModificationSet" (portkey.aws/getback-xml-elem-with-tag "volumeModificationSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar236534 "volumeModificationSet") (clojure.core/assoc :volumes-modifications (deser-volume-modification-list (clojure.core/get-in letvar236534 ["volumeModificationSet" :content]))) (letvar236534 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar236534 ["nextToken" :content]))))))

(clojure.core/defn- deser-stop-instances-result [input] (clojure.core/let [letvar236612 {"instancesSet" (portkey.aws/getback-xml-elem-with-tag "instancesSet" input)}] (clojure.core/cond-> {} (letvar236612 "instancesSet") (clojure.core/assoc :stopping-instances (deser-instance-state-change-list (clojure.core/get-in letvar236612 ["instancesSet" :content]))))))

(clojure.core/defn- deser-describe-vpc-endpoints-result [input] (clojure.core/let [letvar236690 {"vpcEndpointSet" (portkey.aws/getback-xml-elem-with-tag "vpcEndpointSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar236690 "vpcEndpointSet") (clojure.core/assoc :vpc-endpoints (deser-vpc-endpoint-set (clojure.core/get-in letvar236690 ["vpcEndpointSet" :content]))) (letvar236690 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar236690 ["nextToken" :content]))))))

(clojure.core/defn- deser-purchase-scheduled-instances-result [input] (clojure.core/let [letvar236768 {"scheduledInstanceSet" (portkey.aws/getback-xml-elem-with-tag "scheduledInstanceSet" input)}] (clojure.core/cond-> {} (letvar236768 "scheduledInstanceSet") (clojure.core/assoc :scheduled-instance-set (deser-purchased-scheduled-instance-set (clojure.core/get-in letvar236768 ["scheduledInstanceSet" :content]))))))

(clojure.core/defn- deser-describe-addresses-result [input] (clojure.core/let [letvar236846 {"addressesSet" (portkey.aws/getback-xml-elem-with-tag "addressesSet" input)}] (clojure.core/cond-> {} (letvar236846 "addressesSet") (clojure.core/assoc :addresses (deser-address-list (clojure.core/get-in letvar236846 ["addressesSet" :content]))))))

(clojure.core/defn- deser-purchase-host-reservation-result [input] (clojure.core/let [letvar236924 {"clientToken" (portkey.aws/getback-xml-elem-with-tag "clientToken" input), "currencyCode" (portkey.aws/getback-xml-elem-with-tag "currencyCode" input), "purchase" (portkey.aws/getback-xml-elem-with-tag "purchase" input), "totalHourlyPrice" (portkey.aws/getback-xml-elem-with-tag "totalHourlyPrice" input), "totalUpfrontPrice" (portkey.aws/getback-xml-elem-with-tag "totalUpfrontPrice" input)}] (clojure.core/cond-> {} (letvar236924 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar236924 ["clientToken" :content]))) (letvar236924 "currencyCode") (clojure.core/assoc :currency-code (deser-currency-code-values (clojure.core/get-in letvar236924 ["currencyCode" :content]))) (letvar236924 "purchase") (clojure.core/assoc :purchase (deser-purchase-set (clojure.core/get-in letvar236924 ["purchase" :content]))) (letvar236924 "totalHourlyPrice") (clojure.core/assoc :total-hourly-price (deser-string (clojure.core/get-in letvar236924 ["totalHourlyPrice" :content]))) (letvar236924 "totalUpfrontPrice") (clojure.core/assoc :total-upfront-price (deser-string (clojure.core/get-in letvar236924 ["totalUpfrontPrice" :content]))))))

(clojure.core/defn- deser-describe-prefix-lists-result [input] (clojure.core/let [letvar237002 {"nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input), "prefixListSet" (portkey.aws/getback-xml-elem-with-tag "prefixListSet" input)}] (clojure.core/cond-> {} (letvar237002 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar237002 ["nextToken" :content]))) (letvar237002 "prefixListSet") (clojure.core/assoc :prefix-lists (deser-prefix-list-set (clojure.core/get-in letvar237002 ["prefixListSet" :content]))))))

(clojure.core/defn- deser-describe-identity-id-format-result [input] (clojure.core/let [letvar237080 {"statusSet" (portkey.aws/getback-xml-elem-with-tag "statusSet" input)}] (clojure.core/cond-> {} (letvar237080 "statusSet") (clojure.core/assoc :statuses (deser-id-format-list (clojure.core/get-in letvar237080 ["statusSet" :content]))))))

(clojure.core/defn- deser-describe-spot-datafeed-subscription-result [input] (clojure.core/let [letvar237158 {"spotDatafeedSubscription" (portkey.aws/getback-xml-elem-with-tag "spotDatafeedSubscription" input)}] (clojure.core/cond-> {} (letvar237158 "spotDatafeedSubscription") (clojure.core/assoc :spot-datafeed-subscription (deser-spot-datafeed-subscription (clojure.core/get-in letvar237158 ["spotDatafeedSubscription" :content]))))))

(clojure.core/defn- deser-import-instance-result [input] (clojure.core/let [letvar237236 {"conversionTask" (portkey.aws/getback-xml-elem-with-tag "conversionTask" input)}] (clojure.core/cond-> {} (letvar237236 "conversionTask") (clojure.core/assoc :conversion-task (deser-conversion-task (clojure.core/get-in letvar237236 ["conversionTask" :content]))))))

(clojure.core/defn- deser-associate-vpc-cidr-block-result [input] (clojure.core/let [letvar237314 {"ipv6CidrBlockAssociation" (portkey.aws/getback-xml-elem-with-tag "ipv6CidrBlockAssociation" input), "cidrBlockAssociation" (portkey.aws/getback-xml-elem-with-tag "cidrBlockAssociation" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input)}] (clojure.core/cond-> {} (letvar237314 "ipv6CidrBlockAssociation") (clojure.core/assoc :ipv-6-cidr-block-association (deser-vpc-ipv-6-cidr-block-association (clojure.core/get-in letvar237314 ["ipv6CidrBlockAssociation" :content]))) (letvar237314 "cidrBlockAssociation") (clojure.core/assoc :cidr-block-association (deser-vpc-cidr-block-association (clojure.core/get-in letvar237314 ["cidrBlockAssociation" :content]))) (letvar237314 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar237314 ["vpcId" :content]))))))

(clojure.core/defn- deser-describe-key-pairs-result [input] (clojure.core/let [letvar237392 {"keySet" (portkey.aws/getback-xml-elem-with-tag "keySet" input)}] (clojure.core/cond-> {} (letvar237392 "keySet") (clojure.core/assoc :key-pairs (deser-key-pair-list (clojure.core/get-in letvar237392 ["keySet" :content]))))))

(clojure.core/defn- deser-describe-internet-gateways-result [input] (clojure.core/let [letvar237470 {"internetGatewaySet" (portkey.aws/getback-xml-elem-with-tag "internetGatewaySet" input)}] (clojure.core/cond-> {} (letvar237470 "internetGatewaySet") (clojure.core/assoc :internet-gateways (deser-internet-gateway-list (clojure.core/get-in letvar237470 ["internetGatewaySet" :content]))))))

(clojure.core/defn- deser-describe-vpc-classic-link-dns-support-result [input] (clojure.core/let [letvar237548 {"nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input), "vpcs" (portkey.aws/getback-xml-elem-with-tag "vpcs" input)}] (clojure.core/cond-> {} (letvar237548 "nextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar237548 ["nextToken" :content]))) (letvar237548 "vpcs") (clojure.core/assoc :vpcs (deser-classic-link-dns-support-list (clojure.core/get-in letvar237548 ["vpcs" :content]))))))

(clojure.core/defn- deser-describe-id-format-result [input] (clojure.core/let [letvar237626 {"statusSet" (portkey.aws/getback-xml-elem-with-tag "statusSet" input)}] (clojure.core/cond-> {} (letvar237626 "statusSet") (clojure.core/assoc :statuses (deser-id-format-list (clojure.core/get-in letvar237626 ["statusSet" :content]))))))

(clojure.core/defn- deser-describe-snapshot-attribute-result [input] (clojure.core/let [letvar237704 {"createVolumePermission" (portkey.aws/getback-xml-elem-with-tag "createVolumePermission" input), "productCodes" (portkey.aws/getback-xml-elem-with-tag "productCodes" input), "snapshotId" (portkey.aws/getback-xml-elem-with-tag "snapshotId" input)}] (clojure.core/cond-> {} (letvar237704 "createVolumePermission") (clojure.core/assoc :create-volume-permissions (deser-create-volume-permission-list (clojure.core/get-in letvar237704 ["createVolumePermission" :content]))) (letvar237704 "productCodes") (clojure.core/assoc :product-codes (deser-product-code-list (clojure.core/get-in letvar237704 ["productCodes" :content]))) (letvar237704 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar237704 ["snapshotId" :content]))))))

(clojure.core/defn- deser-create-launch-template-version-result [input] (clojure.core/let [letvar237782 {"launchTemplateVersion" (portkey.aws/getback-xml-elem-with-tag "launchTemplateVersion" input)}] (clojure.core/cond-> {} (letvar237782 "launchTemplateVersion") (clojure.core/assoc :launch-template-version (deser-launch-template-version (clojure.core/get-in letvar237782 ["launchTemplateVersion" :content]))))))

(clojure.core/defn- deser-get-console-output-result [input] (clojure.core/let [letvar237860 {"instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "output" (portkey.aws/getback-xml-elem-with-tag "output" input), "timestamp" (portkey.aws/getback-xml-elem-with-tag "timestamp" input)}] (clojure.core/cond-> {} (letvar237860 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar237860 ["instanceId" :content]))) (letvar237860 "output") (clojure.core/assoc :output (deser-string (clojure.core/get-in letvar237860 ["output" :content]))) (letvar237860 "timestamp") (clojure.core/assoc :timestamp (deser-date-time (clojure.core/get-in letvar237860 ["timestamp" :content]))))))

(clojure.core/defn- deser-describe-placement-groups-result [input] (clojure.core/let [letvar237938 {"placementGroupSet" (portkey.aws/getback-xml-elem-with-tag "placementGroupSet" input)}] (clojure.core/cond-> {} (letvar237938 "placementGroupSet") (clojure.core/assoc :placement-groups (deser-placement-group-list (clojure.core/get-in letvar237938 ["placementGroupSet" :content]))))))

(clojure.core/defn- deser-create-vpc-peering-connection-result [input] (clojure.core/let [letvar238016 {"vpcPeeringConnection" (portkey.aws/getback-xml-elem-with-tag "vpcPeeringConnection" input)}] (clojure.core/cond-> {} (letvar238016 "vpcPeeringConnection") (clojure.core/assoc :vpc-peering-connection (deser-vpc-peering-connection (clojure.core/get-in letvar238016 ["vpcPeeringConnection" :content]))))))

(clojure.core/defn- deser-modify-hosts-result [input] (clojure.core/let [letvar238094 {"successful" (portkey.aws/getback-xml-elem-with-tag "successful" input), "unsuccessful" (portkey.aws/getback-xml-elem-with-tag "unsuccessful" input)}] (clojure.core/cond-> {} (letvar238094 "successful") (clojure.core/assoc :successful (deser-response-host-id-list (clojure.core/get-in letvar238094 ["successful" :content]))) (letvar238094 "unsuccessful") (clojure.core/assoc :unsuccessful (deser-unsuccessful-item-list (clojure.core/get-in letvar238094 ["unsuccessful" :content]))))))

(clojure.core/defn- deser-create-vpn-connection-result [input] (clojure.core/let [letvar238172 {"vpnConnection" (portkey.aws/getback-xml-elem-with-tag "vpnConnection" input)}] (clojure.core/cond-> {} (letvar238172 "vpnConnection") (clojure.core/assoc :vpn-connection (deser-vpn-connection (clojure.core/get-in letvar238172 ["vpnConnection" :content]))))))

(clojure.core/defn- deser-describe-customer-gateways-result [input] (clojure.core/let [letvar238250 {"customerGatewaySet" (portkey.aws/getback-xml-elem-with-tag "customerGatewaySet" input)}] (clojure.core/cond-> {} (letvar238250 "customerGatewaySet") (clojure.core/assoc :customer-gateways (deser-customer-gateway-list (clojure.core/get-in letvar238250 ["customerGatewaySet" :content]))))))

(clojure.core/defn- deser-describe-account-attributes-result [input] (clojure.core/let [letvar238328 {"accountAttributeSet" (portkey.aws/getback-xml-elem-with-tag "accountAttributeSet" input)}] (clojure.core/cond-> {} (letvar238328 "accountAttributeSet") (clojure.core/assoc :account-attributes (deser-account-attribute-list (clojure.core/get-in letvar238328 ["accountAttributeSet" :content]))))))

(clojure.core/defn- deser-describe-scheduled-instances-result [input] (clojure.core/let [letvar238406 {"nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input), "scheduledInstanceSet" (portkey.aws/getback-xml-elem-with-tag "scheduledInstanceSet" input)}] (clojure.core/cond-> {} (letvar238406 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar238406 ["nextToken" :content]))) (letvar238406 "scheduledInstanceSet") (clojure.core/assoc :scheduled-instance-set (deser-scheduled-instance-set (clojure.core/get-in letvar238406 ["scheduledInstanceSet" :content]))))))

(clojure.core/defn- deser-modify-vpc-endpoint-connection-notification-result [input] (clojure.core/let [letvar238484 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar238484 "return") (clojure.core/assoc :return-value (deser-boolean (clojure.core/get-in letvar238484 ["return" :content]))))))

(clojure.core/defn- deser-purchase-reserved-instances-offering-result [input] (clojure.core/let [letvar238562 {"reservedInstancesId" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesId" input)}] (clojure.core/cond-> {} (letvar238562 "reservedInstancesId") (clojure.core/assoc :reserved-instances-id (deser-string (clojure.core/get-in letvar238562 ["reservedInstancesId" :content]))))))

(clojure.core/defn- deser-disassociate-vpc-cidr-block-result [input] (clojure.core/let [letvar238640 {"ipv6CidrBlockAssociation" (portkey.aws/getback-xml-elem-with-tag "ipv6CidrBlockAssociation" input), "cidrBlockAssociation" (portkey.aws/getback-xml-elem-with-tag "cidrBlockAssociation" input), "vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input)}] (clojure.core/cond-> {} (letvar238640 "ipv6CidrBlockAssociation") (clojure.core/assoc :ipv-6-cidr-block-association (deser-vpc-ipv-6-cidr-block-association (clojure.core/get-in letvar238640 ["ipv6CidrBlockAssociation" :content]))) (letvar238640 "cidrBlockAssociation") (clojure.core/assoc :cidr-block-association (deser-vpc-cidr-block-association (clojure.core/get-in letvar238640 ["cidrBlockAssociation" :content]))) (letvar238640 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar238640 ["vpcId" :content]))))))

(clojure.core/defn- deser-request-spot-instances-result [input] (clojure.core/let [letvar238718 {"spotInstanceRequestSet" (portkey.aws/getback-xml-elem-with-tag "spotInstanceRequestSet" input)}] (clojure.core/cond-> {} (letvar238718 "spotInstanceRequestSet") (clojure.core/assoc :spot-instance-requests (deser-spot-instance-request-list (clojure.core/get-in letvar238718 ["spotInstanceRequestSet" :content]))))))

(clojure.core/defn- deser-describe-vpc-endpoint-services-result [input] (clojure.core/let [letvar238796 {"serviceNameSet" (portkey.aws/getback-xml-elem-with-tag "serviceNameSet" input), "serviceDetailSet" (portkey.aws/getback-xml-elem-with-tag "serviceDetailSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar238796 "serviceNameSet") (clojure.core/assoc :service-names (deser-value-string-list (clojure.core/get-in letvar238796 ["serviceNameSet" :content]))) (letvar238796 "serviceDetailSet") (clojure.core/assoc :service-details (deser-service-detail-set (clojure.core/get-in letvar238796 ["serviceDetailSet" :content]))) (letvar238796 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar238796 ["nextToken" :content]))))))

(clojure.core/defn- deser-modify-instance-placement-result [input] (clojure.core/let [letvar238874 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar238874 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar238874 ["return" :content]))))))

(clojure.core/defn- deser-describe-vpc-attribute-result [input] (clojure.core/let [letvar238952 {"vpcId" (portkey.aws/getback-xml-elem-with-tag "vpcId" input), "enableDnsHostnames" (portkey.aws/getback-xml-elem-with-tag "enableDnsHostnames" input), "enableDnsSupport" (portkey.aws/getback-xml-elem-with-tag "enableDnsSupport" input)}] (clojure.core/cond-> {} (letvar238952 "vpcId") (clojure.core/assoc :vpc-id (deser-string (clojure.core/get-in letvar238952 ["vpcId" :content]))) (letvar238952 "enableDnsHostnames") (clojure.core/assoc :enable-dns-hostnames (deser-attribute-boolean-value (clojure.core/get-in letvar238952 ["enableDnsHostnames" :content]))) (letvar238952 "enableDnsSupport") (clojure.core/assoc :enable-dns-support (deser-attribute-boolean-value (clojure.core/get-in letvar238952 ["enableDnsSupport" :content]))))))

(clojure.core/defn- deser-describe-flow-logs-result [input] (clojure.core/let [letvar239030 {"flowLogSet" (portkey.aws/getback-xml-elem-with-tag "flowLogSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar239030 "flowLogSet") (clojure.core/assoc :flow-logs (deser-flow-log-set (clojure.core/get-in letvar239030 ["flowLogSet" :content]))) (letvar239030 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar239030 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-scheduled-instance-availability-result [input] (clojure.core/let [letvar239108 {"nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input), "scheduledInstanceAvailabilitySet" (portkey.aws/getback-xml-elem-with-tag "scheduledInstanceAvailabilitySet" input)}] (clojure.core/cond-> {} (letvar239108 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar239108 ["nextToken" :content]))) (letvar239108 "scheduledInstanceAvailabilitySet") (clojure.core/assoc :scheduled-instance-availability-set (deser-scheduled-instance-availability-set (clojure.core/get-in letvar239108 ["scheduledInstanceAvailabilitySet" :content]))))))

(clojure.core/defn- deser-create-vpc-result [input] (clojure.core/let [letvar239186 {"vpc" (portkey.aws/getback-xml-elem-with-tag "vpc" input)}] (clojure.core/cond-> {} (letvar239186 "vpc") (clojure.core/assoc :vpc (deser-vpc (clojure.core/get-in letvar239186 ["vpc" :content]))))))

(clojure.core/defn- deser-allocate-address-result [input] (clojure.core/let [letvar239264 {"publicIp" (portkey.aws/getback-xml-elem-with-tag "publicIp" input), "allocationId" (portkey.aws/getback-xml-elem-with-tag "allocationId" input), "domain" (portkey.aws/getback-xml-elem-with-tag "domain" input)}] (clojure.core/cond-> {} (letvar239264 "publicIp") (clojure.core/assoc :public-ip (deser-string (clojure.core/get-in letvar239264 ["publicIp" :content]))) (letvar239264 "allocationId") (clojure.core/assoc :allocation-id (deser-string (clojure.core/get-in letvar239264 ["allocationId" :content]))) (letvar239264 "domain") (clojure.core/assoc :domain (deser-domain-type (clojure.core/get-in letvar239264 ["domain" :content]))))))

(clojure.core/defn- deser-delete-egress-only-internet-gateway-result [input] (clojure.core/let [letvar239342 {"returnCode" (portkey.aws/getback-xml-elem-with-tag "returnCode" input)}] (clojure.core/cond-> {} (letvar239342 "returnCode") (clojure.core/assoc :return-code (deser-boolean (clojure.core/get-in letvar239342 ["returnCode" :content]))))))

(clojure.core/defn- deser-move-address-to-vpc-result [input] (clojure.core/let [letvar239420 {"allocationId" (portkey.aws/getback-xml-elem-with-tag "allocationId" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input)}] (clojure.core/cond-> {} (letvar239420 "allocationId") (clojure.core/assoc :allocation-id (deser-string (clojure.core/get-in letvar239420 ["allocationId" :content]))) (letvar239420 "status") (clojure.core/assoc :status (deser-status (clojure.core/get-in letvar239420 ["status" :content]))))))

(clojure.core/defn- deser-describe-bundle-tasks-result [input] (clojure.core/let [letvar239498 {"bundleInstanceTasksSet" (portkey.aws/getback-xml-elem-with-tag "bundleInstanceTasksSet" input)}] (clojure.core/cond-> {} (letvar239498 "bundleInstanceTasksSet") (clojure.core/assoc :bundle-tasks (deser-bundle-task-list (clojure.core/get-in letvar239498 ["bundleInstanceTasksSet" :content]))))))

(clojure.core/defn- deser-describe-snapshots-result [input] (clojure.core/let [letvar239576 {"snapshotSet" (portkey.aws/getback-xml-elem-with-tag "snapshotSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar239576 "snapshotSet") (clojure.core/assoc :snapshots (deser-snapshot-list (clojure.core/get-in letvar239576 ["snapshotSet" :content]))) (letvar239576 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar239576 ["nextToken" :content]))))))

(clojure.core/defn- deser-delete-network-interface-permission-result [input] (clojure.core/let [letvar239654 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar239654 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar239654 ["return" :content]))))))

(clojure.core/defn- deser-create-fpga-image-result [input] (clojure.core/let [letvar239732 {"fpgaImageId" (portkey.aws/getback-xml-elem-with-tag "fpgaImageId" input), "fpgaImageGlobalId" (portkey.aws/getback-xml-elem-with-tag "fpgaImageGlobalId" input)}] (clojure.core/cond-> {} (letvar239732 "fpgaImageId") (clojure.core/assoc :fpga-image-id (deser-string (clojure.core/get-in letvar239732 ["fpgaImageId" :content]))) (letvar239732 "fpgaImageGlobalId") (clojure.core/assoc :fpga-image-global-id (deser-string (clojure.core/get-in letvar239732 ["fpgaImageGlobalId" :content]))))))

(clojure.core/defn- deser-snapshot [input] (clojure.core/let [letvar239810 {"progress" (portkey.aws/getback-xml-elem-with-tag "progress" input), "tagSet" (portkey.aws/getback-xml-elem-with-tag "tagSet" input), "kmsKeyId" (portkey.aws/getback-xml-elem-with-tag "kmsKeyId" input), "encrypted" (portkey.aws/getback-xml-elem-with-tag "encrypted" input), "startTime" (portkey.aws/getback-xml-elem-with-tag "startTime" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "dataEncryptionKeyId" (portkey.aws/getback-xml-elem-with-tag "dataEncryptionKeyId" input), "statusMessage" (portkey.aws/getback-xml-elem-with-tag "statusMessage" input), "volumeId" (portkey.aws/getback-xml-elem-with-tag "volumeId" input), "snapshotId" (portkey.aws/getback-xml-elem-with-tag "snapshotId" input), "ownerId" (portkey.aws/getback-xml-elem-with-tag "ownerId" input), "volumeSize" (portkey.aws/getback-xml-elem-with-tag "volumeSize" input), "ownerAlias" (portkey.aws/getback-xml-elem-with-tag "ownerAlias" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input)}] (clojure.core/cond-> {} (letvar239810 "startTime") (clojure.core/assoc :start-time (deser-date-time (clojure.core/get-in letvar239810 ["startTime" :content]))) (letvar239810 "statusMessage") (clojure.core/assoc :state-message (deser-string (clojure.core/get-in letvar239810 ["statusMessage" :content]))) (letvar239810 "ownerId") (clojure.core/assoc :owner-id (deser-string (clojure.core/get-in letvar239810 ["ownerId" :content]))) (letvar239810 "encrypted") (clojure.core/assoc :encrypted (deser-boolean (clojure.core/get-in letvar239810 ["encrypted" :content]))) (letvar239810 "tagSet") (clojure.core/assoc :tags (deser-tag-list (clojure.core/get-in letvar239810 ["tagSet" :content]))) (letvar239810 "ownerAlias") (clojure.core/assoc :owner-alias (deser-string (clojure.core/get-in letvar239810 ["ownerAlias" :content]))) (letvar239810 "progress") (clojure.core/assoc :progress (deser-string (clojure.core/get-in letvar239810 ["progress" :content]))) (letvar239810 "description") (clojure.core/assoc :description (deser-string (clojure.core/get-in letvar239810 ["description" :content]))) (letvar239810 "dataEncryptionKeyId") (clojure.core/assoc :data-encryption-key-id (deser-string (clojure.core/get-in letvar239810 ["dataEncryptionKeyId" :content]))) (letvar239810 "kmsKeyId") (clojure.core/assoc :kms-key-id (deser-string (clojure.core/get-in letvar239810 ["kmsKeyId" :content]))) (letvar239810 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar239810 ["volumeId" :content]))) (letvar239810 "status") (clojure.core/assoc :state (deser-snapshot-state (clojure.core/get-in letvar239810 ["status" :content]))) (letvar239810 "volumeSize") (clojure.core/assoc :volume-size (deser-integer (clojure.core/get-in letvar239810 ["volumeSize" :content]))) (letvar239810 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar239810 ["snapshotId" :content]))))))

(clojure.core/defn- deser-create-vpc-endpoint-service-configuration-result [input] (clojure.core/let [letvar239888 {"serviceConfiguration" (portkey.aws/getback-xml-elem-with-tag "serviceConfiguration" input), "clientToken" (portkey.aws/getback-xml-elem-with-tag "clientToken" input)}] (clojure.core/cond-> {} (letvar239888 "serviceConfiguration") (clojure.core/assoc :service-configuration (deser-service-configuration (clojure.core/get-in letvar239888 ["serviceConfiguration" :content]))) (letvar239888 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar239888 ["clientToken" :content]))))))

(clojure.core/defn- deser-describe-classic-link-instances-result [input] (clojure.core/let [letvar239966 {"instancesSet" (portkey.aws/getback-xml-elem-with-tag "instancesSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar239966 "instancesSet") (clojure.core/assoc :instances (deser-classic-link-instance-list (clojure.core/get-in letvar239966 ["instancesSet" :content]))) (letvar239966 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar239966 ["nextToken" :content]))))))

(clojure.core/defn- deser-modify-vpc-tenancy-result [input] (clojure.core/let [letvar240044 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar240044 "return") (clojure.core/assoc :return-value (deser-boolean (clojure.core/get-in letvar240044 ["return" :content]))))))

(clojure.core/defn- deser-describe-instances-result [input] (clojure.core/let [letvar240122 {"reservationSet" (portkey.aws/getback-xml-elem-with-tag "reservationSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar240122 "reservationSet") (clojure.core/assoc :reservations (deser-reservation-list (clojure.core/get-in letvar240122 ["reservationSet" :content]))) (letvar240122 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar240122 ["nextToken" :content]))))))

(clojure.core/defn- deser-unassign-ipv-6-addresses-result [input] (clojure.core/let [letvar240200 {"networkInterfaceId" (portkey.aws/getback-xml-elem-with-tag "networkInterfaceId" input), "unassignedIpv6Addresses" (portkey.aws/getback-xml-elem-with-tag "unassignedIpv6Addresses" input)}] (clojure.core/cond-> {} (letvar240200 "networkInterfaceId") (clojure.core/assoc :network-interface-id (deser-string (clojure.core/get-in letvar240200 ["networkInterfaceId" :content]))) (letvar240200 "unassignedIpv6Addresses") (clojure.core/assoc :unassigned-ipv-6-addresses (deser-ipv-6-address-list (clojure.core/get-in letvar240200 ["unassignedIpv6Addresses" :content]))))))

(clojure.core/defn- deser-delete-flow-logs-result [input] (clojure.core/let [letvar240278 {"unsuccessful" (portkey.aws/getback-xml-elem-with-tag "unsuccessful" input)}] (clojure.core/cond-> {} (letvar240278 "unsuccessful") (clojure.core/assoc :unsuccessful (deser-unsuccessful-item-set (clojure.core/get-in letvar240278 ["unsuccessful" :content]))))))

(clojure.core/defn- deser-request-spot-fleet-response [input] (clojure.core/let [letvar240356 {"spotFleetRequestId" (portkey.aws/getback-xml-elem-with-tag "spotFleetRequestId" input)}] (clojure.core/cond-> {:spot-fleet-request-id (deser-string (clojure.core/get-in letvar240356 ["spotFleetRequestId" :content]))})))

(clojure.core/defn- deser-describe-spot-fleet-requests-response [input] (clojure.core/let [letvar240434 {"nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input), "spotFleetRequestConfigSet" (portkey.aws/getback-xml-elem-with-tag "spotFleetRequestConfigSet" input)}] (clojure.core/cond-> {:spot-fleet-request-configs (deser-spot-fleet-request-config-set (clojure.core/get-in letvar240434 ["spotFleetRequestConfigSet" :content]))} (letvar240434 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar240434 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-vpn-connections-result [input] (clojure.core/let [letvar240512 {"vpnConnectionSet" (portkey.aws/getback-xml-elem-with-tag "vpnConnectionSet" input)}] (clojure.core/cond-> {} (letvar240512 "vpnConnectionSet") (clojure.core/assoc :vpn-connections (deser-vpn-connection-list (clojure.core/get-in letvar240512 ["vpnConnectionSet" :content]))))))

(clojure.core/defn- deser-copy-image-result [input] (clojure.core/let [letvar240590 {"imageId" (portkey.aws/getback-xml-elem-with-tag "imageId" input)}] (clojure.core/cond-> {} (letvar240590 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar240590 ["imageId" :content]))))))

(clojure.core/defn- deser-accept-vpc-peering-connection-result [input] (clojure.core/let [letvar240668 {"vpcPeeringConnection" (portkey.aws/getback-xml-elem-with-tag "vpcPeeringConnection" input)}] (clojure.core/cond-> {} (letvar240668 "vpcPeeringConnection") (clojure.core/assoc :vpc-peering-connection (deser-vpc-peering-connection (clojure.core/get-in letvar240668 ["vpcPeeringConnection" :content]))))))

(clojure.core/defn- deser-terminate-instances-result [input] (clojure.core/let [letvar240746 {"instancesSet" (portkey.aws/getback-xml-elem-with-tag "instancesSet" input)}] (clojure.core/cond-> {} (letvar240746 "instancesSet") (clojure.core/assoc :terminating-instances (deser-instance-state-change-list (clojure.core/get-in letvar240746 ["instancesSet" :content]))))))

(clojure.core/defn- deser-describe-vpcs-result [input] (clojure.core/let [letvar240824 {"vpcSet" (portkey.aws/getback-xml-elem-with-tag "vpcSet" input)}] (clojure.core/cond-> {} (letvar240824 "vpcSet") (clojure.core/assoc :vpcs (deser-vpc-list (clojure.core/get-in letvar240824 ["vpcSet" :content]))))))

(clojure.core/defn- deser-delete-vpc-endpoints-result [input] (clojure.core/let [letvar240902 {"unsuccessful" (portkey.aws/getback-xml-elem-with-tag "unsuccessful" input)}] (clojure.core/cond-> {} (letvar240902 "unsuccessful") (clojure.core/assoc :unsuccessful (deser-unsuccessful-item-set (clojure.core/get-in letvar240902 ["unsuccessful" :content]))))))

(clojure.core/defn- deser-describe-spot-fleet-instances-response [input] (clojure.core/let [letvar240980 {"activeInstanceSet" (portkey.aws/getback-xml-elem-with-tag "activeInstanceSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input), "spotFleetRequestId" (portkey.aws/getback-xml-elem-with-tag "spotFleetRequestId" input)}] (clojure.core/cond-> {:active-instances (deser-active-instance-set (clojure.core/get-in letvar240980 ["activeInstanceSet" :content])), :spot-fleet-request-id (deser-string (clojure.core/get-in letvar240980 ["spotFleetRequestId" :content]))} (letvar240980 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar240980 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-spot-price-history-result [input] (clojure.core/let [letvar241058 {"nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input), "spotPriceHistorySet" (portkey.aws/getback-xml-elem-with-tag "spotPriceHistorySet" input)}] (clojure.core/cond-> {} (letvar241058 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar241058 ["nextToken" :content]))) (letvar241058 "spotPriceHistorySet") (clojure.core/assoc :spot-price-history (deser-spot-price-history-list (clojure.core/get-in letvar241058 ["spotPriceHistorySet" :content]))))))

(clojure.core/defn- deser-copy-snapshot-result [input] (clojure.core/let [letvar241136 {"snapshotId" (portkey.aws/getback-xml-elem-with-tag "snapshotId" input)}] (clojure.core/cond-> {} (letvar241136 "snapshotId") (clojure.core/assoc :snapshot-id (deser-string (clojure.core/get-in letvar241136 ["snapshotId" :content]))))))

(clojure.core/defn- deser-attach-classic-link-vpc-result [input] (clojure.core/let [letvar241214 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar241214 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar241214 ["return" :content]))))))

(clojure.core/defn- deser-update-security-group-rule-descriptions-ingress-result [input] (clojure.core/let [letvar241292 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar241292 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar241292 ["return" :content]))))))

(clojure.core/defn- deser-cancel-spot-fleet-requests-response [input] (clojure.core/let [letvar241370 {"successfulFleetRequestSet" (portkey.aws/getback-xml-elem-with-tag "successfulFleetRequestSet" input), "unsuccessfulFleetRequestSet" (portkey.aws/getback-xml-elem-with-tag "unsuccessfulFleetRequestSet" input)}] (clojure.core/cond-> {} (letvar241370 "successfulFleetRequestSet") (clojure.core/assoc :successful-fleet-requests (deser-cancel-spot-fleet-requests-success-set (clojure.core/get-in letvar241370 ["successfulFleetRequestSet" :content]))) (letvar241370 "unsuccessfulFleetRequestSet") (clojure.core/assoc :unsuccessful-fleet-requests (deser-cancel-spot-fleet-requests-error-set (clojure.core/get-in letvar241370 ["unsuccessfulFleetRequestSet" :content]))))))

(clojure.core/defn- deser-delete-fleets-result [input] (clojure.core/let [letvar241448 {"successfulFleetDeletionSet" (portkey.aws/getback-xml-elem-with-tag "successfulFleetDeletionSet" input), "unsuccessfulFleetDeletionSet" (portkey.aws/getback-xml-elem-with-tag "unsuccessfulFleetDeletionSet" input)}] (clojure.core/cond-> {} (letvar241448 "successfulFleetDeletionSet") (clojure.core/assoc :successful-fleet-deletions (deser-delete-fleet-success-set (clojure.core/get-in letvar241448 ["successfulFleetDeletionSet" :content]))) (letvar241448 "unsuccessfulFleetDeletionSet") (clojure.core/assoc :unsuccessful-fleet-deletions (deser-delete-fleet-error-set (clojure.core/get-in letvar241448 ["unsuccessfulFleetDeletionSet" :content]))))))

(clojure.core/defn- deser-create-fleet-result [input] (clojure.core/let [letvar241526 {"fleetId" (portkey.aws/getback-xml-elem-with-tag "fleetId" input)}] (clojure.core/cond-> {} (letvar241526 "fleetId") (clojure.core/assoc :fleet-id (deser-fleet-identifier (clojure.core/get-in letvar241526 ["fleetId" :content]))))))

(clojure.core/defn- deser-delete-nat-gateway-result [input] (clojure.core/let [letvar241604 {"natGatewayId" (portkey.aws/getback-xml-elem-with-tag "natGatewayId" input)}] (clojure.core/cond-> {} (letvar241604 "natGatewayId") (clojure.core/assoc :nat-gateway-id (deser-string (clojure.core/get-in letvar241604 ["natGatewayId" :content]))))))

(clojure.core/defn- deser-allocate-hosts-result [input] (clojure.core/let [letvar241682 {"hostIdSet" (portkey.aws/getback-xml-elem-with-tag "hostIdSet" input)}] (clojure.core/cond-> {} (letvar241682 "hostIdSet") (clojure.core/assoc :host-ids (deser-response-host-id-list (clojure.core/get-in letvar241682 ["hostIdSet" :content]))))))

(clojure.core/defn- deser-instance-attribute [input] (clojure.core/let [letvar241760 {"kernel" (portkey.aws/getback-xml-elem-with-tag "kernel" input), "groupSet" (portkey.aws/getback-xml-elem-with-tag "groupSet" input), "productCodes" (portkey.aws/getback-xml-elem-with-tag "productCodes" input), "blockDeviceMapping" (portkey.aws/getback-xml-elem-with-tag "blockDeviceMapping" input), "disableApiTermination" (portkey.aws/getback-xml-elem-with-tag "disableApiTermination" input), "sourceDestCheck" (portkey.aws/getback-xml-elem-with-tag "sourceDestCheck" input), "userData" (portkey.aws/getback-xml-elem-with-tag "userData" input), "ebsOptimized" (portkey.aws/getback-xml-elem-with-tag "ebsOptimized" input), "ramdisk" (portkey.aws/getback-xml-elem-with-tag "ramdisk" input), "instanceType" (portkey.aws/getback-xml-elem-with-tag "instanceType" input), "enaSupport" (portkey.aws/getback-xml-elem-with-tag "enaSupport" input), "rootDeviceName" (portkey.aws/getback-xml-elem-with-tag "rootDeviceName" input), "instanceInitiatedShutdownBehavior" (portkey.aws/getback-xml-elem-with-tag "instanceInitiatedShutdownBehavior" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "sriovNetSupport" (portkey.aws/getback-xml-elem-with-tag "sriovNetSupport" input)}] (clojure.core/cond-> {} (letvar241760 "kernel") (clojure.core/assoc :kernel-id (deser-attribute-value (clojure.core/get-in letvar241760 ["kernel" :content]))) (letvar241760 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar241760 ["instanceId" :content]))) (letvar241760 "ebsOptimized") (clojure.core/assoc :ebs-optimized (deser-attribute-boolean-value (clojure.core/get-in letvar241760 ["ebsOptimized" :content]))) (letvar241760 "instanceType") (clojure.core/assoc :instance-type (deser-attribute-value (clojure.core/get-in letvar241760 ["instanceType" :content]))) (letvar241760 "sriovNetSupport") (clojure.core/assoc :sriov-net-support (deser-attribute-value (clojure.core/get-in letvar241760 ["sriovNetSupport" :content]))) (letvar241760 "sourceDestCheck") (clojure.core/assoc :source-dest-check (deser-attribute-boolean-value (clojure.core/get-in letvar241760 ["sourceDestCheck" :content]))) (letvar241760 "disableApiTermination") (clojure.core/assoc :disable-api-termination (deser-attribute-boolean-value (clojure.core/get-in letvar241760 ["disableApiTermination" :content]))) (letvar241760 "groupSet") (clojure.core/assoc :groups (deser-group-identifier-list (clojure.core/get-in letvar241760 ["groupSet" :content]))) (letvar241760 "blockDeviceMapping") (clojure.core/assoc :block-device-mappings (deser-instance-block-device-mapping-list (clojure.core/get-in letvar241760 ["blockDeviceMapping" :content]))) (letvar241760 "productCodes") (clojure.core/assoc :product-codes (deser-product-code-list (clojure.core/get-in letvar241760 ["productCodes" :content]))) (letvar241760 "rootDeviceName") (clojure.core/assoc :root-device-name (deser-attribute-value (clojure.core/get-in letvar241760 ["rootDeviceName" :content]))) (letvar241760 "ramdisk") (clojure.core/assoc :ramdisk-id (deser-attribute-value (clojure.core/get-in letvar241760 ["ramdisk" :content]))) (letvar241760 "userData") (clojure.core/assoc :user-data (deser-attribute-value (clojure.core/get-in letvar241760 ["userData" :content]))) (letvar241760 "instanceInitiatedShutdownBehavior") (clojure.core/assoc :instance-initiated-shutdown-behavior (deser-attribute-value (clojure.core/get-in letvar241760 ["instanceInitiatedShutdownBehavior" :content]))) (letvar241760 "enaSupport") (clojure.core/assoc :ena-support (deser-attribute-boolean-value (clojure.core/get-in letvar241760 ["enaSupport" :content]))))))

(clojure.core/defn- deser-modify-vpc-endpoint-result [input] (clojure.core/let [letvar241838 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar241838 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar241838 ["return" :content]))))))

(clojure.core/defn- deser-describe-fpga-images-result [input] (clojure.core/let [letvar241916 {"fpgaImageSet" (portkey.aws/getback-xml-elem-with-tag "fpgaImageSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar241916 "fpgaImageSet") (clojure.core/assoc :fpga-images (deser-fpga-image-list (clojure.core/get-in letvar241916 ["fpgaImageSet" :content]))) (letvar241916 "nextToken") (clojure.core/assoc :next-token (deser-next-token (clojure.core/get-in letvar241916 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-fleet-history-result [input] (clojure.core/let [letvar241994 {"historyRecordSet" (portkey.aws/getback-xml-elem-with-tag "historyRecordSet" input), "lastEvaluatedTime" (portkey.aws/getback-xml-elem-with-tag "lastEvaluatedTime" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input), "fleetId" (portkey.aws/getback-xml-elem-with-tag "fleetId" input), "startTime" (portkey.aws/getback-xml-elem-with-tag "startTime" input)}] (clojure.core/cond-> {} (letvar241994 "historyRecordSet") (clojure.core/assoc :history-records (deser-history-record-set (clojure.core/get-in letvar241994 ["historyRecordSet" :content]))) (letvar241994 "lastEvaluatedTime") (clojure.core/assoc :last-evaluated-time (deser-date-time (clojure.core/get-in letvar241994 ["lastEvaluatedTime" :content]))) (letvar241994 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar241994 ["nextToken" :content]))) (letvar241994 "fleetId") (clojure.core/assoc :fleet-id (deser-fleet-identifier (clojure.core/get-in letvar241994 ["fleetId" :content]))) (letvar241994 "startTime") (clojure.core/assoc :start-time (deser-date-time (clojure.core/get-in letvar241994 ["startTime" :content]))))))

(clojure.core/defn- deser-modify-fpga-image-attribute-result [input] (clojure.core/let [letvar242072 {"fpgaImageAttribute" (portkey.aws/getback-xml-elem-with-tag "fpgaImageAttribute" input)}] (clojure.core/cond-> {} (letvar242072 "fpgaImageAttribute") (clojure.core/assoc :fpga-image-attribute (deser-fpga-image-attribute (clojure.core/get-in letvar242072 ["fpgaImageAttribute" :content]))))))

(clojure.core/defn- deser-disassociate-iam-instance-profile-result [input] (clojure.core/let [letvar242150 {"iamInstanceProfileAssociation" (portkey.aws/getback-xml-elem-with-tag "iamInstanceProfileAssociation" input)}] (clojure.core/cond-> {} (letvar242150 "iamInstanceProfileAssociation") (clojure.core/assoc :iam-instance-profile-association (deser-iam-instance-profile-association (clojure.core/get-in letvar242150 ["iamInstanceProfileAssociation" :content]))))))

(clojure.core/defn- deser-key-pair [input] (clojure.core/let [letvar242228 {"keyFingerprint" (portkey.aws/getback-xml-elem-with-tag "keyFingerprint" input), "keyMaterial" (portkey.aws/getback-xml-elem-with-tag "keyMaterial" input), "keyName" (portkey.aws/getback-xml-elem-with-tag "keyName" input)}] (clojure.core/cond-> {} (letvar242228 "keyFingerprint") (clojure.core/assoc :key-fingerprint (deser-string (clojure.core/get-in letvar242228 ["keyFingerprint" :content]))) (letvar242228 "keyMaterial") (clojure.core/assoc :key-material (deser-string (clojure.core/get-in letvar242228 ["keyMaterial" :content]))) (letvar242228 "keyName") (clojure.core/assoc :key-name (deser-string (clojure.core/get-in letvar242228 ["keyName" :content]))))))

(clojure.core/defn- deser-delete-vpc-endpoint-connection-notifications-result [input] (clojure.core/let [letvar242306 {"unsuccessful" (portkey.aws/getback-xml-elem-with-tag "unsuccessful" input)}] (clojure.core/cond-> {} (letvar242306 "unsuccessful") (clojure.core/assoc :unsuccessful (deser-unsuccessful-item-set (clojure.core/get-in letvar242306 ["unsuccessful" :content]))))))

(clojure.core/defn- deser-accept-vpc-endpoint-connections-result [input] (clojure.core/let [letvar242384 {"unsuccessful" (portkey.aws/getback-xml-elem-with-tag "unsuccessful" input)}] (clojure.core/cond-> {} (letvar242384 "unsuccessful") (clojure.core/assoc :unsuccessful (deser-unsuccessful-item-set (clojure.core/get-in letvar242384 ["unsuccessful" :content]))))))

(clojure.core/defn- deser-describe-subnets-result [input] (clojure.core/let [letvar242462 {"subnetSet" (portkey.aws/getback-xml-elem-with-tag "subnetSet" input)}] (clojure.core/cond-> {} (letvar242462 "subnetSet") (clojure.core/assoc :subnets (deser-subnet-list (clojure.core/get-in letvar242462 ["subnetSet" :content]))))))

(clojure.core/defn- deser-associate-address-result [input] (clojure.core/let [letvar242540 {"associationId" (portkey.aws/getback-xml-elem-with-tag "associationId" input)}] (clojure.core/cond-> {} (letvar242540 "associationId") (clojure.core/assoc :association-id (deser-string (clojure.core/get-in letvar242540 ["associationId" :content]))))))

(clojure.core/defn- deser-create-instance-export-task-result [input] (clojure.core/let [letvar242618 {"exportTask" (portkey.aws/getback-xml-elem-with-tag "exportTask" input)}] (clojure.core/cond-> {} (letvar242618 "exportTask") (clojure.core/assoc :export-task (deser-export-task (clojure.core/get-in letvar242618 ["exportTask" :content]))))))

(clojure.core/defn- deser-modify-vpc-peering-connection-options-result [input] (clojure.core/let [letvar242696 {"accepterPeeringConnectionOptions" (portkey.aws/getback-xml-elem-with-tag "accepterPeeringConnectionOptions" input), "requesterPeeringConnectionOptions" (portkey.aws/getback-xml-elem-with-tag "requesterPeeringConnectionOptions" input)}] (clojure.core/cond-> {} (letvar242696 "accepterPeeringConnectionOptions") (clojure.core/assoc :accepter-peering-connection-options (deser-peering-connection-options (clojure.core/get-in letvar242696 ["accepterPeeringConnectionOptions" :content]))) (letvar242696 "requesterPeeringConnectionOptions") (clojure.core/assoc :requester-peering-connection-options (deser-peering-connection-options (clojure.core/get-in letvar242696 ["requesterPeeringConnectionOptions" :content]))))))

(clojure.core/defn- deser-associate-route-table-result [input] (clojure.core/let [letvar242774 {"associationId" (portkey.aws/getback-xml-elem-with-tag "associationId" input)}] (clojure.core/cond-> {} (letvar242774 "associationId") (clojure.core/assoc :association-id (deser-string (clojure.core/get-in letvar242774 ["associationId" :content]))))))

(clojure.core/defn- deser-modify-fleet-result [input] (clojure.core/let [letvar242852 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar242852 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar242852 ["return" :content]))))))

(clojure.core/defn- deser-modify-vpc-endpoint-service-permissions-result [input] (clojure.core/let [letvar242930 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar242930 "return") (clojure.core/assoc :return-value (deser-boolean (clojure.core/get-in letvar242930 ["return" :content]))))))

(clojure.core/defn- deser-modify-vpc-endpoint-service-configuration-result [input] (clojure.core/let [letvar243008 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar243008 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar243008 ["return" :content]))))))

(clojure.core/defn- deser-create-security-group-result [input] (clojure.core/let [letvar243086 {"groupId" (portkey.aws/getback-xml-elem-with-tag "groupId" input)}] (clojure.core/cond-> {} (letvar243086 "groupId") (clojure.core/assoc :group-id (deser-string (clojure.core/get-in letvar243086 ["groupId" :content]))))))

(clojure.core/defn- deser-get-password-data-result [input] (clojure.core/let [letvar243164 {"instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "passwordData" (portkey.aws/getback-xml-elem-with-tag "passwordData" input), "timestamp" (portkey.aws/getback-xml-elem-with-tag "timestamp" input)}] (clojure.core/cond-> {} (letvar243164 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar243164 ["instanceId" :content]))) (letvar243164 "passwordData") (clojure.core/assoc :password-data (deser-string (clojure.core/get-in letvar243164 ["passwordData" :content]))) (letvar243164 "timestamp") (clojure.core/assoc :timestamp (deser-date-time (clojure.core/get-in letvar243164 ["timestamp" :content]))))))

(clojure.core/defn- deser-import-volume-result [input] (clojure.core/let [letvar243242 {"conversionTask" (portkey.aws/getback-xml-elem-with-tag "conversionTask" input)}] (clojure.core/cond-> {} (letvar243242 "conversionTask") (clojure.core/assoc :conversion-task (deser-conversion-task (clojure.core/get-in letvar243242 ["conversionTask" :content]))))))

(clojure.core/defn- deser-describe-reserved-instances-result [input] (clojure.core/let [letvar243320 {"reservedInstancesSet" (portkey.aws/getback-xml-elem-with-tag "reservedInstancesSet" input)}] (clojure.core/cond-> {} (letvar243320 "reservedInstancesSet") (clojure.core/assoc :reserved-instances (deser-reserved-instances-list (clojure.core/get-in letvar243320 ["reservedInstancesSet" :content]))))))

(clojure.core/defn- deser-describe-nat-gateways-result [input] (clojure.core/let [letvar243398 {"natGatewaySet" (portkey.aws/getback-xml-elem-with-tag "natGatewaySet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar243398 "natGatewaySet") (clojure.core/assoc :nat-gateways (deser-nat-gateway-list (clojure.core/get-in letvar243398 ["natGatewaySet" :content]))) (letvar243398 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar243398 ["nextToken" :content]))))))

(clojure.core/defn- deser-accept-reserved-instances-exchange-quote-result [input] (clojure.core/let [letvar243476 {"exchangeId" (portkey.aws/getback-xml-elem-with-tag "exchangeId" input)}] (clojure.core/cond-> {} (letvar243476 "exchangeId") (clojure.core/assoc :exchange-id (deser-string (clojure.core/get-in letvar243476 ["exchangeId" :content]))))))

(clojure.core/defn- deser-describe-host-reservation-offerings-result [input] (clojure.core/let [letvar243554 {"nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input), "offeringSet" (portkey.aws/getback-xml-elem-with-tag "offeringSet" input)}] (clojure.core/cond-> {} (letvar243554 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar243554 ["nextToken" :content]))) (letvar243554 "offeringSet") (clojure.core/assoc :offering-set (deser-host-offering-set (clojure.core/get-in letvar243554 ["offeringSet" :content]))))))

(clojure.core/defn- deser-replace-route-table-association-result [input] (clojure.core/let [letvar243632 {"newAssociationId" (portkey.aws/getback-xml-elem-with-tag "newAssociationId" input)}] (clojure.core/cond-> {} (letvar243632 "newAssociationId") (clojure.core/assoc :new-association-id (deser-string (clojure.core/get-in letvar243632 ["newAssociationId" :content]))))))

(clojure.core/defn- deser-modify-launch-template-result [input] (clojure.core/let [letvar243710 {"launchTemplate" (portkey.aws/getback-xml-elem-with-tag "launchTemplate" input)}] (clojure.core/cond-> {} (letvar243710 "launchTemplate") (clojure.core/assoc :launch-template (deser-launch-template (clojure.core/get-in letvar243710 ["launchTemplate" :content]))))))

(clojure.core/defn- deser-cancel-spot-instance-requests-result [input] (clojure.core/let [letvar243788 {"spotInstanceRequestSet" (portkey.aws/getback-xml-elem-with-tag "spotInstanceRequestSet" input)}] (clojure.core/cond-> {} (letvar243788 "spotInstanceRequestSet") (clojure.core/assoc :cancelled-spot-instance-requests (deser-cancelled-spot-instance-request-list (clojure.core/get-in letvar243788 ["spotInstanceRequestSet" :content]))))))

(clojure.core/defn- deser-describe-import-snapshot-tasks-result [input] (clojure.core/let [letvar243866 {"importSnapshotTaskSet" (portkey.aws/getback-xml-elem-with-tag "importSnapshotTaskSet" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar243866 "importSnapshotTaskSet") (clojure.core/assoc :import-snapshot-tasks (deser-import-snapshot-task-list (clojure.core/get-in letvar243866 ["importSnapshotTaskSet" :content]))) (letvar243866 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar243866 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-dhcp-options-result [input] (clojure.core/let [letvar243944 {"dhcpOptionsSet" (portkey.aws/getback-xml-elem-with-tag "dhcpOptionsSet" input)}] (clojure.core/cond-> {} (letvar243944 "dhcpOptionsSet") (clojure.core/assoc :dhcp-options (deser-dhcp-options-list (clojure.core/get-in letvar243944 ["dhcpOptionsSet" :content]))))))

(clojure.core/defn- deser-create-nat-gateway-result [input] (clojure.core/let [letvar244022 {"clientToken" (portkey.aws/getback-xml-elem-with-tag "clientToken" input), "natGateway" (portkey.aws/getback-xml-elem-with-tag "natGateway" input)}] (clojure.core/cond-> {} (letvar244022 "clientToken") (clojure.core/assoc :client-token (deser-string (clojure.core/get-in letvar244022 ["clientToken" :content]))) (letvar244022 "natGateway") (clojure.core/assoc :nat-gateway (deser-nat-gateway (clojure.core/get-in letvar244022 ["natGateway" :content]))))))

(clojure.core/defn- deser-image-attribute [input] (clojure.core/let [letvar244100 {"blockDeviceMapping" (portkey.aws/getback-xml-elem-with-tag "blockDeviceMapping" input), "imageId" (portkey.aws/getback-xml-elem-with-tag "imageId" input), "launchPermission" (portkey.aws/getback-xml-elem-with-tag "launchPermission" input), "productCodes" (portkey.aws/getback-xml-elem-with-tag "productCodes" input), "description" (portkey.aws/getback-xml-elem-with-tag "description" input), "kernel" (portkey.aws/getback-xml-elem-with-tag "kernel" input), "ramdisk" (portkey.aws/getback-xml-elem-with-tag "ramdisk" input), "sriovNetSupport" (portkey.aws/getback-xml-elem-with-tag "sriovNetSupport" input)}] (clojure.core/cond-> {} (letvar244100 "blockDeviceMapping") (clojure.core/assoc :block-device-mappings (deser-block-device-mapping-list (clojure.core/get-in letvar244100 ["blockDeviceMapping" :content]))) (letvar244100 "imageId") (clojure.core/assoc :image-id (deser-string (clojure.core/get-in letvar244100 ["imageId" :content]))) (letvar244100 "launchPermission") (clojure.core/assoc :launch-permissions (deser-launch-permission-list (clojure.core/get-in letvar244100 ["launchPermission" :content]))) (letvar244100 "productCodes") (clojure.core/assoc :product-codes (deser-product-code-list (clojure.core/get-in letvar244100 ["productCodes" :content]))) (letvar244100 "description") (clojure.core/assoc :description (deser-attribute-value (clojure.core/get-in letvar244100 ["description" :content]))) (letvar244100 "kernel") (clojure.core/assoc :kernel-id (deser-attribute-value (clojure.core/get-in letvar244100 ["kernel" :content]))) (letvar244100 "ramdisk") (clojure.core/assoc :ramdisk-id (deser-attribute-value (clojure.core/get-in letvar244100 ["ramdisk" :content]))) (letvar244100 "sriovNetSupport") (clojure.core/assoc :sriov-net-support (deser-attribute-value (clojure.core/get-in letvar244100 ["sriovNetSupport" :content]))))))

(clojure.core/defn- deser-reject-vpc-peering-connection-result [input] (clojure.core/let [letvar244178 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar244178 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar244178 ["return" :content]))))))

(clojure.core/defn- deser-create-network-interface-permission-result [input] (clojure.core/let [letvar244256 {"interfacePermission" (portkey.aws/getback-xml-elem-with-tag "interfacePermission" input)}] (clojure.core/cond-> {} (letvar244256 "interfacePermission") (clojure.core/assoc :interface-permission (deser-network-interface-permission (clojure.core/get-in letvar244256 ["interfacePermission" :content]))))))

(clojure.core/defn- deser-create-spot-datafeed-subscription-result [input] (clojure.core/let [letvar244334 {"spotDatafeedSubscription" (portkey.aws/getback-xml-elem-with-tag "spotDatafeedSubscription" input)}] (clojure.core/cond-> {} (letvar244334 "spotDatafeedSubscription") (clojure.core/assoc :spot-datafeed-subscription (deser-spot-datafeed-subscription (clojure.core/get-in letvar244334 ["spotDatafeedSubscription" :content]))))))

(clojure.core/defn- deser-bundle-instance-result [input] (clojure.core/let [letvar244412 {"bundleInstanceTask" (portkey.aws/getback-xml-elem-with-tag "bundleInstanceTask" input)}] (clojure.core/cond-> {} (letvar244412 "bundleInstanceTask") (clojure.core/assoc :bundle-task (deser-bundle-task (clojure.core/get-in letvar244412 ["bundleInstanceTask" :content]))))))

(clojure.core/defn- deser-start-instances-result [input] (clojure.core/let [letvar244490 {"instancesSet" (portkey.aws/getback-xml-elem-with-tag "instancesSet" input)}] (clojure.core/cond-> {} (letvar244490 "instancesSet") (clojure.core/assoc :starting-instances (deser-instance-state-change-list (clojure.core/get-in letvar244490 ["instancesSet" :content]))))))

(clojure.core/defn- deser-describe-elastic-gpus-result [input] (clojure.core/let [letvar244568 {"elasticGpuSet" (portkey.aws/getback-xml-elem-with-tag "elasticGpuSet" input), "maxResults" (portkey.aws/getback-xml-elem-with-tag "maxResults" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar244568 "elasticGpuSet") (clojure.core/assoc :elastic-gpu-set (deser-elastic-gpu-set (clojure.core/get-in letvar244568 ["elasticGpuSet" :content]))) (letvar244568 "maxResults") (clojure.core/assoc :max-results (deser-integer (clojure.core/get-in letvar244568 ["maxResults" :content]))) (letvar244568 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar244568 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-vpn-gateways-result [input] (clojure.core/let [letvar244646 {"vpnGatewaySet" (portkey.aws/getback-xml-elem-with-tag "vpnGatewaySet" input)}] (clojure.core/cond-> {} (letvar244646 "vpnGatewaySet") (clojure.core/assoc :vpn-gateways (deser-vpn-gateway-list (clojure.core/get-in letvar244646 ["vpnGatewaySet" :content]))))))

(clojure.core/defn- deser-volume-attachment [input] (clojure.core/let [letvar244724 {"attachTime" (portkey.aws/getback-xml-elem-with-tag "attachTime" input), "device" (portkey.aws/getback-xml-elem-with-tag "device" input), "instanceId" (portkey.aws/getback-xml-elem-with-tag "instanceId" input), "status" (portkey.aws/getback-xml-elem-with-tag "status" input), "volumeId" (portkey.aws/getback-xml-elem-with-tag "volumeId" input), "deleteOnTermination" (portkey.aws/getback-xml-elem-with-tag "deleteOnTermination" input)}] (clojure.core/cond-> {} (letvar244724 "attachTime") (clojure.core/assoc :attach-time (deser-date-time (clojure.core/get-in letvar244724 ["attachTime" :content]))) (letvar244724 "device") (clojure.core/assoc :device (deser-string (clojure.core/get-in letvar244724 ["device" :content]))) (letvar244724 "instanceId") (clojure.core/assoc :instance-id (deser-string (clojure.core/get-in letvar244724 ["instanceId" :content]))) (letvar244724 "status") (clojure.core/assoc :state (deser-volume-attachment-state (clojure.core/get-in letvar244724 ["status" :content]))) (letvar244724 "volumeId") (clojure.core/assoc :volume-id (deser-string (clojure.core/get-in letvar244724 ["volumeId" :content]))) (letvar244724 "deleteOnTermination") (clojure.core/assoc :delete-on-termination (deser-boolean (clojure.core/get-in letvar244724 ["deleteOnTermination" :content]))))))

(clojure.core/defn- deser-associate-iam-instance-profile-result [input] (clojure.core/let [letvar244802 {"iamInstanceProfileAssociation" (portkey.aws/getback-xml-elem-with-tag "iamInstanceProfileAssociation" input)}] (clojure.core/cond-> {} (letvar244802 "iamInstanceProfileAssociation") (clojure.core/assoc :iam-instance-profile-association (deser-iam-instance-profile-association (clojure.core/get-in letvar244802 ["iamInstanceProfileAssociation" :content]))))))

(clojure.core/defn- deser-enable-vpc-classic-link-result [input] (clojure.core/let [letvar244880 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar244880 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar244880 ["return" :content]))))))

(clojure.core/defn- deser-delete-launch-template-result [input] (clojure.core/let [letvar244958 {"launchTemplate" (portkey.aws/getback-xml-elem-with-tag "launchTemplate" input)}] (clojure.core/cond-> {} (letvar244958 "launchTemplate") (clojure.core/assoc :launch-template (deser-launch-template (clojure.core/get-in letvar244958 ["launchTemplate" :content]))))))

(clojure.core/defn- deser-describe-security-groups-result [input] (clojure.core/let [letvar245036 {"securityGroupInfo" (portkey.aws/getback-xml-elem-with-tag "securityGroupInfo" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input)}] (clojure.core/cond-> {} (letvar245036 "securityGroupInfo") (clojure.core/assoc :security-groups (deser-security-group-list (clojure.core/get-in letvar245036 ["securityGroupInfo" :content]))) (letvar245036 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar245036 ["nextToken" :content]))))))

(clojure.core/defn- deser-describe-security-group-references-result [input] (clojure.core/let [letvar245114 {"securityGroupReferenceSet" (portkey.aws/getback-xml-elem-with-tag "securityGroupReferenceSet" input)}] (clojure.core/cond-> {} (letvar245114 "securityGroupReferenceSet") (clojure.core/assoc :security-group-reference-set (deser-security-group-references (clojure.core/get-in letvar245114 ["securityGroupReferenceSet" :content]))))))

(clojure.core/defn- deser-describe-regions-result [input] (clojure.core/let [letvar245192 {"regionInfo" (portkey.aws/getback-xml-elem-with-tag "regionInfo" input)}] (clojure.core/cond-> {} (letvar245192 "regionInfo") (clojure.core/assoc :regions (deser-region-list (clojure.core/get-in letvar245192 ["regionInfo" :content]))))))

(clojure.core/defn- deser-detach-classic-link-vpc-result [input] (clojure.core/let [letvar245270 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar245270 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar245270 ["return" :content]))))))

(clojure.core/defn- deser-delete-vpc-peering-connection-result [input] (clojure.core/let [letvar245348 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar245348 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar245348 ["return" :content]))))))

(clojure.core/defn- deser-delete-fpga-image-result [input] (clojure.core/let [letvar245426 {"return" (portkey.aws/getback-xml-elem-with-tag "return" input)}] (clojure.core/cond-> {} (letvar245426 "return") (clojure.core/assoc :return (deser-boolean (clojure.core/get-in letvar245426 ["return" :content]))))))

(clojure.core/defn- deser-delete-vpc-endpoint-service-configurations-result [input] (clojure.core/let [letvar245504 {"unsuccessful" (portkey.aws/getback-xml-elem-with-tag "unsuccessful" input)}] (clojure.core/cond-> {} (letvar245504 "unsuccessful") (clojure.core/assoc :unsuccessful (deser-unsuccessful-item-set (clojure.core/get-in letvar245504 ["unsuccessful" :content]))))))

(clojure.core/defn- deser-unmonitor-instances-result [input] (clojure.core/let [letvar245582 {"instancesSet" (portkey.aws/getback-xml-elem-with-tag "instancesSet" input)}] (clojure.core/cond-> {} (letvar245582 "instancesSet") (clojure.core/assoc :instance-monitorings (deser-instance-monitoring-list (clojure.core/get-in letvar245582 ["instancesSet" :content]))))))

(clojure.core/defn- deser-attach-vpn-gateway-result [input] (clojure.core/let [letvar245660 {"attachment" (portkey.aws/getback-xml-elem-with-tag "attachment" input)}] (clojure.core/cond-> {} (letvar245660 "attachment") (clojure.core/assoc :vpc-attachment (deser-vpc-attachment (clojure.core/get-in letvar245660 ["attachment" :content]))))))

(clojure.core/defn- deser-describe-spot-fleet-request-history-response [input] (clojure.core/let [letvar245738 {"historyRecordSet" (portkey.aws/getback-xml-elem-with-tag "historyRecordSet" input), "lastEvaluatedTime" (portkey.aws/getback-xml-elem-with-tag "lastEvaluatedTime" input), "nextToken" (portkey.aws/getback-xml-elem-with-tag "nextToken" input), "spotFleetRequestId" (portkey.aws/getback-xml-elem-with-tag "spotFleetRequestId" input), "startTime" (portkey.aws/getback-xml-elem-with-tag "startTime" input)}] (clojure.core/cond-> {:history-records (deser-history-records (clojure.core/get-in letvar245738 ["historyRecordSet" :content])), :last-evaluated-time (deser-date-time (clojure.core/get-in letvar245738 ["lastEvaluatedTime" :content])), :spot-fleet-request-id (deser-string (clojure.core/get-in letvar245738 ["spotFleetRequestId" :content])), :start-time (deser-date-time (clojure.core/get-in letvar245738 ["startTime" :content]))} (letvar245738 "nextToken") (clojure.core/assoc :next-token (deser-string (clojure.core/get-in letvar245738 ["nextToken" :content]))))))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/zone-name-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-instance-network-interface-specification-request-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/launch-template-instance-network-interface-specification-request))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-snapshots-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-snapshots-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-snapshots-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-snapshots-request/owner-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/owner-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-snapshots-request/restorable-by-user-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/restorable-by-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-snapshots-request/snapshot-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/snapshot-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-snapshots-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-snapshots-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-snapshots-request/filters :portkey.aws.ec2.-2016-11-15.describe-snapshots-request/max-results :portkey.aws.ec2.-2016-11-15.describe-snapshots-request/next-token :portkey.aws.ec2.-2016-11-15.describe-snapshots-request/owner-ids :portkey.aws.ec2.-2016-11-15.describe-snapshots-request/restorable-by-user-ids :portkey.aws.ec2.-2016-11-15.describe-snapshots-request/snapshot-ids :portkey.aws.ec2.-2016-11-15.describe-snapshots-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/export-task-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/export-task))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/event-code #{:instancestop "instance-retirement" "instance-reboot" :instancereboot "instance-stop" "system-reboot" :instanceretirement :systemmaintenance :systemreboot "system-maintenance"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.flow-log/flow-log-status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.flow-log/resource-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.flow-log/deliver-logs-error-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.flow-log/deliver-logs-status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.flow-log/deliver-logs-permission-arn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.flow-log/flow-log-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.flow-log/log-group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.flow-log/creation-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.flow-log/log-destination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/flow-log (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.flow-log/flow-log-status :portkey.aws.ec2.-2016-11-15/traffic-type :portkey.aws.ec2.-2016-11-15.flow-log/resource-id :portkey.aws.ec2.-2016-11-15.flow-log/deliver-logs-error-message :portkey.aws.ec2.-2016-11-15.flow-log/deliver-logs-status :portkey.aws.ec2.-2016-11-15.flow-log/deliver-logs-permission-arn :portkey.aws.ec2.-2016-11-15/log-destination-type :portkey.aws.ec2.-2016-11-15.flow-log/flow-log-id :portkey.aws.ec2.-2016-11-15.flow-log/log-group-name :portkey.aws.ec2.-2016-11-15.flow-log/creation-time :portkey.aws.ec2.-2016-11-15.flow-log/log-destination]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/vpc))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-spot-fleet-request-response/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-spot-fleet-request-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-spot-fleet-request-response/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.history-record-entry/event-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-event-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.history-record-entry/timestamp (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/history-record-entry (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/event-information :portkey.aws.ec2.-2016-11-15.history-record-entry/event-type :portkey.aws.ec2.-2016-11-15.history-record-entry/timestamp]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-monitoring/enabled (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/scheduled-instances-monitoring (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.scheduled-instances-monitoring/enabled]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-requests-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-requests-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-requests-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-requests-request/spot-fleet-request-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-spot-fleet-requests-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-spot-fleet-requests-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-requests-request/max-results :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-requests-request/next-token :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-requests-request/spot-fleet-request-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/spot-allocation-strategy #{:diversified "lowest-price" "diversified" :lowestprice})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-status-action/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-status-action/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-status-action/event-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-status-action/event-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/volume-status-action (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.volume-status-action/code :portkey.aws.ec2.-2016-11-15.volume-status-action/description :portkey.aws.ec2.-2016-11-15.volume-status-action/event-id :portkey.aws.ec2.-2016-11-15.volume-status-action/event-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/permission-group #{:all "all"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.address/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.address/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.address/network-interface-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.address/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.address/allocation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.address/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.address/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.address/domain (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/domain-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.address/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/address (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.address/public-ip :portkey.aws.ec2.-2016-11-15.address/instance-id :portkey.aws.ec2.-2016-11-15.address/network-interface-owner-id :portkey.aws.ec2.-2016-11-15.address/association-id :portkey.aws.ec2.-2016-11-15.address/allocation-id :portkey.aws.ec2.-2016-11-15.address/tags :portkey.aws.ec2.-2016-11-15.address/network-interface-id :portkey.aws.ec2.-2016-11-15.address/domain :portkey.aws.ec2.-2016-11-15.address/private-ip-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.response-error/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-error-code))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.response-error/message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/response-error (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.response-error/code :portkey.aws.ec2.-2016-11-15.response-error/message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.bundle-task/bundle-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.bundle-task/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.bundle-task/progress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.bundle-task/start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.bundle-task/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/bundle-task-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.bundle-task/update-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/bundle-task (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.bundle-task/bundle-id :portkey.aws.ec2.-2016-11-15/bundle-task-error :portkey.aws.ec2.-2016-11-15.bundle-task/instance-id :portkey.aws.ec2.-2016-11-15.bundle-task/progress :portkey.aws.ec2.-2016-11-15.bundle-task/start-time :portkey.aws.ec2.-2016-11-15.bundle-task/state :portkey.aws.ec2.-2016-11-15/storage :portkey.aws.ec2.-2016-11-15.bundle-task/update-time]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-cpu-options-request/core-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-cpu-options-request/threads-per-core (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-cpu-options-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.launch-template-cpu-options-request/core-count :portkey.aws.ec2.-2016-11-15.launch-template-cpu-options-request/threads-per-core]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-placement-request/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-placement-request/affinity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-placement-request/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-placement-request/host-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-placement-request/spread-domain (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-placement-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.launch-template-placement-request/availability-zone :portkey.aws.ec2.-2016-11-15.launch-template-placement-request/affinity :portkey.aws.ec2.-2016-11-15.launch-template-placement-request/group-name :portkey.aws.ec2.-2016-11-15.launch-template-placement-request/host-id :portkey.aws.ec2.-2016-11-15/tenancy :portkey.aws.ec2.-2016-11-15.launch-template-placement-request/spread-domain]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-config-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/launch-template-config))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-request/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-request/role-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-request/disk-containers (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/image-disk-container-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-request/hypervisor (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-request/architecture (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-request/license-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/import-image-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.import-image-request/dry-run :portkey.aws.ec2.-2016-11-15.import-image-request/platform :portkey.aws.ec2.-2016-11-15.import-image-request/role-name :portkey.aws.ec2.-2016-11-15/client-data :portkey.aws.ec2.-2016-11-15.import-image-request/description :portkey.aws.ec2.-2016-11-15.import-image-request/disk-containers :portkey.aws.ec2.-2016-11-15.import-image-request/hypervisor :portkey.aws.ec2.-2016-11-15.import-image-request/architecture :portkey.aws.ec2.-2016-11-15.import-image-request/license-type :portkey.aws.ec2.-2016-11-15.import-image-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/security-group-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/security-group))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/service-type-detail-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/service-type-detail))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/principal-type #{:role :service "User" :all "Role" :account "Account" "OrganizationUnit" :organization-unit "Service" "All" :user})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-configurations-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-configurations-request/service-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-configurations-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-configurations-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-configurations-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-service-configurations-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-configurations-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-configurations-request/service-ids :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-configurations-request/filters :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-configurations-request/max-results :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-configurations-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-count-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/instance-count))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.confirm-product-instance-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.confirm-product-instance-request/product-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.confirm-product-instance-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/confirm-product-instance-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.confirm-product-instance-request/instance-id :portkey.aws.ec2.-2016-11-15.confirm-product-instance-request/product-code] :opt-un [:portkey.aws.ec2.-2016-11-15.confirm-product-instance-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-conversion-task-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/conversion-task))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.route/instance-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.route/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.route/nat-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.route/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.route/destination-ipv-6-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.route/origin (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/route-origin))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.route/destination-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.route/destination-prefix-list-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.route/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.route/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/route-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.route/gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.route/egress-only-internet-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/route (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.route/instance-owner-id :portkey.aws.ec2.-2016-11-15.route/instance-id :portkey.aws.ec2.-2016-11-15.route/nat-gateway-id :portkey.aws.ec2.-2016-11-15.route/network-interface-id :portkey.aws.ec2.-2016-11-15.route/destination-ipv-6-cidr-block :portkey.aws.ec2.-2016-11-15.route/origin :portkey.aws.ec2.-2016-11-15.route/destination-cidr-block :portkey.aws.ec2.-2016-11-15.route/destination-prefix-list-id :portkey.aws.ec2.-2016-11-15.route/vpc-peering-connection-id :portkey.aws.ec2.-2016-11-15.route/state :portkey.aws.ec2.-2016-11-15.route/gateway-id :portkey.aws.ec2.-2016-11-15.route/egress-only-internet-gateway-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.dns-entry/dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.dns-entry/hosted-zone-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/dns-entry (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.dns-entry/dns-name :portkey.aws.ec2.-2016-11-15.dns-entry/hosted-zone-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpn-gateways-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpn-gateways-request/vpn-gateway-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpn-gateway-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpn-gateways-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpn-gateways-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-vpn-gateways-request/filters :portkey.aws.ec2.-2016-11-15.describe-vpn-gateways-request/vpn-gateway-ids :portkey.aws.ec2.-2016-11-15.describe-vpn-gateways-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-vpn-connection-request/vpn-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-vpn-connection-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-vpn-connection-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-vpn-connection-request/vpn-connection-id] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-vpn-connection-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-console-screenshot-result/image-data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-console-screenshot-result/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/get-console-screenshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.get-console-screenshot-result/image-data :portkey.aws.ec2.-2016-11-15.get-console-screenshot-result/instance-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-egress-only-internet-gateways-result/egress-only-internet-gateways (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/egress-only-internet-gateway-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-egress-only-internet-gateways-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-egress-only-internet-gateways-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-egress-only-internet-gateways-result/egress-only-internet-gateways :portkey.aws.ec2.-2016-11-15.describe-egress-only-internet-gateways-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/nat-gateway-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/nat-gateway))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/moving-address-status-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/moving-address-status))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-state-change-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/instance-state-change))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/iam-instance-profile-association-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/iam-instance-profile-association))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-aggregate-id-format-result/use-long-ids-aggregated (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-aggregate-id-format-result/statuses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/id-format-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-aggregate-id-format-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-aggregate-id-format-result/use-long-ids-aggregated :portkey.aws.ec2.-2016-11-15.describe-aggregate-id-format-result/statuses]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cpu-options-request/core-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cpu-options-request/threads-per-core (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cpu-options-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.cpu-options-request/core-count :portkey.aws.ec2.-2016-11-15.cpu-options-request/threads-per-core]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-fleet-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-fleet-request/spot-fleet-request-config (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-fleet-request-config-data))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/request-spot-fleet-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.request-spot-fleet-request/spot-fleet-request-config] :opt-un [:portkey.aws.ec2.-2016-11-15.request-spot-fleet-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/private-ip-address-config-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/scheduled-instances-private-ip-address-config))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/service-type #{:interface "Interface" :gateway "Gateway"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleet-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleet-instances-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleet-instances-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleet-instances-request/fleet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-identifier))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleet-instances-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-fleet-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.describe-fleet-instances-request/fleet-id] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-fleet-instances-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-fleet-instances-request/max-results :portkey.aws.ec2.-2016-11-15.describe-fleet-instances-request/next-token :portkey.aws.ec2.-2016-11-15.describe-fleet-instances-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-scheduled-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-scheduled-instances-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-scheduled-instances-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-scheduled-instances-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-scheduled-instances-request/scheduled-instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/scheduled-instance-id-request-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-scheduled-instances-request/slot-start-time-range (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/slot-start-time-range-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-scheduled-instances-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-scheduled-instances-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-scheduled-instances-request/filters :portkey.aws.ec2.-2016-11-15.describe-scheduled-instances-request/max-results :portkey.aws.ec2.-2016-11-15.describe-scheduled-instances-request/next-token :portkey.aws.ec2.-2016-11-15.describe-scheduled-instances-request/scheduled-instance-ids :portkey.aws.ec2.-2016-11-15.describe-scheduled-instances-request/slot-start-time-range]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-flow-logs-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-flow-logs-request/flow-log-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-flow-logs-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-flow-logs-request/flow-log-ids] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-flow-logs-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.ebs-instance-block-device-specification/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.ebs-instance-block-device-specification/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/ebs-instance-block-device-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.ebs-instance-block-device-specification/delete-on-termination :portkey.aws.ec2.-2016-11-15.ebs-instance-block-device-specification/volume-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-internet-gateway-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/internet-gateway]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/scheduled-instances-ipv-6-address (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/ipv-6-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.ebs-instance-block-device/attach-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.ebs-instance-block-device/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.ebs-instance-block-device/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attachment-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.ebs-instance-block-device/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/ebs-instance-block-device (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.ebs-instance-block-device/attach-time :portkey.aws.ec2.-2016-11-15.ebs-instance-block-device/delete-on-termination :portkey.aws.ec2.-2016-11-15.ebs-instance-block-device/status :portkey.aws.ec2.-2016-11-15.ebs-instance-block-device/volume-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.route-table/associations (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/route-table-association-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.route-table/propagating-vgws (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/propagating-vgw-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.route-table/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.route-table/routes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/route-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.route-table/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.route-table/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/route-table (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.route-table/associations :portkey.aws.ec2.-2016-11-15.route-table/propagating-vgws :portkey.aws.ec2.-2016-11-15.route-table/route-table-id :portkey.aws.ec2.-2016-11-15.route-table/routes :portkey.aws.ec2.-2016-11-15.route-table/tags :portkey.aws.ec2.-2016-11-15.route-table/vpc-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/scheduled-instance-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/scheduled-instance))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/launch-template))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/target-groups-config (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15/target-groups] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-host-reservations-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-host-reservations-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/host-reservation-set :portkey.aws.ec2.-2016-11-15.describe-host-reservations-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.propagating-vgw/gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/propagating-vgw (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.propagating-vgw/gateway-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-addresses-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-addresses-request/public-ips (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/public-ip-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-addresses-request/allocation-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/allocation-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-addresses-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-addresses-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-addresses-request/filters :portkey.aws.ec2.-2016-11-15.describe-addresses-request/public-ips :portkey.aws.ec2.-2016-11-15.describe-addresses-request/allocation-ids :portkey.aws.ec2.-2016-11-15.describe-addresses-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reset-fpga-image-attribute-name #{:load-permission "loadPermission"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/flow-log-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/flow-log))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/prefix-list-id-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-network-interface-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/instance-network-interface))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-acls-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-acls-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-acls-request/network-acl-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-network-acls-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-network-acls-request/filters :portkey.aws.ec2.-2016-11-15.describe-network-acls-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-network-acls-request/network-acl-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpn-connection-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/vpn-connection))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/on-demand-allocation-strategy #{"lowestPrice" :lowest-price "prioritized" :prioritized})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/reserved-instances-offering-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/fixed-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/float))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/pricing-details (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/pricing-details-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/instance-tenancy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tenancy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/marketplace (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/duration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/usage-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/float))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/product-description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/ri-product-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/offering-class (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/offering-class-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/recurring-charges (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/recurring-charges-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/offering-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/offering-type-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/scope (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/scope))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reserved-instances-offering (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.reserved-instances-offering/currency-code :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/reserved-instances-offering-id :portkey.aws.ec2.-2016-11-15/instance-type :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/fixed-price :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/availability-zone :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/pricing-details :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/instance-tenancy :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/marketplace :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/duration :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/usage-price :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/product-description :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/offering-class :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/recurring-charges :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/offering-type :portkey.aws.ec2.-2016-11-15.reserved-instances-offering/scope]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.load-permission-modifications/add (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/load-permission-list-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.load-permission-modifications/remove (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/load-permission-list-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/load-permission-modifications (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.load-permission-modifications/add :portkey.aws.ec2.-2016-11-15.load-permission-modifications/remove]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-peering-connections-result/vpc-peering-connections (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-peering-connection-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpc-peering-connections-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-vpc-peering-connections-result/vpc-peering-connections]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-endpoint-type #{:interface "Interface" :gateway "Gateway"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.storage/s-3 (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/s-3-storage))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/storage (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.storage/s-3]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/value-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-id-format-request/resource (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-id-format-request/use-long-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-id-format-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.modify-id-format-request/resource :portkey.aws.ec2.-2016-11-15.modify-id-format-request/use-long-ids] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-modification/end-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-modification/target-volume-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/volume-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-modification/original-volume-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/volume-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-modification/start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-modification/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-modification/original-iops (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-modification/progress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-modification/original-size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-modification/modification-state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/volume-modification-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-modification/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-modification/target-iops (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-modification/target-size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/volume-modification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.volume-modification/end-time :portkey.aws.ec2.-2016-11-15.volume-modification/target-volume-type :portkey.aws.ec2.-2016-11-15.volume-modification/original-volume-type :portkey.aws.ec2.-2016-11-15.volume-modification/start-time :portkey.aws.ec2.-2016-11-15.volume-modification/status-message :portkey.aws.ec2.-2016-11-15.volume-modification/original-iops :portkey.aws.ec2.-2016-11-15.volume-modification/progress :portkey.aws.ec2.-2016-11-15.volume-modification/original-size :portkey.aws.ec2.-2016-11-15.volume-modification/modification-state :portkey.aws.ec2.-2016-11-15.volume-modification/volume-id :portkey.aws.ec2.-2016-11-15.volume-modification/target-iops :portkey.aws.ec2.-2016-11-15.volume-modification/target-size]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleet-instances-result/active-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/active-instance-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleet-instances-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleet-instances-result/fleet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-identifier))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-fleet-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-fleet-instances-result/active-instances :portkey.aws.ec2.-2016-11-15.describe-fleet-instances-result/next-token :portkey.aws.ec2.-2016-11-15.describe-fleet-instances-result/fleet-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.peering-connection-options-request/allow-dns-resolution-from-remote-vpc (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.peering-connection-options-request/allow-egress-from-local-classic-link-to-remote-vpc (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.peering-connection-options-request/allow-egress-from-local-vpc-to-remote-classic-link (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/peering-connection-options-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.peering-connection-options-request/allow-dns-resolution-from-remote-vpc :portkey.aws.ec2.-2016-11-15.peering-connection-options-request/allow-egress-from-local-classic-link-to-remote-vpc :portkey.aws.ec2.-2016-11-15.peering-connection-options-request/allow-egress-from-local-vpc-to-remote-classic-link]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/run-scheduled-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/instance-id-set]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/customer-gateway-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/ip-ranges (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-status-event-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/instance-status-event))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/public-ip-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/connection-notification-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/connection-notification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/group-identifier-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/security-group-identifier))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reset-network-interface-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reset-network-interface-attribute-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reset-network-interface-attribute-request/source-dest-check (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reset-network-interface-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.reset-network-interface-attribute-request/network-interface-id] :opt-un [:portkey.aws.ec2.-2016-11-15.reset-network-interface-attribute-request/dry-run :portkey.aws.ec2.-2016-11-15.reset-network-interface-attribute-request/source-dest-check]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.filter/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.filter/values (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/filter (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.filter/name :portkey.aws.ec2.-2016-11-15.filter/values]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reserved-instances-modification-result-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/reserved-instances-modification-result))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-internet-gateways-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-internet-gateways-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-internet-gateways-request/internet-gateway-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-internet-gateways-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-internet-gateways-request/filters :portkey.aws.ec2.-2016-11-15.describe-internet-gateways-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-internet-gateways-request/internet-gateway-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disassociate-iam-instance-profile-request/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/disassociate-iam-instance-profile-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.disassociate-iam-instance-profile-request/association-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-ipv-6-address-request/ipv-6-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-ipv-6-address-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.instance-ipv-6-address-request/ipv-6-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-fpga-image-result/fpga-image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/copy-fpga-image-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.copy-fpga-image-result/fpga-image-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-attribute-request/enable-dns-hostnames (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-attribute-request/enable-dns-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-attribute-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-vpc-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.modify-vpc-attribute-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-vpc-attribute-request/enable-dns-hostnames :portkey.aws.ec2.-2016-11-15.modify-vpc-attribute-request/enable-dns-support]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-peering-connection-vpc-info/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-peering-connection-vpc-info/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-peering-connection-vpc-info/peering-options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-peering-connection-options-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-peering-connection-vpc-info/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-peering-connection-vpc-info/region (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-peering-connection-vpc-info (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.vpc-peering-connection-vpc-info/cidr-block :portkey.aws.ec2.-2016-11-15/ipv-6-cidr-block-set :portkey.aws.ec2.-2016-11-15/cidr-block-set :portkey.aws.ec2.-2016-11-15.vpc-peering-connection-vpc-info/owner-id :portkey.aws.ec2.-2016-11-15.vpc-peering-connection-vpc-info/peering-options :portkey.aws.ec2.-2016-11-15.vpc-peering-connection-vpc-info/vpc-id :portkey.aws.ec2.-2016-11-15.vpc-peering-connection-vpc-info/region]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-customer-gateway-request/customer-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-customer-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-customer-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-customer-gateway-request/customer-gateway-id] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-customer-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-monitoring-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/instance-monitoring))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-peering-connection/accepter-vpc-info (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-peering-connection-vpc-info))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-peering-connection/expiration-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-peering-connection/requester-vpc-info (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-peering-connection-vpc-info))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-peering-connection/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-peering-connection-state-reason))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-peering-connection/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-peering-connection/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-peering-connection (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.vpc-peering-connection/accepter-vpc-info :portkey.aws.ec2.-2016-11-15.vpc-peering-connection/expiration-time :portkey.aws.ec2.-2016-11-15.vpc-peering-connection/requester-vpc-info :portkey.aws.ec2.-2016-11-15.vpc-peering-connection/status :portkey.aws.ec2.-2016-11-15.vpc-peering-connection/tags :portkey.aws.ec2.-2016-11-15.vpc-peering-connection/vpc-peering-connection-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-reserved-instances-listing-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-reserved-instances-listing-request/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-reserved-instances-listing-request/price-schedules (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/price-schedule-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-reserved-instances-listing-request/reserved-instances-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-reserved-instances-listing-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-reserved-instances-listing-request/client-token :portkey.aws.ec2.-2016-11-15.create-reserved-instances-listing-request/instance-count :portkey.aws.ec2.-2016-11-15.create-reserved-instances-listing-request/price-schedules :portkey.aws.ec2.-2016-11-15.create-reserved-instances-listing-request/reserved-instances-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/export-task-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/target-groups (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/target-group :min-count 1 :max-count 5))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/target-reservation-value-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/target-reservation-value))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/image-state #{"failed" :pending "error" "invalid" :invalid "transient" :transient :deregistered :error :available "deregistered" "pending" "available" :failed})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-image-result/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-image-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.create-image-result/image-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-route-table-association-request/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-route-table-association-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-route-table-association-request/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/replace-route-table-association-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.replace-route-table-association-request/association-id :portkey.aws.ec2.-2016-11-15.replace-route-table-association-request/route-table-id] :opt-un [:portkey.aws.ec2.-2016-11-15.replace-route-table-association-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-principal-id-format-result/principals (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/principal-id-format-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-principal-id-format-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-principal-id-format-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-principal-id-format-result/principals :portkey.aws.ec2.-2016-11-15.describe-principal-id-format-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-ipv-6-address/ipv-6-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/network-interface-ipv-6-address (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.network-interface-ipv-6-address/ipv-6-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/host-reservation-id-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-snapshot-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-snapshot-request/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-snapshot-request/tag-specifications (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-snapshot-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-snapshot-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-snapshot-request/volume-id] :opt-un [:portkey.aws.ec2.-2016-11-15.create-snapshot-request/description :portkey.aws.ec2.-2016-11-15.create-snapshot-request/tag-specifications :portkey.aws.ec2.-2016-11-15.create-snapshot-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpn-state #{:deleted "deleting" :pending :deleting "deleted" :available "pending" "available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/account-attribute-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/account-attribute))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.allocate-hosts-request/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.allocate-hosts-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.allocate-hosts-request/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.allocate-hosts-request/quantity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.allocate-hosts-request/tag-specifications (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/allocate-hosts-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.allocate-hosts-request/availability-zone :portkey.aws.ec2.-2016-11-15.allocate-hosts-request/instance-type :portkey.aws.ec2.-2016-11-15.allocate-hosts-request/quantity] :opt-un [:portkey.aws.ec2.-2016-11-15/auto-placement :portkey.aws.ec2.-2016-11-15.allocate-hosts-request/client-token :portkey.aws.ec2.-2016-11-15.allocate-hosts-request/tag-specifications]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/ipv-6-range-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/ipv-6-range))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-classic-link-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/move-status #{:moving-to-vpc "movingToVpc" :restoring-to-classic "restoringToClassic"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.credit-specification/cpu-credits (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/credit-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.credit-specification/cpu-credits]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-image-request/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/block-device-mapping-request-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-image-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-image-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-image-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-image-request/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-image-request/no-reboot (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-image-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-image-request/instance-id :portkey.aws.ec2.-2016-11-15.create-image-request/name] :opt-un [:portkey.aws.ec2.-2016-11-15.create-image-request/block-device-mappings :portkey.aws.ec2.-2016-11-15.create-image-request/description :portkey.aws.ec2.-2016-11-15.create-image-request/dry-run :portkey.aws.ec2.-2016-11-15.create-image-request/no-reboot]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.prefix-list-id/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.prefix-list-id/prefix-list-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/prefix-list-id (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.prefix-list-id/description :portkey.aws.ec2.-2016-11-15.prefix-list-id/prefix-list-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/spot-instance-request-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/security-group-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/pricing-details-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/pricing-detail))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpn-connection-route-request/destination-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpn-connection-route-request/vpn-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-vpn-connection-route-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-vpn-connection-route-request/destination-cidr-block :portkey.aws.ec2.-2016-11-15.create-vpn-connection-route-request/vpn-connection-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase/duration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase/host-id-set (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/response-host-id-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase/host-reservation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase/hourly-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase/instance-family (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase/upfront-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/purchase (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.purchase/currency-code :portkey.aws.ec2.-2016-11-15.purchase/duration :portkey.aws.ec2.-2016-11-15.purchase/host-id-set :portkey.aws.ec2.-2016-11-15.purchase/host-reservation-id :portkey.aws.ec2.-2016-11-15.purchase/hourly-price :portkey.aws.ec2.-2016-11-15.purchase/instance-family :portkey.aws.ec2.-2016-11-15/payment-option :portkey.aws.ec2.-2016-11-15.purchase/upfront-price]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/replace-iam-instance-profile-association-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/iam-instance-profile-association]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/hypervisor-type #{"ovm" "xen" :ovm :xen})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.history-record/timestamp (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/history-record (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15/event-information :portkey.aws.ec2.-2016-11-15/event-type :portkey.aws.ec2.-2016-11-15.history-record/timestamp] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-egress-only-internet-gateway-result/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-egress-only-internet-gateway-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.create-egress-only-internet-gateway-result/client-token :portkey.aws.ec2.-2016-11-15/egress-only-internet-gateway]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-egress-only-internet-gateway-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-egress-only-internet-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-egress-only-internet-gateway-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-egress-only-internet-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-egress-only-internet-gateway-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-11-15.create-egress-only-internet-gateway-request/client-token :portkey.aws.ec2.-2016-11-15.create-egress-only-internet-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-vpn-gateway-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/vpn-gateway]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.register-image-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.register-image-request/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.register-image-request/sriov-net-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.register-image-request/billing-products (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/billing-product-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.register-image-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.register-image-request/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/block-device-mapping-request-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.register-image-request/architecture (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/architecture-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.register-image-request/virtualization-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.register-image-request/image-location (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.register-image-request/root-device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.register-image-request/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.register-image-request/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.register-image-request/ena-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/register-image-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.register-image-request/name] :opt-un [:portkey.aws.ec2.-2016-11-15.register-image-request/dry-run :portkey.aws.ec2.-2016-11-15.register-image-request/kernel-id :portkey.aws.ec2.-2016-11-15.register-image-request/sriov-net-support :portkey.aws.ec2.-2016-11-15.register-image-request/billing-products :portkey.aws.ec2.-2016-11-15.register-image-request/description :portkey.aws.ec2.-2016-11-15.register-image-request/block-device-mappings :portkey.aws.ec2.-2016-11-15.register-image-request/architecture :portkey.aws.ec2.-2016-11-15.register-image-request/virtualization-type :portkey.aws.ec2.-2016-11-15.register-image-request/image-location :portkey.aws.ec2.-2016-11-15.register-image-request/root-device-name :portkey.aws.ec2.-2016-11-15.register-image-request/ramdisk-id :portkey.aws.ec2.-2016-11-15.register-image-request/ena-support]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/connection-notification-type #{"Topic" :topic})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-hosts-request/host-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/request-host-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-hosts-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15/auto-placement :portkey.aws.ec2.-2016-11-15.modify-hosts-request/host-ids] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpn-connection-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/route-table-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/route-table))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-volume-request/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-volume-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-volume-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-volume-request/volume-id] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-volume-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-subnet-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/subnet]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-network-acl-entry-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-network-acl-entry-request/egress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-network-acl-entry-request/network-acl-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-network-acl-entry-request/rule-number (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-network-acl-entry-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-network-acl-entry-request/egress :portkey.aws.ec2.-2016-11-15.delete-network-acl-entry-request/network-acl-id :portkey.aws.ec2.-2016-11-15.delete-network-acl-entry-request/rule-number] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-network-acl-entry-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-conversion-tasks-request/conversion-task-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/conversion-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-conversion-tasks-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-conversion-tasks-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-conversion-tasks-request/conversion-task-ids :portkey.aws.ec2.-2016-11-15.describe-conversion-tasks-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/architecture-values #{"x86_64" :i-386 :x-86-64 "i386"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancelled-spot-instance-request/spot-instance-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancelled-spot-instance-request/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/cancel-spot-instance-request-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cancelled-spot-instance-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.cancelled-spot-instance-request/spot-instance-request-id :portkey.aws.ec2.-2016-11-15.cancelled-spot-instance-request/state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-image-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-image-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-image-request/encrypted (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-image-request/kms-key-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-image-request/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-image-request/source-image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-image-request/source-region (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-image-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/copy-image-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.copy-image-request/name :portkey.aws.ec2.-2016-11-15.copy-image-request/source-image-id :portkey.aws.ec2.-2016-11-15.copy-image-request/source-region] :opt-un [:portkey.aws.ec2.-2016-11-15.copy-image-request/client-token :portkey.aws.ec2.-2016-11-15.copy-image-request/description :portkey.aws.ec2.-2016-11-15.copy-image-request/encrypted :portkey.aws.ec2.-2016-11-15.copy-image-request/kms-key-id :portkey.aws.ec2.-2016-11-15.copy-image-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-conversion-request/conversion-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-conversion-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-conversion-request/reason-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cancel-conversion-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.cancel-conversion-request/conversion-task-id] :opt-un [:portkey.aws.ec2.-2016-11-15.cancel-conversion-request/dry-run :portkey.aws.ec2.-2016-11-15.cancel-conversion-request/reason-message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-interface-permissions-request/network-interface-permission-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/network-interface-permission-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-interface-permissions-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-interface-permissions-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-interface-permissions-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-network-interface-permissions-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-network-interface-permissions-request/network-interface-permission-ids :portkey.aws.ec2.-2016-11-15.describe-network-interface-permissions-request/filters :portkey.aws.ec2.-2016-11-15.describe-network-interface-permissions-request/next-token :portkey.aws.ec2.-2016-11-15.describe-network-interface-permissions-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disassociate-subnet-cidr-block-result/ipv-6-cidr-block-association (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/subnet-ipv-6-cidr-block-association))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disassociate-subnet-cidr-block-result/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/disassociate-subnet-cidr-block-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.disassociate-subnet-cidr-block-result/ipv-6-cidr-block-association :portkey.aws.ec2.-2016-11-15.disassociate-subnet-cidr-block-result/subnet-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-stale-security-groups-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-stale-security-groups-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-stale-security-groups-result/next-token :portkey.aws.ec2.-2016-11-15/stale-security-group-set]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/volume-attachment-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/volume-attachment))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-spot-fleet-request-request/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-spot-fleet-request-request/target-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-spot-fleet-request-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.modify-spot-fleet-request-request/spot-fleet-request-id] :opt-un [:portkey.aws.ec2.-2016-11-15/excess-capacity-termination-policy :portkey.aws.ec2.-2016-11-15.modify-spot-fleet-request-request/target-capacity]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.blob-attribute-value/value (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/blob))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/blob-attribute-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.blob-attribute-value/value]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/export-environment #{:citrix "microsoft" "citrix" :vmware :microsoft "vmware"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-flow-logs-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-flow-logs-request/filter (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-flow-logs-request/flow-log-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-flow-logs-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-flow-logs-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-flow-logs-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-flow-logs-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-flow-logs-request/filter :portkey.aws.ec2.-2016-11-15.describe-flow-logs-request/flow-log-ids :portkey.aws.ec2.-2016-11-15.describe-flow-logs-request/max-results :portkey.aws.ec2.-2016-11-15.describe-flow-logs-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-elastic-gpus-request/elastic-gpu-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/elastic-gpu-id-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-elastic-gpus-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-elastic-gpus-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-elastic-gpus-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-elastic-gpus-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-elastic-gpus-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-elastic-gpus-request/elastic-gpu-ids :portkey.aws.ec2.-2016-11-15.describe-elastic-gpus-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-elastic-gpus-request/filters :portkey.aws.ec2.-2016-11-15.describe-elastic-gpus-request/max-results :portkey.aws.ec2.-2016-11-15.describe-elastic-gpus-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/load-permission-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/load-permission))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-security-group-request/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-security-group-request/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-security-group-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-security-group-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-security-group-request/group-id :portkey.aws.ec2.-2016-11-15.delete-security-group-request/group-name :portkey.aws.ec2.-2016-11-15.delete-security-group-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-export-details/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-export-details/target-environment (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/export-environment))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-export-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.instance-export-details/instance-id :portkey.aws.ec2.-2016-11-15.instance-export-details/target-environment]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-configurations-result/service-configurations (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/service-configuration-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-configurations-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-service-configurations-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-configurations-result/service-configurations :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-configurations-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-reserved-instances-exchange-quote-result/reserved-instance-value-set (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reserved-instance-reservation-value-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-reserved-instances-exchange-quote-result/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-reserved-instances-exchange-quote-result/target-configuration-value-set (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/target-reservation-value-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-reserved-instances-exchange-quote-result/validation-failure-reason (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-reserved-instances-exchange-quote-result/output-reserved-instances-will-expire-at (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-reserved-instances-exchange-quote-result/payment-due (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-reserved-instances-exchange-quote-result/is-valid-exchange (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-reserved-instances-exchange-quote-result/reserved-instance-value-rollup (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reservation-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-reserved-instances-exchange-quote-result/target-configuration-value-rollup (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reservation-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/get-reserved-instances-exchange-quote-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.get-reserved-instances-exchange-quote-result/reserved-instance-value-set :portkey.aws.ec2.-2016-11-15.get-reserved-instances-exchange-quote-result/currency-code :portkey.aws.ec2.-2016-11-15.get-reserved-instances-exchange-quote-result/target-configuration-value-set :portkey.aws.ec2.-2016-11-15.get-reserved-instances-exchange-quote-result/validation-failure-reason :portkey.aws.ec2.-2016-11-15.get-reserved-instances-exchange-quote-result/output-reserved-instances-will-expire-at :portkey.aws.ec2.-2016-11-15.get-reserved-instances-exchange-quote-result/payment-due :portkey.aws.ec2.-2016-11-15.get-reserved-instances-exchange-quote-result/is-valid-exchange :portkey.aws.ec2.-2016-11-15.get-reserved-instances-exchange-quote-result/reserved-instance-value-rollup :portkey.aws.ec2.-2016-11-15.get-reserved-instances-exchange-quote-result/target-configuration-value-rollup]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/service-type-detail (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/service-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-launch-template-config-request/launch-template-specification (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-launch-template-specification-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-launch-template-config-request/overrides (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-launch-template-overrides-list-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fleet-launch-template-config-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.fleet-launch-template-config-request/launch-template-specification :portkey.aws.ec2.-2016-11-15.fleet-launch-template-config-request/overrides]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/volume-attachment-state #{"attached" "detaching" :detached "detached" :busy "busy" "attaching" :attaching :attached :detaching})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/volume-modification-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/volume-modification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.confirm-product-instance-result/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.confirm-product-instance-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/confirm-product-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.confirm-product-instance-result/owner-id :portkey.aws.ec2.-2016-11-15.confirm-product-instance-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-price-history-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-price-history-request/instance-types (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-type-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-price-history-request/end-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-price-history-request/product-descriptions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/product-description-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-price-history-request/start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-price-history-request/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-price-history-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-price-history-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-price-history-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-spot-price-history-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-spot-price-history-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-spot-price-history-request/instance-types :portkey.aws.ec2.-2016-11-15.describe-spot-price-history-request/end-time :portkey.aws.ec2.-2016-11-15.describe-spot-price-history-request/product-descriptions :portkey.aws.ec2.-2016-11-15.describe-spot-price-history-request/start-time :portkey.aws.ec2.-2016-11-15.describe-spot-price-history-request/availability-zone :portkey.aws.ec2.-2016-11-15.describe-spot-price-history-request/next-token :portkey.aws.ec2.-2016-11-15.describe-spot-price-history-request/filters :portkey.aws.ec2.-2016-11-15.describe-spot-price-history-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.internet-gateway-attachment/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attachment-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.internet-gateway-attachment/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/internet-gateway-attachment (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.internet-gateway-attachment/state :portkey.aws.ec2.-2016-11-15.internet-gateway-attachment/vpc-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-ebs-block-device/encrypted (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-ebs-block-device/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-ebs-block-device/iops (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-ebs-block-device/kms-key-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-ebs-block-device/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-ebs-block-device/volume-size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-ebs-block-device (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.launch-template-ebs-block-device/encrypted :portkey.aws.ec2.-2016-11-15.launch-template-ebs-block-device/delete-on-termination :portkey.aws.ec2.-2016-11-15.launch-template-ebs-block-device/iops :portkey.aws.ec2.-2016-11-15.launch-template-ebs-block-device/kms-key-id :portkey.aws.ec2.-2016-11-15.launch-template-ebs-block-device/snapshot-id :portkey.aws.ec2.-2016-11-15.launch-template-ebs-block-device/volume-size :portkey.aws.ec2.-2016-11-15/volume-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.bundle-instance-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.bundle-instance-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/bundle-instance-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.bundle-instance-request/instance-id :portkey.aws.ec2.-2016-11-15/storage] :opt-un [:portkey.aws.ec2.-2016-11-15.bundle-instance-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fleet-identifier (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-result/reserved-instances-offerings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reserved-instances-offering-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-reserved-instances-offerings-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-result/reserved-instances-offerings :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-private-ip-address-config/primary (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-private-ip-address-config/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/scheduled-instances-private-ip-address-config (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.scheduled-instances-private-ip-address-config/primary :portkey.aws.ec2.-2016-11-15.scheduled-instances-private-ip-address-config/private-ip-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/product-code-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/association-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-monitoring/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-monitoring (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.instance-monitoring/instance-id :portkey.aws.ec2.-2016-11-15/monitoring]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/spot-price-history-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/spot-price))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-launch-template-data-result/launch-template-data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/response-launch-template-data))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/get-launch-template-data-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.get-launch-template-data-result/launch-template-data]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-vpc-peering-connection-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-vpc-peering-connection-request/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-vpc-peering-connection-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-vpc-peering-connection-request/vpc-peering-connection-id] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-vpc-peering-connection-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-connection-options/static-routes-only (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpn-connection-options (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.vpn-connection-options/static-routes-only]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-reserved-instances-result/reserved-instances-modification-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-reserved-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-reserved-instances-result/reserved-instances-modification-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-acl-entry/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-acl-entry/egress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-acl-entry/ipv-6-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-acl-entry/protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-acl-entry/rule-number (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/network-acl-entry (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.network-acl-entry/cidr-block :portkey.aws.ec2.-2016-11-15.network-acl-entry/egress :portkey.aws.ec2.-2016-11-15/icmp-type-code :portkey.aws.ec2.-2016-11-15.network-acl-entry/ipv-6-cidr-block :portkey.aws.ec2.-2016-11-15/port-range :portkey.aws.ec2.-2016-11-15.network-acl-entry/protocol :portkey.aws.ec2.-2016-11-15/rule-action :portkey.aws.ec2.-2016-11-15.network-acl-entry/rule-number]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-route-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-route-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-route-request/nat-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-route-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-route-request/destination-ipv-6-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-route-request/destination-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-route-request/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-route-request/gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-route-request/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-route-request/egress-only-internet-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-route-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-route-request/route-table-id] :opt-un [:portkey.aws.ec2.-2016-11-15.create-route-request/dry-run :portkey.aws.ec2.-2016-11-15.create-route-request/instance-id :portkey.aws.ec2.-2016-11-15.create-route-request/nat-gateway-id :portkey.aws.ec2.-2016-11-15.create-route-request/network-interface-id :portkey.aws.ec2.-2016-11-15.create-route-request/destination-ipv-6-cidr-block :portkey.aws.ec2.-2016-11-15.create-route-request/destination-cidr-block :portkey.aws.ec2.-2016-11-15.create-route-request/vpc-peering-connection-id :portkey.aws.ec2.-2016-11-15.create-route-request/gateway-id :portkey.aws.ec2.-2016-11-15.create-route-request/egress-only-internet-gateway-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.provisioned-bandwidth/provision-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.provisioned-bandwidth/provisioned (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.provisioned-bandwidth/request-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.provisioned-bandwidth/requested (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.provisioned-bandwidth/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/provisioned-bandwidth (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.provisioned-bandwidth/provision-time :portkey.aws.ec2.-2016-11-15.provisioned-bandwidth/provisioned :portkey.aws.ec2.-2016-11-15.provisioned-bandwidth/request-time :portkey.aws.ec2.-2016-11-15.provisioned-bandwidth/requested :portkey.aws.ec2.-2016-11-15.provisioned-bandwidth/status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.pci-id/device-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.pci-id/vendor-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.pci-id/subsystem-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.pci-id/subsystem-vendor-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/pci-id (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.pci-id/device-id :portkey.aws.ec2.-2016-11-15.pci-id/vendor-id :portkey.aws.ec2.-2016-11-15.pci-id/subsystem-id :portkey.aws.ec2.-2016-11-15.pci-id/subsystem-vendor-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vgw-telemetry-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/vgw-telemetry))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/volume-state #{:deleted "deleting" :creating "error" "in-use" :deleting :inuse "creating" "deleted" :error :available "available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-placement/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-placement/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/spot-placement (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.spot-placement/availability-zone :portkey.aws.ec2.-2016-11-15.spot-placement/group-name :portkey.aws.ec2.-2016-11-15/tenancy]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-classic-link-result/vpcs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-classic-link-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpc-classic-link-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-vpc-classic-link-result/vpcs]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.security-group/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.security-group/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.security-group/ip-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/ip-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.security-group/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.security-group/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.security-group/ip-permissions-egress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/ip-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.security-group/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.security-group/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/security-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.security-group/description :portkey.aws.ec2.-2016-11-15.security-group/group-name :portkey.aws.ec2.-2016-11-15.security-group/ip-permissions :portkey.aws.ec2.-2016-11-15.security-group/owner-id :portkey.aws.ec2.-2016-11-15.security-group/group-id :portkey.aws.ec2.-2016-11-15.security-group/ip-permissions-egress :portkey.aws.ec2.-2016-11-15.security-group/tags :portkey.aws.ec2.-2016-11-15.security-group/vpc-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/recurring-charges-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/recurring-charge))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/snapshot-detail-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/snapshot-detail))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-vpc-endpoint-connection-notifications-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-vpc-endpoint-connection-notifications-request/connection-notification-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-vpc-endpoint-connection-notifications-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-vpc-endpoint-connection-notifications-request/connection-notification-ids] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-vpc-endpoint-connection-notifications-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/occurrence-day-request-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/integer))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.id-format/deadline (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.id-format/resource (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.id-format/use-long-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/id-format (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.id-format/deadline :portkey.aws.ec2.-2016-11-15.id-format/resource :portkey.aws.ec2.-2016-11-15.id-format/use-long-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-specification/launch-template-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-specification/launch-template-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-specification/version (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.launch-template-specification/launch-template-id :portkey.aws.ec2.-2016-11-15.launch-template-specification/launch-template-name :portkey.aws.ec2.-2016-11-15.launch-template-specification/version]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-dhcp-options-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/dhcp-options]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume/encrypted (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume/attachments (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/volume-attachment-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume/kms-key-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume/size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume/iops (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume/create-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/volume-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/volume (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.volume/encrypted :portkey.aws.ec2.-2016-11-15.volume/tags :portkey.aws.ec2.-2016-11-15.volume/attachments :portkey.aws.ec2.-2016-11-15.volume/availability-zone :portkey.aws.ec2.-2016-11-15.volume/kms-key-id :portkey.aws.ec2.-2016-11-15.volume/size :portkey.aws.ec2.-2016-11-15.volume/iops :portkey.aws.ec2.-2016-11-15/volume-type :portkey.aws.ec2.-2016-11-15.volume/volume-id :portkey.aws.ec2.-2016-11-15.volume/create-time :portkey.aws.ec2.-2016-11-15.volume/state :portkey.aws.ec2.-2016-11-15.volume/snapshot-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/spot-instance-type #{:persistent :onetime "persistent" "one-time"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.start-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.start-instances-request/additional-info (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.start-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/start-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.start-instances-request/instance-ids] :opt-un [:portkey.aws.ec2.-2016-11-15.start-instances-request/additional-info :portkey.aws.ec2.-2016-11-15.start-instances-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.ebs-block-device/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.ebs-block-device/iops (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.ebs-block-device/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.ebs-block-device/volume-size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.ebs-block-device/encrypted (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.ebs-block-device/kms-key-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/ebs-block-device (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.ebs-block-device/delete-on-termination :portkey.aws.ec2.-2016-11-15.ebs-block-device/iops :portkey.aws.ec2.-2016-11-15.ebs-block-device/snapshot-id :portkey.aws.ec2.-2016-11-15.ebs-block-device/volume-size :portkey.aws.ec2.-2016-11-15/volume-type :portkey.aws.ec2.-2016-11-15.ebs-block-device/encrypted :portkey.aws.ec2.-2016-11-15.ebs-block-device/kms-key-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.new-dhcp-configuration/key (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.new-dhcp-configuration/values (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/new-dhcp-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.new-dhcp-configuration/key :portkey.aws.ec2.-2016-11-15.new-dhcp-configuration/values]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-network-interface-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-network-interface-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-network-interface-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-network-interface-request/network-interface-id] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-network-interface-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-connection-notification-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-connection-notification-request/service-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-connection-notification-request/vpc-endpoint-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-connection-notification-request/connection-notification-arn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-connection-notification-request/connection-events (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-connection-notification-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-vpc-endpoint-connection-notification-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-connection-notification-request/connection-notification-arn :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-connection-notification-request/connection-events] :opt-un [:portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-connection-notification-request/dry-run :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-connection-notification-request/service-id :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-connection-notification-request/vpc-endpoint-id :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-connection-notification-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/spot-fleet-tag-specification-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/spot-fleet-tag-specification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.assign-ipv-6-addresses-result/assigned-ipv-6-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/ipv-6-address-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.assign-ipv-6-addresses-result/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/assign-ipv-6-addresses-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.assign-ipv-6-addresses-result/assigned-ipv-6-addresses :portkey.aws.ec2.-2016-11-15.assign-ipv-6-addresses-result/network-interface-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.placement/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.placement/affinity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.placement/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.placement/host-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.placement/spread-domain (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/placement (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.placement/availability-zone :portkey.aws.ec2.-2016-11-15.placement/affinity :portkey.aws.ec2.-2016-11-15.placement/group-name :portkey.aws.ec2.-2016-11-15.placement/host-id :portkey.aws.ec2.-2016-11-15/tenancy :portkey.aws.ec2.-2016-11-15.placement/spread-domain]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/network-interface-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/request-host-id-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-configuration/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-configuration/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-configuration/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-configuration/scope (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/scope))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reserved-instances-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.reserved-instances-configuration/availability-zone :portkey.aws.ec2.-2016-11-15.reserved-instances-configuration/instance-count :portkey.aws.ec2.-2016-11-15/instance-type :portkey.aws.ec2.-2016-11-15.reserved-instances-configuration/platform :portkey.aws.ec2.-2016-11-15.reserved-instances-configuration/scope]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/interface-permission-type #{:eipassociate "EIP-ASSOCIATE" :instanceattach "INSTANCE-ATTACH"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volume-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/volume-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volume-attribute-request/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volume-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-volume-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.describe-volume-attribute-request/attribute :portkey.aws.ec2.-2016-11-15.describe-volume-attribute-request/volume-id] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-volume-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.user-bucket-details/s-3-bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.user-bucket-details/s-3-key (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/user-bucket-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.user-bucket-details/s-3-bucket :portkey.aws.ec2.-2016-11-15.user-bucket-details/s-3-key]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/occurrence-day-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/integer))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/snapshot-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/snapshot))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-volume-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/volume-modification]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-lifecycle-type #{"spot" "scheduled" :scheduled :spot})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-launch-template-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-launch-template-request/launch-template-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-launch-template-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-launch-template-request/dry-run :portkey.aws.ec2.-2016-11-15.delete-launch-template-request/launch-template-id :portkey.aws.ec2.-2016-11-15/launch-template-name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.unmonitor-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.unmonitor-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/unmonitor-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.unmonitor-instances-request/instance-ids] :opt-un [:portkey.aws.ec2.-2016-11-15.unmonitor-instances-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/availability-zone-state #{:unavailable "impaired" :information :impaired :available "information" "unavailable" "available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volumes-result/volumes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/volume-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volumes-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-volumes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-volumes-result/volumes :portkey.aws.ec2.-2016-11-15.describe-volumes-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-snapshot-request/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-snapshot-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-snapshot-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-snapshot-request/snapshot-id] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-snapshot-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-conversion-tasks-result/conversion-tasks (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-conversion-task-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-conversion-tasks-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-conversion-tasks-result/conversion-tasks]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.subnet/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.subnet/default-for-az (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.subnet/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.subnet/available-ip-address-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.subnet/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.subnet/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.subnet/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.subnet/assign-ipv-6-address-on-creation (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.subnet/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/subnet-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.subnet/map-public-ip-on-launch (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.subnet/ipv-6-cidr-block-association-set (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/subnet-ipv-6-cidr-block-association-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/subnet (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.subnet/subnet-id :portkey.aws.ec2.-2016-11-15.subnet/default-for-az :portkey.aws.ec2.-2016-11-15.subnet/tags :portkey.aws.ec2.-2016-11-15.subnet/available-ip-address-count :portkey.aws.ec2.-2016-11-15.subnet/availability-zone :portkey.aws.ec2.-2016-11-15.subnet/cidr-block :portkey.aws.ec2.-2016-11-15.subnet/vpc-id :portkey.aws.ec2.-2016-11-15.subnet/assign-ipv-6-address-on-creation :portkey.aws.ec2.-2016-11-15.subnet/state :portkey.aws.ec2.-2016-11-15.subnet/map-public-ip-on-launch :portkey.aws.ec2.-2016-11-15.subnet/ipv-6-cidr-block-association-set]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-listings-result/reserved-instances-listings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reserved-instances-listing-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-reserved-instances-listings-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-reserved-instances-listings-result/reserved-instances-listings]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification-request/associate-public-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification-request/ipv-6-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-ipv-6-address-list-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification-request/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification-request/device-index (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification-request/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/security-group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification-request/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification-request/private-ip-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/private-ip-address-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification-request/secondary-private-ip-address-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification-request/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification-request/ipv-6-address-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-instance-network-interface-specification-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification-request/associate-public-ip-address :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification-request/ipv-6-addresses :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification-request/subnet-id :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification-request/network-interface-id :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification-request/device-index :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification-request/description :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification-request/groups :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification-request/delete-on-termination :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification-request/private-ip-addresses :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification-request/secondary-private-ip-address-count :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification-request/private-ip-address :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification-request/ipv-6-address-count]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-instances-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-instances-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-instances-request/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-spot-fleet-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.describe-spot-fleet-instances-request/spot-fleet-request-id] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-spot-fleet-instances-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-instances-request/max-results :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-instances-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-snapshot-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-snapshot-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-snapshot-request/disk-container (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/snapshot-disk-container))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-snapshot-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-snapshot-request/role-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/import-snapshot-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/client-data :portkey.aws.ec2.-2016-11-15.import-snapshot-request/client-token :portkey.aws.ec2.-2016-11-15.import-snapshot-request/description :portkey.aws.ec2.-2016-11-15.import-snapshot-request/disk-container :portkey.aws.ec2.-2016-11-15.import-snapshot-request/dry-run :portkey.aws.ec2.-2016-11-15.import-snapshot-request/role-name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/dhcp-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/dhcp-configuration))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-reserved-instances-listing-result/reserved-instances-listings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reserved-instances-listing-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-reserved-instances-listing-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.create-reserved-instances-listing-result/reserved-instances-listings]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-datafeed-subscription/bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-datafeed-subscription/fault (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-instance-state-fault))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-datafeed-subscription/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-datafeed-subscription/prefix (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-datafeed-subscription/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/datafeed-subscription-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/spot-datafeed-subscription (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.spot-datafeed-subscription/bucket :portkey.aws.ec2.-2016-11-15.spot-datafeed-subscription/fault :portkey.aws.ec2.-2016-11-15.spot-datafeed-subscription/owner-id :portkey.aws.ec2.-2016-11-15.spot-datafeed-subscription/prefix :portkey.aws.ec2.-2016-11-15.spot-datafeed-subscription/state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-import-image-tasks-result/import-image-tasks (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/import-image-task-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-import-image-tasks-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-import-image-tasks-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-import-image-tasks-result/import-image-tasks :portkey.aws.ec2.-2016-11-15.describe-import-image-tasks-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-permissions-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-permissions-request/service-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-permissions-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-permissions-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-permissions-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-service-permissions-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-permissions-request/service-id] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-permissions-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-permissions-request/filters :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-permissions-request/max-results :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-permissions-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fleet-activity-status #{:pendingtermination :pendingfulfillment "error" "pending-termination" :fulfilled :error "fulfilled" "pending-fulfillment"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instance-status-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instance-status-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instance-status-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instance-status-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instance-status-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instance-status-request/include-all-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-instance-status-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-instance-status-request/filters :portkey.aws.ec2.-2016-11-15.describe-instance-status-request/instance-ids :portkey.aws.ec2.-2016-11-15.describe-instance-status-request/max-results :portkey.aws.ec2.-2016-11-15.describe-instance-status-request/next-token :portkey.aws.ec2.-2016-11-15.describe-instance-status-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-instance-status-request/include-all-instances]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-count/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-count/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/listing-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-count (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.instance-count/instance-count :portkey.aws.ec2.-2016-11-15.instance-count/state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disable-vpc-classic-link-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disable-vpc-classic-link-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/disable-vpc-classic-link-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.disable-vpc-classic-link-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-11-15.disable-vpc-classic-link-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/host-instance-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/host-instance))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.response-launch-template-data/tag-specifications (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-tag-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.response-launch-template-data/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.response-launch-template-data/security-group-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.response-launch-template-data/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.response-launch-template-data/placement (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-placement))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.response-launch-template-data/security-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.response-launch-template-data/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.response-launch-template-data/instance-market-options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-instance-market-options))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.response-launch-template-data/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.response-launch-template-data/elastic-gpu-specifications (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/elastic-gpu-specification-response-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.response-launch-template-data/ram-disk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.response-launch-template-data/disable-api-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.response-launch-template-data/monitoring (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-templates-monitoring))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.response-launch-template-data/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-block-device-mapping-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.response-launch-template-data/cpu-options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-cpu-options))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.response-launch-template-data/user-data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.response-launch-template-data/instance-initiated-shutdown-behavior (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/shutdown-behavior))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.response-launch-template-data/iam-instance-profile (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-iam-instance-profile-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.response-launch-template-data/network-interfaces (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-instance-network-interface-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/response-launch-template-data (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.response-launch-template-data/tag-specifications :portkey.aws.ec2.-2016-11-15.response-launch-template-data/kernel-id :portkey.aws.ec2.-2016-11-15/credit-specification :portkey.aws.ec2.-2016-11-15.response-launch-template-data/security-group-ids :portkey.aws.ec2.-2016-11-15.response-launch-template-data/image-id :portkey.aws.ec2.-2016-11-15.response-launch-template-data/placement :portkey.aws.ec2.-2016-11-15.response-launch-template-data/security-groups :portkey.aws.ec2.-2016-11-15.response-launch-template-data/ebs-optimized :portkey.aws.ec2.-2016-11-15.response-launch-template-data/instance-market-options :portkey.aws.ec2.-2016-11-15/instance-type :portkey.aws.ec2.-2016-11-15.response-launch-template-data/key-name :portkey.aws.ec2.-2016-11-15.response-launch-template-data/elastic-gpu-specifications :portkey.aws.ec2.-2016-11-15.response-launch-template-data/ram-disk-id :portkey.aws.ec2.-2016-11-15.response-launch-template-data/disable-api-termination :portkey.aws.ec2.-2016-11-15.response-launch-template-data/monitoring :portkey.aws.ec2.-2016-11-15.response-launch-template-data/block-device-mappings :portkey.aws.ec2.-2016-11-15.response-launch-template-data/cpu-options :portkey.aws.ec2.-2016-11-15.response-launch-template-data/user-data :portkey.aws.ec2.-2016-11-15.response-launch-template-data/instance-initiated-shutdown-behavior :portkey.aws.ec2.-2016-11-15.response-launch-template-data/iam-instance-profile :portkey.aws.ec2.-2016-11-15.response-launch-template-data/network-interfaces]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-instance-volume-detail-item/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-instance-volume-detail-item/bytes-converted (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-instance-volume-detail-item/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-instance-volume-detail-item/image (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/disk-image-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-instance-volume-detail-item/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-instance-volume-detail-item/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-instance-volume-detail-item/volume (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/disk-image-volume-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/import-instance-volume-detail-item (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.import-instance-volume-detail-item/availability-zone :portkey.aws.ec2.-2016-11-15.import-instance-volume-detail-item/bytes-converted :portkey.aws.ec2.-2016-11-15.import-instance-volume-detail-item/image :portkey.aws.ec2.-2016-11-15.import-instance-volume-detail-item/status :portkey.aws.ec2.-2016-11-15.import-instance-volume-detail-item/volume] :opt-un [:portkey.aws.ec2.-2016-11-15.import-instance-volume-detail-item/description :portkey.aws.ec2.-2016-11-15.import-instance-volume-detail-item/status-message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-launch-template-specification/launch-template-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-launch-template-specification/version (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fleet-launch-template-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.fleet-launch-template-specification/launch-template-id :portkey.aws.ec2.-2016-11-15/launch-template-name :portkey.aws.ec2.-2016-11-15.fleet-launch-template-specification/version]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-import-image-tasks-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-import-image-tasks-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-import-image-tasks-request/import-task-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/import-task-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-import-image-tasks-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-import-image-tasks-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-import-image-tasks-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-import-image-tasks-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-import-image-tasks-request/filters :portkey.aws.ec2.-2016-11-15.describe-import-image-tasks-request/import-task-ids :portkey.aws.ec2.-2016-11-15.describe-import-image-tasks-request/max-results :portkey.aws.ec2.-2016-11-15.describe-import-image-tasks-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-fleet-success-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/delete-fleet-success-item))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-snapshot-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-snapshot-request/destination-region (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-snapshot-request/encrypted (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-snapshot-request/kms-key-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-snapshot-request/presigned-url (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-snapshot-request/source-region (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-snapshot-request/source-snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-snapshot-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/copy-snapshot-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.copy-snapshot-request/source-region :portkey.aws.ec2.-2016-11-15.copy-snapshot-request/source-snapshot-id] :opt-un [:portkey.aws.ec2.-2016-11-15.copy-snapshot-request/description :portkey.aws.ec2.-2016-11-15.copy-snapshot-request/destination-region :portkey.aws.ec2.-2016-11-15.copy-snapshot-request/encrypted :portkey.aws.ec2.-2016-11-15.copy-snapshot-request/kms-key-id :portkey.aws.ec2.-2016-11-15.copy-snapshot-request/presigned-url :portkey.aws.ec2.-2016-11-15.copy-snapshot-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instance-credit-specifications-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instance-credit-specifications-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instance-credit-specifications-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instance-credit-specifications-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instance-credit-specifications-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-instance-credit-specifications-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-instance-credit-specifications-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-instance-credit-specifications-request/filters :portkey.aws.ec2.-2016-11-15.describe-instance-credit-specifications-request/instance-ids :portkey.aws.ec2.-2016-11-15.describe-instance-credit-specifications-request/max-results :portkey.aws.ec2.-2016-11-15.describe-instance-credit-specifications-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-connection-options-specification/static-routes-only (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-connection-options-specification/tunnel-options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tunnel-options-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpn-connection-options-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.vpn-connection-options-specification/static-routes-only :portkey.aws.ec2.-2016-11-15.vpn-connection-options-specification/tunnel-options]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/tenancy #{"host" :default :host "dedicated" :dedicated "default"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reserved-instances-offering-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-internet-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-internet-gateway-request/internet-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-internet-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-internet-gateway-request/internet-gateway-id] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-internet-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/scheduled-instances-security-group-id-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleets-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleets-result/fleets (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-fleets-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-fleets-result/next-token :portkey.aws.ec2.-2016-11-15.describe-fleets-result/fleets]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.attach-volume-request/device (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.attach-volume-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.attach-volume-request/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.attach-volume-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/attach-volume-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.attach-volume-request/device :portkey.aws.ec2.-2016-11-15.attach-volume-request/instance-id :portkey.aws.ec2.-2016-11-15.attach-volume-request/volume-id] :opt-un [:portkey.aws.ec2.-2016-11-15.attach-volume-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/affinity #{"host" :default :host "default"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface-attachment/attach-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface-attachment/attachment-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface-attachment/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface-attachment/device-index (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface-attachment/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attachment-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-network-interface-attachment (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.instance-network-interface-attachment/attach-time :portkey.aws.ec2.-2016-11-15.instance-network-interface-attachment/attachment-id :portkey.aws.ec2.-2016-11-15.instance-network-interface-attachment/delete-on-termination :portkey.aws.ec2.-2016-11-15.instance-network-interface-attachment/device-index :portkey.aws.ec2.-2016-11-15.instance-network-interface-attachment/status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instance-status-result/instance-statuses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-status-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instance-status-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-instance-status-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-instance-status-result/instance-statuses :portkey.aws.ec2.-2016-11-15.describe-instance-status-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-identity-id-format-request/principal-arn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-identity-id-format-request/resource (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-identity-id-format-request/use-long-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-identity-id-format-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.modify-identity-id-format-request/principal-arn :portkey.aws.ec2.-2016-11-15.modify-identity-id-format-request/resource :portkey.aws.ec2.-2016-11-15.modify-identity-id-format-request/use-long-ids] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot-detail/disk-image-size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot-detail/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot-detail/format (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot-detail/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot-detail/progress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot-detail/url (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot-detail/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot-detail/device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot-detail/user-bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/user-bucket-details))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot-detail/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/snapshot-detail (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.snapshot-detail/disk-image-size :portkey.aws.ec2.-2016-11-15.snapshot-detail/status-message :portkey.aws.ec2.-2016-11-15.snapshot-detail/format :portkey.aws.ec2.-2016-11-15.snapshot-detail/status :portkey.aws.ec2.-2016-11-15.snapshot-detail/progress :portkey.aws.ec2.-2016-11-15.snapshot-detail/url :portkey.aws.ec2.-2016-11-15.snapshot-detail/description :portkey.aws.ec2.-2016-11-15.snapshot-detail/device-name :portkey.aws.ec2.-2016-11-15.snapshot-detail/user-bucket :portkey.aws.ec2.-2016-11-15.snapshot-detail/snapshot-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-launch-template-versions-response-success-item/launch-template-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-launch-template-versions-response-success-item/launch-template-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-launch-template-versions-response-success-item/version-number (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-launch-template-versions-response-success-item (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-launch-template-versions-response-success-item/launch-template-id :portkey.aws.ec2.-2016-11-15.delete-launch-template-versions-response-success-item/launch-template-name :portkey.aws.ec2.-2016-11-15.delete-launch-template-versions-response-success-item/version-number]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-export-task-request/export-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cancel-export-task-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.cancel-export-task-request/export-task-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fpga-image/fpga-image-global-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fpga-image/shell-version (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fpga-image/update-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fpga-image/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fpga-image/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fpga-image/owner-alias (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fpga-image/public (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fpga-image/fpga-image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fpga-image/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fpga-image/create-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fpga-image/product-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/product-code-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fpga-image/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fpga-image-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fpga-image/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fpga-image (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.fpga-image/fpga-image-global-id :portkey.aws.ec2.-2016-11-15.fpga-image/shell-version :portkey.aws.ec2.-2016-11-15/pci-id :portkey.aws.ec2.-2016-11-15.fpga-image/update-time :portkey.aws.ec2.-2016-11-15.fpga-image/owner-id :portkey.aws.ec2.-2016-11-15.fpga-image/tags :portkey.aws.ec2.-2016-11-15.fpga-image/owner-alias :portkey.aws.ec2.-2016-11-15.fpga-image/public :portkey.aws.ec2.-2016-11-15.fpga-image/fpga-image-id :portkey.aws.ec2.-2016-11-15.fpga-image/description :portkey.aws.ec2.-2016-11-15.fpga-image/create-time :portkey.aws.ec2.-2016-11-15.fpga-image/product-codes :portkey.aws.ec2.-2016-11-15.fpga-image/state :portkey.aws.ec2.-2016-11-15.fpga-image/name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-instance-state-fault/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-instance-state-fault/message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/spot-instance-state-fault (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.spot-instance-state-fault/code :portkey.aws.ec2.-2016-11-15.spot-instance-state-fault/message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-security-group-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-security-group-request/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-security-group-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-security-group-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-security-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-security-group-request/description :portkey.aws.ec2.-2016-11-15.create-security-group-request/group-name] :opt-un [:portkey.aws.ec2.-2016-11-15.create-security-group-request/vpc-id :portkey.aws.ec2.-2016-11-15.create-security-group-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/dhcp-configuration-value-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/attribute-value))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface-association/ip-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface-association/public-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface-association/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-network-interface-association (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.instance-network-interface-association/ip-owner-id :portkey.aws.ec2.-2016-11-15.instance-network-interface-association/public-dns-name :portkey.aws.ec2.-2016-11-15.instance-network-interface-association/public-ip]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-market-options/max-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-market-options/block-duration-minutes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-market-options/valid-until (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/spot-market-options (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.spot-market-options/max-price :portkey.aws.ec2.-2016-11-15/spot-instance-type :portkey.aws.ec2.-2016-11-15.spot-market-options/block-duration-minutes :portkey.aws.ec2.-2016-11-15.spot-market-options/valid-until :portkey.aws.ec2.-2016-11-15/instance-interruption-behavior]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fleet-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/fleet-data))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/bundle-task-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/bundle-task))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/group-name-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-placement/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-placement/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/scheduled-instances-placement (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.scheduled-instances-placement/availability-zone :portkey.aws.ec2.-2016-11-15.scheduled-instances-placement/group-name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/key-name-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-network-interface-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/network-interface]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-block-device-mapping/device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-block-device-mapping/ebs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/scheduled-instances-ebs))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-block-device-mapping/no-device (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-block-device-mapping/virtual-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/scheduled-instances-block-device-mapping (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.scheduled-instances-block-device-mapping/device-name :portkey.aws.ec2.-2016-11-15.scheduled-instances-block-device-mapping/ebs :portkey.aws.ec2.-2016-11-15.scheduled-instances-block-device-mapping/no-device :portkey.aws.ec2.-2016-11-15.scheduled-instances-block-device-mapping/virtual-name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.revoke-security-group-ingress-request/source-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.revoke-security-group-ingress-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.revoke-security-group-ingress-request/to-port (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.revoke-security-group-ingress-request/source-security-group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.revoke-security-group-ingress-request/ip-protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.revoke-security-group-ingress-request/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.revoke-security-group-ingress-request/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.revoke-security-group-ingress-request/from-port (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.revoke-security-group-ingress-request/ip-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/ip-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.revoke-security-group-ingress-request/cidr-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/revoke-security-group-ingress-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.revoke-security-group-ingress-request/source-security-group-owner-id :portkey.aws.ec2.-2016-11-15.revoke-security-group-ingress-request/dry-run :portkey.aws.ec2.-2016-11-15.revoke-security-group-ingress-request/to-port :portkey.aws.ec2.-2016-11-15.revoke-security-group-ingress-request/source-security-group-name :portkey.aws.ec2.-2016-11-15.revoke-security-group-ingress-request/ip-protocol :portkey.aws.ec2.-2016-11-15.revoke-security-group-ingress-request/group-name :portkey.aws.ec2.-2016-11-15.revoke-security-group-ingress-request/group-id :portkey.aws.ec2.-2016-11-15.revoke-security-group-ingress-request/from-port :portkey.aws.ec2.-2016-11-15.revoke-security-group-ingress-request/ip-permissions :portkey.aws.ec2.-2016-11-15.revoke-security-group-ingress-request/cidr-ip]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-interface-attribute-result/attachment (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/network-interface-attachment))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-interface-attribute-result/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-interface-attribute-result/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-interface-attribute-result/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-interface-attribute-result/source-dest-check (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-network-interface-attribute-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-network-interface-attribute-result/attachment :portkey.aws.ec2.-2016-11-15.describe-network-interface-attribute-result/description :portkey.aws.ec2.-2016-11-15.describe-network-interface-attribute-result/groups :portkey.aws.ec2.-2016-11-15.describe-network-interface-attribute-result/network-interface-id :portkey.aws.ec2.-2016-11-15.describe-network-interface-attribute-result/source-dest-check]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.attach-network-interface-result/attachment-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/attach-network-interface-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.attach-network-interface-result/attachment-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fleet-launch-template-config-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/fleet-launch-template-config))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-permissions-result/allowed-principals (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/allowed-principal-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-permissions-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-service-permissions-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-permissions-result/allowed-principals :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-service-permissions-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disk-image-volume-description/id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disk-image-volume-description/size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/disk-image-volume-description (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.disk-image-volume-description/id :portkey.aws.ec2.-2016-11-15.disk-image-volume-description/size]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/account-attribute-name #{:supportedplatforms :defaultvpc "supported-platforms" "default-vpc"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host-properties/cores (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host-properties/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host-properties/sockets (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host-properties/total-v-cpus (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/host-properties (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.host-properties/cores :portkey.aws.ec2.-2016-11-15.host-properties/instance-type :portkey.aws.ec2.-2016-11-15.host-properties/sockets :portkey.aws.ec2.-2016-11-15.host-properties/total-v-cpus]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-vpn-connection-route-request/destination-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-vpn-connection-route-request/vpn-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-vpn-connection-route-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-vpn-connection-route-request/destination-cidr-block :portkey.aws.ec2.-2016-11-15.delete-vpn-connection-route-request/vpn-connection-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-fpga-image-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-fpga-image-request/fpga-image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-fpga-image-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-fpga-image-request/fpga-image-id] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-fpga-image-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-key-pair-request/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-key-pair-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-key-pair-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-key-pair-request/key-name] :opt-un [:portkey.aws.ec2.-2016-11-15.create-key-pair-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instance-credit-specifications-result/instance-credit-specifications (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-credit-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instance-credit-specifications-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-instance-credit-specifications-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-instance-credit-specifications-result/instance-credit-specifications :portkey.aws.ec2.-2016-11-15.describe-instance-credit-specifications-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpn-gateway-request/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpn-gateway-request/type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/gateway-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpn-gateway-request/amazon-side-asn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpn-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-vpn-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-vpn-gateway-request/type] :opt-un [:portkey.aws.ec2.-2016-11-15.create-vpn-gateway-request/availability-zone :portkey.aws.ec2.-2016-11-15.create-vpn-gateway-request/amazon-side-asn :portkey.aws.ec2.-2016-11-15.create-vpn-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-interfaces-result/network-interfaces (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/network-interface-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-interfaces-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-network-interfaces-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-network-interfaces-result/network-interfaces :portkey.aws.ec2.-2016-11-15.describe-network-interfaces-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-interface-permissions-result/network-interface-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/network-interface-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-interface-permissions-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-network-interface-permissions-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-network-interface-permissions-result/network-interface-permissions :portkey.aws.ec2.-2016-11-15.describe-network-interface-permissions-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-iam-instance-profile-association-request/iam-instance-profile (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/iam-instance-profile-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-iam-instance-profile-association-request/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/replace-iam-instance-profile-association-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.replace-iam-instance-profile-association-request/iam-instance-profile :portkey.aws.ec2.-2016-11-15.replace-iam-instance-profile-association-request/association-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-fpga-image-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-fpga-image-request/input-storage-location (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/storage-location))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-fpga-image-request/logs-storage-location (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/storage-location))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-fpga-image-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-fpga-image-request/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-fpga-image-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-fpga-image-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-fpga-image-request/input-storage-location] :opt-un [:portkey.aws.ec2.-2016-11-15.create-fpga-image-request/dry-run :portkey.aws.ec2.-2016-11-15.create-fpga-image-request/logs-storage-location :portkey.aws.ec2.-2016-11-15.create-fpga-image-request/description :portkey.aws.ec2.-2016-11-15.create-fpga-image-request/name :portkey.aws.ec2.-2016-11-15.create-fpga-image-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-launch-template-versions-response-error-item/launch-template-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-launch-template-versions-response-error-item/launch-template-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-launch-template-versions-response-error-item/version-number (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-launch-template-versions-response-error-item (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-launch-template-versions-response-error-item/launch-template-id :portkey.aws.ec2.-2016-11-15.delete-launch-template-versions-response-error-item/launch-template-name :portkey.aws.ec2.-2016-11-15.delete-launch-template-versions-response-error-item/version-number :portkey.aws.ec2.-2016-11-15/response-error]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.enable-vgw-route-propagation-request/gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.enable-vgw-route-propagation-request/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/enable-vgw-route-propagation-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.enable-vgw-route-propagation-request/gateway-id :portkey.aws.ec2.-2016-11-15.enable-vgw-route-propagation-request/route-table-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance/term-end-date (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance/network-platform (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance/recurrence (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/scheduled-instance-recurrence))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance/create-date (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance/next-slot-start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance/total-scheduled-instance-hours (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance/hourly-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance/slot-duration-in-hours (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance/previous-slot-end-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance/scheduled-instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance/term-start-date (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/scheduled-instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.scheduled-instance/platform :portkey.aws.ec2.-2016-11-15.scheduled-instance/term-end-date :portkey.aws.ec2.-2016-11-15.scheduled-instance/network-platform :portkey.aws.ec2.-2016-11-15.scheduled-instance/instance-count :portkey.aws.ec2.-2016-11-15.scheduled-instance/recurrence :portkey.aws.ec2.-2016-11-15.scheduled-instance/create-date :portkey.aws.ec2.-2016-11-15.scheduled-instance/instance-type :portkey.aws.ec2.-2016-11-15.scheduled-instance/next-slot-start-time :portkey.aws.ec2.-2016-11-15.scheduled-instance/total-scheduled-instance-hours :portkey.aws.ec2.-2016-11-15.scheduled-instance/availability-zone :portkey.aws.ec2.-2016-11-15.scheduled-instance/hourly-price :portkey.aws.ec2.-2016-11-15.scheduled-instance/slot-duration-in-hours :portkey.aws.ec2.-2016-11-15.scheduled-instance/previous-slot-end-time :portkey.aws.ec2.-2016-11-15.scheduled-instance/scheduled-instance-id :portkey.aws.ec2.-2016-11-15.scheduled-instance/term-start-date]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-launch-template-overrides-request/max-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-launch-template-overrides-request/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-launch-template-overrides-request/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-launch-template-overrides-request/weighted-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-launch-template-overrides-request/priority (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fleet-launch-template-overrides-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/instance-type :portkey.aws.ec2.-2016-11-15.fleet-launch-template-overrides-request/max-price :portkey.aws.ec2.-2016-11-15.fleet-launch-template-overrides-request/subnet-id :portkey.aws.ec2.-2016-11-15.fleet-launch-template-overrides-request/availability-zone :portkey.aws.ec2.-2016-11-15.fleet-launch-template-overrides-request/weighted-capacity :portkey.aws.ec2.-2016-11-15.fleet-launch-template-overrides-request/priority]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-default-subnet-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/subnet]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-tenancy #{:default "default"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/active-instance-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/active-instance))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-type #{:r-3large :i-3large :c-4xlarge "m1.large" :m-524xlarge "t3.small" :c-3xlarge "cc1.4xlarge" :cg-14xlarge "z1d.large" :i-28xlarge :r-48xlarge :t-2small "x1e.32xlarge" "r5d.xlarge" :c-518xlarge :c-1xlarge :r-5d-12xlarge "m5d.24xlarge" "c1.medium" "r4.2xlarge" :c-48xlarge :x-1exlarge "r3.8xlarge" "r5.4xlarge" "d2.xlarge" "m3.2xlarge" "r5d.8xlarge" "i2.8xlarge" "h1.16xlarge" "m5.xlarge" "t3.2xlarge" "g2.2xlarge" :m-5xlarge :r-58xlarge :m-52xlarge "g3.8xlarge" :z-1d-12xlarge :c-5d-4xlarge "t3.xlarge" :z-1d-2xlarge "c3.8xlarge" :i-38xlarge "t2.large" :r-5dmetal "x1e.4xlarge" "t3.nano" :u-9tb-1metal :m-512xlarge :m-42xlarge "p2.16xlarge" "m1.xlarge" :g-34xlarge "d2.8xlarge" "r5d.large" "m4.4xlarge" :r-5dxlarge :m-5large "t2.2xlarge" "r4.16xlarge" :t-2large "u-12tb1.metal" :c-34xlarge "r5d.4xlarge" :x-116xlarge :r-512xlarge "g3.16xlarge" "z1d.2xlarge" "t3.large" "h1.2xlarge" :c-5large "g3.4xlarge" "cr1.8xlarge" "t1.micro" :x-1e-16xlarge "c5d.large" :d-28xlarge :x-1e-4xlarge :r-524xlarge "z1d.xlarge" :r-5d-24xlarge :r-34xlarge "c5.4xlarge" :z-1d-6xlarge :m-32xlarge "c3.2xlarge" "g2.8xlarge" "z1d.3xlarge" "c5d.18xlarge" :m-54xlarge :r-5d-4xlarge :t-2xlarge "c4.8xlarge" "c5.18xlarge" :r-4large "x1e.2xlarge" "r5.metal" "z1d.6xlarge" :g-22xlarge :h-18xlarge :c-3large "m2.xlarge" "m1.small" "i2.4xlarge" "c3.4xlarge" "i3.16xlarge" :i-3metal :t-2micro :m-5d-4xlarge :c-38xlarge "t2.micro" "r5d.16xlarge" :r-416xlarge :g-316xlarge :p-316xlarge "d2.2xlarge" "x1.32xlarge" :r-38xlarge "m4.2xlarge" "r5d.24xlarge" :r-32xlarge :c-52xlarge "u-6tb1.metal" "i3.4xlarge" :r-5xlarge :t-3xlarge :p-32xlarge "m4.10xlarge" "i3.metal" "m1.medium" :cc-14xlarge "c4.4xlarge" "hi1.4xlarge" :d-2xlarge :i-2xlarge "r3.xlarge" :t-3large "x1e.16xlarge" :i-32xlarge :c-44xlarge :m-22xlarge "m5.large" :t-2medium "r5.xlarge" :r-3xlarge "c4.2xlarge" :m-416xlarge "i3.8xlarge" "p3.2xlarge" :m-5dlarge "m5.4xlarge" "t3.medium" "u-9tb1.metal" :r-42xlarge :c-59xlarge :i-22xlarge "t2.small" :m-1small :c-5d-9xlarge "r4.xlarge" :t-22xlarge :u-12tb-1metal "m5.2xlarge" :m-3large "z1d.12xlarge" "t3.micro" "c5.large" "c5.2xlarge" :f-14xlarge "f1.2xlarge" "m5d.4xlarge" "c5d.xlarge" :r-52xlarge "m3.xlarge" :g-38xlarge :m-5d-12xlarge "c5d.9xlarge" :r-516xlarge "r3.2xlarge" :c-32xlarge :p-38xlarge "cg1.4xlarge" :c-42xlarge :c-5d-2xlarge :z-1dlarge "r3.4xlarge" :r-44xlarge :p-2xlarge :hs-18xlarge :t-2nano :m-44xlarge :i-34xlarge :m-24xlarge "t2.xlarge" "c4.xlarge" "m2.2xlarge" "f1.4xlarge" :c-54xlarge "r5.large" :t-3small "p2.8xlarge" :h-12xlarge "r5d.12xlarge" "x1.16xlarge" :r-5d-8xlarge "m4.large" :m-410xlarge :r-5d-16xlarge :t-3nano "m4.16xlarge" "r3.large" "d2.4xlarge" "h1.8xlarge" "i3.2xlarge" :h-116xlarge "c4.large" "h1.4xlarge" :r-5dlarge "m5d.12xlarge" :d-24xlarge :m-3medium :g-28xlarge :m-1xlarge "m4.xlarge" "f1.16xlarge" "r5.12xlarge" "i2.2xlarge" "p3.16xlarge" :z-1d-3xlarge "i3.xlarge" :c-4large :cc-28xlarge :t-32xlarge :r-4xlarge :i-24xlarge :r-5large :m-4xlarge :m-3xlarge "t2.nano" "m2.4xlarge" :f-12xlarge :r-5metal "r5d.metal" "r4.large" "c3.xlarge" :m-4large "p2.xlarge" "c5d.4xlarge" :m-1medium :m-1large :x-1e-32xlarge :i-3xlarge "i3.large" "r4.8xlarge" "t2.medium" "p3.8xlarge" "c3.large" :c-1medium "m3.medium" :x-1e-2xlarge "m5d.2xlarge" :u-6tb-1metal "r5d.2xlarge" :f-116xlarge :c-5dxlarge :cr-18xlarge "i2.xlarge" "m5.24xlarge" "c5.9xlarge" "m5d.large" :z-1dxlarge "m5.12xlarge" :h-14xlarge "cc2.8xlarge" "hs1.8xlarge" :r-5d-2xlarge :c-5d-18xlarge "r5.16xlarge" :t-3medium :x-132xlarge "m3.large" :m-5d-2xlarge :p-216xlarge "x1e.xlarge" "c1.xlarge" "c5d.2xlarge" :c-5xlarge "x1e.8xlarge" :t-1micro :d-22xlarge :t-3micro "r5.2xlarge" :m-2xlarge :x-1e-8xlarge "m5d.xlarge" :p-28xlarge :r-54xlarge :c-5dlarge "c5.xlarge" :i-316xlarge :m-5d-24xlarge "r4.4xlarge" "r5.8xlarge" "r5.24xlarge" :m-5dxlarge :hi-14xlarge})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/route-state #{"blackhole" :active "active" :blackhole})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-regions-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-regions-request/region-names (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/region-name-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-regions-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-regions-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-regions-request/filters :portkey.aws.ec2.-2016-11-15.describe-regions-request/region-names :portkey.aws.ec2.-2016-11-15.describe-regions-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-type-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/instance-type))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/subnet-state #{:pending :available "pending" "available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/stale-ip-permission-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/stale-ip-permission))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/image-attribute-name #{:description "kernel" "productCodes" "blockDeviceMapping" :ramdisk :product-codes "launchPermission" :block-device-mapping "ramdisk" :sriov-net-support :kernel :launch-permission "description" "sriovNetSupport"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpn-connections-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpn-connections-request/vpn-connection-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpn-connection-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpn-connections-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpn-connections-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-vpn-connections-request/filters :portkey.aws.ec2.-2016-11-15.describe-vpn-connections-request/vpn-connection-ids :portkey.aws.ec2.-2016-11-15.describe-vpn-connections-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-route-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-route-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-route-request/nat-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-route-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-route-request/destination-ipv-6-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-route-request/destination-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-route-request/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-route-request/gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-route-request/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-route-request/egress-only-internet-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/replace-route-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.replace-route-request/route-table-id] :opt-un [:portkey.aws.ec2.-2016-11-15.replace-route-request/dry-run :portkey.aws.ec2.-2016-11-15.replace-route-request/instance-id :portkey.aws.ec2.-2016-11-15.replace-route-request/nat-gateway-id :portkey.aws.ec2.-2016-11-15.replace-route-request/network-interface-id :portkey.aws.ec2.-2016-11-15.replace-route-request/destination-ipv-6-cidr-block :portkey.aws.ec2.-2016-11-15.replace-route-request/destination-cidr-block :portkey.aws.ec2.-2016-11-15.replace-route-request/vpc-peering-connection-id :portkey.aws.ec2.-2016-11-15.replace-route-request/gateway-id :portkey.aws.ec2.-2016-11-15.replace-route-request/egress-only-internet-gateway-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-modification-result/reserved-instances-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-modification-result/target-configuration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reserved-instances-configuration))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reserved-instances-modification-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.reserved-instances-modification-result/reserved-instances-id :portkey.aws.ec2.-2016-11-15.reserved-instances-modification-result/target-configuration]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volume-attribute-result/auto-enable-io (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volume-attribute-result/product-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/product-code-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volume-attribute-result/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-volume-attribute-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-volume-attribute-result/auto-enable-io :portkey.aws.ec2.-2016-11-15.describe-volume-attribute-result/product-codes :portkey.aws.ec2.-2016-11-15.describe-volume-attribute-result/volume-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.unassign-ipv-6-addresses-request/ipv-6-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/ipv-6-address-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.unassign-ipv-6-addresses-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/unassign-ipv-6-addresses-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.unassign-ipv-6-addresses-request/ipv-6-addresses :portkey.aws.ec2.-2016-11-15.unassign-ipv-6-addresses-request/network-interface-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-instance-task-details/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-instance-task-details/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-instance-task-details/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/platform-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-instance-task-details/volumes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/import-instance-volume-detail-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/import-instance-task-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.import-instance-task-details/description :portkey.aws.ec2.-2016-11-15.import-instance-task-details/instance-id :portkey.aws.ec2.-2016-11-15.import-instance-task-details/platform :portkey.aws.ec2.-2016-11-15.import-instance-task-details/volumes]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-modifications-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-modifications-result/reserved-instances-modifications (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reserved-instances-modification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-reserved-instances-modifications-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-reserved-instances-modifications-result/next-token :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-modifications-result/reserved-instances-modifications]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cancel-bundle-task-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/bundle-task]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-volume-permission/group (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/permission-group))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-volume-permission/user-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-volume-permission (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.create-volume-permission/group :portkey.aws.ec2.-2016-11-15.create-volume-permission/user-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-host-reservation-purchase-preview-result/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-host-reservation-purchase-preview-result/purchase (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/purchase-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-host-reservation-purchase-preview-result/total-hourly-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-host-reservation-purchase-preview-result/total-upfront-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/get-host-reservation-purchase-preview-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.get-host-reservation-purchase-preview-result/currency-code :portkey.aws.ec2.-2016-11-15.get-host-reservation-purchase-preview-result/purchase :portkey.aws.ec2.-2016-11-15.get-host-reservation-purchase-preview-result/total-hourly-price :portkey.aws.ec2.-2016-11-15.get-host-reservation-purchase-preview-result/total-upfront-price]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-spot-datafeed-subscription-request/bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-spot-datafeed-subscription-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-spot-datafeed-subscription-request/prefix (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-spot-datafeed-subscription-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-spot-datafeed-subscription-request/bucket] :opt-un [:portkey.aws.ec2.-2016-11-15.create-spot-datafeed-subscription-request/dry-run :portkey.aws.ec2.-2016-11-15.create-spot-datafeed-subscription-request/prefix]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-availability-zones-result/availability-zones (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/availability-zone-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-availability-zones-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-availability-zones-result/availability-zones]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-status-details/impaired-since (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-status-details/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/status-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-status-details/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/status-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-status-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.instance-status-details/impaired-since :portkey.aws.ec2.-2016-11-15.instance-status-details/name :portkey.aws.ec2.-2016-11-15.instance-status-details/status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-snapshot-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/snapshot-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-snapshot-attribute-request/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-snapshot-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-snapshot-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.describe-snapshot-attribute-request/attribute :portkey.aws.ec2.-2016-11-15.describe-snapshot-attribute-request/snapshot-id] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-snapshot-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.subnet-cidr-block-state/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/subnet-cidr-block-state-code))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.subnet-cidr-block-state/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/subnet-cidr-block-state (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.subnet-cidr-block-state/state :portkey.aws.ec2.-2016-11-15.subnet-cidr-block-state/status-message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.authorize-security-group-egress-request/source-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.authorize-security-group-egress-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.authorize-security-group-egress-request/to-port (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.authorize-security-group-egress-request/source-security-group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.authorize-security-group-egress-request/ip-protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.authorize-security-group-egress-request/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.authorize-security-group-egress-request/from-port (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.authorize-security-group-egress-request/ip-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/ip-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.authorize-security-group-egress-request/cidr-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/authorize-security-group-egress-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.authorize-security-group-egress-request/group-id] :opt-un [:portkey.aws.ec2.-2016-11-15.authorize-security-group-egress-request/source-security-group-owner-id :portkey.aws.ec2.-2016-11-15.authorize-security-group-egress-request/dry-run :portkey.aws.ec2.-2016-11-15.authorize-security-group-egress-request/to-port :portkey.aws.ec2.-2016-11-15.authorize-security-group-egress-request/source-security-group-name :portkey.aws.ec2.-2016-11-15.authorize-security-group-egress-request/ip-protocol :portkey.aws.ec2.-2016-11-15.authorize-security-group-egress-request/from-port :portkey.aws.ec2.-2016-11-15.authorize-security-group-egress-request/ip-permissions :portkey.aws.ec2.-2016-11-15.authorize-security-group-egress-request/cidr-ip]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-key-pair-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-key-pair-request/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-key-pair-request/public-key-material (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/blob))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/import-key-pair-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.import-key-pair-request/key-name :portkey.aws.ec2.-2016-11-15.import-key-pair-request/public-key-material] :opt-un [:portkey.aws.ec2.-2016-11-15.import-key-pair-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.iam-instance-profile-specification/arn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.iam-instance-profile-specification/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/iam-instance-profile-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.iam-instance-profile-specification/arn :portkey.aws.ec2.-2016-11-15.iam-instance-profile-specification/name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/spot-instance-request-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/spot-instance-request))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/placement-group-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-detail/size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/volume-detail (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.volume-detail/size] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/region-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/region))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-spot-market-options-request/max-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-spot-market-options-request/block-duration-minutes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-spot-market-options-request/valid-until (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-spot-market-options-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.launch-template-spot-market-options-request/max-price :portkey.aws.ec2.-2016-11-15/spot-instance-type :portkey.aws.ec2.-2016-11-15.launch-template-spot-market-options-request/block-duration-minutes :portkey.aws.ec2.-2016-11-15.launch-template-spot-market-options-request/valid-until :portkey.aws.ec2.-2016-11-15/instance-interruption-behavior]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-tags-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-tags-request/resources (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/resource-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-tags-request/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-tags-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-tags-request/resources] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-tags-request/dry-run :portkey.aws.ec2.-2016-11-15.delete-tags-request/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-fleet-success-item/current-fleet-state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-state-code))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-fleet-success-item/previous-fleet-state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-state-code))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-fleet-success-item/fleet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-identifier))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-fleet-success-item (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-fleet-success-item/current-fleet-state :portkey.aws.ec2.-2016-11-15.delete-fleet-success-item/previous-fleet-state :portkey.aws.ec2.-2016-11-15.delete-fleet-success-item/fleet-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-reserved-instances-listing-result/reserved-instances-listings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reserved-instances-listing-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cancel-reserved-instances-listing-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.cancel-reserved-instances-listing-result/reserved-instances-listings]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-dhcp-options-request/dhcp-options-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/dhcp-options-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-dhcp-options-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-dhcp-options-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-dhcp-options-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-dhcp-options-request/dhcp-options-ids :portkey.aws.ec2.-2016-11-15.describe-dhcp-options-request/filters :portkey.aws.ec2.-2016-11-15.describe-dhcp-options-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.restore-address-to-classic-result/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/restore-address-to-classic-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.restore-address-to-classic-result/public-ip :portkey.aws.ec2.-2016-11-15/status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/response-host-id-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disk-image-description/checksum (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disk-image-description/format (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/disk-image-format))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disk-image-description/import-manifest-url (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disk-image-description/size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/disk-image-description (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.disk-image-description/checksum :portkey.aws.ec2.-2016-11-15.disk-image-description/format :portkey.aws.ec2.-2016-11-15.disk-image-description/import-manifest-url :portkey.aws.ec2.-2016-11-15.disk-image-description/size]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template/launch-template-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template/create-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template/created-by (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template/default-version-number (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template/latest-version-number (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.launch-template/launch-template-id :portkey.aws.ec2.-2016-11-15/launch-template-name :portkey.aws.ec2.-2016-11-15.launch-template/create-time :portkey.aws.ec2.-2016-11-15.launch-template/created-by :portkey.aws.ec2.-2016-11-15.launch-template/default-version-number :portkey.aws.ec2.-2016-11-15.launch-template/latest-version-number :portkey.aws.ec2.-2016-11-15.launch-template/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/host-tenancy #{"host" :host "dedicated" :dedicated})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.available-capacity/available-instance-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/available-instance-capacity-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.available-capacity/available-v-cpus (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/available-capacity (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.available-capacity/available-instance-capacity :portkey.aws.ec2.-2016-11-15.available-capacity/available-v-cpus]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/service-detail-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/service-detail))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.storage-location/bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.storage-location/key (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/storage-location (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.storage-location/bucket :portkey.aws.ec2.-2016-11-15.storage-location/key]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/bundle-task-state #{:waitingforshutdown :bundling "failed" "waiting-for-shutdown" :pending "complete" "storing" "cancelling" :complete "bundling" :cancelling "pending" :storing :failed})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.icmp-type-code/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.icmp-type-code/type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/icmp-type-code (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.icmp-type-code/code :portkey.aws.ec2.-2016-11-15.icmp-type-code/type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-private-ip-address/association (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-network-interface-association))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-private-ip-address/primary (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-private-ip-address/private-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-private-ip-address/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-private-ip-address (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.instance-private-ip-address/association :portkey.aws.ec2.-2016-11-15.instance-private-ip-address/primary :portkey.aws.ec2.-2016-11-15.instance-private-ip-address/private-dns-name :portkey.aws.ec2.-2016-11-15.instance-private-ip-address/private-ip-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-acls-result/network-acls (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/network-acl-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-network-acls-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-network-acls-result/network-acls]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fpga-image-attribute-name #{:description "productCodes" :load-permission :name :product-codes "name" "description" "loadPermission"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.elastic-gpu-specification/type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/elastic-gpu-specification (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.elastic-gpu-specification/type] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reserved-instances-listing-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/reserved-instances-listing))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/service-state #{:deleted "Failed" :pending :deleting "Deleting" "Deleted" :available "Pending" "Available" :failed})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-iam-instance-profile-request/iam-instance-profile (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/iam-instance-profile-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-iam-instance-profile-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/associate-iam-instance-profile-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.associate-iam-instance-profile-request/iam-instance-profile :portkey.aws.ec2.-2016-11-15.associate-iam-instance-profile-request/instance-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-classic-link/classic-link-enabled (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-classic-link/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-classic-link/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-classic-link (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.vpc-classic-link/classic-link-enabled :portkey.aws.ec2.-2016-11-15.vpc-classic-link/tags :portkey.aws.ec2.-2016-11-15.vpc-classic-link/vpc-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-import-task-result/import-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-import-task-result/previous-state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-import-task-result/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cancel-import-task-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.cancel-import-task-result/import-task-id :portkey.aws.ec2.-2016-11-15.cancel-import-task-result/previous-state :portkey.aws.ec2.-2016-11-15.cancel-import-task-result/state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot-task-detail/disk-image-size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot-task-detail/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot-task-detail/format (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot-task-detail/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot-task-detail/progress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot-task-detail/url (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot-task-detail/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot-task-detail/user-bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/user-bucket-details))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot-task-detail/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/snapshot-task-detail (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.snapshot-task-detail/disk-image-size :portkey.aws.ec2.-2016-11-15.snapshot-task-detail/status-message :portkey.aws.ec2.-2016-11-15.snapshot-task-detail/format :portkey.aws.ec2.-2016-11-15.snapshot-task-detail/status :portkey.aws.ec2.-2016-11-15.snapshot-task-detail/progress :portkey.aws.ec2.-2016-11-15.snapshot-task-detail/url :portkey.aws.ec2.-2016-11-15.snapshot-task-detail/description :portkey.aws.ec2.-2016-11-15.snapshot-task-detail/user-bucket :portkey.aws.ec2.-2016-11-15.snapshot-task-detail/snapshot-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-specification/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-specification/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-specification/placement (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-placement))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-specification/addressing-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-specification/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-specification/security-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-specification/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-specification/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-specification/monitoring (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/run-instances-monitoring-enabled))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-specification/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/block-device-mapping-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-specification/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-specification/user-data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-specification/iam-instance-profile (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/iam-instance-profile-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-specification/network-interfaces (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-network-interface-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.launch-specification/kernel-id :portkey.aws.ec2.-2016-11-15.launch-specification/image-id :portkey.aws.ec2.-2016-11-15.launch-specification/placement :portkey.aws.ec2.-2016-11-15.launch-specification/addressing-type :portkey.aws.ec2.-2016-11-15.launch-specification/subnet-id :portkey.aws.ec2.-2016-11-15.launch-specification/security-groups :portkey.aws.ec2.-2016-11-15.launch-specification/ebs-optimized :portkey.aws.ec2.-2016-11-15/instance-type :portkey.aws.ec2.-2016-11-15.launch-specification/key-name :portkey.aws.ec2.-2016-11-15.launch-specification/monitoring :portkey.aws.ec2.-2016-11-15.launch-specification/block-device-mappings :portkey.aws.ec2.-2016-11-15.launch-specification/ramdisk-id :portkey.aws.ec2.-2016-11-15.launch-specification/user-data :portkey.aws.ec2.-2016-11-15.launch-specification/iam-instance-profile :portkey.aws.ec2.-2016-11-15.launch-specification/network-interfaces]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/id-format-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/id-format))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.register-image-result/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/register-image-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.register-image-result/image-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-tag-specification-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/launch-template-tag-specification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-fpga-image-attribute-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/fpga-image-attribute]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/allowed-principal-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/allowed-principal))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-host-reservations-request/filter (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-host-reservations-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-host-reservations-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-host-reservations-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-host-reservations-request/filter :portkey.aws.ec2.-2016-11-15/host-reservation-id-set :portkey.aws.ec2.-2016-11-15.describe-host-reservations-request/max-results :portkey.aws.ec2.-2016-11-15.describe-host-reservations-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-result/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-result/import-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-result/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-result/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-result/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-result/progress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-result/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-result/snapshot-details (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/snapshot-detail-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-result/hypervisor (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-result/architecture (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-result/license-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/import-image-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.import-image-result/platform :portkey.aws.ec2.-2016-11-15.import-image-result/import-task-id :portkey.aws.ec2.-2016-11-15.import-image-result/image-id :portkey.aws.ec2.-2016-11-15.import-image-result/status-message :portkey.aws.ec2.-2016-11-15.import-image-result/status :portkey.aws.ec2.-2016-11-15.import-image-result/progress :portkey.aws.ec2.-2016-11-15.import-image-result/description :portkey.aws.ec2.-2016-11-15.import-image-result/snapshot-details :portkey.aws.ec2.-2016-11-15.import-image-result/hypervisor :portkey.aws.ec2.-2016-11-15.import-image-result/architecture :portkey.aws.ec2.-2016-11-15.import-image-result/license-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-ipv-6-address-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/instance-ipv-6-address))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/volume-attribute-name #{:auto-enable-io "productCodes" "autoEnableIO" :product-codes})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-launch-template-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-launch-template-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-launch-template-request/launch-template-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-launch-template-request/default-version (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-launch-template-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-launch-template-request/dry-run :portkey.aws.ec2.-2016-11-15.modify-launch-template-request/client-token :portkey.aws.ec2.-2016-11-15.modify-launch-template-request/launch-template-id :portkey.aws.ec2.-2016-11-15/launch-template-name :portkey.aws.ec2.-2016-11-15.modify-launch-template-request/default-version]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-launch-templates-result/launch-templates (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-launch-templates-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-launch-templates-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-launch-templates-result/launch-templates :portkey.aws.ec2.-2016-11-15.describe-launch-templates-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/prefix-list-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/prefix-list))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-credit-specification/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-credit-specification/cpu-credits (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-credit-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.instance-credit-specification/instance-id :portkey.aws.ec2.-2016-11-15.instance-credit-specification/cpu-credits]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.assign-private-ip-addresses-request/allow-reassignment (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.assign-private-ip-addresses-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.assign-private-ip-addresses-request/private-ip-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/private-ip-address-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.assign-private-ip-addresses-request/secondary-private-ip-address-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/assign-private-ip-addresses-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.assign-private-ip-addresses-request/network-interface-id] :opt-un [:portkey.aws.ec2.-2016-11-15.assign-private-ip-addresses-request/allow-reassignment :portkey.aws.ec2.-2016-11-15.assign-private-ip-addresses-request/private-ip-addresses :portkey.aws.ec2.-2016-11-15.assign-private-ip-addresses-request/secondary-private-ip-address-count]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.detach-network-interface-request/attachment-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.detach-network-interface-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.detach-network-interface-request/force (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/detach-network-interface-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.detach-network-interface-request/attachment-id] :opt-un [:portkey.aws.ec2.-2016-11-15.detach-network-interface-request/dry-run :portkey.aws.ec2.-2016-11-15.detach-network-interface-request/force]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fleet-event-type #{"service-error" "fleet-change" :instancechange :serviceerror "instance-change" :fleetchange})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fleet-state-code #{:deleted :modifying "deleted-terminating" "deleted-running" "failed" :deletedrunning :submitted :active "deleted" "submitted" "modifying" "active" :deletedterminating :failed})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/scheduled-instance-id-request-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-subnet-cidr-block-result/ipv-6-cidr-block-association (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/subnet-ipv-6-cidr-block-association))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-subnet-cidr-block-result/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/associate-subnet-cidr-block-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.associate-subnet-cidr-block-result/ipv-6-cidr-block-association :portkey.aws.ec2.-2016-11-15.associate-subnet-cidr-block-result/subnet-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-address-request/allocation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-address-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-address-request/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-address-request/allow-reassociation (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-address-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-address-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-address-request/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/associate-address-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.associate-address-request/allocation-id :portkey.aws.ec2.-2016-11-15.associate-address-request/instance-id :portkey.aws.ec2.-2016-11-15.associate-address-request/public-ip :portkey.aws.ec2.-2016-11-15.associate-address-request/allow-reassociation :portkey.aws.ec2.-2016-11-15.associate-address-request/dry-run :portkey.aws.ec2.-2016-11-15.associate-address-request/network-interface-id :portkey.aws.ec2.-2016-11-15.associate-address-request/private-ip-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-connections-result/vpc-endpoint-connections (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-endpoint-connection-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-connections-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-connections-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-connections-result/vpc-endpoint-connections :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-connections-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.attribute-boolean-value/value (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/attribute-boolean-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.attribute-boolean-value/value]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.price-schedule-specification/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.price-schedule-specification/price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.price-schedule-specification/term (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/price-schedule-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.price-schedule-specification/currency-code :portkey.aws.ec2.-2016-11-15.price-schedule-specification/price :portkey.aws.ec2.-2016-11-15.price-schedule-specification/term]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.export-to-s-3-task-specification/s-3-bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.export-to-s-3-task-specification/s-3-prefix (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/export-to-s-3-task-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/container-format :portkey.aws.ec2.-2016-11-15/disk-image-format :portkey.aws.ec2.-2016-11-15.export-to-s-3-task-specification/s-3-bucket :portkey.aws.ec2.-2016-11-15.export-to-s-3-task-specification/s-3-prefix]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.monitor-instances-result/instance-monitorings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-monitoring-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/monitor-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.monitor-instances-result/instance-monitorings]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-internet-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-internet-gateway-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.create-internet-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-result/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-vpc-endpoint-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/vpc-endpoint :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-result/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-instance-request/availability-zone-group (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-instance-request/spot-instance-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-instance-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-instance-request/type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-instance-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-instance-request/actual-block-hourly-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-instance-request/block-duration-minutes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-instance-request/valid-from (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-instance-request/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-instance-request/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-instance-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-instance-request/spot-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-instance-request/launched-availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-instance-request/launch-group (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-instance-request/product-description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/ri-product-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-instance-request/create-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-instance-request/fault (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-instance-state-fault))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-instance-request/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-instance-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-instance-request/valid-until (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/spot-instance-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.spot-instance-request/availability-zone-group :portkey.aws.ec2.-2016-11-15.spot-instance-request/spot-instance-request-id :portkey.aws.ec2.-2016-11-15.spot-instance-request/instance-id :portkey.aws.ec2.-2016-11-15.spot-instance-request/type :portkey.aws.ec2.-2016-11-15.spot-instance-request/actual-block-hourly-price :portkey.aws.ec2.-2016-11-15.spot-instance-request/block-duration-minutes :portkey.aws.ec2.-2016-11-15.spot-instance-request/valid-from :portkey.aws.ec2.-2016-11-15/launch-specification :portkey.aws.ec2.-2016-11-15.spot-instance-request/tags :portkey.aws.ec2.-2016-11-15.spot-instance-request/status :portkey.aws.ec2.-2016-11-15.spot-instance-request/spot-price :portkey.aws.ec2.-2016-11-15.spot-instance-request/launched-availability-zone :portkey.aws.ec2.-2016-11-15/instance-interruption-behavior :portkey.aws.ec2.-2016-11-15.spot-instance-request/launch-group :portkey.aws.ec2.-2016-11-15.spot-instance-request/product-description :portkey.aws.ec2.-2016-11-15.spot-instance-request/create-time :portkey.aws.ec2.-2016-11-15.spot-instance-request/fault :portkey.aws.ec2.-2016-11-15.spot-instance-request/state :portkey.aws.ec2.-2016-11-15.spot-instance-request/valid-until]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/rule-action #{"allow" :allow "deny" :deny})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-attachment-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/vpc-attachment))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reset-fpga-image-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reset-fpga-image-attribute-request/fpga-image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reset-fpga-image-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reset-fpga-image-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reset-fpga-image-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.reset-fpga-image-attribute-request/fpga-image-id] :opt-un [:portkey.aws.ec2.-2016-11-15.reset-fpga-image-attribute-request/dry-run :portkey.aws.ec2.-2016-11-15.reset-fpga-image-attribute-request/attribute]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-spot-instance-requests-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-spot-instance-requests-request/spot-instance-request-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-instance-request-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cancel-spot-instance-requests-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.cancel-spot-instance-requests-request/spot-instance-request-ids] :opt-un [:portkey.aws.ec2.-2016-11-15.cancel-spot-instance-requests-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-console-output-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-console-output-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-console-output-request/latest (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/get-console-output-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.get-console-output-request/instance-id] :opt-un [:portkey.aws.ec2.-2016-11-15.get-console-output-request/dry-run :portkey.aws.ec2.-2016-11-15.get-console-output-request/latest]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-key-pair-result/key-fingerprint (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-key-pair-result/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/import-key-pair-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.import-key-pair-result/key-fingerprint :portkey.aws.ec2.-2016-11-15.import-key-pair-result/key-name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-network-acl-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/network-acl]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-connection-notifications-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-connection-notifications-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/connection-notification-set :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-connection-notifications-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/service-configuration-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/service-configuration))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.successful-instance-credit-specification-item/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/successful-instance-credit-specification-item (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.successful-instance-credit-specification-item/instance-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-iam-instance-profile-associations-result/iam-instance-profile-associations (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/iam-instance-profile-association-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-iam-instance-profile-associations-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-iam-instance-profile-associations-result/iam-instance-profile-associations :portkey.aws.ec2.-2016-11-15/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-route-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-route-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.create-route-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-nat-gateways-request/filter (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-nat-gateways-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-nat-gateways-request/nat-gateway-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-nat-gateways-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-nat-gateways-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-nat-gateways-request/filter :portkey.aws.ec2.-2016-11-15.describe-nat-gateways-request/max-results :portkey.aws.ec2.-2016-11-15.describe-nat-gateways-request/nat-gateway-ids :portkey.aws.ec2.-2016-11-15.describe-nat-gateways-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-static-route/destination-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-static-route/source (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpn-static-route-source))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-static-route/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpn-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpn-static-route (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.vpn-static-route/destination-cidr-block :portkey.aws.ec2.-2016-11-15.vpn-static-route/source :portkey.aws.ec2.-2016-11-15.vpn-static-route/state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-route-table-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/route-table]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fleet-type #{:request "maintain" :maintain "request"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-endpoint/subnet-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-endpoint/vpc-endpoint-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-endpoint/private-dns-enabled (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-endpoint/policy-document (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-endpoint/creation-timestamp (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-endpoint/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-endpoint/network-interface-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-endpoint/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/group-identifier-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-endpoint/service-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-endpoint/dns-entries (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/dns-entry-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-endpoint/route-table-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-endpoint (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/vpc-endpoint-type :portkey.aws.ec2.-2016-11-15.vpc-endpoint/subnet-ids :portkey.aws.ec2.-2016-11-15.vpc-endpoint/vpc-endpoint-id :portkey.aws.ec2.-2016-11-15.vpc-endpoint/private-dns-enabled :portkey.aws.ec2.-2016-11-15.vpc-endpoint/policy-document :portkey.aws.ec2.-2016-11-15.vpc-endpoint/creation-timestamp :portkey.aws.ec2.-2016-11-15.vpc-endpoint/vpc-id :portkey.aws.ec2.-2016-11-15.vpc-endpoint/network-interface-ids :portkey.aws.ec2.-2016-11-15.vpc-endpoint/groups :portkey.aws.ec2.-2016-11-15/state :portkey.aws.ec2.-2016-11-15.vpc-endpoint/service-name :portkey.aws.ec2.-2016-11-15.vpc-endpoint/dns-entries :portkey.aws.ec2.-2016-11-15.vpc-endpoint/route-table-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volume-status-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volume-status-result/volume-statuses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/volume-status-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-volume-status-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-volume-status-result/next-token :portkey.aws.ec2.-2016-11-15.describe-volume-status-result/volume-statuses]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-request/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-request/amazon-provided-ipv-6-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-request/instance-tenancy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tenancy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-vpc-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-vpc-request/cidr-block] :opt-un [:portkey.aws.ec2.-2016-11-15.create-vpc-request/amazon-provided-ipv-6-cidr-block :portkey.aws.ec2.-2016-11-15.create-vpc-request/dry-run :portkey.aws.ec2.-2016-11-15.create-vpc-request/instance-tenancy]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-instances-request/availability-zone-group (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-instances-request/type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-instance-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-instances-request/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-instances-request/block-duration-minutes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-instances-request/valid-from (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-instances-request/launch-specification (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/request-spot-launch-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-instances-request/spot-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-instances-request/launch-group (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-instances-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-instances-request/valid-until (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/request-spot-instances-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.request-spot-instances-request/availability-zone-group :portkey.aws.ec2.-2016-11-15.request-spot-instances-request/dry-run :portkey.aws.ec2.-2016-11-15.request-spot-instances-request/type :portkey.aws.ec2.-2016-11-15.request-spot-instances-request/instance-count :portkey.aws.ec2.-2016-11-15.request-spot-instances-request/block-duration-minutes :portkey.aws.ec2.-2016-11-15.request-spot-instances-request/valid-from :portkey.aws.ec2.-2016-11-15.request-spot-instances-request/launch-specification :portkey.aws.ec2.-2016-11-15.request-spot-instances-request/spot-price :portkey.aws.ec2.-2016-11-15/instance-interruption-behavior :portkey.aws.ec2.-2016-11-15.request-spot-instances-request/launch-group :portkey.aws.ec2.-2016-11-15.request-spot-instances-request/client-token :portkey.aws.ec2.-2016-11-15.request-spot-instances-request/valid-until]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/key-pair-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/key-pair-info))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/purchased-scheduled-instance-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/scheduled-instance))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-route-tables-result/route-tables (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/route-table-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-route-tables-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-route-tables-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-route-tables-result/route-tables :portkey.aws.ec2.-2016-11-15.describe-route-tables-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-launch-template-data/tag-specifications (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-tag-specification-request-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-launch-template-data/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-launch-template-data/credit-specification (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/credit-specification-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-launch-template-data/security-group-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/security-group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-launch-template-data/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-launch-template-data/placement (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-placement-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-launch-template-data/security-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/security-group-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-launch-template-data/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-launch-template-data/instance-market-options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-instance-market-options-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-launch-template-data/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-launch-template-data/elastic-gpu-specifications (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/elastic-gpu-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-launch-template-data/ram-disk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-launch-template-data/disable-api-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-launch-template-data/monitoring (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-templates-monitoring-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-launch-template-data/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-block-device-mapping-request-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-launch-template-data/cpu-options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-cpu-options-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-launch-template-data/user-data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-launch-template-data/instance-initiated-shutdown-behavior (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/shutdown-behavior))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-launch-template-data/iam-instance-profile (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-iam-instance-profile-specification-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-launch-template-data/network-interfaces (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-instance-network-interface-specification-request-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/request-launch-template-data (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.request-launch-template-data/tag-specifications :portkey.aws.ec2.-2016-11-15.request-launch-template-data/kernel-id :portkey.aws.ec2.-2016-11-15.request-launch-template-data/credit-specification :portkey.aws.ec2.-2016-11-15.request-launch-template-data/security-group-ids :portkey.aws.ec2.-2016-11-15.request-launch-template-data/image-id :portkey.aws.ec2.-2016-11-15.request-launch-template-data/placement :portkey.aws.ec2.-2016-11-15.request-launch-template-data/security-groups :portkey.aws.ec2.-2016-11-15.request-launch-template-data/ebs-optimized :portkey.aws.ec2.-2016-11-15.request-launch-template-data/instance-market-options :portkey.aws.ec2.-2016-11-15/instance-type :portkey.aws.ec2.-2016-11-15.request-launch-template-data/key-name :portkey.aws.ec2.-2016-11-15.request-launch-template-data/elastic-gpu-specifications :portkey.aws.ec2.-2016-11-15.request-launch-template-data/ram-disk-id :portkey.aws.ec2.-2016-11-15.request-launch-template-data/disable-api-termination :portkey.aws.ec2.-2016-11-15.request-launch-template-data/monitoring :portkey.aws.ec2.-2016-11-15.request-launch-template-data/block-device-mappings :portkey.aws.ec2.-2016-11-15.request-launch-template-data/cpu-options :portkey.aws.ec2.-2016-11-15.request-launch-template-data/user-data :portkey.aws.ec2.-2016-11-15.request-launch-template-data/instance-initiated-shutdown-behavior :portkey.aws.ec2.-2016-11-15.request-launch-template-data/iam-instance-profile :portkey.aws.ec2.-2016-11-15.request-launch-template-data/network-interfaces]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/group-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/group-identifier))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-network-acl-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-network-acl-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-network-acl-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-network-acl-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-11-15.create-network-acl-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-spot-fleet-requests-error-item/error (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/cancel-spot-fleet-requests-error))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-spot-fleet-requests-error-item/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cancel-spot-fleet-requests-error-item (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.cancel-spot-fleet-requests-error-item/error :portkey.aws.ec2.-2016-11-15.cancel-spot-fleet-requests-error-item/spot-fleet-request-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-export-tasks-result/export-tasks (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/export-task-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-export-tasks-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-export-tasks-result/export-tasks]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/payment-option #{"AllUpfront" "PartialUpfront" "NoUpfront" :no-upfront :all-upfront :partial-upfront})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-status-details-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/instance-status-details))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.key-pair-info/key-fingerprint (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.key-pair-info/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/key-pair-info (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.key-pair-info/key-fingerprint :portkey.aws.ec2.-2016-11-15.key-pair-info/key-name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-bundle-tasks-request/bundle-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/bundle-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-bundle-tasks-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-bundle-tasks-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-bundle-tasks-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-bundle-tasks-request/bundle-ids :portkey.aws.ec2.-2016-11-15.describe-bundle-tasks-request/filters :portkey.aws.ec2.-2016-11-15.describe-bundle-tasks-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/price-schedule-specification-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/price-schedule-specification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface/attachment (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-network-interface-attachment))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface/ipv-6-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-ipv-6-address-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface/mac-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface/source-dest-check (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/network-interface-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface/private-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface/private-ip-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-private-ip-address-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface/association (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-network-interface-association))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-network-interface (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.instance-network-interface/attachment :portkey.aws.ec2.-2016-11-15.instance-network-interface/ipv-6-addresses :portkey.aws.ec2.-2016-11-15.instance-network-interface/subnet-id :portkey.aws.ec2.-2016-11-15.instance-network-interface/owner-id :portkey.aws.ec2.-2016-11-15.instance-network-interface/mac-address :portkey.aws.ec2.-2016-11-15.instance-network-interface/network-interface-id :portkey.aws.ec2.-2016-11-15.instance-network-interface/source-dest-check :portkey.aws.ec2.-2016-11-15.instance-network-interface/status :portkey.aws.ec2.-2016-11-15.instance-network-interface/private-dns-name :portkey.aws.ec2.-2016-11-15.instance-network-interface/description :portkey.aws.ec2.-2016-11-15.instance-network-interface/vpc-id :portkey.aws.ec2.-2016-11-15.instance-network-interface/groups :portkey.aws.ec2.-2016-11-15.instance-network-interface/private-ip-addresses :portkey.aws.ec2.-2016-11-15.instance-network-interface/association :portkey.aws.ec2.-2016-11-15.instance-network-interface/private-ip-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instances-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instances-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instances-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-instances-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-instances-request/filters :portkey.aws.ec2.-2016-11-15.describe-instances-request/instance-ids :portkey.aws.ec2.-2016-11-15.describe-instances-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-instances-request/max-results :portkey.aws.ec2.-2016-11-15.describe-instances-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-nat-gateway-request/allocation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-nat-gateway-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-nat-gateway-request/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-nat-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-nat-gateway-request/allocation-id :portkey.aws.ec2.-2016-11-15.create-nat-gateway-request/subnet-id] :opt-un [:portkey.aws.ec2.-2016-11-15.create-nat-gateway-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fleet-launch-template-config-list-request (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/fleet-launch-template-config-request :max-count 50))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-spot-fleet-requests-error/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/cancel-batch-error-code))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-spot-fleet-requests-error/message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cancel-spot-fleet-requests-error (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.cancel-spot-fleet-requests-error/code :portkey.aws.ec2.-2016-11-15.cancel-spot-fleet-requests-error/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpn-static-route-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/vpn-static-route))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reservation/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reservation/instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reservation/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reservation/requester-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reservation/reservation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reservation (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.reservation/groups :portkey.aws.ec2.-2016-11-15.reservation/instances :portkey.aws.ec2.-2016-11-15.reservation/owner-id :portkey.aws.ec2.-2016-11-15.reservation/requester-id :portkey.aws.ec2.-2016-11-15.reservation/reservation-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.unsuccessful-item-error/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.unsuccessful-item-error/message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/unsuccessful-item-error (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.unsuccessful-item-error/code :portkey.aws.ec2.-2016-11-15.unsuccessful-item-error/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/elastic-gpu-association-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/elastic-gpu-association))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-network-acl-association-result/new-association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/replace-network-acl-association-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.replace-network-acl-association-result/new-association-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volume-status-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volume-status-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volume-status-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volume-status-request/volume-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/volume-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volume-status-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-volume-status-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-volume-status-request/filters :portkey.aws.ec2.-2016-11-15.describe-volume-status-request/max-results :portkey.aws.ec2.-2016-11-15.describe-volume-status-request/next-token :portkey.aws.ec2.-2016-11-15.describe-volume-status-request/volume-ids :portkey.aws.ec2.-2016-11-15.describe-volume-status-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-peering-connection-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/vpc-peering-connection))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/unsuccessful-item-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/unsuccessful-item))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/elastic-gpu-id-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/security-group-references (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/security-group-reference))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.allocate-address-request/domain (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/domain-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.allocate-address-request/address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.allocate-address-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/allocate-address-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.allocate-address-request/domain :portkey.aws.ec2.-2016-11-15.allocate-address-request/address :portkey.aws.ec2.-2016-11-15.allocate-address-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-snapshot-result/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-snapshot-result/import-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/import-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.import-snapshot-result/description :portkey.aws.ec2.-2016-11-15.import-snapshot-result/import-task-id :portkey.aws.ec2.-2016-11-15/snapshot-task-detail]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.stale-ip-permission/from-port (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.stale-ip-permission/ip-protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.stale-ip-permission/prefix-list-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/prefix-list-id-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.stale-ip-permission/to-port (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.stale-ip-permission/user-id-group-pairs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/user-id-group-pair-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/stale-ip-permission (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.stale-ip-permission/from-port :portkey.aws.ec2.-2016-11-15.stale-ip-permission/ip-protocol :portkey.aws.ec2.-2016-11-15/ip-ranges :portkey.aws.ec2.-2016-11-15.stale-ip-permission/prefix-list-ids :portkey.aws.ec2.-2016-11-15.stale-ip-permission/to-port :portkey.aws.ec2.-2016-11-15.stale-ip-permission/user-id-group-pairs]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/traffic-type #{:all "REJECT" :reject "ALL" "ACCEPT" :accept})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-cidr-block-association-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/vpc-cidr-block-association))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/availability-zone-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/availability-zone))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-tag-specification/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-tag-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/resource-type :portkey.aws.ec2.-2016-11-15.launch-template-tag-specification/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-endpoint-connection/service-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-endpoint-connection/vpc-endpoint-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-endpoint-connection/vpc-endpoint-owner (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-endpoint-connection/vpc-endpoint-state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-endpoint-connection/creation-timestamp (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-endpoint-connection (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.vpc-endpoint-connection/service-id :portkey.aws.ec2.-2016-11-15.vpc-endpoint-connection/vpc-endpoint-id :portkey.aws.ec2.-2016-11-15.vpc-endpoint-connection/vpc-endpoint-owner :portkey.aws.ec2.-2016-11-15.vpc-endpoint-connection/vpc-endpoint-state :portkey.aws.ec2.-2016-11-15.vpc-endpoint-connection/creation-timestamp]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-spot-market-options/max-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-spot-market-options/block-duration-minutes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-spot-market-options/valid-until (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-spot-market-options (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.launch-template-spot-market-options/max-price :portkey.aws.ec2.-2016-11-15/spot-instance-type :portkey.aws.ec2.-2016-11-15.launch-template-spot-market-options/block-duration-minutes :portkey.aws.ec2.-2016-11-15.launch-template-spot-market-options/valid-until :portkey.aws.ec2.-2016-11-15/instance-interruption-behavior]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.availability-zone/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/availability-zone-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.availability-zone/messages (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/availability-zone-message-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.availability-zone/region-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.availability-zone/zone-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/availability-zone (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.availability-zone/state :portkey.aws.ec2.-2016-11-15.availability-zone/messages :portkey.aws.ec2.-2016-11-15.availability-zone/region-name :portkey.aws.ec2.-2016-11-15.availability-zone/zone-name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-import-snapshot-tasks-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-import-snapshot-tasks-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-import-snapshot-tasks-request/import-task-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/import-task-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-import-snapshot-tasks-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-import-snapshot-tasks-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-import-snapshot-tasks-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-import-snapshot-tasks-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-import-snapshot-tasks-request/filters :portkey.aws.ec2.-2016-11-15.describe-import-snapshot-tasks-request/import-task-ids :portkey.aws.ec2.-2016-11-15.describe-import-snapshot-tasks-request/max-results :portkey.aws.ec2.-2016-11-15.describe-import-snapshot-tasks-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/route-origin #{"EnableVgwRoutePropagation" "CreateRouteTable" "CreateRoute" :create-route :create-route-table :enable-vgw-route-propagation})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disable-vpc-classic-link-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/disable-vpc-classic-link-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.disable-vpc-classic-link-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fpga-image-attribute/fpga-image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fpga-image-attribute/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fpga-image-attribute/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fpga-image-attribute/load-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/load-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fpga-image-attribute/product-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/product-code-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fpga-image-attribute (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.fpga-image-attribute/fpga-image-id :portkey.aws.ec2.-2016-11-15.fpga-image-attribute/name :portkey.aws.ec2.-2016-11-15.fpga-image-attribute/description :portkey.aws.ec2.-2016-11-15.fpga-image-attribute/load-permissions :portkey.aws.ec2.-2016-11-15.fpga-image-attribute/product-codes]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/allocation-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-volume-permission-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/create-volume-permission))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/status #{:move-in-progress :in-classic "InClassic" "MoveInProgress" :in-vpc "InVpc"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/network-interface-type #{"natGateway" :interface "interface" :nat-gateway})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.update-security-group-rule-descriptions-egress-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/update-security-group-rule-descriptions-egress-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.update-security-group-rule-descriptions-egress-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cancelled-spot-instance-request-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/cancelled-spot-instance-request))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-ipv-6-cidr-block-association/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-ipv-6-cidr-block-association/ipv-6-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-ipv-6-cidr-block-association/ipv-6-cidr-block-state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-cidr-block-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-ipv-6-cidr-block-association (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.vpc-ipv-6-cidr-block-association/association-id :portkey.aws.ec2.-2016-11-15.vpc-ipv-6-cidr-block-association/ipv-6-cidr-block :portkey.aws.ec2.-2016-11-15.vpc-ipv-6-cidr-block-association/ipv-6-cidr-block-state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/image-disk-container-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/image-disk-container))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/event-type #{:fleet-request-change "fleetRequestChange" "instanceChange" :instance-change "error" :error})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.moving-address-status/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/moving-address-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/move-status :portkey.aws.ec2.-2016-11-15.moving-address-status/public-ip]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-peering-connections-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-peering-connections-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-peering-connections-request/vpc-peering-connection-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpc-peering-connections-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-vpc-peering-connections-request/filters :portkey.aws.ec2.-2016-11-15.describe-vpc-peering-connections-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-vpc-peering-connections-request/vpc-peering-connection-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances/start (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances/fixed-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/float))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances/end (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances/instance-tenancy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tenancy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances/duration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances/usage-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/float))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances/product-description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/ri-product-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances/reserved-instances-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reserved-instance-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances/offering-class (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/offering-class-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances/recurring-charges (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/recurring-charges-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances/offering-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/offering-type-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances/scope (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/scope))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reserved-instances (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.reserved-instances/currency-code :portkey.aws.ec2.-2016-11-15.reserved-instances/instance-count :portkey.aws.ec2.-2016-11-15.reserved-instances/start :portkey.aws.ec2.-2016-11-15/instance-type :portkey.aws.ec2.-2016-11-15.reserved-instances/fixed-price :portkey.aws.ec2.-2016-11-15.reserved-instances/end :portkey.aws.ec2.-2016-11-15.reserved-instances/tags :portkey.aws.ec2.-2016-11-15.reserved-instances/availability-zone :portkey.aws.ec2.-2016-11-15.reserved-instances/instance-tenancy :portkey.aws.ec2.-2016-11-15.reserved-instances/duration :portkey.aws.ec2.-2016-11-15.reserved-instances/usage-price :portkey.aws.ec2.-2016-11-15.reserved-instances/product-description :portkey.aws.ec2.-2016-11-15.reserved-instances/reserved-instances-id :portkey.aws.ec2.-2016-11-15.reserved-instances/state :portkey.aws.ec2.-2016-11-15.reserved-instances/offering-class :portkey.aws.ec2.-2016-11-15.reserved-instances/recurring-charges :portkey.aws.ec2.-2016-11-15.reserved-instances/offering-type :portkey.aws.ec2.-2016-11-15.reserved-instances/scope]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-default-vpc-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/vpc]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-interface-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/network-interface-attribute))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-interface-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-interface-attribute-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-network-interface-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.describe-network-interface-attribute-request/network-interface-id] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-network-interface-attribute-request/attribute :portkey.aws.ec2.-2016-11-15.describe-network-interface-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/restorable-by-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-permission-state/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/network-interface-permission-state-code))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-permission-state/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/network-interface-permission-state (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.network-interface-permission-state/state :portkey.aws.ec2.-2016-11-15.network-interface-permission-state/status-message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-credit-specification-result/successful-instance-credit-specifications (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/successful-instance-credit-specification-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-credit-specification-result/unsuccessful-instance-credit-specifications (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/unsuccessful-instance-credit-specification-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-instance-credit-specification-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-instance-credit-specification-result/successful-instance-credit-specifications :portkey.aws.ec2.-2016-11-15.modify-instance-credit-specification-result/unsuccessful-instance-credit-specifications]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/next-token (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__27886__auto__] (clojure.core/<= 1 (clojure.core/count s__27886__auto__))) (clojure.core/fn [s__27887__auto__] (clojure.core/< (clojure.core/count s__27887__auto__) 1024))))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reset-fpga-image-attribute-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reset-fpga-image-attribute-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.reset-fpga-image-attribute-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.restore-address-to-classic-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.restore-address-to-classic-request/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/restore-address-to-classic-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.restore-address-to-classic-request/public-ip] :opt-un [:portkey.aws.ec2.-2016-11-15.restore-address-to-classic-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disable-vpc-classic-link-dns-support-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/disable-vpc-classic-link-dns-support-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.disable-vpc-classic-link-dns-support-request/vpc-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.elastic-gpu-association/elastic-gpu-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.elastic-gpu-association/elastic-gpu-association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.elastic-gpu-association/elastic-gpu-association-state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.elastic-gpu-association/elastic-gpu-association-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/elastic-gpu-association (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.elastic-gpu-association/elastic-gpu-id :portkey.aws.ec2.-2016-11-15.elastic-gpu-association/elastic-gpu-association-id :portkey.aws.ec2.-2016-11-15.elastic-gpu-association/elastic-gpu-association-state :portkey.aws.ec2.-2016-11-15.elastic-gpu-association/elastic-gpu-association-time]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.slot-start-time-range-request/earliest-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.slot-start-time-range-request/latest-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/slot-start-time-range-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.slot-start-time-range-request/earliest-time :portkey.aws.ec2.-2016-11-15.slot-start-time-range-request/latest-time]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-route-table-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-route-table-request/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-route-table-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-route-table-request/route-table-id] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-route-table-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/egress-only-internet-gateway-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/egress-only-internet-gateway))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/elastic-gpu-specifications (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/elastic-gpu-specification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/excess-capacity-termination-policy #{:default "noTermination" "default" :no-termination})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.prefix-list/cidrs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.prefix-list/prefix-list-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.prefix-list/prefix-list-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/prefix-list (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.prefix-list/cidrs :portkey.aws.ec2.-2016-11-15.prefix-list/prefix-list-id :portkey.aws.ec2.-2016-11-15.prefix-list/prefix-list-name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/import-instance-volume-detail-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/import-instance-volume-detail-item))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/status-type #{:initializing :passed :insufficientdata "failed" "initializing" "insufficient-data" :failed "passed"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-monitoring/enabled (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/spot-fleet-monitoring (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.spot-fleet-monitoring/enabled]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-block-device-mapping-specification/device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-block-device-mapping-specification/ebs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/ebs-instance-block-device-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-block-device-mapping-specification/no-device (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-block-device-mapping-specification/virtual-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-block-device-mapping-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.instance-block-device-mapping-specification/device-name :portkey.aws.ec2.-2016-11-15.instance-block-device-mapping-specification/ebs :portkey.aws.ec2.-2016-11-15.instance-block-device-mapping-specification/no-device :portkey.aws.ec2.-2016-11-15.instance-block-device-mapping-specification/virtual-name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-launch-templates-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-launch-templates-request/launch-template-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-launch-templates-request/launch-template-names (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-name-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-launch-templates-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-launch-templates-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-launch-templates-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-launch-templates-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-launch-templates-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-launch-templates-request/launch-template-ids :portkey.aws.ec2.-2016-11-15.describe-launch-templates-request/launch-template-names :portkey.aws.ec2.-2016-11-15.describe-launch-templates-request/filters :portkey.aws.ec2.-2016-11-15.describe-launch-templates-request/next-token :portkey.aws.ec2.-2016-11-15.describe-launch-templates-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-listing/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-listing/create-date (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-listing/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-listing/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/listing-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-listing/price-schedules (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/price-schedule-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-listing/update-date (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-listing/reserved-instances-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-listing/reserved-instances-listing-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-listing/instance-counts (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-count-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-listing/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reserved-instances-listing (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.reserved-instances-listing/status-message :portkey.aws.ec2.-2016-11-15.reserved-instances-listing/create-date :portkey.aws.ec2.-2016-11-15.reserved-instances-listing/tags :portkey.aws.ec2.-2016-11-15.reserved-instances-listing/status :portkey.aws.ec2.-2016-11-15.reserved-instances-listing/price-schedules :portkey.aws.ec2.-2016-11-15.reserved-instances-listing/update-date :portkey.aws.ec2.-2016-11-15.reserved-instances-listing/reserved-instances-id :portkey.aws.ec2.-2016-11-15.reserved-instances-listing/reserved-instances-listing-id :portkey.aws.ec2.-2016-11-15.reserved-instances-listing/instance-counts :portkey.aws.ec2.-2016-11-15.reserved-instances-listing/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/load-permission-list-request (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/load-permission-request))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-image-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/image-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-image-attribute-request/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-image-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-image-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.describe-image-attribute-request/attribute :portkey.aws.ec2.-2016-11-15.describe-image-attribute-request/image-id] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-image-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-cidr-block-state/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-cidr-block-state-code))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-cidr-block-state/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-cidr-block-state (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.vpc-cidr-block-state/state :portkey.aws.ec2.-2016-11-15.vpc-cidr-block-state/status-message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-status-summary/details (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-status-details-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-status-summary/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/summary-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-status-summary (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.instance-status-summary/details :portkey.aws.ec2.-2016-11-15.instance-status-summary/status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.nat-gateway-address/allocation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.nat-gateway-address/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.nat-gateway-address/private-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.nat-gateway-address/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/nat-gateway-address (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.nat-gateway-address/allocation-id :portkey.aws.ec2.-2016-11-15.nat-gateway-address/network-interface-id :portkey.aws.ec2.-2016-11-15.nat-gateway-address/private-ip :portkey.aws.ec2.-2016-11-15.nat-gateway-address/public-ip]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-status-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/instance-status))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/placement-group-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/placement-group))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.release-hosts-result/successful (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/response-host-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.release-hosts-result/unsuccessful (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/unsuccessful-item-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/release-hosts-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.release-hosts-result/successful :portkey.aws.ec2.-2016-11-15.release-hosts-result/unsuccessful]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/address-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/address))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disable-vpc-classic-link-dns-support-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/disable-vpc-classic-link-dns-support-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.disable-vpc-classic-link-dns-support-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-customer-gateway-request/bgp-asn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-customer-gateway-request/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-customer-gateway-request/type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/gateway-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-customer-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-customer-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-customer-gateway-request/bgp-asn :portkey.aws.ec2.-2016-11-15.create-customer-gateway-request/public-ip :portkey.aws.ec2.-2016-11-15.create-customer-gateway-request/type] :opt-un [:portkey.aws.ec2.-2016-11-15.create-customer-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reserved-instances-offering-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/reserved-instances-offering))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-credit-specification-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-credit-specification-request/cpu-credits (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-credit-specification-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.instance-credit-specification-request/instance-id :portkey.aws.ec2.-2016-11-15.instance-credit-specification-request/cpu-credits]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-volume-request/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-volume-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-volume-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-volume-request/image (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/disk-image-detail))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-volume-request/volume (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/volume-detail))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/import-volume-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.import-volume-request/availability-zone :portkey.aws.ec2.-2016-11-15.import-volume-request/image :portkey.aws.ec2.-2016-11-15.import-volume-request/volume] :opt-un [:portkey.aws.ec2.-2016-11-15.import-volume-request/description :portkey.aws.ec2.-2016-11-15.import-volume-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/group-ids (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-tags-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-tags-result/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-description-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-tags-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-tags-result/next-token :portkey.aws.ec2.-2016-11-15.describe-tags-result/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cidr-block/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cidr-block (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.cidr-block/cidr-block]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-placement-request/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-placement-request/host-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-placement-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-placement-request/tenancy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/host-tenancy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-instance-placement-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.modify-instance-placement-request/instance-id] :opt-un [:portkey.aws.ec2.-2016-11-15/affinity :portkey.aws.ec2.-2016-11-15.modify-instance-placement-request/group-name :portkey.aws.ec2.-2016-11-15.modify-instance-placement-request/host-id :portkey.aws.ec2.-2016-11-15.modify-instance-placement-request/tenancy]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-moving-addresses-result/moving-address-statuses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/moving-address-status-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-moving-addresses-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-moving-addresses-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-moving-addresses-result/moving-address-statuses :portkey.aws.ec2.-2016-11-15.describe-moving-addresses-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reject-vpc-endpoint-connections-result/unsuccessful (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/unsuccessful-item-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reject-vpc-endpoint-connections-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.reject-vpc-endpoint-connections-result/unsuccessful]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-connection-notification-result/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-vpc-endpoint-connection-notification-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/connection-notification :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-connection-notification-result/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reserved-instances-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/reserved-instances))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-egress-only-internet-gateways-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-egress-only-internet-gateways-request/egress-only-internet-gateway-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/egress-only-internet-gateway-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-egress-only-internet-gateways-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-egress-only-internet-gateways-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-egress-only-internet-gateways-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-egress-only-internet-gateways-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-egress-only-internet-gateways-request/egress-only-internet-gateway-ids :portkey.aws.ec2.-2016-11-15.describe-egress-only-internet-gateways-request/max-results :portkey.aws.ec2.-2016-11-15.describe-egress-only-internet-gateways-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/image-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/image))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-images-result/images (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/image-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-images-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-images-result/images]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-peering-connection-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-peering-connection-request/peer-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-peering-connection-request/peer-vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-peering-connection-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-peering-connection-request/peer-region (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-vpc-peering-connection-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.create-vpc-peering-connection-request/dry-run :portkey.aws.ec2.-2016-11-15.create-vpc-peering-connection-request/peer-owner-id :portkey.aws.ec2.-2016-11-15.create-vpc-peering-connection-request/peer-vpc-id :portkey.aws.ec2.-2016-11-15.create-vpc-peering-connection-request/vpc-id :portkey.aws.ec2.-2016-11-15.create-vpc-peering-connection-request/peer-region]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-flow-logs-result/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-flow-logs-result/flow-log-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-flow-logs-result/unsuccessful (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/unsuccessful-item-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-flow-logs-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.create-flow-logs-result/client-token :portkey.aws.ec2.-2016-11-15.create-flow-logs-result/flow-log-ids :portkey.aws.ec2.-2016-11-15.create-flow-logs-result/unsuccessful]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/user-id-group-pair-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/user-id-group-pair))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-launch-template-versions-result/successfully-deleted-launch-template-versions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/delete-launch-template-versions-response-success-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-launch-template-versions-result/unsuccessfully-deleted-launch-template-versions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/delete-launch-template-versions-response-error-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-launch-template-versions-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-launch-template-versions-result/successfully-deleted-launch-template-versions :portkey.aws.ec2.-2016-11-15.delete-launch-template-versions-result/unsuccessfully-deleted-launch-template-versions]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.s-3-storage/aws-access-key-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.s-3-storage/bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.s-3-storage/prefix (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.s-3-storage/upload-policy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/blob))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.s-3-storage/upload-policy-signature (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/s-3-storage (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.s-3-storage/aws-access-key-id :portkey.aws.ec2.-2016-11-15.s-3-storage/bucket :portkey.aws.ec2.-2016-11-15.s-3-storage/prefix :portkey.aws.ec2.-2016-11-15.s-3-storage/upload-policy :portkey.aws.ec2.-2016-11-15.s-3-storage/upload-policy-signature]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.recurring-charge/amount (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.recurring-charge/frequency (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/recurring-charge-frequency))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/recurring-charge (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.recurring-charge/amount :portkey.aws.ec2.-2016-11-15.recurring-charge/frequency]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/spot-fleet-request-config-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/spot-fleet-request-config))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-permission-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/launch-permission))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/price-schedule-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/price-schedule))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reserved-instances-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-instance-requests-result/spot-instance-requests (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-instance-request-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-spot-instance-requests-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-spot-instance-requests-result/spot-instance-requests]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disable-vgw-route-propagation-request/gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disable-vgw-route-propagation-request/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/disable-vgw-route-propagation-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.disable-vgw-route-propagation-request/gateway-id :portkey.aws.ec2.-2016-11-15.disable-vgw-route-propagation-request/route-table-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-private-ip-address-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/instance-private-ip-address))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-launch-template-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-launch-template-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-launch-template-request/launch-template-data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/request-launch-template-data))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-launch-template-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15/launch-template-name :portkey.aws.ec2.-2016-11-15.create-launch-template-request/launch-template-data] :opt-un [:portkey.aws.ec2.-2016-11-15.create-launch-template-request/dry-run :portkey.aws.ec2.-2016-11-15.create-launch-template-request/client-token :portkey.aws.ec2.-2016-11-15/version-description]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-ipv-6-address/ipv-6-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-ipv-6-address (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.instance-ipv-6-address/ipv-6-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.group-identifier/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.group-identifier/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/group-identifier (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.group-identifier/group-name :portkey.aws.ec2.-2016-11-15.group-identifier/group-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fpga-image-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/fpga-image))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-price/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-price/product-description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/ri-product-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-price/spot-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-price/timestamp (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/spot-price (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.spot-price/availability-zone :portkey.aws.ec2.-2016-11-15/instance-type :portkey.aws.ec2.-2016-11-15.spot-price/product-description :portkey.aws.ec2.-2016-11-15.spot-price/spot-price :portkey.aws.ec2.-2016-11-15.spot-price/timestamp]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-listings-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-listings-request/reserved-instances-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-listings-request/reserved-instances-listing-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-reserved-instances-listings-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-reserved-instances-listings-request/filters :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-listings-request/reserved-instances-id :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-listings-request/reserved-instances-listing-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-subnet-request/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-subnet-request/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-subnet-request/ipv-6-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-subnet-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-subnet-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-subnet-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-subnet-request/cidr-block :portkey.aws.ec2.-2016-11-15.create-subnet-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-11-15.create-subnet-request/availability-zone :portkey.aws.ec2.-2016-11-15.create-subnet-request/ipv-6-cidr-block :portkey.aws.ec2.-2016-11-15.create-subnet-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-id-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/scheduled-instance-availability-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/scheduled-instance-availability))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.nat-gateway/delete-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.nat-gateway/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.nat-gateway/nat-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.nat-gateway/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.nat-gateway/failure-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.nat-gateway/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.nat-gateway/nat-gateway-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/nat-gateway-address-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.nat-gateway/create-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.nat-gateway/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/nat-gateway-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.nat-gateway/failure-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/nat-gateway (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.nat-gateway/delete-time :portkey.aws.ec2.-2016-11-15/provisioned-bandwidth :portkey.aws.ec2.-2016-11-15.nat-gateway/subnet-id :portkey.aws.ec2.-2016-11-15.nat-gateway/nat-gateway-id :portkey.aws.ec2.-2016-11-15.nat-gateway/tags :portkey.aws.ec2.-2016-11-15.nat-gateway/failure-message :portkey.aws.ec2.-2016-11-15.nat-gateway/vpc-id :portkey.aws.ec2.-2016-11-15.nat-gateway/nat-gateway-addresses :portkey.aws.ec2.-2016-11-15.nat-gateway/create-time :portkey.aws.ec2.-2016-11-15.nat-gateway/state :portkey.aws.ec2.-2016-11-15.nat-gateway/failure-code]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-customer-gateway-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/customer-gateway]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-hosts-result/hosts (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/host-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-hosts-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-hosts-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-hosts-result/hosts :portkey.aws.ec2.-2016-11-15.describe-hosts-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/elastic-gpu-status #{"OK" :ok :impaired "IMPAIRED"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fpga-image-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fpga-image-attribute-request/fpga-image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fpga-image-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fpga-image-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-fpga-image-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.describe-fpga-image-attribute-request/fpga-image-id :portkey.aws.ec2.-2016-11-15.describe-fpga-image-attribute-request/attribute] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-fpga-image-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-iam-instance-profile-specification/arn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-iam-instance-profile-specification/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-iam-instance-profile-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.launch-template-iam-instance-profile-specification/arn :portkey.aws.ec2.-2016-11-15.launch-template-iam-instance-profile-specification/name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-instance-status/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-instance-status/message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-instance-status/update-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/spot-instance-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.spot-instance-status/code :portkey.aws.ec2.-2016-11-15.spot-instance-status/message :portkey.aws.ec2.-2016-11-15.spot-instance-status/update-time]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-launch-template-versions-response-success-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/delete-launch-template-versions-response-success-item))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.enable-vpc-classic-link-dns-support-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/enable-vpc-classic-link-dns-support-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.enable-vpc-classic-link-dns-support-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.tag-description/key (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.tag-description/resource-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.tag-description/value (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/tag-description (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.tag-description/key :portkey.aws.ec2.-2016-11-15.tag-description/resource-id :portkey.aws.ec2.-2016-11-15/resource-type :portkey.aws.ec2.-2016-11-15.tag-description/value]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-launch-template-versions-result/launch-template-versions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-version-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-launch-template-versions-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-launch-template-versions-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-launch-template-versions-result/launch-template-versions :portkey.aws.ec2.-2016-11-15.describe-launch-template-versions-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/account-attribute-value-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/account-attribute-value))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.update-security-group-rule-descriptions-ingress-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.update-security-group-rule-descriptions-ingress-request/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.update-security-group-rule-descriptions-ingress-request/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.update-security-group-rule-descriptions-ingress-request/ip-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/ip-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/update-security-group-rule-descriptions-ingress-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.update-security-group-rule-descriptions-ingress-request/ip-permissions] :opt-un [:portkey.aws.ec2.-2016-11-15.update-security-group-rule-descriptions-ingress-request/dry-run :portkey.aws.ec2.-2016-11-15.update-security-group-rule-descriptions-ingress-request/group-id :portkey.aws.ec2.-2016-11-15.update-security-group-rule-descriptions-ingress-request/group-name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-peering-connection-options-request/accepter-peering-connection-options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/peering-connection-options-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-peering-connection-options-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-peering-connection-options-request/requester-peering-connection-options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/peering-connection-options-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-peering-connection-options-request/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-vpc-peering-connection-options-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.modify-vpc-peering-connection-options-request/vpc-peering-connection-id] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-vpc-peering-connection-options-request/accepter-peering-connection-options :portkey.aws.ec2.-2016-11-15.modify-vpc-peering-connection-options-request/dry-run :portkey.aws.ec2.-2016-11-15.modify-vpc-peering-connection-options-request/requester-peering-connection-options]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/import-snapshot-task-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/import-snapshot-task))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.dhcp-options/dhcp-configurations (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/dhcp-configuration-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.dhcp-options/dhcp-options-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.dhcp-options/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/dhcp-options (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.dhcp-options/dhcp-configurations :portkey.aws.ec2.-2016-11-15.dhcp-options/dhcp-options-id :portkey.aws.ec2.-2016-11-15.dhcp-options/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-ipv-6-address-list-request (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/instance-ipv-6-address-request))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/spot-instance-interruption-behavior #{"stop" :terminate "hibernate" "terminate" :stop :hibernate})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-monitoring-enabled/enabled (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/run-instances-monitoring-enabled (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.run-instances-monitoring-enabled/enabled] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/user-id-group-pair-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/user-id-group-pair))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-password-data-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-password-data-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/get-password-data-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.get-password-data-request/instance-id] :opt-un [:portkey.aws.ec2.-2016-11-15.get-password-data-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-service-configuration-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-service-configuration-request/acceptance-required (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-service-configuration-request/network-load-balancer-arns (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-service-configuration-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-vpc-endpoint-service-configuration-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-service-configuration-request/network-load-balancer-arns] :opt-un [:portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-service-configuration-request/dry-run :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-service-configuration-request/acceptance-required :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-service-configuration-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/disk-image-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/disk-image))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/tag-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/tag))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.client-data/comment (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.client-data/upload-end (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.client-data/upload-size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.client-data/upload-start (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/client-data (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.client-data/comment :portkey.aws.ec2.-2016-11-15.client-data/upload-end :portkey.aws.ec2.-2016-11-15.client-data/upload-size :portkey.aws.ec2.-2016-11-15.client-data/upload-start]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/network-acl-association-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/network-acl-association))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-volume-attribute-request/auto-enable-io (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-volume-attribute-request/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-volume-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-volume-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.modify-volume-attribute-request/volume-id] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-volume-attribute-request/auto-enable-io :portkey.aws.ec2.-2016-11-15.modify-volume-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-identity-id-format-request/principal-arn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-identity-id-format-request/resource (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-identity-id-format-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.describe-identity-id-format-request/principal-arn] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-identity-id-format-request/resource]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-launch-template-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/launch-template]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image-disk-container/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image-disk-container/device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image-disk-container/format (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image-disk-container/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image-disk-container/url (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/image-disk-container (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.image-disk-container/description :portkey.aws.ec2.-2016-11-15.image-disk-container/device-name :portkey.aws.ec2.-2016-11-15.image-disk-container/format :portkey.aws.ec2.-2016-11-15.image-disk-container/snapshot-id :portkey.aws.ec2.-2016-11-15.image-disk-container/url :portkey.aws.ec2.-2016-11-15/user-bucket]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/product-code-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/product-code))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-datafeed-subscription-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-spot-datafeed-subscription-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-spot-datafeed-subscription-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/volume-status-info-status #{:insufficientdata "impaired" :ok "insufficient-data" :impaired "ok"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/valid-from (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/instance-pools-to-use-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/spot-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/iam-fleet-role (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/launch-template-configs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-config-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/target-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/fulfilled-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/terminate-instances-with-expiration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/on-demand-fulfilled-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/launch-specifications (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-specs-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/replace-unhealthy-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/on-demand-target-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/valid-until (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/spot-fleet-request-config-data (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/iam-fleet-role :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/target-capacity] :opt-un [:portkey.aws.ec2.-2016-11-15/on-demand-allocation-strategy :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/type :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/valid-from :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/instance-pools-to-use-count :portkey.aws.ec2.-2016-11-15/excess-capacity-termination-policy :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/spot-price :portkey.aws.ec2.-2016-11-15/allocation-strategy :portkey.aws.ec2.-2016-11-15/instance-interruption-behavior :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/launch-template-configs :portkey.aws.ec2.-2016-11-15/load-balancers-config :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/fulfilled-capacity :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/terminate-instances-with-expiration :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/on-demand-fulfilled-capacity :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/client-token :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/launch-specifications :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/replace-unhealthy-instances :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/on-demand-target-capacity :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config-data/valid-until]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-network-acl-entry-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-network-acl-entry-request/network-acl-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-network-acl-entry-request/rule-number (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-network-acl-entry-request/egress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-network-acl-entry-request/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-network-acl-entry-request/ipv-6-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-network-acl-entry-request/protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-network-acl-entry-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-network-acl-entry-request/egress :portkey.aws.ec2.-2016-11-15.create-network-acl-entry-request/network-acl-id :portkey.aws.ec2.-2016-11-15.create-network-acl-entry-request/protocol :portkey.aws.ec2.-2016-11-15/rule-action :portkey.aws.ec2.-2016-11-15.create-network-acl-entry-request/rule-number] :opt-un [:portkey.aws.ec2.-2016-11-15.create-network-acl-entry-request/dry-run :portkey.aws.ec2.-2016-11-15/icmp-type-code :portkey.aws.ec2.-2016-11-15.create-network-acl-entry-request/cidr-block :portkey.aws.ec2.-2016-11-15.create-network-acl-entry-request/ipv-6-cidr-block :portkey.aws.ec2.-2016-11-15/port-range]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-overrides/spot-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-overrides/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-overrides/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-overrides/weighted-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-overrides/priority (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-overrides (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/instance-type :portkey.aws.ec2.-2016-11-15.launch-template-overrides/spot-price :portkey.aws.ec2.-2016-11-15.launch-template-overrides/subnet-id :portkey.aws.ec2.-2016-11-15.launch-template-overrides/availability-zone :portkey.aws.ec2.-2016-11-15.launch-template-overrides/weighted-capacity :portkey.aws.ec2.-2016-11-15.launch-template-overrides/priority]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volumes-modifications-result/volumes-modifications (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/volume-modification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volumes-modifications-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-volumes-modifications-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-volumes-modifications-result/volumes-modifications :portkey.aws.ec2.-2016-11-15.describe-volumes-modifications-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-market-options-request/spot-options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-spot-market-options-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-instance-market-options-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/market-type :portkey.aws.ec2.-2016-11-15.launch-template-instance-market-options-request/spot-options]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host-offering/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host-offering/duration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host-offering/hourly-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host-offering/instance-family (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host-offering/offering-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host-offering/upfront-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/host-offering (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.host-offering/currency-code :portkey.aws.ec2.-2016-11-15.host-offering/duration :portkey.aws.ec2.-2016-11-15.host-offering/hourly-price :portkey.aws.ec2.-2016-11-15.host-offering/instance-family :portkey.aws.ec2.-2016-11-15.host-offering/offering-id :portkey.aws.ec2.-2016-11-15/payment-option :portkey.aws.ec2.-2016-11-15.host-offering/upfront-price]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/unsuccessful-instance-credit-specification-error-code #{:invalid-instance-id-malformed :incorrect-instance-state "InvalidInstanceID.Malformed" "InstanceCreditSpecification.NotSupported" :invalid-instance-id-not-found "InvalidInstanceID.NotFound" "IncorrectInstanceState" :instance-credit-specification-not-supported})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.accept-vpc-endpoint-connections-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.accept-vpc-endpoint-connections-request/service-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.accept-vpc-endpoint-connections-request/vpc-endpoint-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/accept-vpc-endpoint-connections-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.accept-vpc-endpoint-connections-request/service-id :portkey.aws.ec2.-2016-11-15.accept-vpc-endpoint-connections-request/vpc-endpoint-ids] :opt-un [:portkey.aws.ec2.-2016-11-15.accept-vpc-endpoint-connections-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/conversion-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-key-pair-request/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-key-pair-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-key-pair-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-key-pair-request/key-name] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-key-pair-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/listing-state #{:pending "sold" :sold "cancelled" :cancelled :available "pending" "available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/volume-status-events-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/volume-status-event))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/datafeed-subscription-state #{:inactive "Active" "Inactive" :active})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.service-detail/service-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.service-detail/service-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/service-type-detail-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.service-detail/availability-zones (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.service-detail/owner (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.service-detail/base-endpoint-dns-names (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.service-detail/private-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.service-detail/vpc-endpoint-policy-supported (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.service-detail/acceptance-required (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/service-detail (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.service-detail/service-name :portkey.aws.ec2.-2016-11-15.service-detail/service-type :portkey.aws.ec2.-2016-11-15.service-detail/availability-zones :portkey.aws.ec2.-2016-11-15.service-detail/owner :portkey.aws.ec2.-2016-11-15.service-detail/base-endpoint-dns-names :portkey.aws.ec2.-2016-11-15.service-detail/private-dns-name :portkey.aws.ec2.-2016-11-15.service-detail/vpc-endpoint-policy-supported :portkey.aws.ec2.-2016-11-15.service-detail/acceptance-required]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.stop-instances-result/stopping-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-state-change-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/stop-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.stop-instances-result/stopping-instances]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/network-interface-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/network-interface))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cancel-batch-error-code #{:fleet-request-id-does-not-exist "fleetRequestIdDoesNotExist" "unexpectedError" "fleetRequestIdMalformed" :fleet-request-not-in-cancellable-state "fleetRequestNotInCancellableState" :fleet-request-id-malformed :unexpected-error})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoints-result/vpc-endpoints (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-endpoint-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoints-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoints-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-vpc-endpoints-result/vpc-endpoints :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoints-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.deregister-image-request/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.deregister-image-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/deregister-image-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.deregister-image-request/image-id] :opt-un [:portkey.aws.ec2.-2016-11-15.deregister-image-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.target-configuration/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.target-configuration/offering-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/target-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.target-configuration/instance-count :portkey.aws.ec2.-2016-11-15.target-configuration/offering-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/allocation-strategy #{"lowestPrice" :diversified :lowest-price "diversified"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/status-name #{:reachability "reachability"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-status-event/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-status-event/event-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-status-event/event-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-status-event/not-after (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-status-event/not-before (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/volume-status-event (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.volume-status-event/description :portkey.aws.ec2.-2016-11-15.volume-status-event/event-id :portkey.aws.ec2.-2016-11-15.volume-status-event/event-type :portkey.aws.ec2.-2016-11-15.volume-status-event/not-after :portkey.aws.ec2.-2016-11-15.volume-status-event/not-before]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/target-reservation-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/reservation-value :portkey.aws.ec2.-2016-11-15/target-configuration]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-launch-template-data-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-launch-template-data-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/get-launch-template-data-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.get-launch-template-data-request/instance-id] :opt-un [:portkey.aws.ec2.-2016-11-15.get-launch-template-data-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-vpc-endpoints-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-vpc-endpoints-request/vpc-endpoint-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-vpc-endpoints-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-vpc-endpoints-request/vpc-endpoint-ids] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-vpc-endpoints-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reserved-intances-ids (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/reserved-instances-id))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase-scheduled-instances-result/scheduled-instance-set (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/purchased-scheduled-instance-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/purchase-scheduled-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.purchase-scheduled-instances-result/scheduled-instance-set]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-fpga-image-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-fpga-image-request/source-fpga-image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-fpga-image-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-fpga-image-request/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-fpga-image-request/source-region (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-fpga-image-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/copy-fpga-image-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.copy-fpga-image-request/source-fpga-image-id :portkey.aws.ec2.-2016-11-15.copy-fpga-image-request/source-region] :opt-un [:portkey.aws.ec2.-2016-11-15.copy-fpga-image-request/dry-run :portkey.aws.ec2.-2016-11-15.copy-fpga-image-request/description :portkey.aws.ec2.-2016-11-15.copy-fpga-image-request/name :portkey.aws.ec2.-2016-11-15.copy-fpga-image-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.attribute-value/value (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/attribute-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.attribute-value/value]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-block-device-mapping-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/launch-template-block-device-mapping))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-dhcp-options-request/dhcp-configurations (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/new-dhcp-configuration-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-dhcp-options-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-dhcp-options-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-dhcp-options-request/dhcp-configurations] :opt-un [:portkey.aws.ec2.-2016-11-15.create-dhcp-options-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-acl-association/network-acl-association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-acl-association/network-acl-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-acl-association/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/network-acl-association (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.network-acl-association/network-acl-association-id :portkey.aws.ec2.-2016-11-15.network-acl-association/network-acl-id :portkey.aws.ec2.-2016-11-15.network-acl-association/subnet-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/private-ip-address-specification-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/private-ip-address-specification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/auto-placement #{"off" "on" :off :on})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-tag-specification-request-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/launch-template-tag-specification-request))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-addresses-result/addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/address-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-addresses-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-addresses-result/addresses]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase-host-reservation-result/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase-host-reservation-result/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase-host-reservation-result/purchase (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/purchase-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase-host-reservation-result/total-hourly-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase-host-reservation-result/total-upfront-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/purchase-host-reservation-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.purchase-host-reservation-result/client-token :portkey.aws.ec2.-2016-11-15.purchase-host-reservation-result/currency-code :portkey.aws.ec2.-2016-11-15.purchase-host-reservation-result/purchase :portkey.aws.ec2.-2016-11-15.purchase-host-reservation-result/total-hourly-price :portkey.aws.ec2.-2016-11-15.purchase-host-reservation-result/total-upfront-price]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-prefix-lists-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-prefix-lists-result/prefix-lists (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/prefix-list-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-prefix-lists-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-prefix-lists-result/next-token :portkey.aws.ec2.-2016-11-15.describe-prefix-lists-result/prefix-lists]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-route-tables-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-route-tables-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-route-tables-request/route-table-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-route-tables-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-route-tables-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-route-tables-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-route-tables-request/filters :portkey.aws.ec2.-2016-11-15.describe-route-tables-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-route-tables-request/route-table-ids :portkey.aws.ec2.-2016-11-15.describe-route-tables-request/next-token :portkey.aws.ec2.-2016-11-15.describe-route-tables-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/prefix-list-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/prefix-list-id))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-identity-id-format-result/statuses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/id-format-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-identity-id-format-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-identity-id-format-result/statuses]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/availability-zone-message-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/availability-zone-message))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-launch-template-version-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-launch-template-version-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-launch-template-version-request/launch-template-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-launch-template-version-request/source-version (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-launch-template-version-request/launch-template-data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/request-launch-template-data))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-launch-template-version-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-launch-template-version-request/launch-template-data] :opt-un [:portkey.aws.ec2.-2016-11-15.create-launch-template-version-request/dry-run :portkey.aws.ec2.-2016-11-15.create-launch-template-version-request/client-token :portkey.aws.ec2.-2016-11-15.create-launch-template-version-request/launch-template-id :portkey.aws.ec2.-2016-11-15/launch-template-name :portkey.aws.ec2.-2016-11-15.create-launch-template-version-request/source-version :portkey.aws.ec2.-2016-11-15/version-description]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-connection-notifications-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-connection-notifications-request/connection-notification-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-connection-notifications-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-connection-notifications-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-connection-notifications-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-connection-notifications-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-connection-notifications-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-connection-notifications-request/connection-notification-id :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-connection-notifications-request/filters :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-connection-notifications-request/max-results :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-connection-notifications-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-attribute-name #{:enable-dns-support :enable-dns-hostnames "enableDnsHostnames" "enableDnsSupport"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-fleet-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-fleet-request/excess-capacity-termination-policy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-excess-capacity-termination-policy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-fleet-request/fleet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-identifier))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-fleet-request/target-capacity-specification (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/target-capacity-specification-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-fleet-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.modify-fleet-request/fleet-id :portkey.aws.ec2.-2016-11-15.modify-fleet-request/target-capacity-specification] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-fleet-request/dry-run :portkey.aws.ec2.-2016-11-15.modify-fleet-request/excess-capacity-termination-policy]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/history-records (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/history-record))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-spot-datafeed-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/spot-datafeed-subscription]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-instance-export-task-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-instance-export-task-request/export-to-s-3-task (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/export-to-s-3-task-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-instance-export-task-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-instance-export-task-request/target-environment (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/export-environment))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-instance-export-task-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-instance-export-task-request/instance-id] :opt-un [:portkey.aws.ec2.-2016-11-15.create-instance-export-task-request/description :portkey.aws.ec2.-2016-11-15.create-instance-export-task-request/export-to-s-3-task :portkey.aws.ec2.-2016-11-15.create-instance-export-task-request/target-environment]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-block-device-mapping-specification-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/instance-block-device-mapping-specification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/tag-description-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/tag-description))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.load-permission-request/group (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/permission-group))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.load-permission-request/user-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/load-permission-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.load-permission-request/group :portkey.aws.ec2.-2016-11-15.load-permission-request/user-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-tags-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-tags-request/resources (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/resource-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-tags-request/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-tags-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-tags-request/resources :portkey.aws.ec2.-2016-11-15.create-tags-request/tags] :opt-un [:portkey.aws.ec2.-2016-11-15.create-tags-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleet-history-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleet-history-request/event-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-event-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleet-history-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleet-history-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleet-history-request/fleet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-identifier))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleet-history-request/start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-fleet-history-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.describe-fleet-history-request/fleet-id :portkey.aws.ec2.-2016-11-15.describe-fleet-history-request/start-time] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-fleet-history-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-fleet-history-request/event-type :portkey.aws.ec2.-2016-11-15.describe-fleet-history-request/max-results :portkey.aws.ec2.-2016-11-15.describe-fleet-history-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/product-code-values #{"marketplace" :devpay :marketplace "devpay"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-launch-template-config/launch-template-specification (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-launch-template-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-launch-template-config/overrides (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-launch-template-overrides-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fleet-launch-template-config (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.fleet-launch-template-config/launch-template-specification :portkey.aws.ec2.-2016-11-15.fleet-launch-template-config/overrides]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-reserved-instances-listing-request/reserved-instances-listing-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cancel-reserved-instances-listing-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.cancel-reserved-instances-listing-request/reserved-instances-listing-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-health-status #{"healthy" :unhealthy :healthy "unhealthy"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/purchase-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/purchase))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.attach-vpn-gateway-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.attach-vpn-gateway-request/vpn-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.attach-vpn-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/attach-vpn-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.attach-vpn-gateway-request/vpc-id :portkey.aws.ec2.-2016-11-15.attach-vpn-gateway-request/vpn-gateway-id] :opt-un [:portkey.aws.ec2.-2016-11-15.attach-vpn-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.ipv-6-cidr-block/ipv-6-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/ipv-6-cidr-block (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.ipv-6-cidr-block/ipv-6-cidr-block]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/import-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/conversion-task]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fpga-image-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/placement-strategy #{"cluster" :cluster :spread "spread"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-spot-fleet-requests-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-spot-fleet-requests-request/spot-fleet-request-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-spot-fleet-requests-request/terminate-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cancel-spot-fleet-requests-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.cancel-spot-fleet-requests-request/spot-fleet-request-ids :portkey.aws.ec2.-2016-11-15.cancel-spot-fleet-requests-request/terminate-instances] :opt-un [:portkey.aws.ec2.-2016-11-15.cancel-spot-fleet-requests-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-route-table-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-route-table-request/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-route-table-request/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/associate-route-table-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.associate-route-table-request/route-table-id :portkey.aws.ec2.-2016-11-15.associate-route-table-request/subnet-id] :opt-un [:portkey.aws.ec2.-2016-11-15.associate-route-table-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/user-group-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-vpc-cidr-block-result/ipv-6-cidr-block-association (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-ipv-6-cidr-block-association))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-vpc-cidr-block-result/cidr-block-association (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-cidr-block-association))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-vpc-cidr-block-result/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/associate-vpc-cidr-block-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.associate-vpc-cidr-block-result/ipv-6-cidr-block-association :portkey.aws.ec2.-2016-11-15.associate-vpc-cidr-block-result/cidr-block-association :portkey.aws.ec2.-2016-11-15.associate-vpc-cidr-block-result/vpc-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/internet-gateway-attachment-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/internet-gateway-attachment))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-key-pairs-result/key-pairs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/key-pair-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-key-pairs-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-key-pairs-result/key-pairs]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-internet-gateways-result/internet-gateways (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/internet-gateway-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-internet-gateways-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-internet-gateways-result/internet-gateways]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-classic-link-dns-support-result/vpcs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/classic-link-dns-support-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpc-classic-link-dns-support-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/next-token :portkey.aws.ec2.-2016-11-15.describe-vpc-classic-link-dns-support-result/vpcs]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.detach-internet-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.detach-internet-gateway-request/internet-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.detach-internet-gateway-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/detach-internet-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.detach-internet-gateway-request/internet-gateway-id :portkey.aws.ec2.-2016-11-15.detach-internet-gateway-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-11-15.detach-internet-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-ebs/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-ebs/encrypted (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-ebs/iops (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-ebs/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-ebs/volume-size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-ebs/volume-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/scheduled-instances-ebs (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.scheduled-instances-ebs/delete-on-termination :portkey.aws.ec2.-2016-11-15.scheduled-instances-ebs/encrypted :portkey.aws.ec2.-2016-11-15.scheduled-instances-ebs/iops :portkey.aws.ec2.-2016-11-15.scheduled-instances-ebs/snapshot-id :portkey.aws.ec2.-2016-11-15.scheduled-instances-ebs/volume-size :portkey.aws.ec2.-2016-11-15.scheduled-instances-ebs/volume-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-id-format-result/statuses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/id-format-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-id-format-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-id-format-result/statuses]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-status-info/details (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/volume-status-details-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-status-info/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/volume-status-info-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/volume-status-info (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.volume-status-info/details :portkey.aws.ec2.-2016-11-15.volume-status-info/status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-capacity/available-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-capacity/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-capacity/total-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-capacity (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.instance-capacity/available-capacity :portkey.aws.ec2.-2016-11-15.instance-capacity/instance-type :portkey.aws.ec2.-2016-11-15.instance-capacity/total-capacity]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-block-device-mapping/device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-block-device-mapping/ebs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/ebs-instance-block-device))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-block-device-mapping (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.instance-block-device-mapping/device-name :portkey.aws.ec2.-2016-11-15.instance-block-device-mapping/ebs]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/connection-notification-state #{"Disabled" :disabled "Enabled" :enabled})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/target-configuration-request-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/target-configuration-request))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-snapshot-attribute-result/create-volume-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-volume-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-snapshot-attribute-result/product-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/product-code-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-snapshot-attribute-result/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-snapshot-attribute-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-snapshot-attribute-result/create-volume-permissions :portkey.aws.ec2.-2016-11-15.describe-snapshot-attribute-result/product-codes :portkey.aws.ec2.-2016-11-15.describe-snapshot-attribute-result/snapshot-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-interruption-behavior #{"stop" :terminate "hibernate" "terminate" :stop :hibernate})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-launch-template-version-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/launch-template-version]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/customer-gateway-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/customer-gateway))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-options/allocation-strategy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-allocation-strategy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-options/instance-interruption-behavior (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-instance-interruption-behavior))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-options/instance-pools-to-use-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/spot-options (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.spot-options/allocation-strategy :portkey.aws.ec2.-2016-11-15.spot-options/instance-interruption-behavior :portkey.aws.ec2.-2016-11-15.spot-options/instance-pools-to-use-count]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.classic-link-dns-support/classic-link-dns-supported (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.classic-link-dns-support/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/classic-link-dns-support (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.classic-link-dns-support/classic-link-dns-supported :portkey.aws.ec2.-2016-11-15.classic-link-dns-support/vpc-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-cidr-block-state-code #{:associating "associating" :associated "failed" "disassociated" :disassociated "associated" "failing" :failing :disassociating "disassociating" :failed})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.enable-volume-io-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.enable-volume-io-request/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/enable-volume-io-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.enable-volume-io-request/volume-id] :opt-un [:portkey.aws.ec2.-2016-11-15.enable-volume-io-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/monitoring-state #{:disabled :pending "enabled" :disabling "disabling" "disabled" "pending" :enabled})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reserved-instance-reservation-value-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/reserved-instance-reservation-value))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/volume-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-console-output-result/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-console-output-result/output (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-console-output-result/timestamp (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/get-console-output-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.get-console-output-result/instance-id :portkey.aws.ec2.-2016-11-15.get-console-output-result/output :portkey.aws.ec2.-2016-11-15.get-console-output-result/timestamp]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-subnet-request/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-subnet-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-subnet-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-subnet-request/subnet-id] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-subnet-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-vpc-cidr-block-request/amazon-provided-ipv-6-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-vpc-cidr-block-request/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-vpc-cidr-block-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/associate-vpc-cidr-block-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.associate-vpc-cidr-block-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-11-15.associate-vpc-cidr-block-request/amazon-provided-ipv-6-cidr-block :portkey.aws.ec2.-2016-11-15.associate-vpc-cidr-block-request/cidr-block]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-placement-groups-result/placement-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/placement-group-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-placement-groups-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-placement-groups-result/placement-groups]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/dhcp-options-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-vpc-peering-connection-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/vpc-peering-connection]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/scope #{"Availability Zone" :availability-zone :region "Region"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/network-interface-permission-state-code #{"granted" :pending :revoking :revoked "revoking" "revoked" :granted "pending"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reset-image-attribute-name #{"launchPermission" :launch-permission})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-hosts-result/successful (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/response-host-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-hosts-result/unsuccessful (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/unsuccessful-item-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-hosts-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-hosts-result/successful :portkey.aws.ec2.-2016-11-15.modify-hosts-result/unsuccessful]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/device-type #{:ebs "ebs" "instance-store" :instancestore})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-vpn-connection-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/vpn-connection]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/route-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/route))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.pricing-detail/count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.pricing-detail/price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/pricing-detail (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.pricing-detail/count :portkey.aws.ec2.-2016-11-15.pricing-detail/price]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-volume-task-details/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-volume-task-details/bytes-converted (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-volume-task-details/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-volume-task-details/image (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/disk-image-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-volume-task-details/volume (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/disk-image-volume-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/import-volume-task-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.import-volume-task-details/availability-zone :portkey.aws.ec2.-2016-11-15.import-volume-task-details/bytes-converted :portkey.aws.ec2.-2016-11-15.import-volume-task-details/description :portkey.aws.ec2.-2016-11-15.import-volume-task-details/image :portkey.aws.ec2.-2016-11-15.import-volume-task-details/volume]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/subnet-cidr-block-state-code #{:associating "associating" :associated "failed" "disassociated" :disassociated "associated" "failing" :failing :disassociating "disassociating" :failed})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-customer-gateways-result/customer-gateways (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/customer-gateway-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-customer-gateways-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-customer-gateways-result/customer-gateways]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fpga-image-state-code #{"failed" :pending :unavailable :available "unavailable" "pending" "available" :failed})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/security-group-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/scheduled-instances-security-group-id-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/placement (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/scheduled-instances-placement))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/monitoring (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/scheduled-instances-monitoring))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/scheduled-instances-block-device-mapping-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/user-data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/iam-instance-profile (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/scheduled-instances-iam-instance-profile))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/network-interfaces (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/scheduled-instances-network-interface-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/scheduled-instances-launch-specification (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/image-id] :opt-un [:portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/kernel-id :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/security-group-ids :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/placement :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/subnet-id :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/ebs-optimized :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/instance-type :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/key-name :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/monitoring :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/block-device-mappings :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/ramdisk-id :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/user-data :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/iam-instance-profile :portkey.aws.ec2.-2016-11-15.scheduled-instances-launch-specification/network-interfaces]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/product-description-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-account-attributes-result/account-attributes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/account-attribute-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-account-attributes-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-account-attributes-result/account-attributes]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.on-demand-options/allocation-strategy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-on-demand-allocation-strategy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/on-demand-options (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.on-demand-options/allocation-strategy]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/network-interface-status #{:associated "detaching" "in-use" "associated" :inuse "attaching" :attaching :available "available" :detaching})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-scheduled-instances-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-scheduled-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-scheduled-instances-result/next-token :portkey.aws.ec2.-2016-11-15/scheduled-instance-set]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-connection-notification-result/return-value (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-vpc-endpoint-connection-notification-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-connection-notification-result/return-value]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fleet-id-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/fleet-identifier))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-tunnel-options-specification/tunnel-inside-cidr (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-tunnel-options-specification/pre-shared-key (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpn-tunnel-options-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.vpn-tunnel-options-specification/tunnel-inside-cidr :portkey.aws.ec2.-2016-11-15.vpn-tunnel-options-specification/pre-shared-key]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-subnet-attribute-request/assign-ipv-6-address-on-creation (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-subnet-attribute-request/map-public-ip-on-launch (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-subnet-attribute-request/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-subnet-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.modify-subnet-attribute-request/subnet-id] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-subnet-attribute-request/assign-ipv-6-address-on-creation :portkey.aws.ec2.-2016-11-15.modify-subnet-attribute-request/map-public-ip-on-launch]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase-reserved-instances-offering-result/reserved-instances-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/purchase-reserved-instances-offering-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.purchase-reserved-instances-offering-result/reserved-instances-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-classic-link-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/vpc-classic-link))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disassociate-vpc-cidr-block-result/ipv-6-cidr-block-association (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-ipv-6-cidr-block-association))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disassociate-vpc-cidr-block-result/cidr-block-association (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-cidr-block-association))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disassociate-vpc-cidr-block-result/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/disassociate-vpc-cidr-block-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.disassociate-vpc-cidr-block-result/ipv-6-cidr-block-association :portkey.aws.ec2.-2016-11-15.disassociate-vpc-cidr-block-result/cidr-block-association :portkey.aws.ec2.-2016-11-15.disassociate-vpc-cidr-block-result/vpc-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/group-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot-disk-container/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot-disk-container/format (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot-disk-container/url (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/snapshot-disk-container (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.snapshot-disk-container/description :portkey.aws.ec2.-2016-11-15.snapshot-disk-container/format :portkey.aws.ec2.-2016-11-15.snapshot-disk-container/url :portkey.aws.ec2.-2016-11-15/user-bucket]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-spot-datafeed-subscription-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-spot-datafeed-subscription-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-spot-datafeed-subscription-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-credit-specification-list-request (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/instance-credit-specification-request))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-instances-result/spot-instance-requests (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-instance-request-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/request-spot-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.request-spot-instances-result/spot-instance-requests]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-data/type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-data/fleet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-identifier))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-data/fulfilled-on-demand-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-data/valid-from (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-data/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-data/excess-capacity-termination-policy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-excess-capacity-termination-policy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-data/launch-template-configs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-launch-template-config-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-data/fulfilled-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-data/create-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-data/fleet-state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-state-code))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-data/terminate-instances-with-expiration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-data/activity-status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-activity-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-data/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-data/replace-unhealthy-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-data/valid-until (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fleet-data (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.fleet-data/type :portkey.aws.ec2.-2016-11-15.fleet-data/fleet-id :portkey.aws.ec2.-2016-11-15.fleet-data/fulfilled-on-demand-capacity :portkey.aws.ec2.-2016-11-15.fleet-data/valid-from :portkey.aws.ec2.-2016-11-15.fleet-data/tags :portkey.aws.ec2.-2016-11-15.fleet-data/excess-capacity-termination-policy :portkey.aws.ec2.-2016-11-15/spot-options :portkey.aws.ec2.-2016-11-15.fleet-data/launch-template-configs :portkey.aws.ec2.-2016-11-15/on-demand-options :portkey.aws.ec2.-2016-11-15.fleet-data/fulfilled-capacity :portkey.aws.ec2.-2016-11-15.fleet-data/create-time :portkey.aws.ec2.-2016-11-15.fleet-data/fleet-state :portkey.aws.ec2.-2016-11-15.fleet-data/terminate-instances-with-expiration :portkey.aws.ec2.-2016-11-15/target-capacity-specification :portkey.aws.ec2.-2016-11-15.fleet-data/activity-status :portkey.aws.ec2.-2016-11-15.fleet-data/client-token :portkey.aws.ec2.-2016-11-15.fleet-data/replace-unhealthy-instances :portkey.aws.ec2.-2016-11-15.fleet-data/valid-until]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disassociate-vpc-cidr-block-request/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/disassociate-vpc-cidr-block-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.disassociate-vpc-cidr-block-request/association-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.price-schedule/active (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.price-schedule/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.price-schedule/price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.price-schedule/term (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/price-schedule (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.price-schedule/active :portkey.aws.ec2.-2016-11-15.price-schedule/currency-code :portkey.aws.ec2.-2016-11-15.price-schedule/price :portkey.aws.ec2.-2016-11-15.price-schedule/term]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-services-result/service-names (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-services-result/service-details (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/service-detail-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-services-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-services-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-services-result/service-names :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-services-result/service-details :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-services-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.update-security-group-rule-descriptions-egress-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.update-security-group-rule-descriptions-egress-request/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.update-security-group-rule-descriptions-egress-request/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.update-security-group-rule-descriptions-egress-request/ip-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/ip-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/update-security-group-rule-descriptions-egress-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.update-security-group-rule-descriptions-egress-request/ip-permissions] :opt-un [:portkey.aws.ec2.-2016-11-15.update-security-group-rule-descriptions-egress-request/dry-run :portkey.aws.ec2.-2016-11-15.update-security-group-rule-descriptions-egress-request/group-id :portkey.aws.ec2.-2016-11-15.update-security-group-rule-descriptions-egress-request/group-name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-security-group-references-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-security-group-references-request/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/group-ids))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-security-group-references-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.describe-security-group-references-request/group-id] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-security-group-references-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-placement-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-instance-placement-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-instance-placement-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.iam-instance-profile-association/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.iam-instance-profile-association/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.iam-instance-profile-association/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/iam-instance-profile-association-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.iam-instance-profile-association/timestamp (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/iam-instance-profile-association (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.iam-instance-profile-association/association-id :portkey.aws.ec2.-2016-11-15.iam-instance-profile-association/instance-id :portkey.aws.ec2.-2016-11-15/iam-instance-profile :portkey.aws.ec2.-2016-11-15.iam-instance-profile-association/state :portkey.aws.ec2.-2016-11-15.iam-instance-profile-association/timestamp]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpcs-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpcs-request/vpc-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpcs-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpcs-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-vpcs-request/filters :portkey.aws.ec2.-2016-11-15.describe-vpcs-request/vpc-ids :portkey.aws.ec2.-2016-11-15.describe-vpcs-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reserved-instance-state #{:retired :paymentfailed :paymentpending :active "payment-pending" "payment-failed" "active" "retired"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-route-request/destination-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-route-request/destination-ipv-6-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-route-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-route-request/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-route-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-route-request/route-table-id] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-route-request/destination-cidr-block :portkey.aws.ec2.-2016-11-15.delete-route-request/destination-ipv-6-cidr-block :portkey.aws.ec2.-2016-11-15.delete-route-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-services-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-services-request/service-names (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-services-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-services-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-services-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-services-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-services-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-services-request/service-names :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-services-request/filters :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-services-request/max-results :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-services-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/allocation-state #{"released" "released-permanent-failure" :underassessment :releasedpermanentfailure :released "permanent-failure" "under-assessment" :available :permanentfailure "available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reboot-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reboot-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reboot-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.reboot-instances-request/instance-ids] :opt-un [:portkey.aws.ec2.-2016-11-15.reboot-instances-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.connection-notification/connection-notification-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.connection-notification/service-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.connection-notification/vpc-endpoint-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.connection-notification/connection-notification-arn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.connection-notification/connection-events (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/connection-notification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.connection-notification/connection-notification-id :portkey.aws.ec2.-2016-11-15.connection-notification/service-id :portkey.aws.ec2.-2016-11-15.connection-notification/vpc-endpoint-id :portkey.aws.ec2.-2016-11-15/connection-notification-type :portkey.aws.ec2.-2016-11-15.connection-notification/connection-notification-arn :portkey.aws.ec2.-2016-11-15.connection-notification/connection-events :portkey.aws.ec2.-2016-11-15/connection-notification-state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-block-device-mapping/device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-block-device-mapping/virtual-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-block-device-mapping/ebs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-ebs-block-device))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-block-device-mapping/no-device (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-block-device-mapping (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.launch-template-block-device-mapping/device-name :portkey.aws.ec2.-2016-11-15.launch-template-block-device-mapping/virtual-name :portkey.aws.ec2.-2016-11-15.launch-template-block-device-mapping/ebs :portkey.aws.ec2.-2016-11-15.launch-template-block-device-mapping/no-device]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/export-task-state #{:completed "completed" "cancelling" "cancelled" :cancelled :active "active" :cancelling})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/log-destination-type #{:s-3 :cloudwatchlogs "cloud-watch-logs" "s3"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-state-change/current-state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-state-change/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-state-change/previous-state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-state-change (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.instance-state-change/current-state :portkey.aws.ec2.-2016-11-15.instance-state-change/instance-id :portkey.aws.ec2.-2016-11-15.instance-state-change/previous-state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-attribute-result/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-attribute-result/enable-dns-hostnames (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-attribute-result/enable-dns-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpc-attribute-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-vpc-attribute-result/vpc-id :portkey.aws.ec2.-2016-11-15.describe-vpc-attribute-result/enable-dns-hostnames :portkey.aws.ec2.-2016-11-15.describe-vpc-attribute-result/enable-dns-support]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.monitoring/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/monitoring-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/monitoring (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.monitoring/state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.elastic-gpu-health/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/elastic-gpu-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/elastic-gpu-health (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.elastic-gpu-health/status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-flow-logs-result/flow-logs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/flow-log-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-flow-logs-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-flow-logs-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-flow-logs-result/flow-logs :portkey.aws.ec2.-2016-11-15.describe-flow-logs-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-scheduled-instance-availability-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-scheduled-instance-availability-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-scheduled-instance-availability-result/next-token :portkey.aws.ec2.-2016-11-15/scheduled-instance-availability-set]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-network-acl-entry-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-network-acl-entry-request/network-acl-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-network-acl-entry-request/rule-number (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-network-acl-entry-request/egress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-network-acl-entry-request/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-network-acl-entry-request/ipv-6-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-network-acl-entry-request/protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/replace-network-acl-entry-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.replace-network-acl-entry-request/egress :portkey.aws.ec2.-2016-11-15.replace-network-acl-entry-request/network-acl-id :portkey.aws.ec2.-2016-11-15.replace-network-acl-entry-request/protocol :portkey.aws.ec2.-2016-11-15/rule-action :portkey.aws.ec2.-2016-11-15.replace-network-acl-entry-request/rule-number] :opt-un [:portkey.aws.ec2.-2016-11-15.replace-network-acl-entry-request/dry-run :portkey.aws.ec2.-2016-11-15/icmp-type-code :portkey.aws.ec2.-2016-11-15.replace-network-acl-entry-request/cidr-block :portkey.aws.ec2.-2016-11-15.replace-network-acl-entry-request/ipv-6-cidr-block :portkey.aws.ec2.-2016-11-15/port-range]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-vpc-endpoint-service-configurations-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-vpc-endpoint-service-configurations-request/service-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-vpc-endpoint-service-configurations-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-vpc-endpoint-service-configurations-request/service-ids] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-vpc-endpoint-service-configurations-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.event-information/event-description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.event-information/event-sub-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.event-information/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/event-information (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.event-information/event-description :portkey.aws.ec2.-2016-11-15.event-information/event-sub-type :portkey.aws.ec2.-2016-11-15.event-information/instance-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-instance-network-interface-specification-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/launch-template-instance-network-interface-specification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-vpc-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/vpc]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.allocate-address-result/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.allocate-address-result/allocation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.allocate-address-result/domain (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/domain-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/allocate-address-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.allocate-address-result/public-ip :portkey.aws.ec2.-2016-11-15.allocate-address-result/allocation-id :portkey.aws.ec2.-2016-11-15.allocate-address-result/domain]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-specs-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/spot-fleet-launch-specification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volumes-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volumes-request/volume-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/volume-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volumes-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volumes-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volumes-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-volumes-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-volumes-request/filters :portkey.aws.ec2.-2016-11-15.describe-volumes-request/volume-ids :portkey.aws.ec2.-2016-11-15.describe-volumes-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-volumes-request/max-results :portkey.aws.ec2.-2016-11-15.describe-volumes-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.unsuccessful-instance-credit-specification-item/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.unsuccessful-instance-credit-specification-item/error (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/unsuccessful-instance-credit-specification-item-error))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/unsuccessful-instance-credit-specification-item (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.unsuccessful-instance-credit-specification-item/instance-id :portkey.aws.ec2.-2016-11-15.unsuccessful-instance-credit-specification-item/error]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-ebs-block-device-request/encrypted (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-ebs-block-device-request/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-ebs-block-device-request/iops (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-ebs-block-device-request/kms-key-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-ebs-block-device-request/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-ebs-block-device-request/volume-size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-ebs-block-device-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.launch-template-ebs-block-device-request/encrypted :portkey.aws.ec2.-2016-11-15.launch-template-ebs-block-device-request/delete-on-termination :portkey.aws.ec2.-2016-11-15.launch-template-ebs-block-device-request/iops :portkey.aws.ec2.-2016-11-15.launch-template-ebs-block-device-request/kms-key-id :portkey.aws.ec2.-2016-11-15.launch-template-ebs-block-device-request/snapshot-id :portkey.aws.ec2.-2016-11-15.launch-template-ebs-block-device-request/volume-size :portkey.aws.ec2.-2016-11-15/volume-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-egress-only-internet-gateway-result/return-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-egress-only-internet-gateway-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-egress-only-internet-gateway-result/return-code]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-status-details/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/volume-status-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-status-details/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/volume-status-details (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.volume-status-details/name :portkey.aws.ec2.-2016-11-15.volume-status-details/status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/load-balancers-config (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/classic-load-balancers-config :portkey.aws.ec2.-2016-11-15/target-groups-config]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/integer clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.elastic-gpus/elastic-gpu-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.elastic-gpus/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.elastic-gpus/elastic-gpu-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.elastic-gpus/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/elastic-gpus (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.elastic-gpus/elastic-gpu-id :portkey.aws.ec2.-2016-11-15.elastic-gpus/availability-zone :portkey.aws.ec2.-2016-11-15.elastic-gpus/elastic-gpu-type :portkey.aws.ec2.-2016-11-15/elastic-gpu-health :portkey.aws.ec2.-2016-11-15/elastic-gpu-state :portkey.aws.ec2.-2016-11-15.elastic-gpus/instance-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.move-address-to-vpc-result/allocation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/move-address-to-vpc-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.move-address-to-vpc-result/allocation-id :portkey.aws.ec2.-2016-11-15/status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.classic-load-balancer/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/classic-load-balancer (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.classic-load-balancer/name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.ip-permission/from-port (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.ip-permission/ip-protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.ip-permission/ip-ranges (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/ip-range-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.ip-permission/ipv-6-ranges (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/ipv-6-range-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.ip-permission/prefix-list-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/prefix-list-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.ip-permission/to-port (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.ip-permission/user-id-group-pairs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/user-id-group-pair-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/ip-permission (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.ip-permission/from-port :portkey.aws.ec2.-2016-11-15.ip-permission/ip-protocol :portkey.aws.ec2.-2016-11-15.ip-permission/ip-ranges :portkey.aws.ec2.-2016-11-15.ip-permission/ipv-6-ranges :portkey.aws.ec2.-2016-11-15.ip-permission/prefix-list-ids :portkey.aws.ec2.-2016-11-15.ip-permission/to-port :portkey.aws.ec2.-2016-11-15.ip-permission/user-id-group-pairs]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/ip-permission-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/ip-permission))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-bundle-tasks-result/bundle-tasks (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/bundle-task-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-bundle-tasks-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-bundle-tasks-result/bundle-tasks]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.slot-date-time-range-request/earliest-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.slot-date-time-range-request/latest-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/slot-date-time-range-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.slot-date-time-range-request/earliest-time :portkey.aws.ec2.-2016-11-15.slot-date-time-range-request/latest-time] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-account-attributes-request/attribute-names (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/account-attribute-name-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-account-attributes-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-account-attributes-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-account-attributes-request/attribute-names :portkey.aws.ec2.-2016-11-15.describe-account-attributes-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.enable-vpc-classic-link-dns-support-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/enable-vpc-classic-link-dns-support-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.enable-vpc-classic-link-dns-support-request/vpc-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/ri-product-description #{"Windows (Amazon VPC)" :windows :linux-unix :windows-amazon-vpc :linux-unix-amazon-vpc "Windows" "Linux/UNIX" "Linux/UNIX (Amazon VPC)"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/volume-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/volume))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-endpoint-connection-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/vpc-endpoint-connection))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-snapshots-result/snapshots (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/snapshot-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-snapshots-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-snapshots-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-snapshots-result/snapshots :portkey.aws.ec2.-2016-11-15.describe-snapshots-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/dhcp-options-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/dhcp-options))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.unsuccessful-item/error (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/unsuccessful-item-error))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.unsuccessful-item/resource-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/unsuccessful-item (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.unsuccessful-item/error] :opt-un [:portkey.aws.ec2.-2016-11-15.unsuccessful-item/resource-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/principal-id-format-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/principal-id-format))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-tags-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-tags-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-tags-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-tags-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-tags-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-tags-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-tags-request/filters :portkey.aws.ec2.-2016-11-15.describe-tags-request/max-results :portkey.aws.ec2.-2016-11-15.describe-tags-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.attach-network-interface-request/device-index (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.attach-network-interface-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.attach-network-interface-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.attach-network-interface-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/attach-network-interface-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.attach-network-interface-request/device-index :portkey.aws.ec2.-2016-11-15.attach-network-interface-request/instance-id :portkey.aws.ec2.-2016-11-15.attach-network-interface-request/network-interface-id] :opt-un [:portkey.aws.ec2.-2016-11-15.attach-network-interface-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reserved-instance-id-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-spot-fleet-requests-success-item/current-spot-fleet-request-state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/batch-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-spot-fleet-requests-success-item/previous-spot-fleet-request-state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/batch-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-spot-fleet-requests-success-item/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cancel-spot-fleet-requests-success-item (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.cancel-spot-fleet-requests-success-item/current-spot-fleet-request-state :portkey.aws.ec2.-2016-11-15.cancel-spot-fleet-requests-success-item/previous-spot-fleet-request-state :portkey.aws.ec2.-2016-11-15.cancel-spot-fleet-requests-success-item/spot-fleet-request-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-config/launch-template-specification (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-launch-template-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-config/overrides (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-overrides-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-config (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.launch-template-config/launch-template-specification :portkey.aws.ec2.-2016-11-15.launch-template-config/overrides]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-network-interface-permission-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-network-interface-permission-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-network-interface-permission-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-network-interface-permission-request/network-interface-permission-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-network-interface-permission-request/force (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-network-interface-permission-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-network-interface-permission-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-network-interface-permission-request/network-interface-permission-id] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-network-interface-permission-request/force :portkey.aws.ec2.-2016-11-15.delete-network-interface-permission-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.release-hosts-request/host-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/request-host-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/release-hosts-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.release-hosts-request/host-ids] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-reserved-instances-exchange-quote-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-reserved-instances-exchange-quote-request/reserved-instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reserved-instance-id-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-reserved-instances-exchange-quote-request/target-configurations (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/target-configuration-request-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/get-reserved-instances-exchange-quote-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.get-reserved-instances-exchange-quote-request/reserved-instance-ids] :opt-un [:portkey.aws.ec2.-2016-11-15.get-reserved-instances-exchange-quote-request/dry-run :portkey.aws.ec2.-2016-11-15.get-reserved-instances-exchange-quote-request/target-configurations]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/propagating-vgw-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/propagating-vgw))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/disk-image-format #{"VHD" "VMDK" :vmdk :raw :vhd "RAW"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-attachment/attach-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-attachment/attachment-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-attachment/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-attachment/device-index (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-attachment/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-attachment/instance-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-attachment/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attachment-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/network-interface-attachment (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.network-interface-attachment/attach-time :portkey.aws.ec2.-2016-11-15.network-interface-attachment/attachment-id :portkey.aws.ec2.-2016-11-15.network-interface-attachment/delete-on-termination :portkey.aws.ec2.-2016-11-15.network-interface-attachment/device-index :portkey.aws.ec2.-2016-11-15.network-interface-attachment/instance-id :portkey.aws.ec2.-2016-11-15.network-interface-attachment/instance-owner-id :portkey.aws.ec2.-2016-11-15.network-interface-attachment/status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/scheduled-instances-network-interface-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/scheduled-instances-network-interface))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/security-group-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-fpga-image-result/fpga-image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-fpga-image-result/fpga-image-global-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-fpga-image-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.create-fpga-image-result/fpga-image-id :portkey.aws.ec2.-2016-11-15.create-fpga-image-result/fpga-image-global-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config/create-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config/spot-fleet-request-config (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-fleet-request-config-data))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config/spot-fleet-request-state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/batch-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/spot-fleet-request-config (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.spot-fleet-request-config/create-time :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config/spot-fleet-request-config :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config/spot-fleet-request-id :portkey.aws.ec2.-2016-11-15.spot-fleet-request-config/spot-fleet-request-state] :opt-un [:portkey.aws.ec2.-2016-11-15/activity-status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/domain-type #{"standard" "vpc" :vpc :standard})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vgw-telemetry/accepted-route-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vgw-telemetry/last-status-change (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vgw-telemetry/outside-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vgw-telemetry/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/telemetry-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vgw-telemetry/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vgw-telemetry (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.vgw-telemetry/accepted-route-count :portkey.aws.ec2.-2016-11-15.vgw-telemetry/last-status-change :portkey.aws.ec2.-2016-11-15.vgw-telemetry/outside-ip-address :portkey.aws.ec2.-2016-11-15.vgw-telemetry/status :portkey.aws.ec2.-2016-11-15.vgw-telemetry/status-message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cancel-spot-instance-request-state #{:open :closed :completed "completed" "closed" "cancelled" :cancelled :active "active" "open"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.report-instance-status-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.report-instance-status-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.report-instance-status-request/end-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.report-instance-status-request/instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.report-instance-status-request/reason-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reason-codes-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.report-instance-status-request/start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.report-instance-status-request/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/report-status-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/report-instance-status-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.report-instance-status-request/instances :portkey.aws.ec2.-2016-11-15.report-instance-status-request/reason-codes :portkey.aws.ec2.-2016-11-15.report-instance-status-request/status] :opt-un [:portkey.aws.ec2.-2016-11-15.report-instance-status-request/description :portkey.aws.ec2.-2016-11-15.report-instance-status-request/dry-run :portkey.aws.ec2.-2016-11-15.report-instance-status-request/end-time :portkey.aws.ec2.-2016-11-15.report-instance-status-request/start-time]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/subnet-ipv-6-cidr-block-association-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/subnet-ipv-6-cidr-block-association))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-flow-logs-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-flow-logs-request/resource-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-flow-logs-request/deliver-logs-permission-arn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-flow-logs-request/resource-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/flow-logs-resource-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-flow-logs-request/log-group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-flow-logs-request/log-destination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-flow-logs-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-flow-logs-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-flow-logs-request/resource-ids :portkey.aws.ec2.-2016-11-15.create-flow-logs-request/resource-type :portkey.aws.ec2.-2016-11-15/traffic-type] :opt-un [:portkey.aws.ec2.-2016-11-15.create-flow-logs-request/dry-run :portkey.aws.ec2.-2016-11-15.create-flow-logs-request/deliver-logs-permission-arn :portkey.aws.ec2.-2016-11-15/log-destination-type :portkey.aws.ec2.-2016-11-15.create-flow-logs-request/log-group-name :portkey.aws.ec2.-2016-11-15.create-flow-logs-request/log-destination :portkey.aws.ec2.-2016-11-15.create-flow-logs-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-images-request/executable-users (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/executable-by-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-images-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-images-request/image-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/image-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-images-request/owners (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/owner-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-images-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-images-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-images-request/executable-users :portkey.aws.ec2.-2016-11-15.describe-images-request/filters :portkey.aws.ec2.-2016-11-15.describe-images-request/image-ids :portkey.aws.ec2.-2016-11-15.describe-images-request/owners :portkey.aws.ec2.-2016-11-15.describe-images-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface/attachment (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/network-interface-attachment))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface/tag-set (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface/ipv-6-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/network-interface-ipv-6-addresses-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface/interface-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/network-interface-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface/mac-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface/source-dest-check (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/network-interface-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface/private-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface/requester-managed (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface/private-ip-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/network-interface-private-ip-address-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface/association (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/network-interface-association))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface/requester-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/network-interface (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.network-interface/attachment :portkey.aws.ec2.-2016-11-15.network-interface/tag-set :portkey.aws.ec2.-2016-11-15.network-interface/ipv-6-addresses :portkey.aws.ec2.-2016-11-15.network-interface/interface-type :portkey.aws.ec2.-2016-11-15.network-interface/subnet-id :portkey.aws.ec2.-2016-11-15.network-interface/owner-id :portkey.aws.ec2.-2016-11-15.network-interface/mac-address :portkey.aws.ec2.-2016-11-15.network-interface/network-interface-id :portkey.aws.ec2.-2016-11-15.network-interface/source-dest-check :portkey.aws.ec2.-2016-11-15.network-interface/availability-zone :portkey.aws.ec2.-2016-11-15.network-interface/status :portkey.aws.ec2.-2016-11-15.network-interface/private-dns-name :portkey.aws.ec2.-2016-11-15.network-interface/requester-managed :portkey.aws.ec2.-2016-11-15.network-interface/description :portkey.aws.ec2.-2016-11-15.network-interface/vpc-id :portkey.aws.ec2.-2016-11-15.network-interface/groups :portkey.aws.ec2.-2016-11-15.network-interface/private-ip-addresses :portkey.aws.ec2.-2016-11-15.network-interface/association :portkey.aws.ec2.-2016-11-15.network-interface/requester-id :portkey.aws.ec2.-2016-11-15.network-interface/private-ip-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-network-interface-attribute-request/attachment (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/network-interface-attachment-changes))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-network-interface-attribute-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-network-interface-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-network-interface-attribute-request/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/security-group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-network-interface-attribute-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-network-interface-attribute-request/source-dest-check (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-network-interface-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.modify-network-interface-attribute-request/network-interface-id] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-network-interface-attribute-request/attachment :portkey.aws.ec2.-2016-11-15.modify-network-interface-attribute-request/description :portkey.aws.ec2.-2016-11-15.modify-network-interface-attribute-request/dry-run :portkey.aws.ec2.-2016-11-15.modify-network-interface-attribute-request/groups :portkey.aws.ec2.-2016-11-15.modify-network-interface-attribute-request/source-dest-check]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-bundle-task-request/bundle-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-bundle-task-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cancel-bundle-task-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.cancel-bundle-task-request/bundle-id] :opt-un [:portkey.aws.ec2.-2016-11-15.cancel-bundle-task-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__27886__auto__] (clojure.core/<= 3 (clojure.core/count s__27886__auto__))) (clojure.core/fn [s__27887__auto__] (clojure.core/< (clojure.core/count s__27887__auto__) 128)) (clojure.core/fn [s__27888__auto__] (clojure.core/re-matches #"[a-zA-Z0-9\(\)\.-/_]+" s__27888__auto__))))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot/start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot/state-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot/encrypted (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot/owner-alias (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot/progress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot/data-encryption-key-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot/kms-key-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/snapshot-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot/volume-size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.snapshot/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/snapshot (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.snapshot/start-time :portkey.aws.ec2.-2016-11-15.snapshot/state-message :portkey.aws.ec2.-2016-11-15.snapshot/owner-id :portkey.aws.ec2.-2016-11-15.snapshot/encrypted :portkey.aws.ec2.-2016-11-15.snapshot/tags :portkey.aws.ec2.-2016-11-15.snapshot/owner-alias :portkey.aws.ec2.-2016-11-15.snapshot/progress :portkey.aws.ec2.-2016-11-15.snapshot/description :portkey.aws.ec2.-2016-11-15.snapshot/data-encryption-key-id :portkey.aws.ec2.-2016-11-15.snapshot/kms-key-id :portkey.aws.ec2.-2016-11-15.snapshot/volume-id :portkey.aws.ec2.-2016-11-15.snapshot/state :portkey.aws.ec2.-2016-11-15.snapshot/volume-size :portkey.aws.ec2.-2016-11-15.snapshot/snapshot-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/flow-logs-resource-type #{:network-interface "Subnet" :vpc "NetworkInterface" :subnet "VPC"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fleet-launch-template-overrides-list-request (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/fleet-launch-template-overrides-request :max-count 50))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/resource-type #{:networkacl :dedicatedhost "vpn-gateway" "subnet" :dhcpoptions "vpc" "dedicated-host" "spot-instances-request" :instance "route-table" "image" :securitygroup :vpngateway :routetable "snapshot" "vpn-connection" :reservedinstances :volume "internet-gateway" :vpnconnection :snapshot "reserved-instances" "instance" :vpc :spotinstancesrequest "network-interface" "security-group" "volume" "dhcp-options" :image :networkinterface "customer-gateway" :customergateway :subnet "network-acl" :internetgateway})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-status-event/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/event-code))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-status-event/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-status-event/not-after (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-status-event/not-before (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-status-event (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.instance-status-event/code :portkey.aws.ec2.-2016-11-15.instance-status-event/description :portkey.aws.ec2.-2016-11-15.instance-status-event/not-after :portkey.aws.ec2.-2016-11-15.instance-status-event/not-before]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-peering-connection-options-description/allow-dns-resolution-from-remote-vpc (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-peering-connection-options-description/allow-egress-from-local-classic-link-to-remote-vpc (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-peering-connection-options-description/allow-egress-from-local-vpc-to-remote-classic-link (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-peering-connection-options-description (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.vpc-peering-connection-options-description/allow-dns-resolution-from-remote-vpc :portkey.aws.ec2.-2016-11-15.vpc-peering-connection-options-description/allow-egress-from-local-classic-link-to-remote-vpc :portkey.aws.ec2.-2016-11-15.vpc-peering-connection-options-description/allow-egress-from-local-vpc-to-remote-classic-link]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-service-configuration-result/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-vpc-endpoint-service-configuration-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/service-configuration :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-service-configuration-result/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/volume-status-name #{:ioperformance :ioenabled "io-performance" "io-enabled"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.internet-gateway/attachments (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/internet-gateway-attachment-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.internet-gateway/internet-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.internet-gateway/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/internet-gateway (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.internet-gateway/attachments :portkey.aws.ec2.-2016-11-15.internet-gateway/internet-gateway-id :portkey.aws.ec2.-2016-11-15.internet-gateway/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-classic-link-instances-result/instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/classic-link-instance-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-classic-link-instances-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-classic-link-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-classic-link-instances-result/instances :portkey.aws.ec2.-2016-11-15.describe-classic-link-instances-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc/cidr-block-association-set (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-cidr-block-association-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc/instance-tenancy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tenancy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc/dhcp-options-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc/is-default (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc/ipv-6-cidr-block-association-set (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-ipv-6-cidr-block-association-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.vpc/cidr-block-association-set :portkey.aws.ec2.-2016-11-15.vpc/tags :portkey.aws.ec2.-2016-11-15.vpc/cidr-block :portkey.aws.ec2.-2016-11-15.vpc/instance-tenancy :portkey.aws.ec2.-2016-11-15.vpc/vpc-id :portkey.aws.ec2.-2016-11-15.vpc/state :portkey.aws.ec2.-2016-11-15.vpc/dhcp-options-id :portkey.aws.ec2.-2016-11-15.vpc/is-default :portkey.aws.ec2.-2016-11-15.vpc/ipv-6-cidr-block-association-set]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reset-image-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reset-image-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reset-image-attribute-request/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reset-image-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reset-image-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.reset-image-attribute-request/attribute :portkey.aws.ec2.-2016-11-15.reset-image-attribute-request/image-id] :opt-un [:portkey.aws.ec2.-2016-11-15.reset-image-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-import-task-request/cancel-reason (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-import-task-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-import-task-request/import-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cancel-import-task-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.cancel-import-task-request/cancel-reason :portkey.aws.ec2.-2016-11-15.cancel-import-task-request/dry-run :portkey.aws.ec2.-2016-11-15.cancel-import-task-request/import-task-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-tenancy-result/return-value (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-vpc-tenancy-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-vpc-tenancy-result/return-value]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/ipv-6-address-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/resource-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-credit-specification-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-credit-specification-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-credit-specification-request/instance-credit-specifications (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-credit-specification-list-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-instance-credit-specification-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.modify-instance-credit-specification-request/instance-credit-specifications] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-instance-credit-specification-request/dry-run :portkey.aws.ec2.-2016-11-15.modify-instance-credit-specification-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-classic-link-instances-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-classic-link-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-classic-link-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-classic-link-instances-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-classic-link-instances-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-classic-link-instances-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-classic-link-instances-request/filters :portkey.aws.ec2.-2016-11-15.describe-classic-link-instances-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-classic-link-instances-request/instance-ids :portkey.aws.ec2.-2016-11-15.describe-classic-link-instances-request/max-results :portkey.aws.ec2.-2016-11-15.describe-classic-link-instances-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/network-interface-permission-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/network-interface-permission))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/batch-state #{:cancelled-terminating :modifying :cancelled-running "cancelled_running" "failed" :submitted "cancelled" :cancelled :active "submitted" "modifying" "active" "cancelled_terminating" :failed})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/operation-type #{:remove "remove" "add" :add})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-default-vpc-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-default-vpc-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.create-default-vpc-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoints-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoints-request/vpc-endpoint-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoints-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoints-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoints-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoints-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-vpc-endpoints-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoints-request/vpc-endpoint-ids :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoints-request/filters :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoints-request/max-results :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoints-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-scheduled-instance-availability-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-scheduled-instance-availability-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-scheduled-instance-availability-request/first-slot-start-time-range (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/slot-date-time-range-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-scheduled-instance-availability-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-scheduled-instance-availability-request/max-slot-duration-in-hours (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-scheduled-instance-availability-request/min-slot-duration-in-hours (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-scheduled-instance-availability-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-scheduled-instance-availability-request/recurrence (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/scheduled-instance-recurrence-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-scheduled-instance-availability-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.describe-scheduled-instance-availability-request/first-slot-start-time-range :portkey.aws.ec2.-2016-11-15.describe-scheduled-instance-availability-request/recurrence] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-scheduled-instance-availability-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-scheduled-instance-availability-request/filters :portkey.aws.ec2.-2016-11-15.describe-scheduled-instance-availability-request/max-results :portkey.aws.ec2.-2016-11-15.describe-scheduled-instance-availability-request/max-slot-duration-in-hours :portkey.aws.ec2.-2016-11-15.describe-scheduled-instance-availability-request/min-slot-duration-in-hours :portkey.aws.ec2.-2016-11-15.describe-scheduled-instance-availability-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fleet-on-demand-allocation-strategy #{"prioritized" "lowest-price" :prioritized :lowestprice})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reservation-value/hourly-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reservation-value/remaining-total-value (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reservation-value/remaining-upfront-value (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reservation-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.reservation-value/hourly-price :portkey.aws.ec2.-2016-11-15.reservation-value/remaining-total-value :portkey.aws.ec2.-2016-11-15.reservation-value/remaining-upfront-value]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host-instance/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host-instance/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/host-instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.host-instance/instance-id :portkey.aws.ec2.-2016-11-15.host-instance/instance-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instances-result/reservations (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reservation-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instances-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-instances-result/reservations :portkey.aws.ec2.-2016-11-15.describe-instances-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/snapshot-attribute-name #{"productCodes" "createVolumePermission" :product-codes :create-volume-permission})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-cpu-options/core-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-cpu-options/threads-per-core (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-cpu-options (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.launch-template-cpu-options/core-count :portkey.aws.ec2.-2016-11-15.launch-template-cpu-options/threads-per-core]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/currency-code-values #{:usd "USD"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/network-interface-attribute #{:description "groupSet" :group-set :source-dest-check "attachment" "sourceDestCheck" "description" :attachment})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-task/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-task/import-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-task/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-task/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-task/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-task/progress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-task/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-task/snapshot-details (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/snapshot-detail-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-task/hypervisor (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-task/architecture (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-image-task/license-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/import-image-task (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.import-image-task/platform :portkey.aws.ec2.-2016-11-15.import-image-task/import-task-id :portkey.aws.ec2.-2016-11-15.import-image-task/image-id :portkey.aws.ec2.-2016-11-15.import-image-task/status-message :portkey.aws.ec2.-2016-11-15.import-image-task/status :portkey.aws.ec2.-2016-11-15.import-image-task/progress :portkey.aws.ec2.-2016-11-15.import-image-task/description :portkey.aws.ec2.-2016-11-15.import-image-task/snapshot-details :portkey.aws.ec2.-2016-11-15.import-image-task/hypervisor :portkey.aws.ec2.-2016-11-15.import-image-task/architecture :portkey.aws.ec2.-2016-11-15.import-image-task/license-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-customer-gateways-request/customer-gateway-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/customer-gateway-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-customer-gateways-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-customer-gateways-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-customer-gateways-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-customer-gateways-request/customer-gateway-ids :portkey.aws.ec2.-2016-11-15.describe-customer-gateways-request/filters :portkey.aws.ec2.-2016-11-15.describe-customer-gateways-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.load-permission/user-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.load-permission/group (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/permission-group))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/load-permission (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.load-permission/user-id :portkey.aws.ec2.-2016-11-15.load-permission/group]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.unassign-ipv-6-addresses-result/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.unassign-ipv-6-addresses-result/unassigned-ipv-6-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/ipv-6-address-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/unassign-ipv-6-addresses-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.unassign-ipv-6-addresses-result/network-interface-id :portkey.aws.ec2.-2016-11-15.unassign-ipv-6-addresses-result/unassigned-ipv-6-addresses]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/report-instance-reason-codes #{"password-not-available" "performance-instance-store" :other :performancenetwork :performanceebsvolume "not-accepting-credentials" "unresponsive" :performanceother :passwordnotavailable "other" "performance-ebs-volume" :notacceptingcredentials "instance-stuck-in-state" :performanceinstancestore "performance-network" :instancestuckinstate :unresponsive "performance-other"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/billing-product-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-host-reservation-offerings-request/filter (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-host-reservation-offerings-request/max-duration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-host-reservation-offerings-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-host-reservation-offerings-request/min-duration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-host-reservation-offerings-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-host-reservation-offerings-request/offering-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-host-reservation-offerings-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-host-reservation-offerings-request/filter :portkey.aws.ec2.-2016-11-15.describe-host-reservation-offerings-request/max-duration :portkey.aws.ec2.-2016-11-15.describe-host-reservation-offerings-request/max-results :portkey.aws.ec2.-2016-11-15.describe-host-reservation-offerings-request/min-duration :portkey.aws.ec2.-2016-11-15.describe-host-reservation-offerings-request/next-token :portkey.aws.ec2.-2016-11-15.describe-host-reservation-offerings-request/offering-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reset-snapshot-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/snapshot-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reset-snapshot-attribute-request/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reset-snapshot-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reset-snapshot-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.reset-snapshot-attribute-request/attribute :portkey.aws.ec2.-2016-11-15.reset-snapshot-attribute-request/snapshot-id] :opt-un [:portkey.aws.ec2.-2016-11-15.reset-snapshot-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/volume-status-details-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/volume-status-details))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fleet-launch-template-overrides-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/fleet-launch-template-overrides))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/summary-status #{:initializing :insufficientdata :notapplicable "impaired" "initializing" :ok "insufficient-data" :impaired "not-applicable" "ok"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleets-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleets-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleets-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleets-request/fleet-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-id-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleets-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-fleets-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-fleets-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-fleets-request/max-results :portkey.aws.ec2.-2016-11-15.describe-fleets-request/next-token :portkey.aws.ec2.-2016-11-15.describe-fleets-request/fleet-ids :portkey.aws.ec2.-2016-11-15.describe-fleets-request/filters]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-vpn-gateway-request/vpn-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-vpn-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-vpn-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-vpn-gateway-request/vpn-gateway-id] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-vpn-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-flow-logs-result/unsuccessful (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/unsuccessful-item-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-flow-logs-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-flow-logs-result/unsuccessful]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/bundle-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/egress-only-internet-gateway-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/egress-only-internet-gateway-id))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-launch-template-overrides/max-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-launch-template-overrides/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-launch-template-overrides/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-launch-template-overrides/weighted-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-launch-template-overrides/priority (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fleet-launch-template-overrides (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/instance-type :portkey.aws.ec2.-2016-11-15.fleet-launch-template-overrides/max-price :portkey.aws.ec2.-2016-11-15.fleet-launch-template-overrides/subnet-id :portkey.aws.ec2.-2016-11-15.fleet-launch-template-overrides/availability-zone :portkey.aws.ec2.-2016-11-15.fleet-launch-template-overrides/weighted-capacity :portkey.aws.ec2.-2016-11-15.fleet-launch-template-overrides/priority]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.attach-classic-link-vpc-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.attach-classic-link-vpc-request/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.attach-classic-link-vpc-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.attach-classic-link-vpc-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/attach-classic-link-vpc-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.attach-classic-link-vpc-request/groups :portkey.aws.ec2.-2016-11-15.attach-classic-link-vpc-request/instance-id :portkey.aws.ec2.-2016-11-15.attach-classic-link-vpc-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-11-15.attach-classic-link-vpc-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-snapshot-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/snapshot-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-snapshot-attribute-request/create-volume-permission (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-volume-permission-modifications))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-snapshot-attribute-request/group-names (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/group-name-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-snapshot-attribute-request/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-snapshot-attribute-request/user-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/user-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-snapshot-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-snapshot-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.modify-snapshot-attribute-request/snapshot-id] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-snapshot-attribute-request/attribute :portkey.aws.ec2.-2016-11-15.modify-snapshot-attribute-request/create-volume-permission :portkey.aws.ec2.-2016-11-15.modify-snapshot-attribute-request/group-names :portkey.aws.ec2.-2016-11-15/operation-type :portkey.aws.ec2.-2016-11-15.modify-snapshot-attribute-request/user-ids :portkey.aws.ec2.-2016-11-15.modify-snapshot-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/instance))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-fpga-image-attribute-request/user-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/user-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-fpga-image-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-fpga-image-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fpga-image-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-fpga-image-attribute-request/fpga-image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-fpga-image-attribute-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-fpga-image-attribute-request/load-permission (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/load-permission-modifications))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-fpga-image-attribute-request/product-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/product-code-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-fpga-image-attribute-request/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-fpga-image-attribute-request/user-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/user-group-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-fpga-image-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.modify-fpga-image-attribute-request/fpga-image-id] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-fpga-image-attribute-request/user-ids :portkey.aws.ec2.-2016-11-15.modify-fpga-image-attribute-request/dry-run :portkey.aws.ec2.-2016-11-15.modify-fpga-image-attribute-request/attribute :portkey.aws.ec2.-2016-11-15.modify-fpga-image-attribute-request/description :portkey.aws.ec2.-2016-11-15/operation-type :portkey.aws.ec2.-2016-11-15.modify-fpga-image-attribute-request/load-permission :portkey.aws.ec2.-2016-11-15.modify-fpga-image-attribute-request/product-codes :portkey.aws.ec2.-2016-11-15.modify-fpga-image-attribute-request/name :portkey.aws.ec2.-2016-11-15.modify-fpga-image-attribute-request/user-groups]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-fleet-response/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/request-spot-fleet-response (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.request-spot-fleet-response/spot-fleet-request-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-requests-response/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-requests-response/spot-fleet-request-configs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-fleet-request-config-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-spot-fleet-requests-response (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.describe-spot-fleet-requests-response/spot-fleet-request-configs] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-spot-fleet-requests-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/volume-type #{"standard" "sc1" "io1" :sc-1 :st-1 "gp2" "st1" :io-1 :standard :gp-2})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.customer-gateway/bgp-asn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.customer-gateway/customer-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.customer-gateway/ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.customer-gateway/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.customer-gateway/type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.customer-gateway/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/customer-gateway (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.customer-gateway/bgp-asn :portkey.aws.ec2.-2016-11-15.customer-gateway/customer-gateway-id :portkey.aws.ec2.-2016-11-15.customer-gateway/ip-address :portkey.aws.ec2.-2016-11-15.customer-gateway/state :portkey.aws.ec2.-2016-11-15.customer-gateway/type :portkey.aws.ec2.-2016-11-15.customer-gateway/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpn-connections-result/vpn-connections (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpn-connection-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpn-connections-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-vpn-connections-result/vpn-connections]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-permission/network-interface-permission-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-permission/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-permission/aws-account-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-permission/aws-service (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-permission/permission (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/interface-permission-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-permission/permission-state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/network-interface-permission-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/network-interface-permission (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.network-interface-permission/network-interface-permission-id :portkey.aws.ec2.-2016-11-15.network-interface-permission/network-interface-id :portkey.aws.ec2.-2016-11-15.network-interface-permission/aws-account-id :portkey.aws.ec2.-2016-11-15.network-interface-permission/aws-service :portkey.aws.ec2.-2016-11-15.network-interface-permission/permission :portkey.aws.ec2.-2016-11-15.network-interface-permission/permission-state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-service-configuration-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-service-configuration-request/service-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-service-configuration-request/acceptance-required (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-service-configuration-request/add-network-load-balancer-arns (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-service-configuration-request/remove-network-load-balancer-arns (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-vpc-endpoint-service-configuration-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-service-configuration-request/service-id] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-service-configuration-request/dry-run :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-service-configuration-request/acceptance-required :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-service-configuration-request/add-network-load-balancer-arns :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-service-configuration-request/remove-network-load-balancer-arns]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/response-host-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/account-attribute-name-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/account-attribute-name))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.target-capacity-specification-request/total-target-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.target-capacity-specification-request/on-demand-target-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.target-capacity-specification-request/spot-target-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/target-capacity-specification-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.target-capacity-specification-request/total-target-capacity] :opt-un [:portkey.aws.ec2.-2016-11-15.target-capacity-specification-request/on-demand-target-capacity :portkey.aws.ec2.-2016-11-15.target-capacity-specification-request/spot-target-capacity :portkey.aws.ec2.-2016-11-15/default-target-capacity-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/tunnel-options-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/vpn-tunnel-options-specification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-image-result/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/copy-image-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.copy-image-result/image-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-cidr-block-association/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-cidr-block-association/cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-cidr-block-association/cidr-block-state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-cidr-block-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-cidr-block-association (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.vpc-cidr-block-association/association-id :portkey.aws.ec2.-2016-11-15.vpc-cidr-block-association/cidr-block :portkey.aws.ec2.-2016-11-15.vpc-cidr-block-association/cidr-block-state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.accept-reserved-instances-exchange-quote-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.accept-reserved-instances-exchange-quote-request/reserved-instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reserved-instance-id-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.accept-reserved-instances-exchange-quote-request/target-configurations (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/target-configuration-request-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/accept-reserved-instances-exchange-quote-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.accept-reserved-instances-exchange-quote-request/reserved-instance-ids] :opt-un [:portkey.aws.ec2.-2016-11-15.accept-reserved-instances-exchange-quote-request/dry-run :portkey.aws.ec2.-2016-11-15.accept-reserved-instances-exchange-quote-request/target-configurations]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-launch-template-versions-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-launch-template-versions-request/launch-template-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-launch-template-versions-request/versions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/version-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-launch-template-versions-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-launch-template-versions-request/versions] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-launch-template-versions-request/dry-run :portkey.aws.ec2.-2016-11-15.delete-launch-template-versions-request/launch-template-id :portkey.aws.ec2.-2016-11-15/launch-template-name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/accept-vpc-peering-connection-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/vpc-peering-connection]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification/associate-public-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification/ipv-6-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-ipv-6-address-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification/device-index (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification/private-ip-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/private-ip-address-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification/secondary-private-ip-address-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification/ipv-6-address-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-instance-network-interface-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification/associate-public-ip-address :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification/ipv-6-addresses :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification/subnet-id :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification/network-interface-id :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification/device-index :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification/description :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification/groups :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification/delete-on-termination :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification/private-ip-addresses :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification/secondary-private-ip-address-count :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification/private-ip-address :portkey.aws.ec2.-2016-11-15.launch-template-instance-network-interface-specification/ipv-6-address-count]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/host-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/host))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.detach-volume-request/device (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.detach-volume-request/force (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.detach-volume-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.detach-volume-request/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.detach-volume-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/detach-volume-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.detach-volume-request/volume-id] :opt-un [:portkey.aws.ec2.-2016-11-15.detach-volume-request/device :portkey.aws.ec2.-2016-11-15.detach-volume-request/force :portkey.aws.ec2.-2016-11-15.detach-volume-request/instance-id :portkey.aws.ec2.-2016-11-15.detach-volume-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase-reserved-instances-offering-request/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase-reserved-instances-offering-request/reserved-instances-offering-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase-reserved-instances-offering-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase-reserved-instances-offering-request/limit-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reserved-instance-limit-price))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/purchase-reserved-instances-offering-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.purchase-reserved-instances-offering-request/instance-count :portkey.aws.ec2.-2016-11-15.purchase-reserved-instances-offering-request/reserved-instances-offering-id] :opt-un [:portkey.aws.ec2.-2016-11-15.purchase-reserved-instances-offering-request/dry-run :portkey.aws.ec2.-2016-11-15.purchase-reserved-instances-offering-request/limit-price]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/stale-security-group-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/stale-security-group))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/elastic-gpu-specification-response-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/elastic-gpu-specification-response))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-permission-modifications/add (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-permission-modifications/remove (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-permission-modifications (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.launch-permission-modifications/add :portkey.aws.ec2.-2016-11-15.launch-permission-modifications/remove]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.unassign-private-ip-addresses-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.unassign-private-ip-addresses-request/private-ip-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/private-ip-address-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/unassign-private-ip-addresses-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.unassign-private-ip-addresses-request/network-interface-id :portkey.aws.ec2.-2016-11-15.unassign-private-ip-addresses-request/private-ip-addresses] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/classic-load-balancers-config (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15/classic-load-balancers] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.terminate-instances-result/terminating-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-state-change-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/terminate-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.terminate-instances-result/terminating-instances]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/volume-status-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/volume-status-item))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpcs-result/vpcs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpcs-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-vpcs-result/vpcs]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.monitor-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.monitor-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/monitor-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.monitor-instances-request/instance-ids] :opt-un [:portkey.aws.ec2.-2016-11-15.monitor-instances-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.export-task/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.export-task/export-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.export-task/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/export-task-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.export-task/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/export-task (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.export-task/description :portkey.aws.ec2.-2016-11-15.export-task/export-task-id :portkey.aws.ec2.-2016-11-15/export-to-s-3-task :portkey.aws.ec2.-2016-11-15/instance-export-details :portkey.aws.ec2.-2016-11-15.export-task/state :portkey.aws.ec2.-2016-11-15.export-task/status-message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-vpc-endpoints-result/unsuccessful (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/unsuccessful-item-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-vpc-endpoints-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-vpc-endpoints-result/unsuccessful]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-private-ip-address/association (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/network-interface-association))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-private-ip-address/primary (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-private-ip-address/private-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-private-ip-address/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/network-interface-private-ip-address (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.network-interface-private-ip-address/association :portkey.aws.ec2.-2016-11-15.network-interface-private-ip-address/primary :portkey.aws.ec2.-2016-11-15.network-interface-private-ip-address/private-dns-name :portkey.aws.ec2.-2016-11-15.network-interface-private-ip-address/private-ip-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-placement-group-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-placement-group-request/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-placement-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-placement-group-request/group-name] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-placement-group-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/tag-specification-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/tag-specification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/tag-specifications (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/credit-specification (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/credit-specification-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/max-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/ipv-6-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-ipv-6-address-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/security-group-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/security-group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/security-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/security-group-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/instance-market-options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-market-options-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/launch-template (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/elastic-gpu-specification (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/elastic-gpu-specifications))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/min-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/additional-info (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/disable-api-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/monitoring (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/run-instances-monitoring-enabled))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/block-device-mapping-request-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/cpu-options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/cpu-options-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/user-data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/instance-initiated-shutdown-behavior (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/shutdown-behavior))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/iam-instance-profile (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/iam-instance-profile-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/network-interfaces (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-network-interface-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-instances-request/ipv-6-address-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/run-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.run-instances-request/max-count :portkey.aws.ec2.-2016-11-15.run-instances-request/min-count] :opt-un [:portkey.aws.ec2.-2016-11-15.run-instances-request/dry-run :portkey.aws.ec2.-2016-11-15.run-instances-request/tag-specifications :portkey.aws.ec2.-2016-11-15.run-instances-request/kernel-id :portkey.aws.ec2.-2016-11-15.run-instances-request/credit-specification :portkey.aws.ec2.-2016-11-15.run-instances-request/ipv-6-addresses :portkey.aws.ec2.-2016-11-15.run-instances-request/security-group-ids :portkey.aws.ec2.-2016-11-15.run-instances-request/image-id :portkey.aws.ec2.-2016-11-15/placement :portkey.aws.ec2.-2016-11-15.run-instances-request/subnet-id :portkey.aws.ec2.-2016-11-15.run-instances-request/security-groups :portkey.aws.ec2.-2016-11-15.run-instances-request/ebs-optimized :portkey.aws.ec2.-2016-11-15.run-instances-request/instance-market-options :portkey.aws.ec2.-2016-11-15/instance-type :portkey.aws.ec2.-2016-11-15.run-instances-request/launch-template :portkey.aws.ec2.-2016-11-15.run-instances-request/elastic-gpu-specification :portkey.aws.ec2.-2016-11-15.run-instances-request/key-name :portkey.aws.ec2.-2016-11-15.run-instances-request/additional-info :portkey.aws.ec2.-2016-11-15.run-instances-request/disable-api-termination :portkey.aws.ec2.-2016-11-15.run-instances-request/monitoring :portkey.aws.ec2.-2016-11-15.run-instances-request/block-device-mappings :portkey.aws.ec2.-2016-11-15.run-instances-request/cpu-options :portkey.aws.ec2.-2016-11-15.run-instances-request/ramdisk-id :portkey.aws.ec2.-2016-11-15.run-instances-request/user-data :portkey.aws.ec2.-2016-11-15.run-instances-request/instance-initiated-shutdown-behavior :portkey.aws.ec2.-2016-11-15.run-instances-request/iam-instance-profile :portkey.aws.ec2.-2016-11-15.run-instances-request/client-token :portkey.aws.ec2.-2016-11-15.run-instances-request/private-ip-address :portkey.aws.ec2.-2016-11-15.run-instances-request/network-interfaces :portkey.aws.ec2.-2016-11-15.run-instances-request/ipv-6-address-count]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/placement-group-state #{:deleted "deleting" :pending :deleting "deleted" :available "pending" "available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volumes-modifications-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volumes-modifications-request/volume-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/volume-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volumes-modifications-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volumes-modifications-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-volumes-modifications-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-volumes-modifications-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-volumes-modifications-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-volumes-modifications-request/volume-ids :portkey.aws.ec2.-2016-11-15.describe-volumes-modifications-request/filters :portkey.aws.ec2.-2016-11-15.describe-volumes-modifications-request/next-token :portkey.aws.ec2.-2016-11-15.describe-volumes-modifications-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/volume-status-actions-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/volume-status-action))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpn-static-route-source #{:static "Static"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-instances-response/active-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/active-instance-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-instances-response/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-instances-response/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-spot-fleet-instances-response (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.describe-spot-fleet-instances-response/active-instances :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-instances-response/spot-fleet-request-id] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-spot-fleet-instances-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-price-history-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-price-history-result/spot-price-history (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-price-history-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-spot-price-history-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-spot-price-history-result/next-token :portkey.aws.ec2.-2016-11-15.describe-spot-price-history-result/spot-price-history]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reset-instance-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reset-instance-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reset-instance-attribute-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reset-instance-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.reset-instance-attribute-request/attribute :portkey.aws.ec2.-2016-11-15.reset-instance-attribute-request/instance-id] :opt-un [:portkey.aws.ec2.-2016-11-15.reset-instance-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-service-permissions-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-service-permissions-request/service-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-service-permissions-request/add-allowed-principals (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-service-permissions-request/remove-allowed-principals (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-vpc-endpoint-service-permissions-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-service-permissions-request/service-id] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-service-permissions-request/dry-run :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-service-permissions-request/add-allowed-principals :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-service-permissions-request/remove-allowed-principals]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-default-subnet-request/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-default-subnet-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-default-subnet-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-default-subnet-request/availability-zone] :opt-un [:portkey.aws.ec2.-2016-11-15.create-default-subnet-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase-scheduled-instances-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase-scheduled-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase-scheduled-instances-request/purchase-requests (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/purchase-request-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/purchase-scheduled-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.purchase-scheduled-instances-request/purchase-requests] :opt-un [:portkey.aws.ec2.-2016-11-15.purchase-scheduled-instances-request/client-token :portkey.aws.ec2.-2016-11-15.purchase-scheduled-instances-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/host-offering-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/host-offering))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.move-address-to-vpc-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.move-address-to-vpc-request/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/move-address-to-vpc-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.move-address-to-vpc-request/public-ip] :opt-un [:portkey.aws.ec2.-2016-11-15.move-address-to-vpc-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-endpoint-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/vpc-endpoint))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.copy-snapshot-result/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/copy-snapshot-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.copy-snapshot-result/snapshot-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-export-tasks-request/export-task-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/export-task-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-export-tasks-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-export-tasks-request/export-task-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/subnet-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instance-limit-price/amount (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instance-limit-price/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reserved-instance-limit-price (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.reserved-instance-limit-price/amount :portkey.aws.ec2.-2016-11-15.reserved-instance-limit-price/currency-code]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance-recurrence/frequency (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance-recurrence/interval (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance-recurrence/occurrence-relative-to-end (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance-recurrence/occurrence-unit (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/scheduled-instance-recurrence (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.scheduled-instance-recurrence/frequency :portkey.aws.ec2.-2016-11-15.scheduled-instance-recurrence/interval :portkey.aws.ec2.-2016-11-15/occurrence-day-set :portkey.aws.ec2.-2016-11-15.scheduled-instance-recurrence/occurrence-relative-to-end :portkey.aws.ec2.-2016-11-15.scheduled-instance-recurrence/occurrence-unit]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.attach-classic-link-vpc-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/attach-classic-link-vpc-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.attach-classic-link-vpc-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.allowed-principal/principal (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/allowed-principal (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/principal-type :portkey.aws.ec2.-2016-11-15.allowed-principal/principal]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.tag-specification/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/tag-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/resource-type :portkey.aws.ec2.-2016-11-15.tag-specification/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpn-connection-request/customer-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpn-connection-request/type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpn-connection-request/vpn-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpn-connection-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpn-connection-request/options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpn-connection-options-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-vpn-connection-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-vpn-connection-request/customer-gateway-id :portkey.aws.ec2.-2016-11-15.create-vpn-connection-request/type :portkey.aws.ec2.-2016-11-15.create-vpn-connection-request/vpn-gateway-id] :opt-un [:portkey.aws.ec2.-2016-11-15.create-vpn-connection-request/dry-run :portkey.aws.ec2.-2016-11-15.create-vpn-connection-request/options]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disassociate-route-table-request/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disassociate-route-table-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/disassociate-route-table-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.disassociate-route-table-request/association-id] :opt-un [:portkey.aws.ec2.-2016-11-15.disassociate-route-table-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/unsuccessful-instance-credit-specification-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/unsuccessful-instance-credit-specification-item))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-hosts-request/filter (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-hosts-request/host-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/request-host-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-hosts-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-hosts-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-hosts-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-hosts-request/filter :portkey.aws.ec2.-2016-11-15.describe-hosts-request/host-ids :portkey.aws.ec2.-2016-11-15.describe-hosts-request/max-results :portkey.aws.ec2.-2016-11-15.describe-hosts-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-state/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-state/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-state-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-state (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.instance-state/code :portkey.aws.ec2.-2016-11-15.instance-state/name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/region-name-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.update-security-group-rule-descriptions-ingress-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/update-security-group-rule-descriptions-ingress-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.update-security-group-rule-descriptions-ingress-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance-recurrence-request/frequency (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance-recurrence-request/interval (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance-recurrence-request/occurrence-days (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/occurrence-day-request-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance-recurrence-request/occurrence-relative-to-end (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance-recurrence-request/occurrence-unit (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/scheduled-instance-recurrence-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.scheduled-instance-recurrence-request/frequency :portkey.aws.ec2.-2016-11-15.scheduled-instance-recurrence-request/interval :portkey.aws.ec2.-2016-11-15.scheduled-instance-recurrence-request/occurrence-days :portkey.aws.ec2.-2016-11-15.scheduled-instance-recurrence-request/occurrence-relative-to-end :portkey.aws.ec2.-2016-11-15.scheduled-instance-recurrence-request/occurrence-unit]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-status-item/actions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/volume-status-actions-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-status-item/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-status-item/events (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/volume-status-events-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-status-item/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-status-item/volume-status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/volume-status-info))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/volume-status-item (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.volume-status-item/actions :portkey.aws.ec2.-2016-11-15.volume-status-item/availability-zone :portkey.aws.ec2.-2016-11-15.volume-status-item/events :portkey.aws.ec2.-2016-11-15.volume-status-item/volume-id :portkey.aws.ec2.-2016-11-15.volume-status-item/volume-status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instance-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instance-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-instance-attribute-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-instance-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.describe-instance-attribute-request/attribute :portkey.aws.ec2.-2016-11-15.describe-instance-attribute-request/instance-id] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-instance-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/spot-instance-state #{:open :closed "failed" "closed" "cancelled" :cancelled :active "active" "open" :failed})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-spot-fleet-requests-response/successful-fleet-requests (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/cancel-spot-fleet-requests-success-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-spot-fleet-requests-response/unsuccessful-fleet-requests (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/cancel-spot-fleet-requests-error-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cancel-spot-fleet-requests-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.cancel-spot-fleet-requests-response/successful-fleet-requests :portkey.aws.ec2.-2016-11-15.cancel-spot-fleet-requests-response/unsuccessful-fleet-requests]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.detach-classic-link-vpc-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.detach-classic-link-vpc-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.detach-classic-link-vpc-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/detach-classic-link-vpc-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.detach-classic-link-vpc-request/instance-id :portkey.aws.ec2.-2016-11-15.detach-classic-link-vpc-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-11-15.detach-classic-link-vpc-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-state-name #{"stopping" "running" "terminated" :pending :shuttingdown :running :stopping :stopped "stopped" :terminated "shutting-down" "pending"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-moving-addresses-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-moving-addresses-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-moving-addresses-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-moving-addresses-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-moving-addresses-request/public-ips (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-moving-addresses-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-moving-addresses-request/filters :portkey.aws.ec2.-2016-11-15.describe-moving-addresses-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-moving-addresses-request/max-results :portkey.aws.ec2.-2016-11-15.describe-moving-addresses-request/next-token :portkey.aws.ec2.-2016-11-15.describe-moving-addresses-request/public-ips]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-fleets-result/successful-fleet-deletions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/delete-fleet-success-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-fleets-result/unsuccessful-fleet-deletions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/delete-fleet-error-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-fleets-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-fleets-result/successful-fleet-deletions :portkey.aws.ec2.-2016-11-15.delete-fleets-result/unsuccessful-fleet-deletions]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.availability-zone-message/message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/availability-zone-message (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.availability-zone-message/message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-fleet-result/fleet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-identifier))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-fleet-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.create-fleet-result/fleet-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-version-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/launch-template-version))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/version-description (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__27887__auto__] (clojure.core/< (clojure.core/count s__27887__auto__) 255))))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-nat-gateway-result/nat-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-nat-gateway-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-nat-gateway-result/nat-gateway-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.user-bucket/s-3-bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.user-bucket/s-3-key (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/user-bucket (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.user-bucket/s-3-bucket :portkey.aws.ec2.-2016-11-15.user-bucket/s-3-key]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-launch-template-versions-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-launch-template-versions-request/versions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/version-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-launch-template-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-launch-template-versions-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-launch-template-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-launch-template-versions-request/launch-template-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-launch-template-versions-request/min-version (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-launch-template-versions-request/max-version (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-launch-template-versions-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-launch-template-versions-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-launch-template-versions-request/versions :portkey.aws.ec2.-2016-11-15.describe-launch-template-versions-request/next-token :portkey.aws.ec2.-2016-11-15/launch-template-name :portkey.aws.ec2.-2016-11-15.describe-launch-template-versions-request/filters :portkey.aws.ec2.-2016-11-15.describe-launch-template-versions-request/max-results :portkey.aws.ec2.-2016-11-15.describe-launch-template-versions-request/launch-template-id :portkey.aws.ec2.-2016-11-15.describe-launch-template-versions-request/min-version :portkey.aws.ec2.-2016-11-15.describe-launch-template-versions-request/max-version]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/host-reservation-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/host-reservation))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/unsuccessful-item-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/unsuccessful-item))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.allocate-hosts-result/host-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/response-host-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/allocate-hosts-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.allocate-hosts-result/host-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/virtualization-type #{:hvm :paravirtual "paravirtual" "hvm"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-connection-notification-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-connection-notification-request/connection-notification-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-connection-notification-request/connection-notification-arn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-connection-notification-request/connection-events (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-vpc-endpoint-connection-notification-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-connection-notification-request/connection-notification-id] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-connection-notification-request/dry-run :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-connection-notification-request/connection-notification-arn :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-connection-notification-request/connection-events]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.accept-vpc-peering-connection-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.accept-vpc-peering-connection-request/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/accept-vpc-peering-connection-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.accept-vpc-peering-connection-request/dry-run :portkey.aws.ec2.-2016-11-15.accept-vpc-peering-connection-request/vpc-peering-connection-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-attribute/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-attribute/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-attribute/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-attribute/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-attribute/sriov-net-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-attribute/source-dest-check (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-attribute/disable-api-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-attribute/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-attribute/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-block-device-mapping-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-attribute/product-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/product-code-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-attribute/root-device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-attribute/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-attribute/user-data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-attribute/instance-initiated-shutdown-behavior (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-attribute/ena-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-attribute (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.instance-attribute/kernel-id :portkey.aws.ec2.-2016-11-15.instance-attribute/instance-id :portkey.aws.ec2.-2016-11-15.instance-attribute/ebs-optimized :portkey.aws.ec2.-2016-11-15.instance-attribute/instance-type :portkey.aws.ec2.-2016-11-15.instance-attribute/sriov-net-support :portkey.aws.ec2.-2016-11-15.instance-attribute/source-dest-check :portkey.aws.ec2.-2016-11-15.instance-attribute/disable-api-termination :portkey.aws.ec2.-2016-11-15.instance-attribute/groups :portkey.aws.ec2.-2016-11-15.instance-attribute/block-device-mappings :portkey.aws.ec2.-2016-11-15.instance-attribute/product-codes :portkey.aws.ec2.-2016-11-15.instance-attribute/root-device-name :portkey.aws.ec2.-2016-11-15.instance-attribute/ramdisk-id :portkey.aws.ec2.-2016-11-15.instance-attribute/user-data :portkey.aws.ec2.-2016-11-15.instance-attribute/instance-initiated-shutdown-behavior :portkey.aws.ec2.-2016-11-15.instance-attribute/ena-support]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-id/reserved-instances-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reserved-instances-id (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.reserved-instances-id/reserved-instances-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-request/offering-class (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/offering-class-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-request/reserved-instances-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reserved-instances-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-request/offering-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/offering-type-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-reserved-instances-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-reserved-instances-request/filters :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-request/offering-class :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-request/reserved-instances-ids :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-request/offering-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-network-interface/associate-public-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-network-interface/private-ip-address-configs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/private-ip-address-config-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-network-interface/ipv-6-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/scheduled-instances-ipv-6-address-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-network-interface/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-network-interface/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-network-interface/device-index (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-network-interface/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-network-interface/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/scheduled-instances-security-group-id-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-network-interface/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-network-interface/secondary-private-ip-address-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-network-interface/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-network-interface/ipv-6-address-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/scheduled-instances-network-interface (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.scheduled-instances-network-interface/associate-public-ip-address :portkey.aws.ec2.-2016-11-15.scheduled-instances-network-interface/private-ip-address-configs :portkey.aws.ec2.-2016-11-15.scheduled-instances-network-interface/ipv-6-addresses :portkey.aws.ec2.-2016-11-15.scheduled-instances-network-interface/subnet-id :portkey.aws.ec2.-2016-11-15.scheduled-instances-network-interface/network-interface-id :portkey.aws.ec2.-2016-11-15.scheduled-instances-network-interface/device-index :portkey.aws.ec2.-2016-11-15.scheduled-instances-network-interface/description :portkey.aws.ec2.-2016-11-15.scheduled-instances-network-interface/groups :portkey.aws.ec2.-2016-11-15.scheduled-instances-network-interface/delete-on-termination :portkey.aws.ec2.-2016-11-15.scheduled-instances-network-interface/secondary-private-ip-address-count :portkey.aws.ec2.-2016-11-15.scheduled-instances-network-interface/private-ip-address :portkey.aws.ec2.-2016-11-15.scheduled-instances-network-interface/ipv-6-address-count]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-attribute-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpc-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.describe-vpc-attribute-request/attribute :portkey.aws.ec2.-2016-11-15.describe-vpc-attribute-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-vpc-attribute-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/max-duration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/min-duration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/instance-tenancy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tenancy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/include-marketplace (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/product-description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/ri-product-description))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/offering-class (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/offering-class-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/offering-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/offering-type-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/max-instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/reserved-instances-offering-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reserved-instances-offering-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-reserved-instances-offerings-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/max-duration :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/min-duration :portkey.aws.ec2.-2016-11-15/instance-type :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/availability-zone :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/next-token :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/instance-tenancy :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/include-marketplace :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/filters :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/product-description :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/max-results :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/offering-class :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/offering-type :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/max-instance-count :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-offerings-request/reserved-instances-offering-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-credit-specification-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/instance-credit-specification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/default-target-capacity-type #{:ondemand "spot" "on-demand" :spot})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-request/subnet-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-request/security-group-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-request/private-dns-enabled (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-request/policy-document (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-request/service-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-request/route-table-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-vpc-endpoint-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-request/vpc-id :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-request/service-name] :opt-un [:portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-request/dry-run :portkey.aws.ec2.-2016-11-15/vpc-endpoint-type :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-request/subnet-ids :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-request/security-group-ids :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-request/private-dns-enabled :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-request/policy-document :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-request/route-table-ids :portkey.aws.ec2.-2016-11-15.create-vpc-endpoint-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-vpc-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-vpc-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-vpc-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-vpc-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-vpc-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-subnet-cidr-block-request/ipv-6-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-subnet-cidr-block-request/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/associate-subnet-cidr-block-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.associate-subnet-cidr-block-request/ipv-6-cidr-block :portkey.aws.ec2.-2016-11-15.associate-subnet-cidr-block-request/subnet-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.target-configuration-request/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.target-configuration-request/offering-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/target-configuration-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.target-configuration-request/offering-id] :opt-un [:portkey.aws.ec2.-2016-11-15.target-configuration-request/instance-count]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reserved-instances-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/reserved-instances-configuration))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-vpc-endpoint-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fpga-images-result/fpga-images (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fpga-image-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-fpga-images-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-fpga-images-result/fpga-images :portkey.aws.ec2.-2016-11-15/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleet-history-result/history-records (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/history-record-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleet-history-result/last-evaluated-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleet-history-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleet-history-result/fleet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-identifier))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fleet-history-result/start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-fleet-history-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-fleet-history-result/history-records :portkey.aws.ec2.-2016-11-15.describe-fleet-history-result/last-evaluated-time :portkey.aws.ec2.-2016-11-15.describe-fleet-history-result/next-token :portkey.aws.ec2.-2016-11-15.describe-fleet-history-result/fleet-id :portkey.aws.ec2.-2016-11-15.describe-fleet-history-result/start-time]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-interfaces-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-interfaces-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-interfaces-request/network-interface-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/network-interface-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-interfaces-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-network-interfaces-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-network-interfaces-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-network-interfaces-request/filters :portkey.aws.ec2.-2016-11-15.describe-network-interfaces-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-network-interfaces-request/network-interface-ids :portkey.aws.ec2.-2016-11-15.describe-network-interfaces-request/next-token :portkey.aws.ec2.-2016-11-15.describe-network-interfaces-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-network-interface-specification-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/instance-network-interface-specification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-fpga-image-attribute-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/fpga-image-attribute]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.conversion-task/conversion-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.conversion-task/expiration-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.conversion-task/import-instance (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/import-instance-task-details))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.conversion-task/import-volume (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/import-volume-task-details))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.conversion-task/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/conversion-task-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.conversion-task/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.conversion-task/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/conversion-task (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.conversion-task/conversion-task-id :portkey.aws.ec2.-2016-11-15.conversion-task/expiration-time :portkey.aws.ec2.-2016-11-15.conversion-task/import-instance :portkey.aws.ec2.-2016-11-15.conversion-task/import-volume :portkey.aws.ec2.-2016-11-15.conversion-task/state :portkey.aws.ec2.-2016-11-15.conversion-task/status-message :portkey.aws.ec2.-2016-11-15.conversion-task/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-subnets-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-subnets-request/subnet-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/subnet-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-subnets-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-subnets-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-subnets-request/filters :portkey.aws.ec2.-2016-11-15.describe-subnets-request/subnet-ids :portkey.aws.ec2.-2016-11-15.describe-subnets-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disassociate-subnet-cidr-block-request/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/disassociate-subnet-cidr-block-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.disassociate-subnet-cidr-block-request/association-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/successful-instance-credit-specification-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/successful-instance-credit-specification-item))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.bundle-task-error/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.bundle-task-error/message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/bundle-task-error (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.bundle-task-error/code :portkey.aws.ec2.-2016-11-15.bundle-task-error/message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-volume-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-volume-request/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-volume-request/size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-volume-request/iops (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-volume-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.modify-volume-request/volume-id] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-volume-request/dry-run :portkey.aws.ec2.-2016-11-15.modify-volume-request/size :portkey.aws.ec2.-2016-11-15/volume-type :portkey.aws.ec2.-2016-11-15.modify-volume-request/iops]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/disassociate-iam-instance-profile-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/iam-instance-profile-association]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.dhcp-configuration/key (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.dhcp-configuration/values (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/dhcp-configuration-value-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/dhcp-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.dhcp-configuration/key :portkey.aws.ec2.-2016-11-15.dhcp-configuration/values]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.key-pair/key-fingerprint (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.key-pair/key-material (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.key-pair/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/key-pair (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.key-pair/key-fingerprint :portkey.aws.ec2.-2016-11-15.key-pair/key-material :portkey.aws.ec2.-2016-11-15.key-pair/key-name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-nat-gateway-request/nat-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-nat-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-nat-gateway-request/nat-gateway-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.block-device-mapping/device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.block-device-mapping/virtual-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.block-device-mapping/ebs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/ebs-block-device))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.block-device-mapping/no-device (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/block-device-mapping (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.block-device-mapping/device-name :portkey.aws.ec2.-2016-11-15.block-device-mapping/virtual-name :portkey.aws.ec2.-2016-11-15.block-device-mapping/ebs :portkey.aws.ec2.-2016-11-15.block-device-mapping/no-device]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/state #{:deleted "Failed" :rejected "Rejected" :pending "Expired" :pending-acceptance :deleting "Deleting" "Deleted" :expired :available "Pending" "Available" :failed "PendingAcceptance"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.export-to-s-3-task/s-3-bucket (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.export-to-s-3-task/s-3-key (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/export-to-s-3-task (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/container-format :portkey.aws.ec2.-2016-11-15/disk-image-format :portkey.aws.ec2.-2016-11-15.export-to-s-3-task/s-3-bucket :portkey.aws.ec2.-2016-11-15.export-to-s-3-task/s-3-key]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/network-acl-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/network-acl))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/max-results (clojure.spec.alpha/int-in 5 255))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cpu-options/core-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cpu-options/threads-per-core (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cpu-options (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.cpu-options/core-count :portkey.aws.ec2.-2016-11-15.cpu-options/threads-per-core]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-vpc-endpoint-connection-notifications-result/unsuccessful (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/unsuccessful-item-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-vpc-endpoint-connection-notifications-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-vpc-endpoint-connection-notifications-result/unsuccessful]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.tag/key (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.tag/value (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/tag (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.tag/key :portkey.aws.ec2.-2016-11-15.tag/value]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.accept-vpc-endpoint-connections-result/unsuccessful (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/unsuccessful-item-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/accept-vpc-endpoint-connections-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.accept-vpc-endpoint-connections-result/unsuccessful]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-subnets-result/subnets (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/subnet-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-subnets-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-subnets-result/subnets]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-address-result/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/associate-address-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.associate-address-result/association-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/recurring-charge-frequency #{"Hourly" :hourly})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-tag-specification/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/spot-fleet-tag-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/resource-type :portkey.aws.ec2.-2016-11-15.spot-fleet-tag-specification/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/user-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/executable-by-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-instance-export-task-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/export-task]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-peering-connection-options-result/accepter-peering-connection-options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/peering-connection-options))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-peering-connection-options-result/requester-peering-connection-options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/peering-connection-options))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-vpc-peering-connection-options-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-vpc-peering-connection-options-result/accepter-peering-connection-options :portkey.aws.ec2.-2016-11-15.modify-vpc-peering-connection-options-result/requester-peering-connection-options]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-availability-zones-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-availability-zones-request/zone-names (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/zone-name-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-availability-zones-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-availability-zones-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-availability-zones-request/filters :portkey.aws.ec2.-2016-11-15.describe-availability-zones-request/zone-names :portkey.aws.ec2.-2016-11-15.describe-availability-zones-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-name-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/launch-template-name))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-market-options-request/spot-options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-market-options))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-market-options-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/market-type :portkey.aws.ec2.-2016-11-15.instance-market-options-request/spot-options]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-route-table-result/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/associate-route-table-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.associate-route-table-result/association-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/platform-values #{:windows "Windows"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disk-image/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disk-image/image (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/disk-image-detail))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disk-image/volume (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/volume-detail))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/disk-image (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.disk-image/description :portkey.aws.ec2.-2016-11-15.disk-image/image :portkey.aws.ec2.-2016-11-15.disk-image/volume]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disassociate-address-request/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disassociate-address-request/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disassociate-address-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/disassociate-address-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.disassociate-address-request/association-id :portkey.aws.ec2.-2016-11-15.disassociate-address-request/public-ip :portkey.aws.ec2.-2016-11-15.disassociate-address-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cancel-spot-fleet-requests-success-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/cancel-spot-fleet-requests-success-item))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.product-code/product-code-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.product-code/product-code-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/product-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/product-code (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.product-code/product-code-id :portkey.aws.ec2.-2016-11-15.product-code/product-code-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-network-interface-permission-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-network-interface-permission-request/aws-account-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-network-interface-permission-request/aws-service (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-network-interface-permission-request/permission (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/interface-permission-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-network-interface-permission-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-network-interface-permission-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-network-interface-permission-request/network-interface-id :portkey.aws.ec2.-2016-11-15.create-network-interface-permission-request/permission] :opt-un [:portkey.aws.ec2.-2016-11-15.create-network-interface-permission-request/aws-account-id :portkey.aws.ec2.-2016-11-15.create-network-interface-permission-request/aws-service :portkey.aws.ec2.-2016-11-15.create-network-interface-permission-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.port-range/from (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.port-range/to (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/port-range (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.port-range/from :portkey.aws.ec2.-2016-11-15.port-range/to]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-state #{:pending :available "pending" "available"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/attachment-status #{"attached" "detaching" :detached "detached" "attaching" :attaching :attached :detaching})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.peering-connection-options/allow-dns-resolution-from-remote-vpc (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.peering-connection-options/allow-egress-from-local-classic-link-to-remote-vpc (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.peering-connection-options/allow-egress-from-local-vpc-to-remote-classic-link (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/peering-connection-options (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.peering-connection-options/allow-dns-resolution-from-remote-vpc :portkey.aws.ec2.-2016-11-15.peering-connection-options/allow-egress-from-local-classic-link-to-remote-vpc :portkey.aws.ec2.-2016-11-15.peering-connection-options/allow-egress-from-local-vpc-to-remote-classic-link]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-templates-monitoring/enabled (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-templates-monitoring (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.launch-templates-monitoring/enabled]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/dns-entry-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/dns-entry))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-version/launch-template-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-version/version-number (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-version/create-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-version/created-by (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-version/default-version (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-version/launch-template-data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/response-launch-template-data))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-version (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.launch-template-version/launch-template-id :portkey.aws.ec2.-2016-11-15/launch-template-name :portkey.aws.ec2.-2016-11-15.launch-template-version/version-number :portkey.aws.ec2.-2016-11-15/version-description :portkey.aws.ec2.-2016-11-15.launch-template-version/create-time :portkey.aws.ec2.-2016-11-15.launch-template-version/created-by :portkey.aws.ec2.-2016-11-15.launch-template-version/default-version :portkey.aws.ec2.-2016-11-15.launch-template-version/launch-template-data]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-fleet-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-fleet-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-fleet-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-attachment/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attachment-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-attachment/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-attachment (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.vpc-attachment/state :portkey.aws.ec2.-2016-11-15.vpc-attachment/vpc-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reject-vpc-endpoint-connections-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reject-vpc-endpoint-connections-request/service-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reject-vpc-endpoint-connections-request/vpc-endpoint-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reject-vpc-endpoint-connections-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.reject-vpc-endpoint-connections-request/service-id :portkey.aws.ec2.-2016-11-15.reject-vpc-endpoint-connections-request/vpc-endpoint-ids] :opt-un [:portkey.aws.ec2.-2016-11-15.reject-vpc-endpoint-connections-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.revoke-security-group-egress-request/source-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.revoke-security-group-egress-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.revoke-security-group-egress-request/to-port (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.revoke-security-group-egress-request/source-security-group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.revoke-security-group-egress-request/ip-protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.revoke-security-group-egress-request/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.revoke-security-group-egress-request/from-port (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.revoke-security-group-egress-request/ip-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/ip-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.revoke-security-group-egress-request/cidr-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/revoke-security-group-egress-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.revoke-security-group-egress-request/group-id] :opt-un [:portkey.aws.ec2.-2016-11-15.revoke-security-group-egress-request/source-security-group-owner-id :portkey.aws.ec2.-2016-11-15.revoke-security-group-egress-request/dry-run :portkey.aws.ec2.-2016-11-15.revoke-security-group-egress-request/to-port :portkey.aws.ec2.-2016-11-15.revoke-security-group-egress-request/source-security-group-name :portkey.aws.ec2.-2016-11-15.revoke-security-group-egress-request/ip-protocol :portkey.aws.ec2.-2016-11-15.revoke-security-group-egress-request/from-port :portkey.aws.ec2.-2016-11-15.revoke-security-group-egress-request/ip-permissions :portkey.aws.ec2.-2016-11-15.revoke-security-group-egress-request/cidr-ip]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-status/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-status/events (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-status-event-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-status/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-status/instance-status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-status-summary))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-status/system-status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-status-summary))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-status (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.instance-status/availability-zone :portkey.aws.ec2.-2016-11-15.instance-status/events :portkey.aws.ec2.-2016-11-15.instance-status/instance-id :portkey.aws.ec2.-2016-11-15/instance-state :portkey.aws.ec2.-2016-11-15.instance-status/instance-status :portkey.aws.ec2.-2016-11-15.instance-status/system-status]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-iam-instance-profile-associations-request/association-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/association-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-iam-instance-profile-associations-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-iam-instance-profile-associations-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-iam-instance-profile-associations-request/association-ids :portkey.aws.ec2.-2016-11-15.describe-iam-instance-profile-associations-request/filters :portkey.aws.ec2.-2016-11-15/max-results :portkey.aws.ec2.-2016-11-15/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/tag-specifications (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-fleet-tag-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/placement (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-placement))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/addressing-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/security-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/spot-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/monitoring (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-fleet-monitoring))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/weighted-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/double))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/block-device-mapping-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/user-data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/iam-instance-profile (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/iam-instance-profile-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/network-interfaces (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-network-interface-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/spot-fleet-launch-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/tag-specifications :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/kernel-id :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/image-id :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/placement :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/addressing-type :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/subnet-id :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/security-groups :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/ebs-optimized :portkey.aws.ec2.-2016-11-15/instance-type :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/key-name :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/spot-price :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/monitoring :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/weighted-capacity :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/block-device-mappings :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/ramdisk-id :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/user-data :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/iam-instance-profile :portkey.aws.ec2.-2016-11-15.spot-fleet-launch-specification/network-interfaces]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/ipv-6-cidr-block-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/ipv-6-cidr-block))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.detach-vpn-gateway-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.detach-vpn-gateway-request/vpn-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.detach-vpn-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/detach-vpn-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.detach-vpn-gateway-request/vpc-id :portkey.aws.ec2.-2016-11-15.detach-vpn-gateway-request/vpn-gateway-id] :opt-un [:portkey.aws.ec2.-2016-11-15.detach-vpn-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.ip-range/cidr-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.ip-range/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/ip-range (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.ip-range/cidr-ip :portkey.aws.ec2.-2016-11-15.ip-range/description]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cidr-block-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/cidr-block))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.stale-security-group/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.stale-security-group/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.stale-security-group/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.stale-security-group/stale-ip-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/stale-ip-permission-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.stale-security-group/stale-ip-permissions-egress (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/stale-ip-permission-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.stale-security-group/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/stale-security-group (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.stale-security-group/group-id] :opt-un [:portkey.aws.ec2.-2016-11-15.stale-security-group/description :portkey.aws.ec2.-2016-11-15.stale-security-group/group-name :portkey.aws.ec2.-2016-11-15.stale-security-group/stale-ip-permissions :portkey.aws.ec2.-2016-11-15.stale-security-group/stale-ip-permissions-egress :portkey.aws.ec2.-2016-11-15.stale-security-group/vpc-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/version-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/block-device-mapping-request-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/block-device-mapping))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-snapshot-task/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-snapshot-task/import-task-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/import-snapshot-task (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.import-snapshot-task/description :portkey.aws.ec2.-2016-11-15.import-snapshot-task/import-task-id :portkey.aws.ec2.-2016-11-15/snapshot-task-detail]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-tenancy-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-tenancy-request/instance-tenancy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-tenancy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-tenancy-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-vpc-tenancy-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.modify-vpc-tenancy-request/vpc-id :portkey.aws.ec2.-2016-11-15.modify-vpc-tenancy-request/instance-tenancy] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-vpc-tenancy-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.elastic-gpu-specification-response/type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/elastic-gpu-specification-response (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.elastic-gpu-specification-response/type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-service-permissions-result/return-value (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-vpc-endpoint-service-permissions-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-service-permissions-result/return-value]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/container-format #{:ova "ova"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/network-interface-ipv-6-addresses-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/network-interface-ipv-6-address))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/purchase-request-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/purchase-request :min-count 1))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-service-configuration-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-vpc-endpoint-service-configuration-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-service-configuration-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-security-group-result/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-security-group-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.create-security-group-result/group-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-peering-connection-state-reason/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-peering-connection-state-reason-code))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpc-peering-connection-state-reason/message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-peering-connection-state-reason (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.vpc-peering-connection-state-reason/code :portkey.aws.ec2.-2016-11-15.vpc-peering-connection-state-reason/message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/new-dhcp-configuration-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/new-dhcp-configuration))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-password-data-result/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-password-data-result/password-data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-password-data-result/timestamp (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/get-password-data-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.get-password-data-result/instance-id :portkey.aws.ec2.-2016-11-15.get-password-data-result/password-data :portkey.aws.ec2.-2016-11-15.get-password-data-result/timestamp]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-prefix-lists-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-prefix-lists-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-prefix-lists-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-prefix-lists-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-prefix-lists-request/prefix-list-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-prefix-lists-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-prefix-lists-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-prefix-lists-request/filters :portkey.aws.ec2.-2016-11-15.describe-prefix-lists-request/max-results :portkey.aws.ec2.-2016-11-15.describe-prefix-lists-request/next-token :portkey.aws.ec2.-2016-11-15.describe-prefix-lists-request/prefix-list-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/market-type #{"spot" :spot})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/import-volume-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/conversion-task]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/public-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/spot-instance-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/instance-lifecycle (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-lifecycle-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/platform-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/root-device-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/device-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/security-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/sriov-net-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/source-dest-check (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/elastic-gpu-associations (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/elastic-gpu-association-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/private-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-block-device-mapping-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/hypervisor (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/hypervisor-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/architecture (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/architecture-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/product-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/product-code-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/root-device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/launch-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/public-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/ami-launch-index (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/state-transition-reason (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/network-interfaces (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-network-interface-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance/ena-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.instance/public-dns-name :portkey.aws.ec2.-2016-11-15.instance/kernel-id :portkey.aws.ec2.-2016-11-15.instance/spot-instance-request-id :portkey.aws.ec2.-2016-11-15.instance/instance-id :portkey.aws.ec2.-2016-11-15.instance/instance-lifecycle :portkey.aws.ec2.-2016-11-15.instance/platform :portkey.aws.ec2.-2016-11-15.instance/image-id :portkey.aws.ec2.-2016-11-15/placement :portkey.aws.ec2.-2016-11-15.instance/subnet-id :portkey.aws.ec2.-2016-11-15.instance/root-device-type :portkey.aws.ec2.-2016-11-15.instance/security-groups :portkey.aws.ec2.-2016-11-15.instance/ebs-optimized :portkey.aws.ec2.-2016-11-15/instance-type :portkey.aws.ec2.-2016-11-15.instance/sriov-net-support :portkey.aws.ec2.-2016-11-15.instance/tags :portkey.aws.ec2.-2016-11-15.instance/source-dest-check :portkey.aws.ec2.-2016-11-15.instance/key-name :portkey.aws.ec2.-2016-11-15.instance/elastic-gpu-associations :portkey.aws.ec2.-2016-11-15.instance/private-dns-name :portkey.aws.ec2.-2016-11-15.instance/vpc-id :portkey.aws.ec2.-2016-11-15/monitoring :portkey.aws.ec2.-2016-11-15.instance/block-device-mappings :portkey.aws.ec2.-2016-11-15.instance/hypervisor :portkey.aws.ec2.-2016-11-15.instance/architecture :portkey.aws.ec2.-2016-11-15/virtualization-type :portkey.aws.ec2.-2016-11-15.instance/product-codes :portkey.aws.ec2.-2016-11-15.instance/state :portkey.aws.ec2.-2016-11-15/cpu-options :portkey.aws.ec2.-2016-11-15.instance/root-device-name :portkey.aws.ec2.-2016-11-15.instance/ramdisk-id :portkey.aws.ec2.-2016-11-15.instance/launch-time :portkey.aws.ec2.-2016-11-15.instance/public-ip-address :portkey.aws.ec2.-2016-11-15/state-reason :portkey.aws.ec2.-2016-11-15/iam-instance-profile :portkey.aws.ec2.-2016-11-15.instance/ami-launch-index :portkey.aws.ec2.-2016-11-15.instance/client-token :portkey.aws.ec2.-2016-11-15.instance/state-transition-reason :portkey.aws.ec2.-2016-11-15.instance/private-ip-address :portkey.aws.ec2.-2016-11-15.instance/network-interfaces :portkey.aws.ec2.-2016-11-15.instance/ena-support]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.terminate-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.terminate-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/terminate-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.terminate-instances-request/instance-ids] :opt-un [:portkey.aws.ec2.-2016-11-15.terminate-instances-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-reserved-instances-request/reserved-instances-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reserved-instances-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-reserved-instances-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-reserved-instances-request/target-configurations (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reserved-instances-configuration-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-reserved-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.modify-reserved-instances-request/reserved-instances-ids :portkey.aws.ec2.-2016-11-15.modify-reserved-instances-request/target-configurations] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-reserved-instances-request/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-network-acl-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-network-acl-request/network-acl-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-network-acl-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-network-acl-request/network-acl-id] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-network-acl-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-placement-groups-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-placement-groups-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-placement-groups-request/group-names (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/placement-group-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-placement-groups-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-placement-groups-request/filters :portkey.aws.ec2.-2016-11-15.describe-placement-groups-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-placement-groups-request/group-names]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-launch-template-specification-request/launch-template-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fleet-launch-template-specification-request/version (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fleet-launch-template-specification-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.fleet-launch-template-specification-request/launch-template-id :portkey.aws.ec2.-2016-11-15/launch-template-name :portkey.aws.ec2.-2016-11-15.fleet-launch-template-specification-request/version]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-image-attribute-request/user-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/user-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-image-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-image-attribute-request/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-image-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-image-attribute-request/value (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-image-attribute-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-image-attribute-request/product-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/product-code-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-image-attribute-request/user-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/user-group-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-image-attribute-request/launch-permission (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-permission-modifications))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-image-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.modify-image-attribute-request/image-id] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-image-attribute-request/user-ids :portkey.aws.ec2.-2016-11-15.modify-image-attribute-request/dry-run :portkey.aws.ec2.-2016-11-15.modify-image-attribute-request/attribute :portkey.aws.ec2.-2016-11-15.modify-image-attribute-request/value :portkey.aws.ec2.-2016-11-15.modify-image-attribute-request/description :portkey.aws.ec2.-2016-11-15/operation-type :portkey.aws.ec2.-2016-11-15.modify-image-attribute-request/product-codes :portkey.aws.ec2.-2016-11-15.modify-image-attribute-request/user-groups :portkey.aws.ec2.-2016-11-15.modify-image-attribute-request/launch-permission]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/nat-gateway-state #{:deleted "deleting" "failed" :pending :deleting "deleted" :available "pending" "available" :failed})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-result/reserved-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reserved-instances-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-reserved-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-reserved-instances-result/reserved-instances]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-nat-gateways-result/nat-gateways (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/nat-gateway-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-nat-gateways-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-nat-gateways-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-nat-gateways-result/nat-gateways :portkey.aws.ec2.-2016-11-15.describe-nat-gateways-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.accept-reserved-instances-exchange-quote-result/exchange-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/accept-reserved-instances-exchange-quote-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.accept-reserved-instances-exchange-quote-result/exchange-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/block-device-mapping-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/block-device-mapping))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/blob clojure.core/bytes?)

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-fleet-error-item/error (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/delete-fleet-error))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-fleet-error-item/fleet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-identifier))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-fleet-error-item (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-fleet-error-item/error :portkey.aws.ec2.-2016-11-15.delete-fleet-error-item/fleet-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-block-device-mapping-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/instance-block-device-mapping))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.security-group-reference/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.security-group-reference/referencing-vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.security-group-reference/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/security-group-reference (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.security-group-reference/group-id :portkey.aws.ec2.-2016-11-15.security-group-reference/referencing-vpc-id] :opt-un [:portkey.aws.ec2.-2016-11-15.security-group-reference/vpc-peering-connection-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.enable-vpc-classic-link-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.enable-vpc-classic-link-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/enable-vpc-classic-link-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.enable-vpc-classic-link-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-11-15.enable-vpc-classic-link-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/classic-link-dns-support-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/classic-link-dns-support))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/gateway-type #{:ipsec-1 "ipsec.1"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-iam-instance-profile/arn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instances-iam-instance-profile/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/scheduled-instances-iam-instance-profile (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.scheduled-instances-iam-instance-profile/arn :portkey.aws.ec2.-2016-11-15.scheduled-instances-iam-instance-profile/name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/platform-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image/root-device-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/device-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image/owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image/sriov-net-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image/public (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/block-device-mapping-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image/hypervisor (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/hypervisor-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image/architecture (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/architecture-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image/image-owner-alias (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image/creation-date (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image/product-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/product-code-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image/image-location (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/image-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image/image-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/image-type-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image/root-device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image/ena-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/image (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.image/kernel-id :portkey.aws.ec2.-2016-11-15.image/platform :portkey.aws.ec2.-2016-11-15.image/image-id :portkey.aws.ec2.-2016-11-15.image/root-device-type :portkey.aws.ec2.-2016-11-15.image/owner-id :portkey.aws.ec2.-2016-11-15.image/sriov-net-support :portkey.aws.ec2.-2016-11-15.image/tags :portkey.aws.ec2.-2016-11-15.image/public :portkey.aws.ec2.-2016-11-15.image/description :portkey.aws.ec2.-2016-11-15.image/block-device-mappings :portkey.aws.ec2.-2016-11-15.image/hypervisor :portkey.aws.ec2.-2016-11-15.image/architecture :portkey.aws.ec2.-2016-11-15.image/image-owner-alias :portkey.aws.ec2.-2016-11-15.image/creation-date :portkey.aws.ec2.-2016-11-15/virtualization-type :portkey.aws.ec2.-2016-11-15.image/product-codes :portkey.aws.ec2.-2016-11-15.image/image-location :portkey.aws.ec2.-2016-11-15.image/state :portkey.aws.ec2.-2016-11-15.image/image-type :portkey.aws.ec2.-2016-11-15.image/root-device-name :portkey.aws.ec2.-2016-11-15.image/ramdisk-id :portkey.aws.ec2.-2016-11-15.image/name :portkey.aws.ec2.-2016-11-15/state-reason :portkey.aws.ec2.-2016-11-15.image/ena-support]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/report-status-type #{"impaired" :ok :impaired "ok"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-host-reservation-offerings-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-host-reservation-offerings-result/offering-set (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/host-offering-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-host-reservation-offerings-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-host-reservation-offerings-result/next-token :portkey.aws.ec2.-2016-11-15.describe-host-reservation-offerings-result/offering-set]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/ip-range-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/ip-range))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-route-table-association-result/new-association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/replace-route-table-association-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.replace-route-table-association-result/new-association-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/image-type-values #{"kernel" :ramdisk "machine" "ramdisk" :machine :kernel})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-security-groups-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-security-groups-request/group-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-security-groups-request/group-names (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/group-name-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-security-groups-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-security-groups-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-security-groups-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-security-groups-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-security-groups-request/filters :portkey.aws.ec2.-2016-11-15.describe-security-groups-request/group-ids :portkey.aws.ec2.-2016-11-15.describe-security-groups-request/group-names :portkey.aws.ec2.-2016-11-15.describe-security-groups-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-security-groups-request/next-token :portkey.aws.ec2.-2016-11-15.describe-security-groups-request/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-instance-launch-specification/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-instance-launch-specification/group-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/security-group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-instance-launch-specification/additional-info (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-instance-launch-specification/monitoring (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-instance-launch-specification/architecture (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/architecture-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-instance-launch-specification/instance-initiated-shutdown-behavior (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/shutdown-behavior))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-instance-launch-specification/group-names (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/security-group-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-instance-launch-specification/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/import-instance-launch-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/placement :portkey.aws.ec2.-2016-11-15.import-instance-launch-specification/subnet-id :portkey.aws.ec2.-2016-11-15/instance-type :portkey.aws.ec2.-2016-11-15.import-instance-launch-specification/group-ids :portkey.aws.ec2.-2016-11-15.import-instance-launch-specification/additional-info :portkey.aws.ec2.-2016-11-15.import-instance-launch-specification/monitoring :portkey.aws.ec2.-2016-11-15.import-instance-launch-specification/architecture :portkey.aws.ec2.-2016-11-15/user-data :portkey.aws.ec2.-2016-11-15.import-instance-launch-specification/instance-initiated-shutdown-behavior :portkey.aws.ec2.-2016-11-15.import-instance-launch-specification/group-names :portkey.aws.ec2.-2016-11-15.import-instance-launch-specification/private-ip-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-launch-template-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/launch-template]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.classic-link-instance/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/group-identifier-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.classic-link-instance/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.classic-link-instance/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.classic-link-instance/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/classic-link-instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.classic-link-instance/groups :portkey.aws.ec2.-2016-11-15.classic-link-instance/instance-id :portkey.aws.ec2.-2016-11-15.classic-link-instance/tags :portkey.aws.ec2.-2016-11-15.classic-link-instance/vpc-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.cancel-spot-instance-requests-result/cancelled-spot-instance-requests (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/cancelled-spot-instance-request-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cancel-spot-instance-requests-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.cancel-spot-instance-requests-result/cancelled-spot-instance-requests]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-import-snapshot-tasks-result/import-snapshot-tasks (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/import-snapshot-task-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-import-snapshot-tasks-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-import-snapshot-tasks-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-import-snapshot-tasks-result/import-snapshot-tasks :portkey.aws.ec2.-2016-11-15.describe-import-snapshot-tasks-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/classic-load-balancers (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/classic-load-balancer :min-count 1 :max-count 5))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-instance-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-instance-request/disk-images (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/disk-image-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-instance-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-instance-request/launch-specification (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/import-instance-launch-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.import-instance-request/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/platform-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/import-instance-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.import-instance-request/platform] :opt-un [:portkey.aws.ec2.-2016-11-15.import-instance-request/description :portkey.aws.ec2.-2016-11-15.import-instance-request/disk-images :portkey.aws.ec2.-2016-11-15.import-instance-request/dry-run :portkey.aws.ec2.-2016-11-15.import-instance-request/launch-specification]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.security-group-identifier/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.security-group-identifier/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/security-group-identifier (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.security-group-identifier/group-id :portkey.aws.ec2.-2016-11-15.security-group-identifier/group-name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-options-request/allocation-strategy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-allocation-strategy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-options-request/instance-interruption-behavior (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-instance-interruption-behavior))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.spot-options-request/instance-pools-to-use-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/spot-options-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.spot-options-request/allocation-strategy :portkey.aws.ec2.-2016-11-15.spot-options-request/instance-interruption-behavior :portkey.aws.ec2.-2016-11-15.spot-options-request/instance-pools-to-use-count]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-classic-link-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-classic-link-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-classic-link-request/vpc-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-classic-link-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpc-classic-link-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-vpc-classic-link-request/filters :portkey.aws.ec2.-2016-11-15.describe-vpc-classic-link-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-vpc-classic-link-request/vpc-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.authorize-security-group-ingress-request/source-security-group-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.authorize-security-group-ingress-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.authorize-security-group-ingress-request/to-port (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.authorize-security-group-ingress-request/source-security-group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.authorize-security-group-ingress-request/ip-protocol (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.authorize-security-group-ingress-request/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.authorize-security-group-ingress-request/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.authorize-security-group-ingress-request/from-port (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.authorize-security-group-ingress-request/ip-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/ip-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.authorize-security-group-ingress-request/cidr-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/authorize-security-group-ingress-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.authorize-security-group-ingress-request/source-security-group-owner-id :portkey.aws.ec2.-2016-11-15.authorize-security-group-ingress-request/dry-run :portkey.aws.ec2.-2016-11-15.authorize-security-group-ingress-request/to-port :portkey.aws.ec2.-2016-11-15.authorize-security-group-ingress-request/source-security-group-name :portkey.aws.ec2.-2016-11-15.authorize-security-group-ingress-request/ip-protocol :portkey.aws.ec2.-2016-11-15.authorize-security-group-ingress-request/group-name :portkey.aws.ec2.-2016-11-15.authorize-security-group-ingress-request/group-id :portkey.aws.ec2.-2016-11-15.authorize-security-group-ingress-request/from-port :portkey.aws.ec2.-2016-11-15.authorize-security-group-ingress-request/ip-permissions :portkey.aws.ec2.-2016-11-15.authorize-security-group-ingress-request/cidr-ip]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/scheduled-instances-block-device-mapping-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/scheduled-instances-block-device-mapping))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-fleet-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-fleet-request/tag-specifications (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-fleet-request/type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-fleet-request/valid-from (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-fleet-request/excess-capacity-termination-policy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-excess-capacity-termination-policy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-fleet-request/spot-options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-options-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-fleet-request/launch-template-configs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-launch-template-config-list-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-fleet-request/on-demand-options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/on-demand-options-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-fleet-request/terminate-instances-with-expiration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-fleet-request/target-capacity-specification (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/target-capacity-specification-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-fleet-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-fleet-request/replace-unhealthy-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-fleet-request/valid-until (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-fleet-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-fleet-request/launch-template-configs :portkey.aws.ec2.-2016-11-15.create-fleet-request/target-capacity-specification] :opt-un [:portkey.aws.ec2.-2016-11-15.create-fleet-request/dry-run :portkey.aws.ec2.-2016-11-15.create-fleet-request/tag-specifications :portkey.aws.ec2.-2016-11-15.create-fleet-request/type :portkey.aws.ec2.-2016-11-15.create-fleet-request/valid-from :portkey.aws.ec2.-2016-11-15.create-fleet-request/excess-capacity-termination-policy :portkey.aws.ec2.-2016-11-15.create-fleet-request/spot-options :portkey.aws.ec2.-2016-11-15.create-fleet-request/on-demand-options :portkey.aws.ec2.-2016-11-15.create-fleet-request/terminate-instances-with-expiration :portkey.aws.ec2.-2016-11-15.create-fleet-request/client-token :portkey.aws.ec2.-2016-11-15.create-fleet-request/replace-unhealthy-instances :portkey.aws.ec2.-2016-11-15.create-fleet-request/valid-until]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/cancel-spot-fleet-requests-error-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/cancel-spot-fleet-requests-error-item))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase-request/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase-request/purchase-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/purchase-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.purchase-request/instance-count :portkey.aws.ec2.-2016-11-15.purchase-request/purchase-token] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-volume-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-volume-request/tag-specifications (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-volume-request/encrypted (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-volume-request/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-volume-request/kms-key-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-volume-request/size (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-volume-request/iops (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-volume-request/snapshot-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-volume-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-volume-request/availability-zone] :opt-un [:portkey.aws.ec2.-2016-11-15.create-volume-request/dry-run :portkey.aws.ec2.-2016-11-15.create-volume-request/tag-specifications :portkey.aws.ec2.-2016-11-15.create-volume-request/encrypted :portkey.aws.ec2.-2016-11-15.create-volume-request/kms-key-id :portkey.aws.ec2.-2016-11-15.create-volume-request/size :portkey.aws.ec2.-2016-11-15.create-volume-request/iops :portkey.aws.ec2.-2016-11-15/volume-type :portkey.aws.ec2.-2016-11-15.create-volume-request/snapshot-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reserved-instances-modification-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reserved-instances-modification-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/reserved-instances-modification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/network-acl-entry-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/network-acl-entry))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-dhcp-options-result/dhcp-options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/dhcp-options-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-dhcp-options-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-dhcp-options-result/dhcp-options]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/ramdisk (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/sriov-net-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/source-dest-check (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/attribute (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-attribute-name))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/value (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/disable-api-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-block-device-mapping-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/kernel (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/user-data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/blob-attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/instance-initiated-shutdown-behavior (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/ena-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-boolean-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-instance-attribute-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/instance-id] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/dry-run :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/ebs-optimized :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/instance-type :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/ramdisk :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/sriov-net-support :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/source-dest-check :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/attribute :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/value :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/disable-api-termination :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/groups :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/block-device-mappings :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/kernel :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/user-data :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/instance-initiated-shutdown-behavior :portkey.aws.ec2.-2016-11-15.modify-instance-attribute-request/ena-support]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-nat-gateway-result/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-nat-gateway-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.create-nat-gateway-result/client-token :portkey.aws.ec2.-2016-11-15/nat-gateway]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.release-address-request/allocation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.release-address-request/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.release-address-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/release-address-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.release-address-request/allocation-id :portkey.aws.ec2.-2016-11-15.release-address-request/public-ip :portkey.aws.ec2.-2016-11-15.release-address-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-classic-link-dns-support-request/vpc-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-classic-link-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpc-classic-link-dns-support-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/max-results :portkey.aws.ec2.-2016-11-15/next-token :portkey.aws.ec2.-2016-11-15.describe-vpc-classic-link-dns-support-request/vpc-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/network-interface-private-ip-address-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/network-interface-private-ip-address))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.target-group/arn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/target-group (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.target-group/arn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image-attribute/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/block-device-mapping-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image-attribute/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image-attribute/launch-permissions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image-attribute/product-codes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/product-code-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image-attribute/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image-attribute/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image-attribute/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.image-attribute/sriov-net-support (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attribute-value))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/image-attribute (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.image-attribute/block-device-mappings :portkey.aws.ec2.-2016-11-15.image-attribute/image-id :portkey.aws.ec2.-2016-11-15.image-attribute/launch-permissions :portkey.aws.ec2.-2016-11-15.image-attribute/product-codes :portkey.aws.ec2.-2016-11-15.image-attribute/description :portkey.aws.ec2.-2016-11-15.image-attribute/kernel-id :portkey.aws.ec2.-2016-11-15.image-attribute/ramdisk-id :portkey.aws.ec2.-2016-11-15.image-attribute/sriov-net-support]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/resource-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reject-vpc-peering-connection-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reject-vpc-peering-connection-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.reject-vpc-peering-connection-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.assign-ipv-6-addresses-request/ipv-6-address-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.assign-ipv-6-addresses-request/ipv-6-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/ipv-6-address-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.assign-ipv-6-addresses-request/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/assign-ipv-6-addresses-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.assign-ipv-6-addresses-request/network-interface-id] :opt-un [:portkey.aws.ec2.-2016-11-15.assign-ipv-6-addresses-request/ipv-6-address-count :portkey.aws.ec2.-2016-11-15.assign-ipv-6-addresses-request/ipv-6-addresses]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-modifications-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-modifications-request/reserved-instances-modification-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reserved-instances-modification-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-modifications-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-reserved-instances-modifications-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-reserved-instances-modifications-request/filters :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-modifications-request/reserved-instances-modification-ids :portkey.aws.ec2.-2016-11-15.describe-reserved-instances-modifications-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.on-demand-options-request/allocation-strategy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-on-demand-allocation-strategy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/on-demand-options-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.on-demand-options-request/allocation-strategy]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/ipv-6-address (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/conversion-task-state #{:completed "completed" "cancelling" "cancelled" :cancelled :active "active" :cancelling})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-network-interface-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-network-interface-request/ipv-6-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-ipv-6-address-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-network-interface-request/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-network-interface-request/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-network-interface-request/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/security-group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-network-interface-request/private-ip-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/private-ip-address-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-network-interface-request/secondary-private-ip-address-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-network-interface-request/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-network-interface-request/ipv-6-address-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-network-interface-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-network-interface-request/subnet-id] :opt-un [:portkey.aws.ec2.-2016-11-15.create-network-interface-request/dry-run :portkey.aws.ec2.-2016-11-15.create-network-interface-request/ipv-6-addresses :portkey.aws.ec2.-2016-11-15.create-network-interface-request/description :portkey.aws.ec2.-2016-11-15.create-network-interface-request/groups :portkey.aws.ec2.-2016-11-15.create-network-interface-request/private-ip-addresses :portkey.aws.ec2.-2016-11-15.create-network-interface-request/secondary-private-ip-address-count :portkey.aws.ec2.-2016-11-15.create-network-interface-request/private-ip-address :portkey.aws.ec2.-2016-11-15.create-network-interface-request/ipv-6-address-count]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/network-interface-permission-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/offering-class-type #{"standard" "convertible" :standard :convertible})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/request-host-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-error-code #{"launchTemplateVersionDoesNotExist" "launchTemplateIdDoesNotExist" "launchTemplateNameMalformed" :launch-template-name-malformed "launchTemplateNameDoesNotExist" "unexpectedError" :launch-template-id-does-not-exist :launch-template-version-does-not-exist "launchTemplateIdMalformed" :launch-template-id-malformed :launch-template-name-does-not-exist :unexpected-error})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-stale-security-groups-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-stale-security-groups-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-stale-security-groups-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.describe-stale-security-groups-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-stale-security-groups-request/dry-run :portkey.aws.ec2.-2016-11-15/max-results :portkey.aws.ec2.-2016-11-15/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/nat-gateway-address-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/nat-gateway-address))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-network-interface-permission-result/interface-permission (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/network-interface-permission))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-network-interface-permission-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.create-network-interface-permission-result/interface-permission]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-modification/status-message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-modification/create-date (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-modification/reserved-instances-modification-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-modification/status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-modification/modification-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reserved-instances-modification-result-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-modification/reserved-instances-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reserved-intances-ids))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-modification/update-date (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-modification/effective-date (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instances-modification/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reserved-instances-modification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.reserved-instances-modification/status-message :portkey.aws.ec2.-2016-11-15.reserved-instances-modification/create-date :portkey.aws.ec2.-2016-11-15.reserved-instances-modification/reserved-instances-modification-id :portkey.aws.ec2.-2016-11-15.reserved-instances-modification/status :portkey.aws.ec2.-2016-11-15.reserved-instances-modification/modification-results :portkey.aws.ec2.-2016-11-15.reserved-instances-modification/reserved-instances-ids :portkey.aws.ec2.-2016-11-15.reserved-instances-modification/update-date :portkey.aws.ec2.-2016-11-15.reserved-instances-modification/effective-date :portkey.aws.ec2.-2016-11-15.reserved-instances-modification/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/listing-status #{:closed :pending "closed" "cancelled" :cancelled :active "active" "pending"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-overrides-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/launch-template-overrides))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-spot-datafeed-subscription-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/spot-datafeed-subscription]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/image-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/bundle-instance-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/bundle-task]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-iam-instance-profile-specification-request/arn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-iam-instance-profile-specification-request/name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-iam-instance-profile-specification-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.launch-template-iam-instance-profile-specification-request/arn :portkey.aws.ec2.-2016-11-15.launch-template-iam-instance-profile-specification-request/name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-route-table-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-route-table-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-route-table-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-route-table-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-11-15.create-route-table-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-attribute-name #{:instance-initiated-shutdown-behavior "kernel" "groupSet" "productCodes" :group-set :ena-support "blockDeviceMapping" :source-dest-check :disable-api-termination :ramdisk :root-device-name :product-codes "disableApiTermination" :instance-type :ebs-optimized "sourceDestCheck" :user-data "userData" "ebsOptimized" :block-device-mapping "ramdisk" :sriov-net-support "instanceType" :kernel "enaSupport" "rootDeviceName" "instanceInitiatedShutdownBehavior" "sriovNetSupport"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/classic-link-instance-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/classic-link-instance))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/import-image-task-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/import-image-task))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-block-device-mapping-request-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/launch-template-block-device-mapping-request))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/route-table-association-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/route-table-association))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.start-instances-result/starting-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-state-change-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/start-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.start-instances-result/starting-instances]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fpga-images-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fpga-images-request/fpga-image-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fpga-image-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fpga-images-request/owners (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/owner-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-fpga-images-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-fpga-images-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-fpga-images-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-fpga-images-request/fpga-image-ids :portkey.aws.ec2.-2016-11-15.describe-fpga-images-request/owners :portkey.aws.ec2.-2016-11-15.describe-fpga-images-request/filters :portkey.aws.ec2.-2016-11-15/next-token :portkey.aws.ec2.-2016-11-15/max-results]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/iam-instance-profile-association-state #{:associating "associating" :associated "disassociated" :disassociated "associated" :disassociating "disassociating"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disk-image-detail/bytes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disk-image-detail/format (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/disk-image-format))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.disk-image-detail/import-manifest-url (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/disk-image-detail (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.disk-image-detail/bytes :portkey.aws.ec2.-2016-11-15.disk-image-detail/format :portkey.aws.ec2.-2016-11-15.disk-image-detail/import-manifest-url] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.user-data/data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/user-data (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.user-data/data]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-principal-id-format-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-principal-id-format-request/resources (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/resource-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-principal-id-format-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-principal-id-format-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-principal-id-format-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-principal-id-format-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-principal-id-format-request/resources :portkey.aws.ec2.-2016-11-15.describe-principal-id-format-request/max-results :portkey.aws.ec2.-2016-11-15.describe-principal-id-format-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-connections-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-connections-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-connections-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-connections-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-connections-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-connections-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-connections-request/filters :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-connections-request/max-results :portkey.aws.ec2.-2016-11-15.describe-vpc-endpoint-connections-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.service-configuration/acceptance-required (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.service-configuration/service-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/service-type-detail-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.service-configuration/private-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.service-configuration/service-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.service-configuration/base-endpoint-dns-names (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.service-configuration/network-load-balancer-arns (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.service-configuration/service-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.service-configuration/availability-zones (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/service-configuration (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.service-configuration/acceptance-required :portkey.aws.ec2.-2016-11-15.service-configuration/service-type :portkey.aws.ec2.-2016-11-15/service-state :portkey.aws.ec2.-2016-11-15.service-configuration/private-dns-name :portkey.aws.ec2.-2016-11-15.service-configuration/service-id :portkey.aws.ec2.-2016-11-15.service-configuration/base-endpoint-dns-names :portkey.aws.ec2.-2016-11-15.service-configuration/network-load-balancer-arns :portkey.aws.ec2.-2016-11-15.service-configuration/service-name :portkey.aws.ec2.-2016-11-15.service-configuration/availability-zones]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/offering-type-values #{"All Upfront" :heavy-utilization :no-upfront :medium-utilization :all-upfront :light-utilization :partial-upfront "No Upfront" "Heavy Utilization" "Light Utilization" "Partial Upfront" "Medium Utilization"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/float clojure.core/float?)

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-elastic-gpus-result/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-elastic-gpus-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-elastic-gpus-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/elastic-gpu-set :portkey.aws.ec2.-2016-11-15.describe-elastic-gpus-result/max-results :portkey.aws.ec2.-2016-11-15.describe-elastic-gpus-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-tag-specification-request/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-tag-specification-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/resource-type :portkey.aws.ec2.-2016-11-15.launch-template-tag-specification-request/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-vpn-gateways-result/vpn-gateways (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpn-gateway-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-vpn-gateways-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-vpn-gateways-result/vpn-gateways]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-acl/associations (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/network-acl-association-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-acl/entries (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/network-acl-entry-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-acl/is-default (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-acl/network-acl-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-acl/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-acl/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/network-acl (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.network-acl/associations :portkey.aws.ec2.-2016-11-15.network-acl/entries :portkey.aws.ec2.-2016-11-15.network-acl/is-default :portkey.aws.ec2.-2016-11-15.network-acl/network-acl-id :portkey.aws.ec2.-2016-11-15.network-acl/tags :portkey.aws.ec2.-2016-11-15.network-acl/vpc-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.target-capacity-specification/total-target-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.target-capacity-specification/on-demand-target-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.target-capacity-specification/spot-target-capacity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/target-capacity-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.target-capacity-specification/total-target-capacity :portkey.aws.ec2.-2016-11-15.target-capacity-specification/on-demand-target-capacity :portkey.aws.ec2.-2016-11-15.target-capacity-specification/spot-target-capacity :portkey.aws.ec2.-2016-11-15/default-target-capacity-type]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-launch-template-versions-response-error-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/delete-launch-template-versions-response-error-item))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-block-device-mapping-request/device-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-block-device-mapping-request/virtual-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-block-device-mapping-request/ebs (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-ebs-block-device-request))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-block-device-mapping-request/no-device (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-block-device-mapping-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.launch-template-block-device-mapping-request/device-name :portkey.aws.ec2.-2016-11-15.launch-template-block-device-mapping-request/virtual-name :portkey.aws.ec2.-2016-11-15.launch-template-block-device-mapping-request/ebs :portkey.aws.ec2.-2016-11-15.launch-template-block-device-mapping-request/no-device]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.unsuccessful-instance-credit-specification-item-error/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/unsuccessful-instance-credit-specification-error-code))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.unsuccessful-instance-credit-specification-item-error/message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/unsuccessful-instance-credit-specification-item-error (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.unsuccessful-instance-credit-specification-item-error/code :portkey.aws.ec2.-2016-11-15.unsuccessful-instance-credit-specification-item-error/message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-attachment/attach-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-attachment/device (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-attachment/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-attachment/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/volume-attachment-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-attachment/volume-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.volume-attachment/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/volume-attachment (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.volume-attachment/attach-time :portkey.aws.ec2.-2016-11-15.volume-attachment/device :portkey.aws.ec2.-2016-11-15.volume-attachment/instance-id :portkey.aws.ec2.-2016-11-15.volume-attachment/state :portkey.aws.ec2.-2016-11-15.volume-attachment/volume-id :portkey.aws.ec2.-2016-11-15.volume-attachment/delete-on-termination]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-dhcp-options-request/dhcp-options-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-dhcp-options-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.associate-dhcp-options-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/associate-dhcp-options-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.associate-dhcp-options-request/dhcp-options-id :portkey.aws.ec2.-2016-11-15.associate-dhcp-options-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-11-15.associate-dhcp-options-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-attachment-changes/attachment-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-attachment-changes/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/network-interface-attachment-changes (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.network-interface-attachment-changes/attachment-id :portkey.aws.ec2.-2016-11-15.network-interface-attachment-changes/delete-on-termination]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.route-table-association/main (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.route-table-association/route-table-association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.route-table-association/route-table-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.route-table-association/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/route-table-association (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.route-table-association/main :portkey.aws.ec2.-2016-11-15.route-table-association/route-table-association-id :portkey.aws.ec2.-2016-11-15.route-table-association/route-table-id :portkey.aws.ec2.-2016-11-15.route-table-association/subnet-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reject-vpc-peering-connection-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reject-vpc-peering-connection-request/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reject-vpc-peering-connection-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.reject-vpc-peering-connection-request/vpc-peering-connection-id] :opt-un [:portkey.aws.ec2.-2016-11-15.reject-vpc-peering-connection-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/private-ip-address-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.credit-specification-request/cpu-credits (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/credit-specification-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.credit-specification-request/cpu-credits] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.subnet-ipv-6-cidr-block-association/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.subnet-ipv-6-cidr-block-association/ipv-6-cidr-block (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.subnet-ipv-6-cidr-block-association/ipv-6-cidr-block-state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/subnet-cidr-block-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/subnet-ipv-6-cidr-block-association (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.subnet-ipv-6-cidr-block-association/association-id :portkey.aws.ec2.-2016-11-15.subnet-ipv-6-cidr-block-association/ipv-6-cidr-block :portkey.aws.ec2.-2016-11-15.subnet-ipv-6-cidr-block-association/ipv-6-cidr-block-state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.principal-id-format/arn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.principal-id-format/statuses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/id-format-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/principal-id-format (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.principal-id-format/arn :portkey.aws.ec2.-2016-11-15.principal-id-format/statuses]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-connection/type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/gateway-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-connection/category (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-connection/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-connection/routes (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpn-static-route-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-connection/customer-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-connection/vpn-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-connection/vgw-telemetry (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vgw-telemetry-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-connection/vpn-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-connection/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpn-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-connection/options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpn-connection-options))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-connection/customer-gateway-configuration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpn-connection (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.vpn-connection/type :portkey.aws.ec2.-2016-11-15.vpn-connection/category :portkey.aws.ec2.-2016-11-15.vpn-connection/tags :portkey.aws.ec2.-2016-11-15.vpn-connection/routes :portkey.aws.ec2.-2016-11-15.vpn-connection/customer-gateway-id :portkey.aws.ec2.-2016-11-15.vpn-connection/vpn-gateway-id :portkey.aws.ec2.-2016-11-15.vpn-connection/vgw-telemetry :portkey.aws.ec2.-2016-11-15.vpn-connection/vpn-connection-id :portkey.aws.ec2.-2016-11-15.vpn-connection/state :portkey.aws.ec2.-2016-11-15.vpn-connection/options :portkey.aws.ec2.-2016-11-15.vpn-connection/customer-gateway-configuration]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.region/endpoint (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.region/region-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/region (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.region/endpoint :portkey.aws.ec2.-2016-11-15.region/region-name]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fpga-image-state/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fpga-image-state-code))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.fpga-image-state/message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fpga-image-state (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.fpga-image-state/code :portkey.aws.ec2.-2016-11-15.fpga-image-state/message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.state-reason/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.state-reason/message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/state-reason (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.state-reason/code :portkey.aws.ec2.-2016-11-15.state-reason/message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/associate-iam-instance-profile-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/iam-instance-profile-association]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/scheduled-instances-ipv-6-address-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/scheduled-instances-ipv-6-address))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/elastic-gpu-state #{"ATTACHED" :attached})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-network-acl-association-request/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-network-acl-association-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.replace-network-acl-association-request/network-acl-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/replace-network-acl-association-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.replace-network-acl-association-request/association-id :portkey.aws.ec2.-2016-11-15.replace-network-acl-association-request/network-acl-id] :opt-un [:portkey.aws.ec2.-2016-11-15.replace-network-acl-association-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.iam-instance-profile/arn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.iam-instance-profile/id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/iam-instance-profile (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.iam-instance-profile/arn :portkey.aws.ec2.-2016-11-15.iam-instance-profile/id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.enable-vpc-classic-link-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/enable-vpc-classic-link-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.enable-vpc-classic-link-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/owner-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-launch-template-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/launch-template]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/max-term-duration-in-days (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/platform (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/network-platform (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/recurrence (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/scheduled-instance-recurrence))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/total-scheduled-instance-hours (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/hourly-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/purchase-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/slot-duration-in-hours (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/first-slot-start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/available-instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/min-term-duration-in-days (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/scheduled-instance-availability (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/max-term-duration-in-days :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/platform :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/network-platform :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/recurrence :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/instance-type :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/total-scheduled-instance-hours :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/availability-zone :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/hourly-price :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/purchase-token :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/slot-duration-in-hours :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/first-slot-start-time :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/available-instance-count :portkey.aws.ec2.-2016-11-15.scheduled-instance-availability/min-term-duration-in-days]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-scheduled-instances-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-scheduled-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-scheduled-instances-request/instance-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-scheduled-instances-request/launch-specification (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/scheduled-instances-launch-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.run-scheduled-instances-request/scheduled-instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/run-scheduled-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.run-scheduled-instances-request/launch-specification :portkey.aws.ec2.-2016-11-15.run-scheduled-instances-request/scheduled-instance-id] :opt-un [:portkey.aws.ec2.-2016-11-15.run-scheduled-instances-request/client-token :portkey.aws.ec2.-2016-11-15.run-scheduled-instances-request/dry-run :portkey.aws.ec2.-2016-11-15.run-scheduled-instances-request/instance-count]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-instance-requests-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-instance-requests-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-instance-requests-request/spot-instance-request-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-instance-request-id-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-spot-instance-requests-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-spot-instance-requests-request/filters :portkey.aws.ec2.-2016-11-15.describe-spot-instance-requests-request/dry-run :portkey.aws.ec2.-2016-11-15.describe-spot-instance-requests-request/spot-instance-request-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-volume-permission-modifications/add (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-volume-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-volume-permission-modifications/remove (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-volume-permission-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-volume-permission-modifications (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.create-volume-permission-modifications/add :portkey.aws.ec2.-2016-11-15.create-volume-permission-modifications/remove]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-aggregate-id-format-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-aggregate-id-format-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-aggregate-id-format-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.active-instance/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.active-instance/instance-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.active-instance/spot-instance-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.active-instance/instance-health (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-health-status))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/active-instance (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.active-instance/instance-id :portkey.aws.ec2.-2016-11-15.active-instance/instance-type :portkey.aws.ec2.-2016-11-15.active-instance/spot-instance-request-id :portkey.aws.ec2.-2016-11-15.active-instance/instance-health]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.attach-internet-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.attach-internet-gateway-request/internet-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.attach-internet-gateway-request/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/attach-internet-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.attach-internet-gateway-request/internet-gateway-id :portkey.aws.ec2.-2016-11-15.attach-internet-gateway-request/vpc-id] :opt-un [:portkey.aws.ec2.-2016-11-15.attach-internet-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/fleet-excess-capacity-termination-policy #{"no-termination" :termination "termination" :notermination})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.stop-instances-request/instance-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.stop-instances-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.stop-instances-request/force (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/stop-instances-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.stop-instances-request/instance-ids] :opt-un [:portkey.aws.ec2.-2016-11-15.stop-instances-request/dry-run :portkey.aws.ec2.-2016-11-15.stop-instances-request/force]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reason-codes-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/report-instance-reason-codes))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/subnet-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/subnet))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/filter-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/filter))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-security-groups-result/security-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/security-group-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-security-groups-result/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-security-groups-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-security-groups-result/security-groups :portkey.aws.ec2.-2016-11-15.describe-security-groups-result/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.account-attribute-value/attribute-value (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/account-attribute-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.account-attribute-value/attribute-value]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-peering-connection-state-reason-code #{:deleted :pendingacceptance "expired" "deleting" :rejected "failed" :deleting "initiating-request" "provisioning" :initiatingrequest :active "deleted" :expired :provisioning "pending-acceptance" "active" "rejected" :failed})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-permission/group (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/permission-group))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-permission/user-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-permission (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.launch-permission/group :portkey.aws.ec2.-2016-11-15.launch-permission/user-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/elastic-gpu-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/elastic-gpus))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/internet-gateway-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/internet-gateway))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-fleet-error/code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/delete-fleet-error-code))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-fleet-error/message (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-fleet-error (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-fleet-error/code :portkey.aws.ec2.-2016-11-15.delete-fleet-error/message]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.account-attribute/attribute-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.account-attribute/attribute-values (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/account-attribute-value-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/account-attribute (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.account-attribute/attribute-name :portkey.aws.ec2.-2016-11-15.account-attribute/attribute-values]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/history-record-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/history-record-entry))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-instance-market-options/spot-options (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/launch-template-spot-market-options))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-instance-market-options (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/market-type :portkey.aws.ec2.-2016-11-15.launch-template-instance-market-options/spot-options]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.ipv-6-range/cidr-ipv-6 (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.ipv-6-range/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/ipv-6-range (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.ipv-6-range/cidr-ipv-6 :portkey.aws.ec2.-2016-11-15.ipv-6-range/description]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host/release-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host/host-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host/host-reservation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/allocation-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host/allocation-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host/instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/host-instance-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/host (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.host/release-time :portkey.aws.ec2.-2016-11-15/host-properties :portkey.aws.ec2.-2016-11-15.host/host-id :portkey.aws.ec2.-2016-11-15/available-capacity :portkey.aws.ec2.-2016-11-15.host/tags :portkey.aws.ec2.-2016-11-15.host/availability-zone :portkey.aws.ec2.-2016-11-15/auto-placement :portkey.aws.ec2.-2016-11-15.host/host-reservation-id :portkey.aws.ec2.-2016-11-15.host/state :portkey.aws.ec2.-2016-11-15.host/allocation-time :portkey.aws.ec2.-2016-11-15.host/instances :portkey.aws.ec2.-2016-11-15.host/client-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-security-group-references-result/security-group-reference-set (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/security-group-references))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-security-group-references-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-security-group-references-result/security-group-reference-set]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/egress-only-internet-gateway-id (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-regions-result/regions (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/region-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-regions-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-regions-result/regions]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.detach-classic-link-vpc-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/detach-classic-link-vpc-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.detach-classic-link-vpc-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/activity-status #{"error" "pending_termination" :pending-fulfillment :fulfilled :error "fulfilled" "pending_fulfillment" :pending-termination})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.placement-group/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.placement-group/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/placement-group-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.placement-group/strategy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/placement-strategy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/placement-group (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.placement-group/group-name :portkey.aws.ec2.-2016-11-15.placement-group/state :portkey.aws.ec2.-2016-11-15.placement-group/strategy]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-egress-only-internet-gateway-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-egress-only-internet-gateway-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15/egress-only-internet-gateway-id] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-egress-only-internet-gateway-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpn-gateway-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.reserved-instance-reservation-value/reserved-instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reserved-instance-reservation-value (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/reservation-value :portkey.aws.ec2.-2016-11-15.reserved-instance-reservation-value/reserved-instance-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.private-ip-address-specification/primary (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.private-ip-address-specification/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/private-ip-address-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.private-ip-address-specification/primary :portkey.aws.ec2.-2016-11-15.private-ip-address-specification/private-ip-address]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/kernel-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/security-group-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/image-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/placement (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/spot-placement))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/addressing-type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/security-groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/ebs-optimized (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/key-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/monitoring (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/run-instances-monitoring-enabled))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/block-device-mappings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/block-device-mapping-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/ramdisk-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/user-data (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/iam-instance-profile (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/iam-instance-profile-specification))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/network-interfaces (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-network-interface-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/request-spot-launch-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/kernel-id :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/security-group-ids :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/image-id :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/placement :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/addressing-type :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/subnet-id :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/security-groups :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/ebs-optimized :portkey.aws.ec2.-2016-11-15/instance-type :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/key-name :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/monitoring :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/block-device-mappings :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/ramdisk-id :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/user-data :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/iam-instance-profile :portkey.aws.ec2.-2016-11-15.request-spot-launch-specification/network-interfaces]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reservation-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/reservation))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-fleet-error-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/delete-fleet-error-item))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpc-ipv-6-cidr-block-association-set (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/vpc-ipv-6-cidr-block-association))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-vpc-peering-connection-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-vpc-peering-connection-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-vpc-peering-connection-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/volume-modification-state #{:modifying "failed" :completed "completed" "optimizing" :optimizing "modifying" :failed})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase-host-reservation-request/client-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase-host-reservation-request/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase-host-reservation-request/host-id-set (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/request-host-id-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase-host-reservation-request/limit-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.purchase-host-reservation-request/offering-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/purchase-host-reservation-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.purchase-host-reservation-request/host-id-set :portkey.aws.ec2.-2016-11-15.purchase-host-reservation-request/offering-id] :opt-un [:portkey.aws.ec2.-2016-11-15.purchase-host-reservation-request/client-token :portkey.aws.ec2.-2016-11-15.purchase-host-reservation-request/currency-code :portkey.aws.ec2.-2016-11-15.purchase-host-reservation-request/limit-price]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-host-reservation-purchase-preview-request/host-id-set (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/request-host-id-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-host-reservation-purchase-preview-request/offering-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/get-host-reservation-purchase-preview-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.get-host-reservation-purchase-preview-request/host-id-set :portkey.aws.ec2.-2016-11-15.get-host-reservation-purchase-preview-request/offering-id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-request/remove-subnet-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-request/vpc-endpoint-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-request/private-dns-enabled (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-request/add-security-group-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-request/policy-document (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-request/remove-security-group-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-request/add-subnet-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-request/remove-route-table-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-request/reset-policy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-request/add-route-table-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/value-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/modify-vpc-endpoint-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-request/vpc-endpoint-id] :opt-un [:portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-request/dry-run :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-request/remove-subnet-ids :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-request/private-dns-enabled :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-request/add-security-group-ids :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-request/policy-document :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-request/remove-security-group-ids :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-request/add-subnet-ids :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-request/remove-route-table-ids :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-request/reset-policy :portkey.aws.ec2.-2016-11-15.modify-vpc-endpoint-request/add-route-table-ids]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/elastic-gpu-specification-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/elastic-gpu-specification))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.user-id-group-pair/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.user-id-group-pair/group-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.user-id-group-pair/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.user-id-group-pair/peering-status (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.user-id-group-pair/user-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.user-id-group-pair/vpc-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.user-id-group-pair/vpc-peering-connection-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/user-id-group-pair (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.user-id-group-pair/description :portkey.aws.ec2.-2016-11-15.user-id-group-pair/group-id :portkey.aws.ec2.-2016-11-15.user-id-group-pair/group-name :portkey.aws.ec2.-2016-11-15.user-id-group-pair/peering-status :portkey.aws.ec2.-2016-11-15.user-id-group-pair/user-id :portkey.aws.ec2.-2016-11-15.user-id-group-pair/vpc-id :portkey.aws.ec2.-2016-11-15.user-id-group-pair/vpc-peering-connection-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-templates-monitoring-request/enabled (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-templates-monitoring-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.launch-templates-monitoring-request/enabled]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host-reservation/currency-code (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/currency-code-values))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host-reservation/upfront-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host-reservation/host-id-set (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/response-host-id-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host-reservation/start (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host-reservation/end (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host-reservation/count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host-reservation/hourly-price (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host-reservation/offering-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host-reservation/duration (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host-reservation/instance-family (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host-reservation/host-reservation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.host-reservation/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reservation-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/host-reservation (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.host-reservation/currency-code :portkey.aws.ec2.-2016-11-15.host-reservation/upfront-price :portkey.aws.ec2.-2016-11-15.host-reservation/host-id-set :portkey.aws.ec2.-2016-11-15.host-reservation/start :portkey.aws.ec2.-2016-11-15.host-reservation/end :portkey.aws.ec2.-2016-11-15.host-reservation/count :portkey.aws.ec2.-2016-11-15/payment-option :portkey.aws.ec2.-2016-11-15.host-reservation/hourly-price :portkey.aws.ec2.-2016-11-15.host-reservation/offering-id :portkey.aws.ec2.-2016-11-15.host-reservation/duration :portkey.aws.ec2.-2016-11-15.host-reservation/instance-family :portkey.aws.ec2.-2016-11-15.host-reservation/host-reservation-id :portkey.aws.ec2.-2016-11-15.host-reservation/state]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-console-screenshot-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-console-screenshot-request/instance-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.get-console-screenshot-request/wake-up (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/get-console-screenshot-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.get-console-screenshot-request/instance-id] :opt-un [:portkey.aws.ec2.-2016-11-15.get-console-screenshot-request/dry-run :portkey.aws.ec2.-2016-11-15.get-console-screenshot-request/wake-up]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/telemetry-status #{:down "UP" "DOWN" :up})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-id-format-request/resource (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-id-format-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-id-format-request/resource]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-fleet-error-code #{:fleet-not-in-deletable-state :fleet-id-malformed "unexpectedError" "fleetNotInDeletableState" "fleetIdDoesNotExist" :fleet-id-does-not-exist "fleetIdMalformed" :unexpected-error})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-fpga-image-result/return (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-fpga-image-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-fpga-image-result/return]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/import-task-id-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-gateway/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-gateway/state (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpn-state))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-gateway/type (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/gateway-type))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-gateway/vpc-attachments (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/vpc-attachment-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-gateway/vpn-gateway-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-gateway/amazon-side-asn (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/long))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.vpn-gateway/tags (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/tag-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpn-gateway (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.vpn-gateway/availability-zone :portkey.aws.ec2.-2016-11-15.vpn-gateway/state :portkey.aws.ec2.-2016-11-15.vpn-gateway/type :portkey.aws.ec2.-2016-11-15.vpn-gateway/vpc-attachments :portkey.aws.ec2.-2016-11-15.vpn-gateway/vpn-gateway-id :portkey.aws.ec2.-2016-11-15.vpn-gateway/amazon-side-asn :portkey.aws.ec2.-2016-11-15.vpn-gateway/tags]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-association/allocation-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-association/association-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-association/ip-owner-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-association/public-dns-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.network-interface-association/public-ip (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/network-interface-association (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.network-interface-association/allocation-id :portkey.aws.ec2.-2016-11-15.network-interface-association/association-id :portkey.aws.ec2.-2016-11-15.network-interface-association/ip-owner-id :portkey.aws.ec2.-2016-11-15.network-interface-association/public-dns-name :portkey.aws.ec2.-2016-11-15.network-interface-association/public-ip]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-placement/availability-zone (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-placement/affinity (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-placement/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-placement/host-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.launch-template-placement/spread-domain (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/launch-template-placement (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.launch-template-placement/availability-zone :portkey.aws.ec2.-2016-11-15.launch-template-placement/affinity :portkey.aws.ec2.-2016-11-15.launch-template-placement/group-name :portkey.aws.ec2.-2016-11-15.launch-template-placement/host-id :portkey.aws.ec2.-2016-11-15/tenancy :portkey.aws.ec2.-2016-11-15.launch-template-placement/spread-domain]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/date-time clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-vpc-endpoint-service-configurations-result/unsuccessful (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/unsuccessful-item-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-vpc-endpoint-service-configurations-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-vpc-endpoint-service-configurations-result/unsuccessful]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-key-pairs-request/filters (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/filter-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-key-pairs-request/key-names (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/key-name-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-key-pairs-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-key-pairs-request (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-key-pairs-request/filters :portkey.aws.ec2.-2016-11-15.describe-key-pairs-request/key-names :portkey.aws.ec2.-2016-11-15.describe-key-pairs-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-dhcp-options-request/dhcp-options-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-dhcp-options-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-dhcp-options-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-dhcp-options-request/dhcp-options-id] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-dhcp-options-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-request-history-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-request-history-request/max-results (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-request-history-request/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-request-history-request/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-request-history-request/start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-spot-fleet-request-history-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.describe-spot-fleet-request-history-request/spot-fleet-request-id :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-request-history-request/start-time] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-spot-fleet-request-history-request/dry-run :portkey.aws.ec2.-2016-11-15/event-type :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-request-history-request/max-results :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-request-history-request/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-fleets-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-fleets-request/fleet-ids (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/fleet-id-set))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.delete-fleets-request/terminate-instances (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/delete-fleets-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.delete-fleets-request/fleet-ids :portkey.aws.ec2.-2016-11-15.delete-fleets-request/terminate-instances] :opt-un [:portkey.aws.ec2.-2016-11-15.delete-fleets-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/snapshot-id-string-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/string))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/shutdown-behavior #{"stop" :terminate "terminate" :stop})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.unmonitor-instances-result/instance-monitorings (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-monitoring-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/unmonitor-instances-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.unmonitor-instances-result/instance-monitorings]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.egress-only-internet-gateway/attachments (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/internet-gateway-attachment-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/egress-only-internet-gateway (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.egress-only-internet-gateway/attachments :portkey.aws.ec2.-2016-11-15/egress-only-internet-gateway-id]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-placement-group-request/dry-run (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-placement-group-request/group-name (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.create-placement-group-request/strategy (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/placement-strategy))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/create-placement-group-request (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15.create-placement-group-request/group-name :portkey.aws.ec2.-2016-11-15.create-placement-group-request/strategy] :opt-un [:portkey.aws.ec2.-2016-11-15.create-placement-group-request/dry-run]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface-specification/associate-public-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface-specification/ipv-6-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-ipv-6-address-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface-specification/subnet-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface-specification/network-interface-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface-specification/device-index (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface-specification/description (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface-specification/groups (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/security-group-id-string-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface-specification/delete-on-termination (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/boolean))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface-specification/private-ip-addresses (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/private-ip-address-specification-list))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface-specification/secondary-private-ip-address-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface-specification/private-ip-address (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.instance-network-interface-specification/ipv-6-address-count (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/integer))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/instance-network-interface-specification (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15.instance-network-interface-specification/associate-public-ip-address :portkey.aws.ec2.-2016-11-15.instance-network-interface-specification/ipv-6-addresses :portkey.aws.ec2.-2016-11-15.instance-network-interface-specification/subnet-id :portkey.aws.ec2.-2016-11-15.instance-network-interface-specification/network-interface-id :portkey.aws.ec2.-2016-11-15.instance-network-interface-specification/device-index :portkey.aws.ec2.-2016-11-15.instance-network-interface-specification/description :portkey.aws.ec2.-2016-11-15.instance-network-interface-specification/groups :portkey.aws.ec2.-2016-11-15.instance-network-interface-specification/delete-on-termination :portkey.aws.ec2.-2016-11-15.instance-network-interface-specification/private-ip-addresses :portkey.aws.ec2.-2016-11-15.instance-network-interface-specification/secondary-private-ip-address-count :portkey.aws.ec2.-2016-11-15.instance-network-interface-specification/private-ip-address :portkey.aws.ec2.-2016-11-15.instance-network-interface-specification/ipv-6-address-count]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/attach-vpn-gateway-result (clojure.spec.alpha/keys :req-un [] :opt-un [:portkey.aws.ec2.-2016-11-15/vpc-attachment]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/reservation-state #{:retired :paymentfailed :paymentpending :active "payment-pending" "payment-failed" "active" "retired"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/available-instance-capacity-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/instance-capacity))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-request-history-response/last-evaluated-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-request-history-response/next-token (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-request-history-response/spot-fleet-request-id (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/string))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-request-history-response/start-time (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/date-time))
(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/describe-spot-fleet-request-history-response (clojure.spec.alpha/keys :req-un [:portkey.aws.ec2.-2016-11-15/history-records :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-request-history-response/last-evaluated-time :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-request-history-response/spot-fleet-request-id :portkey.aws.ec2.-2016-11-15.describe-spot-fleet-request-history-response/start-time] :opt-un [:portkey.aws.ec2.-2016-11-15.describe-spot-fleet-request-history-response/next-token]))

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/snapshot-state #{:pending :completed "error" "completed" :error "pending"})

(clojure.spec.alpha/def :portkey.aws.ec2.-2016-11-15/vpn-gateway-list (clojure.spec.alpha/coll-of :portkey.aws.ec2.-2016-11-15/vpn-gateway))

(clojure.core/defn describe-spot-fleet-instances ([describe-spot-fleet-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-spot-fleet-instances-request describe-spot-fleet-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-spot-fleet-instances-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-spot-fleet-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeSpotFleetInstances", :http.request.configuration/output-deser-fn deser-describe-spot-fleet-instances-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-spot-fleet-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/describe-spot-fleet-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-spot-fleet-instances-response))

(clojure.core/defn get-password-data ([get-password-data-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-get-password-data-request get-password-data-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/get-password-data-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/get-password-data-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "GetPasswordData", :http.request.configuration/output-deser-fn deser-get-password-data-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef get-password-data :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/get-password-data-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/get-password-data-result))

(clojure.core/defn delete-fleets ([delete-fleets-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-fleets-request delete-fleets-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/delete-fleets-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-fleets-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteFleets", :http.request.configuration/output-deser-fn deser-delete-fleets-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-fleets :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-fleets-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/delete-fleets-result))

(clojure.core/defn describe-import-snapshot-tasks ([] (describe-import-snapshot-tasks {})) ([describe-import-snapshot-tasks-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-import-snapshot-tasks-request describe-import-snapshot-tasks-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-import-snapshot-tasks-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-import-snapshot-tasks-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeImportSnapshotTasks", :http.request.configuration/output-deser-fn deser-describe-import-snapshot-tasks-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-import-snapshot-tasks :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-import-snapshot-tasks-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-import-snapshot-tasks-result))

(clojure.core/defn modify-subnet-attribute ([modify-subnet-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-subnet-attribute-request modify-subnet-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/modify-subnet-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifySubnetAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-subnet-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/modify-subnet-attribute-request) :ret clojure.core/true?)

(clojure.core/defn create-network-acl-entry ([create-network-acl-entry-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-network-acl-entry-request create-network-acl-entry-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-network-acl-entry-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateNetworkAclEntry", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-network-acl-entry :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-network-acl-entry-request) :ret clojure.core/true?)

(clojure.core/defn modify-hosts ([modify-hosts-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-hosts-request modify-hosts-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/modify-hosts-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/modify-hosts-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyHosts", :http.request.configuration/output-deser-fn deser-modify-hosts-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-hosts :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/modify-hosts-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/modify-hosts-result))

(clojure.core/defn describe-instance-status ([] (describe-instance-status {})) ([describe-instance-status-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-instance-status-request describe-instance-status-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-instance-status-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-instance-status-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeInstanceStatus", :http.request.configuration/output-deser-fn deser-describe-instance-status-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-instance-status :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-instance-status-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-instance-status-result))

(clojure.core/defn accept-vpc-peering-connection ([] (accept-vpc-peering-connection {})) ([accept-vpc-peering-connection-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-accept-vpc-peering-connection-request accept-vpc-peering-connection-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/accept-vpc-peering-connection-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/accept-vpc-peering-connection-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AcceptVpcPeeringConnection", :http.request.configuration/output-deser-fn deser-accept-vpc-peering-connection-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef accept-vpc-peering-connection :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/accept-vpc-peering-connection-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/accept-vpc-peering-connection-result))

(clojure.core/defn describe-volumes ([] (describe-volumes {})) ([describe-volumes-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-volumes-request describe-volumes-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-volumes-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-volumes-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVolumes", :http.request.configuration/output-deser-fn deser-describe-volumes-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-volumes :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-volumes-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-volumes-result))

(clojure.core/defn create-launch-template-version ([create-launch-template-version-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-launch-template-version-request create-launch-template-version-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-launch-template-version-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-launch-template-version-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateLaunchTemplateVersion", :http.request.configuration/output-deser-fn deser-create-launch-template-version-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-launch-template-version :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-launch-template-version-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-launch-template-version-result))

(clojure.core/defn describe-key-pairs ([] (describe-key-pairs {})) ([describe-key-pairs-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-key-pairs-request describe-key-pairs-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-key-pairs-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-key-pairs-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeKeyPairs", :http.request.configuration/output-deser-fn deser-describe-key-pairs-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-key-pairs :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-key-pairs-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-key-pairs-result))

(clojure.core/defn describe-reserved-instances ([] (describe-reserved-instances {})) ([describe-reserved-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-reserved-instances-request describe-reserved-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-reserved-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-reserved-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeReservedInstances", :http.request.configuration/output-deser-fn deser-describe-reserved-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-reserved-instances :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-reserved-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-reserved-instances-result))

(clojure.core/defn describe-launch-templates ([] (describe-launch-templates {})) ([describe-launch-templates-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-launch-templates-request describe-launch-templates-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-launch-templates-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-launch-templates-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeLaunchTemplates", :http.request.configuration/output-deser-fn deser-describe-launch-templates-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-launch-templates :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-launch-templates-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-launch-templates-result))

(clojure.core/defn enable-vpc-classic-link-dns-support ([] (enable-vpc-classic-link-dns-support {})) ([enable-vpc-classic-link-dns-support-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-enable-vpc-classic-link-dns-support-request enable-vpc-classic-link-dns-support-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/enable-vpc-classic-link-dns-support-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/enable-vpc-classic-link-dns-support-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "EnableVpcClassicLinkDnsSupport", :http.request.configuration/output-deser-fn deser-enable-vpc-classic-link-dns-support-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef enable-vpc-classic-link-dns-support :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/enable-vpc-classic-link-dns-support-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/enable-vpc-classic-link-dns-support-result))

(clojure.core/defn delete-placement-group ([delete-placement-group-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-placement-group-request delete-placement-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-placement-group-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeletePlacementGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-placement-group :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-placement-group-request) :ret clojure.core/true?)

(clojure.core/defn create-vpc-endpoint-service-configuration ([create-vpc-endpoint-service-configuration-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-vpc-endpoint-service-configuration-request create-vpc-endpoint-service-configuration-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-vpc-endpoint-service-configuration-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-vpc-endpoint-service-configuration-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateVpcEndpointServiceConfiguration", :http.request.configuration/output-deser-fn deser-create-vpc-endpoint-service-configuration-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-vpc-endpoint-service-configuration :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-vpc-endpoint-service-configuration-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-vpc-endpoint-service-configuration-result))

(clojure.core/defn create-dhcp-options ([create-dhcp-options-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-dhcp-options-request create-dhcp-options-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-dhcp-options-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-dhcp-options-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateDhcpOptions", :http.request.configuration/output-deser-fn deser-create-dhcp-options-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-dhcp-options :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-dhcp-options-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-dhcp-options-result))

(clojure.core/defn create-reserved-instances-listing ([create-reserved-instances-listing-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-reserved-instances-listing-request create-reserved-instances-listing-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-reserved-instances-listing-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-reserved-instances-listing-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateReservedInstancesListing", :http.request.configuration/output-deser-fn deser-create-reserved-instances-listing-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-reserved-instances-listing :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-reserved-instances-listing-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-reserved-instances-listing-result))

(clojure.core/defn disassociate-route-table ([disassociate-route-table-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-disassociate-route-table-request disassociate-route-table-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/disassociate-route-table-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DisassociateRouteTable", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef disassociate-route-table :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/disassociate-route-table-request) :ret clojure.core/true?)

(clojure.core/defn import-snapshot ([] (import-snapshot {})) ([import-snapshot-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-import-snapshot-request import-snapshot-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/import-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/import-snapshot-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ImportSnapshot", :http.request.configuration/output-deser-fn deser-import-snapshot-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef import-snapshot :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/import-snapshot-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/import-snapshot-result))

(clojure.core/defn create-fleet ([create-fleet-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-fleet-request create-fleet-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-fleet-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-fleet-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateFleet", :http.request.configuration/output-deser-fn deser-create-fleet-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-fleet :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-fleet-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-fleet-result))

(clojure.core/defn delete-vpn-connection-route ([delete-vpn-connection-route-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-vpn-connection-route-request delete-vpn-connection-route-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-vpn-connection-route-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteVpnConnectionRoute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-vpn-connection-route :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-vpn-connection-route-request) :ret clojure.core/true?)

(clojure.core/defn attach-volume ([attach-volume-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-attach-volume-request attach-volume-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/volume-attachment, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/attach-volume-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AttachVolume", :http.request.configuration/output-deser-fn deser-volume-attachment, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef attach-volume :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/attach-volume-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/volume-attachment))

(clojure.core/defn delete-security-group ([] (delete-security-group {})) ([delete-security-group-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-security-group-request delete-security-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-security-group-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteSecurityGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-security-group :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/delete-security-group-request) :ret clojure.core/true?)

(clojure.core/defn delete-key-pair ([delete-key-pair-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-key-pair-request delete-key-pair-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-key-pair-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteKeyPair", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-key-pair :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-key-pair-request) :ret clojure.core/true?)

(clojure.core/defn describe-host-reservations ([] (describe-host-reservations {})) ([describe-host-reservations-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-host-reservations-request describe-host-reservations-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-host-reservations-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-host-reservations-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeHostReservations", :http.request.configuration/output-deser-fn deser-describe-host-reservations-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-host-reservations :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-host-reservations-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-host-reservations-result))

(clojure.core/defn describe-fleet-history ([describe-fleet-history-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-fleet-history-request describe-fleet-history-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-fleet-history-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-fleet-history-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeFleetHistory", :http.request.configuration/output-deser-fn deser-describe-fleet-history-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-fleet-history :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/describe-fleet-history-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-fleet-history-result))

(clojure.core/defn describe-egress-only-internet-gateways ([] (describe-egress-only-internet-gateways {})) ([describe-egress-only-internet-gateways-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-egress-only-internet-gateways-request describe-egress-only-internet-gateways-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-egress-only-internet-gateways-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-egress-only-internet-gateways-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeEgressOnlyInternetGateways", :http.request.configuration/output-deser-fn deser-describe-egress-only-internet-gateways-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-egress-only-internet-gateways :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-egress-only-internet-gateways-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-egress-only-internet-gateways-result))

(clojure.core/defn modify-volume ([modify-volume-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-volume-request modify-volume-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/modify-volume-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/modify-volume-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyVolume", :http.request.configuration/output-deser-fn deser-modify-volume-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-volume :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/modify-volume-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/modify-volume-result))

(clojure.core/defn get-console-output ([get-console-output-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-get-console-output-request get-console-output-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/get-console-output-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/get-console-output-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "GetConsoleOutput", :http.request.configuration/output-deser-fn deser-get-console-output-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef get-console-output :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/get-console-output-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/get-console-output-result))

(clojure.core/defn reset-instance-attribute ([reset-instance-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-reset-instance-attribute-request reset-instance-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/reset-instance-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ResetInstanceAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef reset-instance-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/reset-instance-attribute-request) :ret clojure.core/true?)

(clojure.core/defn modify-vpc-attribute ([modify-vpc-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-vpc-attribute-request modify-vpc-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/modify-vpc-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyVpcAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-vpc-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/modify-vpc-attribute-request) :ret clojure.core/true?)

(clojure.core/defn describe-volume-status ([] (describe-volume-status {})) ([describe-volume-status-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-volume-status-request describe-volume-status-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-volume-status-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-volume-status-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVolumeStatus", :http.request.configuration/output-deser-fn deser-describe-volume-status-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-volume-status :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-volume-status-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-volume-status-result))

(clojure.core/defn describe-conversion-tasks ([] (describe-conversion-tasks {})) ([describe-conversion-tasks-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-conversion-tasks-request describe-conversion-tasks-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-conversion-tasks-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-conversion-tasks-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeConversionTasks", :http.request.configuration/output-deser-fn deser-describe-conversion-tasks-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-conversion-tasks :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-conversion-tasks-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-conversion-tasks-result))

(clojure.core/defn delete-network-acl-entry ([delete-network-acl-entry-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-network-acl-entry-request delete-network-acl-entry-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-network-acl-entry-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteNetworkAclEntry", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-network-acl-entry :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-network-acl-entry-request) :ret clojure.core/true?)

(clojure.core/defn create-volume ([create-volume-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-volume-request create-volume-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/volume, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-volume-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateVolume", :http.request.configuration/output-deser-fn deser-volume, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-volume :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-volume-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/volume))

(clojure.core/defn copy-fpga-image ([copy-fpga-image-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-copy-fpga-image-request copy-fpga-image-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/copy-fpga-image-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/copy-fpga-image-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CopyFpgaImage", :http.request.configuration/output-deser-fn deser-copy-fpga-image-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef copy-fpga-image :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/copy-fpga-image-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/copy-fpga-image-result))

(clojure.core/defn enable-vgw-route-propagation ([enable-vgw-route-propagation-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-enable-vgw-route-propagation-request enable-vgw-route-propagation-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/enable-vgw-route-propagation-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "EnableVgwRoutePropagation", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef enable-vgw-route-propagation :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/enable-vgw-route-propagation-request) :ret clojure.core/true?)

(clojure.core/defn create-default-subnet ([create-default-subnet-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-default-subnet-request create-default-subnet-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-default-subnet-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-default-subnet-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateDefaultSubnet", :http.request.configuration/output-deser-fn deser-create-default-subnet-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-default-subnet :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-default-subnet-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-default-subnet-result))

(clojure.core/defn replace-network-acl-association ([replace-network-acl-association-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-replace-network-acl-association-request replace-network-acl-association-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/replace-network-acl-association-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/replace-network-acl-association-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ReplaceNetworkAclAssociation", :http.request.configuration/output-deser-fn deser-replace-network-acl-association-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef replace-network-acl-association :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/replace-network-acl-association-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/replace-network-acl-association-result))

(clojure.core/defn modify-reserved-instances ([modify-reserved-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-reserved-instances-request modify-reserved-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/modify-reserved-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/modify-reserved-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyReservedInstances", :http.request.configuration/output-deser-fn deser-modify-reserved-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-reserved-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/modify-reserved-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/modify-reserved-instances-result))

(clojure.core/defn describe-reserved-instances-modifications ([] (describe-reserved-instances-modifications {})) ([describe-reserved-instances-modifications-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-reserved-instances-modifications-request describe-reserved-instances-modifications-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-reserved-instances-modifications-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-reserved-instances-modifications-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeReservedInstancesModifications", :http.request.configuration/output-deser-fn deser-describe-reserved-instances-modifications-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-reserved-instances-modifications :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-reserved-instances-modifications-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-reserved-instances-modifications-result))

(clojure.core/defn create-route-table ([create-route-table-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-route-table-request create-route-table-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-route-table-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-route-table-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateRouteTable", :http.request.configuration/output-deser-fn deser-create-route-table-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-route-table :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-route-table-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-route-table-result))

(clojure.core/defn create-launch-template ([create-launch-template-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-launch-template-request create-launch-template-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-launch-template-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-launch-template-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateLaunchTemplate", :http.request.configuration/output-deser-fn deser-create-launch-template-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-launch-template :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-launch-template-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-launch-template-result))

(clojure.core/defn disassociate-address ([] (disassociate-address {})) ([disassociate-address-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-disassociate-address-request disassociate-address-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/disassociate-address-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DisassociateAddress", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef disassociate-address :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/disassociate-address-request) :ret clojure.core/true?)

(clojure.core/defn describe-network-interface-attribute ([describe-network-interface-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-network-interface-attribute-request describe-network-interface-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-network-interface-attribute-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-network-interface-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeNetworkInterfaceAttribute", :http.request.configuration/output-deser-fn deser-describe-network-interface-attribute-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-network-interface-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/describe-network-interface-attribute-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-network-interface-attribute-result))

(clojure.core/defn describe-prefix-lists ([] (describe-prefix-lists {})) ([describe-prefix-lists-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-prefix-lists-request describe-prefix-lists-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-prefix-lists-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-prefix-lists-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribePrefixLists", :http.request.configuration/output-deser-fn deser-describe-prefix-lists-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-prefix-lists :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-prefix-lists-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-prefix-lists-result))

(clojure.core/defn describe-availability-zones ([] (describe-availability-zones {})) ([describe-availability-zones-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-availability-zones-request describe-availability-zones-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-availability-zones-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-availability-zones-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeAvailabilityZones", :http.request.configuration/output-deser-fn deser-describe-availability-zones-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-availability-zones :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-availability-zones-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-availability-zones-result))

(clojure.core/defn create-route ([create-route-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-route-request create-route-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-route-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-route-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateRoute", :http.request.configuration/output-deser-fn deser-create-route-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-route :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-route-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-route-result))

(clojure.core/defn create-nat-gateway ([create-nat-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-nat-gateway-request create-nat-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-nat-gateway-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-nat-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateNatGateway", :http.request.configuration/output-deser-fn deser-create-nat-gateway-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-nat-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-nat-gateway-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-nat-gateway-result))

(clojure.core/defn describe-snapshot-attribute ([describe-snapshot-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-snapshot-attribute-request describe-snapshot-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-snapshot-attribute-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-snapshot-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeSnapshotAttribute", :http.request.configuration/output-deser-fn deser-describe-snapshot-attribute-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-snapshot-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/describe-snapshot-attribute-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-snapshot-attribute-result))

(clojure.core/defn delete-customer-gateway ([delete-customer-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-customer-gateway-request delete-customer-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-customer-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteCustomerGateway", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-customer-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-customer-gateway-request) :ret clojure.core/true?)

(clojure.core/defn detach-network-interface ([detach-network-interface-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-detach-network-interface-request detach-network-interface-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/detach-network-interface-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DetachNetworkInterface", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef detach-network-interface :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/detach-network-interface-request) :ret clojure.core/true?)

(clojure.core/defn attach-internet-gateway ([attach-internet-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-attach-internet-gateway-request attach-internet-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/attach-internet-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AttachInternetGateway", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef attach-internet-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/attach-internet-gateway-request) :ret clojure.core/true?)

(clojure.core/defn associate-address ([] (associate-address {})) ([associate-address-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-associate-address-request associate-address-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/associate-address-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/associate-address-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AssociateAddress", :http.request.configuration/output-deser-fn deser-associate-address-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef associate-address :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/associate-address-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/associate-address-result))

(clojure.core/defn delete-tags ([delete-tags-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-tags-request delete-tags-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-tags-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteTags", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-tags :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-tags-request) :ret clojure.core/true?)

(clojure.core/defn associate-iam-instance-profile ([associate-iam-instance-profile-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-associate-iam-instance-profile-request associate-iam-instance-profile-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/associate-iam-instance-profile-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/associate-iam-instance-profile-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AssociateIamInstanceProfile", :http.request.configuration/output-deser-fn deser-associate-iam-instance-profile-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef associate-iam-instance-profile :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/associate-iam-instance-profile-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/associate-iam-instance-profile-result))

(clojure.core/defn describe-moving-addresses ([] (describe-moving-addresses {})) ([describe-moving-addresses-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-moving-addresses-request describe-moving-addresses-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-moving-addresses-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-moving-addresses-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeMovingAddresses", :http.request.configuration/output-deser-fn deser-describe-moving-addresses-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-moving-addresses :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-moving-addresses-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-moving-addresses-result))

(clojure.core/defn modify-instance-attribute ([modify-instance-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-instance-attribute-request modify-instance-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/modify-instance-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyInstanceAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-instance-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/modify-instance-attribute-request) :ret clojure.core/true?)

(clojure.core/defn delete-fpga-image ([delete-fpga-image-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-fpga-image-request delete-fpga-image-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/delete-fpga-image-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-fpga-image-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteFpgaImage", :http.request.configuration/output-deser-fn deser-delete-fpga-image-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-fpga-image :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-fpga-image-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/delete-fpga-image-result))

(clojure.core/defn cancel-export-task ([cancel-export-task-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-cancel-export-task-request cancel-export-task-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/cancel-export-task-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CancelExportTask", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef cancel-export-task :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/cancel-export-task-request) :ret clojure.core/true?)

(clojure.core/defn describe-images ([] (describe-images {})) ([describe-images-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-images-request describe-images-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-images-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-images-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeImages", :http.request.configuration/output-deser-fn deser-describe-images-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-images :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-images-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-images-result))

(clojure.core/defn describe-instance-attribute ([describe-instance-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-instance-attribute-request describe-instance-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/instance-attribute, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-instance-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeInstanceAttribute", :http.request.configuration/output-deser-fn deser-instance-attribute, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-instance-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/describe-instance-attribute-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/instance-attribute))

(clojure.core/defn describe-id-format ([] (describe-id-format {})) ([describe-id-format-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-id-format-request describe-id-format-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-id-format-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-id-format-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeIdFormat", :http.request.configuration/output-deser-fn deser-describe-id-format-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-id-format :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-id-format-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-id-format-result))

(clojure.core/defn modify-instance-credit-specification ([modify-instance-credit-specification-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-instance-credit-specification-request modify-instance-credit-specification-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/modify-instance-credit-specification-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/modify-instance-credit-specification-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyInstanceCreditSpecification", :http.request.configuration/output-deser-fn deser-modify-instance-credit-specification-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-instance-credit-specification :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/modify-instance-credit-specification-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/modify-instance-credit-specification-result))

(clojure.core/defn reset-network-interface-attribute ([reset-network-interface-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-reset-network-interface-attribute-request reset-network-interface-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/reset-network-interface-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ResetNetworkInterfaceAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef reset-network-interface-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/reset-network-interface-attribute-request) :ret clojure.core/true?)

(clojure.core/defn describe-reserved-instances-listings ([] (describe-reserved-instances-listings {})) ([describe-reserved-instances-listings-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-reserved-instances-listings-request describe-reserved-instances-listings-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-reserved-instances-listings-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-reserved-instances-listings-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeReservedInstancesListings", :http.request.configuration/output-deser-fn deser-describe-reserved-instances-listings-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-reserved-instances-listings :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-reserved-instances-listings-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-reserved-instances-listings-result))

(clojure.core/defn describe-security-group-references ([describe-security-group-references-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-security-group-references-request describe-security-group-references-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-security-group-references-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-security-group-references-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeSecurityGroupReferences", :http.request.configuration/output-deser-fn deser-describe-security-group-references-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-security-group-references :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/describe-security-group-references-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-security-group-references-result))

(clojure.core/defn associate-dhcp-options ([associate-dhcp-options-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-associate-dhcp-options-request associate-dhcp-options-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/associate-dhcp-options-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AssociateDhcpOptions", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef associate-dhcp-options :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/associate-dhcp-options-request) :ret clojure.core/true?)

(clojure.core/defn create-tags ([create-tags-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-tags-request create-tags-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-tags-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateTags", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-tags :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-tags-request) :ret clojure.core/true?)

(clojure.core/defn revoke-security-group-ingress ([] (revoke-security-group-ingress {})) ([revoke-security-group-ingress-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-revoke-security-group-ingress-request revoke-security-group-ingress-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/revoke-security-group-ingress-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RevokeSecurityGroupIngress", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef revoke-security-group-ingress :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/revoke-security-group-ingress-request) :ret clojure.core/true?)

(clojure.core/defn authorize-security-group-ingress ([] (authorize-security-group-ingress {})) ([authorize-security-group-ingress-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-authorize-security-group-ingress-request authorize-security-group-ingress-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/authorize-security-group-ingress-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AuthorizeSecurityGroupIngress", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef authorize-security-group-ingress :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/authorize-security-group-ingress-request) :ret clojure.core/true?)

(clojure.core/defn describe-vpc-endpoint-services ([] (describe-vpc-endpoint-services {})) ([describe-vpc-endpoint-services-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-vpc-endpoint-services-request describe-vpc-endpoint-services-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-services-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-services-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVpcEndpointServices", :http.request.configuration/output-deser-fn deser-describe-vpc-endpoint-services-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpc-endpoint-services :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-services-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-services-result))

(clojure.core/defn create-snapshot ([create-snapshot-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-snapshot-request create-snapshot-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/snapshot, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-snapshot-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateSnapshot", :http.request.configuration/output-deser-fn deser-snapshot, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-snapshot-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/snapshot))

(clojure.core/defn import-key-pair ([import-key-pair-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-import-key-pair-request import-key-pair-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/import-key-pair-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/import-key-pair-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ImportKeyPair", :http.request.configuration/output-deser-fn deser-import-key-pair-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef import-key-pair :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/import-key-pair-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/import-key-pair-result))

(clojure.core/defn describe-export-tasks ([] (describe-export-tasks {})) ([describe-export-tasks-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-export-tasks-request describe-export-tasks-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-export-tasks-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-export-tasks-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeExportTasks", :http.request.configuration/output-deser-fn deser-describe-export-tasks-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-export-tasks :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-export-tasks-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-export-tasks-result))

(clojure.core/defn describe-volume-attribute ([describe-volume-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-volume-attribute-request describe-volume-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-volume-attribute-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-volume-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVolumeAttribute", :http.request.configuration/output-deser-fn deser-describe-volume-attribute-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-volume-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/describe-volume-attribute-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-volume-attribute-result))

(clojure.core/defn describe-scheduled-instances ([] (describe-scheduled-instances {})) ([describe-scheduled-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-scheduled-instances-request describe-scheduled-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-scheduled-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-scheduled-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeScheduledInstances", :http.request.configuration/output-deser-fn deser-describe-scheduled-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-scheduled-instances :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-scheduled-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-scheduled-instances-result))

(clojure.core/defn describe-spot-datafeed-subscription ([] (describe-spot-datafeed-subscription {})) ([describe-spot-datafeed-subscription-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-spot-datafeed-subscription-request describe-spot-datafeed-subscription-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-spot-datafeed-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-spot-datafeed-subscription-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeSpotDatafeedSubscription", :http.request.configuration/output-deser-fn deser-describe-spot-datafeed-subscription-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-spot-datafeed-subscription :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-spot-datafeed-subscription-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-spot-datafeed-subscription-result))

(clojure.core/defn describe-volumes-modifications ([] (describe-volumes-modifications {})) ([describe-volumes-modifications-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-volumes-modifications-request describe-volumes-modifications-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-volumes-modifications-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-volumes-modifications-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVolumesModifications", :http.request.configuration/output-deser-fn deser-describe-volumes-modifications-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-volumes-modifications :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-volumes-modifications-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-volumes-modifications-result))

(clojure.core/defn assign-ipv-6-addresses ([assign-ipv-6-addresses-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-assign-ipv-6-addresses-request assign-ipv-6-addresses-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/assign-ipv-6-addresses-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/assign-ipv-6-addresses-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AssignIpv6Addresses", :http.request.configuration/output-deser-fn deser-assign-ipv-6-addresses-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef assign-ipv-6-addresses :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/assign-ipv-6-addresses-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/assign-ipv-6-addresses-result))

(clojure.core/defn delete-vpn-gateway ([delete-vpn-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-vpn-gateway-request delete-vpn-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-vpn-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteVpnGateway", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-vpn-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-vpn-gateway-request) :ret clojure.core/true?)

(clojure.core/defn disassociate-iam-instance-profile ([disassociate-iam-instance-profile-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-disassociate-iam-instance-profile-request disassociate-iam-instance-profile-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/disassociate-iam-instance-profile-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/disassociate-iam-instance-profile-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DisassociateIamInstanceProfile", :http.request.configuration/output-deser-fn deser-disassociate-iam-instance-profile-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef disassociate-iam-instance-profile :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/disassociate-iam-instance-profile-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/disassociate-iam-instance-profile-result))

(clojure.core/defn purchase-host-reservation ([purchase-host-reservation-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-purchase-host-reservation-request purchase-host-reservation-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/purchase-host-reservation-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/purchase-host-reservation-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "PurchaseHostReservation", :http.request.configuration/output-deser-fn deser-purchase-host-reservation-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef purchase-host-reservation :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/purchase-host-reservation-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/purchase-host-reservation-result))

(clojure.core/defn describe-vpc-endpoint-service-configurations ([] (describe-vpc-endpoint-service-configurations {})) ([describe-vpc-endpoint-service-configurations-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-vpc-endpoint-service-configurations-request describe-vpc-endpoint-service-configurations-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-service-configurations-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-service-configurations-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVpcEndpointServiceConfigurations", :http.request.configuration/output-deser-fn deser-describe-vpc-endpoint-service-configurations-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpc-endpoint-service-configurations :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-service-configurations-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-service-configurations-result))

(clojure.core/defn reject-vpc-peering-connection ([reject-vpc-peering-connection-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-reject-vpc-peering-connection-request reject-vpc-peering-connection-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/reject-vpc-peering-connection-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/reject-vpc-peering-connection-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RejectVpcPeeringConnection", :http.request.configuration/output-deser-fn deser-reject-vpc-peering-connection-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef reject-vpc-peering-connection :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/reject-vpc-peering-connection-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reject-vpc-peering-connection-result))

(clojure.core/defn reboot-instances ([reboot-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-reboot-instances-request reboot-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/reboot-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RebootInstances", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef reboot-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/reboot-instances-request) :ret clojure.core/true?)

(clojure.core/defn describe-dhcp-options ([] (describe-dhcp-options {})) ([describe-dhcp-options-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-dhcp-options-request describe-dhcp-options-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-dhcp-options-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-dhcp-options-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeDhcpOptions", :http.request.configuration/output-deser-fn deser-describe-dhcp-options-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-dhcp-options :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-dhcp-options-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-dhcp-options-result))

(clojure.core/defn delete-volume ([delete-volume-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-volume-request delete-volume-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-volume-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteVolume", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-volume :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-volume-request) :ret clojure.core/true?)

(clojure.core/defn allocate-hosts ([allocate-hosts-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-allocate-hosts-request allocate-hosts-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/allocate-hosts-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/allocate-hosts-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AllocateHosts", :http.request.configuration/output-deser-fn deser-allocate-hosts-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef allocate-hosts :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/allocate-hosts-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/allocate-hosts-result))

(clojure.core/defn describe-spot-fleet-request-history ([describe-spot-fleet-request-history-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-spot-fleet-request-history-request describe-spot-fleet-request-history-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-spot-fleet-request-history-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-spot-fleet-request-history-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeSpotFleetRequestHistory", :http.request.configuration/output-deser-fn deser-describe-spot-fleet-request-history-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-spot-fleet-request-history :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/describe-spot-fleet-request-history-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-spot-fleet-request-history-response))

(clojure.core/defn associate-subnet-cidr-block ([associate-subnet-cidr-block-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-associate-subnet-cidr-block-request associate-subnet-cidr-block-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/associate-subnet-cidr-block-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/associate-subnet-cidr-block-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AssociateSubnetCidrBlock", :http.request.configuration/output-deser-fn deser-associate-subnet-cidr-block-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef associate-subnet-cidr-block :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/associate-subnet-cidr-block-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/associate-subnet-cidr-block-result))

(clojure.core/defn register-image ([register-image-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-register-image-request register-image-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/register-image-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/register-image-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RegisterImage", :http.request.configuration/output-deser-fn deser-register-image-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef register-image :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/register-image-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/register-image-result))

(clojure.core/defn create-vpc-endpoint-connection-notification ([create-vpc-endpoint-connection-notification-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-vpc-endpoint-connection-notification-request create-vpc-endpoint-connection-notification-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-vpc-endpoint-connection-notification-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-vpc-endpoint-connection-notification-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateVpcEndpointConnectionNotification", :http.request.configuration/output-deser-fn deser-create-vpc-endpoint-connection-notification-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-vpc-endpoint-connection-notification :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-vpc-endpoint-connection-notification-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-vpc-endpoint-connection-notification-result))

(clojure.core/defn assign-private-ip-addresses ([assign-private-ip-addresses-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-assign-private-ip-addresses-request assign-private-ip-addresses-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/assign-private-ip-addresses-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AssignPrivateIpAddresses", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef assign-private-ip-addresses :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/assign-private-ip-addresses-request) :ret clojure.core/true?)

(clojure.core/defn describe-vpn-gateways ([] (describe-vpn-gateways {})) ([describe-vpn-gateways-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-vpn-gateways-request describe-vpn-gateways-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-vpn-gateways-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-vpn-gateways-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVpnGateways", :http.request.configuration/output-deser-fn deser-describe-vpn-gateways-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpn-gateways :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-vpn-gateways-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-vpn-gateways-result))

(clojure.core/defn delete-internet-gateway ([delete-internet-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-internet-gateway-request delete-internet-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-internet-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteInternetGateway", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-internet-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-internet-gateway-request) :ret clojure.core/true?)

(clojure.core/defn create-internet-gateway ([] (create-internet-gateway {})) ([create-internet-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-internet-gateway-request create-internet-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-internet-gateway-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-internet-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateInternetGateway", :http.request.configuration/output-deser-fn deser-create-internet-gateway-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-internet-gateway :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/create-internet-gateway-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-internet-gateway-result))

(clojure.core/defn describe-network-interfaces ([] (describe-network-interfaces {})) ([describe-network-interfaces-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-network-interfaces-request describe-network-interfaces-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-network-interfaces-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-network-interfaces-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeNetworkInterfaces", :http.request.configuration/output-deser-fn deser-describe-network-interfaces-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-network-interfaces :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-network-interfaces-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-network-interfaces-result))

(clojure.core/defn import-image ([] (import-image {})) ([import-image-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-import-image-request import-image-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/import-image-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/import-image-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ImportImage", :http.request.configuration/output-deser-fn deser-import-image-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef import-image :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/import-image-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/import-image-result))

(clojure.core/defn modify-network-interface-attribute ([modify-network-interface-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-network-interface-attribute-request modify-network-interface-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/modify-network-interface-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyNetworkInterfaceAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-network-interface-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/modify-network-interface-attribute-request) :ret clojure.core/true?)

(clojure.core/defn delete-vpc ([delete-vpc-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-vpc-request delete-vpc-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-vpc-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteVpc", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-vpc :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-vpc-request) :ret clojure.core/true?)

(clojure.core/defn describe-network-acls ([] (describe-network-acls {})) ([describe-network-acls-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-network-acls-request describe-network-acls-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-network-acls-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-network-acls-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeNetworkAcls", :http.request.configuration/output-deser-fn deser-describe-network-acls-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-network-acls :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-network-acls-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-network-acls-result))

(clojure.core/defn describe-vpc-classic-link ([] (describe-vpc-classic-link {})) ([describe-vpc-classic-link-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-vpc-classic-link-request describe-vpc-classic-link-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-vpc-classic-link-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-vpc-classic-link-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVpcClassicLink", :http.request.configuration/output-deser-fn deser-describe-vpc-classic-link-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpc-classic-link :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-vpc-classic-link-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-vpc-classic-link-result))

(clojure.core/defn describe-subnets ([] (describe-subnets {})) ([describe-subnets-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-subnets-request describe-subnets-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-subnets-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-subnets-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeSubnets", :http.request.configuration/output-deser-fn deser-describe-subnets-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-subnets :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-subnets-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-subnets-result))

(clojure.core/defn describe-bundle-tasks ([] (describe-bundle-tasks {})) ([describe-bundle-tasks-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-bundle-tasks-request describe-bundle-tasks-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-bundle-tasks-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-bundle-tasks-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeBundleTasks", :http.request.configuration/output-deser-fn deser-describe-bundle-tasks-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-bundle-tasks :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-bundle-tasks-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-bundle-tasks-result))

(clojure.core/defn describe-scheduled-instance-availability ([describe-scheduled-instance-availability-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-scheduled-instance-availability-request describe-scheduled-instance-availability-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-scheduled-instance-availability-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-scheduled-instance-availability-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeScheduledInstanceAvailability", :http.request.configuration/output-deser-fn deser-describe-scheduled-instance-availability-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-scheduled-instance-availability :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/describe-scheduled-instance-availability-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-scheduled-instance-availability-result))

(clojure.core/defn delete-nat-gateway ([delete-nat-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-nat-gateway-request delete-nat-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/delete-nat-gateway-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-nat-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteNatGateway", :http.request.configuration/output-deser-fn deser-delete-nat-gateway-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-nat-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-nat-gateway-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/delete-nat-gateway-result))

(clojure.core/defn report-instance-status ([report-instance-status-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-report-instance-status-request report-instance-status-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/report-instance-status-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ReportInstanceStatus", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef report-instance-status :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/report-instance-status-request) :ret clojure.core/true?)

(clojure.core/defn enable-vpc-classic-link ([enable-vpc-classic-link-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-enable-vpc-classic-link-request enable-vpc-classic-link-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/enable-vpc-classic-link-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/enable-vpc-classic-link-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "EnableVpcClassicLink", :http.request.configuration/output-deser-fn deser-enable-vpc-classic-link-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef enable-vpc-classic-link :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/enable-vpc-classic-link-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/enable-vpc-classic-link-result))

(clojure.core/defn describe-spot-price-history ([] (describe-spot-price-history {})) ([describe-spot-price-history-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-spot-price-history-request describe-spot-price-history-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-spot-price-history-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-spot-price-history-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeSpotPriceHistory", :http.request.configuration/output-deser-fn deser-describe-spot-price-history-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-spot-price-history :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-spot-price-history-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-spot-price-history-result))

(clojure.core/defn create-subnet ([create-subnet-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-subnet-request create-subnet-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-subnet-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-subnet-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateSubnet", :http.request.configuration/output-deser-fn deser-create-subnet-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-subnet :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-subnet-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-subnet-result))

(clojure.core/defn create-vpn-gateway ([create-vpn-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-vpn-gateway-request create-vpn-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-vpn-gateway-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-vpn-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateVpnGateway", :http.request.configuration/output-deser-fn deser-create-vpn-gateway-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-vpn-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-vpn-gateway-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-vpn-gateway-result))

(clojure.core/defn modify-vpc-endpoint-connection-notification ([modify-vpc-endpoint-connection-notification-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-vpc-endpoint-connection-notification-request modify-vpc-endpoint-connection-notification-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/modify-vpc-endpoint-connection-notification-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/modify-vpc-endpoint-connection-notification-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyVpcEndpointConnectionNotification", :http.request.configuration/output-deser-fn deser-modify-vpc-endpoint-connection-notification-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-vpc-endpoint-connection-notification :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/modify-vpc-endpoint-connection-notification-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/modify-vpc-endpoint-connection-notification-result))

(clojure.core/defn modify-launch-template ([] (modify-launch-template {})) ([modify-launch-template-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-launch-template-request modify-launch-template-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/modify-launch-template-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/modify-launch-template-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyLaunchTemplate", :http.request.configuration/output-deser-fn deser-modify-launch-template-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-launch-template :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/modify-launch-template-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/modify-launch-template-result))

(clojure.core/defn disable-vgw-route-propagation ([disable-vgw-route-propagation-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-disable-vgw-route-propagation-request disable-vgw-route-propagation-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/disable-vgw-route-propagation-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DisableVgwRoutePropagation", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef disable-vgw-route-propagation :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/disable-vgw-route-propagation-request) :ret clojure.core/true?)

(clojure.core/defn reset-image-attribute ([reset-image-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-reset-image-attribute-request reset-image-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/reset-image-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ResetImageAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef reset-image-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/reset-image-attribute-request) :ret clojure.core/true?)

(clojure.core/defn describe-fpga-images ([] (describe-fpga-images {})) ([describe-fpga-images-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-fpga-images-request describe-fpga-images-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-fpga-images-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-fpga-images-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeFpgaImages", :http.request.configuration/output-deser-fn deser-describe-fpga-images-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-fpga-images :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-fpga-images-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-fpga-images-result))

(clojure.core/defn allocate-address ([] (allocate-address {})) ([allocate-address-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-allocate-address-request allocate-address-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/allocate-address-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/allocate-address-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AllocateAddress", :http.request.configuration/output-deser-fn deser-allocate-address-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef allocate-address :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/allocate-address-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/allocate-address-result))

(clojure.core/defn modify-instance-placement ([modify-instance-placement-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-instance-placement-request modify-instance-placement-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/modify-instance-placement-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/modify-instance-placement-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyInstancePlacement", :http.request.configuration/output-deser-fn deser-modify-instance-placement-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-instance-placement :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/modify-instance-placement-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/modify-instance-placement-result))

(clojure.core/defn create-image ([create-image-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-image-request create-image-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-image-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-image-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateImage", :http.request.configuration/output-deser-fn deser-create-image-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-image :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-image-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-image-result))

(clojure.core/defn describe-principal-id-format ([] (describe-principal-id-format {})) ([describe-principal-id-format-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-principal-id-format-request describe-principal-id-format-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-principal-id-format-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-principal-id-format-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribePrincipalIdFormat", :http.request.configuration/output-deser-fn deser-describe-principal-id-format-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-principal-id-format :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-principal-id-format-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-principal-id-format-result))

(clojure.core/defn purchase-reserved-instances-offering ([purchase-reserved-instances-offering-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-purchase-reserved-instances-offering-request purchase-reserved-instances-offering-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/purchase-reserved-instances-offering-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/purchase-reserved-instances-offering-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "PurchaseReservedInstancesOffering", :http.request.configuration/output-deser-fn deser-purchase-reserved-instances-offering-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef purchase-reserved-instances-offering :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/purchase-reserved-instances-offering-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/purchase-reserved-instances-offering-result))

(clojure.core/defn delete-egress-only-internet-gateway ([delete-egress-only-internet-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-egress-only-internet-gateway-request delete-egress-only-internet-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/delete-egress-only-internet-gateway-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-egress-only-internet-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteEgressOnlyInternetGateway", :http.request.configuration/output-deser-fn deser-delete-egress-only-internet-gateway-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-egress-only-internet-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-egress-only-internet-gateway-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/delete-egress-only-internet-gateway-result))

(clojure.core/defn describe-fleets ([] (describe-fleets {})) ([describe-fleets-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-fleets-request describe-fleets-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-fleets-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-fleets-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeFleets", :http.request.configuration/output-deser-fn deser-describe-fleets-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-fleets :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-fleets-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-fleets-result))

(clojure.core/defn delete-vpc-endpoint-connection-notifications ([delete-vpc-endpoint-connection-notifications-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-vpc-endpoint-connection-notifications-request delete-vpc-endpoint-connection-notifications-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/delete-vpc-endpoint-connection-notifications-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-vpc-endpoint-connection-notifications-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteVpcEndpointConnectionNotifications", :http.request.configuration/output-deser-fn deser-delete-vpc-endpoint-connection-notifications-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-vpc-endpoint-connection-notifications :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-vpc-endpoint-connection-notifications-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/delete-vpc-endpoint-connection-notifications-result))

(clojure.core/defn create-vpc ([create-vpc-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-vpc-request create-vpc-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-vpc-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-vpc-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateVpc", :http.request.configuration/output-deser-fn deser-create-vpc-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-vpc :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-vpc-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-vpc-result))

(clojure.core/defn delete-launch-template ([] (delete-launch-template {})) ([delete-launch-template-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-launch-template-request delete-launch-template-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/delete-launch-template-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-launch-template-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteLaunchTemplate", :http.request.configuration/output-deser-fn deser-delete-launch-template-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-launch-template :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/delete-launch-template-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/delete-launch-template-result))

(clojure.core/defn describe-internet-gateways ([] (describe-internet-gateways {})) ([describe-internet-gateways-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-internet-gateways-request describe-internet-gateways-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-internet-gateways-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-internet-gateways-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeInternetGateways", :http.request.configuration/output-deser-fn deser-describe-internet-gateways-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-internet-gateways :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-internet-gateways-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-internet-gateways-result))

(clojure.core/defn describe-tags ([] (describe-tags {})) ([describe-tags-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-tags-request describe-tags-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-tags-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-tags-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeTags", :http.request.configuration/output-deser-fn deser-describe-tags-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-tags :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-tags-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-tags-result))

(clojure.core/defn request-spot-instances ([] (request-spot-instances {})) ([request-spot-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-request-spot-instances-request request-spot-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/request-spot-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/request-spot-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RequestSpotInstances", :http.request.configuration/output-deser-fn deser-request-spot-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef request-spot-instances :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/request-spot-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/request-spot-instances-result))

(clojure.core/defn describe-security-groups ([] (describe-security-groups {})) ([describe-security-groups-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-security-groups-request describe-security-groups-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-security-groups-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-security-groups-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeSecurityGroups", :http.request.configuration/output-deser-fn deser-describe-security-groups-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-security-groups :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-security-groups-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-security-groups-result))

(clojure.core/defn accept-vpc-endpoint-connections ([accept-vpc-endpoint-connections-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-accept-vpc-endpoint-connections-request accept-vpc-endpoint-connections-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/accept-vpc-endpoint-connections-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/accept-vpc-endpoint-connections-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AcceptVpcEndpointConnections", :http.request.configuration/output-deser-fn deser-accept-vpc-endpoint-connections-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef accept-vpc-endpoint-connections :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/accept-vpc-endpoint-connections-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/accept-vpc-endpoint-connections-result))

(clojure.core/defn modify-vpc-endpoint-service-permissions ([modify-vpc-endpoint-service-permissions-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-vpc-endpoint-service-permissions-request modify-vpc-endpoint-service-permissions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/modify-vpc-endpoint-service-permissions-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/modify-vpc-endpoint-service-permissions-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyVpcEndpointServicePermissions", :http.request.configuration/output-deser-fn deser-modify-vpc-endpoint-service-permissions-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-vpc-endpoint-service-permissions :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/modify-vpc-endpoint-service-permissions-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/modify-vpc-endpoint-service-permissions-result))

(clojure.core/defn disable-vpc-classic-link-dns-support ([] (disable-vpc-classic-link-dns-support {})) ([disable-vpc-classic-link-dns-support-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-disable-vpc-classic-link-dns-support-request disable-vpc-classic-link-dns-support-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/disable-vpc-classic-link-dns-support-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/disable-vpc-classic-link-dns-support-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DisableVpcClassicLinkDnsSupport", :http.request.configuration/output-deser-fn deser-disable-vpc-classic-link-dns-support-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef disable-vpc-classic-link-dns-support :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/disable-vpc-classic-link-dns-support-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/disable-vpc-classic-link-dns-support-result))

(clojure.core/defn accept-reserved-instances-exchange-quote ([accept-reserved-instances-exchange-quote-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-accept-reserved-instances-exchange-quote-request accept-reserved-instances-exchange-quote-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/accept-reserved-instances-exchange-quote-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/accept-reserved-instances-exchange-quote-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AcceptReservedInstancesExchangeQuote", :http.request.configuration/output-deser-fn deser-accept-reserved-instances-exchange-quote-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef accept-reserved-instances-exchange-quote :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/accept-reserved-instances-exchange-quote-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/accept-reserved-instances-exchange-quote-result))

(clojure.core/defn describe-vpcs ([] (describe-vpcs {})) ([describe-vpcs-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-vpcs-request describe-vpcs-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-vpcs-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-vpcs-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVpcs", :http.request.configuration/output-deser-fn deser-describe-vpcs-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpcs :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-vpcs-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-vpcs-result))

(clojure.core/defn delete-subnet ([delete-subnet-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-subnet-request delete-subnet-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-subnet-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteSubnet", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-subnet :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-subnet-request) :ret clojure.core/true?)

(clojure.core/defn describe-classic-link-instances ([] (describe-classic-link-instances {})) ([describe-classic-link-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-classic-link-instances-request describe-classic-link-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-classic-link-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-classic-link-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeClassicLinkInstances", :http.request.configuration/output-deser-fn deser-describe-classic-link-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-classic-link-instances :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-classic-link-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-classic-link-instances-result))

(clojure.core/defn modify-spot-fleet-request ([modify-spot-fleet-request-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-spot-fleet-request-request modify-spot-fleet-request-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/modify-spot-fleet-request-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/modify-spot-fleet-request-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifySpotFleetRequest", :http.request.configuration/output-deser-fn deser-modify-spot-fleet-request-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-spot-fleet-request :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/modify-spot-fleet-request-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/modify-spot-fleet-request-response))

(clojure.core/defn get-reserved-instances-exchange-quote ([get-reserved-instances-exchange-quote-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-get-reserved-instances-exchange-quote-request get-reserved-instances-exchange-quote-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/get-reserved-instances-exchange-quote-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/get-reserved-instances-exchange-quote-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "GetReservedInstancesExchangeQuote", :http.request.configuration/output-deser-fn deser-get-reserved-instances-exchange-quote-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef get-reserved-instances-exchange-quote :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/get-reserved-instances-exchange-quote-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/get-reserved-instances-exchange-quote-result))

(clojure.core/defn attach-network-interface ([attach-network-interface-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-attach-network-interface-request attach-network-interface-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/attach-network-interface-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/attach-network-interface-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AttachNetworkInterface", :http.request.configuration/output-deser-fn deser-attach-network-interface-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef attach-network-interface :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/attach-network-interface-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attach-network-interface-result))

(clojure.core/defn delete-snapshot ([delete-snapshot-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-snapshot-request delete-snapshot-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-snapshot-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteSnapshot", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-snapshot-request) :ret clojure.core/true?)

(clojure.core/defn describe-stale-security-groups ([describe-stale-security-groups-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-stale-security-groups-request describe-stale-security-groups-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-stale-security-groups-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-stale-security-groups-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeStaleSecurityGroups", :http.request.configuration/output-deser-fn deser-describe-stale-security-groups-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-stale-security-groups :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/describe-stale-security-groups-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-stale-security-groups-result))

(clojure.core/defn cancel-conversion-task ([cancel-conversion-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-cancel-conversion-request cancel-conversion-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/cancel-conversion-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CancelConversionTask", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef cancel-conversion-task :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/cancel-conversion-request) :ret clojure.core/true?)

(clojure.core/defn describe-fpga-image-attribute ([describe-fpga-image-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-fpga-image-attribute-request describe-fpga-image-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-fpga-image-attribute-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-fpga-image-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeFpgaImageAttribute", :http.request.configuration/output-deser-fn deser-describe-fpga-image-attribute-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-fpga-image-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/describe-fpga-image-attribute-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-fpga-image-attribute-result))

(clojure.core/defn describe-customer-gateways ([] (describe-customer-gateways {})) ([describe-customer-gateways-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-customer-gateways-request describe-customer-gateways-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-customer-gateways-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-customer-gateways-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeCustomerGateways", :http.request.configuration/output-deser-fn deser-describe-customer-gateways-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-customer-gateways :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-customer-gateways-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-customer-gateways-result))

(clojure.core/defn delete-vpc-endpoints ([delete-vpc-endpoints-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-vpc-endpoints-request delete-vpc-endpoints-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/delete-vpc-endpoints-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-vpc-endpoints-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteVpcEndpoints", :http.request.configuration/output-deser-fn deser-delete-vpc-endpoints-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-vpc-endpoints :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-vpc-endpoints-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/delete-vpc-endpoints-result))

(clojure.core/defn describe-spot-instance-requests ([] (describe-spot-instance-requests {})) ([describe-spot-instance-requests-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-spot-instance-requests-request describe-spot-instance-requests-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-spot-instance-requests-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-spot-instance-requests-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeSpotInstanceRequests", :http.request.configuration/output-deser-fn deser-describe-spot-instance-requests-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-spot-instance-requests :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-spot-instance-requests-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-spot-instance-requests-result))

(clojure.core/defn delete-route ([delete-route-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-route-request delete-route-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-route-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteRoute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-route :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-route-request) :ret clojure.core/true?)

(clojure.core/defn describe-addresses ([] (describe-addresses {})) ([describe-addresses-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-addresses-request describe-addresses-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-addresses-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-addresses-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeAddresses", :http.request.configuration/output-deser-fn deser-describe-addresses-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-addresses :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-addresses-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-addresses-result))

(clojure.core/defn describe-route-tables ([] (describe-route-tables {})) ([describe-route-tables-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-route-tables-request describe-route-tables-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-route-tables-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-route-tables-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeRouteTables", :http.request.configuration/output-deser-fn deser-describe-route-tables-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-route-tables :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-route-tables-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-route-tables-result))

(clojure.core/defn run-scheduled-instances ([run-scheduled-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-run-scheduled-instances-request run-scheduled-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/run-scheduled-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/run-scheduled-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RunScheduledInstances", :http.request.configuration/output-deser-fn deser-run-scheduled-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef run-scheduled-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/run-scheduled-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/run-scheduled-instances-result))

(clojure.core/defn release-address ([] (release-address {})) ([release-address-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-release-address-request release-address-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/release-address-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ReleaseAddress", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef release-address :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/release-address-request) :ret clojure.core/true?)

(clojure.core/defn delete-route-table ([delete-route-table-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-route-table-request delete-route-table-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-route-table-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteRouteTable", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-route-table :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-route-table-request) :ret clojure.core/true?)

(clojure.core/defn describe-reserved-instances-offerings ([] (describe-reserved-instances-offerings {})) ([describe-reserved-instances-offerings-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-reserved-instances-offerings-request describe-reserved-instances-offerings-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-reserved-instances-offerings-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-reserved-instances-offerings-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeReservedInstancesOfferings", :http.request.configuration/output-deser-fn deser-describe-reserved-instances-offerings-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-reserved-instances-offerings :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-reserved-instances-offerings-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-reserved-instances-offerings-result))

(clojure.core/defn import-volume ([import-volume-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-import-volume-request import-volume-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/import-volume-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/import-volume-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ImportVolume", :http.request.configuration/output-deser-fn deser-import-volume-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef import-volume :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/import-volume-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/import-volume-result))

(clojure.core/defn create-network-acl ([create-network-acl-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-network-acl-request create-network-acl-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-network-acl-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-network-acl-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateNetworkAcl", :http.request.configuration/output-deser-fn deser-create-network-acl-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-network-acl :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-network-acl-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-network-acl-result))

(clojure.core/defn describe-nat-gateways ([] (describe-nat-gateways {})) ([describe-nat-gateways-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-nat-gateways-request describe-nat-gateways-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-nat-gateways-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-nat-gateways-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeNatGateways", :http.request.configuration/output-deser-fn deser-describe-nat-gateways-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-nat-gateways :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-nat-gateways-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-nat-gateways-result))

(clojure.core/defn modify-image-attribute ([modify-image-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-image-attribute-request modify-image-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/modify-image-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyImageAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-image-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/modify-image-attribute-request) :ret clojure.core/true?)

(clojure.core/defn delete-network-acl ([delete-network-acl-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-network-acl-request delete-network-acl-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-network-acl-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteNetworkAcl", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-network-acl :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-network-acl-request) :ret clojure.core/true?)

(clojure.core/defn update-security-group-rule-descriptions-egress ([update-security-group-rule-descriptions-egress-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-update-security-group-rule-descriptions-egress-request update-security-group-rule-descriptions-egress-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/update-security-group-rule-descriptions-egress-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/update-security-group-rule-descriptions-egress-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "UpdateSecurityGroupRuleDescriptionsEgress", :http.request.configuration/output-deser-fn deser-update-security-group-rule-descriptions-egress-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef update-security-group-rule-descriptions-egress :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/update-security-group-rule-descriptions-egress-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/update-security-group-rule-descriptions-egress-result))

(clojure.core/defn describe-spot-fleet-requests ([] (describe-spot-fleet-requests {})) ([describe-spot-fleet-requests-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-spot-fleet-requests-request describe-spot-fleet-requests-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-spot-fleet-requests-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-spot-fleet-requests-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeSpotFleetRequests", :http.request.configuration/output-deser-fn deser-describe-spot-fleet-requests-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-spot-fleet-requests :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-spot-fleet-requests-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-spot-fleet-requests-response))

(clojure.core/defn describe-launch-template-versions ([] (describe-launch-template-versions {})) ([describe-launch-template-versions-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-launch-template-versions-request describe-launch-template-versions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-launch-template-versions-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-launch-template-versions-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeLaunchTemplateVersions", :http.request.configuration/output-deser-fn deser-describe-launch-template-versions-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-launch-template-versions :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-launch-template-versions-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-launch-template-versions-result))

(clojure.core/defn cancel-import-task ([] (cancel-import-task {})) ([cancel-import-task-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-cancel-import-task-request cancel-import-task-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/cancel-import-task-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/cancel-import-task-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CancelImportTask", :http.request.configuration/output-deser-fn deser-cancel-import-task-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef cancel-import-task :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/cancel-import-task-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/cancel-import-task-result))

(clojure.core/defn create-vpn-connection-route ([create-vpn-connection-route-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-vpn-connection-route-request create-vpn-connection-route-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-vpn-connection-route-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateVpnConnectionRoute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-vpn-connection-route :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-vpn-connection-route-request) :ret clojure.core/true?)

(clojure.core/defn get-host-reservation-purchase-preview ([get-host-reservation-purchase-preview-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-get-host-reservation-purchase-preview-request get-host-reservation-purchase-preview-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/get-host-reservation-purchase-preview-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/get-host-reservation-purchase-preview-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "GetHostReservationPurchasePreview", :http.request.configuration/output-deser-fn deser-get-host-reservation-purchase-preview-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef get-host-reservation-purchase-preview :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/get-host-reservation-purchase-preview-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/get-host-reservation-purchase-preview-result))

(clojure.core/defn unassign-ipv-6-addresses ([unassign-ipv-6-addresses-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-unassign-ipv-6-addresses-request unassign-ipv-6-addresses-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/unassign-ipv-6-addresses-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/unassign-ipv-6-addresses-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "UnassignIpv6Addresses", :http.request.configuration/output-deser-fn deser-unassign-ipv-6-addresses-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef unassign-ipv-6-addresses :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/unassign-ipv-6-addresses-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/unassign-ipv-6-addresses-result))

(clojure.core/defn describe-vpc-attribute ([describe-vpc-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-vpc-attribute-request describe-vpc-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-vpc-attribute-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-vpc-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVpcAttribute", :http.request.configuration/output-deser-fn deser-describe-vpc-attribute-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpc-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/describe-vpc-attribute-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-vpc-attribute-result))

(clojure.core/defn describe-identity-id-format ([describe-identity-id-format-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-identity-id-format-request describe-identity-id-format-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-identity-id-format-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-identity-id-format-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeIdentityIdFormat", :http.request.configuration/output-deser-fn deser-describe-identity-id-format-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-identity-id-format :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/describe-identity-id-format-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-identity-id-format-result))

(clojure.core/defn get-console-screenshot ([get-console-screenshot-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-get-console-screenshot-request get-console-screenshot-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/get-console-screenshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/get-console-screenshot-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "GetConsoleScreenshot", :http.request.configuration/output-deser-fn deser-get-console-screenshot-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef get-console-screenshot :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/get-console-screenshot-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/get-console-screenshot-result))

(clojure.core/defn delete-vpc-endpoint-service-configurations ([delete-vpc-endpoint-service-configurations-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-vpc-endpoint-service-configurations-request delete-vpc-endpoint-service-configurations-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/delete-vpc-endpoint-service-configurations-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-vpc-endpoint-service-configurations-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteVpcEndpointServiceConfigurations", :http.request.configuration/output-deser-fn deser-delete-vpc-endpoint-service-configurations-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-vpc-endpoint-service-configurations :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-vpc-endpoint-service-configurations-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/delete-vpc-endpoint-service-configurations-result))

(clojure.core/defn revoke-security-group-egress ([revoke-security-group-egress-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-revoke-security-group-egress-request revoke-security-group-egress-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/revoke-security-group-egress-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RevokeSecurityGroupEgress", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef revoke-security-group-egress :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/revoke-security-group-egress-request) :ret clojure.core/true?)

(clojure.core/defn create-default-vpc ([] (create-default-vpc {})) ([create-default-vpc-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-default-vpc-request create-default-vpc-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-default-vpc-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-default-vpc-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateDefaultVpc", :http.request.configuration/output-deser-fn deser-create-default-vpc-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-default-vpc :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/create-default-vpc-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-default-vpc-result))

(clojure.core/defn create-instance-export-task ([create-instance-export-task-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-instance-export-task-request create-instance-export-task-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-instance-export-task-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-instance-export-task-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateInstanceExportTask", :http.request.configuration/output-deser-fn deser-create-instance-export-task-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-instance-export-task :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-instance-export-task-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-instance-export-task-result))

(clojure.core/defn disable-vpc-classic-link ([disable-vpc-classic-link-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-disable-vpc-classic-link-request disable-vpc-classic-link-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/disable-vpc-classic-link-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/disable-vpc-classic-link-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DisableVpcClassicLink", :http.request.configuration/output-deser-fn deser-disable-vpc-classic-link-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef disable-vpc-classic-link :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/disable-vpc-classic-link-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/disable-vpc-classic-link-result))

(clojure.core/defn import-instance ([import-instance-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-import-instance-request import-instance-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/import-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/import-instance-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ImportInstance", :http.request.configuration/output-deser-fn deser-import-instance-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef import-instance :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/import-instance-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/import-instance-result))

(clojure.core/defn describe-instances ([] (describe-instances {})) ([describe-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-instances-request describe-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeInstances", :http.request.configuration/output-deser-fn deser-describe-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-instances :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-instances-result))

(clojure.core/defn delete-dhcp-options ([delete-dhcp-options-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-dhcp-options-request delete-dhcp-options-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-dhcp-options-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteDhcpOptions", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-dhcp-options :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-dhcp-options-request) :ret clojure.core/true?)

(clojure.core/defn describe-account-attributes ([] (describe-account-attributes {})) ([describe-account-attributes-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-account-attributes-request describe-account-attributes-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-account-attributes-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-account-attributes-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeAccountAttributes", :http.request.configuration/output-deser-fn deser-describe-account-attributes-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-account-attributes :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-account-attributes-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-account-attributes-result))

(clojure.core/defn describe-vpc-endpoint-connections ([] (describe-vpc-endpoint-connections {})) ([describe-vpc-endpoint-connections-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-vpc-endpoint-connections-request describe-vpc-endpoint-connections-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-connections-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-connections-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVpcEndpointConnections", :http.request.configuration/output-deser-fn deser-describe-vpc-endpoint-connections-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpc-endpoint-connections :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-connections-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-connections-result))

(clojure.core/defn describe-vpc-endpoint-connection-notifications ([] (describe-vpc-endpoint-connection-notifications {})) ([describe-vpc-endpoint-connection-notifications-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-vpc-endpoint-connection-notifications-request describe-vpc-endpoint-connection-notifications-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-connection-notifications-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-connection-notifications-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVpcEndpointConnectionNotifications", :http.request.configuration/output-deser-fn deser-describe-vpc-endpoint-connection-notifications-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpc-endpoint-connection-notifications :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-connection-notifications-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-connection-notifications-result))

(clojure.core/defn associate-vpc-cidr-block ([associate-vpc-cidr-block-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-associate-vpc-cidr-block-request associate-vpc-cidr-block-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/associate-vpc-cidr-block-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/associate-vpc-cidr-block-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AssociateVpcCidrBlock", :http.request.configuration/output-deser-fn deser-associate-vpc-cidr-block-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef associate-vpc-cidr-block :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/associate-vpc-cidr-block-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/associate-vpc-cidr-block-result))

(clojure.core/defn describe-elastic-gpus ([] (describe-elastic-gpus {})) ([describe-elastic-gpus-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-elastic-gpus-request describe-elastic-gpus-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-elastic-gpus-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-elastic-gpus-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeElasticGpus", :http.request.configuration/output-deser-fn deser-describe-elastic-gpus-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-elastic-gpus :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-elastic-gpus-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-elastic-gpus-result))

(clojure.core/defn create-spot-datafeed-subscription ([create-spot-datafeed-subscription-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-spot-datafeed-subscription-request create-spot-datafeed-subscription-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-spot-datafeed-subscription-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-spot-datafeed-subscription-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateSpotDatafeedSubscription", :http.request.configuration/output-deser-fn deser-create-spot-datafeed-subscription-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-spot-datafeed-subscription :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-spot-datafeed-subscription-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-spot-datafeed-subscription-result))

(clojure.core/defn reset-fpga-image-attribute ([reset-fpga-image-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-reset-fpga-image-attribute-request reset-fpga-image-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/reset-fpga-image-attribute-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/reset-fpga-image-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ResetFpgaImageAttribute", :http.request.configuration/output-deser-fn deser-reset-fpga-image-attribute-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef reset-fpga-image-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/reset-fpga-image-attribute-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reset-fpga-image-attribute-result))

(clojure.core/defn create-customer-gateway ([create-customer-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-customer-gateway-request create-customer-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-customer-gateway-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-customer-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateCustomerGateway", :http.request.configuration/output-deser-fn deser-create-customer-gateway-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-customer-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-customer-gateway-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-customer-gateway-result))

(clojure.core/defn replace-network-acl-entry ([replace-network-acl-entry-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-replace-network-acl-entry-request replace-network-acl-entry-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/replace-network-acl-entry-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ReplaceNetworkAclEntry", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef replace-network-acl-entry :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/replace-network-acl-entry-request) :ret clojure.core/true?)

(clojure.core/defn create-egress-only-internet-gateway ([create-egress-only-internet-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-egress-only-internet-gateway-request create-egress-only-internet-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-egress-only-internet-gateway-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-egress-only-internet-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateEgressOnlyInternetGateway", :http.request.configuration/output-deser-fn deser-create-egress-only-internet-gateway-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-egress-only-internet-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-egress-only-internet-gateway-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-egress-only-internet-gateway-result))

(clojure.core/defn describe-host-reservation-offerings ([] (describe-host-reservation-offerings {})) ([describe-host-reservation-offerings-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-host-reservation-offerings-request describe-host-reservation-offerings-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-host-reservation-offerings-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-host-reservation-offerings-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeHostReservationOfferings", :http.request.configuration/output-deser-fn deser-describe-host-reservation-offerings-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-host-reservation-offerings :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-host-reservation-offerings-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-host-reservation-offerings-result))

(clojure.core/defn modify-vpc-tenancy ([modify-vpc-tenancy-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-vpc-tenancy-request modify-vpc-tenancy-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/modify-vpc-tenancy-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/modify-vpc-tenancy-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyVpcTenancy", :http.request.configuration/output-deser-fn deser-modify-vpc-tenancy-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-vpc-tenancy :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/modify-vpc-tenancy-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/modify-vpc-tenancy-result))

(clojure.core/defn modify-vpc-peering-connection-options ([modify-vpc-peering-connection-options-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-vpc-peering-connection-options-request modify-vpc-peering-connection-options-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/modify-vpc-peering-connection-options-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/modify-vpc-peering-connection-options-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyVpcPeeringConnectionOptions", :http.request.configuration/output-deser-fn deser-modify-vpc-peering-connection-options-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-vpc-peering-connection-options :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/modify-vpc-peering-connection-options-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/modify-vpc-peering-connection-options-result))

(clojure.core/defn replace-route ([replace-route-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-replace-route-request replace-route-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/replace-route-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ReplaceRoute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef replace-route :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/replace-route-request) :ret clojure.core/true?)

(clojure.core/defn describe-placement-groups ([] (describe-placement-groups {})) ([describe-placement-groups-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-placement-groups-request describe-placement-groups-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-placement-groups-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-placement-groups-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribePlacementGroups", :http.request.configuration/output-deser-fn deser-describe-placement-groups-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-placement-groups :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-placement-groups-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-placement-groups-result))

(clojure.core/defn describe-import-image-tasks ([] (describe-import-image-tasks {})) ([describe-import-image-tasks-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-import-image-tasks-request describe-import-image-tasks-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-import-image-tasks-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-import-image-tasks-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeImportImageTasks", :http.request.configuration/output-deser-fn deser-describe-import-image-tasks-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-import-image-tasks :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-import-image-tasks-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-import-image-tasks-result))

(clojure.core/defn modify-identity-id-format ([modify-identity-id-format-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-identity-id-format-request modify-identity-id-format-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/modify-identity-id-format-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyIdentityIdFormat", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-identity-id-format :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/modify-identity-id-format-request) :ret clojure.core/true?)

(clojure.core/defn copy-image ([copy-image-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-copy-image-request copy-image-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/copy-image-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/copy-image-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CopyImage", :http.request.configuration/output-deser-fn deser-copy-image-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef copy-image :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/copy-image-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/copy-image-result))

(clojure.core/defn create-flow-logs ([create-flow-logs-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-flow-logs-request create-flow-logs-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-flow-logs-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-flow-logs-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateFlowLogs", :http.request.configuration/output-deser-fn deser-create-flow-logs-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-flow-logs :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-flow-logs-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-flow-logs-result))

(clojure.core/defn associate-route-table ([associate-route-table-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-associate-route-table-request associate-route-table-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/associate-route-table-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/associate-route-table-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AssociateRouteTable", :http.request.configuration/output-deser-fn deser-associate-route-table-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef associate-route-table :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/associate-route-table-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/associate-route-table-result))

(clojure.core/defn describe-snapshots ([] (describe-snapshots {})) ([describe-snapshots-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-snapshots-request describe-snapshots-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-snapshots-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-snapshots-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeSnapshots", :http.request.configuration/output-deser-fn deser-describe-snapshots-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-snapshots :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-snapshots-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-snapshots-result))

(clojure.core/defn create-fpga-image ([create-fpga-image-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-fpga-image-request create-fpga-image-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-fpga-image-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-fpga-image-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateFpgaImage", :http.request.configuration/output-deser-fn deser-create-fpga-image-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-fpga-image :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-fpga-image-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-fpga-image-result))

(clojure.core/defn bundle-instance ([bundle-instance-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-bundle-instance-request bundle-instance-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/bundle-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/bundle-instance-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "BundleInstance", :http.request.configuration/output-deser-fn deser-bundle-instance-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef bundle-instance :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/bundle-instance-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/bundle-instance-result))

(clojure.core/defn replace-route-table-association ([replace-route-table-association-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-replace-route-table-association-request replace-route-table-association-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/replace-route-table-association-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/replace-route-table-association-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ReplaceRouteTableAssociation", :http.request.configuration/output-deser-fn deser-replace-route-table-association-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef replace-route-table-association :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/replace-route-table-association-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/replace-route-table-association-result))

(clojure.core/defn modify-vpc-endpoint-service-configuration ([modify-vpc-endpoint-service-configuration-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-vpc-endpoint-service-configuration-request modify-vpc-endpoint-service-configuration-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/modify-vpc-endpoint-service-configuration-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/modify-vpc-endpoint-service-configuration-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyVpcEndpointServiceConfiguration", :http.request.configuration/output-deser-fn deser-modify-vpc-endpoint-service-configuration-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-vpc-endpoint-service-configuration :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/modify-vpc-endpoint-service-configuration-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/modify-vpc-endpoint-service-configuration-result))

(clojure.core/defn release-hosts ([release-hosts-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-release-hosts-request release-hosts-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/release-hosts-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/release-hosts-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ReleaseHosts", :http.request.configuration/output-deser-fn deser-release-hosts-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef release-hosts :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/release-hosts-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/release-hosts-result))

(clojure.core/defn copy-snapshot ([copy-snapshot-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-copy-snapshot-request copy-snapshot-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/copy-snapshot-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/copy-snapshot-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CopySnapshot", :http.request.configuration/output-deser-fn deser-copy-snapshot-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef copy-snapshot :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/copy-snapshot-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/copy-snapshot-result))

(clojure.core/defn stop-instances ([stop-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-stop-instances-request stop-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/stop-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/stop-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "StopInstances", :http.request.configuration/output-deser-fn deser-stop-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef stop-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/stop-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/stop-instances-result))

(clojure.core/defn modify-fpga-image-attribute ([modify-fpga-image-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-fpga-image-attribute-request modify-fpga-image-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/modify-fpga-image-attribute-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/modify-fpga-image-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyFpgaImageAttribute", :http.request.configuration/output-deser-fn deser-modify-fpga-image-attribute-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-fpga-image-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/modify-fpga-image-attribute-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/modify-fpga-image-attribute-result))

(clojure.core/defn describe-vpn-connections ([] (describe-vpn-connections {})) ([describe-vpn-connections-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-vpn-connections-request describe-vpn-connections-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-vpn-connections-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-vpn-connections-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVpnConnections", :http.request.configuration/output-deser-fn deser-describe-vpn-connections-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpn-connections :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-vpn-connections-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-vpn-connections-result))

(clojure.core/defn detach-internet-gateway ([detach-internet-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-detach-internet-gateway-request detach-internet-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/detach-internet-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DetachInternetGateway", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef detach-internet-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/detach-internet-gateway-request) :ret clojure.core/true?)

(clojure.core/defn disassociate-vpc-cidr-block ([disassociate-vpc-cidr-block-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-disassociate-vpc-cidr-block-request disassociate-vpc-cidr-block-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/disassociate-vpc-cidr-block-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/disassociate-vpc-cidr-block-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DisassociateVpcCidrBlock", :http.request.configuration/output-deser-fn deser-disassociate-vpc-cidr-block-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef disassociate-vpc-cidr-block :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/disassociate-vpc-cidr-block-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/disassociate-vpc-cidr-block-result))

(clojure.core/defn describe-vpc-classic-link-dns-support ([] (describe-vpc-classic-link-dns-support {})) ([describe-vpc-classic-link-dns-support-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-vpc-classic-link-dns-support-request describe-vpc-classic-link-dns-support-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-vpc-classic-link-dns-support-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-vpc-classic-link-dns-support-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVpcClassicLinkDnsSupport", :http.request.configuration/output-deser-fn deser-describe-vpc-classic-link-dns-support-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpc-classic-link-dns-support :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-vpc-classic-link-dns-support-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-vpc-classic-link-dns-support-result))

(clojure.core/defn move-address-to-vpc ([move-address-to-vpc-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-move-address-to-vpc-request move-address-to-vpc-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/move-address-to-vpc-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/move-address-to-vpc-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "MoveAddressToVpc", :http.request.configuration/output-deser-fn deser-move-address-to-vpc-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef move-address-to-vpc :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/move-address-to-vpc-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/move-address-to-vpc-result))

(clojure.core/defn deregister-image ([deregister-image-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-deregister-image-request deregister-image-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/deregister-image-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeregisterImage", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef deregister-image :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/deregister-image-request) :ret clojure.core/true?)

(clojure.core/defn unmonitor-instances ([unmonitor-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-unmonitor-instances-request unmonitor-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/unmonitor-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/unmonitor-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "UnmonitorInstances", :http.request.configuration/output-deser-fn deser-unmonitor-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef unmonitor-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/unmonitor-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/unmonitor-instances-result))

(clojure.core/defn disassociate-subnet-cidr-block ([disassociate-subnet-cidr-block-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-disassociate-subnet-cidr-block-request disassociate-subnet-cidr-block-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/disassociate-subnet-cidr-block-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/disassociate-subnet-cidr-block-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DisassociateSubnetCidrBlock", :http.request.configuration/output-deser-fn deser-disassociate-subnet-cidr-block-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef disassociate-subnet-cidr-block :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/disassociate-subnet-cidr-block-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/disassociate-subnet-cidr-block-result))

(clojure.core/defn create-network-interface-permission ([create-network-interface-permission-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-network-interface-permission-request create-network-interface-permission-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-network-interface-permission-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-network-interface-permission-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateNetworkInterfacePermission", :http.request.configuration/output-deser-fn deser-create-network-interface-permission-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-network-interface-permission :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-network-interface-permission-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-network-interface-permission-result))

(clojure.core/defn reset-snapshot-attribute ([reset-snapshot-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-reset-snapshot-attribute-request reset-snapshot-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/reset-snapshot-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ResetSnapshotAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef reset-snapshot-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/reset-snapshot-attribute-request) :ret clojure.core/true?)

(clojure.core/defn delete-flow-logs ([delete-flow-logs-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-flow-logs-request delete-flow-logs-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/delete-flow-logs-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-flow-logs-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteFlowLogs", :http.request.configuration/output-deser-fn deser-delete-flow-logs-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-flow-logs :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-flow-logs-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/delete-flow-logs-result))

(clojure.core/defn authorize-security-group-egress ([authorize-security-group-egress-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-authorize-security-group-egress-request authorize-security-group-egress-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/authorize-security-group-egress-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AuthorizeSecurityGroupEgress", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef authorize-security-group-egress :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/authorize-security-group-egress-request) :ret clojure.core/true?)

(clojure.core/defn unassign-private-ip-addresses ([unassign-private-ip-addresses-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-unassign-private-ip-addresses-request unassign-private-ip-addresses-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/unassign-private-ip-addresses-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "UnassignPrivateIpAddresses", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef unassign-private-ip-addresses :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/unassign-private-ip-addresses-request) :ret clojure.core/true?)

(clojure.core/defn describe-vpc-peering-connections ([] (describe-vpc-peering-connections {})) ([describe-vpc-peering-connections-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-vpc-peering-connections-request describe-vpc-peering-connections-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-vpc-peering-connections-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-vpc-peering-connections-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVpcPeeringConnections", :http.request.configuration/output-deser-fn deser-describe-vpc-peering-connections-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpc-peering-connections :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-vpc-peering-connections-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-vpc-peering-connections-result))

(clojure.core/defn reject-vpc-endpoint-connections ([reject-vpc-endpoint-connections-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-reject-vpc-endpoint-connections-request reject-vpc-endpoint-connections-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/reject-vpc-endpoint-connections-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/reject-vpc-endpoint-connections-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RejectVpcEndpointConnections", :http.request.configuration/output-deser-fn deser-reject-vpc-endpoint-connections-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef reject-vpc-endpoint-connections :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/reject-vpc-endpoint-connections-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reject-vpc-endpoint-connections-result))

(clojure.core/defn monitor-instances ([monitor-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-monitor-instances-request monitor-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/monitor-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/monitor-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "MonitorInstances", :http.request.configuration/output-deser-fn deser-monitor-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef monitor-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/monitor-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/monitor-instances-result))

(clojure.core/defn describe-instance-credit-specifications ([] (describe-instance-credit-specifications {})) ([describe-instance-credit-specifications-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-instance-credit-specifications-request describe-instance-credit-specifications-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-instance-credit-specifications-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-instance-credit-specifications-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeInstanceCreditSpecifications", :http.request.configuration/output-deser-fn deser-describe-instance-credit-specifications-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-instance-credit-specifications :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-instance-credit-specifications-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-instance-credit-specifications-result))

(clojure.core/defn describe-iam-instance-profile-associations ([] (describe-iam-instance-profile-associations {})) ([describe-iam-instance-profile-associations-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-iam-instance-profile-associations-request describe-iam-instance-profile-associations-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-iam-instance-profile-associations-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-iam-instance-profile-associations-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeIamInstanceProfileAssociations", :http.request.configuration/output-deser-fn deser-describe-iam-instance-profile-associations-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-iam-instance-profile-associations :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-iam-instance-profile-associations-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-iam-instance-profile-associations-result))

(clojure.core/defn describe-flow-logs ([] (describe-flow-logs {})) ([describe-flow-logs-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-flow-logs-request describe-flow-logs-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-flow-logs-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-flow-logs-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeFlowLogs", :http.request.configuration/output-deser-fn deser-describe-flow-logs-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-flow-logs :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-flow-logs-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-flow-logs-result))

(clojure.core/defn detach-vpn-gateway ([detach-vpn-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-detach-vpn-gateway-request detach-vpn-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/detach-vpn-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DetachVpnGateway", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef detach-vpn-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/detach-vpn-gateway-request) :ret clojure.core/true?)

(clojure.core/defn cancel-spot-fleet-requests ([cancel-spot-fleet-requests-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-cancel-spot-fleet-requests-request cancel-spot-fleet-requests-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/cancel-spot-fleet-requests-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/cancel-spot-fleet-requests-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CancelSpotFleetRequests", :http.request.configuration/output-deser-fn deser-cancel-spot-fleet-requests-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef cancel-spot-fleet-requests :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/cancel-spot-fleet-requests-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/cancel-spot-fleet-requests-response))

(clojure.core/defn cancel-reserved-instances-listing ([cancel-reserved-instances-listing-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-cancel-reserved-instances-listing-request cancel-reserved-instances-listing-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/cancel-reserved-instances-listing-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/cancel-reserved-instances-listing-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CancelReservedInstancesListing", :http.request.configuration/output-deser-fn deser-cancel-reserved-instances-listing-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef cancel-reserved-instances-listing :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/cancel-reserved-instances-listing-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/cancel-reserved-instances-listing-result))

(clojure.core/defn modify-volume-attribute ([modify-volume-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-volume-attribute-request modify-volume-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/modify-volume-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyVolumeAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-volume-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/modify-volume-attribute-request) :ret clojure.core/true?)

(clojure.core/defn modify-snapshot-attribute ([modify-snapshot-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-snapshot-attribute-request modify-snapshot-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/modify-snapshot-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifySnapshotAttribute", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-snapshot-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/modify-snapshot-attribute-request) :ret clojure.core/true?)

(clojure.core/defn attach-vpn-gateway ([attach-vpn-gateway-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-attach-vpn-gateway-request attach-vpn-gateway-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/attach-vpn-gateway-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/attach-vpn-gateway-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AttachVpnGateway", :http.request.configuration/output-deser-fn deser-attach-vpn-gateway-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef attach-vpn-gateway :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/attach-vpn-gateway-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attach-vpn-gateway-result))

(clojure.core/defn purchase-scheduled-instances ([purchase-scheduled-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-purchase-scheduled-instances-request purchase-scheduled-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/purchase-scheduled-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/purchase-scheduled-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "PurchaseScheduledInstances", :http.request.configuration/output-deser-fn deser-purchase-scheduled-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef purchase-scheduled-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/purchase-scheduled-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/purchase-scheduled-instances-result))

(clojure.core/defn create-security-group ([create-security-group-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-security-group-request create-security-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-security-group-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-security-group-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateSecurityGroup", :http.request.configuration/output-deser-fn deser-create-security-group-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-security-group :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-security-group-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-security-group-result))

(clojure.core/defn cancel-bundle-task ([cancel-bundle-task-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-cancel-bundle-task-request cancel-bundle-task-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/cancel-bundle-task-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/cancel-bundle-task-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CancelBundleTask", :http.request.configuration/output-deser-fn deser-cancel-bundle-task-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef cancel-bundle-task :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/cancel-bundle-task-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/cancel-bundle-task-result))

(clojure.core/defn restore-address-to-classic ([restore-address-to-classic-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-restore-address-to-classic-request restore-address-to-classic-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/restore-address-to-classic-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/restore-address-to-classic-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RestoreAddressToClassic", :http.request.configuration/output-deser-fn deser-restore-address-to-classic-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef restore-address-to-classic :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/restore-address-to-classic-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/restore-address-to-classic-result))

(clojure.core/defn terminate-instances ([terminate-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-terminate-instances-request terminate-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/terminate-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/terminate-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "TerminateInstances", :http.request.configuration/output-deser-fn deser-terminate-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef terminate-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/terminate-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/terminate-instances-result))

(clojure.core/defn describe-regions ([] (describe-regions {})) ([describe-regions-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-regions-request describe-regions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-regions-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-regions-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeRegions", :http.request.configuration/output-deser-fn deser-describe-regions-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-regions :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-regions-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-regions-result))

(clojure.core/defn create-network-interface ([create-network-interface-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-network-interface-request create-network-interface-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-network-interface-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-network-interface-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateNetworkInterface", :http.request.configuration/output-deser-fn deser-create-network-interface-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-network-interface :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-network-interface-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-network-interface-result))

(clojure.core/defn create-vpc-peering-connection ([] (create-vpc-peering-connection {})) ([create-vpc-peering-connection-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-vpc-peering-connection-request create-vpc-peering-connection-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-vpc-peering-connection-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-vpc-peering-connection-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateVpcPeeringConnection", :http.request.configuration/output-deser-fn deser-create-vpc-peering-connection-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-vpc-peering-connection :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/create-vpc-peering-connection-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-vpc-peering-connection-result))

(clojure.core/defn create-vpc-endpoint ([create-vpc-endpoint-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-vpc-endpoint-request create-vpc-endpoint-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-vpc-endpoint-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-vpc-endpoint-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateVpcEndpoint", :http.request.configuration/output-deser-fn deser-create-vpc-endpoint-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-vpc-endpoint :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-vpc-endpoint-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-vpc-endpoint-result))

(clojure.core/defn create-placement-group ([create-placement-group-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-placement-group-request create-placement-group-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-placement-group-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreatePlacementGroup", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-placement-group :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-placement-group-request) :ret clojure.core/true?)

(clojure.core/defn delete-network-interface-permission ([delete-network-interface-permission-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-network-interface-permission-request delete-network-interface-permission-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/delete-network-interface-permission-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-network-interface-permission-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteNetworkInterfacePermission", :http.request.configuration/output-deser-fn deser-delete-network-interface-permission-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-network-interface-permission :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-network-interface-permission-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/delete-network-interface-permission-result))

(clojure.core/defn attach-classic-link-vpc ([attach-classic-link-vpc-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-attach-classic-link-vpc-request attach-classic-link-vpc-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/attach-classic-link-vpc-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/attach-classic-link-vpc-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "AttachClassicLinkVpc", :http.request.configuration/output-deser-fn deser-attach-classic-link-vpc-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef attach-classic-link-vpc :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/attach-classic-link-vpc-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/attach-classic-link-vpc-result))

(clojure.core/defn describe-aggregate-id-format ([] (describe-aggregate-id-format {})) ([describe-aggregate-id-format-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-aggregate-id-format-request describe-aggregate-id-format-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-aggregate-id-format-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-aggregate-id-format-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeAggregateIdFormat", :http.request.configuration/output-deser-fn deser-describe-aggregate-id-format-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-aggregate-id-format :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-aggregate-id-format-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-aggregate-id-format-result))

(clojure.core/defn replace-iam-instance-profile-association ([replace-iam-instance-profile-association-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-replace-iam-instance-profile-association-request replace-iam-instance-profile-association-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/replace-iam-instance-profile-association-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/replace-iam-instance-profile-association-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ReplaceIamInstanceProfileAssociation", :http.request.configuration/output-deser-fn deser-replace-iam-instance-profile-association-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef replace-iam-instance-profile-association :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/replace-iam-instance-profile-association-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/replace-iam-instance-profile-association-result))

(clojure.core/defn modify-fleet ([modify-fleet-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-fleet-request modify-fleet-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/modify-fleet-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/modify-fleet-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyFleet", :http.request.configuration/output-deser-fn deser-modify-fleet-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-fleet :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/modify-fleet-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/modify-fleet-result))

(clojure.core/defn update-security-group-rule-descriptions-ingress ([update-security-group-rule-descriptions-ingress-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-update-security-group-rule-descriptions-ingress-request update-security-group-rule-descriptions-ingress-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/update-security-group-rule-descriptions-ingress-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/update-security-group-rule-descriptions-ingress-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "UpdateSecurityGroupRuleDescriptionsIngress", :http.request.configuration/output-deser-fn deser-update-security-group-rule-descriptions-ingress-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef update-security-group-rule-descriptions-ingress :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/update-security-group-rule-descriptions-ingress-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/update-security-group-rule-descriptions-ingress-result))

(clojure.core/defn request-spot-fleet ([request-spot-fleet-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-request-spot-fleet-request request-spot-fleet-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/request-spot-fleet-response, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/request-spot-fleet-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RequestSpotFleet", :http.request.configuration/output-deser-fn deser-request-spot-fleet-response, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef request-spot-fleet :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/request-spot-fleet-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/request-spot-fleet-response))

(clojure.core/defn detach-classic-link-vpc ([detach-classic-link-vpc-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-detach-classic-link-vpc-request detach-classic-link-vpc-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/detach-classic-link-vpc-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/detach-classic-link-vpc-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DetachClassicLinkVpc", :http.request.configuration/output-deser-fn deser-detach-classic-link-vpc-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef detach-classic-link-vpc :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/detach-classic-link-vpc-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/detach-classic-link-vpc-result))

(clojure.core/defn describe-vpc-endpoint-service-permissions ([describe-vpc-endpoint-service-permissions-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-vpc-endpoint-service-permissions-request describe-vpc-endpoint-service-permissions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-service-permissions-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-service-permissions-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVpcEndpointServicePermissions", :http.request.configuration/output-deser-fn deser-describe-vpc-endpoint-service-permissions-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpc-endpoint-service-permissions :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-service-permissions-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoint-service-permissions-result))

(clojure.core/defn describe-network-interface-permissions ([] (describe-network-interface-permissions {})) ([describe-network-interface-permissions-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-network-interface-permissions-request describe-network-interface-permissions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-network-interface-permissions-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-network-interface-permissions-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeNetworkInterfacePermissions", :http.request.configuration/output-deser-fn deser-describe-network-interface-permissions-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-network-interface-permissions :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-network-interface-permissions-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-network-interface-permissions-result))

(clojure.core/defn create-vpn-connection ([create-vpn-connection-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-vpn-connection-request create-vpn-connection-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/create-vpn-connection-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-vpn-connection-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateVpnConnection", :http.request.configuration/output-deser-fn deser-create-vpn-connection-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-vpn-connection :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-vpn-connection-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/create-vpn-connection-result))

(clojure.core/defn describe-fleet-instances ([describe-fleet-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-fleet-instances-request describe-fleet-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-fleet-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-fleet-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeFleetInstances", :http.request.configuration/output-deser-fn deser-describe-fleet-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-fleet-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/describe-fleet-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-fleet-instances-result))

(clojure.core/defn delete-launch-template-versions ([delete-launch-template-versions-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-launch-template-versions-request delete-launch-template-versions-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/delete-launch-template-versions-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-launch-template-versions-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteLaunchTemplateVersions", :http.request.configuration/output-deser-fn deser-delete-launch-template-versions-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-launch-template-versions :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-launch-template-versions-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/delete-launch-template-versions-result))

(clojure.core/defn modify-vpc-endpoint ([modify-vpc-endpoint-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-vpc-endpoint-request modify-vpc-endpoint-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/modify-vpc-endpoint-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/modify-vpc-endpoint-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyVpcEndpoint", :http.request.configuration/output-deser-fn deser-modify-vpc-endpoint-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-vpc-endpoint :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/modify-vpc-endpoint-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/modify-vpc-endpoint-result))

(clojure.core/defn enable-volume-io ([enable-volume-io-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-enable-volume-io-request enable-volume-io-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/enable-volume-io-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "EnableVolumeIO", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef enable-volume-io :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/enable-volume-io-request) :ret clojure.core/true?)

(clojure.core/defn modify-id-format ([modify-id-format-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-modify-id-format-request modify-id-format-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/modify-id-format-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ModifyIdFormat", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef modify-id-format :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/modify-id-format-request) :ret clojure.core/true?)

(clojure.core/defn run-instances ([run-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-run-instances-request run-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/reservation, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/run-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "RunInstances", :http.request.configuration/output-deser-fn deser-reservation, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef run-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/run-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/reservation))

(clojure.core/defn create-key-pair ([create-key-pair-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-create-key-pair-request create-key-pair-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/key-pair, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/create-key-pair-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CreateKeyPair", :http.request.configuration/output-deser-fn deser-key-pair, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef create-key-pair :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/create-key-pair-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/key-pair))

(clojure.core/defn delete-network-interface ([delete-network-interface-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-network-interface-request delete-network-interface-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-network-interface-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteNetworkInterface", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-network-interface :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-network-interface-request) :ret clojure.core/true?)

(clojure.core/defn delete-spot-datafeed-subscription ([] (delete-spot-datafeed-subscription {})) ([delete-spot-datafeed-subscription-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-spot-datafeed-subscription-request delete-spot-datafeed-subscription-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-spot-datafeed-subscription-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteSpotDatafeedSubscription", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-spot-datafeed-subscription :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/delete-spot-datafeed-subscription-request) :ret clojure.core/true?)

(clojure.core/defn describe-vpc-endpoints ([] (describe-vpc-endpoints {})) ([describe-vpc-endpoints-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-vpc-endpoints-request describe-vpc-endpoints-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoints-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoints-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeVpcEndpoints", :http.request.configuration/output-deser-fn deser-describe-vpc-endpoints-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-vpc-endpoints :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoints-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-vpc-endpoints-result))

(clojure.core/defn describe-hosts ([] (describe-hosts {})) ([describe-hosts-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-hosts-request describe-hosts-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/describe-hosts-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-hosts-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeHosts", :http.request.configuration/output-deser-fn deser-describe-hosts-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-hosts :args (clojure.spec.alpha/? :portkey.aws.ec2.-2016-11-15/describe-hosts-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/describe-hosts-result))

(clojure.core/defn delete-vpn-connection ([delete-vpn-connection-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-vpn-connection-request delete-vpn-connection-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec nil, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-vpn-connection-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteVpnConnection", :http.request.configuration/output-deser-fn (clojure.core/fn [& args__28639__auto__] {}), :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-vpn-connection :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-vpn-connection-request) :ret clojure.core/true?)

(clojure.core/defn start-instances ([start-instances-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-start-instances-request start-instances-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/start-instances-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/start-instances-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "StartInstances", :http.request.configuration/output-deser-fn deser-start-instances-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef start-instances :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/start-instances-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/start-instances-result))

(clojure.core/defn detach-volume ([detach-volume-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-detach-volume-request detach-volume-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/volume-attachment, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/detach-volume-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DetachVolume", :http.request.configuration/output-deser-fn deser-volume-attachment, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef detach-volume :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/detach-volume-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/volume-attachment))

(clojure.core/defn confirm-product-instance ([confirm-product-instance-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-confirm-product-instance-request confirm-product-instance-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/confirm-product-instance-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/confirm-product-instance-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "ConfirmProductInstance", :http.request.configuration/output-deser-fn deser-confirm-product-instance-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef confirm-product-instance :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/confirm-product-instance-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/confirm-product-instance-result))

(clojure.core/defn delete-vpc-peering-connection ([delete-vpc-peering-connection-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-delete-vpc-peering-connection-request delete-vpc-peering-connection-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/delete-vpc-peering-connection-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/delete-vpc-peering-connection-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DeleteVpcPeeringConnection", :http.request.configuration/output-deser-fn deser-delete-vpc-peering-connection-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef delete-vpc-peering-connection :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/delete-vpc-peering-connection-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/delete-vpc-peering-connection-result))

(clojure.core/defn get-launch-template-data ([get-launch-template-data-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-get-launch-template-data-request get-launch-template-data-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/get-launch-template-data-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/get-launch-template-data-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "GetLaunchTemplateData", :http.request.configuration/output-deser-fn deser-get-launch-template-data-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef get-launch-template-data :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/get-launch-template-data-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/get-launch-template-data-result))

(clojure.core/defn describe-image-attribute ([describe-image-attribute-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-describe-image-attribute-request describe-image-attribute-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/image-attribute, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/describe-image-attribute-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "DescribeImageAttribute", :http.request.configuration/output-deser-fn deser-image-attribute, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef describe-image-attribute :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/describe-image-attribute-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/image-attribute))

(clojure.core/defn cancel-spot-instance-requests ([cancel-spot-instance-requests-requestinput] (clojure.core/let [request-function-result__28640__auto__ (req-cancel-spot-instance-requests-request cancel-spot-instance-requests-requestinput)] (portkey.aws/-call-http (clojure.core/into request-function-result__28640__auto__ {:http.request.configuration/endpoints portkey.aws.ec2.-2016-11-15/endpoints, :http.request.configuration/target-prefix nil, :http.request.spec/output-spec :portkey.aws.ec2.-2016-11-15/cancel-spot-instance-requests-result, :http.request.configuration/mime-type {"content-type" "application/x-www-form-urlencoded; charset=utf-8"}, :http.request.configuration/request-uri "/", :http.request.configuration/version "2016-11-15", :http.request.configuration/service-id "EC2", :http.request.spec/input-spec :portkey.aws.ec2.-2016-11-15/cancel-spot-instance-requests-request, :http.request.configuration/protocol "ec2", :http.request.configuration/method :post, :http.request.configuration/response-code nil, :http.request.configuration/action "CancelSpotInstanceRequests", :http.request.configuration/output-deser-fn deser-cancel-spot-instance-requests-result, :http.request.spec/error-spec {}})))))
(clojure.spec.alpha/fdef cancel-spot-instance-requests :args (clojure.spec.alpha/tuple :portkey.aws.ec2.-2016-11-15/cancel-spot-instance-requests-request) :ret (clojure.spec.alpha/and :portkey.aws.ec2.-2016-11-15/cancel-spot-instance-requests-result))
